// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : boston

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_boston.exe ml2cpp-demo_BaggingRegressor_Pipeline_boston.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 3.3936090099009903 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 12.113861386138614 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 10.983613861386127 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.07178217821782178 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.5541153465346542 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 6.299148514851482 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 67.85049504950491 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 3.8198420792079233 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 9.55940594059406 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 405.8019801980198 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 18.40915841584154 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 358.3797277227715 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 12.626584158415856 ) : ( Feature_12)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 3.3936090099009903 ) / 8.000616555737787 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 12.113861386138614 ) / 24.187656534977855 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 10.983613861386127 ) / 6.8177472477399235 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.07178217821782178 ) / 0.2581269011709685 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.5541153465346542 ) / 0.11800809760824685 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 6.299148514851482 ) / 0.7060417397996938 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 67.85049504950491 ) / 28.107403181658597 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 3.8198420792079233 ) / 2.0933726902675627 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 9.55940594059406 ) / 8.728803783375893 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 405.8019801980198 ) / 169.7858592930543 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 18.40915841584154 ) / 2.166792648327246 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 358.3797277227715 ) / 90.64691624336051 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 12.626584158415856 ) / 7.167938324035357 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {22.31898734 }} ,
					{ 7 ,  {20.08 }} ,
					{ 9 ,  {29.5952381 }} ,
					{ 10 ,  {24.57 }} ,
					{ 14 ,  {19.62222222 }} ,
					{ 15 ,  {15.33157895 }} ,
					{ 16 ,  {27.5 }} ,
					{ 19 ,  {15.81034483 }} ,
					{ 20 ,  {11.675 }} ,
					{ 22 ,  {12.60666667 }} ,
					{ 23 ,  {9.77727273 }} ,
					{ 28 ,  {35.25 }} ,
					{ 29 ,  {31. }} ,
					{ 31 ,  {32.18 }} ,
					{ 32 ,  {23.6 }} ,
					{ 34 ,  {17.8 }} ,
					{ 35 ,  {15. }} ,
					{ 37 ,  {21.9 }} ,
					{ 40 ,  {43.1 }} ,
					{ 41 ,  {42.3 }} ,
					{ 43 ,  {50. }} ,
					{ 44 ,  {45.76153846 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.9147497415542603) ? ( (scaler_output_14 <= 0.30391107499599457) ? ( (scaler_output_9 <= -1.2385239005088806) ? ( 3 ) : ( (scaler_output_7 <= 0.32838211953639984) ? ( (scaler_output_14 <= -0.1871645823121071) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_14 <= -0.7793850898742676) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_6 <= 0.4142483025789261) ? ( (scaler_output_7 <= 0.4466470703482628) ? ( (scaler_output_2 <= -0.3549475222826004) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) : ( (scaler_output_14 <= 0.9582135677337646) ? ( (scaler_output_2 <= 1.1036638021469116) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_2 <= 1.011514663696289) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_7 <= 1.6583318710327148) ? ( (scaler_output_6 <= 0.8887920081615448) ? ( (scaler_output_11 <= -0.817512035369873) ? ( (scaler_output_2 <= -0.33112747967243195) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_8 <= 0.39489611983299255) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_13 <= 0.30894897878170013) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_13 <= 0.039110785350203514) ? ( 37 ) : ( (scaler_output_7 <= 1.8814064860343933) ? ( (scaler_output_12 <= -2.1041045784950256) ? ( 40 ) : ( 41 ) ) : ( (scaler_output_12 <= -1.6656686067581177) ? ( 43 ) : ( 44 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {23.35652174 }} ,
					{ 7 ,  {18.98888889 }} ,
					{ 9 ,  {30.28153846 }} ,
					{ 10 ,  {24.35833333 }} ,
					{ 14 ,  {45.53333333 }} ,
					{ 15 ,  {49.82857143 }} ,
					{ 17 ,  {37.6 }} ,
					{ 18 ,  {45.43333333 }} ,
					{ 19 ,  {21.9 }} ,
					{ 24 ,  {20.63866667 }} ,
					{ 25 ,  {27.1 }} ,
					{ 27 ,  {19.5547619 }} ,
					{ 28 ,  {15.37428571 }} ,
					{ 31 ,  {27.5 }} ,
					{ 32 ,  {30.6 }} ,
					{ 33 ,  {22. }} ,
					{ 37 ,  {17.01666667 }} ,
					{ 38 ,  {14.65454545 }} ,
					{ 40 ,  {13.44444444 }} ,
					{ 41 ,  {14.2 }} ,
					{ 44 ,  {13.575 }} ,
					{ 45 ,  {11.65 }} ,
					{ 47 ,  {8.65714286 }} ,
					{ 48 ,  {13.33333333 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_14 <= -0.4006150811910629) ? ( (scaler_output_7 <= 1.6059269905090332) ? ( (scaler_output_9 <= -1.1153733730316162) ? ( 3 ) : ( (scaler_output_7 <= 0.324841246008873) ? ( (scaler_output_12 <= 1.011098861694336) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_4 <= -0.36648671329021454) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_12 <= 0.3188314288854599) ? ( (scaler_output_10 <= -0.35049544274806976) ? ( (scaler_output_7 <= 2.161843180656433) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_14 <= -1.269763171672821) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (scaler_output_14 <= 1.0077396929264069) ? ( (scaler_output_7 <= 0.7100875973701477) ? ( (scaler_output_12 <= 0.5726628303527832) ? ( (scaler_output_14 <= 0.8856683075428009) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_14 <= 0.3185596466064453) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_3 <= 0.5327568054199219) ? ( (scaler_output_7 <= 0.8927963376045227) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) : ( (scaler_output_11 <= 0.8581281453371048) ? ( (scaler_output_12 <= 0.7572674602270126) ? ( (scaler_output_13 <= 0.33967258036136627) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_14 <= 1.410923957824707) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_output_9 <= -1.1498392820358276) ? ( (scaler_output_9 <= -1.169305443763733) ? ( 44 ) : ( 45 ) ) : ( (scaler_output_9 <= -0.8471458852291107) ? ( 47 ) : ( 48 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {23.67142857 }} ,
					{ 7 ,  {20.3 }} ,
					{ 9 ,  {31.51818182 }} ,
					{ 10 ,  {26.41176471 }} ,
					{ 14 ,  {18.12592593 }} ,
					{ 15 ,  {27.5 }} ,
					{ 17 ,  {15.49090909 }} ,
					{ 18 ,  {11.81666667 }} ,
					{ 21 ,  {14.33888889 }} ,
					{ 22 ,  {11.26666667 }} ,
					{ 24 ,  {16.56666667 }} ,
					{ 25 ,  {8.90869565 }} ,
					{ 30 ,  {31.31428571 }} ,
					{ 31 ,  {33.99565217 }} ,
					{ 33 ,  {23.6 }} ,
					{ 34 ,  {30.8 }} ,
					{ 35 ,  {15. }} ,
					{ 38 ,  {50. }} ,
					{ 40 ,  {40.7 }} ,
					{ 41 ,  {43.49090909 }} ,
					{ 42 ,  {50. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.9614891707897186) ? ( (scaler_output_14 <= 0.30391107499599457) ? ( (scaler_output_9 <= -1.2385239005088806) ? ( 3 ) : ( (scaler_output_7 <= 0.3262576013803482) ? ( (scaler_output_14 <= -0.7054446935653687) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_14 <= -1.1121167540550232) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_14 <= 1.0077396929264069) ? ( (scaler_output_6 <= 0.9226879775524139) ? ( (scaler_output_8 <= 1.122462511062622) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_2 <= 1.1036638021469116) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_9 <= -1.0834153294563293) ? ( (scaler_output_2 <= 1.6478406190872192) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_6 <= 0.35916733741760254) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_6 <= 0.8887920081615448) ? ( (scaler_output_8 <= 0.5461018532514572) ? ( (scaler_output_13 <= 0.36135008931159973) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_2 <= -0.3715287446975708) ? ( 33 ) : ( 34 ) ) ) : ( 35 ) ) : ( (scaler_output_2 <= -0.3520721197128296) ? ( (scaler_output_4 <= -1.4284210801124573) ? ( 38 ) : ( (scaler_output_3 <= -0.08739423751831055) ? ( 40 ) : ( 41 ) ) ) : ( 42 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {27.9 }} ,
					{ 5 ,  {50. }} ,
					{ 8 ,  {23.27 }} ,
					{ 9 ,  {27.24333333 }} ,
					{ 11 ,  {21.868 }} ,
					{ 12 ,  {19.68404255 }} ,
					{ 16 ,  {21.09375 }} ,
					{ 17 ,  {17.625 }} ,
					{ 19 ,  {13.95 }} ,
					{ 20 ,  {16.34444444 }} ,
					{ 23 ,  {15.0725 }} ,
					{ 24 ,  {12.43636364 }} ,
					{ 26 ,  {10.925 }} ,
					{ 27 ,  {5.66666667 }} ,
					{ 32 ,  {31.05 }} ,
					{ 33 ,  {35.39473684 }} ,
					{ 35 ,  {33.13333333 }} ,
					{ 36 ,  {27.57333333 }} ,
					{ 38 ,  {15. }} ,
					{ 39 ,  {17.8 }} ,
					{ 42 ,  {50. }} ,
					{ 44 ,  {50. }} ,
					{ 45 ,  {48.8 }} ,
					{ 48 ,  {44.82727273 }} ,
					{ 49 ,  {50. }} ,
					{ 51 ,  {39.43333333 }} ,
					{ 52 ,  {42.8 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.7561188638210297) ? ( (scaler_output_14 <= 0.3185596466064453) ? ( (scaler_output_9 <= -1.1631909012794495) ? ( (scaler_output_7 <= -0.7898237407207489) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_14 <= -0.4096832275390625) ? ( (scaler_output_7 <= 0.3439619392156601) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -0.732110321521759) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_12 <= 0.572662815451622) ? ( (scaler_output_8 <= 0.9072166979312897) ? ( (scaler_output_2 <= -0.38618262112140656) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_9 <= -1.1114084124565125) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_14 <= 1.2267705798149109) ? ( (scaler_output_2 <= 1.0341317057609558) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_2 <= 3.912641167640686) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_6 <= 0.8887920081615448) ? ( (scaler_output_11 <= -0.817512035369873) ? ( (scaler_output_7 <= 0.8665939271450043) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_12 <= -1.158005803823471) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_9 <= -0.9245091080665588) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_12 <= -1.6656686067581177) ? ( (scaler_output_14 <= -0.9921380281448364) ? ( 42 ) : ( (scaler_output_6 <= 0.48204025626182556) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_13 <= 0.3989685922861099) ? ( (scaler_output_14 <= -1.1623404026031494) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_10 <= -0.5223402827978134) ? ( 51 ) : ( 52 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {50. }} ,
					{ 6 ,  {23.67391304 }} ,
					{ 7 ,  {20.85238095 }} ,
					{ 10 ,  {26.68 }} ,
					{ 11 ,  {32.76956522 }} ,
					{ 13 ,  {30.31666667 }} ,
					{ 14 ,  {24.846875 }} ,
					{ 18 ,  {14.55833333 }} ,
					{ 19 ,  {11.775 }} ,
					{ 20 ,  {5. }} ,
					{ 23 ,  {20.54444444 }} ,
					{ 24 ,  {17.3 }} ,
					{ 26 ,  {18.53076923 }} ,
					{ 27 ,  {15.412 }} ,
					{ 32 ,  {45.7 }} ,
					{ 33 ,  {43.225 }} ,
					{ 34 ,  {50. }} ,
					{ 35 ,  {50. }} ,
					{ 38 ,  {33.4 }} ,
					{ 39 ,  {37.6 }} ,
					{ 41 ,  {50. }} ,
					{ 43 ,  {41.7 }} ,
					{ 44 ,  {42.8 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.5818490982055664) ? ( (scaler_output_14 <= 0.19858092814683914) ? ( (scaler_output_7 <= 0.3510436713695526) ? ( (scaler_output_9 <= -1.160897970199585) ? ( 4 ) : ( (scaler_output_14 <= -0.67265984416008) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_8 <= -0.7560462057590485) ? ( (scaler_output_7 <= 0.6066942811012268) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_13 <= 0.35395878553390503) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_9 <= -0.8675674796104431) ? ( (scaler_output_2 <= 5.611403822898865) ? ( (scaler_output_2 <= 0.5380305349826813) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_2 <= -0.3479299396276474) ? ( (scaler_output_9 <= 0.8361186385154724) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_8 <= 0.62437304854393) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_10 <= -0.4077770560979843) ? ( (scaler_output_7 <= 2.161843180656433) ? ( (scaler_output_2 <= -0.2989368289709091) ? ( (scaler_output_11 <= -1.0354335606098175) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( 35 ) ) : ( (scaler_output_7 <= 2.6207395792007446) ? ( (scaler_output_7 <= 2.0265820622444153) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_9 <= -0.21660837857052684) ? ( 41 ) : ( (scaler_output_9 <= 1.2194235143251717) ? ( 43 ) : ( 44 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {26.01 }} ,
					{ 6 ,  {23.2625 }} ,
					{ 8 ,  {26. }} ,
					{ 9 ,  {20.87232143 }} ,
					{ 12 ,  {29.57 }} ,
					{ 13 ,  {25.74285714 }} ,
					{ 14 ,  {50. }} ,
					{ 18 ,  {20.58571429 }} ,
					{ 19 ,  {27.1 }} ,
					{ 21 ,  {20.5 }} ,
					{ 22 ,  {16.17297297 }} ,
					{ 25 ,  {16.53333333 }} ,
					{ 26 ,  {10.075 }} ,
					{ 28 ,  {13.36 }} ,
					{ 29 ,  {17.91111111 }} ,
					{ 34 ,  {28.86666667 }} ,
					{ 35 ,  {34.328125 }} ,
					{ 37 ,  {26.05 }} ,
					{ 38 ,  {33.15333333 }} ,
					{ 41 ,  {24.88 }} ,
					{ 42 ,  {29.8 }} ,
					{ 43 ,  {10.4 }} ,
					{ 47 ,  {44.025 }} ,
					{ 48 ,  {49.8 }} ,
					{ 50 ,  {46.53333333 }} ,
					{ 51 ,  {41.11818182 }} ,
					{ 52 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.7136284708976746) ? ( (scaler_output_14 <= 0.3004233241081238) ? ( (scaler_output_7 <= 0.4176119714975357) ? ( (scaler_output_14 <= -0.7075373530387878) ? ( (scaler_output_9 <= 0.3076174259185791) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= -1.0737170577049255) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= 0.7378552705049515) ? ( (scaler_output_6 <= -0.9034578800201416) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_11 <= 0.9523644894361496) ? ( (scaler_output_2 <= -0.4057367295026779) ? ( (scaler_output_14 <= 0.8249813914299011) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_8 <= 0.3308560773730278) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_9 <= -0.8675674796104431) ? ( (scaler_output_6 <= 0.4142483025789261) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_13 <= 0.04010365158319473) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_12 <= 0.4803604930639267) ? ( (scaler_output_14 <= -0.994928240776062) ? ( (scaler_output_14 <= -1.2669729590415955) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_7 <= 1.0075204372406006) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_14 <= 0.25229231268167496) ? ( (scaler_output_6 <= 0.3337453603744507) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) : ( (scaler_output_7 <= 3.4747966527938843) ? ( (scaler_output_12 <= -1.3887616395950317) ? ( (scaler_output_7 <= 2.0690723657608032) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_13 <= 0.2989652007818222) ? ( 50 ) : ( 51 ) ) ) : ( 52 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {20.26052632 }} ,
					{ 7 ,  {22.78461538 }} ,
					{ 9 ,  {30.69047619 }} ,
					{ 10 ,  {26.18 }} ,
					{ 14 ,  {16.7 }} ,
					{ 15 ,  {13.37 }} ,
					{ 17 ,  {18.36938776 }} ,
					{ 18 ,  {27.5 }} ,
					{ 21 ,  {15.62083333 }} ,
					{ 22 ,  {12.8 }} ,
					{ 24 ,  {7.65555556 }} ,
					{ 25 ,  {10.86666667 }} ,
					{ 30 ,  {30.3 }} ,
					{ 31 ,  {31.56666667 }} ,
					{ 33 ,  {34.2 }} ,
					{ 34 ,  {32.3 }} ,
					{ 36 ,  {37.3 }} ,
					{ 38 ,  {36.1 }} ,
					{ 39 ,  {35.4 }} ,
					{ 43 ,  {45.6375 }} ,
					{ 44 ,  {49.35 }} ,
					{ 46 ,  {39.8 }} ,
					{ 47 ,  {38.7 }} ,
					{ 48 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.0981666445732117) ? ( (scaler_output_14 <= 0.30251598358154297) ? ( (scaler_output_9 <= -1.1631909012794495) ? ( 3 ) : ( (scaler_output_7 <= 0.4176119714975357) ? ( (scaler_output_7 <= -0.3493398427963257) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_8 <= -0.8396540582180023) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_6 <= 0.7913410663604736) ? ( (scaler_output_7 <= -0.989528626203537) ? ( (scaler_output_7 <= -1.2607590556144714) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_7 <= 0.5224216282367706) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_2 <= 0.770073264837265) ? ( (scaler_output_13 <= 0.3388451933860779) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_8 <= 0.8431766033172607) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_7 <= 1.6059269905090332) ? ( (scaler_output_12 <= -0.3503604456782341) ? ( (scaler_output_13 <= 0.36135008931159973) ? ( (scaler_output_4 <= -1.0448632836341858) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_13 <= 0.38313792645931244) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_10 <= -0.5796219110488892) ? ( 36 ) : ( (scaler_output_9 <= 1.213094089180231) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_10 <= 0.7378552705049515) ? ( (scaler_output_13 <= 0.4099452495574951) ? ( (scaler_output_13 <= 0.3258276581764221) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_4 <= -1.21867436170578) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {21.03103448 }} ,
					{ 7 ,  {23.85 }} ,
					{ 9 ,  {32.23809524 }} ,
					{ 10 ,  {26.3 }} ,
					{ 13 ,  {27.9 }} ,
					{ 15 ,  {30.7 }} ,
					{ 16 ,  {20.19805825 }} ,
					{ 19 ,  {21.65 }} ,
					{ 20 ,  {16.31754386 }} ,
					{ 22 ,  {15.59230769 }} ,
					{ 23 ,  {11.48181818 }} ,
					{ 28 ,  {34.9 }} ,
					{ 29 ,  {36.2 }} ,
					{ 30 ,  {37.9 }} ,
					{ 33 ,  {33.26666667 }} ,
					{ 34 ,  {31. }} ,
					{ 35 ,  {29. }} ,
					{ 39 ,  {43.625 }} ,
					{ 40 ,  {45.7 }} ,
					{ 42 ,  {50. }} ,
					{ 43 ,  {49.4 }} ,
					{ 46 ,  {42.74285714 }} ,
					{ 47 ,  {50. }} ,
					{ 48 ,  {37.6 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.019559383392334) ? ( (scaler_output_14 <= -0.4061954766511917) ? ( (scaler_output_9 <= -1.0711385011672974) ? ( 3 ) : ( (scaler_output_7 <= 0.4048648476600647) ? ( (scaler_output_7 <= -0.22328497469425201) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_8 <= -0.9108096957206726) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_14 <= 0.30391107499599457) ? ( (scaler_output_9 <= -1.1802685856819153) ? ( 13 ) : ( (scaler_output_12 <= -2.1041045784950256) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_2 <= 0.29692724347114563) ? ( (scaler_output_8 <= 0.5336496233940125) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_6 <= 0.9777689576148987) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_7 <= 1.5457322597503662) ? ( (scaler_output_11 <= -0.8705199658870697) ? ( (scaler_output_7 <= 1.2065171599388123) ? ( (scaler_output_9 <= 0.9132668673992157) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (scaler_output_9 <= 1.7906787395477295) ? ( (scaler_output_2 <= -0.3388393819332123) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_10 <= -0.4077770560979843) ? ( (scaler_output_7 <= 2.161843180656433) ? ( (scaler_output_7 <= 1.7822622060775757) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_14 <= -0.9921380281448364) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_8 <= 0.6012474596500397) ? ( (scaler_output_7 <= 3.1610758304595947) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {26.2 }} ,
					{ 6 ,  {23.4 }} ,
					{ 8 ,  {29.58928571 }} ,
					{ 9 ,  {23.975 }} ,
					{ 11 ,  {50. }} ,
					{ 13 ,  {20.42333333 }} ,
					{ 14 ,  {24.18571429 }} ,
					{ 18 ,  {27.1 }} ,
					{ 19 ,  {20.4 }} ,
					{ 21 ,  {17.28333333 }} ,
					{ 22 ,  {27.5 }} ,
					{ 25 ,  {14.13333333 }} ,
					{ 26 ,  {16.84166667 }} ,
					{ 28 ,  {13.73333333 }} ,
					{ 29 ,  {9.92413793 }} ,
					{ 34 ,  {34.52142857 }} ,
					{ 35 ,  {37.4 }} ,
					{ 36 ,  {29.6 }} ,
					{ 39 ,  {24.96 }} ,
					{ 40 ,  {31.06666667 }} ,
					{ 41 ,  {10.4 }} ,
					{ 45 ,  {49.52 }} ,
					{ 46 ,  {46.11538462 }} ,
					{ 48 ,  {39.25 }} ,
					{ 49 ,  {42.3 }} ,
					{ 50 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.885006457567215) ? ( (scaler_output_14 <= 0.33111555874347687) ? ( (scaler_output_14 <= -0.6894010305404663) ? ( (scaler_output_7 <= 0.324841246008873) ? ( (scaler_output_9 <= 0.3076174259185791) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_6 <= -0.3314632326364517) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_9 <= -1.2479584217071533) ? ( 11 ) : ( (scaler_output_7 <= 0.3205922245979309) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_6 <= 0.909976989030838) ? ( (scaler_output_2 <= -0.4057367295026779) ? ( (scaler_output_11 <= -0.20203085243701935) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_7 <= 0.6449356377124786) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_14 <= 0.9896033704280853) ? ( (scaler_output_6 <= 1.3675727248191833) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_9 <= -1.1453250050544739) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_7 <= 1.7220674753189087) ? ( (scaler_output_6 <= -0.5560240745544434) ? ( (scaler_output_9 <= 2.3797998428344727) ? ( (scaler_output_2 <= -0.4145510643720627) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (scaler_output_14 <= 0.4706256687641144) ? ( (scaler_output_7 <= 1.0075204372406006) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (scaler_output_6 <= 1.0879308879375458) ? ( (scaler_output_13 <= 0.4018368571996689) ? ( (scaler_output_12 <= -1.6656686067581177) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_3 <= 1.2045871019363403) ? ( 48 ) : ( 49 ) ) ) : ( 50 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {23.61463415 }} ,
					{ 7 ,  {20.80272727 }} ,
					{ 9 ,  {28.31111111 }} ,
					{ 10 ,  {23.63846154 }} ,
					{ 14 ,  {17.15 }} ,
					{ 15 ,  {14.64285714 }} ,
					{ 17 ,  {13.18823529 }} ,
					{ 18 ,  {9.83235294 }} ,
					{ 21 ,  {22.62727273 }} ,
					{ 22 ,  {18.58947368 }} ,
					{ 24 ,  {14.40588235 }} ,
					{ 25 ,  {17.55416667 }} ,
					{ 30 ,  {33.07272727 }} ,
					{ 31 ,  {37. }} ,
					{ 33 ,  {29.6 }} ,
					{ 34 ,  {29. }} ,
					{ 37 ,  {28.85 }} ,
					{ 38 ,  {23.46666667 }} ,
					{ 40 ,  {37.9 }} ,
					{ 41 ,  {32.52 }} ,
					{ 45 ,  {45.05714286 }} ,
					{ 46 ,  {49.7 }} ,
					{ 48 ,  {43.6875 }} ,
					{ 49 ,  {37.96666667 }} ,
					{ 50 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.7447880804538727) ? ( (scaler_output_14 <= 0.23345845937728882) ? ( (scaler_output_9 <= -1.2479584217071533) ? ( 3 ) : ( (scaler_output_7 <= 0.32271674275398254) ? ( (scaler_output_14 <= -0.6880059540271759) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_6 <= -0.2806192710995674) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_9 <= -0.8687617182731628) ? ( (scaler_output_11 <= 0.8581281453371048) ? ( (scaler_output_14 <= 0.465742826461792) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_14 <= 1.2211901545524597) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_12 <= 0.4803604930639267) ? ( (scaler_output_8 <= 0.18676591664552689) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_13 <= 0.02515554055571556) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_7 <= 1.622923195362091) ? ( (scaler_output_8 <= -0.7560462057590485) ? ( (scaler_output_9 <= 1.872938334941864) ? ( (scaler_output_2 <= -0.4146723002195358) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_11 <= -0.3639995753765106) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_7 <= 1.1073728799819946) ? ( (scaler_output_9 <= -0.24727660417556763) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_11 <= -1.1679534316062927) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_2 <= -0.11558971414342523) ? ( (scaler_output_13 <= 0.31953951716423035) ? ( (scaler_output_8 <= 0.4553784132003784) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_7 <= 2.4614005088806152) ? ( 48 ) : ( 49 ) ) ) : ( 50 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {24.1 }} ,
					{ 7 ,  {21.4625 }} ,
					{ 9 ,  {30.7125 }} ,
					{ 10 ,  {26.28333333 }} ,
					{ 14 ,  {36.075 }} ,
					{ 15 ,  {33.4 }} ,
					{ 17 ,  {31.9 }} ,
					{ 18 ,  {33.95 }} ,
					{ 21 ,  {48.81818182 }} ,
					{ 22 ,  {43.75 }} ,
					{ 23 ,  {21.9 }} ,
					{ 27 ,  {27.9 }} ,
					{ 29 ,  {17.65714286 }} ,
					{ 30 ,  {20.35813953 }} ,
					{ 33 ,  {30.85 }} ,
					{ 34 ,  {29.8 }} ,
					{ 35 ,  {26.7 }} ,
					{ 39 ,  {15.87037037 }} ,
					{ 40 ,  {7. }} ,
					{ 42 ,  {19.56764706 }} ,
					{ 43 ,  {14.82857143 }} ,
					{ 46 ,  {14.65384615 }} ,
					{ 47 ,  {27.5 }} ,
					{ 49 ,  {13.524 }} ,
					{ 50 ,  {9.53043478 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_14 <= -0.42014649510383606) ? ( (scaler_output_7 <= 1.193061888217926) ? ( (scaler_output_9 <= -1.1153733730316162) ? ( 3 ) : ( (scaler_output_7 <= 0.34608645737171173) ? ( (scaler_output_14 <= -0.7054446935653687) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_8 <= -1.0335531830787659) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_11 <= -0.7762836217880249) ? ( (scaler_output_7 <= 1.5259034037590027) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_9 <= 1.6020119190216064) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_12 <= 0.3188314288854599) ? ( (scaler_output_12 <= -1.6656686067581177) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (scaler_output_14 <= 0.30321352183818817) ? ( (scaler_output_7 <= 0.885006457567215) ? ( (scaler_output_9 <= -1.1802685856819153) ? ( 27 ) : ( (scaler_output_13 <= 0.0386695172637701) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( (scaler_output_4 <= 0.007537126541137695) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_2 <= 0.29692724347114563) ? ( (scaler_output_13 <= 0.21076582372188568) ? ( (scaler_output_11 <= 1.6650269031524658) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_14 <= 1.596472442150116) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_6 <= 0.7362601161003113) ? ( (scaler_output_7 <= 0.31067777425050735) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_2 <= 0.919853001832962) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {50. }} ,
					{ 6 ,  {23.93235294 }} ,
					{ 7 ,  {20.68813559 }} ,
					{ 9 ,  {33.53333333 }} ,
					{ 10 ,  {26.22745098 }} ,
					{ 14 ,  {16.4483871 }} ,
					{ 15 ,  {27.5 }} ,
					{ 17 ,  {27.1 }} ,
					{ 18 ,  {20.33076923 }} ,
					{ 21 ,  {16.18064516 }} ,
					{ 22 ,  {12.99333333 }} ,
					{ 24 ,  {8.65 }} ,
					{ 25 ,  {11.51818182 }} ,
					{ 30 ,  {35.96666667 }} ,
					{ 31 ,  {33.4 }} ,
					{ 33 ,  {30.075 }} ,
					{ 34 ,  {32.87272727 }} ,
					{ 35 ,  {17.8 }} ,
					{ 39 ,  {44.67894737 }} ,
					{ 40 ,  {50. }} ,
					{ 41 ,  {50. }} ,
					{ 42 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 0.9883997440338135) ? ( (scaler_output_14 <= 0.3157694339752197) ? ( (scaler_output_9 <= -1.2385239005088806) ? ( 3 ) : ( (scaler_output_7 <= 0.32271674275398254) ? ( (scaler_output_14 <= -0.6921912431716919) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_12 <= -1.4579883813858032) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_6 <= 0.4142483025789261) ? ( (scaler_output_13 <= 0.38065578043460846) ? ( (scaler_output_7 <= 0.6449356377124786) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_12 <= -0.9734011590480804) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_2 <= 0.7424904108047485) ? ( (scaler_output_14 <= 0.8982242047786713) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_7 <= -0.6319010555744171) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_2 <= 0.14287224411964417) ? ( (scaler_output_11 <= -0.8705199658870697) ? ( (scaler_output_7 <= 1.466416835784912) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_7 <= 1.2121825814247131) ? ( 33 ) : ( 34 ) ) ) : ( 35 ) ) : ( (scaler_output_2 <= -0.08141547301784158) ? ( (scaler_output_2 <= -0.3520721197128296) ? ( (scaler_output_7 <= 3.1610758304595947) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( 42 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {50. }} ,
					{ 6 ,  {23.62727273 }} ,
					{ 7 ,  {20.41836735 }} ,
					{ 10 ,  {30.01 }} ,
					{ 11 ,  {34.4 }} ,
					{ 13 ,  {28.77272727 }} ,
					{ 14 ,  {25.13888889 }} ,
					{ 18 ,  {21.06666667 }} ,
					{ 19 ,  {16.81612903 }} ,
					{ 21 ,  {13.60769231 }} ,
					{ 22 ,  {20. }} ,
					{ 25 ,  {18.3 }} ,
					{ 26 ,  {14.2375 }} ,
					{ 28 ,  {13.02727273 }} ,
					{ 29 ,  {8.79285714 }} ,
					{ 34 ,  {34.8 }} ,
					{ 35 ,  {36.93333333 }} ,
					{ 37 ,  {31.75 }} ,
					{ 38 ,  {33. }} ,
					{ 39 ,  {17.8 }} ,
					{ 43 ,  {48.29130435 }} ,
					{ 44 ,  {43.15 }} ,
					{ 46 ,  {43.3 }} ,
					{ 47 ,  {39.25 }} ,
					{ 48 ,  {21.9 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.0981666445732117) ? ( (scaler_output_14 <= 0.33111555874347687) ? ( (scaler_output_7 <= 0.2582729607820511) ? ( (scaler_output_9 <= -1.2385239005088806) ? ( 4 ) : ( (scaler_output_14 <= -0.6880059242248535) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_14 <= -1.1121167540550232) ? ( (scaler_output_7 <= 0.9444929957389832) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_11 <= -0.817512035369873) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_14 <= 1.2539750337600708) ? ( (scaler_output_2 <= 0.29692724347114563) ? ( (scaler_output_8 <= 0.522976279258728) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_8 <= 1.1242413520812988) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_11 <= 0.8581281453371048) ? ( (scaler_output_14 <= 1.8538686037063599) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_6 <= 1.0243759155273438) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_11 <= 0.5400804579257965) ? ( (scaler_output_11 <= -0.7762836217880249) ? ( (scaler_output_12 <= 0.06500002695247531) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_13 <= 0.4010094702243805) ? ( 37 ) : ( 38 ) ) ) : ( 39 ) ) : ( (scaler_output_12 <= 0.572662815451622) ? ( (scaler_output_12 <= -0.37343601882457733) ? ( (scaler_output_9 <= 1.0784786939620972) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_14 <= -1.2188419699668884) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {50. }} ,
					{ 6 ,  {23.81025641 }} ,
					{ 7 ,  {20.86640625 }} ,
					{ 9 ,  {50. }} ,
					{ 11 ,  {29.62105263 }} ,
					{ 12 ,  {25.62647059 }} ,
					{ 16 ,  {23.2 }} ,
					{ 17 ,  {19.62 }} ,
					{ 19 ,  {17.29791667 }} ,
					{ 20 ,  {27.5 }} ,
					{ 23 ,  {15.664 }} ,
					{ 24 ,  {11.875 }} ,
					{ 26 ,  {15.14 }} ,
					{ 27 ,  {9.70512821 }} ,
					{ 32 ,  {30.85 }} ,
					{ 33 ,  {29. }} ,
					{ 35 ,  {32.9375 }} ,
					{ 36 ,  {35.57142857 }} ,
					{ 37 ,  {17.8 }} ,
					{ 41 ,  {47.33333333 }} ,
					{ 42 ,  {43.1 }} ,
					{ 43 ,  {50. }} ,
					{ 46 ,  {43.66666667 }} ,
					{ 47 ,  {38.7 }} ,
					{ 49 ,  {39.8 }} ,
					{ 50 ,  {37.6 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.0075204372406006) ? ( (scaler_output_14 <= 0.23345845937728882) ? ( (scaler_output_7 <= 0.33546385169029236) ? ( (scaler_output_9 <= -1.2479584217071533) ? ( 4 ) : ( (scaler_output_14 <= -0.7005618512630463) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_9 <= -1.020430862903595) ? ( 9 ) : ( (scaler_output_8 <= -0.921483039855957) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_6 <= 0.4142483025789261) ? ( (scaler_output_8 <= 0.08181136101484299) ? ( (scaler_output_12 <= 0.572662815451622) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_7 <= 0.6449356377124786) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_14 <= 0.9896033704280853) ? ( (scaler_output_2 <= 1.1036638021469116) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_11 <= 0.8581281453371048) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_7 <= 1.6059269905090332) ? ( (scaler_output_2 <= 0.14039993286132812) ? ( (scaler_output_13 <= 0.28467899560928345) ? ( (scaler_output_9 <= 1.7906787395477295) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_12 <= -0.46573834121227264) ? ( 35 ) : ( 36 ) ) ) : ( 37 ) ) : ( (scaler_output_12 <= -1.3887616395950317) ? ( (scaler_output_7 <= 2.0690723657608032) ? ( (scaler_output_13 <= 0.2685173824429512) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (scaler_output_8 <= 0.46071508526802063) ? ( (scaler_output_14 <= -1.1790816187858582) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_4 <= -0.9759255647659302) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {22.88125 }} ,
					{ 6 ,  {24.81111111 }} ,
					{ 8 ,  {27.9 }} ,
					{ 9 ,  {20.55072464 }} ,
					{ 11 ,  {50. }} ,
					{ 13 ,  {29.90333333 }} ,
					{ 14 ,  {25.684375 }} ,
					{ 18 ,  {15.5 }} ,
					{ 19 ,  {13.13333333 }} ,
					{ 21 ,  {19.55675676 }} ,
					{ 22 ,  {27.1 }} ,
					{ 25 ,  {8.025 }} ,
					{ 26 ,  {12. }} ,
					{ 28 ,  {27.5 }} ,
					{ 29 ,  {14.17272727 }} ,
					{ 34 ,  {34.9625 }} ,
					{ 35 ,  {36.73333333 }} ,
					{ 37 ,  {33.95 }} ,
					{ 38 ,  {32.2 }} ,
					{ 40 ,  {25. }} ,
					{ 42 ,  {31. }} ,
					{ 43 ,  {30.7 }} ,
					{ 47 ,  {45.4 }} ,
					{ 48 ,  {42.83333333 }} ,
					{ 50 ,  {49.9 }} ,
					{ 51 ,  {45.44 }} ,
					{ 54 ,  {43.8 }} ,
					{ 55 ,  {42.8 }} ,
					{ 56 ,  {38.7 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_7 <= 1.0075204372406006) ? ( (scaler_output_14 <= 0.3004233241081238) ? ( (scaler_output_7 <= 0.32838211953639984) ? ( (scaler_output_14 <= -0.7005618512630463) ? ( (scaler_output_4 <= -0.7603118121623993) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_9 <= -1.133167564868927) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_9 <= -1.020430862903595) ? ( 11 ) : ( (scaler_output_4 <= -0.9847261309623718) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_12 <= 0.572662815451622) ? ( (scaler_output_9 <= -1.0949755907058716) ? ( (scaler_output_14 <= 2.020583152770996) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_7 <= -0.1857517883181572) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_13 <= -2.4091798663139343) ? ( (scaler_output_9 <= -0.9052101075649261) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_13 <= -1.8005546927452087) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_7 <= 1.6144251227378845) ? ( (scaler_output_2 <= -0.333599790930748) ? ( (scaler_output_11 <= -0.7733387351036072) ? ( (scaler_output_12 <= -0.027302297297865152) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_12 <= -2.057953417301178) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_8 <= 0.46071508526802063) ? ( 40 ) : ( (scaler_output_9 <= -0.8187706172466278) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_12 <= -0.23498252034187317) ? ( (scaler_output_7 <= 2.161843180656433) ? ( (scaler_output_13 <= 0.32500027120113373) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_10 <= -0.35049544274806976) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_14 <= -1.2188419699668884) ? ( (scaler_output_9 <= 1.1374505311250687) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {22.75454545 }} ,
					{ 6 ,  {24.24090909 }} ,
					{ 8 ,  {28.73181818 }} ,
					{ 9 ,  {23.4 }} ,
					{ 12 ,  {32.60555556 }} ,
					{ 13 ,  {29.18 }} ,
					{ 15 ,  {36.5875 }} ,
					{ 16 ,  {33.225 }} ,
					{ 20 ,  {50. }} ,
					{ 21 ,  {43.1 }} ,
					{ 23 ,  {50. }} ,
					{ 24 ,  {48.8 }} ,
					{ 27 ,  {44.86 }} ,
					{ 28 ,  {37.96666667 }} ,
					{ 30 ,  {50. }} ,
					{ 31 ,  {50. }} ,
					{ 34 ,  {50. }} ,
					{ 37 ,  {19.46338028 }} ,
					{ 38 ,  {27.9 }} ,
					{ 40 ,  {25.48064516 }} ,
					{ 41 ,  {21.61666667 }} ,
					{ 45 ,  {13.025 }} ,
					{ 46 ,  {15.31578947 }} ,
					{ 48 ,  {16.7 }} ,
					{ 49 ,  {9.96363636 }} ,
					{ 52 ,  {19.78571429 }} ,
					{ 53 ,  {27.1 }} ,
					{ 55 ,  {14.39411765 }} ,
					{ 56 ,  {16.56153846 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = (scaler_output_14 <= -0.6894010305404663) ? ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_7 <= 0.6831769943237305) ? ( (scaler_output_7 <= 0.32838211953639984) ? ( (scaler_output_2 <= -0.41760143637657166) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_6 <= -0.21282730996608734) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_7 <= 1.193061888217926) ? ( (scaler_output_12 <= -0.027302297297865152) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= 1.3630235195159912) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_12 <= -1.6656686067581177) ? ( (scaler_output_7 <= 1.9805507063865662) ? ( (scaler_output_14 <= -1.1344383358955383) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_8 <= 0.7595687508583069) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_14 <= -1.1574575304985046) ? ( (scaler_output_8 <= -0.17790667712688446) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_8 <= 0.015992403030395508) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_14 <= 0.30321352183818817) ? ( (scaler_output_9 <= -1.2479584217071533) ? ( 34 ) : ( (scaler_output_7 <= -0.2763979882001877) ? ( (scaler_output_2 <= 0.7477581053972244) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_4 <= -0.5821004509925842) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_9 <= -0.8675674796104431) ? ( (scaler_output_2 <= 0.5180033445358276) ? ( (scaler_output_7 <= -1.2253503799438477) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_14 <= 0.3806416541337967) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_2 <= -0.396232470870018) ? ( (scaler_output_14 <= 0.8249813914299011) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_13 <= -0.4482196271419525) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/boston.csv");
	return 0;
}
