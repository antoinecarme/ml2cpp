// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_freidman3.exe ml2cpp-demo_BaggingRegressor_Pipeline_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.48486692 }} ,
					{ 4 ,  {0.38342473 }} ,
					{ 5 ,  {0.61001684 }} ,
					{ 9 ,  {1.55432885 }} ,
					{ 11 ,  {1.40929984 }} ,
					{ 12 ,  {1.35633395 }} ,
					{ 14 ,  {0.70507147 }} ,
					{ 16 ,  {1.13749386 }} ,
					{ 17 ,  {1.33034355 }} ,
					{ 21 ,  {1.16100714 }} ,
					{ 22 ,  {1.14405643 }} ,
					{ 23 ,  {1.27887759 }} ,
					{ 26 ,  {1.49715235 }} ,
					{ 27 ,  {1.32892492 }} ,
					{ 29 ,  {1.53631304 }} ,
					{ 30 ,  {1.48947205 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( (scaler_output_3 <= -0.19290710985660553) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_4 <= -0.37393590807914734) ? ( (scaler_output_2 <= 0.19635166227817535) ? ( (scaler_output_2 <= -1.346356213092804) ? ( 9 ) : ( (scaler_output_4 <= -1.660830020904541) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_4 <= -1.3605417609214783) ? ( 14 ) : ( (scaler_output_3 <= 0.32986392825841904) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_3 <= -1.495688259601593) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_5 <= -0.5514519065618515) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (scaler_output_3 <= -0.9236918985843658) ? ( (scaler_output_2 <= 0.17494834959506989) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_2 <= 0.18584853038191795) ? ( 29 ) : ( 30 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.61001684 }} ,
					{ 3 ,  {0.38342473 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 11 ,  {1.26879448 }} ,
					{ 12 ,  {1.1030161 }} ,
					{ 14 ,  {1.40929984 }} ,
					{ 15 ,  {1.34636148 }} ,
					{ 19 ,  {1.53596709 }} ,
					{ 20 ,  {1.43130244 }} ,
					{ 22 ,  {1.46088901 }} ,
					{ 23 ,  {1.18648202 }} ,
					{ 26 ,  {1.42518022 }} ,
					{ 27 ,  {1.35886857 }} ,
					{ 29 ,  {1.53022139 }} ,
					{ 30 ,  {1.49648065 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_3 <= -0.9540339708328247) ? ( (scaler_output_4 <= -1.4776207208633423) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= 0.32986392825841904) ? ( (scaler_output_2 <= 0.8264346718788147) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_5 <= -0.8546210080385208) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_3 <= -0.9236918985843658) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_3 <= -1.717117726802826) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_5 <= -1.3738551139831543) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_4 <= -0.4938385933637619) ? ( (scaler_output_2 <= 0.07024127151817083) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_2 <= 0.2522202655673027) ? ( 29 ) : ( 30 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.38342473 }} ,
					{ 4 ,  {0.48486692 }} ,
					{ 5 ,  {0.70507147 }} ,
					{ 9 ,  {1.53596709 }} ,
					{ 11 ,  {1.45085999 }} ,
					{ 12 ,  {1.16100714 }} ,
					{ 15 ,  {1.14405643 }} ,
					{ 16 ,  {1.11561476 }} ,
					{ 18 ,  {1.38449452 }} ,
					{ 19 ,  {1.27221806 }} ,
					{ 23 ,  {1.53671123 }} ,
					{ 24 ,  {1.34984299 }} ,
					{ 26 ,  {1.10634412 }} ,
					{ 27 ,  {1.081892 }} ,
					{ 30 ,  {1.567781 }} ,
					{ 31 ,  {1.53249386 }} ,
					{ 33 ,  {1.27948723 }} ,
					{ 34 ,  {1.49009524 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_2 <= 0.06683275103569031) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_3 <= -1.0727011263370514) ? ( (scaler_output_2 <= 0.040250442922115326) ? ( (scaler_output_4 <= -0.4686051160097122) ? ( 9 ) : ( (scaler_output_5 <= -1.3401830196380615) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_3 <= -1.5474199056625366) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_2 <= 1.2749183773994446) ? ( (scaler_output_4 <= -0.8660534620285034) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_2 <= 1.673033356666565) ? ( 26 ) : ( 27 ) ) ) : ( (scaler_output_2 <= 0.26149413734674454) ? ( (scaler_output_2 <= -1.3878793120384216) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_3 <= -0.615314394235611) ? ( 33 ) : ( 34 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.38342473 }} ,
					{ 4 ,  {0.61001684 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 11 ,  {1.40929984 }} ,
					{ 12 ,  {1.35009011 }} ,
					{ 13 ,  {1.14091625 }} ,
					{ 18 ,  {1.53596709 }} ,
					{ 19 ,  {1.45186094 }} ,
					{ 21 ,  {1.13377171 }} ,
					{ 22 ,  {1.27887759 }} ,
					{ 25 ,  {1.31432562 }} ,
					{ 26 ,  {1.34636148 }} ,
					{ 28 ,  {1.52863669 }} ,
					{ 29 ,  {1.48020213 }} ,
					{ 33 ,  {1.081892 }} ,
					{ 34 ,  {1.02748435 }} ,
					{ 35 ,  {1.15778604 }} ,
					{ 37 ,  {1.27948723 }} ,
					{ 38 ,  {1.49496626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9296590089797974) ? ( (scaler_output_4 <= -1.4776207208633423) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_5 <= 0.6717203818261623) ? ( (scaler_output_5 <= -0.6441354788839817) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (scaler_output_2 <= 1.2387755811214447) ? ( (scaler_output_3 <= -1.495688259601593) ? ( (scaler_output_2 <= -0.6530774086713791) ? ( (scaler_output_3 <= -1.717117726802826) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= 0.8984425663948059) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_4 <= -0.9403093159198761) ? ( (scaler_output_4 <= -1.108010083436966) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_2 <= -0.15516800433397293) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_5 <= -0.606260135769844) ? ( (scaler_output_5 <= -1.0919035375118256) ? ( (scaler_output_5 <= -1.5203047394752502) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( (scaler_output_4 <= 0.5518082813359797) ? ( 37 ) : ( 38 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {1.40929984 }} ,
					{ 5 ,  {0.61001684 }} ,
					{ 7 ,  {0.48486692 }} ,
					{ 8 ,  {0.37929615 }} ,
					{ 10 ,  {1.36871758 }} ,
					{ 11 ,  {0.70507147 }} ,
					{ 15 ,  {1.16100714 }} ,
					{ 16 ,  {1.53596709 }} ,
					{ 18 ,  {1.3413442 }} ,
					{ 20 ,  {1.46483828 }} ,
					{ 21 ,  {1.52332753 }} ,
					{ 25 ,  {1.07654708 }} ,
					{ 26 ,  {1.02748435 }} ,
					{ 28 ,  {1.15841469 }} ,
					{ 29 ,  {1.27887759 }} ,
					{ 31 ,  {1.34636148 }} ,
					{ 33 ,  {1.47832813 }} ,
					{ 34 ,  {1.50754127 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_5 <= -1.2066214084625244) ? ( 2 ) : ( (scaler_output_4 <= -1.5602660179138184) ? ( (scaler_output_4 <= -1.7965635061264038) ? ( 5 ) : ( (scaler_output_5 <= -0.14987096190452576) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_2 <= -0.3636448532342911) ? ( 10 ) : ( 11 ) ) ) ) : ( (scaler_output_2 <= 0.6816338896751404) ? ( (scaler_output_3 <= -1.6158922910690308) ? ( (scaler_output_5 <= -0.046768903732299805) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_4 <= -1.1599440574645996) ? ( 18 ) : ( (scaler_output_5 <= -1.2838689684867859) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_3 <= -0.13757695525418967) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_4 <= 0.49538497254252434) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_4 <= 1.1004490554332733) ? ( 28 ) : ( 29 ) ) ) : ( (scaler_output_2 <= 0.9817717373371124) ? ( 31 ) : ( (scaler_output_3 <= 0.18995892733801156) ? ( 33 ) : ( 34 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.14091625 }} ,
					{ 5 ,  {1.36871758 }} ,
					{ 6 ,  {1.40929984 }} ,
					{ 9 ,  {0.80791092 }} ,
					{ 10 ,  {0.70507147 }} ,
					{ 12 ,  {0.48486692 }} ,
					{ 14 ,  {0.37516757 }} ,
					{ 15 ,  {0.38342473 }} ,
					{ 20 ,  {1.53596709 }} ,
					{ 21 ,  {1.41074394 }} ,
					{ 23 ,  {1.11561476 }} ,
					{ 24 ,  {1.38449452 }} ,
					{ 26 ,  {1.31432562 }} ,
					{ 28 ,  {1.55172203 }} ,
					{ 29 ,  {1.50101215 }} ,
					{ 33 ,  {1.34752198 }} ,
					{ 34 ,  {1.26722342 }} ,
					{ 36 ,  {1.1360622 }} ,
					{ 37 ,  {1.05468818 }} ,
					{ 39 ,  {1.27887759 }} ,
					{ 41 ,  {1.46708262 }} ,
					{ 42 ,  {1.50181409 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= -0.4679744988679886) ? ( 3 ) : ( (scaler_output_3 <= 0.6646461933851242) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_5 <= -0.7836979031562805) ? ( (scaler_output_5 <= -1.1247649788856506) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_5 <= -0.14987096190452576) ? ( 12 ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (scaler_output_2 <= 0.8440569937229156) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_2 <= -0.35382256656885147) ? ( (scaler_output_3 <= -1.6177831292152405) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_4 <= 0.3329373747110367) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_4 <= -1.1697484254837036) ? ( 26 ) : ( (scaler_output_2 <= -0.7974012792110443) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_4 <= 1.0049840807914734) ? ( (scaler_output_2 <= 1.241290807723999) ? ( (scaler_output_4 <= -0.253071166574955) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_2 <= 1.8500051498413086) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_3 <= -0.8243342787027359) ? ( 39 ) : ( (scaler_output_3 <= 0.026924937963485718) ? ( 41 ) : ( 42 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.14091625 }} ,
					{ 5 ,  {1.36871758 }} ,
					{ 6 ,  {0.61001684 }} ,
					{ 9 ,  {0.37516757 }} ,
					{ 10 ,  {0.38342473 }} ,
					{ 12 ,  {0.80791092 }} ,
					{ 13 ,  {0.70507147 }} ,
					{ 18 ,  {1.41074394 }} ,
					{ 19 ,  {1.46071017 }} ,
					{ 21 ,  {1.14587635 }} ,
					{ 22 ,  {1.32935424 }} ,
					{ 25 ,  {1.12520028 }} ,
					{ 26 ,  {1.19835311 }} ,
					{ 28 ,  {1.07654708 }} ,
					{ 29 ,  {1.02748435 }} ,
					{ 32 ,  {1.31432562 }} ,
					{ 33 ,  {1.081892 }} ,
					{ 36 ,  {1.55559363 }} ,
					{ 37 ,  {1.53370949 }} ,
					{ 39 ,  {1.46679899 }} ,
					{ 40 ,  {1.49524974 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= 0.7551565617322922) ? ( (scaler_output_2 <= -1.028288573026657) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( (scaler_output_3 <= -0.2956656664609909) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_5 <= -1.1247649788856506) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= 1.1800363659858704) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( (scaler_output_5 <= -0.13076937198638916) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_2 <= 1.7521882057189941) ? ( (scaler_output_2 <= 1.4051255583763123) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_4 <= 0.49538497254252434) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_4 <= -1.1435618996620178) ? ( (scaler_output_4 <= -1.225070297718048) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_2 <= 0.17194722779095173) ? ( (scaler_output_2 <= -1.19354248046875) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_3 <= 0.025099143385887146) ? ( 39 ) : ( 40 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.37516757 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 9 ,  {1.081892 }} ,
					{ 11 ,  {1.13828483 }} ,
					{ 12 ,  {1.36871758 }} ,
					{ 15 ,  {1.54552004 }} ,
					{ 16 ,  {1.47795145 }} ,
					{ 18 ,  {1.32783491 }} ,
					{ 19 ,  {1.34636148 }} ,
					{ 23 ,  {1.54877679 }} ,
					{ 24 ,  {1.43815527 }} ,
					{ 26 ,  {1.11649954 }} ,
					{ 27 ,  {1.33419435 }} ,
					{ 30 ,  {1.55364397 }} ,
					{ 31 ,  {1.52190806 }} ,
					{ 33 ,  {1.46424873 }} ,
					{ 34 ,  {1.49524786 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6357912421226501) ? ( (scaler_output_5 <= 0.7462165057659149) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( (scaler_output_5 <= -0.9156729280948639) ? ( (scaler_output_4 <= -1.3343552350997925) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_3 <= -0.2286939173936844) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_2 <= -0.16294515877962112) ? ( (scaler_output_2 <= -0.9280877113342285) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_2 <= 0.7302617281675339) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_3 <= -0.8848086297512054) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_2 <= -1.2143871784210205) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_3 <= -1.555534303188324) ? ( 26 ) : ( 27 ) ) ) : ( (scaler_output_2 <= 0.26149413734674454) ? ( (scaler_output_2 <= -0.5963975787162781) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_3 <= -0.2016371637582779) ? ( 33 ) : ( 34 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {1.35009011 }} ,
					{ 4 ,  {0.80791092 }} ,
					{ 6 ,  {0.38342473 }} ,
					{ 7 ,  {0.37516757 }} ,
					{ 12 ,  {1.41074394 }} ,
					{ 13 ,  {1.36789414 }} ,
					{ 15 ,  {1.52208363 }} ,
					{ 16 ,  {1.46088901 }} ,
					{ 18 ,  {1.36871758 }} ,
					{ 20 ,  {1.5558566 }} ,
					{ 21 ,  {1.51412624 }} ,
					{ 25 ,  {1.11195258 }} ,
					{ 26 ,  {1.1610368 }} ,
					{ 27 ,  {1.38449452 }} ,
					{ 30 ,  {1.3214291 }} ,
					{ 31 ,  {1.081892 }} ,
					{ 33 ,  {1.46665718 }} ,
					{ 34 ,  {1.48912378 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.481613039970398) ? ( (scaler_output_2 <= -0.590480200946331) ? ( 2 ) : ( (scaler_output_3 <= -1.0840756297111511) ? ( 4 ) : ( (scaler_output_2 <= 0.2745603397488594) ? ( 6 ) : ( 7 ) ) ) ) : ( (scaler_output_2 <= 0.20899805426597595) ? ( (scaler_output_5 <= -1.3374958038330078) ? ( (scaler_output_4 <= 0.23203356564044952) ? ( (scaler_output_2 <= -0.3779405727982521) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= -1.4630562663078308) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_4 <= -1.2830256819725037) ? ( 18 ) : ( (scaler_output_2 <= -0.8880466222763062) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_3 <= -0.5494245290756226) ? ( (scaler_output_4 <= 0.9384577572345734) ? ( (scaler_output_4 <= -0.19714802643284202) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) : ( (scaler_output_4 <= -0.26058902591466904) ? ( (scaler_output_2 <= 1.6245991587638855) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_3 <= -0.1196240484714508) ? ( 33 ) : ( 34 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.61001684 }} ,
					{ 4 ,  {0.48486692 }} ,
					{ 5 ,  {0.38342473 }} ,
					{ 9 ,  {1.1968265 }} ,
					{ 11 ,  {1.40929984 }} ,
					{ 12 ,  {1.3575411 }} ,
					{ 15 ,  {1.56030668 }} ,
					{ 16 ,  {1.53549644 }} ,
					{ 18 ,  {1.27887759 }} ,
					{ 19 ,  {1.4856347 }} ,
					{ 23 ,  {1.07921954 }} ,
					{ 24 ,  {1.02748435 }} ,
					{ 26 ,  {1.12349143 }} ,
					{ 27 ,  {1.23229966 }} ,
					{ 29 ,  {1.46708262 }} ,
					{ 30 ,  {1.49322332 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 2 ) : ( (scaler_output_3 <= -0.19290710985660553) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( (scaler_output_4 <= -1.0424461364746094) ? ( (scaler_output_3 <= -0.2286939173936844) ? ( 9 ) : ( (scaler_output_5 <= -0.6441354788839817) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_2 <= -0.3589157611131668) ? ( (scaler_output_2 <= -1.3878793120384216) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_3 <= -1.3856977820396423) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_4 <= 1.0049840807914734) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_4 <= 0.49538497254252434) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_4 <= -0.3880885704420507) ? ( 26 ) : ( 27 ) ) ) : ( (scaler_output_4 <= 1.3188034296035767) ? ( 29 ) : ( 30 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.37516757 }} ,
					{ 8 ,  {1.53192082 }} ,
					{ 9 ,  {1.57013152 }} ,
					{ 10 ,  {1.45186094 }} ,
					{ 13 ,  {1.15253179 }} ,
					{ 14 ,  {1.11561476 }} ,
					{ 16 ,  {1.13649067 }} ,
					{ 17 ,  {1.35048948 }} ,
					{ 21 ,  {1.55929544 }} ,
					{ 22 ,  {1.52804718 }} ,
					{ 24 ,  {1.34385284 }} ,
					{ 25 ,  {1.47263588 }} ,
					{ 26 ,  {1.081892 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6357912421226501) ? ( (scaler_output_4 <= -1.7129992842674255) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -1.0801426768302917) ? ( (scaler_output_2 <= -1.2143871784210205) ? ( (scaler_output_4 <= -0.2431742437183857) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_3 <= -1.5474199056625366) ? ( 13 ) : ( 14 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_2 <= 1.6818326115608215) ? ( (scaler_output_2 <= 0.12355757132172585) ? ( (scaler_output_2 <= -1.0938920080661774) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_4 <= -0.8606774806976318) ? ( 24 ) : ( 25 ) ) ) : ( 26 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.48486692 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 11 ,  {1.11340366 }} ,
					{ 12 ,  {1.1968265 }} ,
					{ 14 ,  {1.36048096 }} ,
					{ 15 ,  {1.53671123 }} ,
					{ 19 ,  {1.55693496 }} ,
					{ 20 ,  {1.5285057 }} ,
					{ 22 ,  {1.45014868 }} ,
					{ 23 ,  {1.50824867 }} ,
					{ 26 ,  {1.21505182 }} ,
					{ 27 ,  {1.05201572 }} ,
					{ 29 ,  {1.34636148 }} ,
					{ 30 ,  {1.48282415 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_3 <= -0.9540339708328247) ? ( (scaler_output_4 <= -1.4776207208633423) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= -0.2286939173936844) ? ( (scaler_output_3 <= -0.3915177583694458) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_4 <= -1.1697484254837036) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_2 <= 0.7946660220623016) ? ( (scaler_output_2 <= -0.3589157611131668) ? ( (scaler_output_2 <= -0.767800509929657) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_3 <= 0.17564557399600744) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_3 <= -0.37791891396045685) ? ( (scaler_output_2 <= 1.7521882057189941) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_2 <= 0.9817717373371124) ? ( 29 ) : ( 30 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.48486692 }} ,
					{ 5 ,  {0.37516757 }} ,
					{ 6 ,  {0.80791092 }} ,
					{ 8 ,  {1.14091625 }} ,
					{ 9 ,  {1.40929984 }} ,
					{ 14 ,  {1.16100714 }} ,
					{ 15 ,  {1.11561476 }} ,
					{ 17 ,  {1.47989632 }} ,
					{ 18 ,  {1.38449452 }} ,
					{ 21 ,  {1.36871758 }} ,
					{ 22 ,  {1.33233801 }} ,
					{ 24 ,  {1.53673512 }} ,
					{ 25 ,  {1.48696741 }} ,
					{ 29 ,  {1.07921954 }} ,
					{ 30 ,  {1.21710895 }} ,
					{ 31 ,  {1.46708262 }} ,
					{ 33 ,  {1.34636148 }} ,
					{ 35 ,  {1.49230328 }} ,
					{ 36 ,  {1.50990015 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.481613039970398) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_4 <= -1.5640677213668823) ? ( (scaler_output_2 <= 0.3028857856988907) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( (scaler_output_3 <= 0.3801743984222412) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_2 <= 0.6816338896751404) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_5 <= 0.5453606434166431) ? ( (scaler_output_3 <= -1.6383969187736511) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_4 <= 0.8441102802753448) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_4 <= -1.089585781097412) ? ( (scaler_output_3 <= 0.2732888013124466) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_2 <= -0.2323714792728424) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_3 <= 0.1398674175143242) ? ( (scaler_output_5 <= 0.8137871325016022) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) : ( (scaler_output_4 <= -0.1691150963306427) ? ( 33 ) : ( (scaler_output_4 <= 1.545040786266327) ? ( 35 ) : ( 36 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.80791092 }} ,
					{ 5 ,  {0.48486692 }} ,
					{ 6 ,  {0.37516757 }} ,
					{ 8 ,  {0.61001684 }} ,
					{ 11 ,  {1.40929984 }} ,
					{ 12 ,  {1.35009011 }} ,
					{ 14 ,  {1.081892 }} ,
					{ 15 ,  {1.14091625 }} ,
					{ 20 ,  {1.53621514 }} ,
					{ 21 ,  {1.42518022 }} ,
					{ 23 ,  {1.11044163 }} ,
					{ 24 ,  {1.34636148 }} ,
					{ 26 ,  {1.16100714 }} ,
					{ 28 ,  {1.47039493 }} ,
					{ 29 ,  {1.52384973 }} ,
					{ 31 ,  {1.02748435 }} ,
					{ 32 ,  {1.07654708 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.1435618996620178) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_5 <= -0.8493432998657227) ? ( 3 ) : ( (scaler_output_2 <= 0.3028857856988907) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_4 <= -1.7431707978248596) ? ( 8 ) : ( (scaler_output_4 <= -1.6370146870613098) ? ( (scaler_output_2 <= -1.1099023222923279) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_5 <= -0.17572009563446045) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (scaler_output_2 <= 1.7969666719436646) ? ( (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_2 <= 0.09435927774757147) ? ( (scaler_output_2 <= -0.6898520225659013) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_3 <= 0.027333766222000122) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_3 <= -1.7070884108543396) ? ( 26 ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_3 <= -1.494538426399231) ? ( 31 ) : ( 32 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.14091625 }} ,
					{ 4 ,  {1.40929984 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 10 ,  {0.48486692 }} ,
					{ 12 ,  {0.38342473 }} ,
					{ 13 ,  {0.37516757 }} ,
					{ 18 ,  {1.11561476 }} ,
					{ 19 ,  {1.16100714 }} ,
					{ 20 ,  {1.53596709 }} ,
					{ 22 ,  {1.31432562 }} ,
					{ 24 ,  {1.36789414 }} ,
					{ 25 ,  {1.51357611 }} ,
					{ 29 ,  {1.24737362 }} ,
					{ 30 ,  {1.07654708 }} ,
					{ 31 ,  {1.1082904 }} ,
					{ 33 ,  {1.34636148 }} ,
					{ 35 ,  {1.49889488 }} ,
					{ 36 ,  {1.47193903 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.626136414706707) ? ( (scaler_output_3 <= 0.3801743984222412) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -1.0840756297111511) ? ( (scaler_output_2 <= 0.0887349471449852) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_5 <= -0.14987096190452576) ? ( 10 ) : ( (scaler_output_5 <= 0.7462165057659149) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (scaler_output_2 <= 0.84055495262146) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( (scaler_output_5 <= 0.5780204124748707) ? ( (scaler_output_4 <= -0.0005476325750350952) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_4 <= -1.1697484254837036) ? ( 22 ) : ( (scaler_output_5 <= -1.5956872701644897) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_3 <= -0.2100047916173935) ? ( (scaler_output_3 <= -0.8670860826969147) ? ( (scaler_output_2 <= 1.6569893956184387) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) : ( (scaler_output_5 <= -0.13076972588896751) ? ( 33 ) : ( (scaler_output_3 <= 1.2354365587234497) ? ( 35 ) : ( 36 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.61001684 }} ,
					{ 3 ,  {0.48486692 }} ,
					{ 7 ,  {0.70507147 }} ,
					{ 9 ,  {1.1509548 }} ,
					{ 10 ,  {1.081892 }} ,
					{ 12 ,  {1.53671123 }} ,
					{ 14 ,  {1.40929984 }} ,
					{ 15 ,  {1.34636148 }} ,
					{ 19 ,  {1.56316862 }} ,
					{ 20 ,  {1.52263693 }} ,
					{ 22 ,  {1.33168605 }} ,
					{ 23 ,  {1.47807992 }} ,
					{ 26 ,  {1.26722342 }} ,
					{ 27 ,  {1.09803608 }} ,
					{ 29 ,  {1.34984299 }} ,
					{ 30 ,  {1.48058871 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.680695652961731) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( (scaler_output_3 <= -0.9788162112236023) ? ( 7 ) : ( (scaler_output_2 <= 1.8500051498413086) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_2 <= -1.2885634303092957) ? ( 12 ) : ( (scaler_output_4 <= -1.320627897977829) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( (scaler_output_2 <= -0.15516800433397293) ? ( (scaler_output_2 <= -1.1985815167427063) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_3 <= -1.2677711248397827) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_3 <= -0.6523826867341995) ? ( (scaler_output_2 <= 1.1800363659858704) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_4 <= 0.22499209642410278) ? ( 29 ) : ( 30 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
