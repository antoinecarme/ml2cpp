// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_freidman1.exe ml2cpp-demo_BaggingRegressor_Pipeline_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.5629846484809591 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.45606442423375926 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.47113817481474773 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.533968020094518 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.4780936262373869 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.5682849224172329 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.47914374714280494 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.4594152477223205 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.4901106996809651 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.5378806933707533 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.5629846484809591 ) / 0.2583714683396337 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.45606442423375926 ) / 0.2878721730712705 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.47113817481474773 ) / 0.3109216791553051 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.533968020094518 ) / 0.2826199867400281 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.4780936262373869 ) / 0.286140491317745 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.5682849224172329 ) / 0.29767408106451737 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.47914374714280494 ) / 0.2735314971431575 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.4594152477223205 ) / 0.28721149346998975 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.4901106996809651 ) / 0.2790486717322703 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.5378806933707533 ) / 0.2958192296543193 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {8.0628501 }} ,
					{ 6 ,  {5.293284 }} ,
					{ 7 ,  {6.24571025 }} ,
					{ 10 ,  {6.98004624 }} ,
					{ 11 ,  {8.5686265 }} ,
					{ 13 ,  {11.38099315 }} ,
					{ 14 ,  {12.42864308 }} ,
					{ 18 ,  {16.08254262 }} ,
					{ 19 ,  {16.3247696 }} ,
					{ 21 ,  {14.46699637 }} ,
					{ 22 ,  {14.0511849 }} ,
					{ 24 ,  {12.83034463 }} ,
					{ 26 ,  {11.77602305 }} ,
					{ 27 ,  {11.31351814 }} ,
					{ 32 ,  {6.86145372 }} ,
					{ 33 ,  {10.16501732 }} ,
					{ 35 ,  {15.54179787 }} ,
					{ 36 ,  {13.11975672 }} ,
					{ 39 ,  {18.25069552 }} ,
					{ 40 ,  {17.89244708 }} ,
					{ 41 ,  {16.0096116 }} ,
					{ 45 ,  {17.40946594 }} ,
					{ 46 ,  {13.17420206 }} ,
					{ 48 ,  {23.18131441 }} ,
					{ 49 ,  {19.17702391 }} ,
					{ 52 ,  {19.30378831 }} ,
					{ 53 ,  {18.28251507 }} ,
					{ 55 ,  {21.57954598 }} ,
					{ 56 ,  {23.52804764 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5554684400558472) ? ( (scaler_output_8 <= 0.07249260740354657) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_2 <= 0.5194752067327499) ? ( 4 ) : ( (scaler_output_6 <= -0.5465253964066505) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= -0.9904888868331909) ? ( (scaler_output_4 <= -0.15859099477529526) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -1.3994879722595215) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_5 <= 0.8224952518939972) ? ( (scaler_output_3 <= -0.8141056895256042) ? ( (scaler_output_2 <= 0.7376106083393097) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_3 <= -0.7081706523895264) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_8 <= 0.6220327615737915) ? ( 24 ) : ( (scaler_output_8 <= 1.232419639825821) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_5 <= -0.8790078461170197) ? ( (scaler_output_2 <= -0.652317613363266) ? ( (scaler_output_6 <= 0.8250467479228973) ? ( (scaler_output_4 <= -0.37003713846206665) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_6 <= 1.440005123615265) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_10 <= 0.38361895829439163) ? ( (scaler_output_6 <= 0.25824561808258295) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (scaler_output_5 <= 0.884007453918457) ? ( (scaler_output_10 <= 0.26932352781295776) ? ( (scaler_output_10 <= -0.09689275920391083) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_9 <= -0.949830174446106) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_2 <= 0.11304868012666702) ? ( (scaler_output_4 <= -0.2271086871623993) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_8 <= 0.8534097969532013) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {12.0711718 }} ,
					{ 6 ,  {13.14697939 }} ,
					{ 8 ,  {18.25069552 }} ,
					{ 9 ,  {16.08254262 }} ,
					{ 12 ,  {12.76012926 }} ,
					{ 13 ,  {12.123142 }} ,
					{ 15 ,  {10.35120395 }} ,
					{ 16 ,  {7.44294178 }} ,
					{ 20 ,  {10.15369462 }} ,
					{ 21 ,  {13.1355547 }} ,
					{ 22 ,  {18.4937214 }} ,
					{ 25 ,  {18.20739689 }} ,
					{ 26 ,  {15.30848399 }} ,
					{ 28 ,  {21.34099337 }} ,
					{ 29 ,  {23.6939704 }} ,
					{ 34 ,  {19.36426348 }} ,
					{ 35 ,  {20.13436785 }} ,
					{ 36 ,  {18.10948375 }} ,
					{ 39 ,  {17.85790724 }} ,
					{ 40 ,  {18.25024804 }} ,
					{ 42 ,  {16.00390059 }} ,
					{ 43 ,  {16.91440831 }} ,
					{ 45 ,  {18.9003877 }} ,
					{ 48 ,  {22.53957473 }} ,
					{ 49 ,  {23.76092016 }} ,
					{ 50 ,  {25.24805848 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= 0.34914006292819977) ? ( (scaler_output_5 <= 0.2771869841963053) ? ( (scaler_output_4 <= -0.6321609020233154) ? ( (scaler_output_2 <= -0.05660967528820038) ? ( (scaler_output_6 <= -0.6102499067783356) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= -0.7796354442834854) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_8 <= -1.2744203805923462) ? ( (scaler_output_2 <= 0.5011371970176697) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= -1.1048519611358643) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_3 <= -0.6435166597366333) ? ( (scaler_output_8 <= 1.5058903694152832) ? ( (scaler_output_9 <= 1.0429508239030838) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (scaler_output_8 <= 0.48809032142162323) ? ( (scaler_output_5 <= 1.4788615107536316) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_4 <= 1.1697524785995483) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_5 <= 0.7374852299690247) ? ( (scaler_output_7 <= -0.04169179091695696) ? ( (scaler_output_5 <= 0.4819217175245285) ? ( (scaler_output_4 <= 0.7699208557605743) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (scaler_output_11 <= -0.6820610612630844) ? ( (scaler_output_10 <= 0.7851515263319016) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_8 <= -0.12339046597480774) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_9 <= -1.0851993560791016) ? ( 45 ) : ( (scaler_output_5 <= 1.6037161350250244) ? ( (scaler_output_2 <= 0.7096204161643982) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {9.73504122 }} ,
					{ 6 ,  {6.86145372 }} ,
					{ 7 ,  {7.80992409 }} ,
					{ 8 ,  {5.293284 }} ,
					{ 12 ,  {8.31475198 }} ,
					{ 13 ,  {11.63915186 }} ,
					{ 15 ,  {12.0711718 }} ,
					{ 16 ,  {13.70286584 }} ,
					{ 19 ,  {18.33205802 }} ,
					{ 20 ,  {23.6939704 }} ,
					{ 22 ,  {11.38099315 }} ,
					{ 23 ,  {15.00551178 }} ,
					{ 27 ,  {7.21944335 }} ,
					{ 29 ,  {14.53624519 }} ,
					{ 30 ,  {12.42341176 }} ,
					{ 32 ,  {10.18163117 }} ,
					{ 34 ,  {16.16564831 }} ,
					{ 35 ,  {18.81229912 }} ,
					{ 38 ,  {15.30848399 }} ,
					{ 39 ,  {19.30378831 }} ,
					{ 42 ,  {21.48532903 }} ,
					{ 43 ,  {22.96505827 }} ,
					{ 45 ,  {24.71333827 }} ,
					{ 46 ,  {25.24805848 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.12853724043816328) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_9 <= 0.08022167533636093) ? ( (scaler_output_7 <= -1.0812368243932724) ? ( 4 ) : ( (scaler_output_9 <= -0.9570851922035217) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (scaler_output_6 <= 1.0415067076683044) ? ( (scaler_output_3 <= -0.7378084659576416) ? ( (scaler_output_9 <= -0.20577768050134182) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_6 <= -0.7141208648681641) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_11 <= 0.016009065322577953) ? ( (scaler_output_11 <= -0.07252655643969774) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_10 <= -0.7168997079133987) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_5 <= 0.8174906969070435) ? ( (scaler_output_2 <= -1.0480525493621826) ? ( (scaler_output_3 <= 0.7140388339757919) ? ( 27 ) : ( (scaler_output_4 <= 0.7786935120820999) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_7 <= -1.8351979851722717) ? ( 32 ) : ( (scaler_output_5 <= -1.2151864171028137) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_output_2 <= -0.8964633345603943) ? ( (scaler_output_11 <= -0.9529251307249069) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_7 <= 1.1801438927650452) ? ( (scaler_output_10 <= -0.35275885462760925) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_11 <= -0.03137584030628204) ? ( 45 ) : ( 46 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {9.73504122 }} ,
					{ 6 ,  {6.86145372 }} ,
					{ 7 ,  {5.62734736 }} ,
					{ 10 ,  {11.96544179 }} ,
					{ 11 ,  {12.9998809 }} ,
					{ 13 ,  {11.38099315 }} ,
					{ 14 ,  {7.40009044 }} ,
					{ 17 ,  {12.83034463 }} ,
					{ 18 ,  {14.0511849 }} ,
					{ 21 ,  {18.4937214 }} ,
					{ 22 ,  {18.00761757 }} ,
					{ 23 ,  {16.3247696 }} ,
					{ 27 ,  {10.13178962 }} ,
					{ 29 ,  {16.22456984 }} ,
					{ 30 ,  {18.46962407 }} ,
					{ 33 ,  {19.42123597 }} ,
					{ 34 ,  {20.19903361 }} ,
					{ 35 ,  {23.18131441 }} ,
					{ 39 ,  {23.12722628 }} ,
					{ 40 ,  {21.77400035 }} ,
					{ 42 ,  {21.28942089 }} ,
					{ 43 ,  {19.30378831 }} ,
					{ 45 ,  {25.24805848 }} ,
					{ 46 ,  {24.71333827 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= 0.057984648272395134) ? ( (scaler_output_5 <= -1.050271600484848) ? ( (scaler_output_7 <= -1.4581993222236633) ? ( 4 ) : ( (scaler_output_2 <= -1.3057439923286438) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_9 <= -0.014901649672538042) ? ( (scaler_output_6 <= 0.15673836320638657) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_10 <= -1.2631678581237793) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_2 <= -0.3643086105585098) ? ( (scaler_output_8 <= 0.3692643940448761) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_6 <= 1.6203344464302063) ? ( (scaler_output_9 <= -0.4717315584421158) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_3 <= 1.2855579257011414) ? ( (scaler_output_5 <= -1.730229675769806) ? ( 27 ) : ( (scaler_output_8 <= 0.6467042863368988) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_7 <= 1.1817528009414673) ? ( (scaler_output_8 <= 0.21829358860850334) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_7 <= 1.24564129114151) ? ( (scaler_output_11 <= -0.34223273396492004) ? ( (scaler_output_2 <= 0.9161916673183441) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_8 <= 0.9989134967327118) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_9 <= 0.27823615074157715) ? ( 45 ) : ( 46 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {7.3646808 }} ,
					{ 6 ,  {8.0628501 }} ,
					{ 8 ,  {6.24571025 }} ,
					{ 9 ,  {5.293284 }} ,
					{ 12 ,  {11.71234578 }} ,
					{ 13 ,  {14.0511849 }} ,
					{ 15 ,  {8.07092917 }} ,
					{ 16 ,  {11.13436123 }} ,
					{ 20 ,  {16.08254262 }} ,
					{ 21 ,  {16.30255672 }} ,
					{ 22 ,  {18.33205802 }} ,
					{ 25 ,  {11.38099315 }} ,
					{ 26 ,  {12.83034463 }} ,
					{ 27 ,  {14.46699637 }} ,
					{ 30 ,  {10.18163117 }} ,
					{ 31 ,  {9.73504122 }} ,
					{ 35 ,  {15.62763225 }} ,
					{ 36 ,  {17.18166575 }} ,
					{ 38 ,  {17.66939098 }} ,
					{ 39 ,  {19.62209189 }} ,
					{ 41 ,  {24.71333827 }} ,
					{ 42 ,  {23.6939704 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5990101397037506) ? ( (scaler_output_6 <= 0.5279591083526611) ? ( (scaler_output_5 <= -0.7714441120624542) ? ( (scaler_output_9 <= 0.18723162403330207) ? ( (scaler_output_3 <= -0.8406822383403778) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -1.2438207864761353) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_7 <= 0.5764994323253632) ? ( (scaler_output_9 <= 1.7547411918640137) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= 0.25439614057540894) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= -0.5396069139242172) ? ( (scaler_output_5 <= 0.4527852237224579) ? ( (scaler_output_4 <= -1.056471586227417) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (scaler_output_2 <= 0.8696907758712769) ? ( (scaler_output_9 <= 1.1233226656913757) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_output_7 <= -1.806531846523285) ? ( (scaler_output_9 <= -0.7506086230278015) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_9 <= 1.0257534682750702) ? ( (scaler_output_4 <= -0.6289365440607071) ? ( (scaler_output_2 <= 0.3154761865735054) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_11 <= 1.0744843184947968) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_8 <= 0.6242293119430542) ? ( 41 ) : ( 42 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.293284 }} ,
					{ 6 ,  {6.24571025 }} ,
					{ 8 ,  {6.98004624 }} ,
					{ 9 ,  {7.73242981 }} ,
					{ 12 ,  {10.5481089 }} ,
					{ 13 ,  {8.89707415 }} ,
					{ 15 ,  {12.123142 }} ,
					{ 16 ,  {11.78982164 }} ,
					{ 19 ,  {16.08254262 }} ,
					{ 21 ,  {11.74543987 }} ,
					{ 22 ,  {12.79523695 }} ,
					{ 23 ,  {18.4937214 }} ,
					{ 28 ,  {9.3265075 }} ,
					{ 29 ,  {6.26940047 }} ,
					{ 30 ,  {15.70100345 }} ,
					{ 33 ,  {15.85314653 }} ,
					{ 34 ,  {18.01186323 }} ,
					{ 35 ,  {10.13178962 }} ,
					{ 39 ,  {17.98727598 }} ,
					{ 40 ,  {14.08272607 }} ,
					{ 42 ,  {23.18131441 }} ,
					{ 43 ,  {20.02220769 }} ,
					{ 45 ,  {17.41761148 }} ,
					{ 47 ,  {18.79315169 }} ,
					{ 48 ,  {22.50917595 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.7941106855869293) ? ( (scaler_output_6 <= 0.41291773319244385) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_5 <= -1.1897129714488983) ? ( (scaler_output_2 <= 1.1985486149787903) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= -0.530998945236206) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= 0.4264764077961445) ? ( (scaler_output_3 <= -0.977634608745575) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= -0.4122931510210037) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_8 <= 0.8955034911632538) ? ( (scaler_output_4 <= -1.3330397009849548) ? ( 19 ) : ( (scaler_output_11 <= 0.576289564371109) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (scaler_output_5 <= -0.9059769511222839) ? ( (scaler_output_6 <= -0.10462668538093567) ? ( (scaler_output_9 <= 0.23314205557107925) ? ( (scaler_output_10 <= 0.4377283379435539) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (scaler_output_10 <= 1.0918447077274323) ? ( (scaler_output_2 <= 0.9644909799098969) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_5 <= 0.8174906969070435) ? ( (scaler_output_3 <= 1.1969408988952637) ? ( (scaler_output_11 <= -0.03035035729408264) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_11 <= 0.25653308629989624) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_11 <= -1.7283473014831543) ? ( 45 ) : ( (scaler_output_2 <= 0.018691375851631165) ? ( 47 ) : ( 48 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {5.293284 }} ,
					{ 6 ,  {6.43462385 }} ,
					{ 7 ,  {8.1572054 }} ,
					{ 10 ,  {10.37360098 }} ,
					{ 11 ,  {12.09642323 }} ,
					{ 13 ,  {13.17420206 }} ,
					{ 14 ,  {14.46699637 }} ,
					{ 18 ,  {7.21944335 }} ,
					{ 19 ,  {10.13178962 }} ,
					{ 20 ,  {13.11975672 }} ,
					{ 23 ,  {15.57474269 }} ,
					{ 24 ,  {17.7374995 }} ,
					{ 26 ,  {18.09614541 }} ,
					{ 27 ,  {20.01432241 }} ,
					{ 32 ,  {22.76939497 }} ,
					{ 33 ,  {23.10579689 }} ,
					{ 34 ,  {23.76092016 }} ,
					{ 35 ,  {21.77400035 }} ,
					{ 39 ,  {15.76903958 }} ,
					{ 40 ,  {18.33772262 }} ,
					{ 42 ,  {10.59689049 }} ,
					{ 43 ,  {14.53624519 }} ,
					{ 46 ,  {24.71333827 }} ,
					{ 47 ,  {23.6939704 }} ,
					{ 48 ,  {20.19903361 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.062120383605360985) ? ( (scaler_output_3 <= -0.13997434824705124) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_8 <= -0.15321852965280414) ? ( 4 ) : ( (scaler_output_2 <= -0.7897612154483795) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= -0.13970722258090973) ? ( (scaler_output_3 <= -0.960707813501358) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_7 <= 0.1118408590555191) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_2 <= -0.9460362792015076) ? ( (scaler_output_6 <= 1.1179764568805695) ? ( (scaler_output_6 <= 0.17573610693216324) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_8 <= 0.7470073401927948) ? ( (scaler_output_7 <= 0.22373316809535027) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_3 <= 0.6402660012245178) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_4 <= -0.9005289077758789) ? ( (scaler_output_2 <= 0.9161916673183441) ? ( (scaler_output_2 <= 0.7096204161643982) ? ( (scaler_output_11 <= -0.9496104717254639) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( 35 ) ) : ( (scaler_output_6 <= 1.583541214466095) ? ( (scaler_output_11 <= 1.3498066067695618) ? ( (scaler_output_4 <= -0.7880869805812836) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_7 <= 1.2108368873596191) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_6 <= 1.6388948559761047) ? ( (scaler_output_6 <= 1.6251914501190186) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {12.0711718 }} ,
					{ 6 ,  {13.11975672 }} ,
					{ 7 ,  {16.08254262 }} ,
					{ 10 ,  {6.31547542 }} ,
					{ 11 ,  {7.81364745 }} ,
					{ 13 ,  {9.73504122 }} ,
					{ 14 ,  {12.76012926 }} ,
					{ 18 ,  {11.91612786 }} ,
					{ 19 ,  {11.07464226 }} ,
					{ 20 ,  {18.4937214 }} ,
					{ 23 ,  {13.9993169 }} ,
					{ 24 ,  {16.95606024 }} ,
					{ 25 ,  {23.6939704 }} ,
					{ 27 ,  {7.21944335 }} ,
					{ 31 ,  {15.82358991 }} ,
					{ 32 ,  {18.6441576 }} ,
					{ 34 ,  {19.89559352 }} ,
					{ 35 ,  {23.18131441 }} ,
					{ 38 ,  {19.30378831 }} ,
					{ 39 ,  {15.30848399 }} ,
					{ 41 ,  {23.61986134 }} ,
					{ 42 ,  {20.97303223 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_4 <= -0.6404086947441101) ? ( (scaler_output_5 <= -0.5011763721704483) ? ( (scaler_output_4 <= -1.063253492116928) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_11 <= 1.305152714252472) ? ( (scaler_output_7 <= 0.17647136747837067) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 1.185806393623352) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -0.8259740173816681) ? ( (scaler_output_8 <= 1.5058903694152832) ? ( (scaler_output_7 <= 0.8419815003871918) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_8 <= 0.7568807005882263) ? ( (scaler_output_2 <= -0.08383416384458542) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (scaler_output_5 <= -1.7781072854995728) ? ( 27 ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_3 <= 1.2873224020004272) ? ( (scaler_output_8 <= 0.5515375733375549) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_7 <= 1.1817528009414673) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_2 <= -0.8964633345603943) ? ( (scaler_output_7 <= -0.8578507006168365) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_11 <= 0.36913497745990753) ? ( 41 ) : ( 42 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {9.55754208 }} ,
					{ 6 ,  {6.80310783 }} ,
					{ 7 ,  {14.0511849 }} ,
					{ 10 ,  {11.38099315 }} ,
					{ 11 ,  {12.47011561 }} ,
					{ 13 ,  {13.85617502 }} ,
					{ 14 ,  {16.62489391 }} ,
					{ 16 ,  {18.28251507 }} ,
					{ 17 ,  {23.6939704 }} ,
					{ 22 ,  {15.56670896 }} ,
					{ 23 ,  {17.36059041 }} ,
					{ 25 ,  {18.42018899 }} ,
					{ 26 ,  {21.77400035 }} ,
					{ 27 ,  {10.13178962 }} ,
					{ 31 ,  {17.86130307 }} ,
					{ 32 ,  {20.11900331 }} ,
					{ 34 ,  {22.53957473 }} ,
					{ 35 ,  {20.07765319 }} ,
					{ 38 ,  {23.18131441 }} ,
					{ 39 ,  {25.06981841 }} ,
					{ 40 ,  {20.70189537 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= 0.9240188300609589) ? ( (scaler_output_6 <= 0.41291773319244385) ? ( (scaler_output_4 <= 1.4309563636779785) ? ( (scaler_output_10 <= 0.13386300299316645) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= -1.1706072688102722) ? ( (scaler_output_7 <= -0.37493905425071716) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_5 <= -0.464217945933342) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_2 <= 0.6866031661629677) ? ( 16 ) : ( 17 ) ) ) : ( (scaler_output_8 <= -0.5067865401506424) ? ( (scaler_output_6 <= 0.30062711238861084) ? ( (scaler_output_2 <= 0.4320812299847603) ? ( (scaler_output_3 <= 1.707806408405304) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_5 <= 0.930440366268158) ? ( 25 ) : ( 26 ) ) ) : ( 27 ) ) : ( (scaler_output_7 <= 1.1817528009414673) ? ( (scaler_output_9 <= -0.013723235577344894) ? ( (scaler_output_11 <= 0.25312742590904236) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_9 <= 0.5485169291496277) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_2 <= 0.4201740697026253) ? ( (scaler_output_9 <= -1.0806388854980469) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {5.293284 }} ,
					{ 6 ,  {7.74958696 }} ,
					{ 7 ,  {10.04520361 }} ,
					{ 10 ,  {11.43259402 }} ,
					{ 11 ,  {10.41282335 }} ,
					{ 12 ,  {14.0511849 }} ,
					{ 14 ,  {16.3247696 }} ,
					{ 16 ,  {12.76012926 }} ,
					{ 18 ,  {14.46699637 }} ,
					{ 19 ,  {14.77256375 }} ,
					{ 21 ,  {7.21944335 }} ,
					{ 25 ,  {14.56184302 }} ,
					{ 26 ,  {10.18163117 }} ,
					{ 28 ,  {15.82216231 }} ,
					{ 29 ,  {18.08540232 }} ,
					{ 32 ,  {17.24790354 }} ,
					{ 33 ,  {19.97481285 }} ,
					{ 35 ,  {18.36069989 }} ,
					{ 36 ,  {23.00158349 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5990101397037506) ? ( (scaler_output_6 <= 0.2855916991829872) ? ( (scaler_output_5 <= -0.22010701894760132) ? ( (scaler_output_4 <= -0.452738881111145) ? ( 4 ) : ( (scaler_output_8 <= 1.353529155254364) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_4 <= 1.2920085787773132) ? ( (scaler_output_9 <= 0.17041368037462234) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (scaler_output_7 <= -0.625080943107605) ? ( 14 ) : ( (scaler_output_3 <= -0.8119464814662933) ? ( 16 ) : ( (scaler_output_3 <= -0.6828646957874298) ? ( 18 ) : ( 19 ) ) ) ) ) : ( (scaler_output_5 <= -1.7781072854995728) ? ( 21 ) : ( (scaler_output_8 <= -0.5065665990114212) ? ( (scaler_output_2 <= -0.7435633540153503) ? ( (scaler_output_2 <= -0.8922260701656342) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_5 <= -1.2755717635154724) ? ( 28 ) : ( 29 ) ) ) : ( (scaler_output_5 <= 0.8508428931236267) ? ( (scaler_output_3 <= 1.1969408988952637) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_7 <= -0.35087767853110563) ? ( 35 ) : ( 36 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {9.73504122 }} ,
					{ 5 ,  {8.0628501 }} ,
					{ 7 ,  {6.24571025 }} ,
					{ 8 ,  {5.293284 }} ,
					{ 12 ,  {10.04876989 }} ,
					{ 13 ,  {12.5351062 }} ,
					{ 15 ,  {15.92255811 }} ,
					{ 16 ,  {13.61269348 }} ,
					{ 19 ,  {18.33168679 }} ,
					{ 20 ,  {16.15588065 }} ,
					{ 22 ,  {11.38099315 }} ,
					{ 23 ,  {14.46699637 }} ,
					{ 26 ,  {7.21944335 }} ,
					{ 29 ,  {14.92236459 }} ,
					{ 30 ,  {12.42341176 }} ,
					{ 31 ,  {19.30378831 }} ,
					{ 35 ,  {15.88980266 }} ,
					{ 36 ,  {18.01186323 }} ,
					{ 38 ,  {17.87430096 }} ,
					{ 39 ,  {19.42953688 }} ,
					{ 42 ,  {21.55749686 }} ,
					{ 43 ,  {23.18686483 }} ,
					{ 44 ,  {17.41761148 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.12853724043816328) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_9 <= 0.05892374366521835) ? ( (scaler_output_2 <= -0.08258597552776337) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_9 <= 0.38449516892433167) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_6 <= 0.6631695628166199) ? ( (scaler_output_3 <= -0.6702880263328552) ? ( (scaler_output_4 <= 0.5810590535402298) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_6 <= -0.4942489564418793) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_6 <= 1.6327390670776367) ? ( (scaler_output_9 <= -0.16896472871303558) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_10 <= -0.33393269777297974) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_2 <= -1.002018392086029) ? ( (scaler_output_5 <= -0.7440596669912338) ? ( 26 ) : ( (scaler_output_8 <= 0.8338518142700195) ? ( (scaler_output_7 <= 1.3265424966812134) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) : ( (scaler_output_5 <= 0.7374852299690247) ? ( (scaler_output_5 <= -0.9310081601142883) ? ( (scaler_output_7 <= 0.885921448469162) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_10 <= -0.08968852460384369) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_2 <= 1.0331192016601562) ? ( (scaler_output_3 <= 0.261717714369297) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.54383152 }} ,
					{ 6 ,  {6.90098456 }} ,
					{ 7 ,  {8.24017885 }} ,
					{ 10 ,  {12.00761674 }} ,
					{ 11 ,  {10.92854766 }} ,
					{ 13 ,  {14.29164452 }} ,
					{ 14 ,  {15.92255811 }} ,
					{ 18 ,  {16.08254262 }} ,
					{ 19 ,  {14.46699637 }} ,
					{ 21 ,  {18.41288971 }} ,
					{ 22 ,  {18.00761757 }} ,
					{ 23 ,  {23.6939704 }} ,
					{ 26 ,  {7.21944335 }} ,
					{ 28 ,  {10.18163117 }} ,
					{ 30 ,  {22.76939497 }} ,
					{ 31 ,  {18.51102331 }} ,
					{ 35 ,  {23.18131441 }} ,
					{ 36 ,  {25.0341704 }} ,
					{ 38 ,  {20.62985591 }} ,
					{ 39 ,  {20.70189537 }} ,
					{ 40 ,  {14.53624519 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.2825087904930115) ? ( (scaler_output_6 <= 0.8974297046661377) ? ( (scaler_output_5 <= -0.31683310121297836) ? ( (scaler_output_9 <= 0.6112133711576462) ? ( (scaler_output_5 <= -1.4128466844558716) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= -0.7602905631065369) ? ( (scaler_output_8 <= -0.5940360724925995) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 0.026032395660877228) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -0.47901751101017) ? ( (scaler_output_5 <= 0.06651215255260468) ? ( (scaler_output_2 <= 0.5960759818553925) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_9 <= -0.4717315584421158) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (scaler_output_7 <= 1.2079678177833557) ? ( (scaler_output_5 <= -1.7781072854995728) ? ( 26 ) : ( (scaler_output_7 <= -1.8351979851722717) ? ( 28 ) : ( (scaler_output_4 <= -1.4688674807548523) ? ( 30 ) : ( 31 ) ) ) ) : ( (scaler_output_11 <= 1.3295643329620361) ? ( (scaler_output_2 <= 0.2511781081557274) ? ( (scaler_output_9 <= -1.0806388854980469) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_9 <= 0.9406484663486481) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.94482277 }} ,
					{ 6 ,  {5.293284 }} ,
					{ 8 ,  {6.86145372 }} ,
					{ 9 ,  {7.55699808 }} ,
					{ 11 ,  {17.31914707 }} ,
					{ 13 ,  {11.31420503 }} ,
					{ 14 ,  {6.98004624 }} ,
					{ 17 ,  {14.46699637 }} ,
					{ 18 ,  {11.38099315 }} ,
					{ 21 ,  {16.30255672 }} ,
					{ 22 ,  {18.21025364 }} ,
					{ 23 ,  {23.6939704 }} ,
					{ 28 ,  {12.42341176 }} ,
					{ 29 ,  {10.18163117 }} ,
					{ 31 ,  {14.92236459 }} ,
					{ 32 ,  {13.11975672 }} ,
					{ 34 ,  {19.30378831 }} ,
					{ 35 ,  {20.19903361 }} ,
					{ 39 ,  {17.7055006 }} ,
					{ 40 ,  {18.2440428 }} ,
					{ 42 ,  {15.70652198 }} ,
					{ 43 ,  {15.70100345 }} ,
					{ 46 ,  {22.1721582 }} ,
					{ 47 ,  {18.1906679 }} ,
					{ 49 ,  {24.13998453 }} ,
					{ 50 ,  {20.35262843 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.2825087904930115) ? ( (scaler_output_6 <= 0.6482125818729401) ? ( (scaler_output_5 <= -1.0327386260032654) ? ( (scaler_output_6 <= -0.0061066001653671265) ? ( (scaler_output_9 <= 0.38449516892433167) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_8 <= 1.0705730319023132) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_9 <= -1.4538482427597046) ? ( 11 ) : ( (scaler_output_10 <= 1.2846095561981201) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_5 <= 0.18650264292955399) ? ( (scaler_output_11 <= 0.0970342680811882) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_6 <= 1.5923489928245544) ? ( (scaler_output_5 <= 0.4527852237224579) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (scaler_output_2 <= -0.7201983630657196) ? ( (scaler_output_8 <= 0.4229904115200043) ? ( (scaler_output_6 <= -0.8707682192325592) ? ( (scaler_output_6 <= -1.1550463438034058) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_9 <= -0.3240154981613159) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_6 <= 0.32736143469810486) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_5 <= 0.021007142961025238) ? ( (scaler_output_9 <= 0.5294337719678879) ? ( (scaler_output_10 <= -0.2313607707619667) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_3 <= 1.0496167838573456) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_8 <= -0.35078954696655273) ? ( (scaler_output_4 <= -0.8881331533193588) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_11 <= 0.36913497745990753) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {10.09067946 }} ,
					{ 6 ,  {12.11014945 }} ,
					{ 8 ,  {6.47039731 }} ,
					{ 9 ,  {7.70639896 }} ,
					{ 11 ,  {16.91440831 }} ,
					{ 12 ,  {15.70100345 }} ,
					{ 15 ,  {18.23761382 }} ,
					{ 16 ,  {17.89244708 }} ,
					{ 19 ,  {12.76012926 }} ,
					{ 20 ,  {13.11975672 }} ,
					{ 22 ,  {15.54179787 }} ,
					{ 23 ,  {14.46699637 }} ,
					{ 28 ,  {10.59689049 }} ,
					{ 29 ,  {10.2020931 }} ,
					{ 31 ,  {12.10988659 }} ,
					{ 32 ,  {12.83034463 }} ,
					{ 33 ,  {18.4937214 }} ,
					{ 37 ,  {17.3570282 }} ,
					{ 38 ,  {19.75716176 }} ,
					{ 39 ,  {12.42341176 }} ,
					{ 41 ,  {15.30848399 }} ,
					{ 43 ,  {23.43974603 }} ,
					{ 44 ,  {20.88265328 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.22762642055749893) ? ( (scaler_output_6 <= 0.3923843204975128) ? ( (scaler_output_3 <= 0.6856510639190674) ? ( (scaler_output_7 <= -1.149171769618988) ? ( (scaler_output_5 <= -0.6961230039596558) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_7 <= 0.17647136747837067) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= 1.0880453288555145) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_9 <= -0.36881090700626373) ? ( (scaler_output_3 <= 0.42646485567092896) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_8 <= -0.6228240546770394) ? ( (scaler_output_8 <= -1.2992315292358398) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_9 <= 0.23364531248807907) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_3 <= -1.0470510721206665) ? ( (scaler_output_5 <= 1.2488571107387543) ? ( (scaler_output_9 <= 1.0411399751901627) ? ( (scaler_output_3 <= -1.545422613620758) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_9 <= 1.6338968873023987) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_7 <= 1.3235834240913391) ? ( (scaler_output_11 <= 1.0998644828796387) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (scaler_output_2 <= -0.7461959347128868) ? ( 41 ) : ( (scaler_output_11 <= -0.003324707970023155) ? ( 43 ) : ( 44 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {13.11975672 }} ,
					{ 5 ,  {12.0711718 }} ,
					{ 8 ,  {9.73504122 }} ,
					{ 9 ,  {10.04520361 }} ,
					{ 11 ,  {6.4225845 }} ,
					{ 12 ,  {8.02457722 }} ,
					{ 16 ,  {17.31914707 }} ,
					{ 17 ,  {14.77256375 }} ,
					{ 19 ,  {12.70702033 }} ,
					{ 20 ,  {10.59689049 }} ,
					{ 22 ,  {11.38099315 }} ,
					{ 24 ,  {18.25066948 }} ,
					{ 25 ,  {16.30255672 }} ,
					{ 30 ,  {10.18163117 }} ,
					{ 31 ,  {10.13178962 }} ,
					{ 33 ,  {14.79365812 }} ,
					{ 34 ,  {12.42341176 }} ,
					{ 37 ,  {15.79495831 }} ,
					{ 38 ,  {17.4514578 }} ,
					{ 40 ,  {19.95894273 }} ,
					{ 41 ,  {20.19903361 }} ,
					{ 45 ,  {22.76939497 }} ,
					{ 46 ,  {18.27065706 }} ,
					{ 48 ,  {22.67001693 }} ,
					{ 49 ,  {21.34099337 }} ,
					{ 52 ,  {24.71333827 }} ,
					{ 53 ,  {25.24805848 }} ,
					{ 54 ,  {23.18131441 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.01687277527526021) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_4 <= -0.6136064678430557) ? ( (scaler_output_5 <= -0.7556153833866119) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_7 <= -1.2620937824249268) ? ( (scaler_output_2 <= 0.3755684792995453) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_7 <= 0.17647136747837067) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_6 <= 0.6631695628166199) ? ( (scaler_output_9 <= -1.4538482427597046) ? ( (scaler_output_10 <= -0.19554531574249268) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_11 <= 1.188630759716034) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_10 <= -1.1760790050029755) ? ( 22 ) : ( (scaler_output_2 <= 0.6028776615858078) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_2 <= -0.6842065751552582) ? ( (scaler_output_6 <= 0.8059833943843842) ? ( (scaler_output_7 <= -0.8062174618244171) ? ( (scaler_output_6 <= -0.2856832444667816) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_8 <= -0.13003459572792053) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_3 <= 1.2654917240142822) ? ( (scaler_output_6 <= 1.3440638780593872) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_10 <= 0.46602827310562134) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_7 <= 1.2079678177833557) ? ( (scaler_output_5 <= 1.4537083506584167) ? ( (scaler_output_4 <= -1.4688674807548523) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_2 <= 0.4270458519458771) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_10 <= 1.1469671428203583) ? ( (scaler_output_3 <= 1.0156599581241608) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.293284 }} ,
					{ 6 ,  {6.24571025 }} ,
					{ 8 ,  {7.55699808 }} ,
					{ 9 ,  {6.98004624 }} ,
					{ 12 ,  {10.21730624 }} ,
					{ 13 ,  {11.78982164 }} ,
					{ 15 ,  {11.31351814 }} ,
					{ 16 ,  {8.16845829 }} ,
					{ 19 ,  {12.10988659 }} ,
					{ 21 ,  {12.76012926 }} ,
					{ 22 ,  {12.83034463 }} ,
					{ 24 ,  {16.08254262 }} ,
					{ 25 ,  {18.4937214 }} ,
					{ 30 ,  {15.24796272 }} ,
					{ 31 ,  {13.17420206 }} ,
					{ 33 ,  {10.18163117 }} ,
					{ 34 ,  {6.86145372 }} ,
					{ 37 ,  {14.53624519 }} ,
					{ 38 ,  {16.45480793 }} ,
					{ 40 ,  {17.51855413 }} ,
					{ 41 ,  {19.91519956 }} ,
					{ 45 ,  {17.71276844 }} ,
					{ 46 ,  {14.46699637 }} ,
					{ 48 ,  {20.62985591 }} ,
					{ 49 ,  {19.36426348 }} ,
					{ 52 ,  {24.22039178 }} ,
					{ 53 ,  {22.40213986 }} ,
					{ 55 ,  {18.9003877 }} ,
					{ 56 ,  {17.41761148 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.7756910920143127) ? ( (scaler_output_6 <= 0.39204226434230804) ? ( (scaler_output_5 <= -0.7714441120624542) ? ( (scaler_output_5 <= -1.5550702214241028) ? ( (scaler_output_10 <= -0.24133425951004028) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_4 <= -0.354054793715477) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_7 <= 0.525112971663475) ? ( (scaler_output_4 <= 0.7098836600780487) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_11 <= -0.39164986461400986) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_6 <= 1.05584716796875) ? ( (scaler_output_2 <= -1.2398391366004944) ? ( 19 ) : ( (scaler_output_9 <= 0.7973192129284143) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_2 <= 0.27647875249385834) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_2 <= 0.007412798702716827) ? ( (scaler_output_3 <= 0.4823174625635147) ? ( (scaler_output_4 <= -0.5449816435575485) ? ( (scaler_output_8 <= 0.03929572878405452) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_10 <= 0.2446441575884819) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_8 <= -0.011688321828842163) ? ( (scaler_output_2 <= -1.0453409850597382) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_10 <= -0.3019059479702264) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_5 <= 0.7693573534488678) ? ( (scaler_output_3 <= 1.0506720840930939) ? ( (scaler_output_6 <= 1.6510465145111084) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_10 <= 0.12422573566436768) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_3 <= 1.1224741637706757) ? ( (scaler_output_5 <= 0.9712488055229187) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_8 <= -0.6907780021429062) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
