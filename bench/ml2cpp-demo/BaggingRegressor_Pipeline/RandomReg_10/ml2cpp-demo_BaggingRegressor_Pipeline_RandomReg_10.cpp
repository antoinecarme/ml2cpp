// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_RandomReg_10.exe ml2cpp-demo_BaggingRegressor_Pipeline_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.16680947298137394 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( -0.16351271994443456 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.19149292241003152 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.058384844753055345 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.09933205162122274 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.21293121660488037 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.047865568690029614 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.05078698959084227 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -0.1913199225908187 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.19940405677473352 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.16680947298137394 ) / 1.0289835997047314 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - -0.16351271994443456 ) / 0.9915812535046814 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.19149292241003152 ) / 0.9321147629147756 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.058384844753055345 ) / 1.0855729329506805 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.09933205162122274 ) / 1.0743904412882828 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.21293121660488037 ) / 0.9358074381886248 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.047865568690029614 ) / 1.1363574090613386 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.05078698959084227 ) / 0.9725457460098452 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -0.1913199225908187 ) / 1.1415974677936562 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.19940405677473352 ) / 0.882245682091319 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-405.20748192 }} ,
					{ 6 ,  {-242.07063404 }} ,
					{ 8 ,  {-268.19043239 }} ,
					{ 9 ,  {-98.62910021 }} ,
					{ 11 ,  {-1.77890863 }} ,
					{ 12 ,  {133.87071389 }} ,
					{ 15 ,  {-9.18516091 }} ,
					{ 17 ,  {-154.40083699 }} ,
					{ 18 ,  {-257.81327335 }} ,
					{ 21 ,  {41.46822647 }} ,
					{ 22 ,  {172.11640989 }} ,
					{ 24 ,  {199.53096617 }} ,
					{ 25 ,  {323.54648797 }} ,
					{ 30 ,  {60.83005802 }} ,
					{ 31 ,  {58.56592202 }} ,
					{ 32 ,  {23.51174878 }} ,
					{ 33 ,  {116.88919618 }} ,
					{ 37 ,  {259.87552026 }} ,
					{ 38 ,  {325.07388162 }} ,
					{ 40 ,  {194.40871671 }} ,
					{ 41 ,  {228.58868552 }} ,
					{ 43 ,  {447.69098355 }} ,
					{ 45 ,  {355.9935162 }} ,
					{ 46 ,  {393.26109279 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_6 <= -0.3798469603061676) ? ( (scaler_output_8 <= 1.5122901797294617) ? ( (scaler_output_9 <= -0.4780315011739731) ? ( (scaler_output_7 <= -1.0161686539649963) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -1.761682391166687) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= -0.5166343376040459) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_8 <= -0.3954513967037201) ? ( (scaler_output_10 <= -1.4288303852081299) ? ( 15 ) : ( (scaler_output_11 <= -0.8729816824197769) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_4 <= 1.0448696315288544) ? ( (scaler_output_3 <= 0.12294390052556992) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_8 <= -0.12812240421772003) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_2 <= -0.4683295339345932) ? ( (scaler_output_10 <= 1.5136516094207764) ? ( (scaler_output_10 <= 1.2387386560440063) ? ( (scaler_output_9 <= 0.1715525984764099) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( 33 ) ) : ( (scaler_output_7 <= 0.5281001180410385) ? ( (scaler_output_7 <= -0.8354119956493378) ? ( (scaler_output_10 <= 1.361190915107727) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_6 <= 0.06756183505058289) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_output_7 <= 0.9063424170017242) ? ( 43 ) : ( (scaler_output_11 <= 0.8114052712917328) ? ( 45 ) : ( 46 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-284.89041043 }} ,
					{ 6 ,  {-165.64587305 }} ,
					{ 7 ,  {-210.3549175 }} ,
					{ 8 ,  {-53.5585581 }} ,
					{ 10 ,  {-351.38429309 }} ,
					{ 12 ,  {-459.03067075 }} ,
					{ 13 ,  {-422.390294 }} ,
					{ 18 ,  {-251.2683419 }} ,
					{ 19 ,  {-155.53419885 }} ,
					{ 20 ,  {-9.18516091 }} ,
					{ 23 ,  {-223.26828856 }} ,
					{ 24 ,  {-3.64150041 }} ,
					{ 26 ,  {156.85798347 }} ,
					{ 27 ,  {144.42445426 }} ,
					{ 31 ,  {11.97984848 }} ,
					{ 32 ,  {23.51174878 }} ,
					{ 34 ,  {-27.42654029 }} ,
					{ 35 ,  {-32.37006064 }} ,
					{ 38 ,  {-14.48252166 }} ,
					{ 39 ,  {-33.33701473 }} ,
					{ 41 ,  {210.19737687 }} ,
					{ 42 ,  {373.29587624 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.9428369104862213) ? ( (scaler_output_7 <= -1.2679385542869568) ? ( (scaler_output_10 <= 0.4619877189397812) ? ( (scaler_output_3 <= -0.6295563727617264) ? ( 4 ) : ( (scaler_output_6 <= 0.39995260536670685) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (scaler_output_5 <= -1.4116946458816528) ? ( 10 ) : ( (scaler_output_8 <= -0.4546668976545334) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_10 <= -0.17482367157936096) ? ( (scaler_output_8 <= -0.245400108397007) ? ( (scaler_output_9 <= 0.5857850909233093) ? ( (scaler_output_11 <= -2.183635890483856) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_4 <= 0.8959313333034515) ? ( (scaler_output_9 <= -1.1340858489274979) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_3 <= 0.9612803906202316) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_output_5 <= -0.7398846447467804) ? ( (scaler_output_7 <= 1.213316410779953) ? ( (scaler_output_5 <= -0.9330978095531464) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_5 <= -1.5038837790489197) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_6 <= -0.7899761199951172) ? ( (scaler_output_9 <= -0.5092946738004684) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_2 <= 0.6652275621891022) ? ( 41 ) : ( 42 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-296.83931668 }} ,
					{ 6 ,  {-177.75033458 }} ,
					{ 8 ,  {-141.63488527 }} ,
					{ 9 ,  {-31.80056391 }} ,
					{ 12 ,  {-102.85089819 }} ,
					{ 13 ,  {12.14505871 }} ,
					{ 15 ,  {290.7091541 }} ,
					{ 16 ,  {320.68265233 }} ,
					{ 19 ,  {447.69098355 }} ,
					{ 20 ,  {316.51213779 }} ,
					{ 23 ,  {150.64121886 }} ,
					{ 24 ,  {191.55215494 }} ,
					{ 25 ,  {259.87552026 }} ,
					{ 29 ,  {228.58868552 }} ,
					{ 30 ,  {325.07388162 }} ,
					{ 33 ,  {60.60536392 }} ,
					{ 34 ,  {113.44087953 }} ,
					{ 35 ,  {198.97164294 }} ,
					{ 38 ,  {243.63801062 }} ,
					{ 39 ,  {277.98128451 }} ,
					{ 41 ,  {360.61572443 }} ,
					{ 42 ,  {393.26109279 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.8095761239528656) ? ( (scaler_output_4 <= 0.9782909452915192) ? ( (scaler_output_7 <= 0.014573076623491943) ? ( (scaler_output_9 <= 0.04512178339064121) ? ( (scaler_output_6 <= -0.4225664883852005) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_6 <= -0.44942520558834076) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= 1.399146854877472) ? ( (scaler_output_8 <= -0.27082373201847076) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_6 <= -0.05861467123031616) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_8 <= -0.30710306018590927) ? ( (scaler_output_11 <= -0.20867788791656494) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_10 <= 0.601702518761158) ? ( (scaler_output_6 <= -0.00038717687129974365) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (scaler_output_7 <= 0.262357197701931) ? ( (scaler_output_7 <= -0.6946527063846588) ? ( (scaler_output_4 <= 0.6101153790950775) ? ( 29 ) : ( 30 ) ) : ( (scaler_output_8 <= 0.8141590803861618) ? ( (scaler_output_6 <= 0.8622722029685974) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_8 <= 0.23263979703187943) ? ( (scaler_output_11 <= -0.060503359884023666) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_11 <= -0.2787798047065735) ? ( 41 ) : ( 42 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-459.03067075 }} ,
					{ 5 ,  {-305.67509721 }} ,
					{ 8 ,  {-218.80082207 }} ,
					{ 9 ,  {-182.33200566 }} ,
					{ 11 ,  {-53.5585581 }} ,
					{ 12 ,  {-122.95886224 }} ,
					{ 16 ,  {-116.67620856 }} ,
					{ 17 ,  {-216.97685029 }} ,
					{ 19 ,  {-181.51172981 }} ,
					{ 20 ,  {17.61928005 }} ,
					{ 23 ,  {15.08637448 }} ,
					{ 24 ,  {128.21020799 }} ,
					{ 26 ,  {320.68265233 }} ,
					{ 27 ,  {376.93840861 }} ,
					{ 29 ,  {-298.79907559 }} ,
					{ 33 ,  {-9.18516091 }} ,
					{ 34 ,  {-67.71218597 }} ,
					{ 36 ,  {110.320035 }} ,
					{ 37 ,  {264.368741 }} ,
					{ 40 ,  {169.37489455 }} ,
					{ 41 ,  {265.03471296 }} ,
					{ 43 ,  {314.98747159 }} ,
					{ 44 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.4185757488012314) ? ( (scaler_output_7 <= -0.09774368163198233) ? ( (scaler_output_6 <= -0.929365485906601) ? ( (scaler_output_4 <= -1.0123246237635612) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_9 <= 0.10032571479678154) ? ( (scaler_output_3 <= -0.00482979416847229) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_7 <= -1.6788381934165955) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_10 <= 0.1501882653683424) ? ( (scaler_output_8 <= -0.2280818521976471) ? ( (scaler_output_8 <= -0.4127510190010071) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_7 <= 0.02638519264291972) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_9 <= 0.569673478603363) ? ( (scaler_output_11 <= -0.06553857028484344) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_3 <= 0.09259194508194923) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_6 <= -1.6506281197071075) ? ( 29 ) : ( (scaler_output_3 <= -0.030735751381143928) ? ( (scaler_output_8 <= -0.3158585727214813) ? ( (scaler_output_8 <= -0.7451171725988388) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_4 <= 0.6720361113548279) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_8 <= 0.020799100399017334) ? ( 40 ) : ( 41 ) ) : ( (scaler_output_2 <= 1.6469647884368896) ? ( 43 ) : ( 44 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-459.03067075 }} ,
					{ 6 ,  {-248.32160218 }} ,
					{ 7 ,  {-147.90439309 }} ,
					{ 9 ,  {-280.43388967 }} ,
					{ 10 ,  {-351.38429309 }} ,
					{ 13 ,  {-20.2700101 }} ,
					{ 14 ,  {-53.5585581 }} ,
					{ 16 ,  {259.87552026 }} ,
					{ 17 ,  {235.32017089 }} ,
					{ 22 ,  {-200.84036412 }} ,
					{ 23 ,  {-134.45763417 }} ,
					{ 25 ,  {27.46890449 }} ,
					{ 26 ,  {-65.16829602 }} ,
					{ 29 ,  {-5.73651634 }} ,
					{ 30 ,  {34.80410029 }} ,
					{ 32 ,  {144.42445426 }} ,
					{ 33 ,  {156.85798347 }} ,
					{ 37 ,  {58.56592202 }} ,
					{ 38 ,  {116.88919618 }} ,
					{ 40 ,  {-1.70106023 }} ,
					{ 41 ,  {-33.0146967 }} ,
					{ 44 ,  {53.72934573 }} ,
					{ 45 ,  {285.43270621 }} ,
					{ 47 ,  {257.24781677 }} ,
					{ 48 ,  {371.49751388 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_3 <= 0.2923084795475006) ? ( (scaler_output_4 <= -1.8589808344841003) ? ( 3 ) : ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_7 <= -1.5423945784568787) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_3 <= -0.33297400921583176) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_4 <= 0.13702774047851562) ? ( (scaler_output_11 <= -1.1580844148993492) ? ( 13 ) : ( 14 ) ) : ( (scaler_output_5 <= 0.7820444479584694) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_10 <= 0.0016293618828058243) ? ( (scaler_output_4 <= 0.17639855295419693) ? ( (scaler_output_3 <= 0.435245156288147) ? ( (scaler_output_11 <= 0.47935765981674194) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_5 <= 0.12735484912991524) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_3 <= 0.08869194984436035) ? ( (scaler_output_7 <= 0.9192926287651062) ? ( 29 ) : ( 30 ) ) : ( (scaler_output_4 <= 1.32602459192276) ? ( 32 ) : ( 33 ) ) ) ) : ( (scaler_output_4 <= -0.7241815030574799) ? ( (scaler_output_4 <= -1.2308654189109802) ? ( (scaler_output_7 <= 0.5481903180480003) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_8 <= 0.6225224733352661) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_output_2 <= -0.07108019292354584) ? ( (scaler_output_5 <= -0.015767760574817657) ? ( 44 ) : ( 45 ) ) : ( (scaler_output_9 <= 0.8856830894947052) ? ( 47 ) : ( 48 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-351.38429309 }} ,
					{ 6 ,  {-422.390294 }} ,
					{ 7 ,  {-165.64587305 }} ,
					{ 10 ,  {-230.44575984 }} ,
					{ 11 ,  {-117.15459507 }} ,
					{ 13 ,  {-40.09660567 }} ,
					{ 14 ,  {156.7480822 }} ,
					{ 18 ,  {50.36841271 }} ,
					{ 19 ,  {116.88919618 }} ,
					{ 21 ,  {-101.20974879 }} ,
					{ 22 ,  {-33.33701473 }} ,
					{ 23 ,  {393.26109279 }} ,
					{ 28 ,  {-181.51172981 }} ,
					{ 29 ,  {-251.2683419 }} ,
					{ 31 ,  {22.30851676 }} ,
					{ 32 ,  {-33.0622703 }} ,
					{ 35 ,  {277.98128451 }} ,
					{ 36 ,  {235.32017089 }} ,
					{ 37 ,  {156.85798347 }} ,
					{ 41 ,  {79.57683038 }} ,
					{ 42 ,  {198.97164294 }} ,
					{ 44 ,  {210.46744176 }} ,
					{ 45 ,  {304.2886959 }} ,
					{ 48 ,  {270.1533982 }} ,
					{ 49 ,  {344.49193801 }} ,
					{ 50 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.007927310187369585) ? ( (scaler_output_10 <= 0.6936891376972198) ? ( (scaler_output_5 <= -1.0870668292045593) ? ( (scaler_output_8 <= -0.128759503364563) ? ( (scaler_output_2 <= -0.06141167879104614) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= 0.44873759150505066) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 0.6017136871814728) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_7 <= 1.183385819196701) ? ( (scaler_output_5 <= 0.2576393336057663) ? ( (scaler_output_11 <= 1.9634636640548706) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_8 <= 0.5135495364665985) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_4 <= 0.8083431720733643) ? ( (scaler_output_11 <= -0.7062302529811859) ? ( (scaler_output_4 <= 0.10636130790226161) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_10 <= -0.1874106116592884) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_11 <= 1.1784224212169647) ? ( (scaler_output_2 <= 0.4929808974266052) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) ) : ( (scaler_output_3 <= 0.1847696714103222) ? ( (scaler_output_11 <= 0.09416648745536804) ? ( (scaler_output_3 <= 0.01517878845334053) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_6 <= 0.4655503034591675) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_9 <= 2.0447340607643127) ? ( (scaler_output_6 <= -0.6538205444812775) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-459.03067075 }} ,
					{ 5 ,  {-422.390294 }} ,
					{ 8 ,  {-202.31673701 }} ,
					{ 9 ,  {-147.92721989 }} ,
					{ 11 ,  {-53.5585581 }} ,
					{ 12 ,  {-101.20974879 }} ,
					{ 16 ,  {-223.26828856 }} ,
					{ 17 ,  {-140.83123535 }} ,
					{ 19 ,  {-74.45046085 }} ,
					{ 20 ,  {-17.44129299 }} ,
					{ 23 ,  {58.67463616 }} ,
					{ 24 ,  {44.29871811 }} ,
					{ 26 ,  {11.97984848 }} ,
					{ 27 ,  {-8.54151458 }} ,
					{ 31 ,  {144.42445426 }} ,
					{ 33 ,  {-268.19043239 }} ,
					{ 34 ,  {-154.40083699 }} ,
					{ 37 ,  {36.64726906 }} ,
					{ 38 ,  {-1.80904277 }} ,
					{ 39 ,  {156.85798347 }} ,
					{ 42 ,  {-298.79907559 }} ,
					{ 43 ,  {-20.42352874 }} ,
					{ 46 ,  {-27.42654029 }} ,
					{ 47 ,  {113.44087953 }} ,
					{ 49 ,  {220.69433825 }} ,
					{ 50 ,  {389.66883268 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.007927310187369585) ? ( (scaler_output_7 <= -0.6461533010005951) ? ( (scaler_output_3 <= -0.7652519196271896) ? ( (scaler_output_3 <= -1.3587387800216675) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_10 <= 0.4619877189397812) ? ( (scaler_output_3 <= -0.15017152205109596) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_10 <= 1.0033684968948364) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_3 <= 0.7406691908836365) ? ( (scaler_output_9 <= -0.6827855259180069) ? ( (scaler_output_7 <= 0.3240702226758003) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_5 <= 1.0289670526981354) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_7 <= 0.4961199462413788) ? ( (scaler_output_3 <= 1.5310096740722656) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_5 <= -0.1660155951976776) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_10 <= -0.218040831387043) ? ( (scaler_output_7 <= 0.11110728979110718) ? ( (scaler_output_9 <= -0.15337461605668068) ? ( 31 ) : ( (scaler_output_7 <= -0.3447260521352291) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_3 <= 0.3520168364048004) ? ( (scaler_output_2 <= 0.20415764302015305) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (scaler_output_6 <= -1.2978788912296295) ? ( (scaler_output_7 <= -0.2148299515247345) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_3 <= -1.2278449535369873) ? ( (scaler_output_6 <= 0.6635289490222931) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-219.73048001 }} ,
					{ 6 ,  {-69.44228833 }} ,
					{ 8 ,  {-422.390294 }} ,
					{ 9 ,  {-316.32748142 }} ,
					{ 12 ,  {-224.07377768 }} ,
					{ 13 ,  {-67.87408882 }} ,
					{ 15 ,  {212.28993399 }} ,
					{ 16 ,  {13.66733519 }} ,
					{ 19 ,  {-284.89041043 }} ,
					{ 21 ,  {62.64480581 }} ,
					{ 22 ,  {-6.19072274 }} ,
					{ 25 ,  {240.96884029 }} ,
					{ 26 ,  {113.44087953 }} ,
					{ 28 ,  {479.70721604 }} ,
					{ 29 ,  {376.93840861 }} ,
					{ 32 ,  {-9.18516091 }} ,
					{ 34 ,  {144.42445426 }} ,
					{ 35 ,  {156.85798347 }} ,
					{ 39 ,  {259.87552026 }} ,
					{ 40 ,  {235.32017089 }} ,
					{ 42 ,  {194.40871671 }} ,
					{ 43 ,  {191.55215494 }} ,
					{ 46 ,  {349.42168234 }} ,
					{ 47 ,  {318.65257375 }} ,
					{ 48 ,  {277.98128451 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.8083431720733643) ? ( (scaler_output_9 <= 0.7477214932441711) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_10 <= 0.6157704889774323) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.7485633790493011) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= -0.01286462601274252) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= 0.14383190218359232) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_10 <= 0.10793066024780273) ? ( (scaler_output_7 <= -1.2455085664987564) ? ( 19 ) : ( (scaler_output_7 <= -0.062260404229164124) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_8 <= 0.4694274514913559) ? ( (scaler_output_9 <= 1.6634272336959839) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_7 <= 0.7375079393386841) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_10 <= -0.30469074100255966) ? ( (scaler_output_4 <= 0.9782909452915192) ? ( 32 ) : ( (scaler_output_6 <= -0.25074687600135803) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_6 <= 0.3019660413265228) ? ( (scaler_output_7 <= -0.8450774252414703) ? ( (scaler_output_5 <= 0.7820444479584694) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_9 <= -0.4696799535304308) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_3 <= 1.9758015275001526) ? ( (scaler_output_9 <= -1.0312672555446625) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-284.89041043 }} ,
					{ 6 ,  {-230.73613628 }} ,
					{ 8 ,  {-172.51070738 }} ,
					{ 9 ,  {-91.26313837 }} ,
					{ 12 ,  {-298.79907559 }} ,
					{ 13 ,  {-268.19043239 }} ,
					{ 14 ,  {-351.38429309 }} ,
					{ 18 ,  {-232.60163967 }} ,
					{ 19 ,  {-182.68535868 }} ,
					{ 21 ,  {-94.74256141 }} ,
					{ 22 ,  {7.93980826 }} ,
					{ 24 ,  {-8.54151458 }} ,
					{ 26 ,  {131.60358684 }} ,
					{ 27 ,  {232.03025796 }} ,
					{ 32 ,  {-53.5585581 }} ,
					{ 33 ,  {-101.20974879 }} ,
					{ 35 ,  {53.47827181 }} ,
					{ 36 ,  {-33.33701473 }} ,
					{ 37 ,  {393.26109279 }} ,
					{ 41 ,  {228.58868552 }} ,
					{ 42 ,  {259.87552026 }} ,
					{ 43 ,  {194.40871671 }} ,
					{ 46 ,  {290.7091541 }} ,
					{ 47 ,  {334.7146063 }} ,
					{ 48 ,  {447.69098355 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_7 <= -0.7631610631942749) ? ( (scaler_output_7 <= -1.1942983269691467) ? ( (scaler_output_3 <= -0.7743398547172546) ? ( (scaler_output_5 <= -0.5036529749631882) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= -0.4635252505540848) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= -0.33297400921583176) ? ( (scaler_output_8 <= 0.6833348260261118) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_10 <= 0.12877562269568443) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_5 <= 0.558073453605175) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_8 <= -0.3414004445075989) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_4 <= -0.5483598634600639) ? ( 24 ) : ( (scaler_output_10 <= 0.42556802928447723) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_4 <= -0.02671101689338684) ? ( (scaler_output_9 <= 0.9470257759094238) ? ( (scaler_output_7 <= -0.5247380211949348) ? ( (scaler_output_10 <= 1.0033684968948364) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_2 <= 0.19262078404426575) ? ( 35 ) : ( 36 ) ) ) : ( 37 ) ) : ( (scaler_output_10 <= 1.3501418828964233) ? ( (scaler_output_2 <= 0.2658329978585243) ? ( (scaler_output_4 <= 0.8518762290477753) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (scaler_output_2 <= 1.6595296263694763) ? ( (scaler_output_11 <= 1.7434358596801758e-05) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-459.03067075 }} ,
					{ 6 ,  {-422.390294 }} ,
					{ 8 ,  {-302.2370864 }} ,
					{ 9 ,  {-189.91140237 }} ,
					{ 11 ,  {-268.19043239 }} ,
					{ 13 ,  {-21.18053754 }} ,
					{ 14 ,  {113.44087953 }} ,
					{ 18 ,  {-116.62359065 }} ,
					{ 19 ,  {-181.59010118 }} ,
					{ 21 ,  {-37.85888703 }} ,
					{ 22 ,  {156.7480822 }} ,
					{ 25 ,  {179.67722287 }} ,
					{ 26 ,  {44.73531346 }} ,
					{ 28 ,  {301.70077103 }} ,
					{ 29 ,  {213.3698611 }} ,
					{ 34 ,  {325.07388162 }} ,
					{ 35 ,  {320.68265233 }} ,
					{ 37 ,  {360.61572443 }} ,
					{ 38 ,  {351.37130796 }} ,
					{ 39 ,  {447.69098355 }} ,
					{ 42 ,  {194.40871671 }} ,
					{ 44 ,  {246.88551254 }} ,
					{ 45 ,  {290.7091541 }} ,
					{ 46 ,  {58.56592202 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_3 <= -0.41629238426685333) ? ( (scaler_output_9 <= 0.14091176725924015) ? ( (scaler_output_5 <= -0.7203118205070496) ? ( (scaler_output_7 <= -1.0065246522426605) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= -0.9757114350795746) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= -1.5120097994804382) ? ( 11 ) : ( (scaler_output_6 <= 0.6635289490222931) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_4 <= -0.3784916251897812) ? ( (scaler_output_3 <= 0.44873759150505066) ? ( (scaler_output_4 <= -1.2500613331794739) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_2 <= 0.43696703016757965) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_5 <= 0.4288088530302048) ? ( (scaler_output_9 <= -0.23121614009141922) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_2 <= 0.22233962267637253) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_3 <= 0.7794442772865295) ? ( (scaler_output_2 <= 1.271692305803299) ? ( (scaler_output_7 <= 0.7718353867530823) ? ( (scaler_output_7 <= -0.6338682174682617) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_6 <= 0.6410861611366272) ? ( 37 ) : ( 38 ) ) ) : ( 39 ) ) : ( (scaler_output_3 <= 1.1398407220840454) ? ( (scaler_output_6 <= -0.867460161447525) ? ( 42 ) : ( (scaler_output_5 <= 0.3618583455681801) ? ( 44 ) : ( 45 ) ) ) : ( 46 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-302.2370864 }} ,
					{ 6 ,  {-351.38429309 }} ,
					{ 7 ,  {-422.390294 }} ,
					{ 9 ,  {-268.19043239 }} ,
					{ 11 ,  {-186.24037603 }} ,
					{ 12 ,  {-220.54552689 }} ,
					{ 16 ,  {-181.51172981 }} ,
					{ 17 ,  {-10.10700221 }} ,
					{ 19 ,  {-140.83123535 }} ,
					{ 20 ,  {-223.26828856 }} ,
					{ 22 ,  {191.55215494 }} ,
					{ 23 ,  {447.69098355 }} ,
					{ 28 ,  {68.71818079 }} ,
					{ 29 ,  {-4.14508081 }} ,
					{ 31 ,  {-237.150375 }} ,
					{ 32 ,  {-90.66860045 }} ,
					{ 34 ,  {360.61572443 }} ,
					{ 35 ,  {393.26109279 }} ,
					{ 39 ,  {62.64480581 }} ,
					{ 40 ,  {144.42445426 }} ,
					{ 42 ,  {258.9702912 }} ,
					{ 43 ,  {196.69017983 }} ,
					{ 46 ,  {331.24146474 }} ,
					{ 47 ,  {228.58868552 }} ,
					{ 48 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.14761683717370033) ? ( (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_9 <= -0.037589069455862045) ? ( (scaler_output_9 <= -0.09779385291039944) ? ( (scaler_output_6 <= -0.7887376248836517) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_10 <= -1.292105495929718) ? ( 9 ) : ( (scaler_output_6 <= 1.1245399713516235) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_4 <= 1.412977010011673) ? ( (scaler_output_11 <= 0.8996148705482483) ? ( (scaler_output_10 <= -1.5609650611877441) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_10 <= -1.158886380493641) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_10 <= 1.48618895560503) ? ( 22 ) : ( 23 ) ) ) ) : ( (scaler_output_4 <= 0.14351950585842133) ? ( (scaler_output_9 <= 0.9470257759094238) ? ( (scaler_output_2 <= 0.30570174753665924) ? ( (scaler_output_3 <= 1.2788571119308472) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_3 <= 0.08295763656497002) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_6 <= -0.22109383344650269) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_5 <= -0.22441939264535904) ? ( (scaler_output_2 <= -0.5118970908224583) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_2 <= 0.2658329978585243) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_6 <= 1.8639472126960754) ? ( (scaler_output_9 <= 0.9868417382240295) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-280.71935833 }} ,
					{ 6 ,  {-175.65755262 }} ,
					{ 8 ,  {-210.3549175 }} ,
					{ 9 ,  {-86.94585495 }} ,
					{ 12 ,  {-223.70135853 }} ,
					{ 13 ,  {-59.48211683 }} ,
					{ 15 ,  {-9.8778035 }} ,
					{ 16 ,  {234.95769992 }} ,
					{ 20 ,  {248.45948375 }} ,
					{ 21 ,  {169.37489455 }} ,
					{ 23 ,  {349.42168234 }} ,
					{ 24 ,  {316.51213779 }} ,
					{ 26 ,  {62.64480581 }} ,
					{ 27 ,  {-9.18516091 }} ,
					{ 29 ,  {116.88919618 }} ,
					{ 33 ,  {355.9935162 }} ,
					{ 34 ,  {322.43914405 }} ,
					{ 36 ,  {290.7091541 }} ,
					{ 37 ,  {243.63801062 }} ,
					{ 38 ,  {447.69098355 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_4 <= 0.5463549196720123) ? ( (scaler_output_7 <= -0.24096271395683289) ? ( (scaler_output_5 <= 0.13666564971208572) ? ( (scaler_output_3 <= -0.22167320922017097) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= -0.7872759401798248) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= 0.015268662944436073) ? ( (scaler_output_6 <= -1.2609769105911255) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_4 <= -0.7315464615821838) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_9 <= 0.6921540200710297) ? ( (scaler_output_6 <= 0.37174221873283386) ? ( (scaler_output_4 <= 1.4766360521316528) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_4 <= 1.9546775817871094) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_2 <= -0.36062175035476685) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_output_2 <= -1.689899742603302) ? ( 29 ) : ( (scaler_output_4 <= 1.4639790058135986) ? ( (scaler_output_2 <= 1.07509645819664) ? ( (scaler_output_11 <= 0.4519040733575821) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_6 <= -0.4534766413271427) ? ( 36 ) : ( 37 ) ) ) : ( 38 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-261.02039272 }} ,
					{ 6 ,  {-351.38429309 }} ,
					{ 7 ,  {-154.40083699 }} ,
					{ 10 ,  {-148.30330432 }} ,
					{ 11 ,  {-53.6467133 }} ,
					{ 13 ,  {2.89456287 }} ,
					{ 14 ,  {54.02761567 }} ,
					{ 18 ,  {37.34665341 }} ,
					{ 19 ,  {8.92365624 }} ,
					{ 20 ,  {-27.42654029 }} ,
					{ 22 ,  {144.42445426 }} ,
					{ 23 ,  {277.98128451 }} ,
					{ 26 ,  {325.07388162 }} ,
					{ 29 ,  {-210.3549175 }} ,
					{ 30 ,  {-301.0910828 }} ,
					{ 32 ,  {-101.20974879 }} ,
					{ 33 ,  {-165.64587305 }} ,
					{ 36 ,  {58.56592202 }} ,
					{ 38 ,  {-8.54151458 }} ,
					{ 39 ,  {-24.72802407 }} ,
					{ 42 ,  {178.16748523 }} ,
					{ 43 ,  {276.99846689 }} ,
					{ 45 ,  {447.69098355 }} ,
					{ 46 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.0714151170104742) ? ( (scaler_output_4 <= 0.34513597190380096) ? ( (scaler_output_5 <= -1.0795968770980835) ? ( (scaler_output_3 <= 0.526381503790617) ? ( (scaler_output_11 <= 0.5968180298805237) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= 0.6540780365467072) ? ( (scaler_output_7 <= 0.8646484613418579) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.47950613498687744) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= 0.36121538281440735) ? ( (scaler_output_11 <= -0.1288725510239601) ? ( (scaler_output_8 <= 1.5617499351501465) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_5 <= -0.08463533222675323) ? ( 22 ) : ( 23 ) ) ) ) : ( (scaler_output_7 <= -0.9524809122085571) ? ( (scaler_output_8 <= -0.46485866606235504) ? ( 26 ) : ( (scaler_output_11 <= -0.7613807618618011) ? ( (scaler_output_7 <= -2.014664351940155) ? ( 29 ) : ( 30 ) ) : ( (scaler_output_11 <= 0.005976766347885132) ? ( 32 ) : ( 33 ) ) ) ) : ( (scaler_output_6 <= -0.8129599392414093) ? ( (scaler_output_4 <= -1.8326379656791687) ? ( 36 ) : ( (scaler_output_8 <= -0.05869222991168499) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_2 <= 1.6595296263694763) ? ( (scaler_output_3 <= 0.1847696714103222) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_9 <= 0.7151849269866943) ? ( 45 ) : ( 46 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-230.73613628 }} ,
					{ 6 ,  {-298.74686828 }} ,
					{ 8 ,  {-175.94312454 }} ,
					{ 9 ,  {-78.87804025 }} ,
					{ 12 ,  {-422.390294 }} ,
					{ 13 ,  {-459.03067075 }} ,
					{ 15 ,  {-298.79907559 }} ,
					{ 16 ,  {-351.38429309 }} ,
					{ 20 ,  {-141.94613915 }} ,
					{ 21 ,  {6.03691242 }} ,
					{ 23 ,  {-154.40083699 }} ,
					{ 24 ,  {14.73411326 }} ,
					{ 27 ,  {108.7691166 }} ,
					{ 28 ,  {340.49816578 }} ,
					{ 30 ,  {-10.8893497 }} ,
					{ 31 ,  {136.81863919 }} ,
					{ 35 ,  {8.92365624 }} ,
					{ 36 ,  {38.71263785 }} ,
					{ 37 ,  {113.44087953 }} ,
					{ 41 ,  {144.42445426 }} ,
					{ 42 ,  {191.55215494 }} ,
					{ 44 ,  {255.02914018 }} ,
					{ 45 ,  {235.32017089 }} ,
					{ 47 ,  {310.60889078 }} ,
					{ 49 ,  {351.37130796 }} ,
					{ 50 ,  {349.42168234 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.5733436048030853) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_3 <= -0.7743398547172546) ? ( (scaler_output_4 <= -0.8429703637957573) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_7 <= -1.3173937797546387) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= -0.7485633790493011) ? ( (scaler_output_5 <= -1.0433351397514343) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_3 <= -0.33297400921583176) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_10 <= 0.0714151170104742) ? ( (scaler_output_3 <= 0.7111696898937225) ? ( (scaler_output_4 <= 0.2539488971233368) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= -1.4027109742164612) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_7 <= 0.49287089705467224) ? ( (scaler_output_4 <= 0.14913317561149597) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_7 <= 0.763214111328125) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_11 <= -0.40230631828308105) ? ( (scaler_output_6 <= 1.1881286799907684) ? ( (scaler_output_11 <= -0.49766872823238373) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) : ( (scaler_output_6 <= 0.38173192739486694) ? ( (scaler_output_11 <= 0.30690107494592667) ? ( (scaler_output_10 <= -0.12937448173761368) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_6 <= 0.03796053338737693) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_2 <= -0.4384416937828064) ? ( 47 ) : ( (scaler_output_2 <= -0.0244731605052948) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-186.24037603 }} ,
					{ 5 ,  {-101.20974879 }} ,
					{ 8 ,  {-230.73613628 }} ,
					{ 9 ,  {-287.88930608 }} ,
					{ 10 ,  {-351.38429309 }} ,
					{ 12 ,  {-103.03861457 }} ,
					{ 14 ,  {-53.5585581 }} ,
					{ 15 ,  {-20.2700101 }} ,
					{ 20 ,  {-251.2683419 }} ,
					{ 21 ,  {-170.87780017 }} ,
					{ 23 ,  {44.29871811 }} ,
					{ 24 ,  {-90.08901352 }} ,
					{ 26 ,  {-223.26828856 }} ,
					{ 28 ,  {7.52864256 }} ,
					{ 29 ,  {124.78441218 }} ,
					{ 33 ,  {36.72898059 }} ,
					{ 34 ,  {116.88919618 }} ,
					{ 36 ,  {178.88197556 }} ,
					{ 37 ,  {269.77583221 }} ,
					{ 39 ,  {243.63801062 }} ,
					{ 41 ,  {393.26109279 }} ,
					{ 42 ,  {466.90072304 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_3 <= -0.02689894288778305) ? ( (scaler_output_2 <= -1.3474148511886597) ? ( (scaler_output_5 <= 0.11131975054740906) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_3 <= -0.33297400921583176) ? ( (scaler_output_8 <= -1.6699602603912354) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) : ( (scaler_output_9 <= 0.07942460477352142) ? ( 12 ) : ( (scaler_output_5 <= -0.5254598148167133) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_8 <= -0.2280818521976471) ? ( (scaler_output_2 <= 0.7118693739175797) ? ( (scaler_output_6 <= -1.8952226638793945) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= -0.12799368053674698) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_4 <= -0.3696195185184479) ? ( 26 ) : ( (scaler_output_4 <= 0.9340450465679169) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_2 <= 0.9207028448581696) ? ( (scaler_output_5 <= -0.22053303569555283) ? ( (scaler_output_11 <= 1.015782043337822) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_3 <= -0.19498779997229576) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_6 <= 0.03570308908820152) ? ( 39 ) : ( (scaler_output_2 <= 1.3521354496479034) ? ( 41 ) : ( 42 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-298.79907559 }} ,
					{ 6 ,  {-351.38429309 }} ,
					{ 7 ,  {-459.03067075 }} ,
					{ 10 ,  {-273.75709174 }} ,
					{ 11 ,  {-223.94239668 }} ,
					{ 12 ,  {-101.20974879 }} ,
					{ 16 ,  {-20.2700101 }} ,
					{ 17 ,  {-49.96946031 }} ,
					{ 19 ,  {-165.64587305 }} ,
					{ 20 ,  {-121.151916 }} ,
					{ 22 ,  {325.07388162 }} ,
					{ 24 ,  {228.58868552 }} ,
					{ 25 ,  {235.32017089 }} ,
					{ 30 ,  {-126.9715494 }} ,
					{ 31 ,  {3.77694744 }} ,
					{ 33 ,  {15.48934042 }} ,
					{ 34 ,  {136.81863919 }} ,
					{ 37 ,  {58.56592202 }} ,
					{ 38 ,  {-9.61795807 }} ,
					{ 40 ,  {220.30388791 }} ,
					{ 41 ,  {340.64918838 }} ,
					{ 45 ,  {156.85798347 }} ,
					{ 46 ,  {144.42445426 }} ,
					{ 48 ,  {8.92365624 }} ,
					{ 49 ,  {-27.42654029 }} ,
					{ 52 ,  {113.44087953 }} ,
					{ 53 ,  {290.82694559 }} ,
					{ 55 ,  {447.69098355 }} ,
					{ 56 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.6538744866847992) ? ( (scaler_output_3 <= -0.10237983166007325) ? ( (scaler_output_9 <= -0.3131030257791281) ? ( (scaler_output_2 <= -0.5081993937492371) ? ( (scaler_output_3 <= -0.33297400921583176) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_5 <= 0.5220221430063248) ? ( (scaler_output_10 <= -0.5251271277666092) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (scaler_output_4 <= 0.17947968188673258) ? ( (scaler_output_11 <= 0.10488665103912354) ? ( (scaler_output_6 <= 0.966106504201889) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_3 <= 0.08440185710787773) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_5 <= 0.22195777297019958) ? ( 22 ) : ( (scaler_output_2 <= 0.8127046674489975) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_4 <= 0.4198857247829437) ? ( (scaler_output_9 <= 0.6365488171577454) ? ( (scaler_output_11 <= 0.6820541024208069) ? ( (scaler_output_10 <= 0.005953516811132431) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_10 <= -0.2738999165594578) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_6 <= -0.8943517804145813) ? ( (scaler_output_9 <= 1.0247983932495117) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_5 <= 0.8130553960800171) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_6 <= -0.07860141586570535) ? ( (scaler_output_9 <= 0.33678474463522434) ? ( (scaler_output_8 <= 0.08243445307016373) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_10 <= -0.448453058488667) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_2 <= 1.2802700996398926) ? ( (scaler_output_3 <= -0.8302455991506577) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_8 <= -0.005341321229934692) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
