// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_freidman2.exe ml2cpp-demo_BaggingRegressor_Pipeline_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {45.71113412 }} ,
					{ 6 ,  {42.01839185 }} ,
					{ 7 ,  {17.5126316 }} ,
					{ 10 ,  {66.46875936 }} ,
					{ 11 ,  {74.13416807 }} ,
					{ 13 ,  {89.81697753 }} ,
					{ 14 ,  {81.61991679 }} ,
					{ 17 ,  {112.36813458 }} ,
					{ 18 ,  {154.50461473 }} ,
					{ 21 ,  {211.81631127 }} ,
					{ 22 ,  {168.83377965 }} ,
					{ 24 ,  {238.91298805 }} ,
					{ 25 ,  {332.71831164 }} ,
					{ 30 ,  {113.87550381 }} ,
					{ 31 ,  {203.58163186 }} ,
					{ 33 ,  {358.44239776 }} ,
					{ 34 ,  {284.76025076 }} ,
					{ 37 ,  {564.05700451 }} ,
					{ 38 ,  {501.63259526 }} ,
					{ 39 ,  {419.36346749 }} ,
					{ 43 ,  {596.98711826 }} ,
					{ 44 ,  {727.50589844 }} ,
					{ 46 ,  {816.81265916 }} ,
					{ 47 ,  {973.79225153 }} ,
					{ 50 ,  {954.01675074 }} ,
					{ 51 ,  {1072.70246576 }} ,
					{ 53 ,  {1185.2623187 }} ,
					{ 54 ,  {1365.51860512 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.37393590807914734) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( (scaler_output_3 <= -0.19290710985660553) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_5 <= -0.4966336525976658) ? ( (scaler_output_3 <= 0.17817944288253784) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.49332664906978607) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -0.6009503453969955) ? ( (scaler_output_3 <= -1.161270022392273) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_4 <= -1.0669001638889313) ? ( (scaler_output_5 <= 0.14106056094169617) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_5 <= -1.4534865021705627) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.3777616024017334) ? ( (scaler_output_4 <= 0.6049727499485016) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_5 <= -0.5978177636861801) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_5 <= 1.336892306804657) ? ( (scaler_output_5 <= 0.9135755896568298) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_2 <= -0.32780515402555466) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_4 <= -0.009075060486793518) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_3 <= 0.6520134806632996) ? ( (scaler_output_2 <= -0.21028014458715916) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {17.5126316 }} ,
					{ 6 ,  {42.01839185 }} ,
					{ 8 ,  {74.39385341 }} ,
					{ 9 ,  {38.41875351 }} ,
					{ 12 ,  {190.96784449 }} ,
					{ 13 ,  {80.65563582 }} ,
					{ 15 ,  {205.37013415 }} ,
					{ 16 ,  {338.30443687 }} ,
					{ 19 ,  {96.00340237 }} ,
					{ 21 ,  {340.89432548 }} ,
					{ 22 ,  {264.95320666 }} ,
					{ 25 ,  {522.36918386 }} ,
					{ 26 ,  {680.96114859 }} ,
					{ 28 ,  {965.60807546 }} ,
					{ 29 ,  {816.81265916 }} ,
					{ 34 ,  {156.99099243 }} ,
					{ 35 ,  {241.12137081 }} ,
					{ 36 ,  {367.2164339 }} ,
					{ 39 ,  {616.90506534 }} ,
					{ 40 ,  {569.59302371 }} ,
					{ 42 ,  {753.58663382 }} ,
					{ 43 ,  {737.40865774 }} ,
					{ 47 ,  {936.66449274 }} ,
					{ 48 ,  {859.39726521 }} ,
					{ 50 ,  {1006.94766003 }} ,
					{ 51 ,  {1066.49672809 }} ,
					{ 54 ,  {1161.77589816 }} ,
					{ 55 ,  {991.65423222 }} ,
					{ 57 ,  {1326.47274305 }} ,
					{ 58 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.4093315750360489) ? ( (scaler_output_4 <= -0.211598239839077) ? ( (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_4 <= -1.7965635061264038) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= 0.7459412887692451) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( (scaler_output_4 <= -0.7135348320007324) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= -0.992073729634285) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_3 <= -0.528001680970192) ? ( (scaler_output_3 <= -1.4632943868637085) ? ( 19 ) : ( (scaler_output_5 <= -0.5978177636861801) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_3 <= 0.9985360205173492) ? ( (scaler_output_3 <= 0.2325920555740595) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_3 <= 1.5545402765274048) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_3 <= 0.18565069139003754) ? ( (scaler_output_3 <= -0.7770032286643982) ? ( (scaler_output_3 <= -1.3856977820396423) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (scaler_output_5 <= 1.288278043270111) ? ( (scaler_output_4 <= 0.43903884291648865) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_3 <= 0.0912780585931614) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_3 <= 0.732145756483078) ? ( (scaler_output_2 <= 0.5850412361323833) ? ( (scaler_output_4 <= 0.7763578593730927) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_3 <= 0.2843315601348877) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_4 <= 0.8874532282352448) ? ( (scaler_output_2 <= -0.5506471917033195) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {51.77235515 }} ,
					{ 6 ,  {112.36813458 }} ,
					{ 7 ,  {174.68142017 }} ,
					{ 10 ,  {123.98006476 }} ,
					{ 11 ,  {96.00340237 }} ,
					{ 13 ,  {228.72512479 }} ,
					{ 14 ,  {314.07837658 }} ,
					{ 16 ,  {367.2164339 }} ,
					{ 17 ,  {557.42418185 }} ,
					{ 20 ,  {42.01839185 }} ,
					{ 22 ,  {345.51744456 }} ,
					{ 24 ,  {205.37013415 }} ,
					{ 25 ,  {251.33228306 }} ,
					{ 29 ,  {557.31885148 }} ,
					{ 30 ,  {616.90506534 }} ,
					{ 32 ,  {670.13118584 }} ,
					{ 33 ,  {757.92163781 }} ,
					{ 36 ,  {674.15222909 }} ,
					{ 37 ,  {843.78581297 }} ,
					{ 39 ,  {989.44518443 }} ,
					{ 40 ,  {1207.13937635 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.40340161323547363) ? ( (scaler_output_4 <= 1.4974570274353027) ? ( (scaler_output_4 <= -0.38785457611083984) ? ( (scaler_output_3 <= -0.6824564039707184) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_5 <= -1.0220919251441956) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -0.9536197185516357) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -1.0464974641799927) ? ( 16 ) : ( 17 ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_4 <= -1.4910808205604553) ? ( 20 ) : ( (scaler_output_3 <= 0.0843309685587883) ? ( 22 ) : ( (scaler_output_4 <= -1.1435618996620178) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_4 <= 0.6764185130596161) ? ( (scaler_output_3 <= -0.00461785972584039) ? ( 29 ) : ( 30 ) ) : ( (scaler_output_4 <= 0.8207560777664185) ? ( 32 ) : ( 33 ) ) ) : ( (scaler_output_4 <= 0.4384838044643402) ? ( (scaler_output_3 <= 0.824400007724762) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_5 <= -0.1428305320441723) ? ( 39 ) : ( 40 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {42.01839185 }} ,
					{ 5 ,  {17.5126316 }} ,
					{ 8 ,  {63.32280433 }} ,
					{ 9 ,  {77.87704243 }} ,
					{ 10 ,  {38.41875351 }} ,
					{ 14 ,  {118.56641475 }} ,
					{ 15 ,  {43.13717196 }} ,
					{ 17 ,  {337.38826236 }} ,
					{ 18 ,  {243.83107314 }} ,
					{ 19 ,  {692.1009437 }} ,
					{ 24 ,  {193.36881075 }} ,
					{ 25 ,  {112.58681243 }} ,
					{ 27 ,  {354.05537969 }} ,
					{ 28 ,  {283.4186535 }} ,
					{ 31 ,  {561.56969601 }} ,
					{ 32 ,  {762.12754055 }} ,
					{ 34 ,  {501.63259526 }} ,
					{ 35 ,  {419.36346749 }} ,
					{ 39 ,  {698.74940368 }} ,
					{ 40 ,  {780.03929167 }} ,
					{ 42 ,  {938.69371231 }} ,
					{ 43 ,  {1107.96933697 }} ,
					{ 45 ,  {1450.4501203 }} ,
					{ 47 ,  {1072.70246576 }} ,
					{ 48 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_5 <= 0.6717203818261623) ? ( (scaler_output_3 <= 0.031642138957977295) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) : ( (scaler_output_3 <= 1.1430175602436066) ? ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_5 <= 1.0228291749954224) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_2 <= -1.40203458070755) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.555534303188324) ? ( (scaler_output_5 <= -1.3502115607261658) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_2 <= 0.17494834959506989) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_2 <= -0.6109375506639481) ? ( (scaler_output_5 <= 0.9524067640304565) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_5 <= 1.336892306804657) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_output_4 <= 0.9995965659618378) ? ( (scaler_output_3 <= 0.6598700284957886) ? ( (scaler_output_4 <= 0.7722108066082001) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_5 <= -0.4050225708633661) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_2 <= -0.10805320926010609) ? ( 45 ) : ( (scaler_output_3 <= 0.6520134806632996) ? ( 47 ) : ( 48 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {51.77235515 }} ,
					{ 6 ,  {89.81697753 }} ,
					{ 8 ,  {127.86383501 }} ,
					{ 9 ,  {96.00340237 }} ,
					{ 12 ,  {163.10211368 }} ,
					{ 13 ,  {201.03073156 }} ,
					{ 14 ,  {67.61473198 }} ,
					{ 18 ,  {340.89432548 }} ,
					{ 19 ,  {367.2164339 }} ,
					{ 21 ,  {190.51646129 }} ,
					{ 22 ,  {241.12137081 }} ,
					{ 24 ,  {456.84183869 }} ,
					{ 26 ,  {565.71521017 }} ,
					{ 27 ,  {577.34865081 }} ,
					{ 31 ,  {74.13416807 }} ,
					{ 33 ,  {17.5126316 }} ,
					{ 34 ,  {42.01839185 }} ,
					{ 36 ,  {212.83015826 }} ,
					{ 38 ,  {310.5792773 }} ,
					{ 39 ,  {331.03594313 }} ,
					{ 43 ,  {651.51242251 }} ,
					{ 44 ,  {518.45049903 }} ,
					{ 46 ,  {520.61172947 }} ,
					{ 47 ,  {757.91767705 }} ,
					{ 50 ,  {956.65328034 }} ,
					{ 51 ,  {1071.15103134 }} ,
					{ 53 ,  {1322.01949723 }} ,
					{ 54 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.14456209540367126) ? ( (scaler_output_4 <= 0.40438541769981384) ? ( (scaler_output_2 <= 0.47463880479335785) ? ( (scaler_output_4 <= -0.4686051160097122) ? ( (scaler_output_3 <= -0.519632562994957) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= -0.5679637044668198) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_5 <= 1.0219813287258148) ? ( (scaler_output_2 <= 1.321591466665268) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_5 <= 0.3282408267259598) ? ( (scaler_output_2 <= 0.4241957366466522) ? ( (scaler_output_4 <= 1.0052908957004547) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= 1.14357990026474) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( 24 ) : ( (scaler_output_4 <= 0.5409430116415024) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_4 <= -0.842253178358078) ? ( (scaler_output_4 <= -1.5342329144477844) ? ( (scaler_output_5 <= -1.1036191582679749) ? ( 31 ) : ( (scaler_output_2 <= -0.6579667255282402) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_4 <= -1.1783683598041534) ? ( 36 ) : ( (scaler_output_5 <= -0.22199418395757675) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_4 <= 0.9230736196041107) ? ( (scaler_output_2 <= -0.9824927151203156) ? ( (scaler_output_5 <= 0.992718517780304) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_3 <= 0.6750522553920746) ? ( (scaler_output_2 <= -0.21028014458715916) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_5 <= 1.4191389679908752) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {42.01839185 }} ,
					{ 6 ,  {45.71113412 }} ,
					{ 8 ,  {61.96251742 }} ,
					{ 9 ,  {79.36177123 }} ,
					{ 12 ,  {93.16179043 }} ,
					{ 13 ,  {203.26795632 }} ,
					{ 15 ,  {469.13995216 }} ,
					{ 16 ,  {284.38483969 }} ,
					{ 18 ,  {692.1009437 }} ,
					{ 19 ,  {520.61172947 }} ,
					{ 24 ,  {304.56729485 }} ,
					{ 25 ,  {354.05537969 }} ,
					{ 27 ,  {189.09028656 }} ,
					{ 28 ,  {241.88267823 }} ,
					{ 31 ,  {438.10265309 }} ,
					{ 32 ,  {557.42418185 }} ,
					{ 34 ,  {575.28948403 }} ,
					{ 35 ,  {723.82305986 }} ,
					{ 39 ,  {936.6895262 }} ,
					{ 40 ,  {1161.77589816 }} ,
					{ 42 ,  {651.51242251 }} ,
					{ 43 ,  {838.10496219 }} ,
					{ 46 ,  {1006.94766003 }} ,
					{ 47 ,  {1069.59959692 }} ,
					{ 49 ,  {1314.59742087 }} ,
					{ 50 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.211598239839077) ? ( (scaler_output_3 <= 1.5343749523162842) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.4679744988679886) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= -0.21819919347763062) ? ( (scaler_output_3 <= -1.217160552740097) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_2 <= -1.4617451429367065) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_2 <= 0.09007578296586871) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_3 <= 0.18565069139003754) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_3 <= -1.5442689657211304) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_3 <= -0.4198148101568222) ? ( (scaler_output_4 <= 1.2474307417869568) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_4 <= 0.5458761304616928) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_5 <= 0.12715997360646725) ? ( (scaler_output_5 <= -0.13054856844246387) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_2 <= -1.1032290756702423) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_3 <= 0.5907565802335739) ? ( (scaler_output_3 <= 0.26137249171733856) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_5 <= 1.4191389679908752) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {38.41875351 }} ,
					{ 6 ,  {60.17684929 }} ,
					{ 7 ,  {66.75525251 }} ,
					{ 8 ,  {89.81697753 }} ,
					{ 12 ,  {116.55223879 }} ,
					{ 13 ,  {205.45742529 }} ,
					{ 15 ,  {393.2899507 }} ,
					{ 16 ,  {240.81561772 }} ,
					{ 18 ,  {577.34865081 }} ,
					{ 19 ,  {501.63259526 }} ,
					{ 24 ,  {17.5126316 }} ,
					{ 25 ,  {42.01839185 }} ,
					{ 27 ,  {226.46112957 }} ,
					{ 28 ,  {331.03594313 }} ,
					{ 31 ,  {620.66590863 }} ,
					{ 32 ,  {750.64574391 }} ,
					{ 34 ,  {878.35658108 }} ,
					{ 35 ,  {1054.16277579 }} ,
					{ 38 ,  {760.21824104 }} ,
					{ 40 ,  {1006.94766003 }} ,
					{ 41 ,  {961.04749636 }} ,
					{ 44 ,  {1450.4501203 }} ,
					{ 45 ,  {1335.37923468 }} ,
					{ 46 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.13761106133460999) ? ( (scaler_output_4 <= -1.2713754177093506) ? ( (scaler_output_3 <= -0.4679744988679886) ? ( (scaler_output_2 <= -0.5759087726473808) ? ( 4 ) : ( (scaler_output_2 <= 0.0887349471449852) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= 0.5993657037615776) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_2 <= 0.01613243669271469) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_3 <= -0.21962417662143707) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_4 <= 0.8483301401138306) ? ( (scaler_output_4 <= -0.5353570654988289) ? ( (scaler_output_4 <= -1.5172673463821411) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_4 <= -1.0080773830413818) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_2 <= -0.4876510202884674) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_4 <= 0.3140285611152649) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_output_3 <= 0.6750522553920746) ? ( (scaler_output_3 <= -0.02072339504957199) ? ( 38 ) : ( (scaler_output_5 <= -1.3404661417007446) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_2 <= -0.06669343076646328) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {38.41875351 }} ,
					{ 6 ,  {74.63348962 }} ,
					{ 8 ,  {113.77868695 }} ,
					{ 9 ,  {175.60354167 }} ,
					{ 12 ,  {174.68142017 }} ,
					{ 13 ,  {217.90641985 }} ,
					{ 15 ,  {287.26242769 }} ,
					{ 16 ,  {242.64398564 }} ,
					{ 20 ,  {129.17022248 }} ,
					{ 21 ,  {193.36881075 }} ,
					{ 23 ,  {304.56729485 }} ,
					{ 24 ,  {241.12137081 }} ,
					{ 27 ,  {456.84183869 }} ,
					{ 28 ,  {367.2164339 }} ,
					{ 30 ,  {561.56969601 }} ,
					{ 31 ,  {577.34865081 }} ,
					{ 34 ,  {42.01839185 }} ,
					{ 37 ,  {251.33228306 }} ,
					{ 38 ,  {213.62708797 }} ,
					{ 40 ,  {334.21210274 }} ,
					{ 41 ,  {310.5792773 }} ,
					{ 45 ,  {518.45049903 }} ,
					{ 46 ,  {660.57098903 }} ,
					{ 48 ,  {738.88719398 }} ,
					{ 49 ,  {948.91990878 }} ,
					{ 52 ,  {1004.93198765 }} ,
					{ 53 ,  {1186.44319482 }} ,
					{ 55 ,  {670.13118584 }} ,
					{ 56 ,  {753.58663382 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.14456209540367126) ? ( (scaler_output_4 <= 0.4340926855802536) ? ( (scaler_output_2 <= 1.0349310338497162) ? ( (scaler_output_4 <= -1.3194318413734436) ? ( (scaler_output_2 <= -1.028288573026657) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -1.217160552740097) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= -0.3880885704420507) ? ( (scaler_output_4 <= -0.9294333755970001) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_4 <= 0.07374501833692193) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_3 <= -1.555534303188324) ? ( (scaler_output_3 <= -1.6273767352104187) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_4 <= 1.2319275736808777) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_5 <= 0.5996770560741425) ? ( (scaler_output_2 <= -0.2793303430080414) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_5 <= 0.9595505595207214) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= -0.6576144993305206) ? ( (scaler_output_4 <= -1.5876256227493286) ? ( 34 ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_2 <= -0.5878596380352974) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_2 <= 0.23485881090164185) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_4 <= 0.5106023102998734) ? ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_4 <= 0.17442979663610458) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_4 <= -0.05863320827484131) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_5 <= 1.3064992427825928) ? ( (scaler_output_3 <= 0.732145756483078) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_2 <= 0.6555325984954834) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {89.81697753 }} ,
					{ 6 ,  {81.61991679 }} ,
					{ 8 ,  {63.89579064 }} ,
					{ 9 ,  {42.01839185 }} ,
					{ 12 ,  {120.92644562 }} ,
					{ 13 ,  {287.26242769 }} ,
					{ 15 ,  {381.30549229 }} ,
					{ 16 ,  {250.1805667 }} ,
					{ 18 ,  {520.61172947 }} ,
					{ 20 ,  {692.1009437 }} ,
					{ 21 ,  {816.81265916 }} ,
					{ 26 ,  {304.56729485 }} ,
					{ 27 ,  {358.44239776 }} ,
					{ 29 ,  {184.81176238 }} ,
					{ 30 ,  {192.59288742 }} ,
					{ 33 ,  {559.01434295 }} ,
					{ 34 ,  {419.36346749 }} ,
					{ 36 ,  {760.21824104 }} ,
					{ 37 ,  {753.58663382 }} ,
					{ 41 ,  {688.47647463 }} ,
					{ 42 ,  {630.47308595 }} ,
					{ 43 ,  {921.14633043 }} ,
					{ 46 ,  {961.79028492 }} ,
					{ 47 ,  {1072.70246576 }} ,
					{ 49 ,  {1299.75326814 }} ,
					{ 50 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_3 <= 1.363055408000946) ? ( (scaler_output_4 <= -1.364534080028534) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= 0.49332664906978607) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= -0.6009503453969955) ? ( (scaler_output_2 <= 1.2263926565647125) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_2 <= -1.410794973373413) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 18 ) : ( (scaler_output_4 <= -0.27108655124902725) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_2 <= 0.8704568296670914) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_3 <= -1.4832730889320374) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_2 <= 0.8334689140319824) ? ( (scaler_output_5 <= 1.4716976284980774) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_3 <= -0.06744769483339041) ? ( 36 ) : ( 37 ) ) ) ) : ( (scaler_output_4 <= 0.27479252219200134) ? ( (scaler_output_3 <= 1.0841984748840332) ? ( (scaler_output_5 <= -0.7900470495223999) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (scaler_output_2 <= 0.7793936803936958) ? ( (scaler_output_4 <= 1.5099091529846191) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_3 <= 0.8845424950122833) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {17.5126316 }} ,
					{ 6 ,  {43.86476299 }} ,
					{ 8 ,  {79.74847961 }} ,
					{ 9 ,  {89.81697753 }} ,
					{ 11 ,  {205.37013415 }} ,
					{ 13 ,  {168.83377965 }} ,
					{ 14 ,  {174.68142017 }} ,
					{ 17 ,  {43.13717196 }} ,
					{ 18 ,  {217.90641985 }} ,
					{ 21 ,  {297.00533496 }} ,
					{ 22 ,  {337.38826236 }} ,
					{ 23 ,  {520.61172947 }} ,
					{ 28 ,  {201.58303588 }} ,
					{ 29 ,  {287.26242769 }} ,
					{ 30 ,  {367.2164339 }} ,
					{ 32 ,  {557.42418185 }} ,
					{ 33 ,  {419.36346749 }} ,
					{ 36 ,  {1161.77589816 }} ,
					{ 38 ,  {660.16325903 }} ,
					{ 39 ,  {779.31742633 }} ,
					{ 42 ,  {753.58663382 }} ,
					{ 43 ,  {761.30926933 }} ,
					{ 45 ,  {1000.59881701 }} ,
					{ 46 ,  {1344.28572632 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.5280934274196625) ? ( (scaler_output_4 <= -0.9943897128105164) ? ( (scaler_output_4 <= -1.3383475542068481) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.680695652961731) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= -0.9926323592662811) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_5 <= -0.4344823658466339) ? ( 11 ) : ( (scaler_output_2 <= 1.0051675736904144) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -0.3253766456618905) ? ( (scaler_output_2 <= 0.026507914066314697) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_2 <= 0.08081049378961325) ? ( (scaler_output_3 <= 0.3388618966564536) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (scaler_output_3 <= -0.4353671967983246) ? ( (scaler_output_3 <= -0.8848086297512054) ? ( (scaler_output_4 <= 1.4993480443954468) ? ( (scaler_output_3 <= -0.9536197185516357) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (scaler_output_5 <= 1.1529531180858612) ? ( 32 ) : ( 33 ) ) ) : ( (scaler_output_4 <= 0.7578092515468597) ? ( (scaler_output_2 <= -1.098024696111679) ? ( 36 ) : ( (scaler_output_3 <= 0.824400007724762) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_3 <= 0.04545552015770227) ? ( (scaler_output_4 <= 1.0110346376895905) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_3 <= 1.1414362788200378) ? ( 45 ) : ( 46 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {112.36813458 }} ,
					{ 6 ,  {127.86383501 }} ,
					{ 8 ,  {200.83202708 }} ,
					{ 9 ,  {258.01940175 }} ,
					{ 12 ,  {43.13717196 }} ,
					{ 13 ,  {38.41875351 }} ,
					{ 14 ,  {67.61473198 }} ,
					{ 17 ,  {42.01839185 }} ,
					{ 19 ,  {238.49824146 }} ,
					{ 20 ,  {326.33449426 }} ,
					{ 23 ,  {520.61172947 }} ,
					{ 24 ,  {469.13995216 }} ,
					{ 25 ,  {630.47308595 }} ,
					{ 30 ,  {112.58681243 }} ,
					{ 31 ,  {184.81176238 }} ,
					{ 33 ,  {316.67630506 }} ,
					{ 34 ,  {241.12137081 }} ,
					{ 36 ,  {577.34865081 }} ,
					{ 37 ,  {557.42418185 }} ,
					{ 41 ,  {688.47647463 }} ,
					{ 42 ,  {972.69378773 }} ,
					{ 44 ,  {629.36786155 }} ,
					{ 45 ,  {752.35198647 }} ,
					{ 48 ,  {1344.28572632 }} ,
					{ 49 ,  {1450.4501203 }} ,
					{ 50 ,  {1161.77589816 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.15958800166845322) ? ( (scaler_output_3 <= 0.20172784477472305) ? ( (scaler_output_5 <= 1.1647228598594666) ? ( (scaler_output_3 <= -1.31559818983078) ? ( (scaler_output_4 <= -0.34222930669784546) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_5 <= 1.2807435989379883) ? ( (scaler_output_3 <= -1.2639774680137634) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_4 <= -0.8362234532833099) ? ( (scaler_output_4 <= -1.5876256227493286) ? ( 17 ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_4 <= -0.14909661933779716) ? ( (scaler_output_5 <= 0.3923652023077011) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_2 <= 0.5216177850961685) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_4 <= 1.2319275736808777) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_4 <= 1.1088310480117798) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_3 <= 1.1463133096694946) ? ( (scaler_output_5 <= 0.4018804617226124) ? ( (scaler_output_4 <= 0.22938552498817444) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_4 <= 0.5458761304616928) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_3 <= 1.4924458265304565) ? ( (scaler_output_5 <= 1.4191389679908752) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {50.41294812 }} ,
					{ 6 ,  {78.14286844 }} ,
					{ 8 ,  {123.36169582 }} ,
					{ 9 ,  {264.24740203 }} ,
					{ 12 ,  {174.68142017 }} ,
					{ 13 ,  {281.58185053 }} ,
					{ 14 ,  {707.74797907 }} ,
					{ 17 ,  {692.1009437 }} ,
					{ 18 ,  {816.81265916 }} ,
					{ 19 ,  {520.61172947 }} ,
					{ 24 ,  {190.25782018 }} ,
					{ 25 ,  {241.12137081 }} ,
					{ 26 ,  {304.56729485 }} ,
					{ 28 ,  {557.42418185 }} ,
					{ 30 ,  {438.10265309 }} ,
					{ 31 ,  {367.2164339 }} ,
					{ 35 ,  {663.56369802 }} ,
					{ 36 ,  {774.85575925 }} ,
					{ 37 ,  {954.01675074 }} ,
					{ 40 ,  {930.34229767 }} ,
					{ 41 ,  {984.88139146 }} ,
					{ 43 ,  {1299.75326814 }} ,
					{ 44 ,  {1177.43351185 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_3 <= 1.5343749523162842) ? ( (scaler_output_2 <= 0.9693888127803802) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.481613039970398) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= 1.032966285943985) ? ( (scaler_output_4 <= -1.0188437402248383) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_2 <= 0.09007578296586871) ? ( (scaler_output_3 <= 1.560240089893341) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) : ( (scaler_output_3 <= -0.4198148101568222) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_4 <= 1.14357990026474) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( (scaler_output_2 <= -1.050585299730301) ? ( 28 ) : ( (scaler_output_2 <= -0.23644034564495087) ? ( 30 ) : ( 31 ) ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 1.4276533126831055) ? ( (scaler_output_4 <= 0.7722108066082001) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) : ( (scaler_output_5 <= -0.1428305320441723) ? ( (scaler_output_4 <= 0.7521138191223145) ? ( 40 ) : ( 41 ) ) : ( (scaler_output_3 <= 0.8845424950122833) ? ( 43 ) : ( 44 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {63.89579064 }} ,
					{ 6 ,  {42.06494382 }} ,
					{ 8 ,  {83.8362363 }} ,
					{ 9 ,  {170.65519153 }} ,
					{ 12 ,  {242.64398564 }} ,
					{ 13 ,  {287.26242769 }} ,
					{ 15 ,  {192.59288742 }} ,
					{ 16 ,  {217.90641985 }} ,
					{ 20 ,  {129.17022248 }} ,
					{ 21 ,  {184.81176238 }} ,
					{ 23 ,  {320.22957961 }} ,
					{ 24 ,  {241.12137081 }} ,
					{ 26 ,  {456.84183869 }} ,
					{ 28 ,  {577.34865081 }} ,
					{ 29 ,  {557.42418185 }} ,
					{ 34 ,  {74.13416807 }} ,
					{ 35 ,  {89.81697753 }} ,
					{ 37 ,  {210.34348356 }} ,
					{ 38 ,  {222.6809715 }} ,
					{ 41 ,  {312.29995817 }} ,
					{ 42 ,  {345.51744456 }} ,
					{ 43 ,  {520.61172947 }} ,
					{ 47 ,  {537.35638349 }} ,
					{ 48 ,  {652.52872179 }} ,
					{ 50 ,  {1006.94766003 }} ,
					{ 51 ,  {761.2946477 }} ,
					{ 54 ,  {754.45680143 }} ,
					{ 55 ,  {949.578445 }} ,
					{ 57 ,  {1299.75326814 }} ,
					{ 58 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.27021659910678864) ? ( (scaler_output_4 <= 0.509816586971283) ? ( (scaler_output_2 <= 1.0349310338497162) ? ( (scaler_output_4 <= -1.3272258639335632) ? ( (scaler_output_3 <= -0.9585209786891937) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -1.247803658246994) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_2 <= 1.582097351551056) ? ( (scaler_output_3 <= -1.0520573556423187) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_3 <= -1.007630705833435) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_3 <= -1.0464974641799927) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_3 <= -1.616111397743225) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_5 <= 0.5996770560741425) ? ( 26 ) : ( (scaler_output_4 <= 1.1088310480117798) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_4 <= -1.0818235576152802) ? ( (scaler_output_2 <= -0.4061509147286415) ? ( (scaler_output_5 <= -0.5699145719408989) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_5 <= -0.5445553362369537) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_3 <= 1.1178331673145294) ? ( (scaler_output_4 <= -0.6940518021583557) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 0.5458761304616928) ? ( (scaler_output_2 <= -0.7733035981655121) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_5 <= -1.5827724933624268) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_2 <= 1.0006893277168274) ? ( (scaler_output_4 <= -0.05863320827484131) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {52.94399171 }} ,
					{ 6 ,  {112.36813458 }} ,
					{ 8 ,  {131.74760526 }} ,
					{ 9 ,  {184.87028807 }} ,
					{ 12 ,  {43.13717196 }} ,
					{ 13 ,  {38.41875351 }} ,
					{ 14 ,  {67.61473198 }} ,
					{ 18 ,  {96.00340237 }} ,
					{ 19 ,  {129.17022248 }} ,
					{ 21 ,  {192.59288742 }} ,
					{ 22 ,  {193.36881075 }} ,
					{ 25 ,  {354.05537969 }} ,
					{ 26 ,  {295.91486127 }} ,
					{ 28 ,  {456.84183869 }} ,
					{ 29 ,  {419.36346749 }} ,
					{ 34 ,  {205.37013415 }} ,
					{ 35 ,  {251.33228306 }} ,
					{ 37 ,  {310.5792773 }} ,
					{ 38 ,  {297.00533496 }} ,
					{ 40 ,  {17.5126316 }} ,
					{ 42 ,  {74.13416807 }} ,
					{ 43 ,  {81.61991679 }} ,
					{ 47 ,  {518.45049903 }} ,
					{ 48 ,  {687.54042564 }} ,
					{ 50 ,  {754.45680143 }} ,
					{ 51 ,  {962.42687886 }} ,
					{ 54 ,  {762.12754055 }} ,
					{ 55 ,  {1066.49672809 }} ,
					{ 57 ,  {1450.4501203 }} ,
					{ 58 ,  {1294.66806153 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.40340161323547363) ? ( (scaler_output_4 <= -0.05246769404038787) ? ( (scaler_output_5 <= 1.1647228598594666) ? ( (scaler_output_5 <= 0.24834014847874641) ? ( (scaler_output_5 <= -0.27376995608210564) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= -1.505901575088501) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_2 <= -0.16629564762115479) ? ( (scaler_output_5 <= 1.236446499824524) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= 0.8071091920137405) ? ( (scaler_output_3 <= -1.7070884108543396) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= 0.49538497254252434) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_3 <= -0.8575227856636047) ? ( (scaler_output_5 <= -0.5978177636861801) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_3 <= -0.6868596374988556) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_4 <= -0.5718052089214325) ? ( (scaler_output_3 <= 0.8669869601726532) ? ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_5 <= -0.10130536556243896) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_4 <= -0.854500025510788) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_4 <= -1.7431707978248596) ? ( 40 ) : ( (scaler_output_4 <= -1.660830020904541) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 0.1700807735323906) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_4 <= -0.05863320827484131) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_3 <= 0.5907565802335739) ? ( (scaler_output_3 <= 0.0573192834854126) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {74.13416807 }} ,
					{ 6 ,  {64.89578184 }} ,
					{ 8 ,  {67.61473198 }} ,
					{ 9 ,  {40.83402973 }} ,
					{ 12 ,  {251.33228306 }} ,
					{ 13 ,  {222.6809715 }} ,
					{ 14 ,  {154.50461473 }} ,
					{ 18 ,  {43.13717196 }} ,
					{ 19 ,  {122.69860153 }} ,
					{ 21 ,  {224.57749034 }} ,
					{ 22 ,  {287.26242769 }} ,
					{ 25 ,  {331.03594313 }} ,
					{ 26 ,  {310.5792773 }} ,
					{ 28 ,  {500.02301855 }} ,
					{ 29 ,  {707.74797907 }} ,
					{ 34 ,  {96.00340237 }} ,
					{ 35 ,  {206.1753402 }} ,
					{ 37 ,  {242.64398564 }} ,
					{ 38 ,  {349.66836162 }} ,
					{ 40 ,  {456.84183869 }} ,
					{ 42 ,  {501.63259526 }} ,
					{ 43 ,  {571.53193049 }} ,
					{ 47 ,  {681.5488841 }} ,
					{ 48 ,  {834.46192968 }} ,
					{ 50 ,  {936.55892494 }} ,
					{ 51 ,  {1107.96933697 }} ,
					{ 54 ,  {1185.2623187 }} ,
					{ 55 ,  {1031.07198153 }} ,
					{ 57 ,  {1450.4501203 }} ,
					{ 58 ,  {1344.28572632 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_5 <= -0.7836979031562805) ? ( (scaler_output_2 <= -0.6544749066233635) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.9585209786891937) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= -1.0456076264381409) ? ( (scaler_output_3 <= 0.6047268509864807) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_3 <= -0.04657936096191406) ? ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= -0.1809410764835775) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_4 <= -0.842253178358078) ? ( (scaler_output_2 <= 0.23485881090164185) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_2 <= 0.5946461856365204) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_5 <= 0.3709569722414017) ? ( (scaler_output_3 <= -1.3247019052505493) ? ( (scaler_output_5 <= -1.0470906794071198) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_4 <= 0.2717645689845085) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( 40 ) : ( (scaler_output_4 <= 0.2939539775252342) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_4 <= 0.911697268486023) ? ( (scaler_output_3 <= 0.6598700284957886) ? ( (scaler_output_4 <= 0.7460125982761383) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_5 <= -0.4050225708633661) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_5 <= 1.1606311798095703) ? ( (scaler_output_4 <= 1.266200840473175) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_3 <= 1.3170108795166016) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {66.46875936 }} ,
					{ 5 ,  {74.13416807 }} ,
					{ 7 ,  {17.5126316 }} ,
					{ 9 ,  {38.41875351 }} ,
					{ 10 ,  {45.71113412 }} ,
					{ 14 ,  {154.50461473 }} ,
					{ 15 ,  {43.13717196 }} ,
					{ 17 ,  {196.23604553 }} ,
					{ 18 ,  {285.3015378 }} ,
					{ 19 ,  {520.61172947 }} ,
					{ 24 ,  {129.17022248 }} ,
					{ 25 ,  {131.74760526 }} ,
					{ 27 ,  {188.89630573 }} ,
					{ 28 ,  {241.12137081 }} ,
					{ 31 ,  {354.05537969 }} ,
					{ 32 ,  {273.60564025 }} ,
					{ 34 ,  {557.42418185 }} ,
					{ 35 ,  {456.84183869 }} ,
					{ 39 ,  {596.64298616 }} ,
					{ 40 ,  {754.19732207 }} ,
					{ 42 ,  {971.66038717 }} ,
					{ 43 ,  {1068.56530731 }} ,
					{ 46 ,  {913.1344715 }} ,
					{ 47 ,  {762.28031912 }} ,
					{ 49 ,  {945.96395155 }} ,
					{ 50 ,  {1224.20802669 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.49651999771595) ? ( (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_5 <= -0.9561173319816589) ? ( (scaler_output_3 <= 0.17817944288253784) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_5 <= -0.680695652961731) ? ( 7 ) : ( (scaler_output_2 <= -0.5978109687566757) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_3 <= 1.060194581747055) ? ( (scaler_output_3 <= -0.7117037177085876) ? ( (scaler_output_4 <= -0.8298941850662231) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_4 <= -1.128638505935669) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= -0.0549909770488739) ? ( (scaler_output_3 <= -1.5675306916236877) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_4 <= 1.14357990026474) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_2 <= 0.17494834959506989) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_3 <= -0.8186395168304443) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 1.3999922275543213) ? ( (scaler_output_4 <= 0.6216000318527222) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_3 <= 0.26137249171733856) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_4 <= 0.4384838044643402) ? ( (scaler_output_5 <= -0.1797034740447998) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_5 <= -0.13054856844246387) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
