// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor_Pipeline
// Dataset : diabetes

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_Pipeline_diabetes.exe ml2cpp-demo_BaggingRegressor_Pipeline_diabetes.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.0002686932066652995 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.0007239580580639441 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.0007280719825586765 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.001013565221084393 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.0009763580732882109 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.0017643808242337245 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.0016512815450565026 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.0013905501983388136 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.0012726482548090939 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.001034425005681627 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.0002686932066652995 ) / 0.04724209583653783 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.0007239580580639441 ) / 0.047605576685038974 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.0007280719825586765 ) / 0.04693591143936869 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.001013565221084393 ) / 0.0483352719489719 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.0009763580732882109 ) / 0.048050762009702486 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.0017643808242337245 ) / 0.04806080873154401 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.0016512815450565026 ) / 0.04620240378043046 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.0013905501983388136 ) / 0.047363093040531656 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.0012726482548090939 ) / 0.04589286131364784 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.001034425005681627 ) / 0.04776158519570627 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {183.33333333 }} ,
					{ 6 ,  {103. }} ,
					{ 8 ,  {72.65217391 }} ,
					{ 9 ,  {100.57894737 }} ,
					{ 12 ,  {193. }} ,
					{ 13 ,  {133. }} ,
					{ 15 ,  {99. }} ,
					{ 16 ,  {138.75 }} ,
					{ 20 ,  {117.74074074 }} ,
					{ 21 ,  {206. }} ,
					{ 23 ,  {170. }} ,
					{ 24 ,  {101.57142857 }} ,
					{ 26 ,  {317. }} ,
					{ 27 ,  {306. }} ,
					{ 32 ,  {252. }} ,
					{ 33 ,  {149.66666667 }} ,
					{ 35 ,  {51.5 }} ,
					{ 36 ,  {116.75 }} ,
					{ 39 ,  {80. }} ,
					{ 40 ,  {67. }} ,
					{ 42 ,  {167.36363636 }} ,
					{ 43 ,  {220. }} ,
					{ 47 ,  {170. }} ,
					{ 48 ,  {175. }} ,
					{ 49 ,  {202. }} ,
					{ 52 ,  {241.91428571 }} ,
					{ 53 ,  {131. }} ,
					{ 55 ,  {289.46153846 }} ,
					{ 56 ,  {241. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.3484434187412262) ? ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_4 <= 0.15079138055443764) ? ( (scaler_output_2 <= -1.890932857990265) ? ( (scaler_output_5 <= -0.9574206471443176) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= 0.7937689423561096) ? ( (scaler_output_2 <= -0.4684312008321285) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_2 <= -0.5453231632709503) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_9 <= 2.486976146697998) ? ( (scaler_output_5 <= -0.814962774515152) ? ( (scaler_output_11 <= 0.8230243027210236) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_6 <= 1.8656004667282104) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_8 <= -1.5012605786323547) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_output_4 <= 0.2656088024377823) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_2 <= -0.46843118965625763) ? ( (scaler_output_4 <= -0.549594908952713) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_7 <= 0.09232688322663307) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_10 <= -0.6866148114204407) ? ( (scaler_output_11 <= -0.17430918477475643) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_9 <= -0.5788267105817795) ? ( (scaler_output_2 <= -0.19930924847722054) ? ( (scaler_output_8 <= 0.21196657419204712) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) : ( (scaler_output_4 <= 1.5515639185905457) ? ( (scaler_output_4 <= 1.5171186923980713) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_7 <= 0.4474309980869293) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {55. }} ,
					{ 6 ,  {138.20833333 }} ,
					{ 8 ,  {81.98 }} ,
					{ 9 ,  {230. }} ,
					{ 12 ,  {186.3 }} ,
					{ 13 ,  {121. }} ,
					{ 15 ,  {128.9375 }} ,
					{ 16 ,  {70. }} ,
					{ 20 ,  {182.75 }} ,
					{ 21 ,  {104.84615385 }} ,
					{ 22 ,  {253. }} ,
					{ 24 ,  {288. }} ,
					{ 26 ,  {263. }} ,
					{ 27 ,  {237. }} ,
					{ 32 ,  {134.72727273 }} ,
					{ 33 ,  {188.85714286 }} ,
					{ 35 ,  {82.4 }} ,
					{ 36 ,  {120. }} ,
					{ 39 ,  {158.7 }} ,
					{ 40 ,  {262. }} ,
					{ 42 ,  {48. }} ,
					{ 43 ,  {225.1 }} ,
					{ 47 ,  {164.5 }} ,
					{ 48 ,  {121. }} ,
					{ 50 ,  {308. }} ,
					{ 51 ,  {224.6 }} ,
					{ 54 ,  {192. }} ,
					{ 55 ,  {164. }} ,
					{ 57 ,  {301.27272727 }} ,
					{ 58 ,  {263. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.006606053444556892) ? ( (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_2 <= -1.544918954372406) ? ( (scaler_output_5 <= -1.990240454673767) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_7 <= 2.0144500732421875) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= 0.7593237161636353) ? ( (scaler_output_10 <= -0.39942847192287445) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= 0.21785700623877347) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= 1.103775978088379) ? ( (scaler_output_7 <= 1.9101994037628174) ? ( (scaler_output_2 <= -0.2762012258172035) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (scaler_output_7 <= -0.17481566220521927) ? ( 24 ) : ( (scaler_output_6 <= 0.004299357533454895) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_4 <= -0.46922270953655243) ? ( (scaler_output_6 <= 0.5626896768808365) ? ( (scaler_output_11 <= 0.5194880366325378) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_5 <= 0.7876886129379272) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_5 <= 0.3247004300355911) ? ( (scaler_output_11 <= 1.863720178604126) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_2 <= -0.2762012295424938) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_11 <= 0.25931409001350403) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( (scaler_output_4 <= 1.3678560256958008) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_8 <= -0.38567081093788147) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_5 <= -1.0642640888690948) ? ( (scaler_output_8 <= -0.5450407862663269) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_5 <= -0.4588180258870125) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {91.75423729 }} ,
					{ 6 ,  {230. }} ,
					{ 7 ,  {216. }} ,
					{ 10 ,  {114. }} ,
					{ 11 ,  {173.33333333 }} ,
					{ 13 ,  {171.8 }} ,
					{ 14 ,  {263. }} ,
					{ 18 ,  {148.88461538 }} ,
					{ 19 ,  {196.125 }} ,
					{ 21 ,  {105.47058824 }} ,
					{ 22 ,  {207.5 }} ,
					{ 25 ,  {114.8 }} ,
					{ 26 ,  {177.42857143 }} ,
					{ 28 ,  {251.83333333 }} ,
					{ 29 ,  {204.35714286 }} ,
					{ 32 ,  {131. }} ,
					{ 33 ,  {140. }} ,
					{ 37 ,  {294.33333333 }} ,
					{ 38 ,  {334. }} ,
					{ 40 ,  {269.92307692 }} ,
					{ 41 ,  {308.28571429 }} ,
					{ 43 ,  {180. }} ,
					{ 45 ,  {255.875 }} ,
					{ 46 ,  {227.5 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 1.4482282400131226) ? ( (scaler_output_10 <= -0.2121104747056961) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_5 <= 2.4259544610977173) ? ( (scaler_output_7 <= 2.0144500732421875) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_7 <= -0.02169737219810486) ? ( (scaler_output_5 <= 1.3100342750549316) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_11 <= 0.6062126755714417) ? ( (scaler_output_7 <= 1.00126314163208) ? ( (scaler_output_10 <= 0.7317838072776794) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_6 <= 2.524214744567871) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_4 <= -0.18217914551496506) ? ( (scaler_output_10 <= 0.27863484621047974) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_8 <= -0.4255133122205734) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_10 <= -0.49448759853839874) ? ( (scaler_output_9 <= 0.1652245596051216) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_7 <= 0.4474309980869293) ? ( (scaler_output_10 <= 0.6651052534580231) ? ( (scaler_output_10 <= 0.5247355550527573) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_7 <= 0.12164740636944771) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( 43 ) : ( (scaler_output_8 <= -0.18645834736526012) ? ( 45 ) : ( 46 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {109.60416667 }} ,
					{ 6 ,  {78.34210526 }} ,
					{ 8 ,  {50.8 }} ,
					{ 9 ,  {95. }} ,
					{ 12 ,  {204. }} ,
					{ 13 ,  {182. }} ,
					{ 15 ,  {134.72727273 }} ,
					{ 16 ,  {90. }} ,
					{ 20 ,  {128.15384615 }} ,
					{ 21 ,  {157.93877551 }} ,
					{ 23 ,  {161. }} ,
					{ 24 ,  {230.33333333 }} ,
					{ 27 ,  {346. }} ,
					{ 28 ,  {277. }} ,
					{ 30 ,  {231.4 }} ,
					{ 31 ,  {180. }} ,
					{ 36 ,  {219. }} ,
					{ 37 ,  {89.06666667 }} ,
					{ 39 ,  {244. }} ,
					{ 40 ,  {166.66666667 }} ,
					{ 43 ,  {248.66666667 }} ,
					{ 44 ,  {181.66666667 }} ,
					{ 46 ,  {269.45454545 }} ,
					{ 47 ,  {120. }} ,
					{ 51 ,  {282.4 }} ,
					{ 52 ,  {244.9 }} ,
					{ 53 ,  {310. }} ,
					{ 56 ,  {231.5 }} ,
					{ 57 ,  {252. }} ,
					{ 59 ,  {186. }} ,
					{ 60 ,  {217. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_4 <= -0.26255134493112564) ? ( (scaler_output_8 <= 0.6502339839935303) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= -0.17430917732417583) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_6 <= -1.0122573673725128) ? ( (scaler_output_2 <= -0.2762012481689453) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_2 <= 0.8002865314483643) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= 1.4711917042732239) ? ( (scaler_output_10 <= 1.4572433829307556) ? ( (scaler_output_9 <= 0.632691353559494) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_4 <= -0.1477339155972004) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= 0.5194880440831184) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_2 <= 0.41582661122083664) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= 1.0004402995109558) ? ( (scaler_output_10 <= -0.02190703817177564) ? ( (scaler_output_4 <= 0.48376190662384033) ? ( (scaler_output_7 <= -0.686295922845602) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_8 <= -1.2622056007385254) ? ( 39 ) : ( 40 ) ) ) : ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_6 <= -0.38227854669094086) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_6 <= 1.0494914948940277) ? ( 46 ) : ( 47 ) ) ) ) : ( (scaler_output_7 <= 0.5679709315299988) ? ( (scaler_output_6 <= 0.605642780661583) ? ( (scaler_output_11 <= 1.0398359596729279) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (scaler_output_7 <= 1.6463146209716797) ? ( (scaler_output_7 <= 1.4182661175727844) ? ( 56 ) : ( 57 ) ) : ( (scaler_output_4 <= 1.3104473948478699) ? ( 59 ) : ( 60 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {132. }} ,
					{ 6 ,  {71.93103448 }} ,
					{ 8 ,  {147.625 }} ,
					{ 9 ,  {102.5 }} ,
					{ 12 ,  {88.5 }} ,
					{ 13 ,  {103. }} ,
					{ 15 ,  {209.9 }} ,
					{ 16 ,  {128.28571429 }} ,
					{ 19 ,  {252. }} ,
					{ 20 ,  {283. }} ,
					{ 23 ,  {153. }} ,
					{ 24 ,  {198.47826087 }} ,
					{ 26 ,  {194. }} ,
					{ 27 ,  {111.85714286 }} ,
					{ 32 ,  {276. }} ,
					{ 33 ,  {169. }} ,
					{ 35 ,  {64.66666667 }} ,
					{ 36 ,  {135.30434783 }} ,
					{ 39 ,  {159.85714286 }} ,
					{ 40 ,  {213.75757576 }} ,
					{ 42 ,  {251.5 }} ,
					{ 43 ,  {306. }} ,
					{ 46 ,  {68. }} ,
					{ 47 ,  {137. }} ,
					{ 50 ,  {255.02857143 }} ,
					{ 51 ,  {214.93333333 }} ,
					{ 53 ,  {310. }} ,
					{ 54 ,  {317. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.2082000896334648) ? ( (scaler_output_10 <= 0.5037015527486801) ? ( (scaler_output_9 <= 0.632691353559494) ? ( (scaler_output_4 <= -1.2155359387397766) ? ( (scaler_output_2 <= -2.0062708258628845) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= -1.0835670828819275) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_5 <= -0.8743202388286591) ? ( (scaler_output_10 <= -0.6296394318342209) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= -0.10267326608300209) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_7 <= -1.354152262210846) ? ( (scaler_output_5 <= 0.39592936635017395) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_8 <= 0.7299189567565918) ? ( (scaler_output_6 <= 0.13315867260098457) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_6 <= 0.2477002739906311) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_10 <= 0.9246074855327606) ? ( (scaler_output_5 <= 0.07539910380728543) ? ( (scaler_output_5 <= -1.1236215829849243) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_7 <= -0.5494668036699295) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_4 <= 1.7582352757453918) ? ( (scaler_output_10 <= -0.6844651401042938) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_5 <= 1.3575202226638794) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_2 <= -1.4295809864997864) ? ( (scaler_output_5 <= -0.6368903964757919) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_11 <= 2.6876044273376465) ? ( (scaler_output_8 <= -0.38567081093788147) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_7 <= 0.7829881012439728) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {58.66666667 }} ,
					{ 6 ,  {113.92592593 }} ,
					{ 8 ,  {67.85714286 }} ,
					{ 9 ,  {94.26086957 }} ,
					{ 12 ,  {147.52 }} ,
					{ 13 ,  {214. }} ,
					{ 15 ,  {140. }} ,
					{ 16 ,  {86.36363636 }} ,
					{ 20 ,  {172. }} ,
					{ 21 ,  {250.5 }} ,
					{ 23 ,  {70.66666667 }} ,
					{ 24 ,  {136.85714286 }} ,
					{ 27 ,  {184.16666667 }} ,
					{ 28 ,  {97.25 }} ,
					{ 30 ,  {164.5 }} ,
					{ 31 ,  {258.30769231 }} ,
					{ 36 ,  {187.58823529 }} ,
					{ 37 ,  {122.18181818 }} ,
					{ 39 ,  {291.4 }} ,
					{ 40 ,  {210.02777778 }} ,
					{ 43 ,  {160.8 }} ,
					{ 44 ,  {96.45454545 }} ,
					{ 46 ,  {266. }} ,
					{ 47 ,  {199. }} ,
					{ 51 ,  {151. }} ,
					{ 52 ,  {233.66666667 }} ,
					{ 54 ,  {273.84615385 }} ,
					{ 55 ,  {316.83333333 }} ,
					{ 58 ,  {313.33333333 }} ,
					{ 59 ,  {257.2 }} ,
					{ 61 ,  {168.5 }} ,
					{ 62 ,  {230. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.28708024322986603) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_5 <= -1.9190115332603455) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= 0.16023416072130203) ? ( (scaler_output_10 <= 0.09841897338628769) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_8 <= -0.7044107615947723) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_10 <= -0.4821503311395645) ? ( (scaler_output_2 <= 0.26204264909029007) ? ( (scaler_output_9 <= -0.021762147545814514) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_7 <= -0.3116447776556015) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_5 <= -0.6012759208679199) ? ( (scaler_output_4 <= 1.0234037935733795) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_6 <= -0.7831741571426392) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_6 <= 1.1497154235839844) ? ( (scaler_output_7 <= 0.023912331089377403) ? ( (scaler_output_7 <= -0.3996063470840454) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_10 <= 0.30336154997348785) ? ( 39 ) : ( 40 ) ) ) : ( (scaler_output_10 <= 1.1957367658615112) ? ( (scaler_output_6 <= 1.4647048115730286) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_10 <= 1.612431526184082) ? ( 46 ) : ( 47 ) ) ) ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_10 <= 0.5425282865762711) ? ( 51 ) : ( 52 ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( 54 ) : ( 55 ) ) ) : ( (scaler_output_8 <= -0.9833081960678101) ? ( (scaler_output_5 <= 0.3247004449367523) ? ( 58 ) : ( 59 ) ) : ( (scaler_output_5 <= 1.0369899272918701) ? ( 61 ) : ( 62 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {110.19354839 }} ,
					{ 6 ,  {84.91578947 }} ,
					{ 7 ,  {216. }} ,
					{ 8 ,  {253. }} ,
					{ 12 ,  {230.6 }} ,
					{ 13 ,  {145.25 }} ,
					{ 15 ,  {130.40425532 }} ,
					{ 16 ,  {230. }} ,
					{ 19 ,  {185. }} ,
					{ 20 ,  {171. }} ,
					{ 22 ,  {283. }} ,
					{ 23 ,  {281. }} ,
					{ 28 ,  {51. }} ,
					{ 29 ,  {63.5 }} ,
					{ 31 ,  {161.27272727 }} ,
					{ 32 ,  {121.36363636 }} ,
					{ 35 ,  {244.5 }} ,
					{ 36 ,  {268.33333333 }} ,
					{ 38 ,  {207.24324324 }} ,
					{ 39 ,  {164.14705882 }} ,
					{ 43 ,  {256.84615385 }} ,
					{ 44 ,  {336. }} ,
					{ 46 ,  {309.875 }} ,
					{ 47 ,  {271.83333333 }} ,
					{ 50 ,  {113. }} ,
					{ 51 ,  {186.33333333 }} ,
					{ 53 ,  {231. }} ,
					{ 54 ,  {306. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.021434754598885775) ? ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_5 <= 2.0698097348213196) ? ( (scaler_output_2 <= -1.2757970094680786) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_5 <= 1.2506767511367798) ? ( (scaler_output_8 <= -0.8637807071208954) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= 1.9395198822021484) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_2 <= 1.1078544557094574) ? ( (scaler_output_6 <= 0.8633614219725132) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_5 <= 1.5355925559997559) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_10 <= -0.5805794894695282) ? ( (scaler_output_4 <= 0.19671834632754326) ? ( (scaler_output_5 <= -0.9930351600050926) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_2 <= 0.26204264909029007) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( (scaler_output_10 <= 0.5728554576635361) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_6 <= 0.77745521068573) ? ( (scaler_output_7 <= 0.2747657001018524) ? ( (scaler_output_4 <= 2.2863954305648804) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_4 <= 1.6548996567726135) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_10 <= 1.275049865245819) ? ( (scaler_output_4 <= 0.9430315792560577) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_9 <= 2.9933985471725464) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {79.92647059 }} ,
					{ 6 ,  {158. }} ,
					{ 8 ,  {161.16666667 }} ,
					{ 9 ,  {102.86666667 }} ,
					{ 12 ,  {168. }} ,
					{ 13 ,  {60. }} ,
					{ 15 ,  {25. }} ,
					{ 16 ,  {55.375 }} ,
					{ 20 ,  {189.88888889 }} ,
					{ 21 ,  {260.4 }} ,
					{ 23 ,  {145. }} ,
					{ 24 ,  {127. }} ,
					{ 26 ,  {187. }} ,
					{ 28 ,  {144.5 }} ,
					{ 29 ,  {105. }} ,
					{ 34 ,  {135.5 }} ,
					{ 35 ,  {197.16666667 }} ,
					{ 37 ,  {139.875 }} ,
					{ 38 ,  {84.14285714 }} ,
					{ 41 ,  {144. }} ,
					{ 42 ,  {99.75 }} ,
					{ 44 ,  {231.58333333 }} ,
					{ 45 ,  {182.34375 }} ,
					{ 49 ,  {176.97826087 }} ,
					{ 50 ,  {228.91666667 }} ,
					{ 52 ,  {155. }} ,
					{ 53 ,  {236.76923077 }} ,
					{ 56 ,  {128. }} ,
					{ 57 ,  {241.2 }} ,
					{ 59 ,  {266.53333333 }} ,
					{ 60 ,  {308. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_4 <= -0.2740330770611763) ? ( (scaler_output_4 <= -0.6644123196601868) ? ( (scaler_output_6 <= 1.006538450717926) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_7 <= -0.539693295955658) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_2 <= -1.544918954372406) ? ( (scaler_output_4 <= -0.22810611873865128) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_4 <= -0.22810611873865128) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_5 <= -0.24513116478919983) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_10 <= -0.8730798214673996) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_6 <= -0.8977157771587372) ? ( 26 ) : ( (scaler_output_8 <= 0.4111790359020233) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= 0.4516777843236923) ? ( (scaler_output_11 <= 0.17258942872285843) ? ( (scaler_output_4 <= -0.43477748334407806) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_8 <= -0.3458283096551895) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_5 <= -0.9218061864376068) ? ( (scaler_output_6 <= -0.7402210831642151) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_8 <= -0.70441073179245) ? ( 44 ) : ( 45 ) ) ) ) : ( (scaler_output_4 <= 1.3908195495605469) ? ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_8 <= 0.09243909455835819) ? ( 49 ) : ( 50 ) ) : ( (scaler_output_10 <= 0.11743468791246414) ? ( 52 ) : ( 53 ) ) ) : ( (scaler_output_2 <= -0.8913370668888092) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 56 ) : ( 57 ) ) : ( (scaler_output_6 <= 0.662913590669632) ? ( 59 ) : ( 60 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {139.72 }} ,
					{ 6 ,  {94.1627907 }} ,
					{ 8 ,  {62.26315789 }} ,
					{ 9 ,  {87.14285714 }} ,
					{ 10 ,  {253. }} ,
					{ 14 ,  {94. }} ,
					{ 15 ,  {216.5 }} ,
					{ 17 ,  {84.85714286 }} ,
					{ 18 ,  {132.5 }} ,
					{ 21 ,  {283. }} ,
					{ 22 ,  {155.33333333 }} ,
					{ 24 ,  {156. }} ,
					{ 25 ,  {253.28571429 }} ,
					{ 30 ,  {145. }} ,
					{ 31 ,  {189.42857143 }} ,
					{ 33 ,  {87.85714286 }} ,
					{ 34 ,  {133.375 }} ,
					{ 37 ,  {136.92857143 }} ,
					{ 38 ,  {211.32 }} ,
					{ 40 ,  {287.4 }} ,
					{ 41 ,  {231. }} ,
					{ 45 ,  {82.5 }} ,
					{ 46 ,  {198.09090909 }} ,
					{ 48 ,  {155. }} ,
					{ 49 ,  {267. }} ,
					{ 52 ,  {283.33333333 }} ,
					{ 53 ,  {321.5 }} ,
					{ 55 ,  {219. }} ,
					{ 56 ,  {272. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= -0.6725048720836639) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (scaler_output_4 <= -0.5036679357290268) ? ( (scaler_output_4 <= -0.9973828196525574) ? ( (scaler_output_2 <= -1.429580956697464) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_5 <= 0.11101358011364937) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_9 <= 0.9248580634593964) ? ( (scaler_output_9 <= -1.252757966518402) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_2 <= -0.8528911173343658) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_10 <= -0.21344593167304993) ? ( (scaler_output_6 <= -0.5970440804958344) ? ( (scaler_output_8 <= -0.8239382207393646) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_7 <= -0.3279339522123337) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_10 <= 0.6095067858695984) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_6 <= 0.7917729318141937) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_4 <= 0.9774768352508545) ? ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_10 <= -0.9227692186832428) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_10 <= -0.022182566113770008) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_6 <= 0.3765595853328705) ? ( (scaler_output_4 <= 2.1026875376701355) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_5 <= 1.143833339214325) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {73.33333333 }} ,
					{ 6 ,  {102.75 }} ,
					{ 8 ,  {123.83333333 }} ,
					{ 9 ,  {52.5 }} ,
					{ 12 ,  {49.92307692 }} ,
					{ 13 ,  {84.89230769 }} ,
					{ 15 ,  {157. }} ,
					{ 16 ,  {99. }} ,
					{ 20 ,  {158.07142857 }} ,
					{ 21 ,  {94.59090909 }} ,
					{ 23 ,  {106. }} ,
					{ 24 ,  {196.27777778 }} ,
					{ 27 ,  {283. }} ,
					{ 28 ,  {255.33333333 }} ,
					{ 30 ,  {171.27272727 }} ,
					{ 31 ,  {254.33333333 }} ,
					{ 36 ,  {99.5 }} ,
					{ 37 ,  {160.80769231 }} ,
					{ 39 ,  {317. }} ,
					{ 40 ,  {268. }} ,
					{ 43 ,  {244.53333333 }} ,
					{ 44 ,  {194.52941176 }} ,
					{ 46 ,  {161. }} ,
					{ 47 ,  {283. }} ,
					{ 49 ,  {346. }} ,
					{ 52 ,  {273.21428571 }} ,
					{ 53 ,  {308.66666667 }} ,
					{ 55 ,  {128. }} ,
					{ 56 ,  {240.09090909 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_6 <= -0.8118095695972443) ? ( (scaler_output_10 <= -1.6862652897834778) ? ( (scaler_output_11 <= -1.301729679107666) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_4 <= -0.1706974022090435) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_11 <= 0.8663866519927979) ? ( (scaler_output_7 <= -0.6243970394134521) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_9 <= -0.14252439886331558) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_5 <= 0.7876885831356049) ? ( (scaler_output_9 <= 0.632691353559494) ? ( (scaler_output_11 <= -0.9981933832168579) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_8 <= -1.2223631143569946) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_6 <= -0.5827263593673706) ? ( (scaler_output_7 <= -1.5300754308700562) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_2 <= 1.1463004350662231) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= 1.5400822162628174) ? ( (scaler_output_5 <= 0.07539910380728543) ? ( (scaler_output_11 <= 2.4274303913116455) ? ( (scaler_output_2 <= -0.5453231632709503) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 39 ) : ( 40 ) ) ) : ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_7 <= 0.8970123827457428) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_6 <= 2.023095190525055) ? ( 46 ) : ( 47 ) ) ) ) : ( (scaler_output_5 <= -0.9336776733398438) ? ( 49 ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_6 <= 0.11884097754955292) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_7 <= 0.5386504232883453) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {93.86363636 }} ,
					{ 6 ,  {64.73684211 }} ,
					{ 7 ,  {216. }} ,
					{ 8 ,  {253. }} ,
					{ 12 ,  {202.5 }} ,
					{ 13 ,  {167.4 }} ,
					{ 15 ,  {288. }} ,
					{ 16 ,  {250.5 }} ,
					{ 19 ,  {183.4 }} ,
					{ 20 ,  {125.7 }} ,
					{ 22 ,  {59.66666667 }} ,
					{ 23 ,  {110.14285714 }} ,
					{ 28 ,  {148.06382979 }} ,
					{ 29 ,  {183.78431373 }} ,
					{ 31 ,  {89.71428571 }} ,
					{ 32 ,  {142. }} ,
					{ 35 ,  {184.14814815 }} ,
					{ 36 ,  {255.66666667 }} ,
					{ 38 ,  {233.33333333 }} ,
					{ 39 ,  {283. }} ,
					{ 42 ,  {121. }} ,
					{ 43 ,  {151. }} ,
					{ 46 ,  {333.16666667 }} ,
					{ 47 ,  {278. }} ,
					{ 49 ,  {223.125 }} ,
					{ 50 ,  {269.58333333 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= 0.013010472059249878) ? ( (scaler_output_7 <= 2.154537081718445) ? ( (scaler_output_5 <= 2.0341952443122864) ? ( (scaler_output_4 <= -0.22810611873865128) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_6 <= -0.7688564658164978) ? ( (scaler_output_2 <= -0.7375531494617462) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= 0.68084517121315) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_6 <= -0.06728913635015488) ? ( (scaler_output_2 <= -0.8528911173343658) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_4 <= 0.24264531955122948) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_4 <= 1.1726664304733276) ? ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_6 <= 1.5219756364822388) ? ( (scaler_output_2 <= 0.14670467749238014) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_11 <= 1.6035462021827698) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_10 <= 1.1691094636917114) ? ( (scaler_output_5 <= 1.85612291097641) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_8 <= 0.8494464755058289) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_5 <= 0.14662805944681168) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_6 <= 0.11884097452275455) ? ( (scaler_output_10 <= 0.8516778647899628) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_5 <= 1.143833339214325) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {93.37 }} ,
					{ 6 ,  {52.17391304 }} ,
					{ 8 ,  {203.33333333 }} ,
					{ 9 ,  {121.4 }} ,
					{ 10 ,  {253. }} ,
					{ 14 ,  {210. }} ,
					{ 15 ,  {201. }} ,
					{ 17 ,  {132.5 }} ,
					{ 18 ,  {93.25 }} ,
					{ 21 ,  {189.85714286 }} ,
					{ 22 ,  {120.25 }} ,
					{ 24 ,  {252.8 }} ,
					{ 25 ,  {173. }} ,
					{ 30 ,  {93.66666667 }} ,
					{ 31 ,  {78. }} ,
					{ 33 ,  {169.33333333 }} ,
					{ 34 ,  {144. }} ,
					{ 37 ,  {200.46666667 }} ,
					{ 38 ,  {153.17073171 }} ,
					{ 40 ,  {183.71428571 }} ,
					{ 41 ,  {249.8 }} ,
					{ 45 ,  {166.71428571 }} ,
					{ 46 ,  {220.2 }} ,
					{ 48 ,  {237.58333333 }} ,
					{ 49 ,  {261.55555556 }} ,
					{ 52 ,  {328.5 }} ,
					{ 53 ,  {303. }} ,
					{ 55 ,  {272.88888889 }} ,
					{ 56 ,  {238.83333333 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.03458361607044935) ? ( (scaler_output_4 <= 0.0704191830009222) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= -0.2740330770611763) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_10 <= -0.17072374373674393) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (scaler_output_5 <= -0.38758908212184906) ? ( (scaler_output_6 <= -1.0122573673725128) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_8 <= 0.2119665713980794) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_7 <= 0.40833696722984314) ? ( (scaler_output_7 <= -0.4028641879558563) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_7 <= 0.7406362295150757) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_5 <= -1.016778141260147) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_10 <= 0.9365731477737427) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_9 <= 1.1040537059307098) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_11 <= 0.6062126755714417) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_4 <= 0.9545133709907532) ? ( (scaler_output_10 <= 0.9304323792457581) ? ( (scaler_output_4 <= 0.4378349483013153) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_7 <= 0.5028142184019089) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_6 <= -0.2820546478033066) ? ( (scaler_output_10 <= 1.1026638448238373) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_6 <= 0.8490436971187592) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {152.54545455 }} ,
					{ 6 ,  {200. }} ,
					{ 8 ,  {105.28571429 }} ,
					{ 9 ,  {185. }} ,
					{ 12 ,  {52.91666667 }} ,
					{ 13 ,  {80.77142857 }} ,
					{ 15 ,  {102.58441558 }} ,
					{ 16 ,  {188.57142857 }} ,
					{ 20 ,  {170.875 }} ,
					{ 21 ,  {107.375 }} ,
					{ 23 ,  {58. }} ,
					{ 24 ,  {71.5 }} ,
					{ 27 ,  {126. }} ,
					{ 28 ,  {233.53333333 }} ,
					{ 30 ,  {112.57142857 }} ,
					{ 31 ,  {169.41025641 }} ,
					{ 34 ,  {95. }} ,
					{ 37 ,  {144. }} ,
					{ 38 ,  {140.8 }} ,
					{ 40 ,  {170.5 }} ,
					{ 41 ,  {175. }} ,
					{ 44 ,  {302. }} ,
					{ 46 ,  {99.8 }} ,
					{ 47 ,  {198.72727273 }} ,
					{ 50 ,  {192.33333333 }} ,
					{ 51 ,  {277.61363636 }} ,
					{ 53 ,  {203.875 }} ,
					{ 54 ,  {238.66666667 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.5526523590087891) ? ( (scaler_output_10 <= 0.09841897338628769) ? ( (scaler_output_2 <= -1.4680269360542297) ? ( (scaler_output_5 <= -1.277950942516327) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_10 <= -0.37751282670069486) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= -0.9101118743419647) ? ( (scaler_output_4 <= -1.1810907125473022) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_4 <= 0.0704191830009222) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= -0.49218620359897614) ? ( (scaler_output_4 <= -0.6644123196601868) ? ( (scaler_output_6 <= 0.5626896768808365) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_8 <= -0.5848832428455353) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_11 <= -0.3043961673974991) ? ( (scaler_output_5 <= -0.9218061864376068) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_10 <= 0.2541116774082184) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_10 <= -0.6583284437656403) ? ( (scaler_output_10 <= -1.2712291479110718) ? ( 34 ) : ( (scaler_output_10 <= -0.8525225520133972) ? ( (scaler_output_4 <= 1.2760021090507507) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_2 <= -0.5837691724300385) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_4 <= 0.9774768352508545) ? ( (scaler_output_2 <= -1.8524868488311768) ? ( 44 ) : ( (scaler_output_2 <= -0.3530932143330574) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_6 <= 0.77745521068573) ? ( (scaler_output_2 <= -0.6222151517868042) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_10 <= 1.275049865245819) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {96.1 }} ,
					{ 6 ,  {167.76190476 }} ,
					{ 8 ,  {95.80851064 }} ,
					{ 9 ,  {230. }} ,
					{ 12 ,  {85. }} ,
					{ 13 ,  {49.14285714 }} ,
					{ 15 ,  {99.4137931 }} ,
					{ 16 ,  {77.26666667 }} ,
					{ 18 ,  {302. }} ,
					{ 21 ,  {210. }} ,
					{ 22 ,  {129.0625 }} ,
					{ 24 ,  {149.75 }} ,
					{ 25 ,  {275.25 }} ,
					{ 30 ,  {194.51724138 }} ,
					{ 31 ,  {110.5 }} ,
					{ 33 ,  {171.58333333 }} ,
					{ 34 ,  {100.53333333 }} ,
					{ 37 ,  {93.8 }} ,
					{ 38 ,  {206.57142857 }} ,
					{ 40 ,  {89. }} ,
					{ 41 ,  {234.46153846 }} ,
					{ 45 ,  {151. }} ,
					{ 46 ,  {233.66666667 }} ,
					{ 48 ,  {266.71428571 }} ,
					{ 49 ,  {297.27272727 }} ,
					{ 52 ,  {233. }} ,
					{ 53 ,  {108. }} ,
					{ 55 ,  {216.29411765 }} ,
					{ 56 ,  {270.71428571 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.05069565773010254) ? ( (scaler_output_4 <= 0.15079138055443764) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_7 <= -0.5787873268127441) ? ( (scaler_output_7 <= -1.3280895948410034) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_7 <= 1.8580739498138428) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= -1.4910977482795715) ? ( (scaler_output_5 <= -1.1354930400848389) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_7 <= -0.22042536735534668) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_2 <= -1.7755948901176453) ? ( 18 ) : ( (scaler_output_5 <= 0.2178570032119751) ? ( (scaler_output_7 <= -0.99253249168396) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_5 <= 0.5027728229761124) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.5296888798475266) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_8 <= -0.5450407862663269) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_4 <= -0.4807044416666031) ? ( (scaler_output_5 <= 0.7876885831356049) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_2 <= -0.2762012295424938) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_10 <= 0.5425282865762711) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_7 <= -0.49082574248313904) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_2 <= -1.0835670232772827) ? ( (scaler_output_2 <= -1.6218109726905823) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_9 <= 1.871478259563446) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {126.9 }} ,
					{ 6 ,  {210. }} ,
					{ 8 ,  {94.3255814 }} ,
					{ 9 ,  {129.21428571 }} ,
					{ 12 ,  {39.25 }} ,
					{ 13 ,  {81.29090909 }} ,
					{ 15 ,  {142. }} ,
					{ 16 ,  {85.4 }} ,
					{ 20 ,  {148. }} ,
					{ 21 ,  {206. }} ,
					{ 23 ,  {131. }} ,
					{ 24 ,  {258.22222222 }} ,
					{ 27 ,  {108. }} ,
					{ 28 ,  {69. }} ,
					{ 30 ,  {196.25 }} ,
					{ 31 ,  {147.36363636 }} ,
					{ 36 ,  {174.2 }} ,
					{ 37 ,  {256.22222222 }} ,
					{ 39 ,  {114.38461538 }} ,
					{ 40 ,  {170.375 }} ,
					{ 43 ,  {265.4 }} ,
					{ 44 ,  {215.71428571 }} ,
					{ 45 ,  {84. }} ,
					{ 48 ,  {220. }} ,
					{ 49 ,  {140. }} ,
					{ 52 ,  {288. }} ,
					{ 53 ,  {332.25 }} ,
					{ 55 ,  {319. }} ,
					{ 56 ,  {266.35 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= 0.4516777843236923) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= -0.15921565890312195) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= 0.30267641693353653) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_7 <= -2.1230015754699707) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_11 <= 0.17258942872285843) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_8 <= -0.70441073179245) ? ( (scaler_output_2 <= -0.007079288363456726) ? ( (scaler_output_7 <= 0.010880976915359497) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= -0.6012759208679199) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_10 <= 0.5037015527486801) ? ( (scaler_output_7 <= 1.695182204246521) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_7 <= -0.3996063470840454) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= 1.4597100019454956) ? ( (scaler_output_11 <= 0.5194880366325378) ? ( (scaler_output_4 <= 0.7019150257110596) ? ( (scaler_output_10 <= 0.9063842594623566) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_11 <= -0.434483140707016) ? ( 39 ) : ( 40 ) ) ) : ( (scaler_output_9 <= 3.5660452842712402) ? ( (scaler_output_8 <= -0.9434657096862793) ? ( 43 ) : ( 44 ) ) : ( 45 ) ) ) : ( (scaler_output_5 <= -0.9930351674556732) ? ( (scaler_output_2 <= -0.12241727113723755) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_6 <= -0.4538670480251312) ? ( (scaler_output_4 <= 1.8500892519950867) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {80.4 }} ,
					{ 6 ,  {124.94736842 }} ,
					{ 8 ,  {71.82352941 }} ,
					{ 9 ,  {94.53846154 }} ,
					{ 10 ,  {253. }} ,
					{ 14 ,  {210. }} ,
					{ 15 ,  {175.66666667 }} ,
					{ 17 ,  {52. }} ,
					{ 18 ,  {130.11764706 }} ,
					{ 21 ,  {113. }} ,
					{ 22 ,  {144. }} ,
					{ 24 ,  {154.66666667 }} ,
					{ 25 ,  {251.33333333 }} ,
					{ 30 ,  {210.64285714 }} ,
					{ 31 ,  {163. }} ,
					{ 33 ,  {119.04347826 }} ,
					{ 34 ,  {204.75 }} ,
					{ 37 ,  {167.75 }} ,
					{ 38 ,  {195. }} ,
					{ 40 ,  {178.66666667 }} ,
					{ 41 ,  {244.52631579 }} ,
					{ 45 ,  {178. }} ,
					{ 46 ,  {151. }} ,
					{ 48 ,  {286.8 }} ,
					{ 49 ,  {224.5625 }} ,
					{ 52 ,  {267.16666667 }} ,
					{ 53 ,  {306. }} ,
					{ 55 ,  {328.85714286 }} ,
					{ 56 ,  {270. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.012311428901739419) ? ( (scaler_output_4 <= 0.1852366104722023) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_4 <= -1.2155359387397766) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_10 <= -0.7661082744598389) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (scaler_output_7 <= -0.02169737219810486) ? ( (scaler_output_7 <= -1.0055637955665588) ? ( (scaler_output_5 <= -0.708119347691536) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_6 <= -1.169752061367035) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_10 <= -1.0533716082572937) ? ( (scaler_output_9 <= 0.1106867790222168) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_5 <= 0.43154387176036835) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_output_4 <= 1.195629894733429) ? ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_6 <= 2.023095190525055) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_2 <= 0.14670467749238014) ? ( (scaler_output_4 <= 0.8971046209335327) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_6 <= 0.004299364984035492) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_4 <= 1.7582352757453918) ? ( (scaler_output_10 <= 0.4289030283689499) ? ( (scaler_output_10 <= 0.3506627678871155) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_6 <= 0.39087727665901184) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_4 <= 2.13713276386261) ? ( (scaler_output_10 <= 1.5262555480003357) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_10 <= 0.8996540606021881) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable;
	
			std::any  lEstimator = lAggregatedTable["Estimator"][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/diabetes.csv");
	return 0;
}
