// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingRegressor_Pipeline
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingRegressor_Pipeline_freidman3.exe ml2cpp-demo_GradientBoostingRegressor_Pipeline_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.75121736 }} ,
					{ 4 ,  {-0.04397826 }} ,
					{ 6 ,  {-0.9467478 }} ,
					{ 7 ,  {-0.60474301 }} ,
					{ 10 ,  {-0.04512172 }} ,
					{ 11 ,  {0.14262056 }} ,
					{ 13 ,  {-0.19694189 }} ,
					{ 14 ,  {0.06444005 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_4 <= -1.7431707978248596) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 0.6816338896751404) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -0.20375587046146393) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_0
		
	
		namespace SubModel_1_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.67609563 }} ,
					{ 4 ,  {-0.03958043 }} ,
					{ 6 ,  {-0.54426871 }} ,
					{ 7 ,  {-0.85207302 }} ,
					{ 10 ,  {0.04472921 }} ,
					{ 11 ,  {0.15500737 }} ,
					{ 13 ,  {-0.16907932 }} ,
					{ 14 ,  {0.05696399 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_4 <= -1.7431707978248596) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_5 <= -0.7836979031562805) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 0.11850831285119057) ? ( (scaler_output_5 <= -1.286155104637146) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -0.4549274295568466) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_0
		
	
		namespace SubModel_2_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.03562239 }} ,
					{ 4 ,  {-0.60848607 }} ,
					{ 6 ,  {-0.76686572 }} ,
					{ 7 ,  {-0.48984184 }} ,
					{ 10 ,  {-0.01084404 }} ,
					{ 11 ,  {0.1163042 }} ,
					{ 13 ,  {-0.248085 }} ,
					{ 14 ,  {-0.29431517 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= 1.603305459022522) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 1.7969666719436646) ? ( (scaler_output_3 <= -0.27021659910678864) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 1.9248971939086914) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_0
		
	
		namespace SubModel_3_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.58371804 }} ,
					{ 4 ,  {-0.72124082 }} ,
					{ 6 ,  {-0.5370711 }} ,
					{ 7 ,  {-0.08369919 }} ,
					{ 10 ,  {0.12099107 }} ,
					{ 11 ,  {-0.12422849 }} ,
					{ 13 ,  {0.05630855 }} ,
					{ 14 ,  {0.12293342 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9068629145622253) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_0
		
	
		namespace SubModel_4_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.52534624 }} ,
					{ 4 ,  {-0.64911674 }} ,
					{ 6 ,  {-0.48336399 }} ,
					{ 7 ,  {-0.07532927 }} ,
					{ 10 ,  {-0.04400489 }} ,
					{ 11 ,  {0.10632735 }} ,
					{ 13 ,  {-0.14466173 }} ,
					{ 14 ,  {0.06134524 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9068629145622253) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 0.84055495262146) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -0.32138849794864655) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4_0
		
	
		namespace SubModel_5_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.47281162 }} ,
					{ 4 ,  {-0.58420506 }} ,
					{ 6 ,  {-0.43502759 }} ,
					{ 7 ,  {-0.07302121 }} ,
					{ 10 ,  {0.099079 }} ,
					{ 11 ,  {-0.16602827 }} ,
					{ 13 ,  {0.00277429 }} ,
					{ 14 ,  {0.09368453 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9312378764152527) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5_0
		
	
		namespace SubModel_6_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.38944987 }} ,
					{ 4 ,  {-0.4936978 }} ,
					{ 6 ,  {-0.39152483 }} ,
					{ 7 ,  {-0.06571909 }} ,
					{ 10 ,  {0.0891711 }} ,
					{ 11 ,  {-0.14942544 }} ,
					{ 13 ,  {0.10306012 }} ,
					{ 14 ,  {0.04202352 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9312378764152527) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.03369589429348707) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6_0
		
	
		namespace SubModel_7_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.38137307 }} ,
					{ 4 ,  {-0.47641478 }} ,
					{ 6 ,  {-0.26444579 }} ,
					{ 7 ,  {-0.01513266 }} ,
					{ 10 ,  {0.09260739 }} ,
					{ 11 ,  {0.02609225 }} ,
					{ 13 ,  {-0.1648421 }} ,
					{ 14 ,  {-0.20928182 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.3915177583694458) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 1.7969666719436646) ? ( (scaler_output_2 <= -0.2713426500558853) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 1.9923570156097412) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7_0
		
	
		namespace SubModel_8_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.22971432 }} ,
					{ 4 ,  {-0.4462293 }} ,
					{ 6 ,  {-0.37057044 }} ,
					{ 7 ,  {-0.04929263 }} ,
					{ 10 ,  {0.07304228 }} ,
					{ 11 ,  {-0.08902125 }} ,
					{ 13 ,  {0.10782022 }} ,
					{ 14 ,  {0.06193836 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_5 <= -0.7836979031562805) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.7298851609230042) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.8880466222763062) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8_0
		
	
		namespace SubModel_9_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.2476556 }} ,
					{ 4 ,  {-0.47373172 }} ,
					{ 6 ,  {-0.33351339 }} ,
					{ 7 ,  {-0.04436337 }} ,
					{ 10 ,  {0.06573805 }} ,
					{ 11 ,  {-0.08011912 }} ,
					{ 13 ,  {0.08211232 }} ,
					{ 14 ,  {0.04746813 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_2 <= 0.49834807217121124) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.7298851609230042) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.03369589429348707) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9_0
		
	
		namespace SubModel_10_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.36314631 }} ,
					{ 4 ,  {-0.1301241 }} ,
					{ 6 ,  {0.02319668 }} ,
					{ 7 ,  {-0.24195919 }} ,
					{ 10 ,  {-0.10161059 }} ,
					{ 11 ,  {0.08709911 }} ,
					{ 13 ,  {-0.00498891 }} ,
					{ 14 ,  {0.06040245 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9463390409946442) ? ( (scaler_output_3 <= 0.47466079890727997) ? ( (scaler_output_4 <= -1.6357912421226501) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.603305459022522) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_5 <= 0.5181461721658707) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10_0
		
	
		namespace SubModel_11_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.32683168 }} ,
					{ 4 ,  {-0.11711169 }} ,
					{ 6 ,  {-0.21776327 }} ,
					{ 7 ,  {0.02087701 }} ,
					{ 10 ,  {-0.13360468 }} ,
					{ 11 ,  {0.06440334 }} ,
					{ 13 ,  {0.05056613 }} ,
					{ 14 ,  {-0.05348418 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9463390409946442) ? ( (scaler_output_3 <= 0.47466079890727997) ? ( (scaler_output_4 <= -1.6357912421226501) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.7431707978248596) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_5 <= 0.6579617410898209) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 1.4215551018714905) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11_0
		
	
		namespace SubModel_12_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0419506 }} ,
					{ 4 ,  {-0.19598695 }} ,
					{ 6 ,  {-0.29414851 }} ,
					{ 7 ,  {-0.10446904 }} ,
					{ 10 ,  {-0.03347556 }} ,
					{ 11 ,  {0.04958623 }} ,
					{ 13 ,  {-0.08524648 }} ,
					{ 14 ,  {0.05224392 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9463390409946442) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= 1.603305459022522) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( (scaler_output_3 <= -1.5181928873062134) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9935460090637207) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12_0
		
	
		namespace SubModel_13_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.26473366 }} ,
					{ 4 ,  {-0.09861411 }} ,
					{ 6 ,  {0.02191523 }} ,
					{ 7 ,  {-0.17638825 }} ,
					{ 10 ,  {0.08103314 }} ,
					{ 11 ,  {0.02128965 }} ,
					{ 13 ,  {-0.13939343 }} ,
					{ 14 ,  {-0.10740973 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9463390409946442) ? ( (scaler_output_3 <= 0.47466079890727997) ? ( (scaler_output_4 <= -1.6357912421226501) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.603305459022522) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 1.7969666719436646) ? ( (scaler_output_2 <= -1.1985815167427063) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_5 <= -1.1084599196910858) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13_0
		
	
		namespace SubModel_14_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.08984554 }} ,
					{ 4 ,  {0.10342032 }} ,
					{ 6 ,  {-0.09046686 }} ,
					{ 7 ,  {-0.30147254 }} ,
					{ 10 ,  {-0.11241999 }} ,
					{ 11 ,  {0.05619442 }} ,
					{ 13 ,  {0.04135462 }} ,
					{ 14 ,  {-0.01568513 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.9463390409946442) ? ( (scaler_output_2 <= -1.177388846874237) ? ( (scaler_output_5 <= 0.036147356033325195) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_5 <= 1.2807435989379883) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_5 <= 0.6579617410898209) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14_0
		
	
		namespace SubModel_15_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.14970274 }} ,
					{ 4 ,  {0.02916529 }} ,
					{ 6 ,  {-0.22218009 }} ,
					{ 7 ,  {-0.08343015 }} ,
					{ 10 ,  {0.03630788 }} ,
					{ 11 ,  {-0.05308837 }} ,
					{ 13 ,  {0.06783364 }} ,
					{ 14 ,  {0.03171649 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_4 <= -1.7431707978248596) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -1.1883381009101868) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15_0
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_1_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_2_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_3_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_4_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_5_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_6_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_7_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_8_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_9_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_10_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_11_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_12_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_13_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_14_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_15_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, { "Estimator" });
	
	
			tTable lTable;
	
			std::any  lEstimator = 1.3612342030259192 + 0.1 * lAggregatedTable[ "Estimator" ][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
