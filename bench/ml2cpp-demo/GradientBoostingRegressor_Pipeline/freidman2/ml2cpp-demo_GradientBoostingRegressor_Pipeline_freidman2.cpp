// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingRegressor_Pipeline
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingRegressor_Pipeline_freidman2.exe ml2cpp-demo_GradientBoostingRegressor_Pipeline_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-440.74365306 }} ,
					{ 4 ,  {-300.48811853 }} ,
					{ 6 ,  {-252.21981166 }} ,
					{ 7 ,  {185.22544339 }} ,
					{ 10 ,  {-269.85383486 }} ,
					{ 11 ,  {99.60714748 }} ,
					{ 13 ,  {361.14063777 }} ,
					{ 14 ,  {673.39649529 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.1041902601718903) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_0
		
	
		namespace SubModel_1_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-396.66928775 }} ,
					{ 4 ,  {-270.43930668 }} ,
					{ 6 ,  {-226.9978305 }} ,
					{ 7 ,  {166.70289905 }} ,
					{ 10 ,  {-242.86845137 }} ,
					{ 11 ,  {39.5826129 }} ,
					{ 13 ,  {245.43746079 }} ,
					{ 14 ,  {549.62774214 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.1041902601718903) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.13761106133460999) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_0
		
	
		namespace SubModel_2_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-357.00235897 }} ,
					{ 4 ,  {-243.39537601 }} ,
					{ 6 ,  {-204.29804745 }} ,
					{ 7 ,  {150.03260914 }} ,
					{ 10 ,  {-218.58160623 }} ,
					{ 11 ,  {77.11088611 }} ,
					{ 13 ,  {284.25934624 }} ,
					{ 14 ,  {566.30358562 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.1041902601718903) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_0
		
	
		namespace SubModel_3_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-321.30212308 }} ,
					{ 4 ,  {-219.05583841 }} ,
					{ 6 ,  {-246.01218887 }} ,
					{ 7 ,  {20.0079661 }} ,
					{ 10 ,  {-253.11775252 }} ,
					{ 11 ,  {-65.05519983 }} ,
					{ 13 ,  {175.66039549 }} ,
					{ 14 ,  {456.83755866 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 0.0221049627289176) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_0
		
	
		namespace SubModel_4_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-312.44042299 }} ,
					{ 4 ,  {-279.19969125 }} ,
					{ 6 ,  {-243.06870271 }} ,
					{ 7 ,  {-123.70668646 }} ,
					{ 10 ,  {-240.42354835 }} ,
					{ 11 ,  {-94.03382593 }} ,
					{ 13 ,  {162.00429204 }} ,
					{ 14 ,  {413.62294641 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.4353671967983246) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9230736196041107) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4_0
		
	
		namespace SubModel_5_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-268.73887689 }} ,
					{ 4 ,  {-200.06732695 }} ,
					{ 6 ,  {-154.98797255 }} ,
					{ 7 ,  {133.59709412 }} ,
					{ 10 ,  {-160.74740653 }} ,
					{ 11 ,  {45.86449063 }} ,
					{ 13 ,  {205.3933698 }} ,
					{ 14 ,  {436.68603471 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_3 <= -0.10602238867431879) ? ( (scaler_output_3 <= -1.0177715122699738) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5_0
		
	
		namespace SubModel_6_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-264.19493829 }} ,
					{ 4 ,  {-229.61790456 }} ,
					{ 6 ,  {-250.45005786 }} ,
					{ 7 ,  {-113.18381573 }} ,
					{ 10 ,  {-161.87059329 }} ,
					{ 11 ,  {2.72171223 }} ,
					{ 13 ,  {121.7425807 }} ,
					{ 14 ,  {316.58359224 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.7117037177085876) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.13761106133460999) ? ( (scaler_output_3 <= -0.9236918985843658) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6_0
		
	
		namespace SubModel_7_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-215.99191321 }} ,
					{ 4 ,  {-123.6665432 }} ,
					{ 6 ,  {-75.82618946 }} ,
					{ 7 ,  {179.56232974 }} ,
					{ 10 ,  {-157.22852354 }} ,
					{ 11 ,  {-9.3613995 }} ,
					{ 13 ,  {187.66729178 }} ,
					{ 14 ,  {434.37196121 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.5367825776338577) ? ( (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 0.824400007724762) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_3 <= -1.3971152901649475) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.732145756483078) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7_0
		
	
		namespace SubModel_8_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-221.69268305 }} ,
					{ 4 ,  {-155.58455447 }} ,
					{ 6 ,  {-151.61264173 }} ,
					{ 7 ,  {22.08065705 }} ,
					{ 10 ,  {-95.66530714 }} ,
					{ 11 ,  {66.78513067 }} ,
					{ 13 ,  {149.7610315 }} ,
					{ 14 ,  {331.230072 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.12366905808448792) ? ( (scaler_output_3 <= -0.16254910826683044) ? ( (scaler_output_3 <= -1.4265539050102234) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -0.9463390409946442) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.4353671967983246) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.732145756483078) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8_0
		
	
		namespace SubModel_9_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-146.06482323 }} ,
					{ 4 ,  {-50.35904258 }} ,
					{ 6 ,  {142.21340014 }} ,
					{ 7 ,  {-220.08572171 }} ,
					{ 10 ,  {-118.09567781 }} ,
					{ 11 ,  {13.0457848 }} ,
					{ 13 ,  {179.23266525 }} ,
					{ 14 ,  {437.78541217 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.5367825776338577) ? ( (scaler_output_3 <= 1.516704261302948) ? ( (scaler_output_3 <= -0.24217423051595688) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.6743407249450684) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9_0
		
	
		namespace SubModel_10_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-157.52225851 }} ,
					{ 4 ,  {-84.54335335 }} ,
					{ 6 ,  {-95.5149735 }} ,
					{ 7 ,  {85.20791039 }} ,
					{ 10 ,  {-39.47192314 }} ,
					{ 11 ,  {109.88126504 }} ,
					{ 13 ,  {245.72061799 }} ,
					{ 14 ,  {436.6304988 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.8996041715145111) ? ( (scaler_output_3 <= -0.16254910826683044) ? ( (scaler_output_3 <= -1.0177715122699738) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.1398281529545784) ? ( (scaler_output_3 <= -1.0464974641799927) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10_0
		
	
		namespace SubModel_11_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-184.75910601 }} ,
					{ 4 ,  {-149.30036796 }} ,
					{ 6 ,  {-125.71879086 }} ,
					{ 7 ,  {-32.71609333 }} ,
					{ 10 ,  {-125.08317359 }} ,
					{ 11 ,  {-1.06269919 }} ,
					{ 13 ,  {105.60536491 }} ,
					{ 14 ,  {263.91570266 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.211598239839077) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.739952802658081) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.006271638791076839) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11_0
		
	
		namespace SubModel_12_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-119.24599847 }} ,
					{ 4 ,  {-47.64308226 }} ,
					{ 6 ,  {-170.04974158 }} ,
					{ 7 ,  {116.53349594 }} ,
					{ 10 ,  {-85.22798972 }} ,
					{ 11 ,  {59.05555046 }} ,
					{ 13 ,  {181.88467815 }} ,
					{ 14 ,  {340.94334835 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.5367825776338577) ? ( (scaler_output_3 <= 1.516704261302948) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.2832203805446625) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.2745868116617203) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12_0
		
	
		namespace SubModel_13_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-114.04565336 }} ,
					{ 4 ,  {-58.53586775 }} ,
					{ 6 ,  {80.76617959 }} ,
					{ 7 ,  {-153.04476743 }} ,
					{ 10 ,  {-56.78529898 }} ,
					{ 11 ,  {73.89684204 }} ,
					{ 13 ,  {115.64814437 }} ,
					{ 14 ,  {270.49068469 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.1700807735323906) ? ( (scaler_output_3 <= 1.516704261302948) ? ( (scaler_output_3 <= -0.6873287558555603) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= 1.6743407249450684) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.732145756483078) ? ( (scaler_output_3 <= -0.4353671967983246) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_5 <= -0.6559995897114277) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13_0
		
	
		namespace SubModel_14_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-168.88048222 }} ,
					{ 4 ,  {-80.76014408 }} ,
					{ 6 ,  {-67.33392127 }} ,
					{ 7 ,  {54.71004779 }} ,
					{ 10 ,  {-21.89256757 }} ,
					{ 11 ,  {80.88488271 }} ,
					{ 13 ,  {164.59141831 }} ,
					{ 14 ,  {313.59231116 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.8996041715145111) ? ( (scaler_output_3 <= -0.4549274295568466) ? ( (scaler_output_3 <= -1.6273767352104187) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.1398281529545784) ? ( (scaler_output_3 <= -1.0464974641799927) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 1.5360115766525269) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14_0
		
	
		namespace SubModel_15_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-116.95071765 }} ,
					{ 4 ,  {-57.03180257 }} ,
					{ 6 ,  {-93.55265275 }} ,
					{ 7 ,  {41.61344291 }} ,
					{ 10 ,  {-19.70331081 }} ,
					{ 11 ,  {79.36128098 }} ,
					{ 13 ,  {155.32158904 }} ,
					{ 14 ,  {282.23308004 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.8996041715145111) ? ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_3 <= -1.4265539050102234) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.26137249171733856) ? ( (scaler_output_3 <= -1.0464974641799927) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 1.5360115766525269) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15_0
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_1_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_2_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_3_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_4_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_5_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_6_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_7_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_8_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_9_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_10_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_11_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_12_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_13_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_14_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				SubModel_15_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, { "Estimator" });
	
	
			tTable lTable;
	
			std::any  lEstimator = 499.09288446517394 + 0.1 * lAggregatedTable[ "Estimator" ][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
