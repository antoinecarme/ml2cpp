// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingRegressor_Pipeline
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingRegressor_Pipeline_RandomReg_10.exe ml2cpp-demo_GradientBoostingRegressor_Pipeline_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.16680947298137394 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( -0.16351271994443456 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.19149292241003152 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.058384844753055345 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.09933205162122274 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.21293121660488037 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.047865568690029614 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.05078698959084227 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -0.1913199225908187 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.19940405677473352 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.16680947298137394 ) / 1.0289835997047314 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - -0.16351271994443456 ) / 0.9915812535046814 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.19149292241003152 ) / 0.9321147629147756 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.058384844753055345 ) / 1.0855729329506805 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.09933205162122274 ) / 1.0743904412882828 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.21293121660488037 ) / 0.9358074381886248 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.047865568690029614 ) / 1.1363574090613386 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.05078698959084227 ) / 0.9725457460098452 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -0.1913199225908187 ) / 1.1415974677936562 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.19940405677473352 ) / 0.882245682091319 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace SubModel_0_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-208.77804517 }} ,
					{ 4 ,  {-437.34093868 }} ,
					{ 6 ,  {-113.60421645 }} ,
					{ 7 ,  {122.45884789 }} ,
					{ 10 ,  {-309.90060672 }} ,
					{ 11 ,  {-32.15578898 }} ,
					{ 13 ,  {61.43992483 }} ,
					{ 14 ,  {231.09071529 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_10 <= 0.0714151170104742) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= -1.0221788585186005) ? ( (scaler_output_7 <= -0.11237061023712158) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.463795930147171) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_0
		
	
		namespace SubModel_1_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-326.50910641 }} ,
					{ 4 ,  {-98.85523416 }} ,
					{ 6 ,  {-87.4471466 }} ,
					{ 7 ,  {173.77311 }} ,
					{ 10 ,  {-278.91054605 }} ,
					{ 11 ,  {-28.94021008 }} ,
					{ 13 ,  {55.29593235 }} ,
					{ 14 ,  {207.98164376 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_9 <= 0.444615438580513) ? ( (scaler_output_3 <= -0.9983952641487122) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_10 <= 0.04722323454916477) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= -1.0221788585186005) ? ( (scaler_output_7 <= -0.11237061023712158) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= -0.463795930147171) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_0
		
	
		namespace SubModel_2_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-176.11170265 }} ,
					{ 4 ,  {-368.54439658 }} ,
					{ 6 ,  {-96.03900139 }} ,
					{ 7 ,  {99.38716021 }} ,
					{ 10 ,  {-251.01949144 }} ,
					{ 11 ,  {-26.04618907 }} ,
					{ 13 ,  {75.12779906 }} ,
					{ 14 ,  {204.70712522 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_10 <= 0.0062407031655311584) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= -1.0221788585186005) ? ( (scaler_output_7 <= -0.11237061023712158) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= -0.03176193236140534) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_0
		
	
		namespace SubModel_3_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-219.68151786 }} ,
					{ 4 ,  {1.53788453 }} ,
					{ 6 ,  {-63.12781904 }} ,
					{ 7 ,  {105.11332453 }} ,
					{ 9 ,  {50.92143164 }} ,
					{ 11 ,  {228.02920134 }} ,
					{ 12 ,  {332.25653745 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_7 <= -0.9428369104862213) ? ( (scaler_output_3 <= 0.08440185710787773) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= -1.689899742603302) ? ( 9 ) : ( (scaler_output_10 <= 1.8215601444244385) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_0
		
	
		namespace SubModel_4_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-252.20320059 }} ,
					{ 4 ,  {-121.33851569 }} ,
					{ 6 ,  {-48.95960236 }} ,
					{ 7 ,  {137.19688391 }} ,
					{ 10 ,  {-37.60655466 }} ,
					{ 11 ,  {125.61672399 }} ,
					{ 13 ,  {137.24703325 }} ,
					{ 14 ,  {245.25440849 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.6720361113548279) ? ( (scaler_output_7 <= -0.7831640839576721) ? ( (scaler_output_3 <= -0.7743398547172546) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= 0.6365488171577454) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_3 <= 0.08869194984436035) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_6 <= 0.38173192739486694) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4_0
		
	
		namespace SubModel_5_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-185.91889384 }} ,
					{ 4 ,  {-36.72374794 }} ,
					{ 6 ,  {-15.39934961 }} ,
					{ 7 ,  {144.62910189 }} ,
					{ 10 ,  {141.14763755 }} ,
					{ 11 ,  {50.72524871 }} ,
					{ 13 ,  {212.2184176 }} ,
					{ 14 ,  {312.11402041 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_3 <= -0.13297277688980103) ? ( (scaler_output_7 <= -0.7928295135498047) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_4 <= 0.31049855053424835) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_4 <= -0.6283682193607092) ? ( (scaler_output_4 <= -1.5198870301246643) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= 1.4639790058135986) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5_0
		
	
		namespace SubModel_6_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-137.20816742 }} ,
					{ 4 ,  {-231.34282554 }} ,
					{ 6 ,  {-119.32161195 }} ,
					{ 7 ,  {-15.75975266 }} ,
					{ 10 ,  {-119.82952352 }} ,
					{ 11 ,  {63.48532014 }} ,
					{ 13 ,  {-16.82848268 }} ,
					{ 14 ,  {145.22505636 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.17482367157936096) ? ( (scaler_output_5 <= -1.0149085223674774) ? ( (scaler_output_2 <= -0.9631921947002411) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= -0.24797631055116653) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.41629238426685333) ? ( (scaler_output_4 <= 0.5733436048030853) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5722590684890747) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6_0
		
	
		namespace SubModel_7_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-216.47369625 }} ,
					{ 4 ,  {-149.31764031 }} ,
					{ 6 ,  {-107.38945076 }} ,
					{ 7 ,  {-14.18377739 }} ,
					{ 10 ,  {-201.3834581 }} ,
					{ 11 ,  {-39.49575926 }} ,
					{ 13 ,  {-25.62214369 }} ,
					{ 14 ,  {105.45885918 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.17482367157936096) ? ( (scaler_output_5 <= -1.0149085223674774) ? ( (scaler_output_6 <= -0.003294244408607483) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= -0.24797631055116653) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= -0.9471391439437866) ? ( (scaler_output_10 <= 0.5923108458518982) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5722590684890747) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7_0
		
	
		namespace SubModel_8_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-80.37727899 }} ,
					{ 4 ,  {19.67833565 }} ,
					{ 6 ,  {47.48681743 }} ,
					{ 7 ,  {148.22745338 }} ,
					{ 9 ,  {49.89778648 }} ,
					{ 11 ,  {228.62330563 }} ,
					{ 12 ,  {153.53608941 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_4 <= 0.9782909452915192) ? ( (scaler_output_3 <= 0.055861689150333405) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= -0.11632041227130685) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_8 <= -1.1664267480373383) ? ( 9 ) : ( (scaler_output_11 <= -1.0901676416397095) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8_0
		
	
		namespace SubModel_9_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-73.44849391 }} ,
					{ 4 ,  {-203.34660361 }} ,
					{ 6 ,  {-41.48806981 }} ,
					{ 7 ,  {67.69644813 }} ,
					{ 10 ,  {185.20439924 }} ,
					{ 11 ,  {120.5389185 }} ,
					{ 12 ,  {44.90800783 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_7 <= -0.9428369104862213) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_11 <= 1.4262112975120544) ? ( (scaler_output_3 <= 0.493533119559288) ? ( 10 ) : ( 11 ) ) : ( 12 ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9_0
		
	
		namespace SubModel_10_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-118.29201989 }} ,
					{ 4 ,  {-25.0774265 }} ,
					{ 6 ,  {-30.2641612 }} ,
					{ 7 ,  {86.3177518 }} ,
					{ 10 ,  {-66.09975993 }} ,
					{ 11 ,  {62.45645261 }} ,
					{ 13 ,  {83.88369798 }} ,
					{ 14 ,  {316.42361392 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_9 <= 0.07927589118480682) ? ( (scaler_output_3 <= 0.3863315135240555) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_7 <= 0.42385512590408325) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.41797101497650146) ? ( (scaler_output_6 <= 0.03733181953430176) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_6 <= 1.8639472126960754) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10_0
		
	
		namespace SubModel_11_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-136.61832829 }} ,
					{ 4 ,  {-184.69920149 }} ,
					{ 6 ,  {-70.42234415 }} ,
					{ 7 ,  {1.32443607 }} ,
					{ 10 ,  {-65.2706283 }} ,
					{ 11 ,  {147.98112462 }} ,
					{ 13 ,  {-10.64908702 }} ,
					{ 14 ,  {99.4330047 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.17482367157936096) ? ( (scaler_output_5 <= -1.0149085223674774) ? ( (scaler_output_8 <= -0.35011760890483856) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_7 <= 0.05878127820324153) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= -0.41629238426685333) ? ( (scaler_output_10 <= 1.3497535586357117) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_4 <= -0.5722590684890747) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11_0
		
	
		namespace SubModel_12_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-115.6145424 }} ,
					{ 4 ,  {-34.72689534 }} ,
					{ 6 ,  {14.56573633 }} ,
					{ 7 ,  {252.22129678 }} ,
					{ 10 ,  {-3.82679881 }} ,
					{ 11 ,  {81.07500107 }} ,
					{ 13 ,  {235.47886906 }} ,
					{ 14 ,  {79.33495269 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_9 <= 0.07927589118480682) ? ( (scaler_output_8 <= -0.21623320877552032) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_7 <= 1.3062018752098083) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_2 <= 1.6595296263694763) ? ( (scaler_output_3 <= -0.03176193236140534) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_11 <= 0.4005035012960434) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12_0
		
	
		namespace SubModel_13_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-123.89772888 }} ,
					{ 4 ,  {-216.00531261 }} ,
					{ 6 ,  {-17.9289167 }} ,
					{ 7 ,  {-140.2554795 }} ,
					{ 10 ,  {-77.24167357 }} ,
					{ 11 ,  {4.27756279 }} ,
					{ 13 ,  {27.77869135 }} ,
					{ 14 ,  {142.30413692 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_7 <= 0.003826916217803955) ? ( (scaler_output_10 <= 0.27474022656679153) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_7 <= 0.9638827741146088) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= -0.3138342797756195) ? ( (scaler_output_8 <= -0.1882263943552971) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 0.9687913656234741) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13_0
		
	
		namespace SubModel_14_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-108.5983864 }} ,
					{ 4 ,  {-34.77991095 }} ,
					{ 6 ,  {57.17104373 }} ,
					{ 7 ,  {84.04694586 }} ,
					{ 10 ,  {-40.71594514 }} ,
					{ 11 ,  {62.26102821 }} ,
					{ 13 ,  {40.54914464 }} ,
					{ 14 ,  {139.89083647 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.9428369104862213) ? ( (scaler_output_4 <= 0.6580809950828552) ? ( (scaler_output_10 <= 0.486331045627594) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= 0.9265775382518768) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_3 <= 1.2782111763954163) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 0.9415285587310791) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14_0
		
	
		namespace SubModel_15_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-83.28721963 }} ,
					{ 4 ,  {0.53064747 }} ,
					{ 6 ,  {-5.68985872 }} ,
					{ 7 ,  {114.34673219 }} ,
					{ 10 ,  {127.53386061 }} ,
					{ 11 ,  {5.64255842 }} ,
					{ 13 ,  {-0.36194169 }} ,
					{ 14 ,  {98.24968542 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.6720361113548279) ? ( (scaler_output_7 <= 0.014573076623491943) ? ( (scaler_output_5 <= 0.5090407133102417) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= 0.986318975687027) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_8 <= -1.6199678182601929) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_8 <= -1.229277342557907) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15_0
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				SubModel_0_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_4_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_5_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_6_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_7_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_8_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_9_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_10_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_11_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_12_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_13_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_14_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_15_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, { "Estimator" });
	
	
			tTable lTable;
	
			std::any  lEstimator = 26.40585273065242 + 0.1 * lAggregatedTable[ "Estimator" ][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
