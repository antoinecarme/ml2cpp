// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingClassifier_Pipeline
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingClassifier_Pipeline_FourClass_10.exe ml2cpp-demo_GradientBoostingClassifier_Pipeline_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( -0.003903374463034205 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.6152232215702322 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.042796236914291665 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.7709819558904074 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.43300733624893334 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( -0.0424956965794036 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.29809080119845455 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.14672241507251663 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.01746942384662034 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.11507331415602866 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - -0.003903374463034205 ) / 0.9795060640183997 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.6152232215702322 ) / 1.3900807236205235 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.042796236914291665 ) / 1.4962685135870766 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.7709819558904074 ) / 2.3333561060111743 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.43300733624893334 ) / 1.4029757772648748 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - -0.0424956965794036 ) / 0.9558091076873229 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.29809080119845455 ) / 1.017013180721433 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.14672241507251663 ) / 1.600798539929603 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.01746942384662034 ) / 1.1487296361671415 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.11507331415602866 ) / 0.9690911857336224 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		namespace SubModel_0_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.1827957 }} ,
					{ 4 ,  {-0.96774194 }} ,
					{ 5 ,  {3.33333333 }} ,
					{ 8 ,  {2.82732448 }} ,
					{ 9 ,  {-0.96774194 }} ,
					{ 11 ,  {3.33333333 }} ,
					{ 12 ,  {-0.96774194 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_11 <= 2.4863024950027466) ? ( (scaler_output_2 <= -1.4848069548606873) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_5 <= 0.17407895624637604) ? ( (scaler_output_8 <= 1.4334330558776855) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -1.296878695487976) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_0
		
	
		namespace SubModel_0_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {-1. }} ,
					{ 4 ,  {-1. }} ,
					{ 5 ,  {3. }} ,
					{ 8 ,  {-1. }} ,
					{ 9 ,  {1.66666667 }} ,
					{ 11 ,  {-1. }} ,
					{ 12 ,  {2.09090909 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.17407895624637604) ? ( (scaler_output_3 <= 1.104193925857544) ? ( 2 ) : ( (scaler_output_5 <= -0.024253899697214365) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_6 <= 0.11294393241405487) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -1.75930517911911) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_1
		
	
		namespace SubModel_0_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 1 ,  {3. }} ,
					{ 4 ,  {3. }} ,
					{ 5 ,  {-1. }} ,
					{ 7 ,  {-0.6875 }} ,
					{ 8 ,  {3. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.091533362865448) ? ( 1 ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( (scaler_output_8 <= 1.210817664861679) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( 7 ) : ( 8 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_2
		
	
		namespace SubModel_0_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.47335423 }} ,
					{ 4 ,  {-1.03448276 }} ,
					{ 6 ,  {2.72727273 }} ,
					{ 7 ,  {-0.09404389 }} ,
					{ 10 ,  {-1.03448276 }} ,
					{ 11 ,  {-1.03448276 }} ,
					{ 13 ,  {2.72727273 }} ,
					{ 14 ,  {-0.79937304 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( (scaler_output_10 <= -0.42398644983768463) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= 0.18601789884269238) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_10 <= 0.2743743285536766) ? ( (scaler_output_10 <= -0.3892888277769089) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_7 <= -0.9150808751583099) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0_3
		
	
		namespace SubModel_1_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.91351811 }} ,
					{ 4 ,  {-0.93967431 }} ,
					{ 5 ,  {2.43999426 }} ,
					{ 8 ,  {2.13946242 }} ,
					{ 9 ,  {-0.93873293 }} ,
					{ 11 ,  {2.43999426 }} ,
					{ 12 ,  {-0.94308574 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_11 <= 2.4863024950027466) ? ( (scaler_output_2 <= -1.4848069548606873) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_5 <= 0.17407895624637604) ? ( (scaler_output_8 <= 1.4334330558776855) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -1.296878695487976) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_0
		
	
		namespace SubModel_1_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-0.99745413 }} ,
					{ 4 ,  {-0.96534151 }} ,
					{ 6 ,  {-0.96600168 }} ,
					{ 7 ,  {2.53759742 }} ,
					{ 10 ,  {-0.96237383 }} ,
					{ 11 ,  {1.34812536 }} ,
					{ 13 ,  {1.774518 }} ,
					{ 14 ,  {-0.13495901 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.17407895624637604) ? ( (scaler_output_3 <= 1.104193925857544) ? ( (scaler_output_6 <= -1.5178845524787903) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_5 <= -0.024253899697214365) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_6 <= 0.11294393241405487) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_10 <= 0.8858284950256348) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_1
		
	
		namespace SubModel_1_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {2.41486252 }} ,
					{ 4 ,  {2.25777837 }} ,
					{ 5 ,  {2.25777837 }} ,
					{ 8 ,  {-0.96956336 }} ,
					{ 9 ,  {2.32542941 }} ,
					{ 11 ,  {-0.64747235 }} ,
					{ 12 ,  {2.35376341 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.091533362865448) ? ( (scaler_output_10 <= -0.572883352637291) ? ( 2 ) : ( (scaler_output_7 <= 1.1087957620620728) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( (scaler_output_9 <= -0.765183299779892) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_2
		
	
		namespace SubModel_1_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.2292891 }} ,
					{ 4 ,  {-0.99804271 }} ,
					{ 6 ,  {2.12832518 }} ,
					{ 7 ,  {-0.04986478 }} ,
					{ 10 ,  {-0.997931 }} ,
					{ 11 ,  {-1.00490783 }} ,
					{ 13 ,  {2.95319534 }} ,
					{ 14 ,  {-0.75617625 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( (scaler_output_10 <= -0.42398644983768463) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= 0.18601789884269238) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.17765197902917862) ? ( (scaler_output_7 <= 0.2392626777291298) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.18790241330862045) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1_3
		
	
		namespace SubModel_2_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.71584399 }} ,
					{ 4 ,  {-0.91698844 }} ,
					{ 5 ,  {1.9636783 }} ,
					{ 8 ,  {-0.91353905 }} ,
					{ 9 ,  {1.73473634 }} ,
					{ 11 ,  {2.0848303 }} ,
					{ 12 ,  {-0.91903506 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_11 <= 2.4863024950027466) ? ( (scaler_output_2 <= -1.4848069548606873) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_5 <= 0.17407895624637604) ? ( (scaler_output_5 <= -1.2971596121788025) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -1.296878695487976) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_0
		
	
		namespace SubModel_2_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {-0.99407859 }} ,
					{ 4 ,  {-0.93751144 }} ,
					{ 5 ,  {-0.90022027 }} ,
					{ 8 ,  {-0.93092819 }} ,
					{ 9 ,  {1.26479507 }} ,
					{ 11 ,  {-0.98874217 }} ,
					{ 12 ,  {2.32907267 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.020856949035078287) ? ( (scaler_output_6 <= -1.5178845524787903) ? ( 2 ) : ( (scaler_output_7 <= 1.7275511622428894) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_10 <= 0.8861697912216187) ? ( (scaler_output_9 <= -0.7749850153923035) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_10 <= 1.566436529159546) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_1
		
	
		namespace SubModel_2_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {2.06212818 }} ,
					{ 4 ,  {1.84188581 }} ,
					{ 5 ,  {1.8419161 }} ,
					{ 8 ,  {1.40587484 }} ,
					{ 9 ,  {-0.60934465 }} ,
					{ 11 ,  {2.12664681 }} ,
					{ 12 ,  {1.88194502 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.091533362865448) ? ( (scaler_output_10 <= -0.572883352637291) ? ( 2 ) : ( (scaler_output_6 <= 0.369870338588953) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( (scaler_output_4 <= -1.2985426783561707) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_10 <= 0.28532011806964874) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_2
		
	
		namespace SubModel_2_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-1.07918933 }} ,
					{ 4 ,  {-0.9746274 }} ,
					{ 6 ,  {1.64006155 }} ,
					{ 7 ,  {-0.95970246 }} ,
					{ 10 ,  {-0.96448668 }} ,
					{ 11 ,  {-0.98172115 }} ,
					{ 13 ,  {2.4487907 }} ,
					{ 14 ,  {-0.71352526 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_10 <= -0.572883352637291) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= 0.8576349020004272) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_3 <= 0.17765197902917862) ? ( (scaler_output_7 <= 0.3225030452013016) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.18790241330862045) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2_3
		
	
		namespace SubModel_3_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.56250119 }} ,
					{ 4 ,  {-0.89809291 }} ,
					{ 5 ,  {1.66709686 }} ,
					{ 8 ,  {-0.89157176 }} ,
					{ 9 ,  {1.59919127 }} ,
					{ 11 ,  {1.83797205 }} ,
					{ 12 ,  {-0.60516704 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_11 <= 2.4863024950027466) ? ( (scaler_output_2 <= -1.4848069548606873) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_5 <= -0.062243292573839426) ? ( (scaler_output_5 <= -1.2971596121788025) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_11 <= -1.593790590763092) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_0
		
	
		namespace SubModel_3_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {-0.99008816 }} ,
					{ 4 ,  {-0.91286937 }} ,
					{ 5 ,  {-0.87306865 }} ,
					{ 8 ,  {-0.92565999 }} ,
					{ 9 ,  {1.62466695 }} ,
					{ 11 ,  {1.83180217 }} ,
					{ 12 ,  {-0.15029888 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.020856949035078287) ? ( (scaler_output_6 <= -1.5178845524787903) ? ( 2 ) : ( (scaler_output_7 <= 1.7275511622428894) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_2 <= -0.3394923061132431) ? ( (scaler_output_6 <= -0.745436891913414) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_8 <= -1.8206839561462402) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_1
		
	
		namespace SubModel_3_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {1.71602177 }} ,
					{ 4 ,  {1.57636761 }} ,
					{ 5 ,  {1.57663535 }} ,
					{ 8 ,  {2.03786594 }} ,
					{ 9 ,  {1.62340389 }} ,
					{ 11 ,  {-0.5260584 }} ,
					{ 12 ,  {1.74615594 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.091533362865448) ? ( (scaler_output_10 <= -0.572883352637291) ? ( 2 ) : ( (scaler_output_3 <= -0.3732308894395828) ? ( 4 ) : ( 5 ) ) ) : ( (scaler_output_4 <= -1.72577565908432) ? ( (scaler_output_9 <= 1.0546878278255463) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( 11 ) : ( 12 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_2
		
	
		namespace SubModel_3_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-1.0128626 }} ,
					{ 4 ,  {-0.93784983 }} ,
					{ 6 ,  {1.42454461 }} ,
					{ 7 ,  {-0.92693018 }} ,
					{ 10 ,  {-0.93260585 }} ,
					{ 11 ,  {2.65726472 }} ,
					{ 13 ,  {-0.01120271 }} ,
					{ 14 ,  {-0.94576856 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_8 <= 0.6392947733402252) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_6 <= 0.8576349020004272) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_4 <= -0.6375887542963028) ? ( (scaler_output_4 <= -0.8678167462348938) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_9 <= 0.2612931579351425) ? ( 13 ) : ( 14 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3_3
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lTreeScores = { 
				SubModel_0_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_0_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_0_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_0_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, {"Proba", "Score"});
	
			auto lLogSumExp = ln( + exp(ln(0.225) + 0.1 * lAggregatedTable["Score"][ 0 ]) + exp(ln(0.25) + 0.1 * lAggregatedTable["Score"][ 1 ]) + exp(ln(0.25) + 0.1 * lAggregatedTable["Score"][ 2 ]) + exp(ln(0.275) + 0.1 * lAggregatedTable["Score"][ 3 ]));
	
			lAggregatedTable["Score"][ 0 ] = exp(ln(0.225) + 0.1 * lAggregatedTable["Score"][ 0 ] - lLogSumExp);
	
			lAggregatedTable["Score"][ 1 ] = exp(ln(0.25) + 0.1 * lAggregatedTable["Score"][ 1 ] - lLogSumExp);
	
			lAggregatedTable["Score"][ 2 ] = exp(ln(0.25) + 0.1 * lAggregatedTable["Score"][ 2 ] - lLogSumExp);
	
			lAggregatedTable["Score"][ 3 ] = exp(ln(0.275) + 0.1 * lAggregatedTable["Score"][ 3 ] - lLogSumExp);
	
			tTable lSoftMaxTable = soft_max( lAggregatedTable );
	
			lSoftMaxTable[ "Score" ] = lAggregatedTable[ "Score" ];
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
