// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeClassifier
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeClassifier_FourClass_10.exe ml2cpp-demo_DecisionTreeClassifier_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 6 ,  {1.0, 0.0, 0.0, 0.0 }} ,
			{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 11 ,  {0.0, 0.0, 0.0, 1.0 }} ,
			{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 14 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
			{ 18 ,  {0.0, 0.0, 0.0, 1.0 }} ,
			{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 21 ,  {0.0, 0.0, 0.0, 1.0 }} ,
			{ 25 ,  {1.0, 0.0, 0.0, 0.0 }} ,
			{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 29 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 32 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 33 ,  {0.0, 0.0, 0.0, 1.0 }} ,
			{ 34 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 35 ,  {0.0, 0.0, 1.0, 0.0 }} ,
			{ 37 ,  {0.0, 1.0, 0.0, 0.0 }} ,
			{ 38 ,  {0.0, 0.0, 1.0, 0.0 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		int lNodeIndex = (Feature_3 <= 0.6375722885131836) ? ( (Feature_3 <= -1.7759541869163513) ? ( 2 ) : ( (Feature_4 <= -0.35484130680561066) ? ( (Feature_0 <= 0.6487955152988434) ? ( (Feature_1 <= -0.3825293034315109) ? ( 6 ) : ( (Feature_0 <= -1.8030309081077576) ? ( 8 ) : ( (Feature_2 <= -1.900172233581543) ? ( 10 ) : ( 11 ) ) ) ) : ( 12 ) ) : ( (Feature_2 <= -2.539427638053894) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_7 <= 0.362348735332489) ? ( (Feature_4 <= -0.20643145963549614) ? ( 18 ) : ( (Feature_7 <= 0.07134207338094711) ? ( 20 ) : ( 21 ) ) ) : ( (Feature_8 <= 1.035046935081482) ? ( (Feature_3 <= 1.5132884979248047) ? ( (Feature_6 <= -0.5341478586196899) ? ( 25 ) : ( 26 ) ) : ( (Feature_7 <= 3.2653926610946655) ? ( (Feature_8 <= 0.33265136182308197) ? ( 29 ) : ( (Feature_8 <= 0.582874596118927) ? ( (Feature_9 <= -0.5248405635356903) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) ) : ( 35 ) ) ) : ( (Feature_4 <= -2.328209698200226) ? ( 37 ) : ( 38 ) ) ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		lTable["Score"] = { 
			std::any(),
			std::any(),
			std::any(),
			std::any() 
		} ;
		lTable["Proba"] = { 
			lNodeValue [ 0 ],
			lNodeValue [ 1 ],
			lNodeValue [ 2 ],
			lNodeValue [ 3 ] 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
