// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeClassifier
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeClassifier_BreastCancer.exe ml2cpp-demo_DecisionTreeClassifier_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 3 ,  {1.0, 0.0 }} ,
			{ 6 ,  {0.0, 1.0 }} ,
			{ 8 ,  {1.0, 0.0 }} ,
			{ 9 ,  {0.0, 1.0 }} ,
			{ 12 ,  {1.0, 0.0 }} ,
			{ 13 ,  {0.0, 1.0 }} ,
			{ 15 ,  {1.0, 0.0 }} ,
			{ 16 ,  {0.0, 1.0 }} ,
			{ 18 ,  {0.0, 1.0 }} ,
			{ 21 ,  {0.0, 1.0 }} ,
			{ 22 ,  {1.0, 0.0 }} ,
			{ 23 ,  {1.0, 0.0 }} ,
			{ 26 ,  {0.0, 1.0 }} ,
			{ 29 ,  {1.0, 0.0 }} ,
			{ 30 ,  {0.0, 1.0 }} ,
			{ 31 ,  {1.0, 0.0 }} ,
			{ 32 ,  {0.0, 1.0 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		int lNodeIndex = (Feature_27 <= 0.14545000344514847) ? ( (Feature_23 <= 961.5500183105469) ? ( (Feature_18 <= 0.008710499852895737) ? ( 3 ) : ( (Feature_27 <= 0.12230000272393227) ? ( (Feature_10 <= 0.6430999934673309) ? ( 6 ) : ( (Feature_12 <= 4.249000072479248) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_13 <= 32.57499885559082) ? ( (Feature_15 <= 0.011884999927133322) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 0.1543000042438507) ? ( 15 ) : ( 16 ) ) ) ) ) : ( (Feature_24 <= 0.0879799984395504) ? ( 18 ) : ( (Feature_8 <= 0.15114999562501907) ? ( (Feature_19 <= 0.0029670000076293945) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_16 <= 0.13565000146627426) ? ( (Feature_26 <= 0.20340000092983246) ? ( 26 ) : ( (Feature_6 <= 0.08588500320911407) ? ( (Feature_16 <= 0.028699999675154686) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) : ( 32 ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		lTable["Score"] = { 
			std::any(),
			std::any() 
		} ;
		lTable["Proba"] = { 
			lNodeValue [ 0 ],
			lNodeValue [ 1 ] 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
