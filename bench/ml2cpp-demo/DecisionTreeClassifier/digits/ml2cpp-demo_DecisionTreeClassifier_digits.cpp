// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeClassifier
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeClassifier_digits.exe ml2cpp-demo_DecisionTreeClassifier_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 4 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 6 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 9 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 10 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 11 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 14 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 15 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 16 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 23 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 29 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 30 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 33 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 34 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 35 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 42 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 44 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 45 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 49 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 50 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 53 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 54 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 58 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 59 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 60 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 64 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 65 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 66 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 68 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 69 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 72 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 74 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 75 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 77 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 78 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 81 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 84 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 85 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 87 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 88 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 91 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 92 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 93 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 100 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 104 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 105 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 106 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 107 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 110 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 111 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 112 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 117 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 118 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 119 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 120 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 121 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 126 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 127 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 128 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 130 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 132 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 134 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 136 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 137 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 139 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 142 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 143 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 144 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 150 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 151 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 156 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 157 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 160 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 161 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 162 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 163 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 164 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 166 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 167 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 170 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 171 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 173 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 174 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 181 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 182 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 183 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 187 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 188 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 189 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 191 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 192 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 194 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 195 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 197 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 200 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 202 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 204 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 206 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 207 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 209 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 210 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 214 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 217 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 218 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 219 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 221 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 223 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 225 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 226 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 230 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 231 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 235 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 236 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 237 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 239 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 240 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 242 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 244 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 246 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 247 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 251 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 255 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 256 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 257 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
			{ 258 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 260 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 262 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 263 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 266 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
			{ 267 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 271 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 273 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 275 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
			{ 276 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 277 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 280 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 281 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
			{ 283 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
			{ 284 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		int lNodeIndex = (Feature_36 <= 0.5) ? ( (Feature_28 <= 2.5) ? ( (Feature_21 <= 0.5) ? ( (Feature_3 <= 6.0) ? ( 4 ) : ( (Feature_60 <= 13.5) ? ( 6 ) : ( (Feature_43 <= 11.5) ? ( (Feature_10 <= 13.0) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) ) : ( (Feature_63 <= 1.5) ? ( (Feature_43 <= 14.5) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) ) : ( (Feature_21 <= 9.0) ? ( (Feature_5 <= 1.5) ? ( (Feature_43 <= 0.5) ? ( 20 ) : ( (Feature_3 <= 15.5) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_58 <= 6.5) ? ( 25 ) : ( 26 ) ) ) : ( (Feature_34 <= 7.5) ? ( (Feature_9 <= 10.5) ? ( 29 ) : ( 30 ) ) : ( (Feature_12 <= 13.5) ? ( (Feature_43 <= 5.5) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) ) ) : ( (Feature_21 <= 0.5) ? ( (Feature_42 <= 8.5) ? ( (Feature_5 <= 2.5) ? ( (Feature_9 <= 0.5) ? ( (Feature_38 <= 1.5) ? ( (Feature_27 <= 8.5) ? ( 42 ) : ( (Feature_3 <= 3.5) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_34 <= 11.0) ? ( (Feature_35 <= 12.0) ? ( (Feature_12 <= 10.5) ? ( 49 ) : ( 50 ) ) : ( 51 ) ) : ( (Feature_51 <= 14.5) ? ( 53 ) : ( 54 ) ) ) ) : ( (Feature_37 <= 4.0) ? ( (Feature_13 <= 3.0) ? ( (Feature_18 <= 14.5) ? ( 58 ) : ( 59 ) ) : ( 60 ) ) : ( (Feature_53 <= 11.5) ? ( (Feature_42 <= 1.5) ? ( (Feature_9 <= 9.5) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) : ( (Feature_54 <= 10.0) ? ( 68 ) : ( 69 ) ) ) ) ) : ( (Feature_18 <= 4.5) ? ( (Feature_51 <= 1.0) ? ( 72 ) : ( (Feature_59 <= 10.5) ? ( 74 ) : ( 75 ) ) ) : ( (Feature_24 <= 0.5) ? ( 77 ) : ( 78 ) ) ) ) : ( (Feature_54 <= 0.5) ? ( (Feature_45 <= 1.5) ? ( 81 ) : ( (Feature_37 <= 5.0) ? ( (Feature_12 <= 5.5) ? ( 84 ) : ( 85 ) ) : ( (Feature_44 <= 7.5) ? ( 87 ) : ( 88 ) ) ) ) : ( (Feature_58 <= 9.0) ? ( (Feature_29 <= 13.5) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) ) : ( (Feature_33 <= 3.5) ? ( (Feature_43 <= 1.5) ? ( (Feature_29 <= 12.5) ? ( (Feature_34 <= 4.0) ? ( (Feature_26 <= 8.5) ? ( (Feature_28 <= 8.0) ? ( 100 ) : ( (Feature_19 <= 14.5) ? ( (Feature_13 <= 3.5) ? ( (Feature_9 <= 3.0) ? ( 104 ) : ( 105 ) ) : ( 106 ) ) : ( 107 ) ) ) : ( (Feature_38 <= 1.5) ? ( (Feature_2 <= 6.0) ? ( 110 ) : ( 111 ) ) : ( 112 ) ) ) : ( (Feature_42 <= 7.5) ? ( (Feature_25 <= 2.0) ? ( (Feature_27 <= 15.5) ? ( (Feature_7 <= 2.5) ? ( 117 ) : ( 118 ) ) : ( 119 ) ) : ( 120 ) ) : ( 121 ) ) ) : ( (Feature_13 <= 15.5) ? ( (Feature_26 <= 1.5) ? ( (Feature_46 <= 5.5) ? ( (Feature_46 <= 3.0) ? ( 126 ) : ( 127 ) ) : ( 128 ) ) : ( (Feature_21 <= 4.0) ? ( 130 ) : ( (Feature_36 <= 15.5) ? ( 132 ) : ( (Feature_20 <= 1.5) ? ( 134 ) : ( (Feature_53 <= 8.0) ? ( 136 ) : ( 137 ) ) ) ) ) ) : ( (Feature_2 <= 0.5) ? ( 139 ) : ( (Feature_18 <= 10.5) ? ( (Feature_20 <= 2.0) ? ( 142 ) : ( 143 ) ) : ( 144 ) ) ) ) ) : ( (Feature_60 <= 7.5) ? ( (Feature_38 <= 0.5) ? ( (Feature_30 <= 1.5) ? ( (Feature_50 <= 3.5) ? ( (Feature_17 <= 1.5) ? ( 150 ) : ( 151 ) ) : ( (Feature_19 <= 15.0) ? ( (Feature_53 <= 8.5) ? ( (Feature_52 <= 6.0) ? ( (Feature_4 <= 4.0) ? ( 156 ) : ( 157 ) ) : ( (Feature_21 <= 7.5) ? ( (Feature_4 <= 12.0) ? ( 160 ) : ( 161 ) ) : ( 162 ) ) ) : ( 163 ) ) : ( 164 ) ) ) : ( (Feature_12 <= 3.0) ? ( 166 ) : ( 167 ) ) ) : ( (Feature_26 <= 14.5) ? ( (Feature_61 <= 0.5) ? ( 170 ) : ( 171 ) ) : ( (Feature_25 <= 6.0) ? ( 173 ) : ( 174 ) ) ) ) : ( (Feature_27 <= 10.5) ? ( (Feature_26 <= 6.5) ? ( (Feature_38 <= 1.5) ? ( (Feature_51 <= 6.5) ? ( (Feature_43 <= 10.5) ? ( (Feature_34 <= 5.0) ? ( 181 ) : ( 182 ) ) : ( 183 ) ) : ( (Feature_19 <= 13.5) ? ( (Feature_50 <= 0.5) ? ( (Feature_16 <= 0.5) ? ( 187 ) : ( 188 ) ) : ( 189 ) ) : ( (Feature_59 <= 12.5) ? ( 191 ) : ( 192 ) ) ) ) : ( (Feature_20 <= 11.0) ? ( 194 ) : ( 195 ) ) ) : ( (Feature_44 <= 3.5) ? ( 197 ) : ( (Feature_13 <= 10.5) ? ( (Feature_34 <= 1.5) ? ( 200 ) : ( (Feature_59 <= 2.5) ? ( 202 ) : ( (Feature_53 <= 1.5) ? ( 204 ) : ( (Feature_44 <= 11.0) ? ( 206 ) : ( 207 ) ) ) ) ) : ( (Feature_27 <= 0.5) ? ( 209 ) : ( 210 ) ) ) ) ) : ( (Feature_20 <= 14.5) ? ( (Feature_38 <= 3.5) ? ( (Feature_21 <= 4.0) ? ( 214 ) : ( (Feature_60 <= 8.5) ? ( (Feature_51 <= 4.0) ? ( 217 ) : ( 218 ) ) : ( 219 ) ) ) : ( (Feature_51 <= 5.5) ? ( 221 ) : ( (Feature_54 <= 3.5) ? ( 223 ) : ( (Feature_34 <= 2.5) ? ( 225 ) : ( 226 ) ) ) ) ) : ( (Feature_9 <= 0.5) ? ( (Feature_50 <= 11.5) ? ( (Feature_41 <= 7.5) ? ( 230 ) : ( 231 ) ) : ( (Feature_51 <= 14.0) ? ( (Feature_18 <= 1.0) ? ( (Feature_5 <= 12.0) ? ( 235 ) : ( 236 ) ) : ( 237 ) ) : ( (Feature_10 <= 14.5) ? ( 239 ) : ( 240 ) ) ) ) : ( (Feature_42 <= 3.5) ? ( 242 ) : ( (Feature_27 <= 15.5) ? ( 244 ) : ( (Feature_42 <= 9.0) ? ( 246 ) : ( 247 ) ) ) ) ) ) ) ) ) : ( (Feature_13 <= 9.5) ? ( (Feature_2 <= 5.0) ? ( (Feature_37 <= 3.5) ? ( 251 ) : ( (Feature_58 <= 6.5) ? ( (Feature_5 <= 12.5) ? ( (Feature_26 <= 4.0) ? ( 255 ) : ( 256 ) ) : ( 257 ) ) : ( 258 ) ) ) : ( (Feature_60 <= 2.0) ? ( 260 ) : ( (Feature_28 <= 14.5) ? ( 262 ) : ( 263 ) ) ) ) : ( (Feature_19 <= 3.5) ? ( (Feature_55 <= 0.5) ? ( 266 ) : ( 267 ) ) : ( (Feature_20 <= 13.5) ? ( (Feature_36 <= 15.5) ? ( (Feature_35 <= 7.0) ? ( 271 ) : ( (Feature_42 <= 15.5) ? ( 273 ) : ( (Feature_14 <= 6.0) ? ( 275 ) : ( 276 ) ) ) ) : ( 277 ) ) : ( (Feature_10 <= 14.5) ? ( (Feature_5 <= 3.5) ? ( 280 ) : ( 281 ) ) : ( (Feature_37 <= 6.0) ? ( 283 ) : ( 284 ) ) ) ) ) ) ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		lTable["Score"] = { 
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any(),
			std::any() 
		} ;
		lTable["Proba"] = { 
			lNodeValue [ 0 ],
			lNodeValue [ 1 ],
			lNodeValue [ 2 ],
			lNodeValue [ 3 ],
			lNodeValue [ 4 ],
			lNodeValue [ 5 ],
			lNodeValue [ 6 ],
			lNodeValue [ 7 ],
			lNodeValue [ 8 ],
			lNodeValue [ 9 ] 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
