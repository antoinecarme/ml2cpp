// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor_Pipeline
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_Pipeline_freidman1.exe ml2cpp-demo_DecisionTreeRegressor_Pipeline_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.5629846484809591 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.45606442423375926 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.47113817481474773 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.533968020094518 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.4780936262373869 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.5682849224172329 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.47914374714280494 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.4594152477223205 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.4901106996809651 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.5378806933707533 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.5629846484809591 ) / 0.2583714683396337 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.45606442423375926 ) / 0.2878721730712705 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.47113817481474773 ) / 0.3109216791553051 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.533968020094518 ) / 0.2826199867400281 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.4780936262373869 ) / 0.286140491317745 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.5682849224172329 ) / 0.29767408106451737 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.47914374714280494 ) / 0.2735314971431575 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.4594152477223205 ) / 0.28721149346998975 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.4901106996809651 ) / 0.2790486717322703 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.5378806933707533 ) / 0.2958192296543193 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {12.76012926 }} ,
				{ 7 ,  {12.0711718 }} ,
				{ 9 ,  {9.73504122 }} ,
				{ 10 ,  {10.04520361 }} ,
				{ 13 ,  {5.293284 }} ,
				{ 15 ,  {5.79437904 }} ,
				{ 16 ,  {6.24571025 }} ,
				{ 19 ,  {6.98004624 }} ,
				{ 20 ,  {6.86145372 }} ,
				{ 23 ,  {8.24017885 }} ,
				{ 24 ,  {8.0628501 }} ,
				{ 26 ,  {7.73242981 }} ,
				{ 27 ,  {7.55699808 }} ,
				{ 32 ,  {10.48306677 }} ,
				{ 37 ,  {12.10988659 }} ,
				{ 38 ,  {12.123142 }} ,
				{ 40 ,  {11.78982164 }} ,
				{ 41 ,  {11.77602305 }} ,
				{ 42 ,  {11.31351814 }} ,
				{ 43 ,  {12.83034463 }} ,
				{ 45 ,  {10.2020931 }} ,
				{ 46 ,  {10.59689049 }} ,
				{ 47 ,  {8.89707415 }} ,
				{ 51 ,  {14.77256375 }} ,
				{ 52 ,  {14.0511849 }} ,
				{ 53 ,  {13.17420206 }} ,
				{ 55 ,  {15.92255811 }} ,
				{ 57 ,  {17.31914707 }} ,
				{ 58 ,  {18.28251507 }} ,
				{ 62 ,  {11.38099315 }} ,
				{ 63 ,  {13.11975672 }} ,
				{ 66 ,  {16.08254262 }} ,
				{ 68 ,  {16.3247696 }} ,
				{ 69 ,  {16.30255672 }} ,
				{ 70 ,  {14.46699637 }} ,
				{ 74 ,  {18.33205802 }} ,
				{ 75 ,  {18.4937214 }} ,
				{ 76 ,  {18.00761757 }} ,
				{ 77 ,  {23.6939704 }} ,
				{ 81 ,  {15.54179787 }} ,
				{ 83 ,  {7.21944335 }} ,
				{ 85 ,  {10.18163117 }} ,
				{ 86 ,  {10.13178962 }} ,
				{ 90 ,  {16.0096116 }} ,
				{ 91 ,  {16.30127921 }} ,
				{ 93 ,  {15.70652198 }} ,
				{ 94 ,  {15.70100345 }} ,
				{ 96 ,  {18.25069552 }} ,
				{ 97 ,  {17.89244708 }} ,
				{ 101 ,  {15.30848399 }} ,
				{ 102 ,  {14.53624519 }} ,
				{ 103 ,  {12.42341176 }} ,
				{ 109 ,  {18.23761382 }} ,
				{ 110 ,  {18.10948375 }} ,
				{ 114 ,  {20.06970209 }} ,
				{ 115 ,  {19.95894273 }} ,
				{ 116 ,  {20.19903361 }} ,
				{ 117 ,  {19.36426348 }} ,
				{ 119 ,  {19.59215343 }} ,
				{ 122 ,  {16.91440831 }} ,
				{ 124 ,  {17.36059041 }} ,
				{ 126 ,  {17.51855413 }} ,
				{ 127 ,  {17.4514578 }} ,
				{ 130 ,  {17.80609749 }} ,
				{ 131 ,  {17.954677 }} ,
				{ 132 ,  {18.25024804 }} ,
				{ 134 ,  {23.18131441 }} ,
				{ 135 ,  {20.62985591 }} ,
				{ 139 ,  {19.30378831 }} ,
				{ 143 ,  {21.34099337 }} ,
				{ 144 ,  {21.77400035 }} ,
				{ 145 ,  {20.70189537 }} ,
				{ 147 ,  {23.76092016 }} ,
				{ 149 ,  {22.30975449 }} ,
				{ 151 ,  {22.76939497 }} ,
				{ 152 ,  {23.03027937 }} ,
				{ 154 ,  {25.24805848 }} ,
				{ 155 ,  {24.71333827 }} ,
				{ 157 ,  {18.9003877 }} ,
				{ 158 ,  {17.41761148 }} 
		};
		
	
		int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_6 <= 0.6631695628166199) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_10 <= -1.2497459948062897) ? ( 4 ) : ( (scaler_output_7 <= -1.2620937824249268) ? ( (scaler_output_6 <= -0.7026577442884445) ? ( 7 ) : ( (scaler_output_5 <= -1.2189649939537048) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_5 <= -1.5550702214241028) ? ( (scaler_output_4 <= 0.20176033675670624) ? ( 13 ) : ( (scaler_output_7 <= -0.6375406831502914) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_7 <= 0.16519685089588165) ? ( (scaler_output_7 <= -0.5709044486284256) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_10 <= 0.2154730260372162) ? ( (scaler_output_8 <= -0.310638181399554) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_6 <= 0.07700762152671814) ? ( 26 ) : ( 27 ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.7284272313117981) ? ( (scaler_output_7 <= 1.1900665760040283) ? ( (scaler_output_11 <= 1.188630759716034) ? ( (scaler_output_4 <= -1.2217068672180176) ? ( 32 ) : ( (scaler_output_6 <= 0.5279591083526611) ? ( (scaler_output_7 <= 0.8419815003871918) ? ( (scaler_output_8 <= -1.0841555893421173) ? ( (scaler_output_10 <= 0.9216151833534241) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_5 <= 0.6356471721082926) ? ( 40 ) : ( 41 ) ) ) : ( 42 ) ) : ( 43 ) ) ) : ( (scaler_output_6 <= 0.1596950888633728) ? ( 45 ) : ( 46 ) ) ) : ( 47 ) ) : ( (scaler_output_2 <= -0.08383416384458542) ? ( (scaler_output_3 <= -0.5260386168956757) ? ( (scaler_output_9 <= 0.19739049673080444) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (scaler_output_4 <= -0.050650060176849365) ? ( 55 ) : ( (scaler_output_6 <= -0.8039737045764923) ? ( 57 ) : ( 58 ) ) ) ) ) ) : ( (scaler_output_5 <= 0.4527852237224579) ? ( (scaler_output_10 <= -0.5936968475580215) ? ( (scaler_output_3 <= -0.75979133695364) ? ( 62 ) : ( 63 ) ) : ( (scaler_output_10 <= 0.9912045001983643) ? ( (scaler_output_9 <= 0.6431325674057007) ? ( 66 ) : ( (scaler_output_10 <= 0.7875051498413086) ? ( 68 ) : ( 69 ) ) ) : ( 70 ) ) ) : ( (scaler_output_2 <= 0.9674954563379288) ? ( (scaler_output_9 <= -0.4717315584421158) ? ( (scaler_output_11 <= -0.002283010631799698) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) : ( 77 ) ) ) ) : ( (scaler_output_5 <= -0.9059769511222839) ? ( (scaler_output_2 <= -0.7435633540153503) ? ( (scaler_output_4 <= -0.8188172429800034) ? ( 81 ) : ( (scaler_output_2 <= -1.0249632596969604) ? ( 83 ) : ( (scaler_output_9 <= 0.04132270812988281) ? ( 85 ) : ( 86 ) ) ) ) : ( (scaler_output_2 <= 0.9644909799098969) ? ( (scaler_output_2 <= -0.2968900725245476) ? ( (scaler_output_7 <= -0.22205865383148193) ? ( 90 ) : ( 91 ) ) : ( (scaler_output_7 <= 0.25047480687499046) ? ( 93 ) : ( 94 ) ) ) : ( (scaler_output_9 <= -0.44411467015743256) ? ( 96 ) : ( 97 ) ) ) ) : ( (scaler_output_2 <= -1.2575977444648743) ? ( (scaler_output_7 <= 1.3265424966812134) ? ( (scaler_output_4 <= -0.4026244133710861) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) : ( (scaler_output_5 <= 0.7374852299690247) ? ( (scaler_output_7 <= 1.1817528009414673) ? ( (scaler_output_7 <= -0.04169179091695696) ? ( (scaler_output_3 <= 0.644769161939621) ? ( (scaler_output_5 <= 0.07324644923210144) ? ( 109 ) : ( 110 ) ) : ( (scaler_output_2 <= 0.12754252552986145) ? ( (scaler_output_7 <= -0.6012462601065636) ? ( (scaler_output_3 <= 1.1072546243667603) ? ( 114 ) : ( 115 ) ) : ( 116 ) ) : ( 117 ) ) ) : ( (scaler_output_4 <= -1.1016908586025238) ? ( 119 ) : ( (scaler_output_2 <= 0.6331663131713867) ? ( (scaler_output_9 <= -0.3997676223516464) ? ( 122 ) : ( (scaler_output_8 <= 0.1168588399887085) ? ( 124 ) : ( (scaler_output_6 <= 0.302760511636734) ? ( 126 ) : ( 127 ) ) ) ) : ( (scaler_output_3 <= 0.5516266971826553) ? ( (scaler_output_6 <= -0.5858339369297028) ? ( 130 ) : ( 131 ) ) : ( 132 ) ) ) ) ) : ( (scaler_output_9 <= -0.3602754771709442) ? ( 134 ) : ( 135 ) ) ) : ( (scaler_output_2 <= 0.9510244131088257) ? ( (scaler_output_7 <= 1.24564129114151) ? ( (scaler_output_7 <= -1.1751229763031006) ? ( 139 ) : ( (scaler_output_3 <= 0.261717714369297) ? ( (scaler_output_9 <= 1.1428460478782654) ? ( (scaler_output_7 <= -0.017116621136665344) ? ( 143 ) : ( 144 ) ) : ( 145 ) ) : ( (scaler_output_10 <= -0.5686390101909637) ? ( 147 ) : ( (scaler_output_9 <= 0.17007257789373398) ? ( 149 ) : ( (scaler_output_5 <= 1.3410025238990784) ? ( 151 ) : ( 152 ) ) ) ) ) ) : ( (scaler_output_6 <= 0.7342626675963402) ? ( 154 ) : ( 155 ) ) ) : ( (scaler_output_9 <= -0.6845793463289738) ? ( 157 ) : ( 158 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
