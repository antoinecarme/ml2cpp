// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor_Pipeline
// Dataset : boston

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_Pipeline_boston.exe ml2cpp-demo_DecisionTreeRegressor_Pipeline_boston.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 3.3936090099009903 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 12.113861386138614 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 10.983613861386127 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.07178217821782178 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.5541153465346542 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 6.299148514851482 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 67.85049504950491 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 3.8198420792079233 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 9.55940594059406 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 405.8019801980198 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 18.40915841584154 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 358.3797277227715 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 12.626584158415856 ) : ( Feature_12)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 3.3936090099009903 ) / 8.000616555737787 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 12.113861386138614 ) / 24.187656534977855 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 10.983613861386127 ) / 6.8177472477399235 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.07178217821782178 ) / 0.2581269011709685 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.5541153465346542 ) / 0.11800809760824685 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 6.299148514851482 ) / 0.7060417397996938 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 67.85049504950491 ) / 28.107403181658597 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 3.8198420792079233 ) / 2.0933726902675627 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 9.55940594059406 ) / 8.728803783375893 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 405.8019801980198 ) / 169.7858592930543 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 18.40915841584154 ) / 2.166792648327246 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 358.3797277227715 ) / 90.64691624336051 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 12.626584158415856 ) / 7.167938324035357 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {50. }} ,
				{ 8 ,  {29.1 }} ,
				{ 12 ,  {27. }} ,
				{ 13 ,  {27.5 }} ,
				{ 14 ,  {24.3 }} ,
				{ 18 ,  {24.6 }} ,
				{ 19 ,  {24.4 }} ,
				{ 21 ,  {25.2 }} ,
				{ 22 ,  {25. }} ,
				{ 23 ,  {22.1 }} ,
				{ 28 ,  {25.3 }} ,
				{ 30 ,  {25. }} ,
				{ 31 ,  {24.7 }} ,
				{ 36 ,  {22.9 }} ,
				{ 38 ,  {23.5 }} ,
				{ 39 ,  {24.1 }} ,
				{ 40 ,  {24.8 }} ,
				{ 45 ,  {23. }} ,
				{ 46 ,  {22.8 }} ,
				{ 48 ,  {23.4 }} ,
				{ 49 ,  {23.2 }} ,
				{ 51 ,  {23.1 }} ,
				{ 53 ,  {22.3 }} ,
				{ 55 ,  {22.5 }} ,
				{ 56 ,  {22.6 }} ,
				{ 57 ,  {21.9 }} ,
				{ 60 ,  {23.1 }} ,
				{ 63 ,  {23.7 }} ,
				{ 64 ,  {23.7 }} ,
				{ 65 ,  {24.2 }} ,
				{ 67 ,  {23.8 }} ,
				{ 70 ,  {24.4 }} ,
				{ 71 ,  {24.7 }} ,
				{ 72 ,  {25. }} ,
				{ 74 ,  {20.7 }} ,
				{ 76 ,  {22.2 }} ,
				{ 78 ,  {22.9 }} ,
				{ 79 ,  {23.1 }} ,
				{ 80 ,  {20.4 }} ,
				{ 84 ,  {27.9 }} ,
				{ 89 ,  {16.1 }} ,
				{ 90 ,  {16. }} ,
				{ 92 ,  {19.3 }} ,
				{ 95 ,  {17.2 }} ,
				{ 96 ,  {17.5 }} ,
				{ 97 ,  {18.2 }} ,
				{ 101 ,  {15.3 }} ,
				{ 102 ,  {15. }} ,
				{ 103 ,  {19.6 }} ,
				{ 106 ,  {23.8 }} ,
				{ 108 ,  {21.9 }} ,
				{ 111 ,  {20.3 }} ,
				{ 113 ,  {20.6 }} ,
				{ 114 ,  {20.8 }} ,
				{ 115 ,  {21.7 }} ,
				{ 117 ,  {17.4 }} ,
				{ 118 ,  {16.8 }} ,
				{ 122 ,  {21.7 }} ,
				{ 125 ,  {23.3 }} ,
				{ 126 ,  {23.2 }} ,
				{ 129 ,  {22.8 }} ,
				{ 131 ,  {22.6 }} ,
				{ 132 ,  {22.7 }} ,
				{ 134 ,  {22.9 }} ,
				{ 135 ,  {23.1 }} ,
				{ 137 ,  {23.4 }} ,
				{ 140 ,  {18.9 }} ,
				{ 141 ,  {19.4 }} ,
				{ 142 ,  {20.9 }} ,
				{ 147 ,  {18.2 }} ,
				{ 148 ,  {19.3 }} ,
				{ 150 ,  {16.2 }} ,
				{ 152 ,  {17.4 }} ,
				{ 153 ,  {17.1 }} ,
				{ 156 ,  {18.5 }} ,
				{ 157 ,  {18.7 }} ,
				{ 159 ,  {20.1 }} ,
				{ 160 ,  {19.3 }} ,
				{ 165 ,  {20. }} ,
				{ 166 ,  {18.6 }} ,
				{ 168 ,  {22. }} ,
				{ 172 ,  {21.1 }} ,
				{ 174 ,  {21. }} ,
				{ 175 ,  {20.9 }} ,
				{ 176 ,  {20.3 }} ,
				{ 177 ,  {21.8 }} ,
				{ 180 ,  {22.6 }} ,
				{ 181 ,  {22.5 }} ,
				{ 183 ,  {24.7 }} ,
				{ 184 ,  {24.5 }} ,
				{ 188 ,  {22. }} ,
				{ 190 ,  {20.7 }} ,
				{ 191 ,  {20.6 }} ,
				{ 194 ,  {21.2 }} ,
				{ 195 ,  {20.1 }} ,
				{ 199 ,  {18.5 }} ,
				{ 202 ,  {19.6 }} ,
				{ 203 ,  {19.5 }} ,
				{ 206 ,  {19.2 }} ,
				{ 207 ,  {19.4 }} ,
				{ 209 ,  {18.7 }} ,
				{ 210 ,  {19. }} ,
				{ 211 ,  {18.3 }} ,
				{ 214 ,  {19.6 }} ,
				{ 215 ,  {19.9 }} ,
				{ 217 ,  {20.3 }} ,
				{ 218 ,  {20.4 }} ,
				{ 219 ,  {16.8 }} ,
				{ 220 ,  {11.9 }} ,
				{ 228 ,  {22.2 }} ,
				{ 229 ,  {21.7 }} ,
				{ 233 ,  {21.1 }} ,
				{ 234 ,  {21.2 }} ,
				{ 235 ,  {20.8 }} ,
				{ 237 ,  {20.5 }} ,
				{ 238 ,  {20.1 }} ,
				{ 242 ,  {22.2 }} ,
				{ 243 ,  {22. }} ,
				{ 245 ,  {22.6 }} ,
				{ 246 ,  {22.9 }} ,
				{ 247 ,  {23.9 }} ,
				{ 252 ,  {25. }} ,
				{ 254 ,  {24.4 }} ,
				{ 255 ,  {24.5 }} ,
				{ 257 ,  {24.3 }} ,
				{ 258 ,  {24. }} ,
				{ 260 ,  {22.2 }} ,
				{ 261 ,  {23. }} ,
				{ 264 ,  {21.2 }} ,
				{ 265 ,  {21. }} ,
				{ 266 ,  {21.4 }} ,
				{ 267 ,  {26.4 }} ,
				{ 268 ,  {29.6 }} ,
				{ 270 ,  {16.1 }} ,
				{ 274 ,  {23.6 }} ,
				{ 275 ,  {23. }} ,
				{ 276 ,  {21.5 }} ,
				{ 281 ,  {22. }} ,
				{ 283 ,  {21.6 }} ,
				{ 285 ,  {21.2 }} ,
				{ 286 ,  {21.4 }} ,
				{ 289 ,  {20.6 }} ,
				{ 290 ,  {20.5 }} ,
				{ 291 ,  {20. }} ,
				{ 294 ,  {18.2 }} ,
				{ 297 ,  {20.4 }} ,
				{ 298 ,  {21.4 }} ,
				{ 299 ,  {23. }} ,
				{ 303 ,  {18.5 }} ,
				{ 304 ,  {18.4 }} ,
				{ 305 ,  {17.7 }} ,
				{ 308 ,  {20.1 }} ,
				{ 309 ,  {20.2 }} ,
				{ 312 ,  {19.2 }} ,
				{ 313 ,  {19.3 }} ,
				{ 316 ,  {19.8 }} ,
				{ 318 ,  {19.6 }} ,
				{ 319 ,  {19.5 }} ,
				{ 320 ,  {20. }} ,
				{ 323 ,  {22.6 }} ,
				{ 324 ,  {22.7 }} ,
				{ 325 ,  {21.7 }} ,
				{ 327 ,  {50. }} ,
				{ 335 ,  {30.8 }} ,
				{ 336 ,  {30.1 }} ,
				{ 338 ,  {29.8 }} ,
				{ 339 ,  {29.1 }} ,
				{ 340 ,  {32.4 }} ,
				{ 344 ,  {28. }} ,
				{ 345 ,  {27.9 }} ,
				{ 346 ,  {26.6 }} ,
				{ 347 ,  {29.4 }} ,
				{ 349 ,  {24. }} ,
				{ 350 ,  {22.8 }} ,
				{ 354 ,  {31.6 }} ,
				{ 355 ,  {33.4 }} ,
				{ 357 ,  {37. }} ,
				{ 360 ,  {34.9 }} ,
				{ 361 ,  {35.1 }} ,
				{ 362 ,  {35.4 }} ,
				{ 365 ,  {33.1 }} ,
				{ 367 ,  {32. }} ,
				{ 368 ,  {31.2 }} ,
				{ 370 ,  {29.6 }} ,
				{ 371 ,  {28.5 }} ,
				{ 379 ,  {32. }} ,
				{ 380 ,  {32.5 }} ,
				{ 383 ,  {29.9 }} ,
				{ 385 ,  {30.1 }} ,
				{ 386 ,  {30.1 }} ,
				{ 387 ,  {29. }} ,
				{ 389 ,  {28.4 }} ,
				{ 390 ,  {28.2 }} ,
				{ 392 ,  {23.6 }} ,
				{ 394 ,  {26.7 }} ,
				{ 395 ,  {27.5 }} ,
				{ 399 ,  {22.8 }} ,
				{ 401 ,  {23.7 }} ,
				{ 402 ,  {23.8 }} ,
				{ 403 ,  {26.5 }} ,
				{ 405 ,  {29.8 }} ,
				{ 406 ,  {28.7 }} ,
				{ 409 ,  {28.6 }} ,
				{ 411 ,  {27.1 }} ,
				{ 412 ,  {26.6 }} ,
				{ 415 ,  {22. }} ,
				{ 417 ,  {23.9 }} ,
				{ 418 ,  {25.1 }} ,
				{ 422 ,  {24.8 }} ,
				{ 423 ,  {24.8 }} ,
				{ 424 ,  {25. }} ,
				{ 425 ,  {26.2 }} ,
				{ 427 ,  {23.9 }} ,
				{ 430 ,  {22. }} ,
				{ 431 ,  {22.4 }} ,
				{ 432 ,  {21. }} ,
				{ 439 ,  {21.7 }} ,
				{ 440 ,  {20.4 }} ,
				{ 443 ,  {23.1 }} ,
				{ 444 ,  {23.7 }} ,
				{ 446 ,  {22.5 }} ,
				{ 447 ,  {22.4 }} ,
				{ 450 ,  {19.4 }} ,
				{ 451 ,  {19.8 }} ,
				{ 452 ,  {18.9 }} ,
				{ 456 ,  {20.5 }} ,
				{ 458 ,  {18.8 }} ,
				{ 459 ,  {19.5 }} ,
				{ 460 ,  {27.1 }} ,
				{ 465 ,  {17.5 }} ,
				{ 466 ,  {17.8 }} ,
				{ 468 ,  {18.3 }} ,
				{ 469 ,  {18.7 }} ,
				{ 473 ,  {16.6 }} ,
				{ 474 ,  {15.7 }} ,
				{ 476 ,  {15. }} ,
				{ 477 ,  {14.4 }} ,
				{ 479 ,  {16.5 }} ,
				{ 480 ,  {17.3 }} ,
				{ 483 ,  {19.3 }} ,
				{ 484 ,  {20. }} ,
				{ 485 ,  {21.7 }} ,
				{ 489 ,  {11.7 }} ,
				{ 490 ,  {10.2 }} ,
				{ 492 ,  {19.1 }} ,
				{ 496 ,  {16.3 }} ,
				{ 501 ,  {13.9 }} ,
				{ 502 ,  {13.8 }} ,
				{ 503 ,  {13.6 }} ,
				{ 505 ,  {13.1 }} ,
				{ 506 ,  {13.5 }} ,
				{ 507 ,  {14.5 }} ,
				{ 510 ,  {15.6 }} ,
				{ 511 ,  {15.2 }} ,
				{ 512 ,  {16.6 }} ,
				{ 515 ,  {19.1 }} ,
				{ 517 ,  {17.2 }} ,
				{ 518 ,  {17.9 }} ,
				{ 520 ,  {13.3 }} ,
				{ 521 ,  {17.2 }} ,
				{ 522 ,  {27.5 }} ,
				{ 530 ,  {13.1 }} ,
				{ 531 ,  {15.6 }} ,
				{ 533 ,  {15.6 }} ,
				{ 537 ,  {19. }} ,
				{ 538 ,  {19.4 }} ,
				{ 540 ,  {17.4 }} ,
				{ 543 ,  {18. }} ,
				{ 544 ,  {18.1 }} ,
				{ 545 ,  {18.4 }} ,
				{ 546 ,  {16.1 }} ,
				{ 549 ,  {15.2 }} ,
				{ 551 ,  {14.1 }} ,
				{ 552 ,  {13.6 }} ,
				{ 553 ,  {16.7 }} ,
				{ 557 ,  {13.4 }} ,
				{ 558 ,  {13.5 }} ,
				{ 560 ,  {13.1 }} ,
				{ 563 ,  {14.2 }} ,
				{ 566 ,  {14.9 }} ,
				{ 567 ,  {14.9 }} ,
				{ 568 ,  {15.1 }} ,
				{ 569 ,  {14.1 }} ,
				{ 570 ,  {17.8 }} ,
				{ 571 ,  {23.2 }} ,
				{ 574 ,  {7. }} ,
				{ 577 ,  {13.3 }} ,
				{ 579 ,  {14. }} ,
				{ 580 ,  {14.4 }} ,
				{ 584 ,  {12.7 }} ,
				{ 585 ,  {12.5 }} ,
				{ 586 ,  {13. }} ,
				{ 589 ,  {11. }} ,
				{ 591 ,  {8.5 }} ,
				{ 592 ,  {9.5 }} ,
				{ 595 ,  {11.3 }} ,
				{ 596 ,  {12.1 }} ,
				{ 597 ,  {12.3 }} ,
				{ 601 ,  {13.8 }} ,
				{ 602 ,  {15.4 }} ,
				{ 604 ,  {17.8 }} ,
				{ 605 ,  {17.1 }} ,
				{ 607 ,  {11.8 }} ,
				{ 610 ,  {13.4 }} ,
				{ 612 ,  {15.6 }} ,
				{ 613 ,  {14.6 }} ,
				{ 614 ,  {12.8 }} ,
				{ 619 ,  {11.7 }} ,
				{ 621 ,  {12.6 }} ,
				{ 622 ,  {12.7 }} ,
				{ 623 ,  {10.4 }} ,
				{ 625 ,  {16.7 }} ,
				{ 626 ,  {14.6 }} ,
				{ 629 ,  {10.2 }} ,
				{ 632 ,  {13.9 }} ,
				{ 633 ,  {13.8 }} ,
				{ 634 ,  {13.1 }} ,
				{ 638 ,  {10.4 }} ,
				{ 640 ,  {7.5 }} ,
				{ 641 ,  {8.3 }} ,
				{ 643 ,  {5. }} ,
				{ 645 ,  {7.2 }} ,
				{ 648 ,  {6.3 }} ,
				{ 649 ,  {5.6 }} ,
				{ 650 ,  {7. }} ,
				{ 653 ,  {13.4 }} ,
				{ 654 ,  {11.8 }} ,
				{ 658 ,  {8.4 }} ,
				{ 659 ,  {8.8 }} ,
				{ 660 ,  {7.4 }} ,
				{ 662 ,  {8.7 }} ,
				{ 665 ,  {9.7 }} ,
				{ 667 ,  {10.8 }} ,
				{ 669 ,  {10.5 }} ,
				{ 670 ,  {10.2 }} ,
				{ 671 ,  {9.6 }} ,
				{ 680 ,  {34.7 }} ,
				{ 681 ,  {34.9 }} ,
				{ 682 ,  {35.4 }} ,
				{ 684 ,  {36.2 }} ,
				{ 685 ,  {36.1 }} ,
				{ 686 ,  {33.4 }} ,
				{ 688 ,  {37.9 }} ,
				{ 689 ,  {37.3 }} ,
				{ 694 ,  {30.3 }} ,
				{ 695 ,  {30.7 }} ,
				{ 696 ,  {29. }} ,
				{ 697 ,  {32.2 }} ,
				{ 699 ,  {36. }} ,
				{ 704 ,  {32.7 }} ,
				{ 705 ,  {32.9 }} ,
				{ 706 ,  {33.3 }} ,
				{ 708 ,  {34.6 }} ,
				{ 709 ,  {33.8 }} ,
				{ 711 ,  {31. }} ,
				{ 713 ,  {31.7 }} ,
				{ 714 ,  {31.5 }} ,
				{ 716 ,  {25. }} ,
				{ 718 ,  {15. }} ,
				{ 719 ,  {17.8 }} ,
				{ 724 ,  {50. }} ,
				{ 727 ,  {43.1 }} ,
				{ 728 ,  {43.5 }} ,
				{ 729 ,  {42.3 }} ,
				{ 731 ,  {50. }} ,
				{ 733 ,  {48.8 }} ,
				{ 734 ,  {50. }} ,
				{ 741 ,  {46. }} ,
				{ 742 ,  {46.7 }} ,
				{ 745 ,  {44. }} ,
				{ 746 ,  {43.8 }} ,
				{ 748 ,  {44.8 }} ,
				{ 749 ,  {45.4 }} ,
				{ 751 ,  {41.7 }} ,
				{ 752 ,  {42.8 }} ,
				{ 753 ,  {38.7 }} ,
				{ 755 ,  {50. }} ,
				{ 756 ,  {50. }} ,
				{ 758 ,  {37.6 }} ,
				{ 759 ,  {39.8 }} ,
				{ 760 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
			int lNodeIndex = (scaler_output_7 <= 1.0075204372406006) ? ( (scaler_output_14 <= 0.3004233241081238) ? ( (scaler_output_7 <= 0.3439619392156601) ? ( (scaler_output_9 <= -1.2385239005088806) ? ( 4 ) : ( (scaler_output_14 <= -0.6789377927780151) ? ( (scaler_output_9 <= 0.3076174259185791) ? ( (scaler_output_6 <= -0.8356659114360809) ? ( 8 ) : ( (scaler_output_13 <= 0.18147635273635387) ? ( (scaler_output_8 <= 1.0121712684631348) ? ( (scaler_output_6 <= 0.909976989030838) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) : ( (scaler_output_2 <= -0.3646405339241028) ? ( (scaler_output_13 <= 0.41463376581668854) ? ( (scaler_output_9 <= -0.09665841422975063) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_10 <= -0.6941851377487183) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) ) : ( (scaler_output_14 <= -0.6942838728427887) ? ( (scaler_output_12 <= 0.5726628303527832) ? ( (scaler_output_11 <= -0.8469608724117279) ? ( (scaler_output_7 <= -0.15459215641021729) ? ( 28 ) : ( (scaler_output_2 <= -0.41085946559906006) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_7 <= 0.11380557715892792) ? ( (scaler_output_2 <= -0.41946254670619965) ? ( (scaler_output_2 <= -0.41964191198349) ? ( (scaler_output_11 <= -0.5701415985822678) ? ( 36 ) : ( (scaler_output_14 <= -0.9175001084804535) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) : ( (scaler_output_3 <= 2.5999269485473633) ? ( (scaler_output_7 <= 0.020326681435108185) ? ( (scaler_output_14 <= -0.8344915807247162) ? ( (scaler_output_4 <= -0.2770143635571003) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_10 <= -0.5223402976989746) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_11 <= -0.6820472478866577) ? ( 51 ) : ( (scaler_output_11 <= -0.47296035289764404) ? ( 53 ) : ( (scaler_output_4 <= -1.209140419960022) ? ( 55 ) : ( 56 ) ) ) ) ) : ( 57 ) ) ) : ( (scaler_output_13 <= 0.39687255024909973) ? ( (scaler_output_2 <= -0.4178476631641388) ? ( 60 ) : ( (scaler_output_4 <= -0.45669247582554817) ? ( (scaler_output_8 <= -1.9461240768432617) ? ( 63 ) : ( 64 ) ) : ( 65 ) ) ) : ( (scaler_output_9 <= 0.3873691111803055) ? ( 67 ) : ( (scaler_output_2 <= -0.3940838724374771) ? ( (scaler_output_3 <= 1.7110437899827957) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) ) ) ) ) : ( (scaler_output_2 <= -0.41865573823451996) ? ( 74 ) : ( (scaler_output_11 <= -0.6496535241603851) ? ( 76 ) : ( (scaler_output_14 <= -0.8854127824306488) ? ( 78 ) : ( 79 ) ) ) ) ) : ( 80 ) ) ) : ( (scaler_output_7 <= -0.3762504309415817) ? ( (scaler_output_7 <= -0.38333216309547424) ? ( (scaler_output_9 <= -1.1802685856819153) ? ( 84 ) : ( (scaler_output_13 <= 0.3210839778184891) ? ( (scaler_output_4 <= -0.092202577739954) ? ( (scaler_output_11 <= -0.590755820274353) ? ( (scaler_output_10 <= -0.4077770560979843) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_12 <= -0.2580581158399582) ? ( 92 ) : ( (scaler_output_9 <= 2.6176934242248535) ? ( (scaler_output_13 <= 0.18473074957728386) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) ) ) : ( (scaler_output_9 <= -1.0216012001037598) ? ( (scaler_output_14 <= 0.010242253541946411) ? ( (scaler_output_7 <= -1.2954595386981964) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) : ( (scaler_output_14 <= 0.240433968603611) ? ( (scaler_output_13 <= -1.0899403095245361) ? ( 106 ) : ( (scaler_output_9 <= -0.9401536881923676) ? ( 108 ) : ( (scaler_output_9 <= 0.3276090957224369) ? ( (scaler_output_2 <= -0.27104148268699646) ? ( 111 ) : ( (scaler_output_2 <= -0.045648232102394104) ? ( 113 ) : ( 114 ) ) ) : ( 115 ) ) ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( 117 ) : ( 118 ) ) ) ) ) : ( (scaler_output_12 <= -0.719569742679596) ? ( (scaler_output_9 <= 0.9906300902366638) ? ( (scaler_output_6 <= -0.6831340342760086) ? ( 122 ) : ( (scaler_output_8 <= -0.3006501570343971) ? ( (scaler_output_11 <= -0.7056063413619995) ? ( 125 ) : ( 126 ) ) : ( (scaler_output_13 <= 0.40790435671806335) ? ( (scaler_output_13 <= 0.3798835575580597) ? ( 129 ) : ( (scaler_output_2 <= -0.27875275909900665) ? ( 131 ) : ( 132 ) ) ) : ( (scaler_output_8 <= 0.3450871892273426) ? ( 134 ) : ( 135 ) ) ) ) ) : ( (scaler_output_14 <= -0.5282668322324753) ? ( 137 ) : ( (scaler_output_9 <= 1.9566787481307983) ? ( (scaler_output_3 <= 1.411304123699665) ? ( 140 ) : ( 141 ) ) : ( 142 ) ) ) ) : ( (scaler_output_7 <= -0.7756602466106415) ? ( (scaler_output_10 <= -0.5796219110488892) ? ( (scaler_output_14 <= -0.17251601815223694) ? ( (scaler_output_9 <= 0.3002847502939403) ? ( 147 ) : ( 148 ) ) : ( (scaler_output_14 <= -0.09229769464582205) ? ( 150 ) : ( (scaler_output_3 <= 0.48107755929231644) ? ( 152 ) : ( 153 ) ) ) ) : ( (scaler_output_6 <= -0.2890932597219944) ? ( (scaler_output_10 <= -0.35049544274806976) ? ( 156 ) : ( 157 ) ) : ( (scaler_output_7 <= -0.8174424767494202) ? ( 159 ) : ( 160 ) ) ) ) : ( (scaler_output_8 <= -0.804076224565506) ? ( (scaler_output_7 <= -0.5823289155960083) ? ( (scaler_output_12 <= 0.01884886436164379) ? ( (scaler_output_3 <= 0.739473819732666) ? ( 165 ) : ( 166 ) ) : ( (scaler_output_8 <= -1.4462558031082153) ? ( 168 ) : ( (scaler_output_4 <= 0.657311886548996) ? ( (scaler_output_11 <= -0.2020308431237936) ? ( (scaler_output_11 <= -0.9117483496665955) ? ( 172 ) : ( (scaler_output_2 <= -0.4111506789922714) ? ( 174 ) : ( 175 ) ) ) : ( 176 ) ) : ( 177 ) ) ) ) : ( (scaler_output_2 <= -0.4047030657529831) ? ( (scaler_output_14 <= -0.10624870285391808) ? ( 180 ) : ( 181 ) ) : ( (scaler_output_8 <= -1.1189399063587189) ? ( 183 ) : ( 184 ) ) ) ) : ( (scaler_output_7 <= -0.3882893770933151) ? ( (scaler_output_13 <= 0.3701755404472351) ? ( (scaler_output_9 <= -0.532557874917984) ? ( 188 ) : ( (scaler_output_10 <= 0.45144718885421753) ? ( 190 ) : ( 191 ) ) ) : ( (scaler_output_9 <= -0.5931060910224915) ? ( (scaler_output_12 <= 0.572662815451622) ? ( 194 ) : ( 195 ) ) : ( (scaler_output_2 <= -0.38556015491485596) ? ( (scaler_output_6 <= 0.10071049258112907) ? ( (scaler_output_2 <= -0.4201262444257736) ? ( 199 ) : ( (scaler_output_7 <= -0.4980562776327133) ? ( (scaler_output_6 <= -0.5941570848226547) ? ( 202 ) : ( 203 ) ) : ( (scaler_output_9 <= 0.001556307077407837) ? ( (scaler_output_9 <= -0.49161913990974426) ? ( 206 ) : ( 207 ) ) : ( (scaler_output_14 <= -0.4340974986553192) ? ( 209 ) : ( 210 ) ) ) ) ) : ( 211 ) ) : ( (scaler_output_13 <= 0.41424764692783356) ? ( (scaler_output_9 <= 0.20808903872966766) ? ( 214 ) : ( 215 ) ) : ( (scaler_output_11 <= -0.590755820274353) ? ( 217 ) : ( 218 ) ) ) ) ) ) : ( 219 ) ) ) ) ) ) ) : ( 220 ) ) : ( (scaler_output_8 <= 0.04801243916153908) ? ( (scaler_output_8 <= -0.014248738065361977) ? ( (scaler_output_7 <= 0.2476503551006317) ? ( (scaler_output_2 <= -0.4089321196079254) ? ( (scaler_output_7 <= -0.005875736474990845) ? ( (scaler_output_9 <= 0.04739142954349518) ? ( (scaler_output_6 <= -0.5899200737476349) ? ( 228 ) : ( 229 ) ) : ( (scaler_output_3 <= -0.06672252714633942) ? ( (scaler_output_2 <= -0.41519850492477417) ? ( (scaler_output_7 <= -0.23319940268993378) ? ( 233 ) : ( 234 ) ) : ( 235 ) ) : ( (scaler_output_3 <= 0.553428515791893) ? ( 237 ) : ( 238 ) ) ) ) : ( (scaler_output_13 <= 0.4145234525203705) ? ( (scaler_output_12 <= -0.558040663599968) ? ( (scaler_output_13 <= 0.2797146663069725) ? ( 242 ) : ( 243 ) ) : ( (scaler_output_12 <= -0.1888313628733158) ? ( 245 ) : ( 246 ) ) ) : ( 247 ) ) ) : ( (scaler_output_6 <= -0.13656136393547058) ? ( (scaler_output_12 <= 0.43420933187007904) ? ( (scaler_output_2 <= -0.3891623765230179) ? ( (scaler_output_14 <= -0.4368877112865448) ? ( 252 ) : ( (scaler_output_12 <= 0.20345351099967957) ? ( 254 ) : ( 255 ) ) ) : ( (scaler_output_4 <= -0.7265763580799103) ? ( 257 ) : ( 258 ) ) ) : ( (scaler_output_7 <= -0.19354168698191643) ? ( 260 ) : ( 261 ) ) ) : ( (scaler_output_14 <= 0.048607539385557175) ? ( (scaler_output_14 <= -0.13554582744836807) ? ( 264 ) : ( 265 ) ) : ( 266 ) ) ) ) : ( 267 ) ) : ( 268 ) ) : ( (scaler_output_13 <= -1.356965385377407) ? ( 270 ) : ( (scaler_output_12 <= -0.558040663599968) ? ( (scaler_output_4 <= 0.8435904085636139) ? ( (scaler_output_8 <= 0.7257698178291321) ? ( 274 ) : ( 275 ) ) : ( 276 ) ) : ( (scaler_output_6 <= 1.5878965854644775) ? ( (scaler_output_8 <= 0.47138842940330505) ? ( (scaler_output_12 <= -0.14268020167946815) ? ( (scaler_output_14 <= -0.551983579993248) ? ( 281 ) : ( (scaler_output_14 <= -0.33295266330242157) ? ( 283 ) : ( (scaler_output_9 <= -0.3378242701292038) ? ( 285 ) : ( 286 ) ) ) ) : ( (scaler_output_11 <= -0.24620412848889828) ? ( (scaler_output_2 <= -0.40905459225177765) ? ( 289 ) : ( 290 ) ) : ( 291 ) ) ) : ( (scaler_output_13 <= 0.324724480509758) ? ( (scaler_output_4 <= -0.38628798723220825) ? ( 294 ) : ( (scaler_output_12 <= 1.2187790870666504) ? ( (scaler_output_11 <= 0.7020491883158684) ? ( 297 ) : ( 298 ) ) : ( 299 ) ) ) : ( (scaler_output_13 <= 0.37155452370643616) ? ( (scaler_output_2 <= -0.14505870081484318) ? ( (scaler_output_9 <= -0.22176752984523773) ? ( 303 ) : ( 304 ) ) : ( 305 ) ) : ( (scaler_output_13 <= 0.39455586671829224) ? ( (scaler_output_10 <= 0.5660104155540466) ? ( 308 ) : ( 309 ) ) : ( (scaler_output_13 <= 0.40553252398967743) ? ( (scaler_output_10 <= -0.5796219110488892) ? ( 312 ) : ( 313 ) ) : ( (scaler_output_2 <= 0.41677238047122955) ? ( (scaler_output_11 <= 0.027670271694660187) ? ( 316 ) : ( (scaler_output_6 <= 0.9692949652671814) ? ( 318 ) : ( 319 ) ) ) : ( 320 ) ) ) ) ) ) ) : ( (scaler_output_7 <= -0.054031528532505035) ? ( (scaler_output_7 <= -0.2544446140527725) ? ( 323 ) : ( 324 ) ) : ( 325 ) ) ) ) ) ) ) ) ) : ( (scaler_output_9 <= -1.020430862903595) ? ( 327 ) : ( (scaler_output_14 <= -1.006089061498642) ? ( (scaler_output_7 <= 0.6966322958469391) ? ( (scaler_output_6 <= -0.25519728660583496) ? ( (scaler_output_14 <= -1.1156044602394104) ? ( (scaler_output_6 <= -0.9500648677349091) ? ( (scaler_output_11 <= -0.867575079202652) ? ( (scaler_output_9 <= 2.36171892285347) ? ( 335 ) : ( 336 ) ) : ( (scaler_output_7 <= 0.3977831155061722) ? ( 338 ) : ( 339 ) ) ) : ( 340 ) ) : ( (scaler_output_14 <= -1.020737648010254) ? ( (scaler_output_4 <= -0.7412439584732056) ? ( (scaler_output_4 <= -0.8915868699550629) ? ( 344 ) : ( 345 ) ) : ( 346 ) ) : ( 347 ) ) ) : ( (scaler_output_12 <= -0.7195697580464184) ? ( 349 ) : ( 350 ) ) ) : ( (scaler_output_4 <= -1.0815322995185852) ? ( (scaler_output_14 <= -1.1679207682609558) ? ( (scaler_output_13 <= 0.39036378264427185) ? ( 354 ) : ( 355 ) ) : ( (scaler_output_13 <= 0.2931734770536423) ? ( 357 ) : ( (scaler_output_8 <= -1.1794221997261047) ? ( (scaler_output_8 <= -1.5689992308616638) ? ( 360 ) : ( 361 ) ) : ( 362 ) ) ) ) : ( (scaler_output_12 <= -0.027302294969558716) ? ( (scaler_output_8 <= -1.4231302738189697) ? ( 365 ) : ( (scaler_output_7 <= 0.80002561211586) ? ( 367 ) : ( 368 ) ) ) : ( (scaler_output_3 <= 1.6076852828264236) ? ( 370 ) : ( 371 ) ) ) ) ) : ( (scaler_output_12 <= 1.1726279258728027) ? ( (scaler_output_9 <= 0.07091805757954717) ? ( (scaler_output_4 <= -0.5285637378692627) ? ( (scaler_output_7 <= 0.8078155219554901) ? ( (scaler_output_12 <= -0.23498252034187317) ? ( (scaler_output_4 <= -1.0675981044769287) ? ( (scaler_output_6 <= -0.7763479650020599) ? ( 379 ) : ( 380 ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( (scaler_output_8 <= 0.34686607867479324) ? ( 383 ) : ( (scaler_output_10 <= -0.35049544274806976) ? ( 385 ) : ( 386 ) ) ) : ( 387 ) ) ) : ( (scaler_output_8 <= -0.12987663224339485) ? ( 389 ) : ( 390 ) ) ) : ( (scaler_output_4 <= -0.9062544703483582) ? ( 392 ) : ( (scaler_output_2 <= -0.362820029258728) ? ( 394 ) : ( 395 ) ) ) ) : ( (scaler_output_6 <= -0.047584418207407) ? ( (scaler_output_7 <= 0.6605154573917389) ? ( (scaler_output_12 <= -0.14268019841983914) ? ( 399 ) : ( (scaler_output_6 <= -0.13656136393547058) ? ( 401 ) : ( 402 ) ) ) : ( 403 ) ) : ( (scaler_output_8 <= 0.30239380383864045) ? ( 405 ) : ( 406 ) ) ) ) : ( (scaler_output_10 <= -0.5796219110488892) ? ( (scaler_output_8 <= -1.2470200061798096) ? ( 409 ) : ( (scaler_output_7 <= 0.4112384021282196) ? ( 411 ) : ( 412 ) ) ) : ( (scaler_output_9 <= 1.4363462328910828) ? ( (scaler_output_12 <= -0.6503430008888245) ? ( 415 ) : ( (scaler_output_2 <= -0.3900454342365265) ? ( 417 ) : ( 418 ) ) ) : ( (scaler_output_4 <= -0.7911137938499451) ? ( (scaler_output_9 <= 1.9511613845825195) ? ( (scaler_output_8 <= -1.163412183523178) ? ( 422 ) : ( 423 ) ) : ( 424 ) ) : ( 425 ) ) ) ) ) : ( (scaler_output_2 <= -0.4164571613073349) ? ( 427 ) : ( (scaler_output_11 <= -0.6820472776889801) ? ( (scaler_output_14 <= -0.6349920928478241) ? ( 430 ) : ( 431 ) ) : ( 432 ) ) ) ) ) ) ) : ( (scaler_output_6 <= 0.4142483025789261) ? ( (scaler_output_2 <= -0.3549475222826004) ? ( (scaler_output_8 <= 0.19388148188591003) ? ( (scaler_output_13 <= 0.4050360918045044) ? ( (scaler_output_14 <= 0.45248936116695404) ? ( (scaler_output_10 <= -0.46505868434906006) ? ( 439 ) : ( 440 ) ) : ( (scaler_output_9 <= -0.09544028341770172) ? ( (scaler_output_2 <= -0.39488694071769714) ? ( 443 ) : ( 444 ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( 446 ) : ( 447 ) ) ) ) : ( (scaler_output_11 <= -0.11368428170681) ? ( (scaler_output_11 <= -0.8086773455142975) ? ( 450 ) : ( 451 ) ) : ( 452 ) ) ) : ( (scaler_output_2 <= -0.4057367295026779) ? ( (scaler_output_2 <= -0.40684664249420166) ? ( (scaler_output_13 <= 0.2245555892586708) ? ( 456 ) : ( (scaler_output_12 <= 0.7341918796300888) ? ( 458 ) : ( 459 ) ) ) : ( 460 ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( (scaler_output_14 <= 0.8284691572189331) ? ( (scaler_output_4 <= -0.15087298303842545) ? ( (scaler_output_4 <= -0.17434114962816238) ? ( 465 ) : ( 466 ) ) : ( (scaler_output_9 <= -0.6278347373008728) ? ( 468 ) : ( 469 ) ) ) : ( (scaler_output_8 <= 1.0121712684631348) ? ( (scaler_output_9 <= 0.93622025847435) ? ( (scaler_output_4 <= 0.7768527567386627) ? ( 473 ) : ( 474 ) ) : ( (scaler_output_2 <= -0.39424824714660645) ? ( 476 ) : ( 477 ) ) ) : ( (scaler_output_4 <= 0.8472572416067123) ? ( 479 ) : ( 480 ) ) ) ) : ( (scaler_output_7 <= -0.8740963339805603) ? ( (scaler_output_9 <= -0.023809462785720825) ? ( 483 ) : ( 484 ) ) : ( 485 ) ) ) ) ) : ( (scaler_output_7 <= 0.6449356377124786) ? ( (scaler_output_8 <= 0.10493694245815277) ? ( (scaler_output_7 <= -0.8471857905387878) ? ( 489 ) : ( 490 ) ) : ( (scaler_output_8 <= 0.5300918221473694) ? ( 492 ) : ( (scaler_output_14 <= 1.1849175095558167) ? ( (scaler_output_13 <= 0.2023816481232643) ? ( (scaler_output_7 <= -1.4278879761695862) ? ( 496 ) : ( (scaler_output_2 <= 0.6099968552589417) ? ( (scaler_output_7 <= -0.9194194674491882) ? ( (scaler_output_14 <= 0.970071941614151) ? ( (scaler_output_11 <= 0.47529295086860657) ? ( 501 ) : ( 502 ) ) : ( 503 ) ) : ( (scaler_output_2 <= -0.2513979971408844) ? ( 505 ) : ( 506 ) ) ) : ( 507 ) ) ) : ( (scaler_output_9 <= 0.34440018236637115) ? ( (scaler_output_7 <= -0.37695861607789993) ? ( 510 ) : ( 511 ) ) : ( 512 ) ) ) : ( (scaler_output_7 <= -0.3068494498729706) ? ( (scaler_output_14 <= 1.567175269126892) ? ( 515 ) : ( (scaler_output_2 <= 1.2141359150409698) ? ( 517 ) : ( 518 ) ) ) : ( (scaler_output_6 <= 0.30832336843013763) ? ( 520 ) : ( 521 ) ) ) ) ) ) : ( 522 ) ) ) : ( (scaler_output_2 <= 0.8094890117645264) ? ( (scaler_output_14 <= 0.8731123805046082) ? ( (scaler_output_14 <= 0.8521858751773834) ? ( (scaler_output_2 <= 0.32292649149894714) ? ( (scaler_output_14 <= 0.6798908710479736) ? ( (scaler_output_7 <= -0.8932170569896698) ? ( (scaler_output_8 <= 1.0370757281780243) ? ( 530 ) : ( 531 ) ) : ( (scaler_output_8 <= 0.562111884355545) ? ( 533 ) : ( (scaler_output_14 <= 0.6394329369068146) ? ( (scaler_output_13 <= -0.42229484021663666) ? ( (scaler_output_13 <= -2.387281656265259) ? ( 537 ) : ( 538 ) ) : ( (scaler_output_8 <= 0.9961612522602081) ? ( 540 ) : ( (scaler_output_6 <= 1.0836938619613647) ? ( (scaler_output_2 <= -0.3689720630645752) ? ( 543 ) : ( 544 ) ) : ( 545 ) ) ) ) : ( 546 ) ) ) ) : ( (scaler_output_13 <= 0.4111587405204773) ? ( (scaler_output_14 <= 0.7587140798568726) ? ( 549 ) : ( (scaler_output_8 <= 0.8823122382164001) ? ( 551 ) : ( 552 ) ) ) : ( 553 ) ) ) : ( (scaler_output_5 <= 1.6589429825544357) ? ( (scaler_output_13 <= -3.897426962852478) ? ( (scaler_output_2 <= 0.5081534683704376) ? ( 557 ) : ( 558 ) ) : ( (scaler_output_9 <= -0.9648029208183289) ? ( 560 ) : ( (scaler_output_13 <= 0.411324217915535) ? ( (scaler_output_9 <= -0.9168420433998108) ? ( 563 ) : ( (scaler_output_13 <= -0.023825719952583313) ? ( (scaler_output_7 <= 0.030949282343499362) ? ( 566 ) : ( 567 ) ) : ( 568 ) ) ) : ( 569 ) ) ) ) : ( 570 ) ) ) : ( 571 ) ) : ( (scaler_output_6 <= 1.4607866406440735) ? ( (scaler_output_12 <= 0.8034186363220215) ? ( 574 ) : ( (scaler_output_6 <= 1.0243759155273438) ? ( (scaler_output_14 <= 1.410923957824707) ? ( 577 ) : ( (scaler_output_2 <= -0.3042064309120178) ? ( 579 ) : ( 580 ) ) ) : ( (scaler_output_14 <= 0.9791401028633118) ? ( (scaler_output_2 <= 0.4131457805633545) ? ( (scaler_output_13 <= -1.7065084874629974) ? ( 584 ) : ( 585 ) ) : ( 586 ) ) : ( (scaler_output_8 <= 1.1242413520812988) ? ( (scaler_output_2 <= 0.5157047659158707) ? ( 589 ) : ( (scaler_output_7 <= -0.33376002684235573) ? ( 591 ) : ( 592 ) ) ) : ( (scaler_output_14 <= 1.597867488861084) ? ( (scaler_output_9 <= -1.0557804703712463) ? ( 595 ) : ( 596 ) ) : ( 597 ) ) ) ) ) ) : ( (scaler_output_13 <= 0.3359769284725189) ? ( (scaler_output_9 <= -1.0949755907058716) ? ( (scaler_output_9 <= -1.121368408203125) ? ( 601 ) : ( 602 ) ) : ( (scaler_output_13 <= 0.14446462178602815) ? ( 604 ) : ( 605 ) ) ) : ( (scaler_output_7 <= -1.9611425995826721) ? ( 607 ) : ( (scaler_output_10 <= 0.5660104155540466) ? ( (scaler_output_9 <= -1.1718611121177673) ? ( 610 ) : ( (scaler_output_14 <= 2.1412594318389893) ? ( 612 ) : ( 613 ) ) ) : ( 614 ) ) ) ) ) ) : ( (scaler_output_14 <= 0.755226343870163) ? ( (scaler_output_8 <= 1.024623453617096) ? ( (scaler_output_2 <= 6.005936026573181) ? ( (scaler_output_13 <= -1.255472645163536) ? ( 619 ) : ( (scaler_output_13 <= 0.37872521579265594) ? ( 621 ) : ( 622 ) ) ) : ( 623 ) ) : ( (scaler_output_9 <= -0.8623127937316895) ? ( 625 ) : ( 626 ) ) ) : ( (scaler_output_6 <= 1.0243759155273438) ? ( (scaler_output_14 <= 1.3788366317749023) ? ( 629 ) : ( (scaler_output_9 <= -1.172434389591217) ? ( (scaler_output_13 <= 0.23806956969201565) ? ( 632 ) : ( 633 ) ) : ( 634 ) ) ) : ( (scaler_output_6 <= 1.2065668106079102) ? ( (scaler_output_6 <= 1.1175898313522339) ? ( (scaler_output_8 <= 0.7862521111965179) ? ( 638 ) : ( (scaler_output_2 <= 1.2441092729568481) ? ( 640 ) : ( 641 ) ) ) : ( (scaler_output_9 <= -1.1259065866470337) ? ( 643 ) : ( (scaler_output_14 <= 1.5232295989990234) ? ( 645 ) : ( (scaler_output_9 <= -1.0491883158683777) ? ( (scaler_output_13 <= 0.10094410926103592) ? ( 648 ) : ( 649 ) ) : ( 650 ) ) ) ) ) : ( (scaler_output_2 <= 0.9968658089637756) ? ( (scaler_output_8 <= 0.9552467167377472) ? ( 653 ) : ( 654 ) ) : ( (scaler_output_8 <= 0.8680810630321503) ? ( (scaler_output_13 <= -0.18770334124565125) ? ( (scaler_output_2 <= 1.6858564019203186) ? ( 658 ) : ( 659 ) ) : ( 660 ) ) : ( (scaler_output_13 <= -3.7505383491516113) ? ( 662 ) : ( (scaler_output_7 <= -0.20062343031167984) ? ( (scaler_output_2 <= 1.0994766354560852) ? ( 665 ) : ( (scaler_output_8 <= 1.0833268761634827) ? ( 667 ) : ( (scaler_output_14 <= 2.347036838531494) ? ( 669 ) : ( 670 ) ) ) ) : ( 671 ) ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_7 <= 1.611592411994934) ? ( (scaler_output_10 <= 0.7378552705049515) ? ( (scaler_output_11 <= -0.8705199658870697) ? ( (scaler_output_2 <= -0.4145510643720627) ? ( (scaler_output_2 <= -0.41516414284706116) ? ( (scaler_output_14 <= -1.0542200207710266) ? ( (scaler_output_13 <= 0.41253772377967834) ? ( (scaler_output_2 <= -0.42036372423171997) ? ( 680 ) : ( 681 ) ) : ( 682 ) ) : ( (scaler_output_7 <= 1.2638792395591736) ? ( 684 ) : ( 685 ) ) ) : ( 686 ) ) : ( (scaler_output_9 <= 0.042423367500305176) ? ( 688 ) : ( 689 ) ) ) : ( (scaler_output_7 <= 1.1640267968177795) ? ( (scaler_output_3 <= 3.0133609771728516) ? ( (scaler_output_9 <= 1.7906787395477295) ? ( (scaler_output_2 <= -0.3721499443054199) ? ( 694 ) : ( 695 ) ) : ( 696 ) ) : ( 697 ) ) : ( (scaler_output_9 <= -0.8756883442401886) ? ( 699 ) : ( (scaler_output_7 <= 1.4274672865867615) ? ( (scaler_output_14 <= -0.9168025553226471) ? ( (scaler_output_2 <= -0.4205505847930908) ? ( (scaler_output_12 <= -0.9964767396450043) ? ( 704 ) : ( 705 ) ) : ( 706 ) ) : ( (scaler_output_10 <= -0.6941851377487183) ? ( 708 ) : ( 709 ) ) ) : ( (scaler_output_7 <= 1.477747619152069) ? ( 711 ) : ( (scaler_output_2 <= -0.3632487654685974) ? ( 713 ) : ( 714 ) ) ) ) ) ) ) : ( (scaler_output_2 <= 0.44946736097335815) ? ( 716 ) : ( (scaler_output_7 <= 1.492619276046753) ? ( 718 ) : ( 719 ) ) ) ) : ( (scaler_output_12 <= 0.572662815451622) ? ( (scaler_output_12 <= -1.6656686067581177) ? ( (scaler_output_7 <= 2.04428631067276) ? ( (scaler_output_3 <= -0.08739423751831055) ? ( 724 ) : ( (scaler_output_13 <= 0.3801593482494354) ? ( (scaler_output_13 <= 0.3414928466081619) ? ( 727 ) : ( 728 ) ) : ( 729 ) ) ) : ( (scaler_output_7 <= 2.956413745880127) ? ( 731 ) : ( (scaler_output_2 <= -0.3534438908100128) ? ( 733 ) : ( 734 ) ) ) ) : ( (scaler_output_8 <= 0.5443229377269745) ? ( (scaler_output_14 <= -1.1574575304985046) ? ( (scaler_output_14 <= -1.1790816187858582) ? ( (scaler_output_2 <= -0.3814048618078232) ? ( (scaler_output_13 <= 0.2526315748691559) ? ( (scaler_output_6 <= -0.6835577189922333) ? ( 741 ) : ( 742 ) ) : ( (scaler_output_10 <= -0.6369035243988037) ? ( (scaler_output_7 <= 1.8948617577552795) ? ( 745 ) : ( 746 ) ) : ( (scaler_output_3 <= -0.08739423751831055) ? ( 748 ) : ( 749 ) ) ) ) : ( (scaler_output_13 <= 0.36432869732379913) ? ( 751 ) : ( 752 ) ) ) : ( 753 ) ) : ( (scaler_output_9 <= -0.3692806661128998) ? ( 755 ) : ( 756 ) ) ) : ( (scaler_output_13 <= 0.3650457561016083) ? ( 758 ) : ( 759 ) ) ) ) : ( 760 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
			int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/boston.csv");
	return 0;
}
