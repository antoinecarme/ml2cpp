// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor_Pipeline
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_Pipeline_RandomReg_10.exe ml2cpp-demo_DecisionTreeRegressor_Pipeline_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.16680947298137394 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( -0.16351271994443456 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.19149292241003152 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.058384844753055345 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.09933205162122274 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.21293121660488037 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.047865568690029614 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.05078698959084227 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -0.1913199225908187 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.19940405677473352 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.16680947298137394 ) / 1.0289835997047314 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - -0.16351271994443456 ) / 0.9915812535046814 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.19149292241003152 ) / 0.9321147629147756 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.058384844753055345 ) / 1.0855729329506805 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.09933205162122274 ) / 1.0743904412882828 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.21293121660488037 ) / 0.9358074381886248 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.047865568690029614 ) / 1.1363574090613386 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.05078698959084227 ) / 0.9725457460098452 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -0.1913199225908187 ) / 1.1415974677936562 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.19940405677473352 ) / 0.882245682091319 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-230.73613628 }} ,
				{ 7 ,  {-284.89041043 }} ,
				{ 8 ,  {-305.67509721 }} ,
				{ 13 ,  {-103.03861457 }} ,
				{ 14 ,  {-101.20974879 }} ,
				{ 15 ,  {-53.5585581 }} ,
				{ 16 ,  {-165.64587305 }} ,
				{ 18 ,  {-186.24037603 }} ,
				{ 19 ,  {-210.3549175 }} ,
				{ 21 ,  {-351.38429309 }} ,
				{ 23 ,  {-422.390294 }} ,
				{ 24 ,  {-459.03067075 }} ,
				{ 31 ,  {-251.2683419 }} ,
				{ 32 ,  {-237.150375 }} ,
				{ 34 ,  {-223.26828856 }} ,
				{ 36 ,  {-140.83123535 }} ,
				{ 40 ,  {-182.68535868 }} ,
				{ 41 ,  {-182.33200566 }} ,
				{ 42 ,  {-181.51172981 }} ,
				{ 43 ,  {-168.02760852 }} ,
				{ 44 ,  {-80.36713173 }} ,
				{ 46 ,  {11.97984848 }} ,
				{ 47 ,  {-49.96946031 }} ,
				{ 52 ,  {-154.40083699 }} ,
				{ 53 ,  {-130.20856672 }} ,
				{ 54 ,  {-97.81389434 }} ,
				{ 55 ,  {44.29871811 }} ,
				{ 61 ,  {-9.61795807 }} ,
				{ 62 ,  {-6.19072274 }} ,
				{ 64 ,  {3.07608881 }} ,
				{ 65 ,  {-1.77890863 }} ,
				{ 67 ,  {-33.10367735 }} ,
				{ 68 ,  {-20.2700101 }} ,
				{ 69 ,  {26.98702516 }} ,
				{ 70 ,  {58.89206445 }} ,
				{ 75 ,  {-32.37006064 }} ,
				{ 76 ,  {-33.33701473 }} ,
				{ 77 ,  {23.51174878 }} ,
				{ 79 ,  {-8.54151458 }} ,
				{ 81 ,  {60.83005802 }} ,
				{ 84 ,  {133.87071389 }} ,
				{ 85 ,  {116.88919618 }} ,
				{ 86 ,  {156.7480822 }} ,
				{ 89 ,  {198.97164294 }} ,
				{ 90 ,  {58.56592202 }} ,
				{ 93 ,  {320.68265233 }} ,
				{ 95 ,  {393.26109279 }} ,
				{ 96 ,  {360.61572443 }} ,
				{ 98 ,  {239.63425512 }} ,
				{ 99 ,  {243.63801062 }} ,
				{ 103 ,  {-298.79907559 }} ,
				{ 104 ,  {-268.19043239 }} ,
				{ 106 ,  {8.92365624 }} ,
				{ 107 ,  {-20.42352874 }} ,
				{ 112 ,  {-67.71218597 }} ,
				{ 113 ,  {-27.42654029 }} ,
				{ 115 ,  {131.03680508 }} ,
				{ 117 ,  {62.64480581 }} ,
				{ 119 ,  {37.34665341 }} ,
				{ 120 ,  {38.71263785 }} ,
				{ 122 ,  {277.98128451 }} ,
				{ 123 ,  {250.1827601 }} ,
				{ 126 ,  {-9.18516091 }} ,
				{ 128 ,  {144.42445426 }} ,
				{ 129 ,  {156.85798347 }} ,
				{ 136 ,  {259.87552026 }} ,
				{ 137 ,  {290.7091541 }} ,
				{ 139 ,  {235.32017089 }} ,
				{ 140 ,  {228.58868552 }} ,
				{ 142 ,  {194.40871671 }} ,
				{ 143 ,  {191.55215494 }} ,
				{ 144 ,  {113.44087953 }} ,
				{ 147 ,  {325.07388162 }} ,
				{ 148 ,  {316.51213779 }} ,
				{ 149 ,  {349.42168234 }} ,
				{ 152 ,  {248.55956548 }} ,
				{ 154 ,  {310.60889078 }} ,
				{ 155 ,  {351.37130796 }} ,
				{ 157 ,  {447.69098355 }} ,
				{ 158 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			int lNodeIndex = (scaler_output_4 <= 0.3164803087711334) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_3 <= -0.7177466005086899) ? ( (scaler_output_2 <= 0.33083289861679077) ? ( 5 ) : ( (scaler_output_7 <= -1.963046133518219) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_6 <= 0.7692941427230835) ? ( (scaler_output_4 <= -0.6605803668498993) ? ( (scaler_output_9 <= 0.3978204280138016) ? ( (scaler_output_7 <= -1.334725260734558) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( 16 ) ) : ( (scaler_output_10 <= -0.3202183395624161) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_7 <= -1.0613932013511658) ? ( 21 ) : ( (scaler_output_10 <= -0.48439231514930725) ? ( 23 ) : ( 24 ) ) ) ) : ( (scaler_output_10 <= 0.0714151170104742) ? ( (scaler_output_9 <= -0.12918776273727417) ? ( (scaler_output_6 <= 1.1587401032447815) ? ( (scaler_output_8 <= 1.317533552646637) ? ( (scaler_output_6 <= -1.5817909240722656) ? ( (scaler_output_6 <= -2.201444387435913) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_3 <= -1.2438821196556091) ? ( 34 ) : ( (scaler_output_3 <= -0.8021413683891296) ? ( 36 ) : ( (scaler_output_7 <= 0.3380957245826721) ? ( (scaler_output_4 <= -0.5696532644797117) ? ( (scaler_output_4 <= -1.6052964925765991) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) : ( 43 ) ) ) ) ) : ( 44 ) ) : ( (scaler_output_6 <= 1.257279396057129) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_8 <= -0.35871870070695877) ? ( (scaler_output_11 <= 0.607516348361969) ? ( (scaler_output_9 <= 0.47537729144096375) ? ( (scaler_output_2 <= 0.13938242197036743) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( 55 ) ) : ( (scaler_output_10 <= -0.3065993934869766) ? ( (scaler_output_11 <= 0.8341266810894012) ? ( (scaler_output_6 <= 0.010669440031051636) ? ( (scaler_output_8 <= 0.9184818863868713) ? ( (scaler_output_10 <= -0.5493690818548203) ? ( 61 ) : ( 62 ) ) : ( (scaler_output_9 <= 0.2857746034860611) ? ( 64 ) : ( 65 ) ) ) : ( (scaler_output_10 <= -1.082410603761673) ? ( 67 ) : ( 68 ) ) ) : ( 69 ) ) : ( 70 ) ) ) ) : ( (scaler_output_9 <= 0.569673478603363) ? ( (scaler_output_3 <= -0.29702640559116844) ? ( (scaler_output_11 <= -0.4948740005493164) ? ( (scaler_output_9 <= -1.24036006629467) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( (scaler_output_6 <= -0.7899761199951172) ? ( 79 ) : ( (scaler_output_5 <= -0.956656813621521) ? ( 81 ) : ( (scaler_output_2 <= 0.4537719711661339) ? ( (scaler_output_9 <= -0.9088812470436096) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) ) ) ) : ( (scaler_output_7 <= 0.3365010544657707) ? ( (scaler_output_11 <= 0.4103095531463623) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_2 <= 1.1555396020412445) ? ( (scaler_output_7 <= 0.79535973072052) ? ( 93 ) : ( (scaler_output_9 <= 1.2210365533828735) ? ( 95 ) : ( 96 ) ) ) : ( (scaler_output_10 <= 0.9776389226317406) ? ( 98 ) : ( 99 ) ) ) ) ) ) ) : ( (scaler_output_6 <= -1.0221788585186005) ? ( (scaler_output_7 <= -0.11237061023712158) ? ( (scaler_output_6 <= -1.7460159659385681) ? ( 103 ) : ( 104 ) ) : ( (scaler_output_5 <= -0.1518235206604004) ? ( 106 ) : ( 107 ) ) ) : ( (scaler_output_2 <= -0.463795930147171) ? ( (scaler_output_4 <= 0.977769523859024) ? ( (scaler_output_6 <= 0.041269391775131226) ? ( (scaler_output_7 <= 0.15888750553131104) ? ( 112 ) : ( 113 ) ) : ( (scaler_output_8 <= -0.0898318886756897) ? ( 115 ) : ( (scaler_output_7 <= -0.18972327187657356) ? ( 117 ) : ( (scaler_output_6 <= 0.7980792224407196) ? ( 119 ) : ( 120 ) ) ) ) ) : ( (scaler_output_4 <= 1.2217498421669006) ? ( 122 ) : ( 123 ) ) ) : ( (scaler_output_10 <= -0.21233266219496727) ? ( (scaler_output_8 <= -0.654775895178318) ? ( 126 ) : ( (scaler_output_6 <= -0.25074687600135803) ? ( 128 ) : ( 129 ) ) ) : ( (scaler_output_7 <= 0.3357412964105606) ? ( (scaler_output_11 <= 0.48072102665901184) ? ( (scaler_output_9 <= 1.5352041721343994) ? ( (scaler_output_4 <= 1.4933378100395203) ? ( (scaler_output_6 <= -0.3097866177558899) ? ( (scaler_output_10 <= 1.3090230226516724) ? ( 136 ) : ( 137 ) ) : ( (scaler_output_7 <= -1.1656374633312225) ? ( 139 ) : ( 140 ) ) ) : ( (scaler_output_9 <= -0.4696799535304308) ? ( 142 ) : ( 143 ) ) ) : ( 144 ) ) : ( (scaler_output_7 <= -0.22929173707962036) ? ( (scaler_output_11 <= 1.1373028010129929) ? ( 147 ) : ( 148 ) ) : ( 149 ) ) ) : ( (scaler_output_2 <= 0.8268659729510546) ? ( (scaler_output_11 <= -0.3948664218187332) ? ( 152 ) : ( (scaler_output_6 <= 1.2129582464694977) ? ( 154 ) : ( 155 ) ) ) : ( (scaler_output_9 <= 0.7151849269866943) ? ( 157 ) : ( 158 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
