// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_linear
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_linear_digits.exe ml2cpp-demo_SVC_linear_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace pb_0_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_1 = { 
		0.0002157233688745452 ,0.0006684326038581735 ,0.0 ,0.0 ,0.001203533494444335 ,-0.0 ,-0.00029696252046124876 ,-0.0004711342192889375 ,-0.0005244575837658869 ,-0.0007951351436609804 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_1 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		};
		
	
		double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs ) + -0.09230975111148453;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_1 = linear_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs ) + -0.09230975111148453;
	
			std::any lLogistic_0_1 = logistic(-1.8893071203578997 * lDotProduct_0_1 + 0.13270825430735406);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_1,
				lDotProduct_0_1 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_1,
				1.0 - lLogistic_0_1 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_1
	

	namespace pb_0_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_2 = { 
		0.0001867586212317137 ,0.00015510097424376712 ,0.0001538463760981064 ,0.0006203297185555331 ,0.000651774640177684 ,-0.0006521650599985614 ,-0.00012411197111541553 ,-0.0009915332991928276 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_2 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		};
		
	
		double get_problem_0_2_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs ) + -0.06500103029459099;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_2",
				"Proba_0", "Proba_2",
				"LogProba_0", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_2 = linear_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs ) + -0.06500103029459099;
	
			std::any lLogistic_0_2 = logistic(-2.0759574974863604 * lDotProduct_0_2 + 0.2720964922817906);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_2,
				lDotProduct_0_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_2,
				1.0 - lLogistic_0_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_2
	

	namespace pb_0_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_3 = { 
		0.0 ,0.000640492477504085 ,0.0 ,0.000513929417208788 ,0.00021022208762975996 ,-0.0002833560520753111 ,-2.0409563153294607e-05 ,-0.0005612829967201011 ,-0.0004995953703939264 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_3 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_0_3_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs ) + 0.20752413304288972;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_3",
				"Proba_0", "Proba_3",
				"LogProba_0", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_3 = linear_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs ) + 0.20752413304288972;
	
			std::any lLogistic_0_3 = logistic(-2.1027732924379956 * lDotProduct_0_3 + 0.17244226144351676);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_3,
				lDotProduct_0_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_3,
				1.0 - lLogistic_0_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_3
	

	namespace pb_0_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_4 = { 
		0.0003834532544140012 ,0.0001889237338408242 ,0.0 ,9.33530748540802e-05 ,0.0026286086923542856 ,-4.456826940090863e-05 ,-0.0012117636718302972 ,-0.002038006814231985 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_4 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_4_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs ) + -0.14699151144658446;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_4",
				"Proba_0", "Proba_4",
				"LogProba_0", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_4 = linear_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs ) + -0.14699151144658446;
	
			std::any lLogistic_0_4 = logistic(-1.7219708801987297 * lDotProduct_0_4 + 0.1225242722947921);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_4,
				lDotProduct_0_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_4,
				1.0 - lLogistic_0_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_4
	

	namespace pb_0_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_5 = { 
		0.0 ,0.0019375936320431284 ,0.0 ,0.0 ,0.0004852680791251783 ,-0.0015360696145856854 ,-0.0 ,-0.0006100389259650782 ,-0.0 ,-0.0002767531706175433 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_5 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_5_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs ) + -0.36188142511719124;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_5",
				"Proba_0", "Proba_5",
				"LogProba_0", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_5 = linear_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs ) + -0.36188142511719124;
	
			std::any lLogistic_0_5 = logistic(-1.7833903123586787 * lDotProduct_0_5 + 0.2156419702533351);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_5,
				lDotProduct_0_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_5,
				1.0 - lLogistic_0_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_5
	

	namespace pb_0_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_6 = { 
		0.00022148521058833426 ,0.00034031850212942695 ,0.0 ,0.0 ,0.0014311056863430273 ,-0.0 ,-0.0 ,-0.0003525663628928327 ,-0.000749307172569624 ,-0.0008910358635983316 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_6 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_0_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs ) + 0.31759592348105176;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_6",
				"Proba_0", "Proba_6",
				"LogProba_0", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_6 = linear_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs ) + 0.31759592348105176;
	
			std::any lLogistic_0_6 = logistic(-1.9194078880693743 * lDotProduct_0_6 + -0.10440036032795422);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_6,
				lDotProduct_0_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_6,
				1.0 - lLogistic_0_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_6
	

	namespace pb_0_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_7 = { 
		0.0 ,0.0 ,0.00036939767176145954 ,0.0002770746798260763 ,0.0005917425930365048 ,-0.0003378049287696517 ,-0.0006092207455916263 ,-0.0 ,-0.00017139299836181165 ,-0.00011979627190095102 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_7 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs ) + -0.081762204975022;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_7",
				"Proba_0", "Proba_7",
				"LogProba_0", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_7 = linear_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs ) + -0.081762204975022;
	
			std::any lLogistic_0_7 = logistic(-2.085381034876856 * lDotProduct_0_7 + 0.11266534346395751);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_7,
				lDotProduct_0_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_7,
				1.0 - lLogistic_0_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_7
	

	namespace pb_0_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_8 = { 
		0.0 ,0.0003896759297553641 ,0.0 ,0.0006901587882744941 ,0.00121904111475283 ,-0.0004166200569369324 ,-0.0008461384035902699 ,-0.000549499855470235 ,-0.00048661751678525105 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_8 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_0_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs ) + -0.30269136752925385;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_8",
				"Proba_0", "Proba_8",
				"LogProba_0", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_8 = linear_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs ) + -0.30269136752925385;
	
			std::any lLogistic_0_8 = logistic(-2.523469353150438 * lDotProduct_0_8 + 0.6773037832009184);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_8,
				lDotProduct_0_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_8,
				1.0 - lLogistic_0_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_8
	

	namespace pb_0_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_9 = { 
		0.0002871605984025773 ,0.0001616871192618234 ,0.0 ,0.0012298699450867638 ,0.0006213376113502063 ,-0.0 ,-0.0006919969737756737 ,-0.0014562966639117467 ,-0.00015176163641395055 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_9 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_0_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs ) + 0.23397916745561975;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_9",
				"Proba_0", "Proba_9",
				"LogProba_0", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_9 = linear_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs ) + 0.23397916745561975;
	
			std::any lLogistic_0_9 = logistic(-2.2094997776180834 * lDotProduct_0_9 + 0.6022269826231211);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_9,
				lDotProduct_0_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_9,
				1.0 - lLogistic_0_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_9
	

	namespace pb_1_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_2 = { 
		0.0 ,0.0010129284311159823 ,0.0009485681871710758 ,8.425066637953334e-05 ,0.0008226092231102904 ,-0.0011379842781304834 ,-6.138919431838781e-05 ,-0.0010227085611488945 ,-0.0 ,-0.0 ,-0.0 ,-0.0006462744741791162 ,-0.0 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_2 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		};
		
	
		double get_problem_1_2_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs ) + -0.04631985467806619;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_2",
				"Proba_1", "Proba_2",
				"LogProba_1", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_2 = linear_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs ) + -0.04631985467806619;
	
			std::any lLogistic_1_2 = logistic(-1.9778434731420174 * lDotProduct_1_2 + 0.12045227479641944);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_2,
				lDotProduct_1_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_2,
				1.0 - lLogistic_1_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_2
	

	namespace pb_1_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_3 = { 
		0.0005012579616494918 ,0.000420653608718731 ,0.0008808613219475647 ,8.967333919814254e-05 ,0.0005575387609013025 ,-0.0 ,-0.0001033242217036204 ,-0.0007385830886833843 ,-0.0016080776820282276 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_3 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_1_3_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs ) + 0.45054456521213887;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_3",
				"Proba_1", "Proba_3",
				"LogProba_1", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_3 = linear_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs ) + 0.45054456521213887;
	
			std::any lLogistic_1_3 = logistic(-2.25180474107289 * lDotProduct_1_3 + -0.09573834016622956);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_3,
				lDotProduct_1_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_3,
				1.0 - lLogistic_1_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_3
	

	namespace pb_1_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_4 = { 
		4.9068288982781015e-05 ,0.0004525421060444148 ,0.0001234037625855671 ,0.0011552492936250543 ,0.0005260001705077047 ,-0.001243897919452069 ,-0.0005889624566557159 ,-0.00047340324563773656 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_4 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_4_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs ) + 0.2070737858154442;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_4",
				"Proba_1", "Proba_4",
				"LogProba_1", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_4 = linear_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs ) + 0.2070737858154442;
	
			std::any lLogistic_1_4 = logistic(-2.513176265531934 * lDotProduct_1_4 + 0.10416730774168821);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_4,
				lDotProduct_1_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_4,
				1.0 - lLogistic_1_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_4
	

	namespace pb_1_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_5 = { 
		8.09597858298979e-06 ,0.0 ,0.0 ,0.0013805853086465369 ,0.000675445358162221 ,-0.0009359297197289874 ,-0.000218011710058134 ,-0.0001483260692005299 ,-0.0 ,-0.0007618591464040964 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_5 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_5_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs ) + -0.4216423399236164;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_5",
				"Proba_1", "Proba_5",
				"LogProba_1", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_5 = linear_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs ) + -0.4216423399236164;
	
			std::any lLogistic_1_5 = logistic(-2.113961401072936 * lDotProduct_1_5 + -0.25868546523489944);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_5,
				lDotProduct_1_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_5,
				1.0 - lLogistic_1_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_5
	

	namespace pb_1_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_6 = { 
		0.0 ,0.0016361293986425285 ,0.0 ,0.0 ,0.0006554722267140226 ,-0.0005089760342636603 ,-0.0 ,-0.0 ,-0.0003639649585159182 ,-0.001418660632576973 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_6 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_1_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs ) + 1.0390522146769552;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_6",
				"Proba_1", "Proba_6",
				"LogProba_1", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_6 = linear_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs ) + 1.0390522146769552;
	
			std::any lLogistic_1_6 = logistic(-2.022890959876746 * lDotProduct_1_6 + -0.554359917687439);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_6,
				lDotProduct_1_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_6,
				1.0 - lLogistic_1_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_6
	

	namespace pb_1_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_7 = { 
		0.0 ,0.0 ,0.0011973148904376048 ,0.0006344243823419346 ,0.000430375361245442 ,-0.0009774616905725625 ,-0.00037159085012752007 ,-0.0 ,-0.0006537077947932046 ,-0.00025935429853169464 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_7 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs ) + -0.6736183701847247;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_7",
				"Proba_1", "Proba_7",
				"LogProba_1", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_7 = linear_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs ) + -0.6736183701847247;
	
			std::any lLogistic_1_7 = logistic(-2.608444806181772 * lDotProduct_1_7 + -0.30484479853818736);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_7,
				lDotProduct_1_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_7,
				1.0 - lLogistic_1_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_7
	

	namespace pb_1_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_8 = { 
		0.0003529192361567686 ,0.00021212209881708193 ,0.000655553419266299 ,0.002580344260938367 ,0.0015554065186861269 ,-0.0005976280892544309 ,-0.0011980623830698904 ,-0.0015007405154005892 ,-0.002059914546139732 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_8 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_1_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs ) + -0.35180959410010626;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_8",
				"Proba_1", "Proba_8",
				"LogProba_1", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_8 = linear_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs ) + -0.35180959410010626;
	
			std::any lLogistic_1_8 = logistic(-0.37418039309934087 * lDotProduct_1_8 + -0.0713374080927226);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_8,
				lDotProduct_1_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_8,
				1.0 - lLogistic_1_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_8
	

	namespace pb_1_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_9 = { 
		0.0005014147182909715 ,0.0 ,6.0112148009968807e-05 ,0.001328068592239021 ,0.002447995581212593 ,-0.0007419502410675294 ,-0.002079944115105653 ,-0.0015156966835793717 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_9 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_1_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs ) + -0.30481195150602003;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_9",
				"Proba_1", "Proba_9",
				"LogProba_1", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_9 = linear_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs ) + -0.30481195150602003;
	
			std::any lLogistic_1_9 = logistic(-0.48863114342233477 * lDotProduct_1_9 + -0.057204630234214224);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_9,
				lDotProduct_1_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_9,
				1.0 - lLogistic_1_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_9
	

	namespace pb_2_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_3 = { 
		0.002291807287191649 ,0.0 ,0.0009137510640445229 ,0.0 ,0.0 ,0.0003469417177027448 ,0.0 ,0.0002982773531157089 ,0.0 ,-0.00028956707616073995 ,-5.1537925227351234e-05 ,-0.0010347008133351676 ,-0.002115119971899444 ,-0.0003598516354319226 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_3 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_2_3_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs ) + 0.4672392601843437;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_3",
				"Proba_2", "Proba_3",
				"LogProba_2", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_3 = linear_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs ) + 0.4672392601843437;
	
			std::any lLogistic_2_3 = logistic(-1.7512745090260242 * lDotProduct_2_3 + -0.1289724991696167);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_3,
				lDotProduct_2_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_3,
				1.0 - lLogistic_2_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_3
	

	namespace pb_2_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_4 = { 
		0.00029554689971306397 ,0.0003521437399552824 ,0.0005332954673938513 ,0.0 ,0.0 ,0.0 ,0.00010274781046801387 ,0.0 ,3.110618250672746e-05 ,-0.0006575334375365297 ,-0.0005111478835420662 ,-0.00014615877895834308 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_4 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_4_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs ) + 0.05683984386919024;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_4",
				"Proba_2", "Proba_4",
				"LogProba_2", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_4 = linear_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs ) + 0.05683984386919024;
	
			std::any lLogistic_2_4 = logistic(-2.329230203593617 * lDotProduct_2_4 + -0.06995268305056968);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_4,
				lDotProduct_2_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_4,
				1.0 - lLogistic_2_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_4
	

	namespace pb_2_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_5 = { 
		0.0007076259650683477 ,0.00018392025159754644 ,0.00019164549398377416 ,0.0 ,0.000340147576028672 ,0.0 ,0.0 ,0.0 ,0.0003047369889612347 ,-0.0007963833080380564 ,-0.00015399924561418664 ,-0.00021932647501695716 ,-0.00015854717933669378 ,-0.0003998200676336809 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_5 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_5_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs ) + -0.1867110731719282;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_5",
				"Proba_2", "Proba_5",
				"LogProba_2", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_5 = linear_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs ) + -0.1867110731719282;
	
			std::any lLogistic_2_5 = logistic(-2.3493205872642267 * lDotProduct_2_5 + 0.06347999885863938);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_5,
				lDotProduct_2_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_5,
				1.0 - lLogistic_2_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_5
	

	namespace pb_2_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_6 = { 
		0.0 ,0.0012344904449334932 ,0.0006442458087241835 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,-0.0009044705114889722 ,-0.0 ,-0.00018304470027737777 ,-0.0007912210418913268 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_6 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_2_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs ) + 0.6304329770226311;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_6",
				"Proba_2", "Proba_6",
				"LogProba_2", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_6 = linear_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs ) + 0.6304329770226311;
	
			std::any lLogistic_2_6 = logistic(-2.0693886244066912 * lDotProduct_2_6 + -0.22792320315632672);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_6,
				lDotProduct_2_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_6,
				1.0 - lLogistic_2_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_6
	

	namespace pb_2_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_7 = { 
		0.000692279956019665 ,0.0 ,0.0004632011135548053 ,0.0001570907968286658 ,0.0003608021664921729 ,0.0 ,0.0 ,0.00019221411788314583 ,0.00017123878556629072 ,-0.00046035261408204105 ,-0.00023382931996958272 ,-0.0 ,-0.0002885037243700665 ,-0.0010541412779230552 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_7 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs ) + -0.26326087312566326;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_7",
				"Proba_2", "Proba_7",
				"LogProba_2", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_7 = linear_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs ) + -0.26326087312566326;
	
			std::any lLogistic_2_7 = logistic(-2.1470660719269756 * lDotProduct_2_7 + -0.11253579366846897);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_7,
				lDotProduct_2_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_7,
				1.0 - lLogistic_2_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_7
	

	namespace pb_2_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_8 = { 
		0.0016611867677945214 ,0.0008628738557633633 ,0.000578223825762505 ,0.0 ,0.0 ,0.0 ,0.0002201197516269533 ,0.0 ,0.0 ,-0.0008454577926293129 ,-0.0 ,-0.0008495092903937684 ,-0.0016274371179242615 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_8 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_2_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs ) + -0.08687162765662756;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_8",
				"Proba_2", "Proba_8",
				"LogProba_2", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_8 = linear_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs ) + -0.08687162765662756;
	
			std::any lLogistic_2_8 = logistic(-1.8942464566290393 * lDotProduct_2_8 + 0.043362434424303056);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_8,
				lDotProduct_2_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_8,
				1.0 - lLogistic_2_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_8
	

	namespace pb_2_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_9 = { 
		0.000304792676653558 ,0.0001320917838490577 ,0.0005759970173375205 ,0.00034769636231709515 ,0.0006387233326749874 ,0.0 ,0.0 ,9.926325326312846e-06 ,0.0002425150842204042 ,-0.0007135993101277258 ,-1.0514609055456042e-05 ,-0.0012491785100560218 ,-0.000278450153139732 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_9 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_2_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs ) + 0.556281304836189;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_9",
				"Proba_2", "Proba_9",
				"LogProba_2", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_9 = linear_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs ) + 0.556281304836189;
	
			std::any lLogistic_2_9 = logistic(-2.2744872275441343 * lDotProduct_2_9 + 0.02976043119243918);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_9,
				lDotProduct_2_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_9,
				1.0 - lLogistic_2_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_9
	

	namespace pb_3_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_4 = { 
		0.0 ,0.00013916585108649388 ,0.0003426621888989308 ,0.0005733583577868096 ,0.0 ,-0.0005019307826383476 ,-0.0004501565751785889 ,-0.00010309903995529784 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_4 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_4_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs ) + -0.21847790295731592;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_4",
				"Proba_3", "Proba_4",
				"LogProba_3", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_4 = linear_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs ) + -0.21847790295731592;
	
			std::any lLogistic_3_4 = logistic(-2.0732027140470204 * lDotProduct_3_4 + -0.08267802401359411);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_4,
				lDotProduct_3_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_4,
				1.0 - lLogistic_3_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_4
	

	namespace pb_3_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_5 = { 
		0.0006511865261927712 ,0.0008527869127540881 ,0.0 ,0.0005655225260375425 ,0.0 ,-0.001660727249585851 ,-0.00023819320536674676 ,-1.9429481270419997e-05 ,-0.0 ,-0.00015114602876138407 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_5 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_5_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs ) + -0.7413217730451117;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_5",
				"Proba_3", "Proba_5",
				"LogProba_3", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_5 = linear_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs ) + -0.7413217730451117;
	
			std::any lLogistic_3_5 = logistic(-2.0636786126697424 * lDotProduct_3_5 + -0.028436180361973006);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_5,
				lDotProduct_3_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_5,
				1.0 - lLogistic_3_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_5
	

	namespace pb_3_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_6 = { 
		0.0 ,4.152588585092498e-05 ,0.0005559090853617034 ,0.000724994827810354 ,0.0 ,-0.0004682058499354076 ,-0.0 ,-0.00013959542997655502 ,-0.0003358492544454322 ,-0.0003787792646655875 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_6 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_3_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs ) + 0.16067021542974308;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_6",
				"Proba_3", "Proba_6",
				"LogProba_3", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_6 = linear_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs ) + 0.16067021542974308;
	
			std::any lLogistic_3_6 = logistic(-1.9152467387320755 * lDotProduct_3_6 + -0.2099236940704793);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_6,
				lDotProduct_3_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_6,
				1.0 - lLogistic_3_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_6
	

	namespace pb_3_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_7 = { 
		0.0004627994610614891 ,0.0 ,0.0 ,0.0008235362985976781 ,0.0004042050660004431 ,-0.00014252635883041771 ,-0.0004982427655312225 ,-0.0 ,-0.0004341940176728557 ,-0.0006155776836251143 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_7 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs ) + -0.6935067726270925;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_7",
				"Proba_3", "Proba_7",
				"LogProba_3", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_7 = linear_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs ) + -0.6935067726270925;
	
			std::any lLogistic_3_7 = logistic(-2.2770664060241503 * lDotProduct_3_7 + -0.0694460283624435);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_7,
				lDotProduct_3_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_7,
				1.0 - lLogistic_3_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_7
	

	namespace pb_3_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_8 = { 
		0.0006054862111161479 ,0.000670392356833102 ,0.0003951275494236592 ,0.0015712099959094721 ,0.00023912882889554695 ,-0.001690386274477336 ,-0.0005273056973821538 ,-0.0 ,-0.0012636529703184383 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_8 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_3_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs ) + -0.653131018124033;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_8",
				"Proba_3", "Proba_8",
				"LogProba_3", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_8 = linear_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs ) + -0.653131018124033;
	
			std::any lLogistic_3_8 = logistic(-1.0432188382503684 * lDotProduct_3_8 + 0.20549600525204276);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_8,
				lDotProduct_3_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_8,
				1.0 - lLogistic_3_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_8
	

	namespace pb_3_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_9 = { 
		0.0 ,0.0010954614397239676 ,8.37013555975661e-06 ,0.0001867663426836478 ,0.002539637616134773 ,-0.0 ,-0.0 ,-0.0020460066111165523 ,-0.0017842289229855924 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_9 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_3_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs ) + -0.9636017599773122;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_9",
				"Proba_3", "Proba_9",
				"LogProba_3", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_9 = linear_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs ) + -0.9636017599773122;
	
			std::any lLogistic_3_9 = logistic(-1.5251809731955135 * lDotProduct_3_9 + 0.1188845923636603);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_9,
				lDotProduct_3_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_9,
				1.0 - lLogistic_3_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_9
	

	namespace pb_4_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_5 = { 
		0.0006261984256342959 ,0.0005478982927429963 ,0.0005569796079809555 ,-0.0007644191317088717 ,-0.0 ,-0.0005971733622807767 ,-0.0 ,-0.0003694838323685994 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_5 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_5_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs ) + -0.3039324617867296;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_5",
				"Proba_4", "Proba_5",
				"LogProba_4", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_5 = linear_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs ) + -0.3039324617867296;
	
			std::any lLogistic_4_5 = logistic(-1.9514124340876442 * lDotProduct_4_5 + -0.0130113349942629);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_5,
				lDotProduct_4_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_5,
				1.0 - lLogistic_4_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_5
	

	namespace pb_4_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_6 = { 
		0.00010611267297587551 ,0.001115094106936183 ,0.0010373410582893323 ,-0.0 ,-0.0 ,-0.00040631896061528596 ,-0.00035676843547257476 ,-0.00149546044211353 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_6 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_4_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs ) + 0.3898326420357445;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_6",
				"Proba_4", "Proba_6",
				"LogProba_4", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_6 = linear_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs ) + 0.3898326420357445;
	
			std::any lLogistic_4_6 = logistic(-2.049668341057218 * lDotProduct_4_6 + -0.43196217260481945);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_6,
				lDotProduct_4_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_6,
				1.0 - lLogistic_4_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_6
	

	namespace pb_4_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_7 = { 
		0.0019092472783910175 ,0.00024301516059502273 ,0.0 ,-0.0008818595591409477 ,-0.0 ,-0.0 ,-0.0012704028798450923 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_7 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs ) + -0.22805348439837303;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_7",
				"Proba_4", "Proba_7",
				"LogProba_4", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_7 = linear_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs ) + -0.22805348439837303;
	
			std::any lLogistic_4_7 = logistic(-1.7087046158035495 * lDotProduct_4_7 + 0.07634350493302297);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_7,
				lDotProduct_4_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_7,
				1.0 - lLogistic_4_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_7
	

	namespace pb_4_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_8 = { 
		0.0006538169020945519 ,0.0006140991230517873 ,0.001017594820967453 ,-0.00020833664422129124 ,-0.000602263334770977 ,-0.0006067308701082542 ,-0.0008681799970132699 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_8 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_4_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs ) + -0.37143562435121286;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_8",
				"Proba_4", "Proba_8",
				"LogProba_4", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_8 = linear_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs ) + -0.37143562435121286;
	
			std::any lLogistic_4_8 = logistic(-2.4971028302004643 * lDotProduct_4_8 + 0.24864202802615565);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_8,
				lDotProduct_4_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_8,
				1.0 - lLogistic_4_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_8
	

	namespace pb_4_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_9 = { 
		0.0004629495985275705 ,0.00034233196022124467 ,0.0006080055849941304 ,-6.69275479412128e-05 ,-0.000568970653439968 ,-0.0007773889423617649 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_9 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_4_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs ) + -0.11390186188526939;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_9",
				"Proba_4", "Proba_9",
				"LogProba_4", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_9 = linear_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs ) + -0.11390186188526939;
	
			std::any lLogistic_4_9 = logistic(-2.4322113971059727 * lDotProduct_4_9 + 0.29811655400629417);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_9,
				lDotProduct_4_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_9,
				1.0 - lLogistic_4_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_9
	

	namespace pb_5_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_6 = { 
		0.0006458455589291399 ,0.0 ,0.0004036527746674019 ,9.813984638033251e-05 ,0.00023289546372323532 ,-0.0 ,-0.0 ,-0.0007600151279782222 ,-0.00024590352705936654 ,-0.0003746149886625209 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_6 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_5_6_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs ) + 0.509669965310952;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_6",
				"Proba_5", "Proba_6",
				"LogProba_5", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_6 = linear_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs ) + 0.509669965310952;
	
			std::any lLogistic_5_6 = logistic(-2.1044190047282267 * lDotProduct_5_6 + -0.29307915019062897);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_6,
				lDotProduct_5_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_6,
				1.0 - lLogistic_5_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_6
	

	namespace pb_5_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_7 = { 
		0.0005333678796257979 ,0.0 ,0.00042940162970109394 ,0.0004399623649095494 ,0.00038908225728999894 ,-0.00010622431134878015 ,-0.0 ,-0.0003879996777093606 ,-0.0008758443919777888 ,-0.00042174575049051073 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_7 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_5_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs ) + 0.4128486229683217;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_7",
				"Proba_5", "Proba_7",
				"LogProba_5", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_7 = linear_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs ) + 0.4128486229683217;
	
			std::any lLogistic_5_7 = logistic(-2.600258699791372 * lDotProduct_5_7 + -0.266731980503114);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_7,
				lDotProduct_5_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_7,
				1.0 - lLogistic_5_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_7
	

	namespace pb_5_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_8 = { 
		0.0017767634694192678 ,0.00015584818384825925 ,0.0006922589334962253 ,0.0 ,0.0007875365406208834 ,-0.0004232941259522619 ,-0.0008600578374164277 ,-0.0010465320890989192 ,-0.0010825230749170272 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_8 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_5_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs ) + 0.25904609029455;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_8",
				"Proba_5", "Proba_8",
				"LogProba_5", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_8 = linear_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs ) + 0.25904609029455;
	
			std::any lLogistic_5_8 = logistic(-1.2892233732010798 * lDotProduct_5_8 + 0.21210845281201032);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_8,
				lDotProduct_5_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_8,
				1.0 - lLogistic_5_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_8
	

	namespace pb_5_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_9 = { 
		0.002729986247279752 ,0.0 ,0.0 ,0.0 ,0.00048036276320816325 ,-0.0 ,-0.0010910626715514987 ,-0.0017676976458318285 ,-0.00035158869310458816 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_9 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_5_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs ) + 0.3441733529451357;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_9",
				"Proba_5", "Proba_9",
				"LogProba_5", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_9 = linear_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs ) + 0.3441733529451357;
	
			std::any lLogistic_5_9 = logistic(-1.4246664590200857 * lDotProduct_5_9 + 0.08345522784469722);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_9,
				lDotProduct_5_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_9,
				1.0 - lLogistic_5_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_9
	

	namespace pb_6_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_7 = { 
		0.0 ,0.0 ,0.0003711983689372167 ,0.0 ,0.0005373174923036976 ,-0.00030874078702261277 ,-0.0002914756981191992 ,-0.0 ,-0.00030829937609910254 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_7 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_6_7_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs ) + -0.024984115846428824;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_7",
				"Proba_6", "Proba_7",
				"LogProba_6", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_7 = linear_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs ) + -0.024984115846428824;
	
			std::any lLogistic_6_7 = logistic(-1.9852622964391347 * lDotProduct_6_7 + 0.08140616111519824);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_7,
				lDotProduct_6_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_7,
				1.0 - lLogistic_6_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_7
	

	namespace pb_6_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_8 = { 
		0.0006693485369053377 ,7.767539145518797e-05 ,0.001020943394391032 ,0.0 ,0.001271975387611619 ,-0.00027694368411324173 ,-0.0006291877875200949 ,-0.00013358637403702067 ,-0.0020002248646928196 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_8 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_6_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs ) + -0.46500279871279904;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_8",
				"Proba_6", "Proba_8",
				"LogProba_6", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_8 = linear_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs ) + -0.46500279871279904;
	
			std::any lLogistic_6_8 = logistic(-2.3074478665616893 * lDotProduct_6_8 + 0.5740521303857331);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_8,
				lDotProduct_6_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_8,
				1.0 - lLogistic_6_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_8
	

	namespace pb_6_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_9 = { 
		0.0005823852809606723 ,0.0 ,0.0003340923258427608 ,0.0 ,0.00031515898693472005 ,-0.0002913860720869507 ,-0.0002974748683377499 ,-0.0006427756533134525 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_9 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_6_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs ) + -0.43215262849027686;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_9",
				"Proba_6", "Proba_9",
				"LogProba_6", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_9 = linear_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs ) + -0.43215262849027686;
	
			std::any lLogistic_6_9 = logistic(-2.159314553997423 * lDotProduct_6_9 + 0.2698153949146707);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_9,
				lDotProduct_6_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_9,
				1.0 - lLogistic_6_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_9
	

	namespace pb_7_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_8 = { 
		0.0004267529921104536 ,0.00023462430748372992 ,0.00029383949046506294 ,0.000843594776532449 ,0.0004566470808215238 ,-0.0007274244658669757 ,-5.0359809420038444e-05 ,-0.000970050382486029 ,-0.000507623989640176 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_8 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_7_8_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs ) + 0.10582364048289132;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_8",
				"Proba_7", "Proba_8",
				"LogProba_7", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_8 = linear_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs ) + 0.10582364048289132;
	
			std::any lLogistic_7_8 = logistic(-3.057189842249876 * lDotProduct_7_8 + 0.9474138961012385);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_8,
				lDotProduct_7_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_8,
				1.0 - lLogistic_7_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_8
	

	namespace pb_7_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_9 = { 
		0.0003643693284473096 ,0.0 ,0.00017074557520843425 ,0.0003120671902741784 ,0.0007109954886252549 ,-4.7846597855230995e-05 ,-0.00025306667779223394 ,-0.00094285074834447 ,-0.00031441355856324225 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_9 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_7_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs ) + 0.38488937619964325;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_9",
				"Proba_7", "Proba_9",
				"LogProba_7", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_9 = linear_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs ) + 0.38488937619964325;
	
			std::any lLogistic_7_9 = logistic(-2.293068198656244 * lDotProduct_7_9 + 0.27972211265248365);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_9,
				lDotProduct_7_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_9,
				1.0 - lLogistic_7_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_9
	

	namespace pb_8_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_8_9 = { 
		0.001205280808284559 ,0.002413557937013831 ,0.0 ,0.0011212266422292636 ,-0.0001484792594581034 ,-0.001955610383500374 ,-0.0024092146810202283 ,-0.00022676106354894873 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_8_9 = { 
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_8_9_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs ) + 0.46611691676644357;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_8", "Score_9",
				"Proba_8", "Proba_9",
				"LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_8_9 = linear_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs ) + 0.46611691676644357;
	
			std::any lLogistic_8_9 = logistic(0.12124523496866942 * lDotProduct_8_9 + -0.0030131799486639225);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_8_9,
				lDotProduct_8_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_8_9,
				1.0 - lLogistic_8_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_8_9
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };

		std::map<uint, tTable> lBinaryScores = { 
			{ 0 , pb_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 1 , pb_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 2 , pb_0_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 3 , pb_0_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 4 , pb_0_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 5 , pb_0_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 6 , pb_0_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 7 , pb_0_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 8 , pb_0_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 9 , pb_1_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 10 , pb_1_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 11 , pb_1_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 12 , pb_1_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 13 , pb_1_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 14 , pb_1_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 15 , pb_1_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 16 , pb_1_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 17 , pb_2_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 18 , pb_2_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 19 , pb_2_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 20 , pb_2_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 21 , pb_2_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 22 , pb_2_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 23 , pb_2_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 24 , pb_3_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 25 , pb_3_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 26 , pb_3_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 27 , pb_3_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 28 , pb_3_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 29 , pb_3_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 30 , pb_4_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 31 , pb_4_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 32 , pb_4_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 33 , pb_4_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 34 , pb_4_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 35 , pb_5_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 36 , pb_5_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 37 , pb_5_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 38 , pb_5_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 39 , pb_6_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 40 , pb_6_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 41 , pb_6_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 42 , pb_7_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 43 , pb_7_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 44 , pb_8_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) }
		};

		tTable lOVRTable = compute_svc_ovr_scores(lBinaryScores, lClasses);


		tTable lTable = lOVRTable;

		int lBestClass = get_arg_max( lTable["Score"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
