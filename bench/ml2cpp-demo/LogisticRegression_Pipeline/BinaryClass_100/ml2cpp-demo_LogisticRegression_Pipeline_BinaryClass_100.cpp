// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LogisticRegression_Pipeline
// Dataset : BinaryClass_100

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LogisticRegression_Pipeline_BinaryClass_100.exe ml2cpp-demo_LogisticRegression_Pipeline_BinaryClass_100.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.14903440845324958 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( -0.03367636493032261 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 0.11933316355610842 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( -0.17369203130189262 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 0.06534355492106358 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 0.2436228993764152 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( -0.11367357911147091 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( -0.21176443876708548 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.11513979914587343 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 0.029111924938589835 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 0.1107718926861467 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 0.0014580375424568769 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( -0.0773739291867229 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( -0.1139572875884789 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( -0.12567631285043362 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( -0.05799597833985687 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( -0.14181264174476002 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( -0.1265454286904762 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( -0.07812248683518369 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( -0.07648737683022465 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 0.05864262427869482 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 0.10844037074552852 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 0.060065969333441514 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.15255771271935042 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( -0.047123256877991036 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( -0.05696296914089203 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 0.09614684099943512 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 0.10433833409752227 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 0.03257716191960926 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 0.06142905749366723 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( -0.014540423460679405 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( -0.1123380099941879 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.1189128446049145 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 0.2286864930078044 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 0.23566181549921908 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 0.07316970399964386 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( -0.03319409827469623 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 0.2734938774177451 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( -0.023289567742236165 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.030288379260645946 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( -0.10736826233135917 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 0.026402950097887946 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( -0.09677146654911453 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 0.005974248342970334 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 0.036917268127071114 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( -0.14525717382374131 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( -0.16675269881177787 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.25084465695652713 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.14623398322257627 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.10185431133406106 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( -0.13292560945085755 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( -0.042191791365440365 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 0.15214028404681929 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( -0.15821372314298002 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 0.17926260535776073 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.05077533210437681 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( -0.011884551362322174 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( -0.04948745069141103 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( -0.13256733552482858 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 0.11866238202513515 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( -0.06590828520229039 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 0.1554857338869047 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( -0.006608301490984002 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( -0.01827580148493827 ) : ( Feature_63)) };
			lTable["impter_66"] = { ((Feature_64 == std::any()) ?  ( -0.027366317428668574 ) : ( Feature_64)) };
			lTable["impter_67"] = { ((Feature_65 == std::any()) ?  ( 0.01436625003668961 ) : ( Feature_65)) };
			lTable["impter_68"] = { ((Feature_66 == std::any()) ?  ( 0.054075300089557875 ) : ( Feature_66)) };
			lTable["impter_69"] = { ((Feature_67 == std::any()) ?  ( -0.23085273383923544 ) : ( Feature_67)) };
			lTable["impter_70"] = { ((Feature_68 == std::any()) ?  ( -0.24396528808375115 ) : ( Feature_68)) };
			lTable["impter_71"] = { ((Feature_69 == std::any()) ?  ( 0.06545065787659607 ) : ( Feature_69)) };
			lTable["impter_72"] = { ((Feature_70 == std::any()) ?  ( 0.04266518302023082 ) : ( Feature_70)) };
			lTable["impter_73"] = { ((Feature_71 == std::any()) ?  ( -0.1540451820349279 ) : ( Feature_71)) };
			lTable["impter_74"] = { ((Feature_72 == std::any()) ?  ( -0.2222352564572451 ) : ( Feature_72)) };
			lTable["impter_75"] = { ((Feature_73 == std::any()) ?  ( 0.0685606372972674 ) : ( Feature_73)) };
			lTable["impter_76"] = { ((Feature_74 == std::any()) ?  ( -0.09639592085393558 ) : ( Feature_74)) };
			lTable["impter_77"] = { ((Feature_75 == std::any()) ?  ( 0.20747518927524572 ) : ( Feature_75)) };
			lTable["impter_78"] = { ((Feature_76 == std::any()) ?  ( -0.13945256367132464 ) : ( Feature_76)) };
			lTable["impter_79"] = { ((Feature_77 == std::any()) ?  ( 0.021954208773706758 ) : ( Feature_77)) };
			lTable["impter_80"] = { ((Feature_78 == std::any()) ?  ( 0.07033517037026028 ) : ( Feature_78)) };
			lTable["impter_81"] = { ((Feature_79 == std::any()) ?  ( 0.12062472190694748 ) : ( Feature_79)) };
			lTable["impter_82"] = { ((Feature_80 == std::any()) ?  ( -0.03376594744247921 ) : ( Feature_80)) };
			lTable["impter_83"] = { ((Feature_81 == std::any()) ?  ( -0.11063521313283846 ) : ( Feature_81)) };
			lTable["impter_84"] = { ((Feature_82 == std::any()) ?  ( 0.040264280436689885 ) : ( Feature_82)) };
			lTable["impter_85"] = { ((Feature_83 == std::any()) ?  ( 0.047619698634703535 ) : ( Feature_83)) };
			lTable["impter_86"] = { ((Feature_84 == std::any()) ?  ( 0.10294542896565007 ) : ( Feature_84)) };
			lTable["impter_87"] = { ((Feature_85 == std::any()) ?  ( 0.03543139086541035 ) : ( Feature_85)) };
			lTable["impter_88"] = { ((Feature_86 == std::any()) ?  ( 0.15812674995414752 ) : ( Feature_86)) };
			lTable["impter_89"] = { ((Feature_87 == std::any()) ?  ( -0.09370679202503561 ) : ( Feature_87)) };
			lTable["impter_90"] = { ((Feature_88 == std::any()) ?  ( -0.05352174133125283 ) : ( Feature_88)) };
			lTable["impter_91"] = { ((Feature_89 == std::any()) ?  ( -0.05671142135749989 ) : ( Feature_89)) };
			lTable["impter_92"] = { ((Feature_90 == std::any()) ?  ( 0.1683501919918398 ) : ( Feature_90)) };
			lTable["impter_93"] = { ((Feature_91 == std::any()) ?  ( -0.08014687785959375 ) : ( Feature_91)) };
			lTable["impter_94"] = { ((Feature_92 == std::any()) ?  ( 0.06732751721128641 ) : ( Feature_92)) };
			lTable["impter_95"] = { ((Feature_93 == std::any()) ?  ( -0.00888651681786575 ) : ( Feature_93)) };
			lTable["impter_96"] = { ((Feature_94 == std::any()) ?  ( 0.026095385517810564 ) : ( Feature_94)) };
			lTable["impter_97"] = { ((Feature_95 == std::any()) ?  ( 0.04435425200996614 ) : ( Feature_95)) };
			lTable["impter_98"] = { ((Feature_96 == std::any()) ?  ( 0.026895408070568623 ) : ( Feature_96)) };
			lTable["impter_99"] = { ((Feature_97 == std::any()) ?  ( 0.18232971539070067 ) : ( Feature_97)) };
			lTable["impter_100"] = { ((Feature_98 == std::any()) ?  ( -0.12132540363011564 ) : ( Feature_98)) };
			lTable["impter_101"] = { ((Feature_99 == std::any()) ?  ( 0.004420132524286926 ) : ( Feature_99)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65, std::any impter_66, std::any impter_67, std::any impter_68, std::any impter_69, std::any impter_70, std::any impter_71, std::any impter_72, std::any impter_73, std::any impter_74, std::any impter_75, std::any impter_76, std::any impter_77, std::any impter_78, std::any impter_79, std::any impter_80, std::any impter_81, std::any impter_82, std::any impter_83, std::any impter_84, std::any impter_85, std::any impter_86, std::any impter_87, std::any impter_88, std::any impter_89, std::any impter_90, std::any impter_91, std::any impter_92, std::any impter_93, std::any impter_94, std::any impter_95, std::any impter_96, std::any impter_97, std::any impter_98, std::any impter_99, std::any impter_100, std::any impter_101) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.14903440845324958 ) / 0.8636609678928474 ) };
			lTable["scaler_3"] = { ( ( impter_3 - -0.03367636493032261 ) / 0.9578461188823892 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 0.11933316355610842 ) / 0.988940710894537 ) };
			lTable["scaler_5"] = { ( ( impter_5 - -0.17369203130189262 ) / 0.9255555424369695 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 0.06534355492106358 ) / 1.2549066590522007 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 0.2436228993764152 ) / 1.0289985897454397 ) };
			lTable["scaler_8"] = { ( ( impter_8 - -0.11367357911147091 ) / 0.8923136895775531 ) };
			lTable["scaler_9"] = { ( ( impter_9 - -0.21176443876708548 ) / 0.9002988999952058 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.11513979914587343 ) / 1.0407931178174141 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 0.029111924938589835 ) / 0.8191882677751 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 0.1107718926861467 ) / 1.1250344343026408 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 0.0014580375424568769 ) / 1.0581752782303462 ) };
			lTable["scaler_14"] = { ( ( impter_14 - -0.0773739291867229 ) / 0.9419092604618728 ) };
			lTable["scaler_15"] = { ( ( impter_15 - -0.1139572875884789 ) / 0.9844340172570488 ) };
			lTable["scaler_16"] = { ( ( impter_16 - -0.12567631285043362 ) / 1.0696960659875883 ) };
			lTable["scaler_17"] = { ( ( impter_17 - -0.05799597833985687 ) / 0.9572246869765944 ) };
			lTable["scaler_18"] = { ( ( impter_18 - -0.14181264174476002 ) / 0.9402782318020427 ) };
			lTable["scaler_19"] = { ( ( impter_19 - -0.1265454286904762 ) / 1.0394075774622935 ) };
			lTable["scaler_20"] = { ( ( impter_20 - -0.07812248683518369 ) / 1.3223760230644108 ) };
			lTable["scaler_21"] = { ( ( impter_21 - -0.07648737683022465 ) / 0.9488949379248575 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 0.05864262427869482 ) / 0.9538581426644901 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 0.10844037074552852 ) / 1.210930082570065 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 0.060065969333441514 ) / 0.9191502156507799 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.15255771271935042 ) / 0.9299576154754636 ) };
			lTable["scaler_26"] = { ( ( impter_26 - -0.047123256877991036 ) / 0.7721855440773565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - -0.05696296914089203 ) / 0.8655084393513448 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 0.09614684099943512 ) / 0.96937898078964 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 0.10433833409752227 ) / 1.0974731508769155 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 0.03257716191960926 ) / 0.9435063968783003 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 0.06142905749366723 ) / 1.1170732733267863 ) };
			lTable["scaler_32"] = { ( ( impter_32 - -0.014540423460679405 ) / 1.0573168197323033 ) };
			lTable["scaler_33"] = { ( ( impter_33 - -0.1123380099941879 ) / 0.9786151659749657 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.1189128446049145 ) / 1.0063563400772833 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 0.2286864930078044 ) / 0.9987517899102172 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 0.23566181549921908 ) / 0.8892125575448739 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 0.07316970399964386 ) / 0.8478593314579883 ) };
			lTable["scaler_38"] = { ( ( impter_38 - -0.03319409827469623 ) / 0.9417761591755847 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 0.2734938774177451 ) / 0.8842710941098582 ) };
			lTable["scaler_40"] = { ( ( impter_40 - -0.023289567742236165 ) / 0.9947645749252034 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.030288379260645946 ) / 1.038539402148216 ) };
			lTable["scaler_42"] = { ( ( impter_42 - -0.10736826233135917 ) / 0.9830117951146878 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 0.026402950097887946 ) / 1.0398287539710105 ) };
			lTable["scaler_44"] = { ( ( impter_44 - -0.09677146654911453 ) / 1.0015225564098231 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 0.005974248342970334 ) / 0.9192248357286628 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 0.036917268127071114 ) / 1.069754938973098 ) };
			lTable["scaler_47"] = { ( ( impter_47 - -0.14525717382374131 ) / 1.0022143023048327 ) };
			lTable["scaler_48"] = { ( ( impter_48 - -0.16675269881177787 ) / 1.0264976173555715 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.25084465695652713 ) / 1.0176351295531831 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.14623398322257627 ) / 0.9499010882454708 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.10185431133406106 ) / 1.0834913023248847 ) };
			lTable["scaler_52"] = { ( ( impter_52 - -0.13292560945085755 ) / 1.203043012940759 ) };
			lTable["scaler_53"] = { ( ( impter_53 - -0.042191791365440365 ) / 1.0890718481954653 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 0.15214028404681929 ) / 1.0355928162656227 ) };
			lTable["scaler_55"] = { ( ( impter_55 - -0.15821372314298002 ) / 0.8130848573586256 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 0.17926260535776073 ) / 1.0704671463335236 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.05077533210437681 ) / 1.0052564941217246 ) };
			lTable["scaler_58"] = { ( ( impter_58 - -0.011884551362322174 ) / 0.9691413097866551 ) };
			lTable["scaler_59"] = { ( ( impter_59 - -0.04948745069141103 ) / 1.2609768269937562 ) };
			lTable["scaler_60"] = { ( ( impter_60 - -0.13256733552482858 ) / 0.8686251022330442 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 0.11866238202513515 ) / 1.0631654849592418 ) };
			lTable["scaler_62"] = { ( ( impter_62 - -0.06590828520229039 ) / 1.0418727908296095 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 0.1554857338869047 ) / 0.8946519794042862 ) };
			lTable["scaler_64"] = { ( ( impter_64 - -0.006608301490984002 ) / 0.9166153141716471 ) };
			lTable["scaler_65"] = { ( ( impter_65 - -0.01827580148493827 ) / 1.037281466599587 ) };
			lTable["scaler_66"] = { ( ( impter_66 - -0.027366317428668574 ) / 0.8876680722044222 ) };
			lTable["scaler_67"] = { ( ( impter_67 - 0.01436625003668961 ) / 0.9184976645949744 ) };
			lTable["scaler_68"] = { ( ( impter_68 - 0.054075300089557875 ) / 0.929588489370402 ) };
			lTable["scaler_69"] = { ( ( impter_69 - -0.23085273383923544 ) / 0.944088767881375 ) };
			lTable["scaler_70"] = { ( ( impter_70 - -0.24396528808375115 ) / 1.04592379692413 ) };
			lTable["scaler_71"] = { ( ( impter_71 - 0.06545065787659607 ) / 0.8967701639849762 ) };
			lTable["scaler_72"] = { ( ( impter_72 - 0.04266518302023082 ) / 0.8835391881690846 ) };
			lTable["scaler_73"] = { ( ( impter_73 - -0.1540451820349279 ) / 0.9869791561020547 ) };
			lTable["scaler_74"] = { ( ( impter_74 - -0.2222352564572451 ) / 0.9537927411956955 ) };
			lTable["scaler_75"] = { ( ( impter_75 - 0.0685606372972674 ) / 0.953717717145669 ) };
			lTable["scaler_76"] = { ( ( impter_76 - -0.09639592085393558 ) / 1.035877532027052 ) };
			lTable["scaler_77"] = { ( ( impter_77 - 0.20747518927524572 ) / 1.0611076222257592 ) };
			lTable["scaler_78"] = { ( ( impter_78 - -0.13945256367132464 ) / 1.022370053319208 ) };
			lTable["scaler_79"] = { ( ( impter_79 - 0.021954208773706758 ) / 0.48752447532965937 ) };
			lTable["scaler_80"] = { ( ( impter_80 - 0.07033517037026028 ) / 0.9984278761892057 ) };
			lTable["scaler_81"] = { ( ( impter_81 - 0.12062472190694748 ) / 1.0482914370539298 ) };
			lTable["scaler_82"] = { ( ( impter_82 - -0.03376594744247921 ) / 1.0120395039819923 ) };
			lTable["scaler_83"] = { ( ( impter_83 - -0.11063521313283846 ) / 0.8487965281981553 ) };
			lTable["scaler_84"] = { ( ( impter_84 - 0.040264280436689885 ) / 0.9278865519978795 ) };
			lTable["scaler_85"] = { ( ( impter_85 - 0.047619698634703535 ) / 1.0173681676828843 ) };
			lTable["scaler_86"] = { ( ( impter_86 - 0.10294542896565007 ) / 0.9363751138268347 ) };
			lTable["scaler_87"] = { ( ( impter_87 - 0.03543139086541035 ) / 0.9766573952044824 ) };
			lTable["scaler_88"] = { ( ( impter_88 - 0.15812674995414752 ) / 1.0065679998415296 ) };
			lTable["scaler_89"] = { ( ( impter_89 - -0.09370679202503561 ) / 0.9521441609239362 ) };
			lTable["scaler_90"] = { ( ( impter_90 - -0.05352174133125283 ) / 1.0336679876781851 ) };
			lTable["scaler_91"] = { ( ( impter_91 - -0.05671142135749989 ) / 1.0851107811586167 ) };
			lTable["scaler_92"] = { ( ( impter_92 - 0.1683501919918398 ) / 0.8286544432716997 ) };
			lTable["scaler_93"] = { ( ( impter_93 - -0.08014687785959375 ) / 1.070420432549587 ) };
			lTable["scaler_94"] = { ( ( impter_94 - 0.06732751721128641 ) / 1.1749792199760318 ) };
			lTable["scaler_95"] = { ( ( impter_95 - -0.00888651681786575 ) / 1.0750073377154254 ) };
			lTable["scaler_96"] = { ( ( impter_96 - 0.026095385517810564 ) / 1.1078183878209036 ) };
			lTable["scaler_97"] = { ( ( impter_97 - 0.04435425200996614 ) / 0.8861375411199117 ) };
			lTable["scaler_98"] = { ( ( impter_98 - 0.026895408070568623 ) / 1.0095288823928932 ) };
			lTable["scaler_99"] = { ( ( impter_99 - 0.18232971539070067 ) / 0.9551382056239349 ) };
			lTable["scaler_100"] = { ( ( impter_100 - -0.12132540363011564 ) / 0.9258857556869412 ) };
			lTable["scaler_101"] = { ( ( impter_101 - 0.004420132524286926 ) / 0.9371965982210728 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0], iTable.at("impter_66")[0], iTable.at("impter_67")[0], iTable.at("impter_68")[0], iTable.at("impter_69")[0], iTable.at("impter_70")[0], iTable.at("impter_71")[0], iTable.at("impter_72")[0], iTable.at("impter_73")[0], iTable.at("impter_74")[0], iTable.at("impter_75")[0], iTable.at("impter_76")[0], iTable.at("impter_77")[0], iTable.at("impter_78")[0], iTable.at("impter_79")[0], iTable.at("impter_80")[0], iTable.at("impter_81")[0], iTable.at("impter_82")[0], iTable.at("impter_83")[0], iTable.at("impter_84")[0], iTable.at("impter_85")[0], iTable.at("impter_86")[0], iTable.at("impter_87")[0], iTable.at("impter_88")[0], iTable.at("impter_89")[0], iTable.at("impter_90")[0], iTable.at("impter_91")[0], iTable.at("impter_92")[0], iTable.at("impter_93")[0], iTable.at("impter_94")[0], iTable.at("impter_95")[0], iTable.at("impter_96")[0], iTable.at("impter_97")[0], iTable.at("impter_98")[0], iTable.at("impter_99")[0], iTable.at("impter_100")[0], iTable.at("impter_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65, std::any scaler_66, std::any scaler_67, std::any scaler_68, std::any scaler_69, std::any scaler_70, std::any scaler_71, std::any scaler_72, std::any scaler_73, std::any scaler_74, std::any scaler_75, std::any scaler_76, std::any scaler_77, std::any scaler_78, std::any scaler_79, std::any scaler_80, std::any scaler_81, std::any scaler_82, std::any scaler_83, std::any scaler_84, std::any scaler_85, std::any scaler_86, std::any scaler_87, std::any scaler_88, std::any scaler_89, std::any scaler_90, std::any scaler_91, std::any scaler_92, std::any scaler_93, std::any scaler_94, std::any scaler_95, std::any scaler_96, std::any scaler_97, std::any scaler_98, std::any scaler_99, std::any scaler_100, std::any scaler_101) {
			auto lClasses = get_classes();
	
			tTable lScores = tTable();
	
			lScores["Score"] = { 
				-( 0.3419060873848571 * scaler_2 + 0.11027404034486785 * scaler_3 + -0.08113663508082716 * scaler_4 + 0.011675168658497555 * scaler_5 + -0.9011258093370071 * scaler_6 + 0.5375695624995411 * scaler_7 + -0.07868490242447973 * scaler_8 + -0.05898525064491497 * scaler_9 + 0.2096363482247588 * scaler_10 + 0.2428554727203868 * scaler_11 + -0.16712677649356447 * scaler_12 + 0.0546885174180073 * scaler_13 + 0.218187496002922 * scaler_14 + 0.12987820434152048 * scaler_15 + -0.2111810219043367 * scaler_16 + -0.37672763984574215 * scaler_17 + 0.08661913927468043 * scaler_18 + 0.1835430575881845 * scaler_19 + -0.3114971770656208 * scaler_20 + -0.09324197947280394 * scaler_21 + 0.06918161915384535 * scaler_22 + -0.08720748740261401 * scaler_23 + -0.10652010860978144 * scaler_24 + -0.07718123657298583 * scaler_25 + -0.0889266265751004 * scaler_26 + -0.3579479250569603 * scaler_27 + -0.13140059604594598 * scaler_28 + 0.23508651262434388 * scaler_29 + -0.2937315730508135 * scaler_30 + 0.10579700586545394 * scaler_31 + 0.03784426670037078 * scaler_32 + -0.26637710325789915 * scaler_33 + 0.13250209752160275 * scaler_34 + -0.47877062383805885 * scaler_35 + -0.44793566657075584 * scaler_36 + 0.03638323944767107 * scaler_37 + -0.15251052393062423 * scaler_38 + 0.10044137163414295 * scaler_39 + -0.00873413421661626 * scaler_40 + -0.2513382278266991 * scaler_41 + -0.06403968834583953 * scaler_42 + -0.17540161694908052 * scaler_43 + -0.02861505964283009 * scaler_44 + -0.016269209584866277 * scaler_45 + -0.4770257596168984 * scaler_46 + -0.20319495848072405 * scaler_47 + 0.1608947320327565 * scaler_48 + -0.031349260956128513 * scaler_49 + -0.3594698551727774 * scaler_50 + -0.18026726694016423 * scaler_51 + 0.012230020092965475 * scaler_52 + 0.06345994304474005 * scaler_53 + -0.19217360270295347 * scaler_54 + 0.31712904125440605 * scaler_55 + -0.02818091358463385 * scaler_56 + 0.041430805789205334 * scaler_57 + 0.2518492031372102 * scaler_58 + 0.9995416125906634 * scaler_59 + 0.038022563343493423 * scaler_60 + 0.17223353798054086 * scaler_61 + -0.48747613413258983 * scaler_62 + -0.053648305404672476 * scaler_63 + 0.12129427767608725 * scaler_64 + 0.20183581968154554 * scaler_65 + 0.14761925338548987 * scaler_66 + 0.14707573124398232 * scaler_67 + -0.1413235297651844 * scaler_68 + 0.7375800052639082 * scaler_69 + -0.32613053773918516 * scaler_70 + -0.1353994261486146 * scaler_71 + 0.048012402113687826 * scaler_72 + -0.32219458891054187 * scaler_73 + -0.1310424533688526 * scaler_74 + -0.388657054908155 * scaler_75 + 0.1275657470003277 * scaler_76 + 0.12028231522157634 * scaler_77 + 0.1539806565345132 * scaler_78 + -0.9640671211295491 * scaler_79 + 0.08060225662695623 * scaler_80 + 0.07129417431834247 * scaler_81 + -0.23445073099575103 * scaler_82 + 0.024158674448285036 * scaler_83 + 0.27485675094452466 * scaler_84 + 0.05672869536918408 * scaler_85 + 0.19419155371938784 * scaler_86 + -0.31524222499204074 * scaler_87 + -0.20937681496899807 * scaler_88 + 0.12260154065628952 * scaler_89 + 0.2529351125027554 * scaler_90 + -0.15606269685926602 * scaler_91 + -0.45732380041735604 * scaler_92 + -0.25016154691467596 * scaler_93 + 0.39871502426737726 * scaler_94 + -0.1605069209646463 * scaler_95 + -0.19254812706569896 * scaler_96 + -0.5362994611281385 * scaler_97 + -0.2277836022520108 * scaler_98 + 0.02209074000175749 * scaler_99 + 0.0036253114449030285 * scaler_100 + -0.12605266456024944 * scaler_101 + 0.018127791359642036 ),
				0.3419060873848571 * scaler_2 + 0.11027404034486785 * scaler_3 + -0.08113663508082716 * scaler_4 + 0.011675168658497555 * scaler_5 + -0.9011258093370071 * scaler_6 + 0.5375695624995411 * scaler_7 + -0.07868490242447973 * scaler_8 + -0.05898525064491497 * scaler_9 + 0.2096363482247588 * scaler_10 + 0.2428554727203868 * scaler_11 + -0.16712677649356447 * scaler_12 + 0.0546885174180073 * scaler_13 + 0.218187496002922 * scaler_14 + 0.12987820434152048 * scaler_15 + -0.2111810219043367 * scaler_16 + -0.37672763984574215 * scaler_17 + 0.08661913927468043 * scaler_18 + 0.1835430575881845 * scaler_19 + -0.3114971770656208 * scaler_20 + -0.09324197947280394 * scaler_21 + 0.06918161915384535 * scaler_22 + -0.08720748740261401 * scaler_23 + -0.10652010860978144 * scaler_24 + -0.07718123657298583 * scaler_25 + -0.0889266265751004 * scaler_26 + -0.3579479250569603 * scaler_27 + -0.13140059604594598 * scaler_28 + 0.23508651262434388 * scaler_29 + -0.2937315730508135 * scaler_30 + 0.10579700586545394 * scaler_31 + 0.03784426670037078 * scaler_32 + -0.26637710325789915 * scaler_33 + 0.13250209752160275 * scaler_34 + -0.47877062383805885 * scaler_35 + -0.44793566657075584 * scaler_36 + 0.03638323944767107 * scaler_37 + -0.15251052393062423 * scaler_38 + 0.10044137163414295 * scaler_39 + -0.00873413421661626 * scaler_40 + -0.2513382278266991 * scaler_41 + -0.06403968834583953 * scaler_42 + -0.17540161694908052 * scaler_43 + -0.02861505964283009 * scaler_44 + -0.016269209584866277 * scaler_45 + -0.4770257596168984 * scaler_46 + -0.20319495848072405 * scaler_47 + 0.1608947320327565 * scaler_48 + -0.031349260956128513 * scaler_49 + -0.3594698551727774 * scaler_50 + -0.18026726694016423 * scaler_51 + 0.012230020092965475 * scaler_52 + 0.06345994304474005 * scaler_53 + -0.19217360270295347 * scaler_54 + 0.31712904125440605 * scaler_55 + -0.02818091358463385 * scaler_56 + 0.041430805789205334 * scaler_57 + 0.2518492031372102 * scaler_58 + 0.9995416125906634 * scaler_59 + 0.038022563343493423 * scaler_60 + 0.17223353798054086 * scaler_61 + -0.48747613413258983 * scaler_62 + -0.053648305404672476 * scaler_63 + 0.12129427767608725 * scaler_64 + 0.20183581968154554 * scaler_65 + 0.14761925338548987 * scaler_66 + 0.14707573124398232 * scaler_67 + -0.1413235297651844 * scaler_68 + 0.7375800052639082 * scaler_69 + -0.32613053773918516 * scaler_70 + -0.1353994261486146 * scaler_71 + 0.048012402113687826 * scaler_72 + -0.32219458891054187 * scaler_73 + -0.1310424533688526 * scaler_74 + -0.388657054908155 * scaler_75 + 0.1275657470003277 * scaler_76 + 0.12028231522157634 * scaler_77 + 0.1539806565345132 * scaler_78 + -0.9640671211295491 * scaler_79 + 0.08060225662695623 * scaler_80 + 0.07129417431834247 * scaler_81 + -0.23445073099575103 * scaler_82 + 0.024158674448285036 * scaler_83 + 0.27485675094452466 * scaler_84 + 0.05672869536918408 * scaler_85 + 0.19419155371938784 * scaler_86 + -0.31524222499204074 * scaler_87 + -0.20937681496899807 * scaler_88 + 0.12260154065628952 * scaler_89 + 0.2529351125027554 * scaler_90 + -0.15606269685926602 * scaler_91 + -0.45732380041735604 * scaler_92 + -0.25016154691467596 * scaler_93 + 0.39871502426737726 * scaler_94 + -0.1605069209646463 * scaler_95 + -0.19254812706569896 * scaler_96 + -0.5362994611281385 * scaler_97 + -0.2277836022520108 * scaler_98 + 0.02209074000175749 * scaler_99 + 0.0036253114449030285 * scaler_100 + -0.12605266456024944 * scaler_101 + 0.018127791359642036
			};
	
			tTable lSoftMaxTable = soft_max(lScores, false);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0], iTable.at("scaler_66")[0], iTable.at("scaler_67")[0], iTable.at("scaler_68")[0], iTable.at("scaler_69")[0], iTable.at("scaler_70")[0], iTable.at("scaler_71")[0], iTable.at("scaler_72")[0], iTable.at("scaler_73")[0], iTable.at("scaler_74")[0], iTable.at("scaler_75")[0], iTable.at("scaler_76")[0], iTable.at("scaler_77")[0], iTable.at("scaler_78")[0], iTable.at("scaler_79")[0], iTable.at("scaler_80")[0], iTable.at("scaler_81")[0], iTable.at("scaler_82")[0], iTable.at("scaler_83")[0], iTable.at("scaler_84")[0], iTable.at("scaler_85")[0], iTable.at("scaler_86")[0], iTable.at("scaler_87")[0], iTable.at("scaler_88")[0], iTable.at("scaler_89")[0], iTable.at("scaler_90")[0], iTable.at("scaler_91")[0], iTable.at("scaler_92")[0], iTable.at("scaler_93")[0], iTable.at("scaler_94")[0], iTable.at("scaler_95")[0], iTable.at("scaler_96")[0], iTable.at("scaler_97")[0], iTable.at("scaler_98")[0], iTable.at("scaler_99")[0], iTable.at("scaler_100")[0], iTable.at("scaler_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63, Feature_64, Feature_65, Feature_66, Feature_67, Feature_68, Feature_69, Feature_70, Feature_71, Feature_72, Feature_73, Feature_74, Feature_75, Feature_76, Feature_77, Feature_78, Feature_79, Feature_80, Feature_81, Feature_82, Feature_83, Feature_84, Feature_85, Feature_86, Feature_87, Feature_88, Feature_89, Feature_90, Feature_91, Feature_92, Feature_93, Feature_94, Feature_95, Feature_96, Feature_97, Feature_98, Feature_99);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_100.csv");
	return 0;
}
