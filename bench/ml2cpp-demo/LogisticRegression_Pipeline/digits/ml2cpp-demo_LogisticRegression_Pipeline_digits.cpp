// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LogisticRegression_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LogisticRegression_Pipeline_digits.exe ml2cpp-demo_LogisticRegression_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::any score_0 = 0.0 * scaler_2 + 0.08478277329827145 * scaler_3 + -0.09949202969283914 * scaler_4 + 0.2929499385144011 * scaler_5 + -0.045905167332963084 * scaler_6 + -0.44581887597689673 * scaler_7 + -0.24638749661185996 * scaler_8 + -0.0609529929061083 * scaler_9 + -0.006729081613259793 * scaler_10 + 0.036132218103167704 * scaler_11 + -0.19656071825015514 * scaler_12 + 0.22610764590200344 * scaler_13 + 0.1680853864000815 * scaler_14 + 0.19668604583575322 * scaler_15 + -0.11185225308918452 * scaler_16 + -0.09613961726057225 * scaler_17 + -0.00036853455169918976 * scaler_18 + 0.11024122429382699 * scaler_19 + 0.1838317602393152 * scaler_20 + -0.1003653202756763 * scaler_21 + -0.6005883808039766 * scaler_22 + 0.35558212791235166 * scaler_23 + 0.19922773571561123 * scaler_24 + -0.03611977228704548 * scaler_25 + -0.00010306569834714924 * scaler_26 + 0.19521994584259908 * scaler_27 + 0.2925480112935121 * scaler_28 + -0.5217394693482946 * scaler_29 + -1.1911376442034833 * scaler_30 + 0.08017705364333609 * scaler_31 + 0.34572678013723024 * scaler_32 + -0.0006393668398861162 * scaler_33 + 0.0 * scaler_34 + 0.31445985480350896 * scaler_35 + 0.26951483163200424 * scaler_36 + -0.5748634671978592 * scaler_37 + -0.9160645167762531 * scaler_38 + 0.16963721558230083 * scaler_39 + 0.2524616625966491 * scaler_40 + 0.0 * scaler_41 + -0.0019097437122635463 * scaler_42 + 0.08876931934339007 * scaler_43 + 0.5691334812701582 * scaler_44 + -0.24586761724157086 * scaler_45 + -0.3114969768305555 * scaler_46 + 0.2965157753905643 * scaler_47 + 0.15739308443452674 * scaler_48 + -0.0035911611024857667 * scaler_49 + -0.0010402818102896651 * scaler_50 + -0.25273069967875805 * scaler_51 + 0.23833155314451876 * scaler_52 + 0.17303972308972176 * scaler_53 + 0.28670625831185237 * scaler_54 + 0.1365910805263094 * scaler_55 + -0.17284745401818916 * scaler_56 + -0.12130431136851132 * scaler_57 + -3.761688962971205e-05 * scaler_58 + 0.04038615362614863 * scaler_59 + -0.09372580499157225 * scaler_60 + 0.19174190823290338 * scaler_61 + -0.16881802300741858 * scaler_62 + -0.12365980615830034 * scaler_63 + -0.1972737297763582 * scaler_64 + -0.10598079115399794 * scaler_65 + -0.03970575885181708;
	
			std::any logistic_0 = logistic(score_0);
	
			std::any score_1 = 0.0 * scaler_2 + 0.03828186655355734 * scaler_3 + 0.016039031305478617 * scaler_4 + 0.09270298951532599 * scaler_5 + -1.2331283942154847 * scaler_6 + 0.793773657977589 * scaler_7 + 0.257334933845034 * scaler_8 + -0.07969364203776086 * scaler_9 + -0.0005608891426192067 * scaler_10 + -0.9962806829391972 * scaler_11 + -0.8930690616482415 * scaler_12 + -0.36156710023010324 * scaler_13 + 0.755103773134 * scaler_14 + -0.01913789020636883 * scaler_15 + -0.4165708544145418 * scaler_16 + -0.08269704186706611 * scaler_17 + -0.0014037754831420042 * scaler_18 + 0.3935826683702811 * scaler_19 + 0.1345888329399059 * scaler_20 + 1.7974537726491588 * scaler_21 + 1.0885572122493818 * scaler_22 + -0.09299436481708633 * scaler_23 + -0.05160423215275703 * scaler_24 + -0.0383892492254245 * scaler_25 + -0.05668610150461611 * scaler_26 + 0.03600950241191027 * scaler_27 + 0.20082059780240116 * scaler_28 + 0.5056901007721706 * scaler_29 + 0.3650916338796838 * scaler_30 + 0.03301507467390173 * scaler_31 + 0.077370772376523 * scaler_32 + -2.676425817468592e-05 * scaler_33 + 0.0 * scaler_34 + -0.02607132166661918 * scaler_35 + 0.3433711535402507 * scaler_36 + -0.4417674602826602 * scaler_37 + 0.39454318273996464 * scaler_38 + 0.21098470460928445 * scaler_39 + -0.3646833986139568 * scaler_40 + 0.0 * scaler_41 + -0.0006202564466726909 * scaler_42 + -0.4590901931157794 * scaler_43 + -0.06015219181041438 * scaler_44 + 0.47670512824789785 * scaler_45 + 0.3401293052038254 * scaler_46 + -0.44043779362773205 * scaler_47 + -0.7542254975785656 * scaler_48 + -0.09214048298145074 * scaler_49 + -0.0013563849203015474 * scaler_50 + -0.20476568881068133 * scaler_51 + -0.16507517203780314 * scaler_52 + 0.5666367431753919 * scaler_53 + 0.3690599580243752 * scaler_54 + -0.25875501665208 * scaler_55 + -0.23336161598995278 * scaler_56 + 0.3481655899412766 * scaler_57 + -0.003919429583675842 * scaler_58 + -0.12019928608967125 * scaler_59 + -0.23675736111046114 * scaler_60 + -0.2889919851813163 * scaler_61 + 0.30374380629824843 * scaler_62 + 0.5076362345831605 * scaler_63 + 0.24394388549422033 * scaler_64 + 0.3430815815347289 * scaler_65 + -1.0104707682178329;
	
			std::any logistic_1 = logistic(score_1);
	
			std::any score_2 = 0.0 * scaler_2 + 0.09488507821333506 * scaler_3 + 0.005056872943661727 * scaler_4 + 0.13089941313304898 * scaler_5 + 0.1732202318618744 * scaler_6 + 0.028017524097851472 * scaler_7 + -0.023889654640736356 * scaler_8 + -0.0118571591613223 * scaler_9 + -0.05833346355034651 * scaler_10 + 0.6360041656315167 * scaler_11 + 0.24714460276788844 * scaler_12 + -0.16449614071740357 * scaler_13 + 0.6557226286323645 * scaler_14 + -0.06814502102754312 * scaler_15 + -0.06566363011961045 * scaler_16 + -0.029938658678827886 * scaler_17 + -0.010484561796992984 * scaler_18 + -0.01773512537475153 * scaler_19 + -0.12742772266232602 * scaler_20 + -0.5132899785267775 * scaler_21 + 0.3915623347736158 * scaler_22 + -0.11861377799317582 * scaler_23 + 0.4002805419627453 * scaler_24 + -0.0002464484021585581 * scaler_25 + 1.0153747743042984e-05 * scaler_26 + -0.611982755917216 * scaler_27 + -1.0991064629814682 * scaler_28 + -1.1530629362342317 * scaler_29 + -0.3914519695109281 * scaler_30 + 0.07953260036044718 * scaler_31 + 0.10418443415366226 * scaler_32 + -3.9528333316983243e-07 * scaler_33 + 0.0 * scaler_34 + -0.3644969748999184 * scaler_35 + -0.7922255348870655 * scaler_36 + -0.2567118803975642 * scaler_37 + 0.04941451863918497 * scaler_38 + -0.5800013784041467 * scaler_39 + -0.6142688281942361 * scaler_40 + 0.0 * scaler_41 + 3.497370840968615e-06 * scaler_42 + 0.27615434190459726 * scaler_43 + 0.2914248352238953 * scaler_44 + 0.9868734210981029 * scaler_45 + -0.8027092470437993 * scaler_46 + -0.7963154602566165 * scaler_47 + -0.401426640079235 * scaler_48 + 0.12738502650167305 * scaler_49 + 0.010133617791989546 * scaler_50 + 0.1646674584278135 * scaler_51 + 0.16285995887291263 * scaler_52 + 1.1472548665502025 * scaler_53 + 0.6471414000104293 * scaler_54 + 0.8897932291071555 * scaler_55 + 0.42481596470802147 * scaler_56 + 0.10288024214539672 * scaler_57 + 0.02925126268956715 * scaler_58 + 0.22192260556830778 * scaler_59 + 0.2948790350425521 * scaler_60 + 0.2858967060847716 * scaler_61 + 0.19471179177567685 * scaler_62 + 0.5161214390903168 * scaler_63 + 0.6707922677590679 * scaler_64 + 0.33726790430921316 * scaler_65 + -0.31457745949699434;
	
			std::any logistic_2 = logistic(score_2);
	
			std::any score_3 = 0.0 * scaler_2 + 0.21037013802824936 * scaler_3 + -0.3847271815714502 * scaler_4 + 0.20112737413518988 * scaler_5 + 0.855648190289654 * scaler_6 + 0.13959459377999575 * scaler_7 + 0.03503910643283645 * scaler_8 + 0.005822020707389939 * scaler_9 + -0.04523259319224084 * scaler_10 + 0.2196235054116004 * scaler_11 + 0.3545193025978078 * scaler_12 + 0.03115839703995846 * scaler_13 + 0.14515403597176949 * scaler_14 + 0.5170446622684093 * scaler_15 + 0.495826752375288 * scaler_16 + -0.13118863448751214 * scaler_17 + -0.038885727242704164 * scaler_18 + -0.1688308066617073 * scaler_19 + -1.0771541398066589 * scaler_20 + -1.0553465911988638 * scaler_21 + 0.32840382909949517 * scaler_22 + -0.4118905286877041 * scaler_23 + -0.13175528437458767 * scaler_24 + -0.00024857090863830423 * scaler_25 + 8.366056921067236e-06 * scaler_26 + -0.3194261597650859 * scaler_27 + -1.12736727044419 * scaler_28 + -0.3319892998853921 * scaler_29 + 0.6637300242048267 * scaler_30 + -0.9673559627478193 * scaler_31 + -0.8501537928526733 * scaler_32 + 1.3092183817369415e-05 * scaler_33 + 0.0 * scaler_34 + -0.22717327204042573 * scaler_35 + -0.46350263589204976 * scaler_36 + -0.04438508748204575 * scaler_37 + 0.3650684772210051 * scaler_38 + -0.1467941888776427 * scaler_39 + -0.060632115904361884 * scaler_40 + 0.0 * scaler_41 + 1.6540253712451483e-05 * scaler_42 + 0.013923761809188473 * scaler_43 + -0.7149965056584319 * scaler_44 + -1.1156807189520865 * scaler_45 + 0.20533203030772815 * scaler_46 + 0.6367052774056041 * scaler_47 + 0.6989171892954125 * scaler_48 + -0.11390709204723287 * scaler_49 + -0.00011611520917167199 * scaler_50 + 0.04320501586164508 * scaler_51 + -0.0881632427677713 * scaler_52 + -0.7303187336193887 * scaler_53 + 0.2700552881342537 * scaler_54 + 0.5280306556045783 * scaler_55 + 0.5041251249830936 * scaler_56 + 0.026421855517556523 * scaler_57 + -0.00035648139689561546 * scaler_58 + 0.2811685507379665 * scaler_59 + 0.3990293575358517 * scaler_60 + 0.1818861287643991 * scaler_61 + 0.09178402532820627 * scaler_62 + 0.12807432026028878 * scaler_63 + 0.08020154614386107 * scaler_64 + -0.10354751736883751 * scaler_65 + 0.08406565095408876;
	
			std::any logistic_3 = logistic(score_3);
	
			std::any score_4 = 0.0 * scaler_2 + -0.17837965456004484 * scaler_3 + -0.2840405487009849 * scaler_4 + -0.9526378992486858 * scaler_5 + -0.6446823483035394 * scaler_6 + -0.92523495138719 * scaler_7 + -0.5438471607828609 * scaler_8 + 0.1477666480934101 * scaler_9 + -0.005543057878699294 * scaler_10 + 0.1551950724932845 * scaler_11 + -0.2300723151467377 * scaler_12 + -0.3528651354085098 * scaler_13 + -0.6511352834259307 * scaler_14 + -0.6159202690594319 * scaler_15 + -0.32672924529904046 * scaler_16 + 0.10225255457102089 * scaler_17 + -0.000170225212721315 * scaler_18 + 0.10517688146613086 * scaler_19 + 0.340047236721312 * scaler_20 + 0.08360718509596207 * scaler_21 + 0.11401087957245669 * scaler_22 + 0.2638357130499834 * scaler_23 + -0.01376589543211545 * scaler_24 + 0.19822584058168158 * scaler_25 + 0.09469687802905348 * scaler_26 + 0.22743023723063976 * scaler_27 + 0.7482701720851894 * scaler_28 + 0.11524165415856581 * scaler_29 + -0.16995351643452403 * scaler_30 + -0.13586792117748836 * scaler_31 + 0.9846598280424687 * scaler_32 + 0.07269405179047565 * scaler_33 + 0.0 * scaler_34 + 0.4354819108692654 * scaler_35 + 0.2818895691035007 * scaler_36 + -0.15707282947887816 * scaler_37 + 0.6437719653847669 * scaler_38 + 0.4149026981277639 * scaler_39 + 0.565125408862979 * scaler_40 + 0.0 * scaler_41 + 0.013696442879043995 * scaler_42 + 0.9112798044272866 * scaler_43 + -0.024114690472840043 * scaler_44 + 1.0362067673607724 * scaler_45 + 0.7407383006827062 * scaler_46 + -0.009699090003855798 * scaler_47 + 0.02376679941830415 * scaler_48 + -0.008148183304730753 * scaler_49 + 0.0012167493021795974 * scaler_50 + 0.32307944298225494 * scaler_51 + -0.5757560372490778 * scaler_52 + 0.002135778416545656 * scaler_53 + 0.07780824780696902 * scaler_54 + -0.7105972016234792 * scaler_55 + -0.47797582556856616 * scaler_56 + -0.022483551184100337 * scaler_57 + -0.0011918747676922063 * scaler_58 + -0.37559698632266214 * scaler_59 + -0.1009034010047671 * scaler_60 + -0.6471940816713633 * scaler_61 + -0.37804361225763833 * scaler_62 + -0.5778721158830395 * scaler_63 + -0.21132019121567053 * scaler_64 + -0.04650791964591309 * scaler_65 + -0.44940707279451264;
	
			std::any logistic_4 = logistic(score_4);
	
			std::any score_5 = 0.0 * scaler_2 + 0.08784447336110218 * scaler_3 + 0.6905746259742785 * scaler_4 + 0.04413627021660309 * scaler_5 + 0.5718611702231504 * scaler_6 + 0.5958749818600103 * scaler_7 + 0.7365609827155248 * scaler_8 + -0.15360634746220111 * scaler_9 + 0.05627559787503056 * scaler_10 + -0.11700340166267292 * scaler_11 + 0.4414731622090801 * scaler_12 + 0.0625699330886941 * scaler_13 + -0.33509178630441944 * scaler_14 + -0.5942198724720221 * scaler_15 + 0.18549894068412504 * scaler_16 + 0.16310408637929227 * scaler_17 + -0.00908657328009379 * scaler_18 + 0.09582553146282236 * scaler_19 + 0.42790305692422814 * scaler_20 + -0.24222095797084348 * scaler_21 + -1.0903599387682936 * scaler_22 + -1.4723891030309537 * scaler_23 + -1.092850566509643 * scaler_24 + -0.04665772656818513 * scaler_25 + -0.031066449744026 * scaler_26 + 0.45697413488004807 * scaler_27 + 0.4425529183695058 * scaler_28 + 0.1122045372940673 * scaler_29 + 0.3794545956020545 * scaler_30 + 0.023092881231588692 * scaler_31 + -0.15697281650600456 * scaler_32 + -4.885243258328204e-05 * scaler_33 + 0.0 * scaler_34 + 0.06016372405143636 * scaler_35 + 0.29831867113094523 * scaler_36 + -0.3684687628136066 * scaler_37 + -0.2711227809613608 * scaler_38 + -0.0058832530006264865 * scaler_39 + 0.2492447897239719 * scaler_40 + 0.0 * scaler_41 + -1.6196583471981432e-05 * scaler_42 + -0.32964483135640366 * scaler_43 + -0.7017202142177111 * scaler_44 + -0.4442518309234978 * scaler_45 + -0.14911175272623511 * scaler_46 + -0.009235606415193694 * scaler_47 + -0.006656728823679533 * scaler_48 + -0.004642083790127351 * scaler_49 + -6.56757770053103e-06 * scaler_50 + -0.20436856017440228 * scaler_51 + -0.1270372276055823 * scaler_52 + -0.49888790156999974 * scaler_53 + -0.00965402820639349 * scaler_54 + -0.17421525447588157 * scaler_55 + -0.18711702525611013 * scaler_56 + -0.02236472378038848 * scaler_57 + 1.2202299623314694e-06 * scaler_58 + 0.38660279945692244 * scaler_59 + 0.645821608232902 * scaler_60 + 0.5686282467636677 * scaler_61 + 0.047396949767533385 * scaler_62 + -0.18809103879398265 * scaler_63 + -0.33266413514547327 * scaler_64 + -0.1139080794850016 * scaler_65 + -0.05770865580510993;
	
			std::any logistic_5 = logistic(score_5);
	
			std::any score_6 = 0.0 * scaler_2 + -0.08280997372386871 * scaler_3 + -0.3398033239977213 * scaler_4 + -0.206002788084988 * scaler_5 + -0.25556160062171673 * scaler_6 + -0.07005278811675505 * scaler_7 + -0.25628875607995716 * scaler_8 + -0.00019952223893746141 * scaler_9 + -0.0011322262830070595 * scaler_10 + -0.414259190012203 * scaler_11 + -0.27664668847749574 * scaler_12 + 0.11350370653490913 * scaler_13 + -0.7770726023569108 * scaler_14 + -0.3188873451688104 * scaler_15 + -0.06895629567003257 * scaler_16 + -0.0009286233217180155 * scaler_17 + -0.0005144682195401051 * scaler_18 + -0.32145127146503116 * scaler_19 + 0.16305534949322578 * scaler_20 + 0.08143488829429156 * scaler_21 + -0.7243274096783962 * scaler_22 + -1.0078905735227237 * scaler_23 + -0.29317316734898413 * scaler_24 + -0.0029005176475285833 * scaler_25 + -0.0018408815863286629 * scaler_26 + 0.19488713094529211 * scaler_27 + 0.20316219918889367 * scaler_28 + 0.19899507162496413 * scaler_29 + -0.3130496499826741 * scaler_30 + -0.25378847689976264 * scaler_31 + -0.3110137260279991 * scaler_32 + -8.31818538703918e-05 * scaler_33 + 0.0 * scaler_34 + 0.5360371410293198 * scaler_35 + 0.6170903415685052 * scaler_36 + 0.49014302611015087 * scaler_37 + -0.06454386042694124 * scaler_38 + -0.07474210130849647 * scaler_39 + 0.21969682048735903 * scaler_40 + 0.0 * scaler_41 + -0.010905090639239076 * scaler_42 + -0.15074988110669404 * scaler_43 + 0.9629044088564616 * scaler_44 + 0.2929746783510578 * scaler_45 + 0.3483740457662257 * scaler_46 + 0.17835488251848297 * scaler_47 + 0.5874993024965453 * scaler_48 + 0.13007883635807221 * scaler_49 + -0.0005044182519052682 * scaler_50 + -0.13091503358418885 * scaler_51 + 0.5137417058449977 * scaler_52 + 0.2965375317830652 * scaler_53 + -0.06001601877397048 * scaler_54 + 0.6435762491685988 * scaler_55 + 0.4317650333936447 * scaler_56 + -0.2880190340306641 * scaler_57 + -2.6037263088526162e-05 * scaler_58 + -0.06659657088987284 * scaler_59 + -0.36356045177247387 * scaler_60 + -0.27890494711527314 * scaler_61 + 0.09173283803078444 * scaler_62 + 0.45868577760400836 * scaler_63 + 0.029578023982086043 * scaler_64 + -0.26272777175618806 * scaler_65 + -0.38331182030996036;
	
			std::any logistic_6 = logistic(score_6);
	
			std::any score_7 = 0.0 * scaler_2 + 0.06968970996836069 * scaler_3 + 0.29021255462250933 * scaler_4 + 0.2028333412265435 * scaler_5 + 0.2178819319854621 * scaler_6 + 0.12910661116811703 * scaler_7 + 0.39079657827176956 * scaler_8 + 0.2011192523685853 * scaler_9 + -6.393822178714258e-05 * scaler_10 + 0.1561049743508732 * scaler_11 + 0.41894190863405617 * scaler_12 + 0.2967996134425815 * scaler_13 + 0.7873024970902559 * scaler_14 + -0.08910678023073504 * scaler_15 + -0.04794711773309472 * scaler_16 + 0.06048577929162209 * scaler_17 + -0.0002796113712277655 * scaler_18 + -0.472770816938146 * scaler_19 + -0.7371734573535142 * scaler_20 + -0.640385651763791 * scaler_21 + 0.12488784498726369 * scaler_22 + 0.3716361981231683 * scaler_23 + 0.2450468052633227 * scaler_24 + 0.06192985027302929 * scaler_25 + -0.0003116911861198826 * scaler_26 + -0.42972751158241485 * scaler_27 + -0.06518876213015158 * scaler_28 + -0.8311045065335305 * scaler_29 + -0.021158738004380822 * scaler_30 + 0.34017319834632337 * scaler_31 + 0.3944742598158037 * scaler_32 + -0.0600618108315154 * scaler_33 + 0.0 * scaler_34 + 0.3332415705475752 * scaler_35 + 0.023747932406523283 * scaler_36 + -0.09186702804956853 * scaler_37 + 0.40259027713452206 * scaler_38 + 0.6000130927430367 * scaler_39 + 0.61165095416536 * scaler_40 + 0.0 * scaler_41 + -8.654642650350098e-05 * scaler_42 + -0.11239168561299975 * scaler_43 + -0.056910716743973765 * scaler_44 + 0.30615526478010063 * scaler_45 + 0.38910629022903526 * scaler_46 + -0.03351246863154722 * scaler_47 + -0.10120164490512776 * scaler_48 + -0.0014122896837222287 * scaler_49 + -8.056969934537417e-05 * scaler_50 + -0.2775697652779648 * scaler_51 + -0.08700970161312584 * scaler_52 + 0.2389393467719645 * scaler_53 + -0.66959209425908 * scaler_54 + -0.9597779730934242 * scaler_55 + -0.2852373862950309 * scaler_56 + -0.01534275002256544 * scaler_57 + -0.00019141494478885985 * scaler_58 + 0.0016347420069683983 * scaler_59 + 0.052462619397458554 * scaler_60 + -0.5904473811301295 * scaler_61 + -0.6957490131589432 * scaler_62 + -0.6564058514756358 * scaler_63 + -0.21326576479985565 * scaler_64 + -0.03312474809930725 * scaler_65 + 0.42104336781254914;
	
			std::any logistic_7 = logistic(score_7);
	
			std::any score_8 = 0.0 * scaler_2 + -0.04286341236175799 * scaler_3 + 0.1293341854005821 * scaler_4 + -0.37116235810132264 * scaler_5 + 0.02601353202929352 * scaler_6 + 0.10991036451299727 * scaler_7 + -0.5793401105073529 * scaler_8 + -0.03298353226853781 * scaler_9 + 0.08462286440742589 * scaler_10 + -0.14891379372191102 * scaler_11 + 0.08093919996749416 * scaler_12 + -0.03459711382302911 * scaler_13 + -0.634204040705705 * scaler_14 + 0.5880306134520535 * scaler_15 + -0.02133385385937041 * scaler_16 + -0.03800346634721543 * scaler_17 + 0.09694837576702246 * scaler_18 + 0.3170875156499446 * scaler_19 + 0.30570649252125726 * scaler_20 + 0.16027804573365342 * scaler_21 + -0.1177914917274256 * scaler_22 + 0.5139407627129269 * scaler_23 + 0.5807170626773215 * scaler_24 + -0.023502958529689002 * scaler_25 + -0.00464621518000391 * scaler_26 + 0.03556348652977071 * scaler_27 + -0.2371732163407776 * scaler_28 + 0.8852648080611771 * scaler_29 + 0.03651247774310379 * scaler_30 + -0.10759766828896739 * scaler_31 + -0.506585193827972 * scaler_32 + -0.0006323173235066134 * scaler_33 + 0.0 * scaler_34 + -0.3290482525570244 * scaler_35 + -0.37531659628715786 * scaler_36 + 1.0608279757431767 * scaler_37 + 0.16420959312192457 * scaler_38 + -0.626967798997881 * scaler_39 + -0.863789104855679 * scaler_40 + 0.0 * scaler_41 + -0.0002629173719690465 * scaler_42 + -0.017734229511989875 * scaler_43 + 0.7236753019619305 * scaler_44 + 0.48742475230368676 * scaler_45 + 0.09939525602736976 * scaler_46 + 0.47577388383289393 * scaler_47 + 0.26110330812227245 * scaler_48 + -0.0342767803299346 * scaler_49 + -0.008287194758117634 * scaler_50 + 0.18495123488403392 * scaler_51 + 0.4738570378458865 * scaler_52 + -0.8192363508241364 * scaler_53 + -0.40016800938212926 * scaler_54 + 0.39583513537251125 * scaler_55 + 0.06570754095193515 * scaler_56 + -0.15477392984410115 * scaler_57 + -0.023536419318929774 * scaler_58 + -0.04751319366735912 * scaler_59 + -0.7504619497874556 * scaler_60 + 0.297292102615806 * scaler_61 + 0.4083814096457381 * scaler_62 + -0.2798866623355101 * scaler_63 + -0.18593356805915218 * scaler_64 + -0.0910692491805023 * scaler_65 + 1.9291232852050386;
	
			std::any logistic_8 = logistic(score_8);
	
			std::any score_9 = 0.0 * scaler_2 + -0.28180099877721015 * scaler_3 + -0.023154186283525283 * scaler_4 + 0.5651537186938953 * scaler_5 + 0.33465245408427535 * scaler_6 + -0.3551711179157175 * scaler_7 + 0.23002157735760406 * scaler_8 + -0.015414725094514563 * scaler_9 + -0.02330321240048007 * scaler_10 + 0.47339713234554576 * scaler_11 + 0.05333060734630837 * scaler_12 + 0.18338619417090585 * scaler_13 + -0.1138646084355127 * scaler_14 + 0.4036558566087125 * scaler_15 + 0.3777275571254519 * scaler_16 + 0.05305362172097714 * scaler_17 + -0.035754898608877206 * scaler_18 + -0.041125800803359945 * scaler_19 + 0.38662259098325524 * scaler_20 + 0.42883460796287276 * scaler_21 + 0.48564512029587115 * scaler_22 + 1.598783546253223 * scaler_23 + 0.1578770001990874 * scaler_24 + -0.11209044728603226 * scaler_25 + -6.099293428679214e-05 * scaler_26 + 0.21505198942447082 * scaler_27 + 0.6414818131570794 * scaler_28 + 1.0205000400904787 * scaler_29 + 0.6419627867063114 * scaler_30 + 0.90861922085844 * scaler_31 + -0.08169054531102904 * scaler_32 + -0.011214455151420494 * scaler_33 + 0.0 * scaler_34 + -0.7325943801370973 * scaler_35 + -0.20288773231545287 * scaler_36 + 0.3841655138488404 * scaler_37 + -0.7678668560768221 * scaler_38 + 0.038851009526416895 * scaler_39 + 0.005193811731942667 * scaler_40 + 0.0 * scaler_41 + 8.427067653258883e-05 * scaler_42 + -0.22051640678058118 * scaler_43 + -0.9892437084090624 * scaler_44 + -1.7805398450244634 * scaler_45 + -0.8597572516163087 * scaler_46 + -0.298149400212594 * scaler_47 + -0.4651691723804449 * scaler_48 + 0.0006542103799424342 * scaler_49 + 4.116513265151349e-05 * scaler_50 + 0.35444659537024675 * scaler_51 + -0.34574887443495794 * scaler_52 + -0.3761010037733711 * scaler_53 + -0.5113410016663059 * scaler_54 + -0.4904809039342831 * scaler_55 + -0.06987435690884618 * scaler_56 + 0.14682061262610094 * scaler_57 + 6.791245176757894e-06 * scaler_58 + -0.3218088144267597 * scaler_59 + 0.1532163484579624 * scaler_60 + 0.2800933026365446 * scaler_61 + 0.10485982757781409 * scaler_62 + 0.21539770310869322 * scaler_63 + 0.11594166561728031 * scaler_64 + 0.0765165908458058 * scaler_65 + -0.1790507684954652;
	
			std::any logistic_9 = logistic(score_9);
	
			tTable lScores = tTable();
	
			lScores["Score"] = { 
				score_0,
				score_1,
				score_2,
				score_3,
				score_4,
				score_5,
				score_6,
				score_7,
				score_8,
				score_9
			};
	
			tTable lSoftMaxTable = soft_max(lScores, false);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
