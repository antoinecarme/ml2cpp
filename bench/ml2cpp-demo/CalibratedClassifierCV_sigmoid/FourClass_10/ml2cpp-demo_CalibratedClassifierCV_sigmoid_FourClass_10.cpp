// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : CalibratedClassifierCV_sigmoid
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_CalibratedClassifierCV_sigmoid_FourClass_10.exe ml2cpp-demo_CalibratedClassifierCV_sigmoid_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace BestEstimator_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.2, 0.0, 0.8, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 18 ,  {0.0, 0.875, 0.0, 0.125 }} ,
				{ 19 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.5580734312534332) ? ( (Feature_3 <= -1.7759541869163513) ? ( 2 ) : ( (Feature_4 <= -0.35484130680561066) ? ( (Feature_7 <= -1.3945664763450623) ? ( 5 ) : ( (Feature_1 <= 1.2103608548641205) ? ( 7 ) : ( 8 ) ) ) : ( 9 ) ) ) : ( (Feature_7 <= 0.362348735332489) ? ( (Feature_1 <= -0.5951647609472275) ? ( 12 ) : ( 13 ) ) : ( (Feature_7 <= 3.131764531135559) ? ( (Feature_9 <= -1.589853823184967) ? ( 16 ) : ( (Feature_5 <= 1.7956550121307373) ? ( 18 ) : ( 19 ) ) ) : ( 20 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(2.549247031260632 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.7882076040738046),
				logistic(1.596529418727809 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.5654279247168081),
				logistic(1.5421687240963162 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.3957623211185077),
				logistic(2.458665819722004 * coalesce( std::any() , lNodeValue [ 3 ] ) + -2.131680397837361) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_0
	

	namespace BestEstimator_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 13 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.3333333333333333, 0.0, 0.6666666666666666 }} ,
				{ 21 ,  {0.0, 0.3333333333333333, 0.6666666666666666, 0.0 }} ,
				{ 23 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.6375722885131836) ? ( (Feature_4 <= -0.35484130680561066) ? ( (Feature_1 <= 0.504041001200676) ? ( (Feature_5 <= 0.059238336980342865) ? ( 4 ) : ( 5 ) ) : ( (Feature_2 <= -1.900172233581543) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_3 <= -2.2557533979415894) ? ( 10 ) : ( (Feature_2 <= -2.539427638053894) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_4 <= -0.14806882664561272) ? ( (Feature_7 <= 0.1897896433947608) ? ( 16 ) : ( (Feature_8 <= 0.33265136182308197) ? ( 18 ) : ( (Feature_8 <= 0.799442321062088) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_9 <= -1.4294551014900208) ? ( 23 ) : ( (Feature_8 <= -0.8872426450252533) ? ( (Feature_6 <= -0.9329301416873932) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(2.905345084762549 * coalesce( std::any() , lNodeValue [ 0 ] ) + -2.0700246142981693),
				logistic(2.4518409127002156 * coalesce( std::any() , lNodeValue [ 1 ] ) + -2.0071873789295784),
				logistic(1.307588792019992 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.515381085469717),
				logistic(3.505003484432656 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.7132439237219161) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_1
	

	namespace BestEstimator_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.6, 0.0, 0.2, 0.2 }} ,
				{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 17 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 21 ,  {0.14285714285714285, 0.5714285714285714, 0.0, 0.2857142857142857 }} ,
				{ 22 ,  {0.0, 0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.6454985737800598) ? ( (Feature_3 <= -1.9080277681350708) ? ( 2 ) : ( (Feature_8 <= -1.3765310645103455) ? ( 4 ) : ( (Feature_8 <= 0.23840734362602234) ? ( (Feature_1 <= 0.030811965465545654) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) ) ) : ( (Feature_7 <= -0.234144888818264) ? ( (Feature_1 <= -0.18966388702392578) ? ( 12 ) : ( 13 ) ) : ( (Feature_1 <= 2.708956480026245) ? ( (Feature_9 <= 0.10254730749875307) ? ( (Feature_9 <= -1.589853823184967) ? ( 17 ) : ( 18 ) ) : ( (Feature_4 <= -1.0124135315418243) ? ( 20 ) : ( 21 ) ) ) : ( 22 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(1.655312265996893 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.9465359156649764),
				logistic(1.4842829120382715 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.4260945474099451),
				logistic(0.18516420736990685 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.1227740857433035),
				logistic(2.3275370279747007 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.178817079014264) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_2
	

	namespace BestEstimator_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 8 ,  {0.4, 0.0, 0.4, 0.2 }} ,
				{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 11 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 16 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
				{ 21 ,  {1.0, 0.0, 0.0, 0.0 }} ,
				{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
				{ 23 ,  {0.0, 0.0, 1.0, 0.0 }} ,
				{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.6375722885131836) ? ( (Feature_4 <= -0.22726380452513695) ? ( (Feature_8 <= -1.3765310645103455) ? ( 3 ) : ( (Feature_7 <= -2.517311692237854) ? ( 5 ) : ( (Feature_3 <= -1.1015613675117493) ? ( 7 ) : ( 8 ) ) ) ) : ( (Feature_5 <= 0.28215067833662033) ? ( 10 ) : ( 11 ) ) ) : ( (Feature_7 <= 0.44504228234291077) ? ( (Feature_4 <= -0.13814806938171387) ? ( 14 ) : ( (Feature_7 <= 0.07134207338094711) ? ( 16 ) : ( 17 ) ) ) : ( (Feature_8 <= 1.035046935081482) ? ( (Feature_7 <= 3.2653926610946655) ? ( (Feature_1 <= -0.6816645860671997) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( 24 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(0.6541345978264838 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.431848418349633),
				logistic(1.3969638678099034 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.5654274312060947),
				logistic(0.7771003168569949 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.2745028430865424),
				logistic(1.948907765544585 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.5260515838033688) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_3
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		std::vector<tTable> lBaseScores = { 
			BestEstimator_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_calibrated_scores(lBaseScores, {"Proba", "Score"});


		tTable lTable = lAggregatedTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
