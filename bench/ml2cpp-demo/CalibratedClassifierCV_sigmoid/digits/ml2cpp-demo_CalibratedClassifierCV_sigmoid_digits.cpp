// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : CalibratedClassifierCV_sigmoid
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_CalibratedClassifierCV_sigmoid_digits.exe ml2cpp-demo_CalibratedClassifierCV_sigmoid_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace BestEstimator_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 10 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 11 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
				{ 17 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0 }} ,
				{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
				{ 24 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
				{ 30 ,  {0.0, 0.6774193548387096, 0.06451612903225806, 0.03225806451612903, 0.16129032258064516, 0.0, 0.06451612903225806, 0.0, 0.0, 0.0 }} ,
				{ 31 ,  {0.0, 0.02631578947368421, 0.5789473684210527, 0.18421052631578946, 0.0, 0.02631578947368421, 0.0, 0.07894736842105263, 0.07894736842105263, 0.02631578947368421 }} ,
				{ 33 ,  {0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
				{ 34 ,  {0.0, 0.0, 0.0, 0.011111111111111112, 0.0, 0.9888888888888889, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 37 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 38 ,  {0.0, 0.7, 0.0, 0.0, 0.0, 0.1, 0.2, 0.0, 0.0, 0.0 }} ,
				{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.01020408163265306, 0.9897959183673469, 0.0, 0.0, 0.0 }} ,
				{ 41 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 45 ,  {0.0, 0.018691588785046728, 0.0, 0.018691588785046728, 0.04672897196261682, 0.0, 0.0, 0.794392523364486, 0.037383177570093455, 0.08411214953271028 }} ,
				{ 46 ,  {0.0, 0.1875, 0.25, 0.25, 0.0, 0.0625, 0.0, 0.0, 0.125, 0.125 }} ,
				{ 48 ,  {0.0, 0.05917159763313609, 0.011834319526627219, 0.4970414201183432, 0.011834319526627219, 0.023668639053254437, 0.0, 0.0, 0.0650887573964497, 0.33136094674556216 }} ,
				{ 49 ,  {0.01195219123505976, 0.24701195219123506, 0.2868525896414343, 0.0398406374501992, 0.035856573705179286, 0.0, 0.00398406374501992, 0.03187250996015936, 0.3147410358565737, 0.027888446215139442 }} ,
				{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
				{ 53 ,  {0.0, 0.014084507042253521, 0.0, 0.0, 0.971830985915493, 0.0, 0.014084507042253521, 0.0, 0.0, 0.0 }} ,
				{ 54 ,  {0.125, 0.375, 0.0, 0.0, 0.125, 0.0, 0.125, 0.25, 0.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = (Feature_36 <= 0.5) ? ( (Feature_28 <= 2.5) ? ( (Feature_21 <= 0.5) ? ( (Feature_5 <= 10.0) ? ( (Feature_41 <= 5.5) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_62 <= 7.5) ? ( (Feature_50 <= 2.5) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (Feature_21 <= 9.5) ? ( (Feature_5 <= 2.5) ? ( (Feature_42 <= 5.5) ? ( 16 ) : ( 17 ) ) : ( (Feature_28 <= 6.5) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_33 <= 1.5) ? ( 22 ) : ( (Feature_59 <= 13.5) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_21 <= 0.5) ? ( (Feature_42 <= 8.5) ? ( (Feature_5 <= 2.5) ? ( (Feature_9 <= 0.5) ? ( 30 ) : ( 31 ) ) : ( (Feature_2 <= 0.5) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_54 <= 0.5) ? ( (Feature_59 <= 11.5) ? ( 37 ) : ( 38 ) ) : ( (Feature_9 <= 3.0) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_33 <= 5.5) ? ( (Feature_60 <= 7.5) ? ( (Feature_53 <= 4.5) ? ( 45 ) : ( 46 ) ) : ( (Feature_43 <= 1.5) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_26 <= 9.0) ? ( 51 ) : ( (Feature_13 <= 13.5) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(8.726464942532784 * coalesce( std::any() , lNodeValue [ 0 ] ) + -5.872720111411945),
				logistic(7.045841080503326 * coalesce( std::any() , lNodeValue [ 1 ] ) + -3.2655086553383144),
				logistic(11.075844650366204 * coalesce( std::any() , lNodeValue [ 2 ] ) + -4.138530875996826),
				logistic(8.381843175730353 * coalesce( std::any() , lNodeValue [ 3 ] ) + -4.082860045335468),
				logistic(5.169852539633868 * coalesce( std::any() , lNodeValue [ 4 ] ) + -3.5352887545441365),
				logistic(7.687769649261834 * coalesce( std::any() , lNodeValue [ 5 ] ) + -4.058330409906762),
				logistic(8.443665150590007 * coalesce( std::any() , lNodeValue [ 6 ] ) + -4.376549641944667),
				logistic(7.596200342996632 * coalesce( std::any() , lNodeValue [ 7 ] ) + -4.8536079641492),
				logistic(9.516976847918325 * coalesce( std::any() , lNodeValue [ 8 ] ) + -3.7943603874763485),
				logistic(6.756594781623264 * coalesce( std::any() , lNodeValue [ 9 ] ) + -3.587761113099591) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_0
	

	namespace BestEstimator_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 5 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
				{ 10 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
				{ 16 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
				{ 22 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 23 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 28 ,  {0.0, 0.0, 0.5641025641025641, 0.20512820512820512, 0.0, 0.05128205128205128, 0.0, 0.10256410256410256, 0.05128205128205128, 0.02564102564102564 }} ,
				{ 29 ,  {0.0, 0.7142857142857143, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0 }} ,
				{ 31 ,  {0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
				{ 32 ,  {0.0, 0.0, 0.0, 0.0, 0.011627906976744186, 0.9883720930232558, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 35 ,  {0.0, 0.7777777777777778, 0.2222222222222222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 36 ,  {0.0, 0.0, 0.0, 0.0, 0.5882352941176471, 0.11764705882352941, 0.29411764705882354, 0.0, 0.0, 0.0 }} ,
				{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
				{ 39 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 43 ,  {0.0, 0.0, 0.013333333333333334, 0.05333333333333334, 0.013333333333333334, 0.0, 0.0, 0.88, 0.04, 0.0 }} ,
				{ 44 ,  {0.0, 0.05263157894736842, 0.0, 0.0, 0.15789473684210525, 0.05263157894736842, 0.0, 0.2631578947368421, 0.0, 0.47368421052631576 }} ,
				{ 46 ,  {0.0, 0.07017543859649122, 0.023391812865497075, 0.4853801169590643, 0.0, 0.017543859649122806, 0.0, 0.011695906432748537, 0.06432748538011696, 0.32748538011695905 }} ,
				{ 47 ,  {0.008333333333333333, 0.23333333333333334, 0.30416666666666664, 0.041666666666666664, 0.0125, 0.0, 0.004166666666666667, 0.05, 0.3333333333333333, 0.0125 }} ,
				{ 50 ,  {0.0, 0.03571428571428571, 0.0, 0.0, 0.9642857142857143, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.5, 0.0, 0.0 }} ,
				{ 53 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
				{ 54 ,  {0.0, 0.5238095238095238, 0.047619047619047616, 0.0, 0.23809523809523808, 0.0, 0.0, 0.047619047619047616, 0.14285714285714285, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = (Feature_36 <= 0.5) ? ( (Feature_42 <= 6.0) ? ( (Feature_21 <= 7.0) ? ( (Feature_22 <= 4.0) ? ( 4 ) : ( 5 ) ) : ( (Feature_13 <= 1.5) ? ( 7 ) : ( (Feature_9 <= 9.5) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_13 <= 1.5) ? ( (Feature_54 <= 2.5) ? ( 13 ) : ( (Feature_57 <= 2.0) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_37 <= 1.0) ? ( (Feature_28 <= 2.5) ? ( 19 ) : ( 20 ) ) : ( (Feature_26 <= 2.0) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_21 <= 0.5) ? ( (Feature_42 <= 8.5) ? ( (Feature_5 <= 2.0) ? ( (Feature_19 <= 12.5) ? ( 28 ) : ( 29 ) ) : ( (Feature_18 <= 4.5) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_54 <= 4.0) ? ( (Feature_45 <= 1.5) ? ( 35 ) : ( 36 ) ) : ( (Feature_58 <= 9.0) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_33 <= 3.5) ? ( (Feature_60 <= 5.5) ? ( (Feature_26 <= 12.5) ? ( 43 ) : ( 44 ) ) : ( (Feature_43 <= 1.5) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_13 <= 9.5) ? ( (Feature_2 <= 5.0) ? ( 50 ) : ( 51 ) ) : ( (Feature_19 <= 3.0) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(6.808562685099224 * coalesce( std::any() , lNodeValue [ 0 ] ) + -4.423086165823934),
				logistic(6.694331089594438 * coalesce( std::any() , lNodeValue [ 1 ] ) + -3.364745233834426),
				logistic(9.870166456787333 * coalesce( std::any() , lNodeValue [ 2 ] ) + -4.0407081165720244),
				logistic(8.165048199313569 * coalesce( std::any() , lNodeValue [ 3 ] ) + -3.9968338607809186),
				logistic(6.9693362007168185 * coalesce( std::any() , lNodeValue [ 4 ] ) + -3.791996070960865),
				logistic(7.265636987407362 * coalesce( std::any() , lNodeValue [ 5 ] ) + -4.770962624129486),
				logistic(9.30678334204617 * coalesce( std::any() , lNodeValue [ 6 ] ) + -4.36821904429201),
				logistic(6.262147485601795 * coalesce( std::any() , lNodeValue [ 7 ] ) + -3.960029702098436),
				logistic(8.48860135835143 * coalesce( std::any() , lNodeValue [ 8 ] ) + -3.7994513041486884),
				logistic(7.406993232779894 * coalesce( std::any() , lNodeValue [ 9 ] ) + -3.246818587727694) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_1
	

	namespace BestEstimator_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.0, 0.8636363636363636, 0.09090909090909091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045454545454545456, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 0.0, 0.1, 0.4, 0.2, 0.2, 0.1, 0.0, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.16666666666666666 }} ,
				{ 9 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 18 ,  {0.2, 0.0, 0.0, 0.0, 0.0, 0.2, 0.6, 0.0, 0.0, 0.0 }} ,
				{ 19 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 21 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
				{ 25 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 30 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 31 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 33 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 34 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 36 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 38 ,  {0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333 }} ,
				{ 39 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
				{ 43 ,  {0.0, 0.0, 0.013888888888888888, 0.9861111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 44 ,  {0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.75 }} ,
				{ 46 ,  {0.0, 0.044444444444444446, 0.0, 0.35555555555555557, 0.13333333333333333, 0.24444444444444444, 0.022222222222222223, 0.044444444444444446, 0.06666666666666667, 0.08888888888888889 }} ,
				{ 47 ,  {0.03731343283582089, 0.1044776119402985, 0.0, 0.03731343283582089, 0.007462686567164179, 0.007462686567164179, 0.0, 0.007462686567164179, 0.08955223880597014, 0.7089552238805971 }} ,
				{ 50 ,  {0.0, 0.01904761904761905, 0.02857142857142857, 0.0380952380952381, 0.009523809523809525, 0.0, 0.0, 0.8666666666666667, 0.02857142857142857, 0.009523809523809525 }} ,
				{ 51 ,  {0.0, 0.09523809523809523, 0.0, 0.0, 0.5238095238095238, 0.047619047619047616, 0.0, 0.19047619047619047, 0.047619047619047616, 0.09523809523809523 }} ,
				{ 53 ,  {0.0, 0.23853211009174313, 0.3486238532110092, 0.03669724770642202, 0.0, 0.0, 0.0, 0.013761467889908258, 0.3486238532110092, 0.013761467889908258 }} ,
				{ 54 ,  {0.013157894736842105, 0.15789473684210525, 0.0, 0.0, 0.7631578947368421, 0.0, 0.013157894736842105, 0.0, 0.05263157894736842, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = (Feature_21 <= 0.5) ? ( (Feature_42 <= 9.5) ? ( (Feature_5 <= 2.5) ? ( (Feature_9 <= 3.0) ? ( (Feature_37 <= 8.0) ? ( 5 ) : ( 6 ) ) : ( (Feature_52 <= 8.0) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_18 <= 4.5) ? ( (Feature_29 <= 7.0) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_54 <= 0.5) ? ( (Feature_37 <= 5.0) ? ( (Feature_28 <= 7.0) ? ( 18 ) : ( 19 ) ) : ( (Feature_5 <= 14.0) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_58 <= 9.0) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_28 <= 0.5) ? ( (Feature_36 <= 3.5) ? ( (Feature_62 <= 3.5) ? ( (Feature_59 <= 4.5) ? ( 30 ) : ( 31 ) ) : ( (Feature_3 <= 8.0) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_10 <= 4.5) ? ( 36 ) : ( (Feature_6 <= 0.5) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_43 <= 2.5) ? ( (Feature_26 <= 0.5) ? ( (Feature_19 <= 10.5) ? ( 43 ) : ( 44 ) ) : ( (Feature_21 <= 9.5) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_60 <= 7.5) ? ( (Feature_25 <= 3.5) ? ( 50 ) : ( 51 ) ) : ( (Feature_33 <= 1.5) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(7.598743529028779 * coalesce( std::any() , lNodeValue [ 0 ] ) + -3.95346405990873),
				logistic(5.020694200729026 * coalesce( std::any() , lNodeValue [ 1 ] ) + -3.082795911634527),
				logistic(7.465570512281539 * coalesce( std::any() , lNodeValue [ 2 ] ) + -3.4572967774468983),
				logistic(6.964395915158884 * coalesce( std::any() , lNodeValue [ 3 ] ) + -3.5482983122746403),
				logistic(5.949319513613609 * coalesce( std::any() , lNodeValue [ 4 ] ) + -3.7524148154439305),
				logistic(7.368799281862781 * coalesce( std::any() , lNodeValue [ 5 ] ) + -4.186808857713144),
				logistic(7.0579139309235925 * coalesce( std::any() , lNodeValue [ 6 ] ) + -4.324550273611683),
				logistic(4.9206893418216096 * coalesce( std::any() , lNodeValue [ 7 ] ) + -3.2176744504830115),
				logistic(9.09962614511666 * coalesce( std::any() , lNodeValue [ 8 ] ) + -3.854705497374744),
				logistic(6.6308425945803675 * coalesce( std::any() , lNodeValue [ 9 ] ) + -4.130860823669919) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_2
	

	namespace BestEstimator_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
				{ 10 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
				{ 15 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666 }} ,
				{ 17 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
				{ 18 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 21 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
				{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
				{ 30 ,  {0.0, 0.7058823529411765, 0.0, 0.029411764705882353, 0.11764705882352941, 0.029411764705882353, 0.08823529411764706, 0.029411764705882353, 0.0, 0.0 }} ,
				{ 31 ,  {0.0, 0.0, 0.6176470588235294, 0.23529411764705882, 0.0, 0.029411764705882353, 0.0, 0.08823529411764706, 0.029411764705882353, 0.0 }} ,
				{ 33 ,  {0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 34 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 37 ,  {0.0, 0.0, 0.0, 0.0, 0.9375, 0.0, 0.0625, 0.0, 0.0, 0.0 }} ,
				{ 38 ,  {0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0 }} ,
				{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.010416666666666666, 0.9895833333333334, 0.0, 0.0, 0.0 }} ,
				{ 41 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 45 ,  {0.0, 0.010416666666666666, 0.0, 0.03125, 0.020833333333333332, 0.0, 0.0, 0.8854166666666666, 0.041666666666666664, 0.010416666666666666 }} ,
				{ 46 ,  {0.0, 0.5, 0.25, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 48 ,  {0.0, 0.08695652173913043, 0.0, 0.0, 0.08695652173913043, 0.08695652173913043, 0.0, 0.34782608695652173, 0.0, 0.391304347826087 }} ,
				{ 49 ,  {0.0, 0.125, 0.0, 0.0, 0.875, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
				{ 52 ,  {0.0, 0.009900990099009901, 0.0297029702970297, 0.8415841584158416, 0.0, 0.0, 0.0, 0.0, 0.039603960396039604, 0.07920792079207921 }} ,
				{ 53 ,  {0.0, 0.0963855421686747, 0.0, 0.03614457831325301, 0.08433734939759036, 0.03614457831325301, 0.0, 0.024096385542168676, 0.08433734939759036, 0.6385542168674698 }} ,
				{ 55 ,  {0.0, 0.22807017543859648, 0.34210526315789475, 0.021929824561403508, 0.013157894736842105, 0.0, 0.0043859649122807015, 0.02631578947368421, 0.3508771929824561, 0.013157894736842105 }} ,
				{ 56 ,  {0.024096385542168676, 0.1686746987951807, 0.012048192771084338, 0.0, 0.7590361445783133, 0.0, 0.012048192771084338, 0.0, 0.024096385542168676, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = (Feature_36 <= 0.5) ? ( (Feature_28 <= 4.5) ? ( (Feature_21 <= 0.5) ? ( (Feature_6 <= 1.0) ? ( (Feature_49 <= 3.5) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_3 <= 6.0) ? ( 9 ) : ( 10 ) ) ) : ( (Feature_21 <= 9.0) ? ( (Feature_5 <= 1.5) ? ( (Feature_12 <= 7.0) ? ( 14 ) : ( 15 ) ) : ( (Feature_60 <= 4.5) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_35 <= 4.5) ? ( (Feature_18 <= 2.0) ? ( 21 ) : ( 22 ) ) : ( (Feature_35 <= 8.5) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_21 <= 0.5) ? ( (Feature_42 <= 8.5) ? ( (Feature_5 <= 2.5) ? ( (Feature_9 <= 0.5) ? ( 30 ) : ( 31 ) ) : ( (Feature_2 <= 0.5) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_54 <= 0.5) ? ( (Feature_35 <= 15.5) ? ( 37 ) : ( 38 ) ) : ( (Feature_58 <= 9.5) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_60 <= 7.5) ? ( (Feature_26 <= 12.5) ? ( (Feature_53 <= 7.5) ? ( 45 ) : ( 46 ) ) : ( (Feature_42 <= 3.5) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_43 <= 2.5) ? ( (Feature_26 <= 5.5) ? ( 52 ) : ( 53 ) ) : ( (Feature_33 <= 3.5) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				logistic(7.08337132841732 * coalesce( std::any() , lNodeValue [ 0 ] ) + -4.821728550358341),
				logistic(6.154179989513362 * coalesce( std::any() , lNodeValue [ 1 ] ) + -3.1231904145208977),
				logistic(6.907632997255112 * coalesce( std::any() , lNodeValue [ 2 ] ) + -3.477966855282485),
				logistic(5.4709907655103835 * coalesce( std::any() , lNodeValue [ 3 ] ) + -3.396644343817108),
				logistic(5.9621376551174885 * coalesce( std::any() , lNodeValue [ 4 ] ) + -3.4581974420557855),
				logistic(7.6443133243931864 * coalesce( std::any() , lNodeValue [ 5 ] ) + -4.793293989813116),
				logistic(8.32509213809903 * coalesce( std::any() , lNodeValue [ 6 ] ) + -4.986375082413949),
				logistic(6.6643960030808564 * coalesce( std::any() , lNodeValue [ 7 ] ) + -4.11961431859629),
				logistic(8.063873925050803 * coalesce( std::any() , lNodeValue [ 8 ] ) + -3.5199265041464156),
				logistic(6.292213988416167 * coalesce( std::any() , lNodeValue [ 9 ] ) + -3.908772792467967) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_3
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		std::vector<tTable> lBaseScores = { 
			BestEstimator_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			BestEstimator_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			BestEstimator_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			BestEstimator_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63)
		};

		tTable lAggregatedTable = aggregate_calibrated_scores(lBaseScores, {"Proba", "Score"});


		tTable lTable = lAggregatedTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
