// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RidgeClassifier_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RidgeClassifier_Pipeline_digits.exe ml2cpp-demo_RidgeClassifier_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::any score_0 = 0.0 * scaler_2 + -0.0062559248646340895 * scaler_3 + 0.017106223433351327 * scaler_4 + 0.04953141746041489 * scaler_5 + -0.0317588890642665 * scaler_6 + -0.08956232634142994 * scaler_7 + 0.02496232110182228 * scaler_8 + 0.003978795134267496 * scaler_9 + 0.0012075721501201171 * scaler_10 + -0.02861752592236351 * scaler_11 + -0.0006678079390953804 * scaler_12 + -0.012280504737917149 * scaler_13 + 0.07479285613709352 * scaler_14 + 0.09420449991571432 * scaler_15 + -0.01594997289350249 * scaler_16 + -0.019760394433543313 * scaler_17 + -0.001856002562440006 * scaler_18 + 0.03386482127861477 * scaler_19 + -0.02896887611331942 * scaler_20 + 0.021034464912125295 * scaler_21 + -0.031716879410378325 * scaler_22 + 0.10118908575974857 * scaler_23 + 0.006885594129528464 * scaler_24 + 0.0012867986242822637 * scaler_25 + 0.007647932185046462 * scaler_26 + 0.05795754700484116 * scaler_27 + 0.0036288749390624778 * scaler_28 + -0.03396012974494888 * scaler_29 + -0.155383150454515 * scaler_30 + -0.08054315128426832 * scaler_31 + 0.06354619537297898 * scaler_32 + 0.0004665086502021709 * scaler_33 + 0.0 * scaler_34 + 0.02225978054691527 * scaler_35 + 0.032535321827516527 * scaler_36 + -0.11778338900210557 * scaler_37 + -0.026159767472799775 * scaler_38 + -0.0859603313378423 * scaler_39 + 0.08271139186031932 * scaler_40 + 0.0 * scaler_41 + 0.0019744108782763807 * scaler_42 + -0.05072143044040235 * scaler_43 + 0.12889913410383672 * scaler_44 + -0.11911488132801969 * scaler_45 + -0.13048595987574962 * scaler_46 + 0.023974375128823236 * scaler_47 + -0.0009251222104565785 * scaler_48 + -0.0009079497155997598 * scaler_49 + -0.015307230770454322 * scaler_50 + -0.042652297346258305 * scaler_51 + 0.03461852656015609 * scaler_52 + 0.060899897519529816 * scaler_53 + 0.08533092669869954 * scaler_54 + 0.014368359969308648 * scaler_55 + -0.0860102158667134 * scaler_56 + 0.021438811986565394 * scaler_57 + 0.006155698575092591 * scaler_58 + 0.012008827771062923 * scaler_59 + -0.0422549920526224 * scaler_60 + 0.0010334660094252833 * scaler_61 + -0.03648949038060106 * scaler_62 + -0.017552705347632407 * scaler_63 + 0.0010877930875928875 * scaler_64 + -0.004469120930674661 * scaler_65 + -0.8079331941544884;
	
			std::any score_1 = 0.0 * scaler_2 + -0.0027384834664377833 * scaler_3 + -0.00036879878677675083 * scaler_4 + 0.07116861427507098 * scaler_5 + -0.12467719374400046 * scaler_6 + 0.09687030965559178 * scaler_7 + 0.018553006447963802 * scaler_8 + -0.01060799856570701 * scaler_9 + -0.009175131660217035 * scaler_10 + -0.05039940253790006 * scaler_11 + -0.16878708315813332 * scaler_12 + -0.056298762146378634 * scaler_13 + 0.018959544297291672 * scaler_14 + 0.13570975962718662 * scaler_15 + -0.07610469091585777 * scaler_16 + 0.002703307156569238 * scaler_17 + 0.0001086506364474922 * scaler_18 + 0.003961016827455234 * scaler_19 + -0.019129891881984332 * scaler_20 + 0.1177042433382227 * scaler_21 + 0.16412990655042084 * scaler_22 + -0.07082372493379185 * scaler_23 + 0.03782697820667977 * scaler_24 + -0.015408888362980556 * scaler_25 + -0.020541101916052084 * scaler_26 + 0.08025296026511138 * scaler_27 + 0.0414062676121547 * scaler_28 + 0.0535591782888687 * scaler_29 + -0.019305911392453357 * scaler_30 + 0.014374932576845996 * scaler_31 + -0.036879480575071004 * scaler_32 + 0.009108603936583193 * scaler_33 + 0.0 * scaler_34 + -0.016961858033535632 * scaler_35 + -0.0001396424862096902 * scaler_36 + -0.0010807359935497412 * scaler_37 + 0.03460508542721444 * scaler_38 + -0.05736213862958495 * scaler_39 + -0.0074212670558164474 * scaler_40 + 0.0 * scaler_41 + 0.0038472462389844246 * scaler_42 + -0.06734035258536628 * scaler_43 + -0.014632509535629244 * scaler_44 + -0.00792795843291081 * scaler_45 + 0.010568749228899773 * scaler_46 + -0.06844408165459209 * scaler_47 + 0.018080239852299507 * scaler_48 + -0.03740724769278838 * scaler_49 + -0.0036164951549423428 * scaler_50 + -0.014834729128039984 * scaler_51 + 0.0033186288286471584 * scaler_52 + 0.0492344824038399 * scaler_53 + 0.07859524585939646 * scaler_54 + -0.031483806931180115 * scaler_55 + -0.08590935216738203 * scaler_56 + 0.038642153709046924 * scaler_57 + -0.013680250619321132 * scaler_58 + 0.0009563404565974693 * scaler_59 + -0.08718332135401229 * scaler_60 + 0.012171156418969204 * scaler_61 + 0.04091992826630369 * scaler_62 + 0.1254159247557644 * scaler_63 + -0.07529925216634457 * scaler_64 + 0.08319421053999078 * scaler_65 + -0.7954070981210857;
	
			std::any score_2 = 0.0 * scaler_2 + -0.0329102120653268 * scaler_3 + 0.02998835701499399 * scaler_4 + -0.06019498849574738 * scaler_5 + 0.010954832496527905 * scaler_6 + -0.024298960747775034 * scaler_7 + 0.020015140753845473 * scaler_8 + -0.01241669909577814 * scaler_9 + -0.0019803396993584516 * scaler_10 + 0.06638260427331484 * scaler_11 + 0.018757467397949392 * scaler_12 + -0.024834153153777995 * scaler_13 + 0.05682876548029826 * scaler_14 + -0.06972048571125698 * scaler_15 + 0.004419452342096805 * scaler_16 + -0.015317583923040036 * scaler_17 + -0.008664846132812693 * scaler_18 + -0.01906386621650194 * scaler_19 + 0.02542813392893713 * scaler_20 + -0.06153310259977981 * scaler_21 + -0.008802257273490958 * scaler_22 + -0.029541373880232327 * scaler_23 + 0.03837826765292436 * scaler_24 + 0.02723304192364236 * scaler_25 + -0.002994816986303205 * scaler_26 + -0.025258677477296317 * scaler_27 + -0.05982599032922216 * scaler_28 + -0.15315939906462256 * scaler_29 + 0.06329517621364925 * scaler_30 + 0.03310208778265153 * scaler_31 + -0.015183507715013464 * scaler_32 + 0.0005466174624748242 * scaler_33 + 0.0 * scaler_34 + 0.027435794086154246 * scaler_35 + -0.04516927112786687 * scaler_36 + -0.03094263061963825 * scaler_37 + -0.015784079512612594 * scaler_38 + -0.017340624881554648 * scaler_39 + -0.025681440372979616 * scaler_40 + 0.0 * scaler_41 + -0.017234187851277803 * scaler_42 + 0.01357611505296898 * scaler_43 + -0.0068438598905566 * scaler_44 + 0.184140164060814 * scaler_45 + -0.17804413685651738 * scaler_46 + -0.1591669449502146 * scaler_47 + -0.21324407296646208 * scaler_48 + 0.01637014943017509 * scaler_49 + -0.009896423690918563 * scaler_50 + 0.04404001261298615 * scaler_51 + -0.03140155685082926 * scaler_52 + 0.03385514816520438 * scaler_53 + 0.17528350920408603 * scaler_54 + 0.15801640972778583 * scaler_55 + 0.1118343533222112 * scaler_56 + -0.020799342047702604 * scaler_57 + 0.01644376662084862 * scaler_58 + 0.011889817629635679 * scaler_59 + 0.022680531973475384 * scaler_60 + 0.03199438098896586 * scaler_61 + -0.011671441747483538 * scaler_62 + 0.06322326348551774 * scaler_63 + 0.1379132873980397 * scaler_64 + -0.01995295598281217 * scaler_65 + -0.7940153096729295;
	
			std::any score_3 = 0.0 * scaler_2 + -0.005290100124524836 * scaler_3 + -0.07858979084820274 * scaler_4 + 0.03867143027713253 * scaler_5 + 0.06291303265593966 * scaler_6 + -0.005547908422900021 * scaler_7 + -0.051042138083659996 * scaler_8 + 0.008359700633803847 * scaler_9 + -0.01974698314774097 * scaler_10 + 0.06121172806766149 * scaler_11 + 0.043779698463496095 * scaler_12 + 0.056206761699990504 * scaler_13 + -0.08158033758598544 * scaler_14 + 0.06184735054438118 * scaler_15 + 0.06169068663019718 * scaler_16 + -0.013550987742269724 * scaler_17 + 0.013884147390314426 * scaler_18 + -0.06873639529851086 * scaler_19 + -0.15909526573453697 * scaler_20 + -0.06734205154353601 * scaler_21 + 0.1735134171846974 * scaler_22 + -0.006447828798937706 * scaler_23 + 0.009553695641805512 * scaler_24 + -0.0007320509692058442 * scaler_25 + 0.014522597408240863 * scaler_26 + -0.00868367060936189 * scaler_27 + -0.07407894562027399 * scaler_28 + -0.011967659580227007 * scaler_29 + -0.035572896414285904 * scaler_30 + -0.12804146604037178 * scaler_31 + -0.025565623142710905 * scaler_32 + 0.02168644291337305 * scaler_33 + 0.0 * scaler_34 + 0.05185692179919717 * scaler_35 + -0.020773098660348 * scaler_36 + -0.06562928991731007 * scaler_37 + 0.06392580569590882 * scaler_38 + 0.06808302531695087 * scaler_39 + -0.09795155564341014 * scaler_40 + 0.0 * scaler_41 + 0.009554238561037705 * scaler_42 + 0.012378550128414515 * scaler_43 + -0.059539921642025796 * scaler_44 + -0.12060337891210111 * scaler_45 + 0.022113413076922387 * scaler_46 + 0.08586201751942543 * scaler_47 + 0.1765681025625778 * scaler_48 + 0.01009071868866178 * scaler_49 + -0.013164128197487704 * scaler_50 + -0.00619198393473566 * scaler_51 + -0.01813362965515547 * scaler_52 + -0.02421345733043597 * scaler_53 + 0.016669690738355024 * scaler_54 + -0.03296472151370334 * scaler_55 + -0.010010388571193634 * scaler_56 + -0.009558787746171023 * scaler_57 + 0.010545947070865916 * scaler_58 + 0.029529956063542997 * scaler_59 + 0.08916246496520228 * scaler_60 + 0.009552387807750681 * scaler_61 + 0.05479340264904795 * scaler_62 + -0.002160776557532769 * scaler_63 + -0.05448490499770985 * scaler_64 + -0.016581166960504677 * scaler_65 + -0.7981906750173974;
	
			std::any score_4 = 0.0 * scaler_2 + -0.007010760869060735 * scaler_3 + -0.00556994301070584 * scaler_4 + -0.11853319142181522 * scaler_5 + 0.051608636895370374 * scaler_6 + -0.13119041807417378 * scaler_7 + -0.053736996411867015 * scaler_8 + 0.026421290734421038 * scaler_9 + -0.0018020420341046206 * scaler_10 + 0.06749565675642329 * scaler_11 + -0.03889039476927678 * scaler_12 + -0.004495286673814107 * scaler_13 + -0.08480853292325911 * scaler_14 + -0.09283628856016429 * scaler_15 + 0.007547380271535161 * scaler_16 + -0.03197004579531816 * scaler_17 + 0.00017480939988329022 * scaler_18 + -0.01307357275873314 * scaler_19 + 0.029237367250020407 * scaler_20 + 0.03686625259308956 * scaler_21 + 0.025546194118887065 * scaler_22 + 0.04278054353777068 * scaler_23 + -0.017244630131276188 * scaler_24 + 0.037207011007376944 * scaler_25 + 0.028997663757258367 * scaler_26 + -0.010325795723929379 * scaler_27 + 0.0403154677438586 * scaler_28 + -0.04856279785891412 * scaler_29 + 0.05289981883985641 * scaler_30 + -0.021132116352957836 * scaler_31 + 0.10286548275328296 * scaler_32 + 0.02714070169637758 * scaler_33 + 0.0 * scaler_34 + 0.14852863064607502 * scaler_35 + -0.0325628924569754 * scaler_36 + -0.009665863746563188 * scaler_37 + 0.03055914373432389 * scaler_38 + 0.1014448425671168 * scaler_39 + 0.03026239582457265 * scaler_40 + 0.0 * scaler_41 + -0.0011108385970933067 * scaler_42 + 0.09911970341223585 * scaler_43 + -0.06899551582566306 * scaler_44 + 0.1291575390314053 * scaler_45 + 0.06703404898102482 * scaler_46 + 0.030224251088016532 * scaler_47 + -0.041547323959520224 * scaler_48 + -0.0019066548675404477 * scaler_49 + -0.010600924258036885 * scaler_50 + 0.04467396453970633 * scaler_51 + -0.056347402987671824 * scaler_52 + -0.04928832430899717 * scaler_53 + -0.006849794711683858 * scaler_54 + -0.06810247719386758 * scaler_55 + -0.023129589180140037 * scaler_56 + 0.007198637890074754 * scaler_57 + -0.010619423016085323 * scaler_58 + 0.007093782579087186 * scaler_59 + 0.04844510646547688 * scaler_60 + -0.002235127433176389 * scaler_61 + 0.0881371937624561 * scaler_62 + -0.085468231422107 * scaler_63 + 0.003062923843840587 * scaler_64 + -0.009339840132516798 * scaler_65 + -0.7898399443284619;
	
			std::any score_5 = 0.0 * scaler_2 + -0.00029624175790052753 * scaler_3 + 0.12552596238284655 * scaler_4 + -0.03194428016560971 * scaler_5 + 0.05275186324675112 * scaler_6 + 0.14419857857433943 * scaler_7 + 0.09164467896102282 * scaler_8 + -0.03639654776758363 * scaler_9 + 0.0094167019802329 * scaler_10 + -0.03311473064330609 * scaler_11 + -0.0025640026248967642 * scaler_12 + 0.012185850471545273 * scaler_13 + 0.06002963028050217 * scaler_14 + -0.05953068485218534 * scaler_15 + -0.08416934969026581 * scaler_16 + -0.007529624948390096 * scaler_17 + -0.010804135713813329 * scaler_18 + 0.03543744473298927 * scaler_19 + 0.03500257202893037 * scaler_20 + -0.003151455425069024 * scaler_21 + -0.2158626378373973 * scaler_22 + -0.19726345415184768 * scaler_23 + -0.06145526660341086 * scaler_24 + 0.0051929875208352565 * scaler_25 + -0.028044519411508678 * scaler_26 + 0.07936197543507931 * scaler_27 + 0.016032958306418224 * scaler_28 + 0.07209357253154469 * scaler_29 + 0.05502996304331957 * scaler_30 + 0.04163751688007442 * scaler_31 + -0.08880044457228782 * scaler_32 + 0.007717221666282293 * scaler_33 + 0.0 * scaler_34 + -0.03559412318321232 * scaler_35 + 0.08277399700025087 * scaler_36 + -0.06856094618441114 * scaler_37 + -0.01246027124354952 * scaler_38 + -0.041721267197395204 * scaler_39 + 0.015009389774330757 * scaler_40 + 0.0 * scaler_41 + -0.0058797583049545596 * scaler_42 + 0.016561772234609307 * scaler_43 + -0.13036047541844759 * scaler_44 + -0.01902220925945601 * scaler_45 + -0.020418312882566236 * scaler_46 + 0.0022902625539242757 * scaler_47 + 0.020906758277442566 * scaler_48 + -0.01155531568969596 * scaler_49 + -0.00024223667725906855 * scaler_50 + -0.0042069419745397844 * scaler_51 + 0.02049674754081068 * scaler_52 + -0.05017236294044162 * scaler_53 + 0.0474394101554588 * scaler_54 + -0.014048800647083165 * scaler_55 + -0.08716291944330554 * scaler_56 + 0.01870654693592624 * scaler_57 + -0.0020154912599378043 * scaler_58 + 0.014745222178456313 * scaler_59 + 0.013740998595208241 * scaler_60 + 0.06404362174543773 * scaler_61 + -0.06492079031716802 * scaler_62 + -0.003975388097500323 * scaler_63 + 0.007322277379527746 * scaler_64 + -0.039255734656680454 * scaler_65 + -0.7995824634655533;
	
			std::any score_6 = 0.0 * scaler_2 + 0.01105342605582631 * scaler_3 + -0.08961026630972276 * scaler_4 + 0.01742450112787348 * scaler_5 + -0.0008903903021406222 * scaler_6 + 0.01182897430903236 * scaler_7 + -0.02355807179192918 * scaler_8 + -0.002624882717871519 * scaler_9 + -0.00038075990887947135 * scaler_10 + -0.018110791306037065 * scaler_11 + -0.053876762728286474 * scaler_12 + -0.004972924766873988 * scaler_13 + -0.060990574350780515 * scaler_14 + -0.05395541590669778 * scaler_15 + 0.05185411625507569 * scaler_16 + 0.0012782368015797057 * scaler_17 + 0.007748860955024368 * scaler_18 + -0.05167842155893761 * scaler_19 + 0.04953052600712712 * scaler_20 + -0.028519740647355213 * scaler_21 + -0.03500723581529492 * scaler_22 + -0.07681566433494029 * scaler_23 + -0.028462645480759212 * scaler_24 + 0.0053919513734010304 * scaler_25 + 0.002792498437825643 * scaler_26 + -0.036303145681367735 * scaler_27 + 0.031731747735513245 * scaler_28 + -0.003731911910941358 * scaler_29 + -0.0670313665420134 * scaler_30 + -0.05591031577763118 * scaler_31 + -0.03227645453304997 * scaler_32 + -0.004403645947352692 * scaler_33 + 0.0 * scaler_34 + -0.026404319682644974 * scaler_35 + 0.07740077333195075 * scaler_36 + 0.014127371696266308 * scaler_37 + 0.023097684966369752 * scaler_38 + 0.07109468496603621 * scaler_39 + -0.07474056549529341 * scaler_40 + 0.0 * scaler_41 + 0.001702115163082465 * scaler_42 + -0.08751866727304199 * scaler_43 + 0.10994618153416813 * scaler_44 + -0.0010579249253507494 * scaler_45 + 0.07027498768640086 * scaler_46 + 0.0012285946407698026 * scaler_47 + 0.12838953485622126 * scaler_48 + 0.05601569814123059 * scaler_49 + 0.0082406483013149 * scaler_50 + -0.02387489781912195 * scaler_51 + 0.03118784819227473 * scaler_52 + 0.07487147851376101 * scaler_53 + -0.08634388354251374 * scaler_54 + 0.06476018522971252 * scaler_55 + 0.09858620311524399 * scaler_56 + -0.050571187793002154 * scaler_57 + 0.002557708822752709 * scaler_58 + -0.0017857093222474819 * scaler_59 + 0.03711050570087043 * scaler_60 + -0.03195824945526073 * scaler_61 + -0.01716272604099524 * scaler_62 + 0.040511714087418174 * scaler_63 + -0.0009642757501660159 * scaler_64 + -0.013740130926108525 * scaler_65 + -0.8023660403618651;
	
			std::any score_7 = 0.0 * scaler_2 + 0.03197260252810284 * scaler_3 + -0.015436090948577794 * scaler_4 + 0.07323540740408441 * scaler_5 + -0.01657770473326159 * scaler_6 + 0.062457791618540884 * scaler_7 + 0.06251703342800295 * scaler_8 + 0.02632698291466942 * scaler_9 + 0.012162264667759375 * scaler_10 + -0.053495718851163 * scaler_11 + 0.11894641282076591 * scaler_12 + 0.02362873286838008 * scaler_13 + 0.06631166251821237 * scaler_14 + 0.023358864316242213 * scaler_15 + -4.9635570112805694e-05 * scaler_16 + 0.052875573899587046 * scaler_17 + -0.008340871084037797 * scaler_18 + 0.004870317887156938 * scaler_19 + -0.12530243137136693 * scaler_20 + -0.01957645713176786 * scaler_21 + -0.04164150347799573 * scaler_22 + -0.04639038132783788 * scaler_23 + -0.034281057968142105 * scaler_24 + -0.011228837232395612 * scaler_25 + -0.0010554156507077107 * scaler_26 + -0.04022091331045211 * scaler_27 + -0.03742179314190658 * scaler_28 + -0.0682186175394522 * scaler_29 + 0.00931589002593029 * scaler_30 + 0.0560716480251177 * scaler_31 + 0.0946500864817206 * scaler_32 + -0.032225704489329196 * scaler_33 + 0.0 * scaler_34 + -0.06960322940538582 * scaler_35 + 0.052364895333192295 * scaler_36 + 0.046619227707778536 * scaler_37 + 0.04461928553224832 * scaler_38 + 0.0643466229548946 * scaler_39 + 0.09438187063702533 * scaler_40 + 0.0 * scaler_41 + 0.0032511519267540206 * scaler_42 + -0.020629973030822257 * scaler_43 + 0.029546617061439916 * scaler_44 + 0.04225205517366229 * scaler_45 + 0.0773995812049577 * scaler_46 + 0.005049369276402168 * scaler_47 + -0.057187562178862325 * scaler_48 + -0.025137001266763184 * scaler_49 + 0.018225099594716215 * scaler_50 + 0.005175013732840929 * scaler_51 + -0.02063478945062529 * scaler_52 + 0.025872672644290638 * scaler_53 + -0.155826743765792 * scaler_54 + -0.048471722176072686 * scaler_55 + 0.011293780156443469 * scaler_56 + 0.006679582007186866 * scaler_57 + 0.0015655537455694772 * scaler_58 + -0.04388320099466578 * scaler_59 + 0.000455377330877189 * scaler_60 + -0.042569207638708674 * scaler_61 + -0.15509368201068385 * scaler_62 + -0.003063055765276775 * scaler_63 + -0.04041283761117372 * scaler_64 + 0.039728830569298705 * scaler_65 + -0.8051496172581768;
	
			std::any score_8 = 0.0 * scaler_2 + 0.010226013102921233 * scaler_3 + 0.06597044999804934 * scaler_4 + -0.09634788220792989 * scaler_5 + 0.028934676943100184 * scaler_6 + -0.01857139747838661 * scaler_7 + -0.07309766033225208 * scaler_8 + 0.007466306390946373 * scaler_9 + 0.0111147581543286 * scaler_10 + -0.022453051026561324 * scaler_11 + 0.07202752206092793 * scaler_12 + 0.00030623404944295663 * scaler_13 + -0.05875653185458248 * scaler_14 + 0.03412982964792212 * scaler_15 + 0.0013431720423031355 * scaler_16 + 0.022582493250355423 * scaler_17 + 0.0209770506588389 * scaler_18 + 0.055849457778622755 * scaler_19 + 0.07537013138225537 * scaler_20 + -0.001047130533028322 * scaler_21 + -0.04005806303715827 * scaler_22 + 0.09622149989544333 * scaler_23 + 0.056248611615025985 * scaler_24 + -0.01912204700630203 * scaler_25 + -0.003292805549853931 * scaler_26 + -0.02499112126149445 * scaler_27 + -0.03510489532523913 * scaler_28 + 0.12278486601497259 * scaler_29 + 0.03800659709741671 * scaler_30 + 0.058675438600401274 * scaler_31 + -0.07206053977230285 * scaler_32 + -0.0076187298126505175 * scaler_33 + 0.0 * scaler_34 + -0.0368851100568581 * scaler_35 + -0.10363508610964467 * scaler_36 + 0.13824180848368137 * scaler_37 + 0.057020851080354464 * scaler_38 + -0.10772328912176193 * scaler_39 + -0.043071557285808845 * scaler_40 + 0.0 * scaler_41 + -0.0013569245399674915 * scaler_42 + -0.010275983811112806 * scaler_43 + 0.21320131072037443 * scaler_44 + -0.013740420711121627 * scaler_45 + 0.09899151130177014 * scaler_46 + 0.041868308372830926 * scaler_47 + -0.019893348815623706 * scaler_48 + 0.0037437270205156604 * scaler_49 + 0.022953222736551673 * scaler_50 + -0.015876286044448205 * scaler_51 + 0.08493837057358777 * scaler_52 + -0.09695398807663672 * scaler_53 + -0.09943032594850901 * scaler_54 + 0.07784792895240457 * scaler_55 + 0.0023574098614981423 * scaler_56 + -0.003571239357217776 * scaler_57 + -0.011841741238303076 * scaler_58 + -0.01763599642115459 * scaler_59 + -0.10560855954193188 * scaler_60 + 0.028322951354203634 * scaler_61 + 0.029487009232318055 * scaler_62 + -0.14321929160461128 * scaler_63 + 0.007447912350006168 * scaler_64 + 0.02371061528631272 * scaler_65 + -0.8121085594989562;
	
			std::any score_9 = 0.0 * scaler_2 + 0.0012496814610328405 * scaler_3 + -0.04901610292524948 * scaler_4 + 0.056988971746525716 * scaler_5 + -0.03325886439401936 * scaler_6 + -0.04618464309283966 * scaler_7 + -0.016257314072945644 * scaler_8 + -0.010506947661164435 * scaler_9 + -0.0008160405021397253 * scaler_10 + 0.011101231189921314 * scaler_11 + 0.01127495047655227 * scaler_12 + 0.010554052389406729 * scaler_13 + 0.009213518001206062 * scaler_14 + -0.07320742902113939 * scaler_15 + 0.049418841528532646 * scaler_16 + 0.008689025734460386 * scaler_17 + -0.013227663547405313 * scaler_18 + 0.018569197327851606 * scaler_19 + 0.11792773450393121 * scaler_20 + 0.005564977037094321 * scaler_21 + 0.009899058997716228 * scaler_22 + 0.18709129823462428 * scaler_23 + -0.007449547062377627 * scaler_24 + -0.0298199668786443 * scaler_25 + 0.0019679677260555774 * scaler_26 + -0.07178915864113632 * scaler_27 + 0.07331630807964301 * scaler_28 + 0.07116289886372391 * scaler_29 + 0.058745879583091846 * scaler_30 + 0.08176542559013752 * scaler_31 + 0.009704285702455774 * scaler_32 + -0.022418016075961188 * scaler_33 + 0.0 * scaler_34 + -0.06463248671669432 * scaler_35 + -0.04279499665187707 * scaler_36 + 0.09467444757584682 * scaler_37 + -0.19942373820745793 * scaler_38 + 0.005138475363140753 * scaler_39 + 0.026501337757059224 * scaler_40 + 0.0 * scaler_41 + 0.005252546525159017 * scaler_42 + 0.0948502663125057 * scaler_43 + -0.201220961107479 * scaler_44 + -0.07408298469692275 * scaler_45 + -0.01743388186513125 * scaler_46 + 0.03711384802460984 * scaler_47 + -0.011147205417607903 * scaler_48 + -0.009306124048197877 * scaler_49 + 0.0034084681165149054 * scaler_50 + 0.013748145361615434 * scaler_51 + -0.04804274275120485 * scaler_52 + -0.024105546590112274 * scaler_53 + -0.054868034687500476 * scaler_54 + -0.1199213554172992 * scaler_55 + 0.06815071877333423 * scaler_56 + -0.008165175584706266 * scaler_57 + 0.0008882312985169868 * scaler_58 + -0.012919039940315085 * scaler_59 + 0.02345188791746318 * scaler_60 + -0.07035537979761097 * scaler_61 + 0.07200059658680924 * scaler_62 + 0.026288546465959954 * scaler_63 + 0.014327076466390778 * scaler_64 + -0.0432947068063084 * scaler_65 + -0.7954070981210857;
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				score_0,
				score_1,
				score_2,
				score_3,
				score_4,
				score_5,
				score_6,
				score_7,
				score_8,
				score_9 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			int lBestClass = get_arg_max( lTable["Score"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
