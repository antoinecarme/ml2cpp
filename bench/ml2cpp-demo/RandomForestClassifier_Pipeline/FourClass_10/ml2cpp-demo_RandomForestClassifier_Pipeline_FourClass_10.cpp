// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestClassifier_Pipeline
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestClassifier_Pipeline_FourClass_10.exe ml2cpp-demo_RandomForestClassifier_Pipeline_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( -0.003903374463034205 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.6152232215702322 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.042796236914291665 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.7709819558904074 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.43300733624893334 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( -0.0424956965794036 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.29809080119845455 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.14672241507251663 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.01746942384662034 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.11507331415602866 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - -0.003903374463034205 ) / 0.9795060640183997 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.6152232215702322 ) / 1.3900807236205235 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.042796236914291665 ) / 1.4962685135870766 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.7709819558904074 ) / 2.3333561060111743 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.43300733624893334 ) / 1.4029757772648748 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - -0.0424956965794036 ) / 0.9558091076873229 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.29809080119845455 ) / 1.017013180721433 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.14672241507251663 ) / 1.600798539929603 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.01746942384662034 ) / 1.1487296361671415 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.11507331415602866 ) / 0.9690911857336224 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		namespace RF_Tree_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 27 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 29 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 33 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.05717501789331436) ? ( (scaler_output_6 <= -0.20496699959039688) ? ( (scaler_output_3 <= -0.7135222852230072) ? ( 3 ) : ( (scaler_output_4 <= -1.5819936394691467) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_7 <= 0.4996255934238434) ? ( (scaler_output_4 <= 0.41027943789958954) ? ( (scaler_output_5 <= -1.2854745388031006) ? ( 10 ) : ( (scaler_output_10 <= 0.008362844586372375) ? ( (scaler_output_4 <= -0.5571729019284248) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) : ( 16 ) ) : ( 17 ) ) ) : ( (scaler_output_6 <= 0.6879200339317322) ? ( (scaler_output_8 <= -0.003607690567150712) ? ( (scaler_output_9 <= 0.9926785230636597) ? ( (scaler_output_4 <= 0.16318122297525406) ? ( 22 ) : ( (scaler_output_2 <= 0.9686004519462585) ? ( 24 ) : ( (scaler_output_10 <= -2.3839820623397827) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_output_7 <= -0.07110655307769775) ? ( 29 ) : ( 30 ) ) ) : ( 31 ) ) : ( (scaler_output_3 <= -0.9329586327075958) ? ( 33 ) : ( 34 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_0
		
	
		namespace RF_Tree_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 29 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 32 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 34 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= -0.2313440442085266) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( (scaler_output_7 <= 0.12190598528832197) ? ( (scaler_output_10 <= 0.07845557108521461) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_3 <= -0.45519342832267284) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_8 <= -0.32786300405859947) ? ( (scaler_output_2 <= -0.3161201924085617) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) : ( (scaler_output_3 <= -0.4998243898153305) ? ( (scaler_output_9 <= 0.30776605010032654) ? ( (scaler_output_2 <= 0.1089421808719635) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) : ( (scaler_output_10 <= 0.8861697912216187) ? ( (scaler_output_5 <= -0.12368974694982171) ? ( (scaler_output_4 <= -0.386617973446846) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_3 <= 1.5061954259872437) ? ( (scaler_output_6 <= -1.8694493770599365) ? ( 27 ) : ( (scaler_output_4 <= 1.1877036094665527) ? ( 29 ) : ( (scaler_output_9 <= 0.3260720372200012) ? ( 31 ) : ( 32 ) ) ) ) : ( 33 ) ) ) : ( 34 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_1
		
	
		namespace RF_Tree_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.26133164018392563) ? ( (scaler_output_4 <= -0.39857009053230286) ? ( (scaler_output_2 <= 1.9952436685562134) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_8 <= -0.3086756970733404) ? ( 6 ) : ( (scaler_output_9 <= 0.2546616494655609) ? ( (scaler_output_7 <= 0.1674340246245265) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( 13 ) : ( (scaler_output_9 <= 0.18635689839720726) ? ( (scaler_output_6 <= 1.003070890903473) ? ( 16 ) : ( (scaler_output_10 <= 0.5966698229312897) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_7 <= 0.38311152905225754) ? ( 21 ) : ( (scaler_output_10 <= 0.7106481194496155) ? ( 23 ) : ( 24 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_2
		
	
		namespace RF_Tree_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 28 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 34 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.041819671634584665) ? ( (scaler_output_5 <= -1.091533362865448) ? ( 2 ) : ( (scaler_output_4 <= -0.12354995310306549) ? ( (scaler_output_6 <= 0.7415732741355896) ? ( (scaler_output_10 <= -0.3984949067234993) ? ( (scaler_output_2 <= -1.3952478766441345) ? ( 7 ) : ( (scaler_output_2 <= 0.9948362410068512) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_10 <= 1.1011462807655334) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) : ( (scaler_output_4 <= 0.41027943789958954) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_2 <= -0.40144434571266174) ? ( (scaler_output_8 <= -1.145151525735855) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= 0.38009917736053467) ? ( (scaler_output_7 <= 0.08147534728050232) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_2 <= 0.9803939759731293) ? ( (scaler_output_11 <= -2.2126083970069885) ? ( 28 ) : ( (scaler_output_10 <= 0.13317038118839264) ? ( 30 ) : ( (scaler_output_7 <= -0.15554486587643623) ? ( 32 ) : ( 33 ) ) ) ) : ( 34 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_3
		
	
		namespace RF_Tree_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 8 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 29 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 33 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.690996915102005) ? ( (scaler_output_10 <= -1.3757396340370178) ? ( 2 ) : ( (scaler_output_6 <= 0.7317952811717987) ? ( (scaler_output_3 <= 0.3106720447540283) ? ( (scaler_output_10 <= -0.446695014834404) ? ( (scaler_output_11 <= -0.6150310188531876) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_10 <= 0.9724481701850891) ? ( (scaler_output_7 <= 0.1562881050631404) ? ( (scaler_output_9 <= -1.801368236541748) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) : ( (scaler_output_3 <= -0.20829220861196518) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_9 <= 1.0265483856201172) ? ( (scaler_output_2 <= -0.7966367900371552) ? ( 20 ) : ( (scaler_output_10 <= -1.0653828382492065) ? ( 22 ) : ( 23 ) ) ) : ( 24 ) ) ) : ( (scaler_output_5 <= -0.0758902789093554) ? ( (scaler_output_8 <= 1.4334330558776855) ? ( 27 ) : ( 28 ) ) : ( 29 ) ) ) ) : ( (scaler_output_3 <= 1.29959374666214) ? ( (scaler_output_3 <= -0.9329586327075958) ? ( (scaler_output_4 <= 1.9218416213989258) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( 36 ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_4
		
	
		namespace RF_Tree_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 13 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 29 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 32 ,  {1.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_10 <= 1.6078662276268005) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( (scaler_output_10 <= -0.3984949067234993) ? ( 4 ) : ( (scaler_output_4 <= -0.3490529954433441) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_7 <= 1.1121245622634888) ? ( (scaler_output_9 <= -0.21729405969381332) ? ( 10 ) : ( (scaler_output_11 <= 0.3692381829023361) ? ( 12 ) : ( 13 ) ) ) : ( (scaler_output_9 <= -0.5200975686311722) ? ( 15 ) : ( 16 ) ) ) ) : ( 17 ) ) : ( (scaler_output_8 <= -0.16921354830265045) ? ( (scaler_output_10 <= -0.901781439781189) ? ( 20 ) : ( (scaler_output_8 <= -0.6291393041610718) ? ( (scaler_output_8 <= -1.9964157938957214) ? ( 23 ) : ( (scaler_output_6 <= 1.2130332121159881) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_9 <= 0.542861133813858) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_4 <= -1.1514442414045334) ? ( 31 ) : ( 32 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_5
		
	
		namespace RF_Tree_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 8 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 29 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 34 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 37 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 40 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_8 <= -0.13750607520341873) ? ( (scaler_output_9 <= 0.16974786296486855) ? ( (scaler_output_3 <= -0.8707321509718895) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.5353318005800247) ? ( (scaler_output_2 <= -0.35261771082878113) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_2 <= 0.40983909368515015) ? ( (scaler_output_10 <= 0.2743743285536766) ? ( 11 ) : ( (scaler_output_4 <= 0.7105701118707657) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_8 <= -0.2829417586326599) ? ( (scaler_output_9 <= 1.9107609391212463) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) ) ) : ( (scaler_output_6 <= -0.201826274394989) ? ( (scaler_output_8 <= 1.1439929008483887) ? ( (scaler_output_7 <= 0.7762007713317871) ? ( (scaler_output_8 <= 0.41488412022590637) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_8 <= 0.2681032195687294) ? ( 27 ) : ( 28 ) ) ) : ( 29 ) ) : ( (scaler_output_5 <= -0.062243292573839426) ? ( (scaler_output_4 <= 0.36413468420505524) ? ( (scaler_output_8 <= 1.3679314255714417) ? ( (scaler_output_7 <= 0.3225030452013016) ? ( 34 ) : ( (scaler_output_8 <= 0.07717496901750565) ? ( 36 ) : ( 37 ) ) ) : ( 38 ) ) : ( 39 ) ) : ( 40 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_6
		
	
		namespace RF_Tree_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.26133164018392563) ? ( (scaler_output_5 <= -0.98485466837883) ? ( 2 ) : ( (scaler_output_5 <= 0.332256555557251) ? ( (scaler_output_7 <= 0.2269594818353653) ? ( 5 ) : ( (scaler_output_6 <= 0.0949682891368866) ? ( (scaler_output_11 <= -0.030020199716091156) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) : ( 11 ) ) ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( 13 ) : ( (scaler_output_6 <= 0.21485252492129803) ? ( (scaler_output_5 <= 0.2864668518304825) ? ( 16 ) : ( (scaler_output_5 <= 1.8463032245635986) ? ( (scaler_output_4 <= 0.23483848571777344) ? ( (scaler_output_4 <= -0.14394865557551384) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( 23 ) ) ) : ( (scaler_output_4 <= -0.6945333331823349) ? ( 25 ) : ( (scaler_output_5 <= 1.447642982006073) ? ( 27 ) : ( 28 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_7
		
	
		namespace RF_Tree_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 5 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.2612931579351425) ? ( (scaler_output_8 <= 0.04484975337982178) ? ( (scaler_output_5 <= 0.5198379158973694) ? ( (scaler_output_5 <= 0.27204815298318863) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( (scaler_output_3 <= -0.17495721392333508) ? ( (scaler_output_10 <= 1.2887165248394012) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_10 <= 0.21754511445760727) ? ( (scaler_output_6 <= 0.5409132968634367) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) ) : ( (scaler_output_8 <= -0.16921354830265045) ? ( (scaler_output_5 <= 1.3827546834945679) ? ( 18 ) : ( (scaler_output_8 <= -1.893377959728241) ? ( 20 ) : ( 21 ) ) ) : ( (scaler_output_4 <= -1.1514442414045334) ? ( 23 ) : ( 24 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_8
		
	
		namespace RF_Tree_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 25 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 29 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5243096798658371) ? ( (scaler_output_8 <= 1.0236553847789764) ? ( (scaler_output_7 <= 0.6078317165374756) ? ( (scaler_output_4 <= 0.9385470896959305) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= 0.7522573173046112) ? ( (scaler_output_5 <= 0.12825046852231026) ? ( (scaler_output_2 <= 0.679350346326828) ? ( (scaler_output_4 <= -1.2985426783561707) ? ( 12 ) : ( (scaler_output_9 <= -0.15219440311193466) ? ( 14 ) : ( 15 ) ) ) : ( 16 ) ) : ( (scaler_output_6 <= -0.687317743897438) ? ( (scaler_output_10 <= -0.26841092109680176) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) : ( (scaler_output_9 <= 0.18635689839720726) ? ( (scaler_output_10 <= 1.993989109992981) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_11 <= 0.3794265203177929) ? ( (scaler_output_6 <= -0.8312442004680634) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_9
		
	
		namespace RF_Tree_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 6 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 23 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 25 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 29 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 31 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 34 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_4 <= -0.3466387689113617) ? ( (scaler_output_9 <= -0.28021590411663055) ? ( 3 ) : ( (scaler_output_11 <= 0.3850634223781526) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_5 <= -1.3409055769443512) ? ( 8 ) : ( (scaler_output_4 <= 1.6084575653076172) ? ( 10 ) : ( 11 ) ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_10 <= 0.5095229297876358) ? ( (scaler_output_7 <= -1.3072620034217834) ? ( (scaler_output_5 <= -0.6544808149337769) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) : ( (scaler_output_8 <= -0.19735578447580338) ? ( 20 ) : ( (scaler_output_3 <= 0.6762478649616241) ? ( (scaler_output_5 <= -0.4340292327105999) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (scaler_output_11 <= -0.10499275475740433) ? ( (scaler_output_7 <= 1.0146685540676117) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_10 <= -0.6659581512212753) ? ( 31 ) : ( (scaler_output_9 <= 0.2930029183626175) ? ( 33 ) : ( 34 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_10
		
	
		namespace RF_Tree_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 1 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 26 ,  {1.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.146536111831665) ? ( 1 ) : ( (scaler_output_3 <= -0.43905290961265564) ? ( (scaler_output_8 <= -0.5153167992830276) ? ( 4 ) : ( (scaler_output_6 <= -1.0733897984027863) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_6 <= 0.21485252492129803) ? ( (scaler_output_8 <= -1.074826568365097) ? ( (scaler_output_9 <= 0.31361912935972214) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_2 <= -0.9023565053939819) ? ( 14 ) : ( (scaler_output_2 <= 0.35249389708042145) ? ( 16 ) : ( (scaler_output_10 <= -1.228603184223175) ? ( 18 ) : ( (scaler_output_4 <= 0.15511246770620346) ? ( 20 ) : ( 21 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.5988057553768158) ? ( 23 ) : ( (scaler_output_10 <= 0.17720288783311844) ? ( 25 ) : ( 26 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_11
		
	
		namespace RF_Tree_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 6 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 29 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_8 <= 0.41730017960071564) ? ( (scaler_output_8 <= -0.044890157878398895) ? ( 3 ) : ( (scaler_output_9 <= -0.3554280251264572) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_5 <= -1.089933693408966) ? ( 8 ) : ( (scaler_output_8 <= 0.5860239267349243) ? ( 10 ) : ( (scaler_output_3 <= 0.4246625602245331) ? ( (scaler_output_11 <= 0.6595698595046997) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) ) ) : ( (scaler_output_7 <= -0.3834313154220581) ? ( (scaler_output_3 <= -0.7075046598911285) ? ( 18 ) : ( (scaler_output_4 <= 0.09181806445121765) ? ( (scaler_output_8 <= -0.9855684340000153) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) : ( (scaler_output_2 <= -2.0045533776283264) ? ( 25 ) : ( (scaler_output_5 <= 0.3181282728910446) ? ( 27 ) : ( (scaler_output_10 <= 0.8899189829826355) ? ( 29 ) : ( 30 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_12
		
	
		namespace RF_Tree_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 27 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 28 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 30 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 34 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 35 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_8 <= -0.1374182626605034) ? ( (scaler_output_9 <= 0.13469922170042992) ? ( 2 ) : ( (scaler_output_9 <= 1.8272849917411804) ? ( (scaler_output_11 <= 0.49147601425647736) ? ( (scaler_output_6 <= 0.814191609621048) ? ( (scaler_output_7 <= 1.9231358766555786) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_11 <= -1.1485453248023987) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_5 <= 0.26247503608465195) ? ( 13 ) : ( (scaler_output_5 <= 0.8314598202705383) ? ( (scaler_output_6 <= -0.5734527260065079) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) ) : ( 19 ) ) ) : ( (scaler_output_6 <= 0.037758152931928635) ? ( (scaler_output_7 <= 0.5122730135917664) ? ( (scaler_output_11 <= 2.119138181209564) ? ( (scaler_output_2 <= 0.17756735440343618) ? ( (scaler_output_3 <= 0.056707486510276794) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) : ( 28 ) ) : ( (scaler_output_2 <= -1.3952478766441345) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_3 <= -1.146604597568512) ? ( (scaler_output_10 <= 1.207868367433548) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_7 <= 0.31575801223516464) ? ( (scaler_output_5 <= -0.0758902789093554) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_13
		
	
		namespace RF_Tree_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 15 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 31 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 34 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.053778067231178284) ? ( (scaler_output_5 <= -1.091533362865448) ? ( 2 ) : ( (scaler_output_7 <= 0.9910483360290527) ? ( (scaler_output_9 <= 1.235533356666565) ? ( (scaler_output_4 <= 0.35336577892303467) ? ( (scaler_output_11 <= -0.22822748124599457) ? ( 7 ) : ( (scaler_output_11 <= 0.21739888936281204) ? ( 9 ) : ( 10 ) ) ) : ( 11 ) ) : ( 12 ) ) : ( (scaler_output_9 <= 0.1660628318786621) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_10 <= 0.8861697912216187) ? ( (scaler_output_9 <= -0.2956913411617279) ? ( (scaler_output_4 <= 1.52311971783638) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_5 <= 0.3181282728910446) ? ( (scaler_output_4 <= 0.37797738146036863) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_11 <= 0.10855816677212715) ? ( 26 ) : ( (scaler_output_10 <= -0.22872911393642426) ? ( 28 ) : ( (scaler_output_5 <= 0.8981942534446716) ? ( 30 ) : ( 31 ) ) ) ) ) ) : ( (scaler_output_9 <= 0.31594332307577133) ? ( 33 ) : ( 34 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_14
		
	
		namespace RF_Tree_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 29 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 30 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 32 ,  {1.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_8 <= 0.5454300940036774) ? ( (scaler_output_8 <= -0.5153167992830276) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= 0.12132770754396915) ? ( (scaler_output_3 <= -0.7759919166564941) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) ) : ( (scaler_output_8 <= -0.003607690567150712) ? ( (scaler_output_9 <= 0.02690359205007553) ? ( (scaler_output_8 <= -0.044890157878398895) ? ( 13 ) : ( 14 ) ) : ( (scaler_output_7 <= 0.42385460436344147) ? ( (scaler_output_4 <= -0.33623257279396057) ? ( (scaler_output_9 <= 0.5039273798465729) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_10 <= 0.6472196131944656) ? ( (scaler_output_8 <= -0.8759022653102875) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (scaler_output_6 <= 0.9942872524261475) ? ( (scaler_output_3 <= 0.20287486165761948) ? ( (scaler_output_9 <= -0.6761108338832855) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) : ( 32 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace RF_Tree_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lTreeScores = { 
				RF_Tree_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_4::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_5::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_6::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_7::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_8::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_9::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_10::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_11::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_12::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_13::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_14::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				RF_Tree_15::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Proba", "Score"});
	
	
			tTable lTable = lAggregatedTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
