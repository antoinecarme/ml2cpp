// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_freidman1.exe ml2cpp-demo_RandomForestRegressor_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace EXT_SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.293284 }} ,
				{ 6 ,  {6.24571025 }} ,
				{ 7 ,  {8.0628501 }} ,
				{ 10 ,  {6.98004624 }} ,
				{ 12 ,  {8.89707415 }} ,
				{ 13 ,  {8.24017885 }} ,
				{ 15 ,  {11.38099315 }} ,
				{ 18 ,  {12.0711718 }} ,
				{ 19 ,  {12.123142 }} ,
				{ 20 ,  {12.76012926 }} ,
				{ 24 ,  {16.08254262 }} ,
				{ 25 ,  {16.3247696 }} ,
				{ 27 ,  {14.46699637 }} ,
				{ 28 ,  {14.0511849 }} ,
				{ 30 ,  {12.83034463 }} ,
				{ 32 ,  {11.77602305 }} ,
				{ 33 ,  {11.31351814 }} ,
				{ 39 ,  {10.13178962 }} ,
				{ 40 ,  {10.18163117 }} ,
				{ 41 ,  {6.86145372 }} ,
				{ 43 ,  {15.54179787 }} ,
				{ 44 ,  {13.11975672 }} ,
				{ 47 ,  {17.89244708 }} ,
				{ 48 ,  {18.25069552 }} ,
				{ 49 ,  {16.0096116 }} ,
				{ 55 ,  {15.92255811 }} ,
				{ 61 ,  {18.00761757 }} ,
				{ 62 ,  {17.954677 }} ,
				{ 63 ,  {18.10948375 }} ,
				{ 64 ,  {17.80609749 }} ,
				{ 65 ,  {17.4514578 }} ,
				{ 66 ,  {18.9003877 }} ,
				{ 67 ,  {14.53624519 }} ,
				{ 68 ,  {13.17420206 }} ,
				{ 70 ,  {23.18131441 }} ,
				{ 73 ,  {18.23761382 }} ,
				{ 74 ,  {16.91440831 }} ,
				{ 77 ,  {19.59215343 }} ,
				{ 78 ,  {19.36426348 }} ,
				{ 80 ,  {20.19903361 }} ,
				{ 81 ,  {20.06970209 }} ,
				{ 84 ,  {19.30378831 }} ,
				{ 85 ,  {18.28251507 }} ,
				{ 90 ,  {21.34099337 }} ,
				{ 91 ,  {21.77400035 }} ,
				{ 92 ,  {20.70189537 }} ,
				{ 94 ,  {22.76939497 }} ,
				{ 95 ,  {22.30975449 }} ,
				{ 97 ,  {23.03027937 }} ,
				{ 98 ,  {23.6939704 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.2961605191230774) ? ( (Feature_6 <= 0.49897274374961853) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_6 <= 0.43723364174366) ? ( (Feature_5 <= 0.4736480563879013) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_4 <= 0.19467464834451675) ? ( (Feature_2 <= 0.4218287914991379) ? ( 10 ) : ( (Feature_2 <= 0.5199634283781052) ? ( 12 ) : ( 13 ) ) ) : ( (Feature_1 <= 0.05319077707827091) ? ( 15 ) : ( (Feature_7 <= 0.2979065701365471) ? ( (Feature_5 <= 0.13959238305687904) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) ) ) : ( (Feature_3 <= 0.7664216458797455) ? ( (Feature_1 <= 0.2217060551047325) ? ( (Feature_8 <= 0.6166279315948486) ? ( 24 ) : ( 25 ) ) : ( (Feature_2 <= 0.7647112607955933) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_6 <= 0.6492892801761627) ? ( 30 ) : ( (Feature_1 <= 0.016631812730338424) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (Feature_3 <= 0.285542830824852) ? ( (Feature_0 <= 0.39444439113140106) ? ( (Feature_4 <= 0.714172899723053) ? ( (Feature_5 <= 0.35161110758781433) ? ( (Feature_0 <= 0.33709871768951416) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( (Feature_3 <= 0.26832807064056396) ? ( 43 ) : ( 44 ) ) ) : ( (Feature_8 <= 0.5971590578556061) ? ( (Feature_9 <= 0.46860275138169527) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( (Feature_3 <= 0.7838062047958374) ? ( (Feature_8 <= 0.5652650594711304) ? ( (Feature_8 <= 0.46307289600372314) ? ( (Feature_9 <= 0.9517935216426849) ? ( (Feature_2 <= 0.26763201504945755) ? ( 55 ) : ( (Feature_3 <= 0.7604074776172638) ? ( (Feature_1 <= 0.6457764506340027) ? ( (Feature_2 <= 0.6371399760246277) ? ( (Feature_7 <= 0.5990591645240784) ? ( (Feature_1 <= 0.3982042223215103) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) : ( 64 ) ) : ( 65 ) ) : ( 66 ) ) ) : ( 67 ) ) : ( 68 ) ) : ( (Feature_2 <= 0.01647283066995442) ? ( 70 ) : ( (Feature_1 <= 0.7201847732067108) ? ( (Feature_0 <= 0.6840011775493622) ? ( 73 ) : ( 74 ) ) : ( (Feature_6 <= 0.5388539135456085) ? ( (Feature_6 <= 0.45990701019763947) ? ( 77 ) : ( 78 ) ) : ( (Feature_2 <= 0.8386853933334351) ? ( 80 ) : ( 81 ) ) ) ) ) ) : ( (Feature_0 <= 0.5921931862831116) ? ( (Feature_0 <= 0.40736223757267) ? ( 84 ) : ( 85 ) ) : ( (Feature_6 <= 0.7125782072544098) ? ( (Feature_1 <= 0.6632418036460876) ? ( (Feature_5 <= 0.8101014792919159) ? ( (Feature_0 <= 0.7499225735664368) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( (Feature_2 <= 0.07504087965935469) ? ( 94 ) : ( 95 ) ) ) : ( (Feature_9 <= 0.4504685699939728) ? ( 97 ) : ( 98 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_0
	

	namespace EXT_SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {12.0711718 }} ,
				{ 7 ,  {13.17420206 }} ,
				{ 8 ,  {13.11975672 }} ,
				{ 10 ,  {18.25069552 }} ,
				{ 11 ,  {16.08254262 }} ,
				{ 16 ,  {9.73504122 }} ,
				{ 18 ,  {10.04520361 }} ,
				{ 19 ,  {10.13178962 }} ,
				{ 20 ,  {11.38099315 }} ,
				{ 22 ,  {11.78982164 }} ,
				{ 26 ,  {5.293284 }} ,
				{ 28 ,  {5.79437904 }} ,
				{ 29 ,  {6.24571025 }} ,
				{ 31 ,  {6.98004624 }} ,
				{ 32 ,  {6.86145372 }} ,
				{ 34 ,  {8.0628501 }} ,
				{ 37 ,  {7.55699808 }} ,
				{ 38 ,  {7.73242981 }} ,
				{ 39 ,  {7.21944335 }} ,
				{ 41 ,  {12.76012926 }} ,
				{ 42 ,  {12.123142 }} ,
				{ 47 ,  {8.89707415 }} ,
				{ 49 ,  {10.2020931 }} ,
				{ 50 ,  {11.31351814 }} ,
				{ 52 ,  {14.0511849 }} ,
				{ 53 ,  {12.83034463 }} ,
				{ 54 ,  {18.4937214 }} ,
				{ 57 ,  {15.30848399 }} ,
				{ 59 ,  {18.00761757 }} ,
				{ 61 ,  {18.33205802 }} ,
				{ 62 ,  {18.28251507 }} ,
				{ 64 ,  {21.34099337 }} ,
				{ 65 ,  {23.6939704 }} ,
				{ 69 ,  {18.10948375 }} ,
				{ 71 ,  {19.36426348 }} ,
				{ 73 ,  {20.19903361 }} ,
				{ 74 ,  {20.06970209 }} ,
				{ 77 ,  {18.25024804 }} ,
				{ 79 ,  {17.89244708 }} ,
				{ 80 ,  {17.80609749 }} ,
				{ 82 ,  {16.91440831 }} ,
				{ 84 ,  {16.30127921 }} ,
				{ 85 ,  {15.70652198 }} ,
				{ 88 ,  {25.24805848 }} ,
				{ 90 ,  {23.76092016 }} ,
				{ 92 ,  {22.76939497 }} ,
				{ 93 ,  {22.30975449 }} ,
				{ 94 ,  {18.9003877 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.5565721392631531) ? ( (Feature_3 <= 0.6123065948486328) ? ( (Feature_2 <= 0.27458563446998596) ? ( (Feature_5 <= 0.788075178861618) ? ( (Feature_5 <= 0.26729703322052956) ? ( 5 ) : ( (Feature_5 <= 0.5730847418308258) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_7 <= 0.3941645473241806) ? ( 10 ) : ( 11 ) ) ) : ( (Feature_2 <= 0.8398310840129852) ? ( (Feature_5 <= 0.23939915001392365) ? ( (Feature_3 <= 0.42241309583187103) ? ( (Feature_7 <= 0.5571437478065491) ? ( 16 ) : ( (Feature_7 <= 0.7845955193042755) ? ( 18 ) : ( 19 ) ) ) : ( 20 ) ) : ( (Feature_7 <= 0.14545949921011925) ? ( 22 ) : ( (Feature_5 <= 0.6358309984207153) ? ( (Feature_3 <= 0.13574287667870522) ? ( (Feature_3 <= 0.05130735971033573) ? ( 26 ) : ( (Feature_5 <= 0.378505602478981) ? ( 28 ) : ( 29 ) ) ) : ( (Feature_1 <= 0.2566765770316124) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_8 <= 0.5502381473779678) ? ( 34 ) : ( (Feature_1 <= 0.38711266964673996) ? ( (Feature_2 <= 0.3220384418964386) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) ) ) ) : ( (Feature_2 <= 0.8893200159072876) ? ( 41 ) : ( 42 ) ) ) ) : ( (Feature_1 <= 0.27081388235092163) ? ( (Feature_3 <= 0.8935775458812714) ? ( (Feature_2 <= 0.6602141857147217) ? ( (Feature_4 <= 0.25800637155771255) ? ( 47 ) : ( (Feature_3 <= 0.7703538835048676) ? ( 49 ) : ( 50 ) ) ) : ( (Feature_9 <= 0.7005986273288727) ? ( 52 ) : ( 53 ) ) ) : ( 54 ) ) : ( (Feature_0 <= 0.692611426115036) ? ( (Feature_4 <= 0.3584350645542145) ? ( 57 ) : ( (Feature_9 <= 0.32268066704273224) ? ( 59 ) : ( (Feature_2 <= 0.469236359000206) ? ( 61 ) : ( 62 ) ) ) ) : ( (Feature_6 <= 0.7125782072544098) ? ( 64 ) : ( 65 ) ) ) ) ) : ( (Feature_3 <= 0.7423960864543915) ? ( (Feature_5 <= 0.5558743476867676) ? ( (Feature_4 <= 0.3948182761669159) ? ( 69 ) : ( (Feature_6 <= 0.5388539135456085) ? ( 71 ) : ( (Feature_0 <= 0.4130078852176666) ? ( 73 ) : ( 74 ) ) ) ) : ( (Feature_9 <= 0.33611391484737396) ? ( (Feature_7 <= 0.2368144392967224) ? ( 77 ) : ( (Feature_5 <= 0.861773669719696) ? ( 79 ) : ( 80 ) ) ) : ( (Feature_4 <= 0.45038744807243347) ? ( 82 ) : ( (Feature_2 <= 0.1177167221903801) ? ( 84 ) : ( 85 ) ) ) ) ) : ( (Feature_0 <= 0.80439493060112) ? ( (Feature_0 <= 0.5215244442224503) ? ( 88 ) : ( (Feature_1 <= 0.7573649287223816) ? ( 90 ) : ( (Feature_3 <= 0.9295957982540131) ? ( 92 ) : ( 93 ) ) ) ) : ( 94 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_1
	

	namespace EXT_SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {9.73504122 }} ,
				{ 6 ,  {6.86145372 }} ,
				{ 8 ,  {8.0628501 }} ,
				{ 9 ,  {7.55699808 }} ,
				{ 10 ,  {5.293284 }} ,
				{ 15 ,  {8.89707415 }} ,
				{ 16 ,  {7.73242981 }} ,
				{ 18 ,  {10.48306677 }} ,
				{ 20 ,  {12.76012926 }} ,
				{ 21 ,  {12.83034463 }} ,
				{ 23 ,  {12.0711718 }} ,
				{ 26 ,  {14.0511849 }} ,
				{ 27 ,  {14.77256375 }} ,
				{ 28 ,  {13.17420206 }} ,
				{ 31 ,  {11.38099315 }} ,
				{ 33 ,  {14.46699637 }} ,
				{ 34 ,  {16.08254262 }} ,
				{ 36 ,  {18.33205802 }} ,
				{ 37 ,  {23.6939704 }} ,
				{ 41 ,  {7.21944335 }} ,
				{ 43 ,  {12.42341176 }} ,
				{ 44 ,  {14.53624519 }} ,
				{ 46 ,  {10.18163117 }} ,
				{ 49 ,  {17.89244708 }} ,
				{ 52 ,  {16.30127921 }} ,
				{ 53 ,  {16.0096116 }} ,
				{ 55 ,  {15.70652198 }} ,
				{ 56 ,  {15.70100345 }} ,
				{ 61 ,  {19.95894273 }} ,
				{ 62 ,  {20.06970209 }} ,
				{ 63 ,  {20.19903361 }} ,
				{ 64 ,  {18.23761382 }} ,
				{ 67 ,  {17.954677 }} ,
				{ 69 ,  {18.25024804 }} ,
				{ 70 ,  {18.25069552 }} ,
				{ 72 ,  {17.80609749 }} ,
				{ 74 ,  {17.51855413 }} ,
				{ 75 ,  {17.4514578 }} ,
				{ 78 ,  {15.30848399 }} ,
				{ 79 ,  {19.30378831 }} ,
				{ 83 ,  {21.34099337 }} ,
				{ 84 ,  {21.77400035 }} ,
				{ 86 ,  {23.03027937 }} ,
				{ 87 ,  {22.76939497 }} ,
				{ 89 ,  {25.24805848 }} ,
				{ 90 ,  {24.71333827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.41906213760375977) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_7 <= 0.4824558347463608) ? ( (Feature_5 <= 0.24642874929122627) ? ( 4 ) : ( (Feature_7 <= 0.1845293790102005) ? ( 6 ) : ( (Feature_4 <= 0.3075701780617237) ? ( 8 ) : ( 9 ) ) ) ) : ( 10 ) ) : ( (Feature_4 <= 0.7761108577251434) ? ( (Feature_1 <= 0.24366989731788635) ? ( (Feature_0 <= 0.16732729226350784) ? ( (Feature_4 <= 0.27931351214647293) ? ( 15 ) : ( 16 ) ) : ( (Feature_5 <= 0.4468800649046898) ? ( 18 ) : ( (Feature_6 <= 0.3293302431702614) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_4 <= 0.2737547233700752) ? ( 23 ) : ( (Feature_1 <= 0.3046325445175171) ? ( (Feature_1 <= 0.2730926275253296) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) ) ) : ( (Feature_1 <= 0.2572079375386238) ? ( (Feature_5 <= 0.4696953147649765) ? ( 31 ) : ( (Feature_5 <= 0.8165674805641174) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_6 <= 0.6592288911342621) ? ( 36 ) : ( 37 ) ) ) ) ) : ( (Feature_3 <= 0.7650072276592255) ? ( (Feature_0 <= 0.2921977788209915) ? ( (Feature_2 <= 0.4464615732431412) ? ( 41 ) : ( (Feature_7 <= 0.21963316947221756) ? ( 43 ) : ( 44 ) ) ) : ( (Feature_5 <= 0.02199404314160347) ? ( 46 ) : ( (Feature_3 <= 0.19053205102682114) ? ( (Feature_9 <= 0.03806536737829447) ? ( 49 ) : ( (Feature_0 <= 0.4862767159938812) ? ( (Feature_6 <= 0.07515738718211651) ? ( 52 ) : ( 53 ) ) : ( (Feature_3 <= 0.12176384031772614) ? ( 55 ) : ( 56 ) ) ) ) : ( (Feature_5 <= 0.5558743476867676) ? ( (Feature_0 <= 0.5802800804376602) ? ( (Feature_1 <= 0.8669473528862) ? ( (Feature_2 <= 0.5260999463498592) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) : ( 64 ) ) : ( (Feature_7 <= 0.32628414034843445) ? ( (Feature_8 <= 0.40889495611190796) ? ( 67 ) : ( (Feature_7 <= 0.23672020435333252) ? ( 69 ) : ( 70 ) ) ) : ( (Feature_4 <= 0.1952035203576088) ? ( 72 ) : ( (Feature_5 <= 0.6487990319728851) ? ( 74 ) : ( 75 ) ) ) ) ) ) ) ) : ( (Feature_0 <= 0.33136409521102905) ? ( (Feature_0 <= 0.20973718911409378) ? ( 78 ) : ( 79 ) ) : ( (Feature_2 <= 0.8334439098834991) ? ( (Feature_1 <= 0.5314056873321533) ? ( (Feature_8 <= 0.09906404465436935) ? ( 83 ) : ( 84 ) ) : ( (Feature_0 <= 0.6687067449092865) ? ( 86 ) : ( 87 ) ) ) : ( (Feature_7 <= 0.5393278524279594) ? ( 89 ) : ( 90 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_2
	

	namespace EXT_SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {6.86145372 }} ,
				{ 7 ,  {5.293284 }} ,
				{ 8 ,  {5.79437904 }} ,
				{ 9 ,  {9.73504122 }} ,
				{ 13 ,  {12.76012926 }} ,
				{ 14 ,  {13.11975672 }} ,
				{ 17 ,  {12.0711718 }} ,
				{ 18 ,  {12.123142 }} ,
				{ 19 ,  {11.78982164 }} ,
				{ 22 ,  {6.98004624 }} ,
				{ 23 ,  {8.24017885 }} ,
				{ 24 ,  {11.38099315 }} ,
				{ 27 ,  {16.3247696 }} ,
				{ 29 ,  {18.00761757 }} ,
				{ 30 ,  {18.4937214 }} ,
				{ 32 ,  {14.0511849 }} ,
				{ 33 ,  {12.83034463 }} ,
				{ 37 ,  {10.13178962 }} ,
				{ 43 ,  {16.30127921 }} ,
				{ 44 ,  {16.0096116 }} ,
				{ 46 ,  {15.70100345 }} ,
				{ 47 ,  {15.54179787 }} ,
				{ 51 ,  {18.25024804 }} ,
				{ 52 ,  {18.10948375 }} ,
				{ 53 ,  {17.89244708 }} ,
				{ 54 ,  {16.91440831 }} ,
				{ 55 ,  {12.42341176 }} ,
				{ 58 ,  {18.23761382 }} ,
				{ 61 ,  {17.4514578 }} ,
				{ 62 ,  {17.51855413 }} ,
				{ 63 ,  {17.80609749 }} ,
				{ 65 ,  {20.06970209 }} ,
				{ 66 ,  {20.62985591 }} ,
				{ 70 ,  {19.36426348 }} ,
				{ 71 ,  {19.59215343 }} ,
				{ 72 ,  {20.19903361 }} ,
				{ 73 ,  {23.18131441 }} ,
				{ 79 ,  {22.76939497 }} ,
				{ 80 ,  {23.03027937 }} ,
				{ 81 ,  {23.76092016 }} ,
				{ 82 ,  {21.77400035 }} ,
				{ 86 ,  {21.34099337 }} ,
				{ 87 ,  {20.70189537 }} ,
				{ 88 ,  {22.30975449 }} ,
				{ 89 ,  {19.30378831 }} ,
				{ 91 ,  {25.24805848 }} ,
				{ 92 ,  {24.71333827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.5503556430339813) ? ( (Feature_3 <= 0.23714027553796768) ? ( (Feature_9 <= 0.9079262018203735) ? ( (Feature_7 <= 0.18277814984321594) ? ( 5 ) : ( (Feature_1 <= 0.25104328989982605) ? ( 7 ) : ( 8 ) ) ) : ( 9 ) ) : ( (Feature_7 <= 0.4551353305578232) ? ( (Feature_3 <= 0.3253711760044098) ? ( (Feature_4 <= 0.8020070195198059) ? ( 13 ) : ( 14 ) ) : ( (Feature_3 <= 0.5050018280744553) ? ( (Feature_5 <= 0.13959238305687904) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) : ( (Feature_9 <= 0.5682677626609802) ? ( (Feature_3 <= 0.37000204622745514) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) : ( (Feature_7 <= 0.8797691464424133) ? ( (Feature_5 <= 0.3533560372889042) ? ( 27 ) : ( (Feature_8 <= 0.5064275413751602) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_8 <= 0.38392195105552673) ? ( 32 ) : ( 33 ) ) ) ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_1 <= 0.8261407911777496) ? ( (Feature_1 <= 0.5451890528202057) ? ( 37 ) : ( (Feature_6 <= 0.6560377478599548) ? ( (Feature_3 <= 0.7420268058776855) ? ( (Feature_0 <= 0.6166063845157623) ? ( (Feature_6 <= 0.2162335105240345) ? ( (Feature_3 <= 0.12829529866576195) ? ( 43 ) : ( 44 ) ) : ( (Feature_6 <= 0.4047914892435074) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_6 <= 0.5318301320075989) ? ( (Feature_4 <= 0.4820331633090973) ? ( (Feature_0 <= 0.866364598274231) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( 54 ) ) ) : ( 55 ) ) : ( (Feature_7 <= 0.590729683637619) ? ( (Feature_3 <= 0.4270026981830597) ? ( 58 ) : ( (Feature_5 <= 0.7764866650104523) ? ( (Feature_7 <= 0.4823393225669861) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) : ( (Feature_3 <= 0.4608627259731293) ? ( 65 ) : ( 66 ) ) ) ) ) : ( (Feature_5 <= 0.9200620949268341) ? ( (Feature_6 <= 0.5388539135456085) ? ( (Feature_5 <= 0.6617153137922287) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) : ( 73 ) ) ) : ( (Feature_2 <= 0.8334439098834991) ? ( (Feature_9 <= 0.4366416782140732) ? ( (Feature_0 <= 0.7997024357318878) ? ( (Feature_0 <= 0.7463302910327911) ? ( (Feature_3 <= 0.9129621386528015) ? ( 79 ) : ( 80 ) ) : ( 81 ) ) : ( 82 ) ) : ( (Feature_7 <= 0.8992081880569458) ? ( (Feature_8 <= 0.6422417759895325) ? ( (Feature_4 <= 0.2930884212255478) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) : ( 89 ) ) ) : ( (Feature_0 <= 0.49181582033634186) ? ( 91 ) : ( 92 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_3
	

	namespace EXT_SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {8.0628501 }} ,
				{ 7 ,  {6.98004624 }} ,
				{ 8 ,  {7.55699808 }} ,
				{ 10 ,  {5.293284 }} ,
				{ 11 ,  {6.24571025 }} ,
				{ 15 ,  {10.04520361 }} ,
				{ 18 ,  {12.0711718 }} ,
				{ 19 ,  {12.123142 }} ,
				{ 22 ,  {11.78982164 }} ,
				{ 23 ,  {11.77602305 }} ,
				{ 24 ,  {12.10988659 }} ,
				{ 25 ,  {14.0511849 }} ,
				{ 28 ,  {10.59689049 }} ,
				{ 29 ,  {11.31351814 }} ,
				{ 31 ,  {8.24017885 }} ,
				{ 32 ,  {7.73242981 }} ,
				{ 36 ,  {16.08254262 }} ,
				{ 37 ,  {16.30255672 }} ,
				{ 38 ,  {18.33205802 }} ,
				{ 41 ,  {11.38099315 }} ,
				{ 42 ,  {12.83034463 }} ,
				{ 43 ,  {14.46699637 }} ,
				{ 46 ,  {10.18163117 }} ,
				{ 47 ,  {9.73504122 }} ,
				{ 53 ,  {15.30848399 }} ,
				{ 54 ,  {15.54179787 }} ,
				{ 56 ,  {15.92255811 }} ,
				{ 57 ,  {15.70100345 }} ,
				{ 59 ,  {16.91440831 }} ,
				{ 60 ,  {18.25069552 }} ,
				{ 64 ,  {20.06970209 }} ,
				{ 69 ,  {17.954677 }} ,
				{ 70 ,  {18.00761757 }} ,
				{ 72 ,  {17.80609749 }} ,
				{ 73 ,  {17.89244708 }} ,
				{ 76 ,  {18.23761382 }} ,
				{ 77 ,  {18.25024804 }} ,
				{ 78 ,  {18.28251507 }} ,
				{ 80 ,  {17.36059041 }} ,
				{ 82 ,  {17.41761148 }} ,
				{ 83 ,  {17.4514578 }} ,
				{ 84 ,  {16.0096116 }} ,
				{ 87 ,  {20.62985591 }} ,
				{ 88 ,  {20.19903361 }} ,
				{ 90 ,  {18.9003877 }} ,
				{ 91 ,  {17.31914707 }} ,
				{ 93 ,  {24.71333827 }} ,
				{ 94 ,  {23.6939704 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.28362607955932617) ? ( (Feature_4 <= 0.6291640996932983) ? ( (Feature_3 <= 0.3159424811601639) ? ( (Feature_9 <= 0.6906381845474243) ? ( (Feature_8 <= 0.5502381473779678) ? ( 5 ) : ( (Feature_0 <= 0.8103325068950653) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_2 <= 0.5542399883270264) ? ( 10 ) : ( 11 ) ) ) : ( (Feature_5 <= 0.7398938536643982) ? ( (Feature_7 <= 0.9633970856666565) ? ( (Feature_3 <= 0.33722974359989166) ? ( 15 ) : ( (Feature_3 <= 0.5050018280744553) ? ( (Feature_7 <= 0.11729322001338005) ? ( 18 ) : ( 19 ) ) : ( (Feature_8 <= 0.5417225509881973) ? ( (Feature_5 <= 0.7157523930072784) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) : ( 25 ) ) : ( (Feature_1 <= 0.09260802157223225) ? ( (Feature_1 <= 0.018471707124263048) ? ( 28 ) : ( 29 ) ) : ( (Feature_5 <= 0.7625731825828552) ? ( 31 ) : ( 32 ) ) ) ) ) : ( (Feature_2 <= 0.3033626824617386) ? ( (Feature_1 <= 0.2519054412841797) ? ( (Feature_8 <= 0.6598385572433472) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) : ( (Feature_0 <= 0.7876879274845123) ? ( (Feature_8 <= 0.2213916382752359) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) : ( (Feature_5 <= 0.030527208000421524) ? ( (Feature_6 <= 0.6303840577602386) ? ( 46 ) : ( 47 ) ) : ( (Feature_7 <= 0.7540234327316284) ? ( (Feature_2 <= 0.27558816224336624) ? ( (Feature_0 <= 0.6444946825504303) ? ( (Feature_5 <= 0.5527525693178177) ? ( (Feature_7 <= 0.3744494915008545) ? ( 53 ) : ( 54 ) ) : ( (Feature_8 <= 0.5699658244848251) ? ( 56 ) : ( 57 ) ) ) : ( (Feature_4 <= 0.4616316258907318) ? ( 59 ) : ( 60 ) ) ) : ( (Feature_9 <= 0.8557338118553162) ? ( (Feature_2 <= 0.9678525626659393) ? ( (Feature_5 <= 0.297678105533123) ? ( 64 ) : ( (Feature_1 <= 0.6895047724246979) ? ( (Feature_8 <= 0.6025375127792358) ? ( (Feature_2 <= 0.5177716612815857) ? ( (Feature_9 <= 0.1037697046995163) ? ( 69 ) : ( 70 ) ) : ( (Feature_1 <= 0.5872502326965332) ? ( 72 ) : ( 73 ) ) ) : ( (Feature_5 <= 0.6077049672603607) ? ( (Feature_0 <= 0.7352063953876495) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) ) : ( (Feature_3 <= 0.60357865691185) ? ( 80 ) : ( (Feature_9 <= 0.06341572396922857) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 84 ) ) : ( (Feature_2 <= 0.7943258881568909) ? ( (Feature_1 <= 0.8569352030754089) ? ( 87 ) : ( 88 ) ) : ( (Feature_5 <= 0.43213583528995514) ? ( 90 ) : ( 91 ) ) ) ) ) : ( (Feature_3 <= 0.7859134674072266) ? ( 93 ) : ( 94 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_4
	

	namespace EXT_SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.293284 }} ,
				{ 6 ,  {6.24571025 }} ,
				{ 8 ,  {7.73242981 }} ,
				{ 9 ,  {6.98004624 }} ,
				{ 13 ,  {10.48306677 }} ,
				{ 14 ,  {10.59689049 }} ,
				{ 15 ,  {8.89707415 }} ,
				{ 17 ,  {12.123142 }} ,
				{ 18 ,  {11.78982164 }} ,
				{ 21 ,  {16.08254262 }} ,
				{ 24 ,  {12.10988659 }} ,
				{ 25 ,  {11.38099315 }} ,
				{ 27 ,  {12.76012926 }} ,
				{ 28 ,  {12.83034463 }} ,
				{ 29 ,  {18.4937214 }} ,
				{ 33 ,  {15.70100345 }} ,
				{ 36 ,  {8.0628501 }} ,
				{ 38 ,  {9.73504122 }} ,
				{ 39 ,  {10.18163117 }} ,
				{ 41 ,  {5.79437904 }} ,
				{ 42 ,  {7.21944335 }} ,
				{ 44 ,  {10.13178962 }} ,
				{ 48 ,  {16.30127921 }} ,
				{ 49 ,  {16.0096116 }} ,
				{ 51 ,  {15.70652198 }} ,
				{ 52 ,  {15.54179787 }} ,
				{ 54 ,  {17.89244708 }} ,
				{ 55 ,  {18.25069552 }} ,
				{ 64 ,  {18.25024804 }} ,
				{ 65 ,  {18.33205802 }} ,
				{ 66 ,  {18.00761757 }} ,
				{ 68 ,  {17.4514578 }} ,
				{ 69 ,  {17.80609749 }} ,
				{ 70 ,  {16.30255672 }} ,
				{ 71 ,  {20.06970209 }} ,
				{ 74 ,  {15.92255811 }} ,
				{ 75 ,  {17.51855413 }} ,
				{ 77 ,  {14.46699637 }} ,
				{ 79 ,  {13.17420206 }} ,
				{ 80 ,  {12.42341176 }} ,
				{ 82 ,  {23.18131441 }} ,
				{ 85 ,  {20.62985591 }} ,
				{ 87 ,  {19.95894273 }} ,
				{ 88 ,  {20.19903361 }} ,
				{ 89 ,  {19.36426348 }} ,
				{ 91 ,  {17.41761148 }} ,
				{ 94 ,  {19.30378831 }} ,
				{ 95 ,  {18.28251507 }} ,
				{ 99 ,  {22.30975449 }} ,
				{ 100 ,  {21.77400035 }} ,
				{ 102 ,  {21.34099337 }} ,
				{ 103 ,  {20.70189537 }} ,
				{ 106 ,  {23.03027937 }} ,
				{ 107 ,  {23.6939704 }} ,
				{ 108 ,  {24.71333827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.2274620532989502) ? ( (Feature_4 <= 0.5962461233139038) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_3 <= 0.1977313570678234) ? ( (Feature_5 <= 0.4736480563879013) ? ( 5 ) : ( 6 ) ) : ( (Feature_7 <= 0.4078291952610016) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.6037389487028122) ? ( (Feature_1 <= 0.17463061958551407) ? ( (Feature_4 <= 0.408520832657814) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( (Feature_0 <= 0.7291085422039032) ? ( 17 ) : ( 18 ) ) ) ) : ( (Feature_3 <= 0.8869200050830841) ? ( (Feature_2 <= 0.05666722357273102) ? ( 21 ) : ( (Feature_2 <= 0.5129211246967316) ? ( (Feature_0 <= 0.46672049164772034) ? ( 24 ) : ( 25 ) ) : ( (Feature_4 <= 0.6343373656272888) ? ( 27 ) : ( 28 ) ) ) ) : ( 29 ) ) ) : ( (Feature_3 <= 0.27792081236839294) ? ( (Feature_4 <= 0.4481556862592697) ? ( (Feature_2 <= 0.20846251398324966) ? ( 33 ) : ( (Feature_8 <= 0.6122581958770752) ? ( (Feature_9 <= 0.26002889033406973) ? ( 36 ) : ( (Feature_3 <= 0.16502839140594006) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_0 <= 0.2835156321525574) ? ( 41 ) : ( 42 ) ) ) ) : ( (Feature_3 <= 0.04497052729129791) ? ( 44 ) : ( (Feature_5 <= 0.8320007622241974) ? ( (Feature_6 <= 0.18374911323189735) ? ( (Feature_8 <= 0.4034774247556925) ? ( 48 ) : ( 49 ) ) : ( (Feature_9 <= 0.6430685222148895) ? ( 51 ) : ( 52 ) ) ) : ( (Feature_9 <= 0.46860275138169527) ? ( 54 ) : ( 55 ) ) ) ) ) : ( (Feature_3 <= 0.7650072276592255) ? ( (Feature_1 <= 0.8006303906440735) ? ( (Feature_9 <= 0.5289024710655212) ? ( (Feature_2 <= 0.8551182746887207) ? ( (Feature_7 <= 0.6158276796340942) ? ( (Feature_6 <= 0.6218068897724152) ? ( (Feature_7 <= 0.3130784034729004) ? ( (Feature_3 <= 0.600687175989151) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) : ( (Feature_5 <= 0.7764866650104523) ? ( 68 ) : ( 69 ) ) ) : ( 70 ) ) : ( 71 ) ) : ( (Feature_8 <= 0.42504753172397614) ? ( (Feature_2 <= 0.531084455549717) ? ( 74 ) : ( 75 ) ) : ( (Feature_9 <= 0.5911969542503357) ? ( 77 ) : ( (Feature_3 <= 0.6279540956020355) ? ( 79 ) : ( 80 ) ) ) ) ) : ( (Feature_9 <= 0.6137681007385254) ? ( 82 ) : ( (Feature_0 <= 0.6878570914268494) ? ( (Feature_4 <= 0.8155905902385712) ? ( 85 ) : ( (Feature_1 <= 0.8669473528862) ? ( 87 ) : ( 88 ) ) ) : ( 89 ) ) ) ) : ( (Feature_9 <= 0.026602321420796216) ? ( 91 ) : ( (Feature_0 <= 0.5678139626979828) ? ( (Feature_2 <= 0.40052516013383865) ? ( 94 ) : ( 95 ) ) : ( (Feature_4 <= 0.43634942173957825) ? ( (Feature_7 <= 0.6053812354803085) ? ( (Feature_5 <= 0.46776755154132843) ? ( 99 ) : ( 100 ) ) : ( (Feature_4 <= 0.2930884212255478) ? ( 102 ) : ( 103 ) ) ) : ( (Feature_8 <= 0.6806686222553253) ? ( (Feature_7 <= 0.7887059152126312) ? ( 106 ) : ( 107 ) ) : ( 108 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_5
	

	namespace EXT_SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {5.293284 }} ,
				{ 7 ,  {5.79437904 }} ,
				{ 8 ,  {6.86145372 }} ,
				{ 11 ,  {7.55699808 }} ,
				{ 12 ,  {8.0628501 }} ,
				{ 13 ,  {9.73504122 }} ,
				{ 18 ,  {11.78982164 }} ,
				{ 19 ,  {12.0711718 }} ,
				{ 20 ,  {12.76012926 }} ,
				{ 22 ,  {10.48306677 }} ,
				{ 23 ,  {10.04520361 }} ,
				{ 25 ,  {13.17420206 }} ,
				{ 26 ,  {14.46699637 }} ,
				{ 30 ,  {7.21944335 }} ,
				{ 31 ,  {10.13178962 }} ,
				{ 32 ,  {13.11975672 }} ,
				{ 36 ,  {15.54179787 }} ,
				{ 37 ,  {15.70652198 }} ,
				{ 40 ,  {18.25069552 }} ,
				{ 41 ,  {17.89244708 }} ,
				{ 42 ,  {16.91440831 }} ,
				{ 45 ,  {20.06970209 }} ,
				{ 46 ,  {19.95894273 }} ,
				{ 48 ,  {17.954677 }} ,
				{ 49 ,  {18.23761382 }} ,
				{ 53 ,  {23.76092016 }} ,
				{ 56 ,  {23.03027937 }} ,
				{ 57 ,  {23.18131441 }} ,
				{ 58 ,  {22.76939497 }} ,
				{ 59 ,  {21.77400035 }} ,
				{ 64 ,  {15.30848399 }} ,
				{ 65 ,  {15.92255811 }} ,
				{ 68 ,  {21.34099337 }} ,
				{ 69 ,  {20.62985591 }} ,
				{ 72 ,  {16.30255672 }} ,
				{ 76 ,  {17.36059041 }} ,
				{ 77 ,  {17.31914707 }} ,
				{ 79 ,  {18.10948375 }} ,
				{ 80 ,  {17.80609749 }} ,
				{ 82 ,  {19.36426348 }} ,
				{ 85 ,  {18.33205802 }} ,
				{ 86 ,  {18.28251507 }} ,
				{ 87 ,  {18.4937214 }} ,
				{ 88 ,  {20.70189537 }} ,
				{ 90 ,  {10.59689049 }} ,
				{ 91 ,  {14.53624519 }} ,
				{ 94 ,  {24.71333827 }} ,
				{ 95 ,  {23.6939704 }} ,
				{ 96 ,  {20.19903361 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.5515244901180267) ? ( (Feature_1 <= 0.41576971113681793) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_3 <= 0.043404337018728256) ? ( 4 ) : ( (Feature_7 <= 0.19598616659641266) ? ( (Feature_3 <= 0.13466930761933327) ? ( 7 ) : ( 8 ) ) : ( (Feature_2 <= 0.732818990945816) ? ( (Feature_7 <= 0.2933426946401596) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (Feature_8 <= 0.4511255770921707) ? ( (Feature_7 <= 0.5479398965835571) ? ( (Feature_4 <= 0.4138222560286522) ? ( (Feature_1 <= 0.2344973310828209) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_1 <= 0.1376376673579216) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_5 <= 0.6015770435333252) ? ( 25 ) : ( 26 ) ) ) ) : ( (Feature_0 <= 0.31855587661266327) ? ( (Feature_4 <= 0.7979919612407684) ? ( (Feature_4 <= 0.5283788293600082) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (Feature_6 <= 0.6834737956523895) ? ( (Feature_5 <= 0.6348844766616821) ? ( (Feature_7 <= 0.669078141450882) ? ( 36 ) : ( 37 ) ) : ( (Feature_8 <= 0.591288834810257) ? ( (Feature_4 <= 0.5519881546497345) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) : ( (Feature_0 <= 0.5802800804376602) ? ( (Feature_3 <= 0.3946292996406555) ? ( 45 ) : ( 46 ) ) : ( (Feature_8 <= 0.585882693529129) ? ( 48 ) : ( 49 ) ) ) ) ) ) : ( (Feature_2 <= 0.19114422053098679) ? ( (Feature_0 <= 0.7997024357318878) ? ( (Feature_8 <= 0.33143275044858456) ? ( 53 ) : ( (Feature_8 <= 0.9257237017154694) ? ( (Feature_8 <= 0.7776489555835724) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( 59 ) ) : ( (Feature_4 <= 0.9312089085578918) ? ( (Feature_9 <= 0.9371794760227203) ? ( (Feature_2 <= 0.22610484808683395) ? ( (Feature_7 <= 0.524090975522995) ? ( 64 ) : ( 65 ) ) : ( (Feature_8 <= 0.1479172259569168) ? ( (Feature_8 <= 0.09904630482196808) ? ( 68 ) : ( 69 ) ) : ( (Feature_5 <= 0.9124741852283478) ? ( (Feature_9 <= 0.2600744664669037) ? ( 72 ) : ( (Feature_4 <= 0.3272927403450012) ? ( (Feature_8 <= 0.26006389409303665) ? ( (Feature_6 <= 0.48789407312870026) ? ( 76 ) : ( 77 ) ) : ( (Feature_1 <= 0.5640119910240173) ? ( 79 ) : ( 80 ) ) ) : ( (Feature_3 <= 0.6249964833259583) ? ( 82 ) : ( (Feature_7 <= 0.2773728221654892) ? ( (Feature_9 <= 0.5529000759124756) ? ( 85 ) : ( 86 ) ) : ( 87 ) ) ) ) ) : ( 88 ) ) ) ) : ( (Feature_6 <= 0.23468871414661407) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_4 <= 0.9470477998256683) ? ( (Feature_3 <= 0.7859134674072266) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_6
	

	namespace EXT_SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {12.0711718 }} ,
				{ 6 ,  {13.11975672 }} ,
				{ 7 ,  {16.08254262 }} ,
				{ 11 ,  {5.293284 }} ,
				{ 13 ,  {6.86145372 }} ,
				{ 14 ,  {6.24571025 }} ,
				{ 17 ,  {8.24017885 }} ,
				{ 18 ,  {8.0628501 }} ,
				{ 20 ,  {7.55699808 }} ,
				{ 21 ,  {7.73242981 }} ,
				{ 23 ,  {9.73504122 }} ,
				{ 24 ,  {12.76012926 }} ,
				{ 30 ,  {12.10988659 }} ,
				{ 31 ,  {12.123142 }} ,
				{ 33 ,  {11.38099315 }} ,
				{ 35 ,  {11.78982164 }} ,
				{ 36 ,  {11.77602305 }} ,
				{ 38 ,  {10.59689049 }} ,
				{ 39 ,  {11.31351814 }} ,
				{ 40 ,  {18.4937214 }} ,
				{ 45 ,  {14.0511849 }} ,
				{ 46 ,  {14.77256375 }} ,
				{ 47 ,  {13.17420206 }} ,
				{ 51 ,  {18.28251507 }} ,
				{ 52 ,  {18.33205802 }} ,
				{ 53 ,  {18.00761757 }} ,
				{ 55 ,  {15.92255811 }} ,
				{ 56 ,  {16.30255672 }} ,
				{ 57 ,  {23.6939704 }} ,
				{ 59 ,  {7.21944335 }} ,
				{ 67 ,  {15.70652198 }} ,
				{ 68 ,  {15.70100345 }} ,
				{ 70 ,  {16.30127921 }} ,
				{ 71 ,  {16.0096116 }} ,
				{ 72 ,  {17.89244708 }} ,
				{ 73 ,  {12.42341176 }} ,
				{ 77 ,  {17.80609749 }} ,
				{ 78 ,  {17.4514578 }} ,
				{ 80 ,  {17.954677 }} ,
				{ 81 ,  {18.23761382 }} ,
				{ 83 ,  {20.62985591 }} ,
				{ 85 ,  {20.06970209 }} ,
				{ 86 ,  {19.95894273 }} ,
				{ 89 ,  {20.19903361 }} ,
				{ 90 ,  {19.59215343 }} ,
				{ 91 ,  {23.18131441 }} ,
				{ 94 ,  {15.30848399 }} ,
				{ 95 ,  {19.30378831 }} ,
				{ 99 ,  {21.77400035 }} ,
				{ 101 ,  {23.03027937 }} ,
				{ 102 ,  {22.76939497 }} ,
				{ 105 ,  {25.24805848 }} ,
				{ 106 ,  {24.71333827 }} ,
				{ 107 ,  {23.76092016 }} ,
				{ 109 ,  {18.9003877 }} ,
				{ 111 ,  {22.30975449 }} ,
				{ 112 ,  {21.34099337 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_2 <= 0.27202121913433075) ? ( (Feature_9 <= 0.5757821202278137) ? ( (Feature_7 <= 0.2279195375740528) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_9 <= 0.9239699840545654) ? ( (Feature_5 <= 0.6208158731460571) ? ( (Feature_3 <= 0.05238092876970768) ? ( 11 ) : ( (Feature_2 <= 0.5730125159025192) ? ( 13 ) : ( 14 ) ) ) : ( (Feature_6 <= 0.6476445496082306) ? ( (Feature_2 <= 0.6229458749294281) ? ( 17 ) : ( 18 ) ) : ( (Feature_8 <= 0.8098065555095673) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_9 <= 0.9886734485626221) ? ( 23 ) : ( 24 ) ) ) ) : ( (Feature_1 <= 0.21828948706388474) ? ( (Feature_6 <= 0.8910522162914276) ? ( (Feature_5 <= 0.8189209997653961) ? ( (Feature_6 <= 0.18259304761886597) ? ( (Feature_8 <= 0.7472862005233765) ? ( 30 ) : ( 31 ) ) : ( (Feature_2 <= 0.3397069573402405) ? ( 33 ) : ( (Feature_3 <= 0.7136146128177643) ? ( 35 ) : ( 36 ) ) ) ) : ( (Feature_6 <= 0.5194769501686096) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) : ( (Feature_6 <= 0.6861744523048401) ? ( (Feature_0 <= 0.5413242876529694) ? ( (Feature_1 <= 0.3046325445175171) ? ( (Feature_8 <= 0.5244986265897751) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (Feature_7 <= 0.5356164574623108) ? ( (Feature_7 <= 0.3130784034729004) ? ( (Feature_4 <= 0.6716401129961014) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (Feature_7 <= 0.7688601315021515) ? ( 55 ) : ( 56 ) ) ) ) : ( 57 ) ) ) ) : ( (Feature_3 <= 0.031439348589628935) ? ( 59 ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_1 <= 0.8266487419605255) ? ( (Feature_6 <= 0.6300066411495209) ? ( (Feature_5 <= 0.9098039865493774) ? ( (Feature_5 <= 0.8320007622241974) ? ( (Feature_4 <= 0.4838920533657074) ? ( (Feature_3 <= 0.12176384031772614) ? ( 67 ) : ( 68 ) ) : ( (Feature_6 <= 0.07515738718211651) ? ( 70 ) : ( 71 ) ) ) : ( 72 ) ) : ( 73 ) ) : ( (Feature_1 <= 0.7234399914741516) ? ( (Feature_8 <= 0.3456742763519287) ? ( (Feature_3 <= 0.641144186258316) ? ( 77 ) : ( 78 ) ) : ( (Feature_8 <= 0.585882693529129) ? ( 80 ) : ( 81 ) ) ) : ( (Feature_6 <= 0.7786195576190948) ? ( 83 ) : ( (Feature_1 <= 0.7748122215270996) ? ( 85 ) : ( 86 ) ) ) ) ) : ( (Feature_8 <= 0.8270924687385559) ? ( (Feature_5 <= 0.7243125140666962) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) : ( (Feature_0 <= 0.33136409521102905) ? ( (Feature_9 <= 0.2559871282428503) ? ( 94 ) : ( 95 ) ) : ( (Feature_9 <= 0.6470779180526733) ? ( (Feature_9 <= 0.3811536580324173) ? ( (Feature_6 <= 0.17844954365864396) ? ( 99 ) : ( (Feature_0 <= 0.6687067449092865) ? ( 101 ) : ( 102 ) ) ) : ( (Feature_7 <= 0.9216113686561584) ? ( (Feature_6 <= 0.4778665453195572) ? ( 105 ) : ( 106 ) ) : ( 107 ) ) ) : ( (Feature_6 <= 0.36049211770296097) ? ( 109 ) : ( (Feature_0 <= 0.6733211278915405) ? ( 111 ) : ( 112 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_7
	

	namespace EXT_SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {8.89707415 }} ,
				{ 8 ,  {8.24017885 }} ,
				{ 11 ,  {10.59689049 }} ,
				{ 12 ,  {10.48306677 }} ,
				{ 14 ,  {10.04520361 }} ,
				{ 15 ,  {9.73504122 }} ,
				{ 18 ,  {5.79437904 }} ,
				{ 19 ,  {6.24571025 }} ,
				{ 21 ,  {7.55699808 }} ,
				{ 22 ,  {6.86145372 }} ,
				{ 23 ,  {14.0511849 }} ,
				{ 26 ,  {11.38099315 }} ,
				{ 28 ,  {12.10988659 }} ,
				{ 29 ,  {12.83034463 }} ,
				{ 33 ,  {13.11975672 }} ,
				{ 34 ,  {12.76012926 }} ,
				{ 35 ,  {14.46699637 }} ,
				{ 39 ,  {16.30255672 }} ,
				{ 40 ,  {16.3247696 }} ,
				{ 41 ,  {16.08254262 }} ,
				{ 42 ,  {18.33205802 }} ,
				{ 44 ,  {18.28251507 }} ,
				{ 45 ,  {23.6939704 }} ,
				{ 50 ,  {17.36059041 }} ,
				{ 53 ,  {15.30848399 }} ,
				{ 55 ,  {16.0096116 }} ,
				{ 56 ,  {15.70100345 }} ,
				{ 57 ,  {14.53624519 }} ,
				{ 59 ,  {21.77400035 }} ,
				{ 62 ,  {18.10948375 }} ,
				{ 63 ,  {18.25069552 }} ,
				{ 64 ,  {18.9003877 }} ,
				{ 65 ,  {10.13178962 }} ,
				{ 71 ,  {17.4514578 }} ,
				{ 72 ,  {17.41761148 }} ,
				{ 75 ,  {17.89244708 }} ,
				{ 76 ,  {17.954677 }} ,
				{ 78 ,  {18.23761382 }} ,
				{ 79 ,  {18.25024804 }} ,
				{ 81 ,  {20.19903361 }} ,
				{ 82 ,  {19.95894273 }} ,
				{ 85 ,  {22.76939497 }} ,
				{ 86 ,  {22.30975449 }} ,
				{ 88 ,  {21.34099337 }} ,
				{ 91 ,  {19.30378831 }} ,
				{ 92 ,  {19.59215343 }} ,
				{ 93 ,  {20.06970209 }} ,
				{ 95 ,  {20.70189537 }} ,
				{ 97 ,  {23.18131441 }} ,
				{ 99 ,  {25.24805848 }} ,
				{ 100 ,  {24.71333827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.7951142191886902) ? ( (Feature_4 <= 0.5962461233139038) ? ( (Feature_7 <= 0.8825740218162537) ? ( (Feature_8 <= 0.5274650007486343) ? ( (Feature_4 <= 0.21801140904426575) ? ( (Feature_0 <= 0.33693377673625946) ? ( 7 ) : ( 8 ) ) : ( (Feature_6 <= 0.6264922469854355) ? ( (Feature_7 <= 0.34855854883790016) ? ( 11 ) : ( 12 ) ) : ( (Feature_8 <= 0.4126679003238678) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_3 <= 0.09447410702705383) ? ( (Feature_0 <= 0.6414991319179535) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.3287118971347809) ? ( 21 ) : ( 22 ) ) ) ) : ( 23 ) ) : ( (Feature_1 <= 0.11907916516065598) ? ( (Feature_3 <= 0.5473644435405731) ? ( 26 ) : ( (Feature_0 <= 0.24264557659626007) ? ( 28 ) : ( 29 ) ) ) : ( (Feature_3 <= 0.4027707576751709) ? ( (Feature_6 <= 0.4636908397078514) ? ( (Feature_3 <= 0.2879795581102371) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( (Feature_1 <= 0.2519054412841797) ? ( (Feature_9 <= 0.6536157429218292) ? ( (Feature_0 <= 0.8378943502902985) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( 42 ) ) ) ) ) : ( (Feature_6 <= 0.4756978675723076) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_6 <= 0.3405216783285141) ? ( (Feature_4 <= 0.5641151964664459) ? ( (Feature_0 <= 0.674622118473053) ? ( (Feature_8 <= 0.28461893647909164) ? ( 50 ) : ( (Feature_9 <= 0.6659306883811951) ? ( (Feature_1 <= 0.5492422878742218) ? ( 53 ) : ( (Feature_6 <= 0.2162335105240345) ? ( 55 ) : ( 56 ) ) ) : ( 57 ) ) ) : ( (Feature_1 <= 0.45449964702129364) ? ( 59 ) : ( (Feature_6 <= 0.163359634578228) ? ( (Feature_4 <= 0.3105006515979767) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) ) ) : ( 65 ) ) : ( (Feature_5 <= 0.9200620949268341) ? ( (Feature_7 <= 0.45547378063201904) ? ( (Feature_9 <= 0.6127606630325317) ? ( (Feature_8 <= 0.27065111696720123) ? ( (Feature_0 <= 0.5782565027475357) ? ( 71 ) : ( 72 ) ) : ( (Feature_9 <= 0.06529435887932777) ? ( (Feature_9 <= 0.041677151806652546) ? ( 75 ) : ( 76 ) ) : ( (Feature_8 <= 0.8900166451931) ? ( 78 ) : ( 79 ) ) ) ) : ( (Feature_6 <= 0.7730399668216705) ? ( 81 ) : ( 82 ) ) ) : ( (Feature_4 <= 0.13040955364704132) ? ( (Feature_2 <= 0.07504087965935469) ? ( 85 ) : ( 86 ) ) : ( (Feature_1 <= 0.6086677312850952) ? ( 88 ) : ( (Feature_9 <= 0.4832744598388672) ? ( (Feature_1 <= 0.8109513521194458) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) ) ) : ( (Feature_1 <= 0.574216902256012) ? ( 95 ) : ( (Feature_3 <= 0.6668055653572083) ? ( 97 ) : ( (Feature_5 <= 0.9599380791187286) ? ( 99 ) : ( 100 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_8
	

	namespace EXT_SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {5.293284 }} ,
				{ 7 ,  {6.98004624 }} ,
				{ 10 ,  {8.24017885 }} ,
				{ 11 ,  {8.0628501 }} ,
				{ 12 ,  {7.73242981 }} ,
				{ 13 ,  {10.04520361 }} ,
				{ 17 ,  {11.31351814 }} ,
				{ 18 ,  {11.78982164 }} ,
				{ 20 ,  {10.48306677 }} ,
				{ 21 ,  {10.2020931 }} ,
				{ 22 ,  {14.0511849 }} ,
				{ 25 ,  {12.76012926 }} ,
				{ 27 ,  {14.46699637 }} ,
				{ 28 ,  {14.77256375 }} ,
				{ 29 ,  {16.3247696 }} ,
				{ 31 ,  {7.21944335 }} ,
				{ 35 ,  {10.18163117 }} ,
				{ 38 ,  {15.30848399 }} ,
				{ 39 ,  {14.53624519 }} ,
				{ 40 ,  {13.11975672 }} ,
				{ 44 ,  {18.28251507 }} ,
				{ 45 ,  {18.25069552 }} ,
				{ 46 ,  {17.36059041 }} ,
				{ 48 ,  {16.30127921 }} ,
				{ 50 ,  {15.70100345 }} ,
				{ 51 ,  {15.70652198 }} ,
				{ 57 ,  {13.17420206 }} ,
				{ 58 ,  {16.91440831 }} ,
				{ 60 ,  {20.06970209 }} ,
				{ 63 ,  {17.31914707 }} ,
				{ 65 ,  {17.4514578 }} ,
				{ 66 ,  {17.51855413 }} ,
				{ 69 ,  {17.954677 }} ,
				{ 70 ,  {17.89244708 }} ,
				{ 72 ,  {18.25024804 }} ,
				{ 73 ,  {18.23761382 }} ,
				{ 74 ,  {12.42341176 }} ,
				{ 77 ,  {19.59215343 }} ,
				{ 78 ,  {19.36426348 }} ,
				{ 80 ,  {20.62985591 }} ,
				{ 81 ,  {20.19903361 }} ,
				{ 84 ,  {17.41761148 }} ,
				{ 85 ,  {19.30378831 }} ,
				{ 89 ,  {23.6939704 }} ,
				{ 91 ,  {23.03027937 }} ,
				{ 92 ,  {22.76939497 }} ,
				{ 93 ,  {25.24805848 }} ,
				{ 94 ,  {20.70189537 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.28362607955932617) ? ( (Feature_4 <= 0.5598129630088806) ? ( (Feature_3 <= 0.4717613756656647) ? ( (Feature_8 <= 0.2506900280714035) ? ( 4 ) : ( (Feature_7 <= 0.7302424013614655) ? ( (Feature_6 <= 0.26258012652397156) ? ( 7 ) : ( (Feature_8 <= 0.5670513957738876) ? ( (Feature_1 <= 0.21722117066383362) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( 13 ) ) ) : ( (Feature_2 <= 0.8728516697883606) ? ( (Feature_7 <= 0.5083599984645844) ? ( (Feature_1 <= 0.12062416411936283) ? ( 17 ) : ( 18 ) ) : ( (Feature_2 <= 0.3602156229317188) ? ( 20 ) : ( 21 ) ) ) : ( 22 ) ) ) : ( (Feature_7 <= 0.7355274558067322) ? ( (Feature_3 <= 0.3358163684606552) ? ( 25 ) : ( (Feature_3 <= 0.4388246536254883) ? ( 27 ) : ( 28 ) ) ) : ( 29 ) ) ) : ( (Feature_3 <= 0.031439348589628935) ? ( 31 ) : ( (Feature_6 <= 0.34058183431625366) ? ( (Feature_0 <= 0.37086910009384155) ? ( (Feature_5 <= 0.22651812992990017) ? ( 35 ) : ( (Feature_4 <= 0.7304501533508301) ? ( (Feature_4 <= 0.3870691508054733) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) : ( (Feature_7 <= 0.6261704862117767) ? ( (Feature_2 <= 0.7086024880409241) ? ( (Feature_1 <= 0.4211408793926239) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (Feature_6 <= 0.1544292066246271) ? ( 48 ) : ( (Feature_0 <= 0.6749404072761536) ? ( 50 ) : ( 51 ) ) ) ) ) : ( (Feature_3 <= 0.7744332253932953) ? ( (Feature_1 <= 0.8006303906440735) ? ( (Feature_3 <= 0.7217671275138855) ? ( (Feature_2 <= 0.28528542816638947) ? ( (Feature_4 <= 0.4242798089981079) ? ( 57 ) : ( 58 ) ) : ( (Feature_5 <= 0.3051313981413841) ? ( 60 ) : ( (Feature_0 <= 0.6717714071273804) ? ( (Feature_6 <= 0.6610970199108124) ? ( 63 ) : ( (Feature_2 <= 0.7164072692394257) ? ( 65 ) : ( 66 ) ) ) : ( (Feature_8 <= 0.6025375127792358) ? ( (Feature_4 <= 0.5304128229618073) ? ( 69 ) : ( 70 ) ) : ( (Feature_7 <= 0.21901392936706543) ? ( 72 ) : ( 73 ) ) ) ) ) ) : ( 74 ) ) : ( (Feature_6 <= 0.5388539135456085) ? ( (Feature_8 <= 0.8307103514671326) ? ( 77 ) : ( 78 ) ) : ( (Feature_1 <= 0.8569352030754089) ? ( 80 ) : ( 81 ) ) ) ) : ( (Feature_5 <= 0.46383774280548096) ? ( (Feature_8 <= 0.3204294592142105) ? ( 84 ) : ( 85 ) ) : ( (Feature_7 <= 0.8166469931602478) ? ( (Feature_9 <= 0.5834312438964844) ? ( (Feature_3 <= 0.8369691967964172) ? ( 89 ) : ( (Feature_1 <= 0.7527655065059662) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( 94 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_9
	

	namespace EXT_SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {9.73504122 }} ,
				{ 5 ,  {8.0628501 }} ,
				{ 7 ,  {5.293284 }} ,
				{ 8 ,  {6.24571025 }} ,
				{ 15 ,  {12.0711718 }} ,
				{ 16 ,  {11.77602305 }} ,
				{ 17 ,  {10.48306677 }} ,
				{ 21 ,  {7.73242981 }} ,
				{ 22 ,  {8.24017885 }} ,
				{ 23 ,  {8.89707415 }} ,
				{ 25 ,  {10.04520361 }} ,
				{ 26 ,  {10.59689049 }} ,
				{ 29 ,  {12.83034463 }} ,
				{ 30 ,  {12.76012926 }} ,
				{ 31 ,  {11.78982164 }} ,
				{ 33 ,  {15.92255811 }} ,
				{ 35 ,  {14.0511849 }} ,
				{ 36 ,  {13.17420206 }} ,
				{ 40 ,  {18.00761757 }} ,
				{ 41 ,  {18.4937214 }} ,
				{ 43 ,  {16.30255672 }} ,
				{ 44 ,  {16.08254262 }} ,
				{ 46 ,  {11.38099315 }} ,
				{ 47 ,  {14.46699637 }} ,
				{ 50 ,  {7.21944335 }} ,
				{ 54 ,  {15.30848399 }} ,
				{ 55 ,  {14.53624519 }} ,
				{ 56 ,  {12.42341176 }} ,
				{ 57 ,  {19.30378831 }} ,
				{ 63 ,  {16.30127921 }} ,
				{ 64 ,  {16.0096116 }} ,
				{ 66 ,  {15.54179787 }} ,
				{ 67 ,  {15.70652198 }} ,
				{ 69 ,  {18.25069552 }} ,
				{ 70 ,  {17.89244708 }} ,
				{ 74 ,  {17.954677 }} ,
				{ 75 ,  {18.10948375 }} ,
				{ 76 ,  {17.51855413 }} ,
				{ 79 ,  {18.23761382 }} ,
				{ 80 ,  {18.25024804 }} ,
				{ 83 ,  {20.06970209 }} ,
				{ 84 ,  {19.95894273 }} ,
				{ 86 ,  {19.59215343 }} ,
				{ 87 ,  {19.36426348 }} ,
				{ 89 ,  {17.41761148 }} ,
				{ 92 ,  {21.34099337 }} ,
				{ 93 ,  {21.77400035 }} ,
				{ 95 ,  {23.76092016 }} ,
				{ 97 ,  {23.03027937 }} ,
				{ 98 ,  {22.76939497 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.41906213760375977) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_7 <= 0.47633881866931915) ? ( (Feature_7 <= 0.36835624277591705) ? ( 4 ) : ( 5 ) ) : ( (Feature_4 <= 0.32171057909727097) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_4 <= 0.6678532958030701) ? ( (Feature_1 <= 0.26310715079307556) ? ( (Feature_2 <= 0.6518020331859589) ? ( (Feature_2 <= 0.34143681824207306) ? ( (Feature_7 <= 0.38985564559698105) ? ( (Feature_4 <= 0.3441207930445671) ? ( 15 ) : ( 16 ) ) : ( 17 ) ) : ( (Feature_0 <= 0.6817231178283691) ? ( (Feature_3 <= 0.6032925248146057) ? ( (Feature_0 <= 0.32933082804083824) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (Feature_4 <= 0.5576753616333008) ? ( 25 ) : ( 26 ) ) ) ) : ( (Feature_1 <= 0.20732375234365463) ? ( (Feature_0 <= 0.49659718573093414) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) : ( (Feature_2 <= 0.22991188615560532) ? ( 33 ) : ( (Feature_9 <= 0.615781307220459) ? ( 35 ) : ( 36 ) ) ) ) : ( (Feature_4 <= 0.945286363363266) ? ( (Feature_7 <= 0.41088664531707764) ? ( (Feature_4 <= 0.8859347701072693) ? ( 40 ) : ( 41 ) ) : ( (Feature_9 <= 0.54722560942173) ? ( 43 ) : ( 44 ) ) ) : ( (Feature_8 <= 0.3969272426329553) ? ( 46 ) : ( 47 ) ) ) ) ) : ( (Feature_0 <= 0.3040916919708252) ? ( (Feature_3 <= 0.32368186628445983) ? ( 50 ) : ( (Feature_7 <= 0.6624164432287216) ? ( (Feature_2 <= 0.7132508605718613) ? ( (Feature_2 <= 0.3459535241127014) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) ) : ( (Feature_3 <= 0.7423960864543915) ? ( (Feature_3 <= 0.27084650099277496) ? ( (Feature_0 <= 0.8121815919876099) ? ( (Feature_6 <= 0.18374911323189735) ? ( (Feature_6 <= 0.07515738718211651) ? ( 63 ) : ( 64 ) ) : ( (Feature_0 <= 0.5649141669273376) ? ( 66 ) : ( 67 ) ) ) : ( (Feature_4 <= 0.5519881546497345) ? ( 69 ) : ( 70 ) ) ) : ( (Feature_8 <= 0.4650832414627075) ? ( (Feature_1 <= 0.6775058507919312) ? ( (Feature_9 <= 0.499443382024765) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) : ( (Feature_1 <= 0.6925259530544281) ? ( (Feature_8 <= 0.8900166451931) ? ( 79 ) : ( 80 ) ) : ( (Feature_3 <= 0.5362512171268463) ? ( (Feature_3 <= 0.3946292996406555) ? ( 83 ) : ( 84 ) ) : ( (Feature_4 <= 0.5419683158397675) ? ( 86 ) : ( 87 ) ) ) ) ) ) : ( (Feature_9 <= 0.026602321420796216) ? ( 89 ) : ( (Feature_1 <= 0.5314056873321533) ? ( (Feature_0 <= 0.7499225735664368) ? ( 92 ) : ( 93 ) ) : ( (Feature_8 <= 0.33143275044858456) ? ( 95 ) : ( (Feature_1 <= 0.7527655065059662) ? ( 97 ) : ( 98 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_10
	

	namespace EXT_SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {5.293284 }} ,
				{ 7 ,  {5.79437904 }} ,
				{ 9 ,  {6.98004624 }} ,
				{ 10 ,  {6.86145372 }} ,
				{ 11 ,  {8.24017885 }} ,
				{ 16 ,  {12.10988659 }} ,
				{ 17 ,  {12.123142 }} ,
				{ 18 ,  {11.78982164 }} ,
				{ 21 ,  {10.48306677 }} ,
				{ 22 ,  {10.2020931 }} ,
				{ 24 ,  {11.77602305 }} ,
				{ 25 ,  {11.31351814 }} ,
				{ 27 ,  {15.92255811 }} ,
				{ 29 ,  {14.0511849 }} ,
				{ 30 ,  {14.77256375 }} ,
				{ 34 ,  {18.00761757 }} ,
				{ 36 ,  {18.4937214 }} ,
				{ 37 ,  {18.33205802 }} ,
				{ 39 ,  {16.08254262 }} ,
				{ 40 ,  {14.46699637 }} ,
				{ 41 ,  {23.6939704 }} ,
				{ 44 ,  {7.21944335 }} ,
				{ 46 ,  {10.18163117 }} ,
				{ 48 ,  {22.76939497 }} ,
				{ 51 ,  {22.30975449 }} ,
				{ 53 ,  {19.30378831 }} ,
				{ 55 ,  {20.06970209 }} ,
				{ 56 ,  {19.95894273 }} ,
				{ 58 ,  {21.77400035 }} ,
				{ 63 ,  {17.80609749 }} ,
				{ 66 ,  {17.41761148 }} ,
				{ 67 ,  {17.4514578 }} ,
				{ 68 ,  {17.51855413 }} ,
				{ 72 ,  {18.23761382 }} ,
				{ 74 ,  {18.25024804 }} ,
				{ 75 ,  {18.25069552 }} ,
				{ 76 ,  {18.28251507 }} ,
				{ 78 ,  {17.89244708 }} ,
				{ 79 ,  {17.954677 }} ,
				{ 81 ,  {16.30127921 }} ,
				{ 82 ,  {15.70100345 }} ,
				{ 84 ,  {17.36059041 }} ,
				{ 86 ,  {18.9003877 }} ,
				{ 88 ,  {19.59215343 }} ,
				{ 89 ,  {20.19903361 }} ,
				{ 93 ,  {23.18131441 }} ,
				{ 95 ,  {25.24805848 }} ,
				{ 96 ,  {24.71333827 }} ,
				{ 98 ,  {20.62985591 }} ,
				{ 99 ,  {20.70189537 }} ,
				{ 100 ,  {14.53624519 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.37473800778388977) ? ( (Feature_4 <= 0.7348846197128296) ? ( (Feature_3 <= 0.44442465901374817) ? ( (Feature_5 <= 0.6174597442150116) ? ( (Feature_3 <= 0.13466930761933327) ? ( (Feature_8 <= 0.4591868817806244) ? ( 6 ) : ( 7 ) ) : ( (Feature_4 <= 0.29158127307891846) ? ( 9 ) : ( 10 ) ) ) : ( 11 ) ) : ( (Feature_1 <= 0.23719792813062668) ? ( (Feature_6 <= 0.3166561722755432) ? ( (Feature_0 <= 0.7291085422039032) ? ( (Feature_6 <= 0.09919797629117966) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) : ( (Feature_5 <= 0.5264680832624435) ? ( (Feature_6 <= 0.4382464736700058) ? ( 21 ) : ( 22 ) ) : ( (Feature_1 <= 0.016631812730338424) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_4 <= 0.3366689831018448) ? ( 27 ) : ( (Feature_1 <= 0.2730926275253296) ? ( 29 ) : ( 30 ) ) ) ) ) : ( (Feature_7 <= 0.7185869812965393) ? ( (Feature_4 <= 0.9239408671855927) ? ( (Feature_0 <= 0.647706001996994) ? ( 34 ) : ( (Feature_1 <= 0.1519826604053378) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_6 <= 0.6539583206176758) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) ) : ( (Feature_5 <= 0.9278656244277954) ? ( (Feature_3 <= 0.031439348589628935) ? ( 44 ) : ( (Feature_5 <= 0.02199404314160347) ? ( 46 ) : ( (Feature_2 <= 0.014435429126024246) ? ( 48 ) : ( (Feature_5 <= 0.3013715445995331) ? ( (Feature_6 <= 0.6800445914268494) ? ( 51 ) : ( (Feature_4 <= 0.5163237378001213) ? ( 53 ) : ( (Feature_4 <= 0.8481346964836121) ? ( 55 ) : ( 56 ) ) ) ) : ( (Feature_6 <= 0.02979929419234395) ? ( 58 ) : ( (Feature_1 <= 0.8873540163040161) ? ( (Feature_7 <= 0.6114746928215027) ? ( (Feature_8 <= 0.3560859113931656) ? ( (Feature_1 <= 0.6457764506340027) ? ( 63 ) : ( (Feature_2 <= 0.7164072692394257) ? ( (Feature_9 <= 0.06341572396922857) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (Feature_0 <= 0.8277775049209595) ? ( (Feature_3 <= 0.724564403295517) ? ( (Feature_0 <= 0.7352063953876495) ? ( 72 ) : ( (Feature_9 <= 0.4922199584543705) ? ( 74 ) : ( 75 ) ) ) : ( 76 ) ) : ( (Feature_9 <= 0.041677151806652546) ? ( 78 ) : ( 79 ) ) ) ) : ( (Feature_8 <= 0.4440323058515787) ? ( 81 ) : ( 82 ) ) ) : ( (Feature_3 <= 0.5767584145069122) ? ( 84 ) : ( (Feature_8 <= 0.37627878226339817) ? ( 86 ) : ( (Feature_1 <= 0.9085381627082825) ? ( 88 ) : ( 89 ) ) ) ) ) ) ) ) ) ) : ( (Feature_1 <= 0.8865648210048676) ? ( (Feature_0 <= 0.6278819143772125) ? ( (Feature_3 <= 0.6668055653572083) ? ( 93 ) : ( (Feature_8 <= 0.4892832487821579) ? ( 95 ) : ( 96 ) ) ) : ( (Feature_2 <= 0.5119418650865555) ? ( 98 ) : ( 99 ) ) ) : ( 100 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_11
	

	namespace EXT_SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {5.79437904 }} ,
				{ 7 ,  {6.24571025 }} ,
				{ 8 ,  {5.293284 }} ,
				{ 10 ,  {6.86145372 }} ,
				{ 11 ,  {7.55699808 }} ,
				{ 13 ,  {17.31914707 }} ,
				{ 16 ,  {8.89707415 }} ,
				{ 21 ,  {11.31351814 }} ,
				{ 22 ,  {10.48306677 }} ,
				{ 24 ,  {11.77602305 }} ,
				{ 26 ,  {12.123142 }} ,
				{ 27 ,  {12.10988659 }} ,
				{ 30 ,  {10.2020931 }} ,
				{ 31 ,  {10.04520361 }} ,
				{ 32 ,  {10.59689049 }} ,
				{ 35 ,  {11.78982164 }} ,
				{ 36 ,  {12.0711718 }} ,
				{ 38 ,  {12.76012926 }} ,
				{ 39 ,  {13.17420206 }} ,
				{ 40 ,  {6.98004624 }} ,
				{ 44 ,  {16.30255672 }} ,
				{ 47 ,  {18.33205802 }} ,
				{ 48 ,  {18.4937214 }} ,
				{ 49 ,  {18.00761757 }} ,
				{ 50 ,  {23.6939704 }} ,
				{ 52 ,  {11.38099315 }} ,
				{ 53 ,  {14.46699637 }} ,
				{ 58 ,  {10.18163117 }} ,
				{ 59 ,  {12.42341176 }} ,
				{ 62 ,  {15.30848399 }} ,
				{ 63 ,  {14.53624519 }} ,
				{ 64 ,  {13.11975672 }} ,
				{ 66 ,  {19.30378831 }} ,
				{ 67 ,  {20.19903361 }} ,
				{ 72 ,  {17.89244708 }} ,
				{ 73 ,  {17.51855413 }} ,
				{ 76 ,  {18.25069552 }} ,
				{ 77 ,  {18.25024804 }} ,
				{ 78 ,  {18.23761382 }} ,
				{ 80 ,  {15.70652198 }} ,
				{ 81 ,  {15.70100345 }} ,
				{ 85 ,  {21.77400035 }} ,
				{ 86 ,  {22.76939497 }} ,
				{ 89 ,  {17.36059041 }} ,
				{ 90 ,  {17.41761148 }} ,
				{ 92 ,  {18.28251507 }} ,
				{ 93 ,  {18.9003877 }} ,
				{ 97 ,  {23.76092016 }} ,
				{ 99 ,  {23.03027937 }} ,
				{ 100 ,  {23.18131441 }} ,
				{ 102 ,  {25.24805848 }} ,
				{ 103 ,  {24.71333827 }} ,
				{ 105 ,  {21.34099337 }} ,
				{ 106 ,  {19.36426348 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.37473800778388977) ? ( (Feature_4 <= 0.6635735034942627) ? ( (Feature_3 <= 0.2420954331755638) ? ( (Feature_4 <= 0.4763462692499161) ? ( (Feature_9 <= 0.8277065455913544) ? ( (Feature_3 <= 0.07915603369474411) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_5 <= 0.6435724496841431) ? ( 10 ) : ( 11 ) ) ) : ( (Feature_7 <= 0.041853321716189384) ? ( 13 ) : ( (Feature_8 <= 0.8485792875289917) ? ( (Feature_6 <= 0.07147390395402908) ? ( 16 ) : ( (Feature_1 <= 0.17950336635112762) ? ( (Feature_9 <= 0.6046070009469986) ? ( (Feature_4 <= 0.40631823241710663) ? ( (Feature_7 <= 0.5381320118904114) ? ( 21 ) : ( 22 ) ) : ( (Feature_8 <= 0.35450330475578085) ? ( 24 ) : ( (Feature_4 <= 0.5177695453166962) ? ( 26 ) : ( 27 ) ) ) ) : ( (Feature_5 <= 0.6193413883447647) ? ( (Feature_7 <= 0.6776195466518402) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) ) : ( (Feature_9 <= 0.6568720936775208) ? ( (Feature_1 <= 0.2344973310828209) ? ( 35 ) : ( 36 ) ) : ( (Feature_1 <= 0.2674734890460968) ? ( 38 ) : ( 39 ) ) ) ) ) : ( 40 ) ) ) ) : ( (Feature_4 <= 0.9550746381282806) ? ( (Feature_4 <= 0.9337291419506073) ? ( (Feature_3 <= 0.6619341671466827) ? ( 44 ) : ( (Feature_7 <= 0.32392852008342743) ? ( (Feature_2 <= 0.5794990807771683) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( 50 ) ) : ( (Feature_5 <= 0.4696953147649765) ? ( 52 ) : ( 53 ) ) ) ) : ( (Feature_0 <= 0.3769059479236603) ? ( (Feature_6 <= 0.5948449373245239) ? ( (Feature_7 <= 0.23824114352464676) ? ( (Feature_3 <= 0.5106536746025085) ? ( 58 ) : ( 59 ) ) : ( (Feature_0 <= 0.25448815524578094) ? ( (Feature_0 <= 0.17730829864740372) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) ) : ( (Feature_1 <= 0.8131446242332458) ? ( 66 ) : ( 67 ) ) ) : ( (Feature_3 <= 0.5399050712585449) ? ( (Feature_7 <= 0.6114746928215027) ? ( (Feature_8 <= 0.42554977536201477) ? ( (Feature_9 <= 0.44009042251855135) ? ( 72 ) : ( 73 ) ) : ( (Feature_6 <= 0.6846703886985779) ? ( (Feature_2 <= 0.38978246692568064) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) ) : ( (Feature_8 <= 0.7943890988826752) ? ( 80 ) : ( 81 ) ) ) : ( (Feature_6 <= 0.3831917643547058) ? ( (Feature_2 <= 0.19499831646680832) ? ( (Feature_5 <= 0.7906046211719513) ? ( 85 ) : ( 86 ) ) : ( (Feature_4 <= 0.3150104731321335) ? ( (Feature_6 <= 0.3593218922615051) ? ( 89 ) : ( 90 ) ) : ( (Feature_2 <= 0.7814017236232758) ? ( 92 ) : ( 93 ) ) ) ) : ( (Feature_9 <= 0.6470779180526733) ? ( (Feature_5 <= 0.9379513561725616) ? ( (Feature_8 <= 0.33143275044858456) ? ( 97 ) : ( (Feature_5 <= 0.7512187063694) ? ( 99 ) : ( 100 ) ) ) : ( (Feature_0 <= 0.49181582033634186) ? ( 102 ) : ( 103 ) ) ) : ( (Feature_9 <= 0.7611001133918762) ? ( 105 ) : ( 106 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_12
	

	namespace EXT_SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {10.18163117 }} ,
				{ 7 ,  {10.04520361 }} ,
				{ 9 ,  {12.0711718 }} ,
				{ 10 ,  {12.123142 }} ,
				{ 14 ,  {6.98004624 }} ,
				{ 15 ,  {6.86145372 }} ,
				{ 17 ,  {6.24571025 }} ,
				{ 18 ,  {5.79437904 }} ,
				{ 22 ,  {7.55699808 }} ,
				{ 23 ,  {7.73242981 }} ,
				{ 24 ,  {7.21944335 }} ,
				{ 26 ,  {8.0628501 }} ,
				{ 27 ,  {8.24017885 }} ,
				{ 29 ,  {16.91440831 }} ,
				{ 30 ,  {15.70100345 }} ,
				{ 33 ,  {17.89244708 }} ,
				{ 34 ,  {18.23761382 }} ,
				{ 37 ,  {12.76012926 }} ,
				{ 38 ,  {13.11975672 }} ,
				{ 40 ,  {15.54179787 }} ,
				{ 41 ,  {14.46699637 }} ,
				{ 46 ,  {10.2020931 }} ,
				{ 47 ,  {10.59689049 }} ,
				{ 49 ,  {12.10988659 }} ,
				{ 50 ,  {12.83034463 }} ,
				{ 51 ,  {18.4937214 }} ,
				{ 58 ,  {18.00761757 }} ,
				{ 60 ,  {18.33205802 }} ,
				{ 61 ,  {18.25024804 }} ,
				{ 64 ,  {17.4514578 }} ,
				{ 65 ,  {17.51855413 }} ,
				{ 66 ,  {17.36059041 }} ,
				{ 68 ,  {16.3247696 }} ,
				{ 69 ,  {15.92255811 }} ,
				{ 71 ,  {17.31914707 }} ,
				{ 75 ,  {19.95894273 }} ,
				{ 76 ,  {20.19903361 }} ,
				{ 77 ,  {20.62985591 }} ,
				{ 78 ,  {19.36426348 }} ,
				{ 79 ,  {12.42341176 }} ,
				{ 81 ,  {15.30848399 }} ,
				{ 85 ,  {21.77400035 }} ,
				{ 87 ,  {23.03027937 }} ,
				{ 88 ,  {22.76939497 }} ,
				{ 91 ,  {23.76092016 }} ,
				{ 92 ,  {23.6939704 }} ,
				{ 93 ,  {24.71333827 }} ,
				{ 96 ,  {22.30975449 }} ,
				{ 98 ,  {21.34099337 }} ,
				{ 99 ,  {20.70189537 }} ,
				{ 100 ,  {18.9003877 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.4696362465620041) ? ( (Feature_4 <= 0.5903706550598145) ? ( (Feature_1 <= 0.6534442901611328) ? ( (Feature_5 <= 0.22620628774166107) ? ( (Feature_3 <= 0.33722974359989166) ? ( (Feature_5 <= 0.06727720983326435) ? ( 6 ) : ( 7 ) ) : ( (Feature_2 <= 0.48707992769777775) ? ( 9 ) : ( 10 ) ) ) : ( (Feature_5 <= 0.6208158731460571) ? ( (Feature_2 <= 0.5849853157997131) ? ( (Feature_9 <= 0.5779223442077637) ? ( 14 ) : ( 15 ) ) : ( (Feature_6 <= 0.6160783916711807) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_2 <= 0.5100668370723724) ? ( (Feature_5 <= 0.8486587107181549) ? ( (Feature_3 <= 0.2806398458778858) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) : ( (Feature_3 <= 0.3135622814297676) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_1 <= 0.7692824006080627) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_7 <= 0.3534885048866272) ? ( (Feature_8 <= 0.6025375127792358) ? ( 33 ) : ( 34 ) ) : ( (Feature_8 <= 0.33034031465649605) ? ( (Feature_6 <= 0.12376299500465393) ? ( 37 ) : ( 38 ) ) : ( (Feature_4 <= 0.8891201615333557) ? ( 40 ) : ( 41 ) ) ) ) ) : ( (Feature_1 <= 0.1546475514769554) ? ( (Feature_2 <= 0.8029389977455139) ? ( (Feature_7 <= 0.758442610502243) ? ( (Feature_5 <= 0.6193413883447647) ? ( 46 ) : ( 47 ) ) : ( (Feature_2 <= 0.3912815861403942) ? ( 49 ) : ( 50 ) ) ) : ( 51 ) ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_5 <= 0.9622814059257507) ? ( (Feature_9 <= 0.8632417619228363) ? ( (Feature_7 <= 0.6500675678253174) ? ( (Feature_7 <= 0.38258400559425354) ? ( (Feature_6 <= 0.26257702335715294) ? ( 58 ) : ( (Feature_0 <= 0.739888072013855) ? ( 60 ) : ( 61 ) ) ) : ( (Feature_7 <= 0.5738405287265778) ? ( (Feature_8 <= 0.1718699960038066) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) : ( (Feature_1 <= 0.25767554342746735) ? ( 68 ) : ( 69 ) ) ) : ( (Feature_7 <= 0.0548518430441618) ? ( 71 ) : ( (Feature_0 <= 0.6878570914268494) ? ( (Feature_7 <= 0.5201859325170517) ? ( (Feature_1 <= 0.8669473528862) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( 78 ) ) ) ) : ( 79 ) ) : ( (Feature_0 <= 0.3701889142394066) ? ( 81 ) : ( (Feature_9 <= 0.5368971526622772) ? ( (Feature_7 <= 0.7887059152126312) ? ( (Feature_1 <= 0.5050492137670517) ? ( 85 ) : ( (Feature_8 <= 0.7962219715118408) ? ( 87 ) : ( 88 ) ) ) : ( (Feature_8 <= 0.5535003840923309) ? ( (Feature_9 <= 0.46082501113414764) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) : ( (Feature_2 <= 0.8290003836154938) ? ( (Feature_2 <= 0.4116891250014305) ? ( 96 ) : ( (Feature_0 <= 0.723768562078476) ? ( 98 ) : ( 99 ) ) ) : ( 100 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_13
	

	namespace EXT_SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {12.0711718 }} ,
				{ 5 ,  {13.11975672 }} ,
				{ 8 ,  {9.73504122 }} ,
				{ 9 ,  {10.04520361 }} ,
				{ 13 ,  {6.24571025 }} ,
				{ 15 ,  {5.79437904 }} ,
				{ 16 ,  {5.293284 }} ,
				{ 18 ,  {6.86145372 }} ,
				{ 19 ,  {6.98004624 }} ,
				{ 22 ,  {8.24017885 }} ,
				{ 23 ,  {8.0628501 }} ,
				{ 24 ,  {7.73242981 }} ,
				{ 28 ,  {14.77256375 }} ,
				{ 29 ,  {17.31914707 }} ,
				{ 31 ,  {10.59689049 }} ,
				{ 34 ,  {13.17420206 }} ,
				{ 35 ,  {12.83034463 }} ,
				{ 37 ,  {12.123142 }} ,
				{ 38 ,  {12.10988659 }} ,
				{ 42 ,  {18.00761757 }} ,
				{ 43 ,  {18.4937214 }} ,
				{ 44 ,  {16.30255672 }} ,
				{ 45 ,  {11.38099315 }} ,
				{ 50 ,  {10.18163117 }} ,
				{ 51 ,  {10.13178962 }} ,
				{ 54 ,  {15.30848399 }} ,
				{ 55 ,  {14.53624519 }} ,
				{ 56 ,  {12.42341176 }} ,
				{ 60 ,  {15.54179787 }} ,
				{ 61 ,  {16.30127921 }} ,
				{ 62 ,  {17.4514578 }} ,
				{ 64 ,  {20.19903361 }} ,
				{ 65 ,  {19.95894273 }} ,
				{ 69 ,  {22.76939497 }} ,
				{ 75 ,  {17.41761148 }} ,
				{ 76 ,  {17.36059041 }} ,
				{ 78 ,  {18.25024804 }} ,
				{ 80 ,  {17.954677 }} ,
				{ 81 ,  {17.80609749 }} ,
				{ 82 ,  {16.0096116 }} ,
				{ 84 ,  {18.9003877 }} ,
				{ 86 ,  {18.25069552 }} ,
				{ 87 ,  {18.10948375 }} ,
				{ 90 ,  {20.06970209 }} ,
				{ 91 ,  {19.36426348 }} ,
				{ 92 ,  {18.23761382 }} ,
				{ 95 ,  {23.03027937 }} ,
				{ 96 ,  {22.30975449 }} ,
				{ 97 ,  {21.34099337 }} ,
				{ 100 ,  {25.24805848 }} ,
				{ 101 ,  {24.71333827 }} ,
				{ 102 ,  {23.18131441 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.4512072205543518) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_2 <= 0.2803546190261841) ? ( (Feature_5 <= 0.395497415214777) ? ( 4 ) : ( 5 ) ) : ( (Feature_5 <= 0.1925923340022564) ? ( (Feature_3 <= 0.1894641350954771) ? ( 8 ) : ( 9 ) ) : ( (Feature_5 <= 0.6208158731460571) ? ( (Feature_3 <= 0.13574287667870522) ? ( (Feature_6 <= 0.3540302813053131) ? ( 13 ) : ( (Feature_7 <= 0.38509930670261383) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_2 <= 0.3881607800722122) ? ( 18 ) : ( 19 ) ) ) : ( (Feature_9 <= 0.6756850481033325) ? ( (Feature_5 <= 0.8280431032180786) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) ) : ( (Feature_4 <= 0.6678532958030701) ? ( (Feature_7 <= 0.041853321716189384) ? ( (Feature_3 <= 0.5944792777299881) ? ( 28 ) : ( 29 ) ) : ( (Feature_1 <= 0.008846430573612452) ? ( 31 ) : ( (Feature_8 <= 0.6169376373291016) ? ( (Feature_9 <= 0.7538215816020966) ? ( 34 ) : ( 35 ) ) : ( (Feature_7 <= 0.53818129748106) ? ( 37 ) : ( 38 ) ) ) ) ) : ( (Feature_9 <= 0.57488813996315) ? ( (Feature_0 <= 0.7187510430812836) ? ( (Feature_9 <= 0.3571740537881851) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) : ( 45 ) ) ) ) : ( (Feature_0 <= 0.38620519638061523) ? ( (Feature_4 <= 0.7087181210517883) ? ( (Feature_3 <= 0.45247673988342285) ? ( (Feature_2 <= 0.5706513673067093) ? ( 50 ) : ( 51 ) ) : ( (Feature_6 <= 0.4435751885175705) ? ( (Feature_2 <= 0.3459535241127014) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (Feature_1 <= 0.8203642666339874) ? ( (Feature_4 <= 0.8626847267150879) ? ( (Feature_2 <= 0.08589717373251915) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) : ( (Feature_6 <= 0.7730399668216705) ? ( 64 ) : ( 65 ) ) ) ) : ( (Feature_5 <= 0.9278656244277954) ? ( (Feature_3 <= 0.944815069437027) ? ( (Feature_2 <= 0.014435429126024246) ? ( 69 ) : ( (Feature_4 <= 0.579453855752945) ? ( (Feature_9 <= 0.8663425147533417) ? ( (Feature_4 <= 0.4735608994960785) ? ( (Feature_6 <= 0.39176203310489655) ? ( (Feature_8 <= 0.18504073470830917) ? ( 75 ) : ( 76 ) ) : ( (Feature_5 <= 0.6036730408668518) ? ( 78 ) : ( (Feature_7 <= 0.18400276452302933) ? ( 80 ) : ( 81 ) ) ) ) : ( 82 ) ) : ( (Feature_8 <= 0.22120674885809422) ? ( 84 ) : ( (Feature_0 <= 0.8810286819934845) ? ( 86 ) : ( 87 ) ) ) ) : ( (Feature_6 <= 0.9181242287158966) ? ( (Feature_3 <= 0.4296831786632538) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) ) ) : ( (Feature_2 <= 0.48683134466409683) ? ( (Feature_0 <= 0.6454774439334869) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) ) : ( (Feature_8 <= 0.8101703524589539) ? ( (Feature_4 <= 0.6881959289312363) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_14
	

	namespace EXT_SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.293284 }} ,
				{ 6 ,  {6.24571025 }} ,
				{ 8 ,  {7.55699808 }} ,
				{ 9 ,  {6.98004624 }} ,
				{ 13 ,  {10.48306677 }} ,
				{ 15 ,  {10.04520361 }} ,
				{ 16 ,  {10.2020931 }} ,
				{ 17 ,  {11.78982164 }} ,
				{ 19 ,  {11.31351814 }} ,
				{ 21 ,  {8.89707415 }} ,
				{ 23 ,  {8.24017885 }} ,
				{ 24 ,  {7.73242981 }} ,
				{ 27 ,  {12.10988659 }} ,
				{ 29 ,  {12.76012926 }} ,
				{ 30 ,  {12.83034463 }} ,
				{ 32 ,  {18.4937214 }} ,
				{ 33 ,  {16.08254262 }} ,
				{ 40 ,  {15.30848399 }} ,
				{ 41 ,  {15.54179787 }} ,
				{ 42 ,  {14.77256375 }} ,
				{ 43 ,  {13.17420206 }} ,
				{ 45 ,  {10.18163117 }} ,
				{ 46 ,  {6.86145372 }} ,
				{ 49 ,  {14.53624519 }} ,
				{ 52 ,  {16.30127921 }} ,
				{ 53 ,  {16.0096116 }} ,
				{ 54 ,  {17.36059041 }} ,
				{ 56 ,  {17.51855413 }} ,
				{ 59 ,  {19.95894273 }} ,
				{ 60 ,  {20.19903361 }} ,
				{ 61 ,  {19.30378831 }} ,
				{ 67 ,  {17.31914707 }} ,
				{ 71 ,  {18.00761757 }} ,
				{ 72 ,  {17.954677 }} ,
				{ 73 ,  {17.80609749 }} ,
				{ 77 ,  {18.25024804 }} ,
				{ 78 ,  {18.25069552 }} ,
				{ 79 ,  {18.23761382 }} ,
				{ 80 ,  {18.10948375 }} ,
				{ 82 ,  {15.70652198 }} ,
				{ 83 ,  {16.91440831 }} ,
				{ 84 ,  {14.46699637 }} ,
				{ 86 ,  {20.62985591 }} ,
				{ 87 ,  {19.36426348 }} ,
				{ 91 ,  {24.71333827 }} ,
				{ 93 ,  {23.76092016 }} ,
				{ 94 ,  {23.6939704 }} ,
				{ 96 ,  {21.77400035 }} ,
				{ 97 ,  {23.03027937 }} ,
				{ 99 ,  {17.41761148 }} ,
				{ 100 ,  {18.9003877 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.23276454955339432) ? ( (Feature_4 <= 0.5902727842330933) ? ( (Feature_3 <= 0.3159424811601639) ? ( (Feature_8 <= 0.69943967461586) ? ( (Feature_2 <= 0.5542399883270264) ? ( 5 ) : ( 6 ) ) : ( (Feature_8 <= 0.851557046175003) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_5 <= 0.7245974540710449) ? ( (Feature_1 <= 0.180767722427845) ? ( (Feature_6 <= 0.4382464736700058) ? ( 13 ) : ( (Feature_8 <= 0.39315345883369446) ? ( 15 ) : ( 16 ) ) ) : ( 17 ) ) : ( (Feature_8 <= 0.20655471086502075) ? ( 19 ) : ( (Feature_4 <= 0.15548334270715714) ? ( 21 ) : ( (Feature_9 <= 0.6756850481033325) ? ( 23 ) : ( 24 ) ) ) ) ) ) : ( (Feature_4 <= 0.780214250087738) ? ( (Feature_6 <= 0.10499893128871918) ? ( 27 ) : ( (Feature_7 <= 0.6884144842624664) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_9 <= 0.7113494873046875) ? ( 32 ) : ( 33 ) ) ) ) : ( (Feature_0 <= 0.5648999214172363) ? ( (Feature_1 <= 0.594910204410553) ? ( (Feature_2 <= 0.30169156193733215) ? ( (Feature_6 <= 0.4898923635482788) ? ( (Feature_0 <= 0.431796133518219) ? ( (Feature_0 <= 0.23708512634038925) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) : ( 43 ) ) : ( (Feature_9 <= 0.5511687397956848) ? ( 45 ) : ( 46 ) ) ) : ( (Feature_6 <= 0.4759466201066971) ? ( (Feature_0 <= 0.29289835691452026) ? ( 49 ) : ( (Feature_0 <= 0.4310823231935501) ? ( (Feature_2 <= 0.5344284698367119) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) : ( (Feature_8 <= 0.40586425364017487) ? ( 56 ) : ( (Feature_7 <= 0.6898138374090195) ? ( (Feature_7 <= 0.2464556284248829) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) ) ) ) : ( (Feature_3 <= 0.7514037787914276) ? ( (Feature_1 <= 0.7585236728191376) ? ( (Feature_4 <= 0.9505248963832855) ? ( (Feature_1 <= 0.6751870512962341) ? ( (Feature_8 <= 0.23180031776428223) ? ( 67 ) : ( (Feature_8 <= 0.3941112756729126) ? ( (Feature_2 <= 0.5177716612815857) ? ( (Feature_0 <= 0.7990538775920868) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) : ( (Feature_3 <= 0.6266065537929535) ? ( (Feature_4 <= 0.7065986692905426) ? ( (Feature_4 <= 0.4141145348548889) ? ( 77 ) : ( 78 ) ) : ( 79 ) ) : ( 80 ) ) ) ) : ( (Feature_3 <= 0.21072755753993988) ? ( 82 ) : ( 83 ) ) ) : ( 84 ) ) : ( (Feature_7 <= 0.7630450129508972) ? ( 86 ) : ( 87 ) ) ) : ( (Feature_1 <= 0.7791935205459595) ? ( (Feature_3 <= 0.8084623515605927) ? ( (Feature_0 <= 0.6933923661708832) ? ( 91 ) : ( (Feature_9 <= 0.46082501113414764) ? ( 93 ) : ( 94 ) ) ) : ( (Feature_4 <= 0.32056426256895065) ? ( 96 ) : ( 97 ) ) ) : ( (Feature_2 <= 0.5939836800098419) ? ( 99 ) : ( 100 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			EXT_SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
