// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_RandomReg_10.exe ml2cpp-demo_RandomForestRegressor_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace EXT_SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-351.38429309 }} ,
				{ 7 ,  {-459.03067075 }} ,
				{ 10 ,  {-223.26828856 }} ,
				{ 12 ,  {-251.2683419 }} ,
				{ 13 ,  {-237.150375 }} ,
				{ 14 ,  {-298.79907559 }} ,
				{ 16 ,  {-268.19043239 }} ,
				{ 19 ,  {-130.20856672 }} ,
				{ 21 ,  {-182.68535868 }} ,
				{ 22 ,  {-165.64587305 }} ,
				{ 26 ,  {-67.71218597 }} ,
				{ 27 ,  {-80.36713173 }} ,
				{ 28 ,  {-97.81389434 }} ,
				{ 31 ,  {-6.19072274 }} ,
				{ 32 ,  {-9.61795807 }} ,
				{ 33 ,  {3.07608881 }} ,
				{ 35 ,  {133.87071389 }} ,
				{ 36 ,  {-1.77890863 }} ,
				{ 40 ,  {-154.40083699 }} ,
				{ 42 ,  {-284.89041043 }} ,
				{ 43 ,  {-230.73613628 }} ,
				{ 44 ,  {-9.18516091 }} ,
				{ 50 ,  {-27.42654029 }} ,
				{ 51 ,  {-32.37006064 }} ,
				{ 54 ,  {38.71263785 }} ,
				{ 55 ,  {26.98702516 }} ,
				{ 56 ,  {62.64480581 }} ,
				{ 58 ,  {131.03680508 }} ,
				{ 59 ,  {113.44087953 }} ,
				{ 62 ,  {239.63425512 }} ,
				{ 63 ,  {248.55956548 }} ,
				{ 65 ,  {58.89206445 }} ,
				{ 66 ,  {156.7480822 }} ,
				{ 69 ,  {250.1827601 }} ,
				{ 71 ,  {191.55215494 }} ,
				{ 72 ,  {156.85798347 }} ,
				{ 74 ,  {310.60889078 }} ,
				{ 75 ,  {349.42168234 }} ,
				{ 80 ,  {60.83005802 }} ,
				{ 81 ,  {58.56592202 }} ,
				{ 82 ,  {23.51174878 }} ,
				{ 83 ,  {116.88919618 }} ,
				{ 87 ,  {259.87552026 }} ,
				{ 88 ,  {325.07388162 }} ,
				{ 90 ,  {228.58868552 }} ,
				{ 91 ,  {194.40871671 }} ,
				{ 93 ,  {447.69098355 }} ,
				{ 95 ,  {393.26109279 }} ,
				{ 97 ,  {351.37130796 }} ,
				{ 98 ,  {360.61572443 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_4 <= -0.5074360221624374) ? ( (Feature_6 <= 1.7663677334785461) ? ( (Feature_7 <= -0.41412051022052765) ? ( (Feature_5 <= -0.738006979227066) ? ( (Feature_0 <= -0.3561193495988846) ? ( 6 ) : ( 7 ) ) : ( (Feature_7 <= -1.009423553943634) ? ( (Feature_2 <= 0.07083742320537567) ? ( 10 ) : ( (Feature_5 <= 1.6140184998512268) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) ) : ( (Feature_1 <= -1.9103639721870422) ? ( 16 ) : ( (Feature_2 <= -0.29648859053850174) ? ( (Feature_6 <= -0.4178031384944916) ? ( 19 ) : ( (Feature_7 <= -0.06085054203867912) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_9 <= 0.46189141273498535) ? ( (Feature_5 <= 0.46681278944015503) ? ( (Feature_1 <= -0.1785457283258438) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) : ( (Feature_3 <= 0.1836501657962799) ? ( (Feature_2 <= 0.3010168671607971) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) ) ) ) : ( (Feature_5 <= 0.6273390874266624) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_6 <= -0.4015085697174072) ? ( (Feature_5 <= 0.40831258893013) ? ( (Feature_0 <= -0.43616393953561783) ? ( 40 ) : ( (Feature_3 <= -0.4883671849966049) ? ( 42 ) : ( 43 ) ) ) : ( 44 ) ) : ( (Feature_2 <= 1.1654313206672668) ? ( (Feature_1 <= -0.04160385578870773) ? ( (Feature_8 <= -0.04430999793112278) ? ( (Feature_3 <= -0.9781206548213959) ? ( (Feature_5 <= 1.8199300169944763) ? ( 50 ) : ( 51 ) ) : ( (Feature_7 <= 0.9570457339286804) ? ( (Feature_7 <= 0.24763865023851395) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (Feature_3 <= 0.8962829113006592) ? ( 58 ) : ( 59 ) ) ) : ( (Feature_1 <= 0.267702154815197) ? ( (Feature_7 <= 0.9508931934833527) ? ( 62 ) : ( 63 ) ) : ( (Feature_5 <= 1.0755760818719864) ? ( 65 ) : ( 66 ) ) ) ) : ( (Feature_1 <= 0.6489299461245537) ? ( (Feature_2 <= 1.530801236629486) ? ( 69 ) : ( (Feature_9 <= 1.1047850847244263) ? ( 71 ) : ( 72 ) ) ) : ( (Feature_0 <= 0.13439324498176575) ? ( 74 ) : ( 75 ) ) ) ) ) ) : ( (Feature_0 <= -0.3150939345359802) ? ( (Feature_8 <= 1.53666090965271) ? ( (Feature_8 <= 1.2228209972381592) ? ( (Feature_3 <= -0.7057149261236191) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( 83 ) ) : ( (Feature_5 <= 0.7071312367916107) ? ( (Feature_5 <= -0.5688535571098328) ? ( (Feature_8 <= 1.3626121878623962) ? ( 87 ) : ( 88 ) ) : ( (Feature_5 <= -0.002426058053970337) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_6 <= -0.3840720886364579) ? ( 93 ) : ( (Feature_2 <= -0.03581484407186508) ? ( 95 ) : ( (Feature_1 <= -0.6106919459998608) ? ( 97 ) : ( 98 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_0
	

	namespace EXT_SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-210.3549175 }} ,
				{ 6 ,  {-165.64587305 }} ,
				{ 7 ,  {-284.89041043 }} ,
				{ 8 ,  {-53.5585581 }} ,
				{ 10 ,  {-351.38429309 }} ,
				{ 12 ,  {-459.03067075 }} ,
				{ 13 ,  {-422.390294 }} ,
				{ 17 ,  {-9.18516091 }} ,
				{ 20 ,  {-130.20856672 }} ,
				{ 23 ,  {-168.02760852 }} ,
				{ 24 ,  {-154.40083699 }} ,
				{ 25 ,  {-182.33200566 }} ,
				{ 26 ,  {-251.2683419 }} ,
				{ 31 ,  {-80.36713173 }} ,
				{ 32 ,  {-20.2700101 }} ,
				{ 36 ,  {-1.77890863 }} ,
				{ 37 ,  {3.07608881 }} ,
				{ 38 ,  {-6.19072274 }} ,
				{ 40 ,  {26.98702516 }} ,
				{ 42 ,  {37.34665341 }} ,
				{ 43 ,  {38.71263785 }} ,
				{ 44 ,  {-223.26828856 }} ,
				{ 46 ,  {156.85798347 }} ,
				{ 47 ,  {144.42445426 }} ,
				{ 51 ,  {11.97984848 }} ,
				{ 52 ,  {23.51174878 }} ,
				{ 54 ,  {-32.37006064 }} ,
				{ 55 ,  {-27.42654029 }} ,
				{ 59 ,  {-20.42352874 }} ,
				{ 60 ,  {-8.54151458 }} ,
				{ 61 ,  {-33.33701473 }} ,
				{ 65 ,  {62.64480581 }} ,
				{ 66 ,  {116.88919618 }} ,
				{ 69 ,  {133.87071389 }} ,
				{ 70 ,  {58.89206445 }} ,
				{ 76 ,  {259.87552026 }} ,
				{ 78 ,  {250.1827601 }} ,
				{ 79 ,  {248.55956548 }} ,
				{ 80 ,  {228.58868552 }} ,
				{ 82 ,  {277.98128451 }} ,
				{ 83 ,  {310.60889078 }} ,
				{ 85 ,  {320.68265233 }} ,
				{ 86 ,  {316.51213779 }} ,
				{ 87 ,  {191.55215494 }} ,
				{ 89 ,  {239.63425512 }} ,
				{ 92 ,  {393.26109279 }} ,
				{ 93 ,  {360.61572443 }} ,
				{ 94 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.6693825721740723) ? ( (Feature_5 <= -0.9736151099205017) ? ( (Feature_8 <= 0.3360840603709221) ? ( (Feature_2 <= -0.0012947320938110352) ? ( (Feature_0 <= 0.029017388820648193) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_5 <= -0.7803284227848053) ? ( 10 ) : ( (Feature_7 <= -0.28034423431381583) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_8 <= -0.3908981829881668) ? ( (Feature_6 <= -0.23099666088819504) ? ( (Feature_6 <= -1.2003390192985535) ? ( 17 ) : ( (Feature_6 <= -0.3692330867052078) ? ( (Feature_4 <= -0.2665720134973526) ? ( 20 ) : ( (Feature_8 <= -0.9740447103977203) ? ( (Feature_7 <= -0.6866006897762418) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) : ( 26 ) ) ) : ( (Feature_2 <= 1.0266037583351135) ? ( (Feature_8 <= -0.46755747497081757) ? ( (Feature_5 <= -0.017003923654556274) ? ( (Feature_1 <= 1.740418180823326) ? ( 31 ) : ( 32 ) ) : ( (Feature_2 <= 0.3109996020793915) ? ( (Feature_1 <= 0.3475537970662117) ? ( (Feature_2 <= -0.32301008701324463) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) : ( (Feature_2 <= 0.48073437809944153) ? ( 40 ) : ( (Feature_9 <= -0.21841594576835632) ? ( 42 ) : ( 43 ) ) ) ) ) : ( 44 ) ) : ( (Feature_8 <= -1.5018147230148315) ? ( 46 ) : ( 47 ) ) ) ) : ( (Feature_3 <= -0.7448139190673828) ? ( (Feature_5 <= 1.3483617305755615) ? ( (Feature_3 <= -0.9545608758926392) ? ( 51 ) : ( 52 ) ) : ( (Feature_9 <= 0.05058024823665619) ? ( 54 ) : ( 55 ) ) ) : ( (Feature_4 <= -0.9480748474597931) ? ( (Feature_3 <= 0.9519330561161041) ? ( (Feature_9 <= -0.193245530128479) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( (Feature_0 <= 0.8513177633285522) ? ( (Feature_3 <= -0.1852387711405754) ? ( (Feature_9 <= 1.095573398284614) ? ( 65 ) : ( 66 ) ) : ( (Feature_2 <= 0.33050215244293213) ? ( (Feature_4 <= 0.2751120626926422) ? ( 69 ) : ( 70 ) ) : ( (Feature_0 <= 0.5366122871637344) ? ( (Feature_3 <= 0.7217720150947571) ? ( (Feature_1 <= 0.8699882328510284) ? ( (Feature_3 <= 0.4889494478702545) ? ( (Feature_5 <= 0.05226007103919983) ? ( 76 ) : ( (Feature_4 <= 0.11693485453724861) ? ( 78 ) : ( 79 ) ) ) : ( 80 ) ) : ( (Feature_5 <= 0.5678927600383759) ? ( 82 ) : ( 83 ) ) ) : ( (Feature_0 <= -0.46126292645931244) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (Feature_6 <= 0.42382942512631416) ? ( 89 ) : ( (Feature_0 <= 1.9994580745697021) ? ( (Feature_3 <= 0.38477644324302673) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_1
	

	namespace EXT_SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-422.390294 }} ,
				{ 9 ,  {-298.79907559 }} ,
				{ 10 ,  {-305.67509721 }} ,
				{ 11 ,  {-223.26828856 }} ,
				{ 14 ,  {-181.51172981 }} ,
				{ 15 ,  {-182.33200566 }} ,
				{ 16 ,  {-165.64587305 }} ,
				{ 19 ,  {-268.19043239 }} ,
				{ 21 ,  {-101.20974879 }} ,
				{ 22 ,  {-130.20856672 }} ,
				{ 25 ,  {-20.2700101 }} ,
				{ 26 ,  {-33.10367735 }} ,
				{ 27 ,  {-53.5585581 }} ,
				{ 32 ,  {-97.81389434 }} ,
				{ 34 ,  {-182.68535868 }} ,
				{ 35 ,  {-154.40083699 }} ,
				{ 36 ,  {-9.18516091 }} ,
				{ 39 ,  {26.98702516 }} ,
				{ 43 ,  {-27.42654029 }} ,
				{ 45 ,  {-33.33701473 }} ,
				{ 46 ,  {-32.37006064 }} ,
				{ 47 ,  {-1.77890863 }} ,
				{ 48 ,  {23.51174878 }} ,
				{ 53 ,  {60.83005802 }} ,
				{ 54 ,  {58.89206445 }} ,
				{ 55 ,  {38.71263785 }} ,
				{ 56 ,  {-8.54151458 }} ,
				{ 57 ,  {156.7480822 }} ,
				{ 59 ,  {320.68265233 }} ,
				{ 60 ,  {290.7091541 }} ,
				{ 64 ,  {191.55215494 }} ,
				{ 66 ,  {156.85798347 }} ,
				{ 67 ,  {144.42445426 }} ,
				{ 68 ,  {259.87552026 }} ,
				{ 70 ,  {447.69098355 }} ,
				{ 71 ,  {316.51213779 }} ,
				{ 77 ,  {62.64480581 }} ,
				{ 78 ,  {58.56592202 }} ,
				{ 79 ,  {113.44087953 }} ,
				{ 80 ,  {198.97164294 }} ,
				{ 82 ,  {228.58868552 }} ,
				{ 83 ,  {325.07388162 }} ,
				{ 86 ,  {277.98128451 }} ,
				{ 87 ,  {243.63801062 }} ,
				{ 89 ,  {393.26109279 }} ,
				{ 90 ,  {360.61572443 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_7 <= 0.8381368219852448) ? ( (Feature_2 <= 1.10337233543396) ? ( (Feature_5 <= 0.2265688106417656) ? ( (Feature_7 <= 0.0946699888445437) ? ( (Feature_4 <= -0.5533334314823151) ? ( (Feature_8 <= -1.0876219123601913) ? ( 6 ) : ( (Feature_5 <= -0.3434761166572571) ? ( (Feature_9 <= -0.7527271211147308) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) : ( (Feature_0 <= 0.07983121275901794) ? ( (Feature_4 <= 0.2101905345916748) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) ) : ( (Feature_4 <= -0.5821902006864548) ? ( (Feature_3 <= 0.15098612010478973) ? ( 19 ) : ( (Feature_0 <= 0.2022545337677002) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_8 <= -0.32365715503692627) ? ( (Feature_7 <= 0.38246163725852966) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (Feature_8 <= 1.4059425592422485) ? ( (Feature_6 <= -0.2598869800567627) ? ( (Feature_2 <= 0.7391333878040314) ? ( (Feature_6 <= -1.5356188118457794) ? ( 32 ) : ( (Feature_7 <= -0.05310674477368593) ? ( 34 ) : ( 35 ) ) ) : ( 36 ) ) : ( (Feature_1 <= -0.5175755470991135) ? ( (Feature_8 <= -1.3300728797912598) ? ( 39 ) : ( (Feature_8 <= 1.0162057876586914) ? ( (Feature_1 <= -0.7004771828651428) ? ( (Feature_1 <= -1.6749310195446014) ? ( 43 ) : ( (Feature_9 <= -0.5060266256332397) ? ( 45 ) : ( 46 ) ) ) : ( 47 ) ) : ( 48 ) ) ) : ( (Feature_0 <= 0.6305383592844009) ? ( (Feature_9 <= 0.26723115146160126) ? ( (Feature_2 <= 0.4170942362397909) ? ( (Feature_3 <= -0.38771793246269226) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) ) ) : ( (Feature_0 <= 0.2525207996368408) ? ( 59 ) : ( 60 ) ) ) ) : ( (Feature_4 <= 0.34437887370586395) ? ( (Feature_8 <= 0.49558216892182827) ? ( (Feature_1 <= -0.352313794195652) ? ( 64 ) : ( (Feature_8 <= -1.5018147230148315) ? ( 66 ) : ( 67 ) ) ) : ( 68 ) ) : ( (Feature_7 <= -0.878168910741806) ? ( 70 ) : ( 71 ) ) ) ) : ( (Feature_5 <= 0.45844703912734985) ? ( (Feature_8 <= 1.2232642769813538) ? ( (Feature_6 <= 0.973041221499443) ? ( (Feature_3 <= 0.6290147453546524) ? ( (Feature_1 <= 0.4322191998362541) ? ( 77 ) : ( 78 ) ) : ( 79 ) ) : ( 80 ) ) : ( (Feature_1 <= 0.18803770840168) ? ( 82 ) : ( 83 ) ) ) : ( (Feature_6 <= 0.3122275471687317) ? ( (Feature_0 <= 0.3567260205745697) ? ( 86 ) : ( 87 ) ) : ( (Feature_7 <= 1.2383009195327759) ? ( 89 ) : ( 90 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_2
	

	namespace EXT_SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-459.03067075 }} ,
				{ 5 ,  {-305.67509721 }} ,
				{ 9 ,  {-210.3549175 }} ,
				{ 11 ,  {-230.73613628 }} ,
				{ 12 ,  {-223.26828856 }} ,
				{ 13 ,  {-182.33200566 }} ,
				{ 16 ,  {-101.20974879 }} ,
				{ 17 ,  {-130.20856672 }} ,
				{ 18 ,  {-53.5585581 }} ,
				{ 23 ,  {-251.2683419 }} ,
				{ 24 ,  {-182.68535868 }} ,
				{ 26 ,  {-97.81389434 }} ,
				{ 27 ,  {-154.40083699 }} ,
				{ 29 ,  {-181.51172981 }} ,
				{ 33 ,  {3.07608881 }} ,
				{ 34 ,  {-1.77890863 }} ,
				{ 36 ,  {-6.19072274 }} ,
				{ 37 ,  {-9.61795807 }} ,
				{ 39 ,  {58.89206445 }} ,
				{ 40 ,  {37.34665341 }} ,
				{ 44 ,  {-20.42352874 }} ,
				{ 46 ,  {23.51174878 }} ,
				{ 47 ,  {60.83005802 }} ,
				{ 49 ,  {116.88919618 }} ,
				{ 50 ,  {133.87071389 }} ,
				{ 52 ,  {320.68265233 }} ,
				{ 54 ,  {360.61572443 }} ,
				{ 55 ,  {393.26109279 }} ,
				{ 57 ,  {-298.79907559 }} ,
				{ 61 ,  {-67.71218597 }} ,
				{ 62 ,  {-9.18516091 }} ,
				{ 65 ,  {62.64480581 }} ,
				{ 67 ,  {131.03680508 }} ,
				{ 68 ,  {113.44087953 }} ,
				{ 70 ,  {351.37130796 }} ,
				{ 72 ,  {191.55215494 }} ,
				{ 73 ,  {250.1827601 }} ,
				{ 79 ,  {259.87552026 }} ,
				{ 80 ,  {248.55956548 }} ,
				{ 81 ,  {235.32017089 }} ,
				{ 82 ,  {290.7091541 }} ,
				{ 84 ,  {194.40871671 }} ,
				{ 85 ,  {156.85798347 }} ,
				{ 89 ,  {310.60889078 }} ,
				{ 90 ,  {316.51213779 }} ,
				{ 91 ,  {325.07388162 }} ,
				{ 92 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.5816535651683807) ? ( (Feature_5 <= 0.12146195024251938) ? ( (Feature_4 <= -1.0978334546089172) ? ( (Feature_7 <= -0.3302389457821846) ? ( 4 ) : ( 5 ) ) : ( (Feature_7 <= 0.14835833758115768) ? ( (Feature_1 <= -0.16830184310674667) ? ( (Feature_5 <= -1.538417100906372) ? ( 9 ) : ( (Feature_1 <= -1.752525806427002) ? ( 11 ) : ( 12 ) ) ) : ( 13 ) ) : ( (Feature_4 <= -0.5821902006864548) ? ( (Feature_5 <= -0.6903965622186661) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) ) : ( (Feature_8 <= -0.019865378737449646) ? ( (Feature_6 <= -0.21131692826747894) ? ( (Feature_4 <= -1.0042772889137268) ? ( (Feature_8 <= -0.32541514933109283) ? ( 23 ) : ( 24 ) ) : ( (Feature_2 <= 0.3185536414384842) ? ( 26 ) : ( 27 ) ) ) : ( (Feature_5 <= 0.2376226782798767) ? ( 29 ) : ( (Feature_8 <= -0.6182219982147217) ? ( (Feature_8 <= -0.9051221609115601) ? ( (Feature_9 <= 0.7442335188388824) ? ( 33 ) : ( 34 ) ) : ( (Feature_7 <= 1.0856647491455078) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_2 <= 0.21993985027074814) ? ( 39 ) : ( 40 ) ) ) ) ) : ( (Feature_7 <= 0.6048205196857452) ? ( (Feature_9 <= 0.1415829434990883) ? ( (Feature_6 <= 0.3686109445989132) ? ( 44 ) : ( (Feature_1 <= -0.21501198410987854) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_6 <= 0.16691291332244873) ? ( 49 ) : ( 50 ) ) ) : ( (Feature_6 <= 0.41134716384112835) ? ( 52 ) : ( (Feature_1 <= 0.3762817569077015) ? ( 54 ) : ( 55 ) ) ) ) ) ) : ( (Feature_4 <= -1.8727510571479797) ? ( 57 ) : ( (Feature_1 <= -0.19398971647024155) ? ( (Feature_6 <= -0.31106266379356384) ? ( (Feature_5 <= -0.24851980805397034) ? ( 61 ) : ( 62 ) ) : ( (Feature_2 <= 0.8179076910018921) ? ( (Feature_8 <= -0.05473714880645275) ? ( 65 ) : ( (Feature_8 <= -0.006590018980205059) ? ( 67 ) : ( 68 ) ) ) : ( (Feature_1 <= -1.1364352405071259) ? ( 70 ) : ( (Feature_5 <= 0.6369070708751678) ? ( 72 ) : ( 73 ) ) ) ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_2 <= 1.5678871870040894) ? ( (Feature_8 <= 1.3030574321746826) ? ( (Feature_0 <= 1.219061940908432) ? ( (Feature_3 <= 0.036550380289554596) ? ( 79 ) : ( 80 ) ) : ( 81 ) ) : ( 82 ) ) : ( (Feature_0 <= 0.7995415031909943) ? ( 84 ) : ( 85 ) ) ) : ( (Feature_0 <= 1.8615092039108276) ? ( (Feature_4 <= 1.2142926156520844) ? ( (Feature_9 <= 0.8278707526624203) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) : ( 92 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_3
	

	namespace EXT_SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-459.03067075 }} ,
				{ 8 ,  {-230.73613628 }} ,
				{ 9 ,  {-210.3549175 }} ,
				{ 10 ,  {-284.89041043 }} ,
				{ 13 ,  {-101.20974879 }} ,
				{ 14 ,  {-103.03861457 }} ,
				{ 16 ,  {-186.24037603 }} ,
				{ 17 ,  {-165.64587305 }} ,
				{ 19 ,  {-351.38429309 }} ,
				{ 21 ,  {-268.19043239 }} ,
				{ 22 ,  {-298.79907559 }} ,
				{ 25 ,  {235.32017089 }} ,
				{ 26 ,  {259.87552026 }} ,
				{ 28 ,  {-53.5585581 }} ,
				{ 29 ,  {-20.2700101 }} ,
				{ 35 ,  {-237.150375 }} ,
				{ 36 ,  {-182.68535868 }} ,
				{ 38 ,  {-140.83123535 }} ,
				{ 39 ,  {-130.20856672 }} ,
				{ 42 ,  {-80.36713173 }} ,
				{ 43 ,  {-49.96946031 }} ,
				{ 45 ,  {44.29871811 }} ,
				{ 46 ,  {-6.19072274 }} ,
				{ 50 ,  {26.98702516 }} ,
				{ 51 ,  {38.71263785 }} ,
				{ 54 ,  {-9.18516091 }} ,
				{ 55 ,  {-9.61795807 }} ,
				{ 56 ,  {8.92365624 }} ,
				{ 58 ,  {156.85798347 }} ,
				{ 59 ,  {144.42445426 }} ,
				{ 63 ,  {58.56592202 }} ,
				{ 64 ,  {116.88919618 }} ,
				{ 67 ,  {-33.33701473 }} ,
				{ 68 ,  {-32.37006064 }} ,
				{ 70 ,  {-8.54151458 }} ,
				{ 71 ,  {11.97984848 }} ,
				{ 75 ,  {23.51174878 }} ,
				{ 77 ,  {62.64480581 }} ,
				{ 78 ,  {60.83005802 }} ,
				{ 80 ,  {320.68265233 }} ,
				{ 81 ,  {250.1827601 }} ,
				{ 85 ,  {349.42168234 }} ,
				{ 86 ,  {290.7091541 }} ,
				{ 89 ,  {191.55215494 }} ,
				{ 90 ,  {156.7480822 }} ,
				{ 91 ,  {239.63425512 }} ,
				{ 93 ,  {393.26109279 }} ,
				{ 94 ,  {360.61572443 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.5290045142173767) ? ( (Feature_1 <= 0.12633489351719618) ? ( (Feature_2 <= -1.5412905812263489) ? ( 3 ) : ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_5 <= -1.230453073978424) ? ( (Feature_0 <= 0.5072311088442802) ? ( (Feature_2 <= -0.9989486336708069) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) : ( (Feature_2 <= -0.4242438077926636) ? ( (Feature_9 <= 0.343722902238369) ? ( 13 ) : ( 14 ) ) : ( (Feature_1 <= -0.3998677730560303) ? ( 16 ) : ( 17 ) ) ) ) : ( (Feature_2 <= -0.15183788537979126) ? ( 19 ) : ( (Feature_1 <= -1.2712639570236206) ? ( 21 ) : ( 22 ) ) ) ) ) : ( (Feature_1 <= 0.8688846528530121) ? ( (Feature_5 <= -0.9404467344284058) ? ( 25 ) : ( 26 ) ) : ( (Feature_1 <= 2.0651989579200745) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_8 <= -0.18945985287427902) ? ( (Feature_2 <= 0.3559166193008423) ? ( (Feature_1 <= 0.26806823164224625) ? ( (Feature_4 <= -1.137121170759201) ? ( (Feature_8 <= -0.9507961273193359) ? ( 35 ) : ( 36 ) ) : ( (Feature_0 <= 1.1990749835968018) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_5 <= 0.1022767722606659) ? ( (Feature_2 <= 0.021940015256404877) ? ( 42 ) : ( 43 ) ) : ( (Feature_6 <= -0.37361519038677216) ? ( 45 ) : ( 46 ) ) ) ) : ( (Feature_1 <= -0.07556744664907455) ? ( (Feature_0 <= 0.35577890276908875) ? ( (Feature_1 <= -0.7860279828310013) ? ( 50 ) : ( 51 ) ) : ( (Feature_5 <= 0.7853067517280579) ? ( (Feature_7 <= 1.0009593069553375) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (Feature_8 <= -1.5018147230148315) ? ( 58 ) : ( 59 ) ) ) ) : ( (Feature_2 <= -0.4835273176431656) ? ( (Feature_2 <= -0.9558148682117462) ? ( (Feature_2 <= -1.5382265746593475) ? ( 63 ) : ( 64 ) ) : ( (Feature_1 <= 0.02627667784690857) ? ( (Feature_1 <= -0.8689591288566589) ? ( 67 ) : ( 68 ) ) : ( (Feature_0 <= -1.3337126970291138) ? ( 70 ) : ( 71 ) ) ) ) : ( (Feature_0 <= 0.09366913139820099) ? ( (Feature_9 <= 0.370294782333076) ? ( (Feature_1 <= -0.5889526382088661) ? ( 75 ) : ( (Feature_5 <= 0.10477415472269058) ? ( 77 ) : ( 78 ) ) ) : ( (Feature_0 <= -1.2556358575820923) ? ( 80 ) : ( 81 ) ) ) : ( (Feature_7 <= 0.9121542870998383) ? ( (Feature_7 <= -1.0512710213661194) ? ( (Feature_0 <= 1.1905565857887268) ? ( 85 ) : ( 86 ) ) : ( (Feature_7 <= 0.40723317116498947) ? ( (Feature_5 <= 0.6839471161365509) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) : ( (Feature_3 <= 0.38477644324302673) ? ( 93 ) : ( 94 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_4
	

	namespace EXT_SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-351.38429309 }} ,
				{ 6 ,  {-422.390294 }} ,
				{ 7 ,  {-165.64587305 }} ,
				{ 11 ,  {-305.67509721 }} ,
				{ 13 ,  {-182.68535868 }} ,
				{ 14 ,  {-223.26828856 }} ,
				{ 18 ,  {-210.3549175 }} ,
				{ 19 ,  {-186.24037603 }} ,
				{ 22 ,  {-130.20856672 }} ,
				{ 23 ,  {-140.83123535 }} ,
				{ 25 ,  {-97.81389434 }} ,
				{ 26 ,  {-103.03861457 }} ,
				{ 29 ,  {-33.10367735 }} ,
				{ 30 ,  {-32.37006064 }} ,
				{ 31 ,  {-1.77890863 }} ,
				{ 35 ,  {-20.2700101 }} ,
				{ 36 ,  {-6.19072274 }} ,
				{ 38 ,  {-53.5585581 }} ,
				{ 39 ,  {-80.36713173 }} ,
				{ 40 ,  {156.7480822 }} ,
				{ 45 ,  {23.51174878 }} ,
				{ 47 ,  {60.83005802 }} ,
				{ 48 ,  {58.56592202 }} ,
				{ 49 ,  {116.88919618 }} ,
				{ 51 ,  {-101.20974879 }} ,
				{ 52 ,  {-33.33701473 }} ,
				{ 53 ,  {393.26109279 }} ,
				{ 58 ,  {-181.51172981 }} ,
				{ 59 ,  {-251.2683419 }} ,
				{ 62 ,  {-27.42654029 }} ,
				{ 63 ,  {-49.96946031 }} ,
				{ 66 ,  {-9.61795807 }} ,
				{ 67 ,  {3.07608881 }} ,
				{ 69 ,  {26.98702516 }} ,
				{ 71 ,  {37.34665341 }} ,
				{ 72 ,  {38.71263785 }} ,
				{ 75 ,  {235.32017089 }} ,
				{ 76 ,  {277.98128451 }} ,
				{ 77 ,  {156.85798347 }} ,
				{ 82 ,  {228.58868552 }} ,
				{ 85 ,  {320.68265233 }} ,
				{ 86 ,  {316.51213779 }} ,
				{ 87 ,  {351.37130796 }} ,
				{ 89 ,  {131.03680508 }} ,
				{ 90 ,  {250.1827601 }} ,
				{ 93 ,  {62.64480581 }} ,
				{ 94 ,  {113.44087953 }} ,
				{ 95 ,  {198.97164294 }} ,
				{ 99 ,  {290.7091541 }} ,
				{ 100 ,  {259.87552026 }} ,
				{ 102 ,  {360.61572443 }} ,
				{ 104 ,  {349.42168234 }} ,
				{ 106 ,  {310.60889078 }} ,
				{ 107 ,  {325.07388162 }} ,
				{ 108 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.18410376459360123) ? ( (Feature_8 <= 0.6005938053131104) ? ( (Feature_3 <= -1.1217054724693298) ? ( (Feature_2 <= -0.47532065212726593) ? ( (Feature_5 <= -0.7586922645568848) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_1 <= 0.28144707530736923) ? ( (Feature_4 <= -1.0482117533683777) ? ( (Feature_3 <= -0.2879255563020706) ? ( 11 ) : ( (Feature_4 <= -1.2633335590362549) ? ( 13 ) : ( 14 ) ) ) : ( (Feature_6 <= 0.5386310815811157) ? ( (Feature_0 <= -0.016581445932388306) ? ( (Feature_9 <= 0.21472355723381042) ? ( 18 ) : ( 19 ) ) : ( (Feature_8 <= -0.6308223232626915) ? ( (Feature_3 <= 0.7686348259449005) ? ( 22 ) : ( 23 ) ) : ( (Feature_4 <= -0.046393588185310364) ? ( 25 ) : ( 26 ) ) ) ) : ( (Feature_1 <= -0.7004771828651428) ? ( (Feature_1 <= -0.8579261600971222) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) ) : ( (Feature_0 <= 0.7859629988670349) ? ( (Feature_6 <= 0.7520454674959183) ? ( (Feature_9 <= -0.7378761172294617) ? ( 35 ) : ( 36 ) ) : ( (Feature_3 <= 0.051386237144470215) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) ) ) : ( (Feature_0 <= 1.1356269121170044) ? ( (Feature_3 <= 0.3380711227655411) ? ( (Feature_5 <= 0.9271526634693146) ? ( (Feature_1 <= -0.21501198410987854) ? ( 45 ) : ( (Feature_8 <= 0.9485286474227905) ? ( 47 ) : ( 48 ) ) ) : ( 49 ) ) : ( (Feature_0 <= -0.12556207180023193) ? ( 51 ) : ( 52 ) ) ) : ( 53 ) ) ) : ( (Feature_8 <= -0.1578926146030426) ? ( (Feature_2 <= 0.9449615180492401) ? ( (Feature_9 <= -0.42366455495357513) ? ( (Feature_8 <= -1.2108074575662613) ? ( 58 ) : ( 59 ) ) : ( (Feature_6 <= 0.021038122475147247) ? ( (Feature_3 <= -0.9119719192385674) ? ( 62 ) : ( 63 ) ) : ( (Feature_4 <= -0.634780690073967) ? ( (Feature_4 <= -1.077013999223709) ? ( 66 ) : ( 67 ) ) : ( (Feature_2 <= 0.48073437809944153) ? ( 69 ) : ( (Feature_5 <= 0.8510328233242035) ? ( 71 ) : ( 72 ) ) ) ) ) ) : ( (Feature_9 <= 1.2390621900558472) ? ( (Feature_2 <= 1.1098341643810272) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) ) : ( (Feature_1 <= 0.019701428711414337) ? ( (Feature_6 <= 0.19136339239776134) ? ( (Feature_5 <= 1.2176361680030823) ? ( (Feature_5 <= -0.43360650539398193) ? ( 82 ) : ( (Feature_4 <= 1.289580911397934) ? ( (Feature_1 <= -0.20851048827171326) ? ( 85 ) : ( 86 ) ) : ( 87 ) ) ) : ( (Feature_2 <= 0.9937630891799927) ? ( 89 ) : ( 90 ) ) ) : ( (Feature_8 <= 0.20278831105679274) ? ( (Feature_2 <= 0.7659631967544556) ? ( 93 ) : ( 94 ) ) : ( 95 ) ) ) : ( (Feature_4 <= 1.9032750129699707) ? ( (Feature_4 <= -0.8017905652523041) ? ( (Feature_7 <= -1.0844264030456543) ? ( 99 ) : ( 100 ) ) : ( (Feature_4 <= -0.14289399981498718) ? ( 102 ) : ( (Feature_8 <= -0.04608037695288658) ? ( 104 ) : ( (Feature_7 <= 0.1312263309955597) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 108 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_5
	

	namespace EXT_SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-459.03067075 }} ,
				{ 5 ,  {-422.390294 }} ,
				{ 9 ,  {-186.24037603 }} ,
				{ 10 ,  {-210.3549175 }} ,
				{ 12 ,  {-165.64587305 }} ,
				{ 13 ,  {-130.20856672 }} ,
				{ 15 ,  {-101.20974879 }} ,
				{ 16 ,  {-53.5585581 }} ,
				{ 22 ,  {-80.36713173 }} ,
				{ 23 ,  {-97.81389434 }} ,
				{ 24 ,  {-33.33701473 }} ,
				{ 26 ,  {-33.10367735 }} ,
				{ 27 ,  {-1.77890863 }} ,
				{ 29 ,  {-223.26828856 }} ,
				{ 30 ,  {-140.83123535 }} ,
				{ 34 ,  {58.56592202 }} ,
				{ 35 ,  {58.89206445 }} ,
				{ 36 ,  {44.29871811 }} ,
				{ 38 ,  {11.97984848 }} ,
				{ 39 ,  {-8.54151458 }} ,
				{ 44 ,  {-154.40083699 }} ,
				{ 45 ,  {-268.19043239 }} ,
				{ 46 ,  {144.42445426 }} ,
				{ 48 ,  {156.85798347 }} ,
				{ 52 ,  {8.92365624 }} ,
				{ 53 ,  {3.07608881 }} ,
				{ 54 ,  {-9.61795807 }} ,
				{ 56 ,  {26.98702516 }} ,
				{ 58 ,  {38.71263785 }} ,
				{ 59 ,  {37.34665341 }} ,
				{ 62 ,  {-20.42352874 }} ,
				{ 63 ,  {-298.79907559 }} ,
				{ 66 ,  {-27.42654029 }} ,
				{ 67 ,  {113.44087953 }} ,
				{ 71 ,  {62.64480581 }} ,
				{ 74 ,  {198.97164294 }} ,
				{ 76 ,  {133.87071389 }} ,
				{ 77 ,  {131.03680508 }} ,
				{ 79 ,  {191.55215494 }} ,
				{ 82 ,  {248.55956548 }} ,
				{ 83 ,  {235.32017089 }} ,
				{ 85 ,  {277.98128451 }} ,
				{ 86 ,  {259.87552026 }} ,
				{ 87 ,  {360.61572443 }} ,
				{ 91 ,  {349.42168234 }} ,
				{ 92 ,  {351.37130796 }} ,
				{ 93 ,  {310.60889078 }} ,
				{ 95 ,  {479.70721604 }} ,
				{ 96 ,  {447.69098355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.18410376459360123) ? ( (Feature_5 <= -0.39174382388591766) ? ( (Feature_1 <= -0.9223221838474274) ? ( (Feature_5 <= -0.728982001543045) ? ( 4 ) : ( 5 ) ) : ( (Feature_8 <= 0.3360840603709221) ? ( (Feature_0 <= 0.029017388820648193) ? ( (Feature_1 <= -0.5676259100437164) ? ( 9 ) : ( 10 ) ) : ( (Feature_7 <= 0.18532351031899452) ? ( 12 ) : ( 13 ) ) ) : ( (Feature_6 <= 0.8072530776262283) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_1 <= 0.5709209591150284) ? ( (Feature_9 <= 0.9716534912586212) ? ( (Feature_9 <= 0.06026229665076244) ? ( (Feature_8 <= 0.23401758819818497) ? ( (Feature_5 <= 0.46681278944015503) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) : ( (Feature_6 <= 1.5937102437019348) ? ( 26 ) : ( 27 ) ) ) : ( (Feature_0 <= 0.24906571209430695) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_5 <= 0.6772039830684662) ? ( (Feature_2 <= -0.1128767728805542) ? ( (Feature_4 <= 0.03262847661972046) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (Feature_7 <= -0.8860880732536316) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (Feature_8 <= -0.4402347803115845) ? ( (Feature_5 <= 0.31690624356269836) ? ( (Feature_0 <= 0.04461902007460594) ? ( (Feature_3 <= -1.0296608358621597) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (Feature_8 <= -2.1713396310806274) ? ( 48 ) : ( (Feature_4 <= -0.634780690073967) ? ( (Feature_0 <= 0.8921750485897064) ? ( (Feature_3 <= -0.38905781507492065) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (Feature_8 <= -1.620882511138916) ? ( 56 ) : ( (Feature_8 <= -0.9956755042076111) ? ( 58 ) : ( 59 ) ) ) ) ) ) : ( (Feature_4 <= -1.493760734796524) ? ( (Feature_2 <= 0.6031976938247681) ? ( 62 ) : ( 63 ) ) : ( (Feature_1 <= -1.381020724773407) ? ( (Feature_1 <= -1.8972156047821045) ? ( 66 ) : ( 67 ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_8 <= 1.4355530142784119) ? ( (Feature_3 <= -0.1852387711405754) ? ( 71 ) : ( (Feature_2 <= 0.6190181970596313) ? ( (Feature_5 <= 0.09922285284847021) ? ( 74 ) : ( (Feature_7 <= -1.405387818813324) ? ( 76 ) : ( 77 ) ) ) : ( (Feature_1 <= -0.3637073263525963) ? ( 79 ) : ( (Feature_1 <= 0.47282135486602783) ? ( (Feature_2 <= 0.7976342737674713) ? ( 82 ) : ( 83 ) ) : ( (Feature_9 <= 0.4572836458683014) ? ( 85 ) : ( 86 ) ) ) ) ) ) : ( 87 ) ) : ( (Feature_0 <= 1.2442417740821838) ? ( (Feature_6 <= 0.12088111694902182) ? ( (Feature_4 <= 1.5619438290596008) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) : ( (Feature_3 <= 0.5850848034024239) ? ( 95 ) : ( 96 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_6
	

	namespace EXT_SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-230.73613628 }} ,
				{ 9 ,  {-210.3549175 }} ,
				{ 11 ,  {-165.64587305 }} ,
				{ 12 ,  {-186.24037603 }} ,
				{ 13 ,  {-305.67509721 }} ,
				{ 15 ,  {-101.20974879 }} ,
				{ 16 ,  {-53.5585581 }} ,
				{ 18 ,  {-422.390294 }} ,
				{ 20 ,  {-351.38429309 }} ,
				{ 21 ,  {-298.79907559 }} ,
				{ 27 ,  {-223.26828856 }} ,
				{ 28 ,  {-237.150375 }} ,
				{ 30 ,  {-268.19043239 }} ,
				{ 31 ,  {-251.2683419 }} ,
				{ 32 ,  {-182.68535868 }} ,
				{ 37 ,  {-154.40083699 }} ,
				{ 39 ,  {-130.20856672 }} ,
				{ 40 ,  {-140.83123535 }} ,
				{ 41 ,  {-182.33200566 }} ,
				{ 43 ,  {-49.96946031 }} ,
				{ 44 ,  {-97.81389434 }} ,
				{ 47 ,  {-80.36713173 }} ,
				{ 49 ,  {-20.2700101 }} ,
				{ 50 ,  {-33.10367735 }} ,
				{ 52 ,  {-1.77890863 }} ,
				{ 54 ,  {38.71263785 }} ,
				{ 55 ,  {58.89206445 }} ,
				{ 59 ,  {116.88919618 }} ,
				{ 60 ,  {131.03680508 }} ,
				{ 62 ,  {60.83005802 }} ,
				{ 66 ,  {-32.37006064 }} ,
				{ 67 ,  {-33.33701473 }} ,
				{ 68 ,  {-27.42654029 }} ,
				{ 70 ,  {-8.54151458 }} ,
				{ 71 ,  {-20.42352874 }} ,
				{ 73 ,  {133.87071389 }} ,
				{ 74 ,  {290.7091541 }} ,
				{ 78 ,  {62.64480581 }} ,
				{ 79 ,  {-6.19072274 }} ,
				{ 80 ,  {-284.89041043 }} ,
				{ 84 ,  {243.63801062 }} ,
				{ 85 ,  {239.63425512 }} ,
				{ 86 ,  {113.44087953 }} ,
				{ 88 ,  {479.70721604 }} ,
				{ 90 ,  {360.61572443 }} ,
				{ 91 ,  {393.26109279 }} ,
				{ 95 ,  {144.42445426 }} ,
				{ 96 ,  {156.85798347 }} ,
				{ 97 ,  {-9.18516091 }} ,
				{ 101 ,  {194.40871671 }} ,
				{ 102 ,  {191.55215494 }} ,
				{ 104 ,  {259.87552026 }} ,
				{ 105 ,  {235.32017089 }} ,
				{ 107 ,  {277.98128451 }} ,
				{ 110 ,  {316.51213779 }} ,
				{ 111 ,  {325.07388162 }} ,
				{ 112 ,  {349.42168234 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.9449615180492401) ? ( (Feature_7 <= 0.7779803574085236) ? ( (Feature_5 <= -0.6670668423175812) ? ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_8 <= 0.5116420686244965) ? ( (Feature_0 <= 1.0754079222679138) ? ( (Feature_5 <= -1.230453073978424) ? ( (Feature_3 <= 0.2876458764076233) ? ( 8 ) : ( 9 ) ) : ( (Feature_2 <= -0.15304533764719963) ? ( 11 ) : ( 12 ) ) ) : ( 13 ) ) : ( (Feature_6 <= 0.8072530776262283) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_8 <= -1.5096672773361206) ? ( 18 ) : ( (Feature_8 <= -0.6445454247295856) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_8 <= -0.20600614696741104) ? ( (Feature_4 <= -1.0482117533683777) ? ( (Feature_3 <= 0.6642143130302429) ? ( (Feature_7 <= -1.48438560962677) ? ( (Feature_0 <= 1.1364790946245193) ? ( 27 ) : ( 28 ) ) : ( (Feature_8 <= -1.242882862687111) ? ( 30 ) : ( 31 ) ) ) : ( 32 ) ) : ( (Feature_6 <= -0.3597670868039131) ? ( (Feature_8 <= -0.4536484628915787) ? ( (Feature_8 <= -0.8053350746631622) ? ( (Feature_9 <= -0.20740985870361328) ? ( 37 ) : ( (Feature_9 <= 1.0051135420799255) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( (Feature_5 <= 0.40914836525917053) ? ( 43 ) : ( 44 ) ) ) : ( (Feature_5 <= -0.0036729127168655396) ? ( (Feature_0 <= 0.26288993656635284) ? ( 47 ) : ( (Feature_2 <= -0.1382427215576172) ? ( 49 ) : ( 50 ) ) ) : ( (Feature_4 <= -0.09040918946266174) ? ( 52 ) : ( (Feature_7 <= -0.11430482380092144) ? ( 54 ) : ( 55 ) ) ) ) ) ) : ( (Feature_3 <= 1.048476755619049) ? ( (Feature_6 <= -0.1813536211848259) ? ( (Feature_6 <= -0.9043327942490578) ? ( 59 ) : ( 60 ) ) : ( (Feature_5 <= 0.5727667361497879) ? ( 62 ) : ( (Feature_1 <= -0.6824400126934052) ? ( (Feature_9 <= 0.05058024823665619) ? ( (Feature_8 <= 0.3333331234753132) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) : ( (Feature_0 <= -0.8128513896372169) ? ( 70 ) : ( 71 ) ) ) ) ) : ( (Feature_1 <= 0.8354016244411469) ? ( 73 ) : ( 74 ) ) ) ) ) : ( (Feature_8 <= -0.06810655444860458) ? ( (Feature_4 <= 0.5503368303179741) ? ( (Feature_3 <= -0.018808849155902863) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (Feature_6 <= 0.5813029557466507) ? ( (Feature_6 <= 0.24373507872223854) ? ( (Feature_2 <= -0.8130484223365784) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) : ( (Feature_8 <= 0.2998788580298424) ? ( 88 ) : ( (Feature_5 <= 1.4184053540229797) ? ( 90 ) : ( 91 ) ) ) ) ) ) : ( (Feature_8 <= -0.5391541123390198) ? ( (Feature_7 <= 0.4617241434752941) ? ( (Feature_9 <= 1.0528674647212029) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) : ( (Feature_4 <= 0.2250973880290985) ? ( (Feature_6 <= 0.5727009177207947) ? ( (Feature_0 <= 0.6404253244400024) ? ( 101 ) : ( 102 ) ) : ( (Feature_7 <= -0.06519299745559692) ? ( 104 ) : ( 105 ) ) ) : ( (Feature_6 <= -1.6447586417198181) ? ( 107 ) : ( (Feature_5 <= -0.001641690731048584) ? ( (Feature_0 <= 0.6527168899774551) ? ( 110 ) : ( 111 ) ) : ( 112 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_7
	

	namespace EXT_SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-284.89041043 }} ,
				{ 6 ,  {-230.73613628 }} ,
				{ 9 ,  {-186.24037603 }} ,
				{ 10 ,  {-165.64587305 }} ,
				{ 12 ,  {-103.03861457 }} ,
				{ 13 ,  {-67.71218597 }} ,
				{ 15 ,  {-351.38429309 }} ,
				{ 17 ,  {-298.79907559 }} ,
				{ 18 ,  {-268.19043239 }} ,
				{ 22 ,  {-182.68535868 }} ,
				{ 24 ,  {-223.26828856 }} ,
				{ 25 ,  {-251.2683419 }} ,
				{ 30 ,  {-9.18516091 }} ,
				{ 31 ,  {44.29871811 }} ,
				{ 32 ,  {-140.83123535 }} ,
				{ 35 ,  {-182.33200566 }} ,
				{ 37 ,  {-130.20856672 }} ,
				{ 38 ,  {-154.40083699 }} ,
				{ 40 ,  {-97.81389434 }} ,
				{ 41 ,  {-49.96946031 }} ,
				{ 45 ,  {62.64480581 }} ,
				{ 46 ,  {58.89206445 }} ,
				{ 47 ,  {144.42445426 }} ,
				{ 49 ,  {-80.36713173 }} ,
				{ 53 ,  {-32.37006064 }} ,
				{ 54 ,  {-33.10367735 }} ,
				{ 56 ,  {11.97984848 }} ,
				{ 58 ,  {3.07608881 }} ,
				{ 59 ,  {-1.77890863 }} ,
				{ 61 ,  {37.34665341 }} ,
				{ 62 ,  {26.98702516 }} ,
				{ 64 ,  {-8.54151458 }} ,
				{ 67 ,  {198.97164294 }} ,
				{ 68 ,  {248.55956548 }} ,
				{ 70 ,  {133.87071389 }} ,
				{ 71 ,  {131.03680508 }} ,
				{ 76 ,  {-101.20974879 }} ,
				{ 77 ,  {-53.5585581 }} ,
				{ 81 ,  {60.83005802 }} ,
				{ 82 ,  {58.56592202 }} ,
				{ 83 ,  {23.51174878 }} ,
				{ 84 ,  {-33.33701473 }} ,
				{ 85 ,  {393.26109279 }} ,
				{ 88 ,  {194.40871671 }} ,
				{ 90 ,  {228.58868552 }} ,
				{ 91 ,  {259.87552026 }} ,
				{ 95 ,  {351.37130796 }} ,
				{ 97 ,  {325.07388162 }} ,
				{ 98 ,  {320.68265233 }} ,
				{ 99 ,  {290.7091541 }} ,
				{ 100 ,  {447.69098355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_5 <= -0.5012405514717102) ? ( (Feature_5 <= -0.9047020673751831) ? ( (Feature_1 <= -0.931333601474762) ? ( (Feature_3 <= -0.4883671849966049) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= -0.44480563700199127) ? ( (Feature_0 <= -0.6296252608299255) ? ( 9 ) : ( 10 ) ) : ( (Feature_6 <= -0.33137939870357513) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_3 <= -1.0262205749750137) ? ( 15 ) : ( (Feature_4 <= -1.975234866142273) ? ( 17 ) : ( 18 ) ) ) ) : ( (Feature_8 <= -0.04430999793112278) ? ( (Feature_4 <= -1.0482117533683777) ? ( (Feature_2 <= -0.9571067243814468) ? ( 22 ) : ( (Feature_0 <= 0.23491309583187103) ? ( 24 ) : ( 25 ) ) ) : ( (Feature_6 <= -0.340087354183197) ? ( (Feature_8 <= -1.707958161830902) ? ( (Feature_3 <= 0.3093225061893463) ? ( (Feature_6 <= -1.1756424307823181) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (Feature_8 <= -0.4536484628915787) ? ( (Feature_1 <= 0.19207628071308136) ? ( 35 ) : ( (Feature_1 <= 0.5524893775582314) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_0 <= 1.0368956625461578) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_6 <= 0.4816262125968933) ? ( (Feature_9 <= 0.12012460362166166) ? ( (Feature_3 <= 0.1404242143034935) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (Feature_5 <= -0.30987349152565) ? ( 49 ) : ( (Feature_2 <= 0.3109996020793915) ? ( (Feature_1 <= -0.7004771828651428) ? ( (Feature_9 <= -0.09446440264582634) ? ( 53 ) : ( 54 ) ) : ( (Feature_6 <= 0.9619232714176178) ? ( 56 ) : ( (Feature_5 <= 0.9018257260322571) ? ( 58 ) : ( 59 ) ) ) ) : ( (Feature_5 <= 0.7086978852748871) ? ( 61 ) : ( 62 ) ) ) ) ) ) ) : ( (Feature_4 <= -0.9480748474597931) ? ( 64 ) : ( (Feature_9 <= 0.13180067390203476) ? ( (Feature_2 <= 0.48745197057724) ? ( 67 ) : ( 68 ) ) : ( (Feature_5 <= 0.7151965126395226) ? ( 70 ) : ( 71 ) ) ) ) ) ) : ( (Feature_2 <= 0.16659518145024776) ? ( (Feature_0 <= 1.1356269121170044) ? ( (Feature_5 <= -0.27812254428863525) ? ( (Feature_9 <= 0.06572765856981277) ? ( 76 ) : ( 77 ) ) : ( (Feature_0 <= 0.36501309275627136) ? ( (Feature_6 <= 0.7336699664592743) ? ( (Feature_3 <= -0.7057149261236191) ? ( 81 ) : ( 82 ) ) : ( 83 ) ) : ( 84 ) ) ) : ( 85 ) ) : ( (Feature_8 <= 1.3499985933303833) ? ( (Feature_7 <= -0.7775385081768036) ? ( 88 ) : ( (Feature_9 <= 0.5837498903274536) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_8 <= 2.37233966588974) ? ( (Feature_0 <= 1.3665006160736084) ? ( (Feature_3 <= -0.7474055364727974) ? ( 95 ) : ( (Feature_5 <= -0.38024741411209106) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_8
	

	namespace EXT_SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-459.03067075 }} ,
				{ 6 ,  {-422.390294 }} ,
				{ 9 ,  {-298.79907559 }} ,
				{ 10 ,  {-305.67509721 }} ,
				{ 12 ,  {-230.73613628 }} ,
				{ 14 ,  {-181.51172981 }} ,
				{ 15 ,  {-182.68535868 }} ,
				{ 17 ,  {-268.19043239 }} ,
				{ 21 ,  {-27.42654029 }} ,
				{ 22 ,  {-67.71218597 }} ,
				{ 25 ,  {8.92365624 }} ,
				{ 26 ,  {-1.77890863 }} ,
				{ 27 ,  {26.98702516 }} ,
				{ 28 ,  {113.44087953 }} ,
				{ 33 ,  {-103.03861457 }} ,
				{ 34 ,  {-130.20856672 }} ,
				{ 36 ,  {-210.3549175 }} ,
				{ 39 ,  {-168.02760852 }} ,
				{ 40 ,  {-165.64587305 }} ,
				{ 41 ,  {-182.33200566 }} ,
				{ 44 ,  {-80.36713173 }} ,
				{ 46 ,  {11.97984848 }} ,
				{ 47 ,  {-20.2700101 }} ,
				{ 48 ,  {156.7480822 }} ,
				{ 52 ,  {250.1827601 }} ,
				{ 53 ,  {144.42445426 }} ,
				{ 57 ,  {62.64480581 }} ,
				{ 58 ,  {58.89206445 }} ,
				{ 60 ,  {38.71263785 }} ,
				{ 61 ,  {44.29871811 }} ,
				{ 62 ,  {-9.18516091 }} ,
				{ 65 ,  {277.98128451 }} ,
				{ 67 ,  {310.60889078 }} ,
				{ 68 ,  {316.51213779 }} ,
				{ 70 ,  {133.87071389 }} ,
				{ 73 ,  {235.32017089 }} ,
				{ 74 ,  {239.63425512 }} ,
				{ 75 ,  {198.97164294 }} ,
				{ 80 ,  {320.68265233 }} ,
				{ 81 ,  {325.07388162 }} ,
				{ 83 ,  {360.61572443 }} ,
				{ 84 ,  {351.37130796 }} ,
				{ 85 ,  {447.69098355 }} ,
				{ 90 ,  {259.87552026 }} ,
				{ 91 ,  {243.63801062 }} ,
				{ 92 ,  {290.7091541 }} ,
				{ 93 ,  {194.40871671 }} ,
				{ 94 ,  {58.56592202 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_1 <= -0.5763004422187805) ? ( (Feature_7 <= 0.1878301277756691) ? ( (Feature_3 <= -0.7235661894083023) ? ( (Feature_5 <= -0.728982001543045) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= -0.661413162946701) ? ( (Feature_8 <= -0.009594515431672335) ? ( 9 ) : ( 10 ) ) : ( (Feature_1 <= -1.3145039975643158) ? ( 12 ) : ( (Feature_5 <= 0.3340437412261963) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (Feature_8 <= -1.9174264669418335) ? ( 17 ) : ( (Feature_0 <= 0.7223010808229446) ? ( (Feature_6 <= 0.2409779541194439) ? ( (Feature_7 <= 0.9621894657611847) ? ( 21 ) : ( 22 ) ) : ( (Feature_4 <= -0.7591017037630081) ? ( (Feature_6 <= 2.4699126482009888) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) : ( 28 ) ) ) ) : ( (Feature_2 <= -0.16130470484495163) ? ( (Feature_1 <= 0.28144707530736923) ? ( (Feature_2 <= -0.9737077057361603) ? ( (Feature_5 <= -0.7756846994161606) ? ( 33 ) : ( 34 ) ) : ( (Feature_9 <= -0.5708940774202347) ? ( 36 ) : ( (Feature_4 <= 0.5061353296041489) ? ( (Feature_6 <= -0.5550891850143671) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) ) : ( (Feature_5 <= 1.43319571018219) ? ( (Feature_1 <= 0.7647954076528549) ? ( 44 ) : ( (Feature_1 <= 2.094997763633728) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) ) : ( (Feature_3 <= 0.5238881409168243) ? ( (Feature_7 <= -0.17408128827810287) ? ( (Feature_1 <= 0.39980548620224) ? ( 52 ) : ( 53 ) ) : ( (Feature_2 <= 0.9437295794487) ? ( (Feature_5 <= 0.46302129328250885) ? ( (Feature_4 <= 0.8134753033518791) ? ( 57 ) : ( 58 ) ) : ( (Feature_0 <= 0.4114235192537308) ? ( 60 ) : ( 61 ) ) ) : ( 62 ) ) ) : ( (Feature_0 <= 0.3955933004617691) ? ( (Feature_6 <= -1.3979162573814392) ? ( 65 ) : ( (Feature_3 <= 0.6575542986392975) ? ( 67 ) : ( 68 ) ) ) : ( (Feature_7 <= -0.7949293851852417) ? ( 70 ) : ( (Feature_7 <= 1.286167174577713) ? ( (Feature_7 <= 0.7107708752155304) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) ) : ( (Feature_1 <= 0.6093696057796478) ? ( (Feature_8 <= 2.4452804923057556) ? ( (Feature_7 <= 1.151115894317627) ? ( (Feature_2 <= 0.6911429911851883) ? ( 80 ) : ( 81 ) ) : ( (Feature_7 <= 1.6643418669700623) ? ( 83 ) : ( 84 ) ) ) : ( 85 ) ) : ( (Feature_1 <= 0.9667319655418396) ? ( (Feature_2 <= 1.5834551453590393) ? ( (Feature_3 <= 0.4512084871530533) ? ( (Feature_1 <= 0.7081339657306671) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) : ( 94 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_9
	

	namespace EXT_SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-298.79907559 }} ,
				{ 7 ,  {-305.67509721 }} ,
				{ 8 ,  {-351.38429309 }} ,
				{ 9 ,  {-422.390294 }} ,
				{ 11 ,  {-268.19043239 }} ,
				{ 14 ,  {-230.73613628 }} ,
				{ 15 ,  {-210.3549175 }} ,
				{ 16 ,  {-186.24037603 }} ,
				{ 20 ,  {-181.51172981 }} ,
				{ 22 ,  {-97.81389434 }} ,
				{ 24 ,  {113.44087953 }} ,
				{ 29 ,  {-1.77890863 }} ,
				{ 31 ,  {23.51174878 }} ,
				{ 32 ,  {26.98702516 }} ,
				{ 35 ,  {-20.42352874 }} ,
				{ 36 ,  {-27.42654029 }} ,
				{ 38 ,  {-9.61795807 }} ,
				{ 39 ,  {-9.18516091 }} ,
				{ 41 ,  {-32.37006064 }} ,
				{ 42 ,  {-33.10367735 }} ,
				{ 43 ,  {38.71263785 }} ,
				{ 45 ,  {-140.83123535 }} ,
				{ 46 ,  {-223.26828856 }} ,
				{ 48 ,  {447.69098355 }} ,
				{ 49 ,  {191.55215494 }} ,
				{ 56 ,  {60.83005802 }} ,
				{ 58 ,  {58.89206445 }} ,
				{ 59 ,  {58.56592202 }} ,
				{ 60 ,  {116.88919618 }} ,
				{ 62 ,  {11.97984848 }} ,
				{ 63 ,  {-20.2700101 }} ,
				{ 66 ,  {-103.03861457 }} ,
				{ 67 ,  {-53.5585581 }} ,
				{ 68 ,  {-237.150375 }} ,
				{ 70 ,  {360.61572443 }} ,
				{ 71 ,  {393.26109279 }} ,
				{ 75 ,  {62.64480581 }} ,
				{ 76 ,  {144.42445426 }} ,
				{ 79 ,  {277.98128451 }} ,
				{ 81 ,  {259.87552026 }} ,
				{ 82 ,  {248.55956548 }} ,
				{ 84 ,  {198.97164294 }} ,
				{ 85 ,  {194.40871671 }} ,
				{ 89 ,  {349.42168234 }} ,
				{ 92 ,  {320.68265233 }} ,
				{ 93 ,  {325.07388162 }} ,
				{ 95 ,  {316.51213779 }} ,
				{ 96 ,  {310.60889078 }} ,
				{ 97 ,  {228.58868552 }} ,
				{ 98 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= -0.30988679826259613) ? ( (Feature_5 <= -0.5290045142173767) ? ( (Feature_7 <= 0.014229899737983942) ? ( (Feature_7 <= -0.044322007801383734) ? ( (Feature_4 <= -0.9467442333698273) ? ( (Feature_6 <= 0.2709437645971775) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (Feature_1 <= -1.8745955228805542) ? ( 11 ) : ( (Feature_7 <= 0.20479117333889008) ? ( (Feature_6 <= -1.0343912243843079) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) ) ) : ( (Feature_2 <= 1.508549690246582) ? ( (Feature_9 <= 0.9930853545665741) ? ( (Feature_8 <= -1.9733136892318726) ? ( 20 ) : ( (Feature_6 <= -1.9201871156692505) ? ( 22 ) : ( (Feature_9 <= -1.2164379358291626) ? ( 24 ) : ( (Feature_1 <= -0.3976599872112274) ? ( (Feature_4 <= 0.7688144147396088) ? ( (Feature_2 <= 0.4308793991804123) ? ( (Feature_2 <= -0.5048057064414024) ? ( 29 ) : ( (Feature_9 <= 0.3959486559033394) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_7 <= 0.7545933127403259) ? ( (Feature_7 <= -0.07941335439682007) ? ( 35 ) : ( 36 ) ) : ( (Feature_4 <= -0.40802109241485596) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_9 <= -0.09446440264582634) ? ( 41 ) : ( 42 ) ) ) : ( 43 ) ) ) ) ) : ( (Feature_8 <= -1.5143016427755356) ? ( 45 ) : ( 46 ) ) ) : ( (Feature_6 <= -0.44848814606666565) ? ( 48 ) : ( 49 ) ) ) ) : ( (Feature_2 <= 0.32526957988739014) ? ( (Feature_7 <= 0.9718128442764282) ? ( (Feature_0 <= 0.48137156665325165) ? ( (Feature_1 <= 1.1045780181884766) ? ( (Feature_8 <= 1.4440534114837646) ? ( (Feature_7 <= -0.2780310269445181) ? ( 56 ) : ( (Feature_7 <= 0.43531311489641666) ? ( 58 ) : ( 59 ) ) ) : ( 60 ) ) : ( (Feature_2 <= -0.4212671220302582) ? ( 62 ) : ( 63 ) ) ) : ( (Feature_0 <= 1.5683478713035583) ? ( (Feature_0 <= 0.6367962062358856) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (Feature_4 <= -0.336873147636652) ? ( 70 ) : ( 71 ) ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_3 <= -0.1852387711405754) ? ( (Feature_9 <= 0.12012460362166166) ? ( 75 ) : ( 76 ) ) : ( (Feature_0 <= 0.440347284078598) ? ( (Feature_8 <= 0.04156115651130676) ? ( 79 ) : ( (Feature_3 <= 0.036550380289554596) ? ( 81 ) : ( 82 ) ) ) : ( (Feature_5 <= 0.24770053382962942) ? ( 84 ) : ( 85 ) ) ) ) : ( (Feature_4 <= 1.9032750129699707) ? ( (Feature_7 <= 1.0105357766151428) ? ( (Feature_3 <= -0.6507671549916267) ? ( 89 ) : ( (Feature_2 <= 1.3745607137680054) ? ( (Feature_7 <= 0.7572310864925385) ? ( 92 ) : ( 93 ) ) : ( (Feature_1 <= 0.4496738761663437) ? ( 95 ) : ( 96 ) ) ) ) : ( 97 ) ) : ( 98 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_10
	

	namespace EXT_SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-422.390294 }} ,
				{ 8 ,  {-230.73613628 }} ,
				{ 11 ,  {-298.79907559 }} ,
				{ 12 ,  {-284.89041043 }} ,
				{ 13 ,  {-268.19043239 }} ,
				{ 15 ,  {-165.64587305 }} ,
				{ 16 ,  {-182.33200566 }} ,
				{ 18 ,  {-210.3549175 }} ,
				{ 22 ,  {-130.20856672 }} ,
				{ 24 ,  {-101.20974879 }} ,
				{ 25 ,  {-103.03861457 }} ,
				{ 26 ,  {-80.36713173 }} ,
				{ 28 ,  {-49.96946031 }} ,
				{ 29 ,  {-33.10367735 }} ,
				{ 33 ,  {-182.68535868 }} ,
				{ 35 ,  {-237.150375 }} ,
				{ 36 ,  {-251.2683419 }} ,
				{ 41 ,  {-168.02760852 }} ,
				{ 42 ,  {-181.51172981 }} ,
				{ 43 ,  {-154.40083699 }} ,
				{ 45 ,  {-6.19072274 }} ,
				{ 46 ,  {37.34665341 }} ,
				{ 49 ,  {26.98702516 }} ,
				{ 51 ,  {44.29871811 }} ,
				{ 52 ,  {58.89206445 }} ,
				{ 53 ,  {-97.81389434 }} ,
				{ 56 ,  {58.56592202 }} ,
				{ 58 ,  {-32.37006064 }} ,
				{ 59 ,  {-33.33701473 }} ,
				{ 63 ,  {131.03680508 }} ,
				{ 64 ,  {156.7480822 }} ,
				{ 66 ,  {239.63425512 }} ,
				{ 67 ,  {198.97164294 }} ,
				{ 68 ,  {479.70721604 }} ,
				{ 73 ,  {235.32017089 }} ,
				{ 75 ,  {259.87552026 }} ,
				{ 76 ,  {250.1827601 }} ,
				{ 78 ,  {194.40871671 }} ,
				{ 79 ,  {156.85798347 }} ,
				{ 81 ,  {316.51213779 }} ,
				{ 82 ,  {349.42168234 }} ,
				{ 84 ,  {-9.18516091 }} ,
				{ 85 ,  {62.64480581 }} ,
				{ 91 ,  {351.37130796 }} ,
				{ 92 ,  {360.61572443 }} ,
				{ 94 ,  {320.68265233 }} ,
				{ 95 ,  {325.07388162 }} ,
				{ 97 ,  {243.63801062 }} ,
				{ 98 ,  {290.7091541 }} ,
				{ 99 ,  {447.69098355 }} ,
				{ 100 ,  {116.88919618 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 1.3777701258659363) ? ( (Feature_2 <= 0.7007583975791931) ? ( (Feature_5 <= -0.012563485652208328) ? ( (Feature_3 <= 0.20674537122249603) ? ( (Feature_1 <= -0.3833197057247162) ? ( (Feature_3 <= -1.1267889738082886) ? ( 6 ) : ( (Feature_2 <= -0.411433145403862) ? ( 8 ) : ( (Feature_2 <= 0.6607101559638977) ? ( (Feature_0 <= -0.16828611493110657) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (Feature_5 <= -0.5781419379636645) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_9 <= -0.49516672641038895) ? ( 18 ) : ( (Feature_4 <= 0.8540475219488144) ? ( (Feature_6 <= 1.0308393388986588) ? ( (Feature_8 <= -0.5816520899534225) ? ( 22 ) : ( (Feature_4 <= -0.20056767761707306) ? ( 24 ) : ( 25 ) ) ) : ( 26 ) ) : ( (Feature_9 <= 0.03685563988983631) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_8 <= -0.17388925701379776) ? ( (Feature_4 <= -1.4541136026382446) ? ( (Feature_2 <= -0.7089497447013855) ? ( 33 ) : ( (Feature_1 <= 0.18795591592788696) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_0 <= -0.08207584917545319) ? ( (Feature_8 <= -1.0426743626594543) ? ( (Feature_2 <= 0.32577572762966156) ? ( (Feature_6 <= 0.17111104726791382) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (Feature_8 <= -0.6182219982147217) ? ( 45 ) : ( 46 ) ) ) : ( (Feature_5 <= 1.1925145983695984) ? ( (Feature_1 <= -0.22670981287956238) ? ( 49 ) : ( (Feature_4 <= 0.5857448875904083) ? ( 51 ) : ( 52 ) ) ) : ( 53 ) ) ) ) : ( (Feature_2 <= -0.490392342209816) ? ( (Feature_4 <= -1.3593958020210266) ? ( 56 ) : ( (Feature_2 <= -0.6239916086196899) ? ( 58 ) : ( 59 ) ) ) : ( (Feature_4 <= 1.3334320187568665) ? ( (Feature_6 <= 0.08130571246147156) ? ( (Feature_9 <= 0.7769487500190735) ? ( 63 ) : ( 64 ) ) : ( (Feature_2 <= 0.08928734064102173) ? ( 66 ) : ( 67 ) ) ) : ( 68 ) ) ) ) ) : ( (Feature_7 <= 0.7239384353160858) ? ( (Feature_4 <= 0.3000642294064164) ? ( (Feature_2 <= 1.5678871870040894) ? ( (Feature_2 <= 1.1723791658878326) ? ( 73 ) : ( (Feature_9 <= 1.0426704585552216) ? ( 75 ) : ( 76 ) ) ) : ( (Feature_9 <= 1.1211445033550262) ? ( 78 ) : ( 79 ) ) ) : ( (Feature_8 <= -0.14134632050991058) ? ( 81 ) : ( 82 ) ) ) : ( (Feature_6 <= -0.47621916234493256) ? ( 84 ) : ( 85 ) ) ) ) : ( (Feature_9 <= 1.4576728343963623) ? ( (Feature_2 <= 1.5560894012451172) ? ( (Feature_0 <= 1.2730661630630493) ? ( (Feature_9 <= 0.5980944633483887) ? ( (Feature_3 <= -0.19755566120147705) ? ( 91 ) : ( 92 ) ) : ( (Feature_8 <= 1.6257697939872742) ? ( 94 ) : ( 95 ) ) ) : ( (Feature_2 <= -0.4350464940071106) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_11
	

	namespace EXT_SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-237.150375 }} ,
				{ 7 ,  {-284.89041043 }} ,
				{ 8 ,  {-351.38429309 }} ,
				{ 9 ,  {-154.40083699 }} ,
				{ 15 ,  {-168.02760852 }} ,
				{ 17 ,  {-186.24037603 }} ,
				{ 19 ,  {-182.33200566 }} ,
				{ 20 ,  {-181.51172981 }} ,
				{ 21 ,  {-223.26828856 }} ,
				{ 25 ,  {-130.20856672 }} ,
				{ 26 ,  {-140.83123535 }} ,
				{ 27 ,  {-103.03861457 }} ,
				{ 29 ,  {-80.36713173 }} ,
				{ 30 ,  {-49.96946031 }} ,
				{ 33 ,  {26.98702516 }} ,
				{ 34 ,  {-1.77890863 }} ,
				{ 35 ,  {-97.81389434 }} ,
				{ 38 ,  {-6.19072274 }} ,
				{ 39 ,  {11.97984848 }} ,
				{ 41 ,  {58.89206445 }} ,
				{ 42 ,  {44.29871811 }} ,
				{ 46 ,  {37.34665341 }} ,
				{ 47 ,  {8.92365624 }} ,
				{ 48 ,  {-27.42654029 }} ,
				{ 50 ,  {144.42445426 }} ,
				{ 51 ,  {277.98128451 }} ,
				{ 56 ,  {-210.3549175 }} ,
				{ 58 ,  {-298.79907559 }} ,
				{ 59 ,  {-305.67509721 }} ,
				{ 61 ,  {-165.64587305 }} ,
				{ 62 ,  {-101.20974879 }} ,
				{ 63 ,  {325.07388162 }} ,
				{ 66 ,  {58.56592202 }} ,
				{ 68 ,  {-8.54151458 }} ,
				{ 70 ,  {-20.42352874 }} ,
				{ 71 ,  {-33.33701473 }} ,
				{ 77 ,  {228.58868552 }} ,
				{ 80 ,  {131.03680508 }} ,
				{ 82 ,  {113.44087953 }} ,
				{ 83 ,  {116.88919618 }} ,
				{ 84 ,  {198.97164294 }} ,
				{ 85 ,  {250.1827601 }} ,
				{ 87 ,  {320.68265233 }} ,
				{ 88 ,  {191.55215494 }} ,
				{ 92 ,  {239.63425512 }} ,
				{ 94 ,  {133.87071389 }} ,
				{ 95 ,  {156.7480822 }} ,
				{ 98 ,  {290.7091541 }} ,
				{ 99 ,  {310.60889078 }} ,
				{ 100 ,  {259.87552026 }} ,
				{ 102 ,  {360.61572443 }} ,
				{ 103 ,  {393.26109279 }} ,
				{ 105 ,  {447.69098355 }} ,
				{ 106 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= -0.10979260504245758) ? ( (Feature_2 <= 0.5131992697715759) ? ( (Feature_3 <= -1.113596260547638) ? ( (Feature_1 <= 0.35843732953071594) ? ( (Feature_6 <= -0.7873715758323669) ? ( (Feature_3 <= -2.5548614859580994) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (Feature_1 <= 0.4850587993860245) ? ( (Feature_5 <= 1.0220756828784943) ? ( (Feature_0 <= 0.0005427747964859009) ? ( (Feature_0 <= -0.3319724351167679) ? ( (Feature_7 <= -0.7995861694216728) ? ( 15 ) : ( (Feature_5 <= -0.5297591192647815) ? ( 17 ) : ( (Feature_6 <= 0.18162071704864502) ? ( 19 ) : ( 20 ) ) ) ) : ( 21 ) ) : ( (Feature_1 <= 0.26806823164224625) ? ( (Feature_8 <= -0.5816520899534225) ? ( (Feature_4 <= 0.12296441197395325) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) : ( (Feature_2 <= 0.021940015256404877) ? ( 29 ) : ( 30 ) ) ) ) : ( (Feature_0 <= 0.6419966369867325) ? ( (Feature_1 <= -0.9165932834148407) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_0 <= -0.3265945166349411) ? ( (Feature_1 <= 0.8396383821964264) ? ( 38 ) : ( 39 ) ) : ( (Feature_5 <= 0.46302129328250885) ? ( 41 ) : ( 42 ) ) ) ) ) : ( (Feature_1 <= 0.19466164708137512) ? ( (Feature_9 <= 0.08570680022239685) ? ( (Feature_7 <= 0.3947133421897888) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) : ( (Feature_2 <= 1.227002739906311) ? ( 50 ) : ( 51 ) ) ) ) : ( (Feature_5 <= -0.6784075498580933) ? ( (Feature_2 <= 0.8371067941188812) ? ( (Feature_9 <= -0.4723208323121071) ? ( (Feature_5 <= -1.6724066138267517) ? ( 56 ) : ( (Feature_8 <= -0.009594515431672335) ? ( 58 ) : ( 59 ) ) ) : ( (Feature_5 <= -1.0440090000629425) ? ( 61 ) : ( 62 ) ) ) : ( 63 ) ) : ( (Feature_4 <= -0.9727684557437897) ? ( (Feature_3 <= 0.30751340091228485) ? ( 66 ) : ( (Feature_5 <= 0.7070118188858032) ? ( 68 ) : ( (Feature_4 <= -1.6924816966056824) ? ( 70 ) : ( 71 ) ) ) ) : ( (Feature_0 <= 1.8744382858276367) ? ( (Feature_1 <= 0.019701428711414337) ? ( (Feature_3 <= 1.6143474578857422) ? ( (Feature_2 <= 1.0933941900730133) ? ( (Feature_5 <= -0.4371299594640732) ? ( 77 ) : ( (Feature_6 <= 0.973041221499443) ? ( (Feature_7 <= -0.03878563642501831) ? ( 80 ) : ( (Feature_5 <= 0.3446550518274307) ? ( 82 ) : ( 83 ) ) ) : ( 84 ) ) ) : ( 85 ) ) : ( (Feature_0 <= -0.31783628463745117) ? ( 87 ) : ( 88 ) ) ) : ( (Feature_7 <= 0.9121542870998383) ? ( (Feature_2 <= 0.4490375965833664) ? ( (Feature_1 <= 0.2322254776954651) ? ( 92 ) : ( (Feature_4 <= -0.6610900908708572) ? ( 94 ) : ( 95 ) ) ) : ( (Feature_9 <= 0.24860429391264915) ? ( (Feature_5 <= 0.42512262612581253) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) : ( (Feature_0 <= 1.1053712368011475) ? ( 102 ) : ( 103 ) ) ) ) : ( (Feature_9 <= -0.6188081502914429) ? ( 105 ) : ( 106 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_12
	

	namespace EXT_SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-230.73613628 }} ,
				{ 7 ,  {-305.67509721 }} ,
				{ 8 ,  {-284.89041043 }} ,
				{ 11 ,  {-67.71218597 }} ,
				{ 12 ,  {-101.20974879 }} ,
				{ 14 ,  {-165.64587305 }} ,
				{ 15 ,  {-186.24037603 }} ,
				{ 18 ,  {-351.38429309 }} ,
				{ 19 ,  {-298.79907559 }} ,
				{ 21 ,  {-459.03067075 }} ,
				{ 22 ,  {-422.390294 }} ,
				{ 28 ,  {-182.68535868 }} ,
				{ 30 ,  {-223.26828856 }} ,
				{ 31 ,  {-251.2683419 }} ,
				{ 34 ,  {-33.10367735 }} ,
				{ 36 ,  {-130.20856672 }} ,
				{ 38 ,  {-181.51172981 }} ,
				{ 39 ,  {-168.02760852 }} ,
				{ 41 ,  {-1.77890863 }} ,
				{ 43 ,  {-97.81389434 }} ,
				{ 44 ,  {-49.96946031 }} ,
				{ 46 ,  {37.34665341 }} ,
				{ 47 ,  {-9.61795807 }} ,
				{ 52 ,  {-20.2700101 }} ,
				{ 53 ,  {-6.19072274 }} ,
				{ 54 ,  {11.97984848 }} ,
				{ 56 ,  {44.29871811 }} ,
				{ 57 ,  {58.89206445 }} ,
				{ 58 ,  {-154.40083699 }} ,
				{ 62 ,  {133.87071389 }} ,
				{ 63 ,  {58.56592202 }} ,
				{ 66 ,  {320.68265233 }} ,
				{ 67 ,  {290.7091541 }} ,
				{ 68 ,  {479.70721604 }} ,
				{ 73 ,  {-8.54151458 }} ,
				{ 74 ,  {-20.42352874 }} ,
				{ 75 ,  {-33.33701473 }} ,
				{ 76 ,  {23.51174878 }} ,
				{ 78 ,  {116.88919618 }} ,
				{ 79 ,  {156.7480822 }} ,
				{ 83 ,  {8.92365624 }} ,
				{ 84 ,  {38.71263785 }} ,
				{ 85 ,  {113.44087953 }} ,
				{ 89 ,  {144.42445426 }} ,
				{ 90 ,  {191.55215494 }} ,
				{ 92 ,  {235.32017089 }} ,
				{ 94 ,  {259.87552026 }} ,
				{ 95 ,  {250.1827601 }} ,
				{ 98 ,  {351.37130796 }} ,
				{ 99 ,  {349.42168234 }} ,
				{ 100 ,  {310.60889078 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.7259149551391602) ? ( (Feature_5 <= -0.6670668423175812) ? ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_5 <= -1.230453073978424) ? ( (Feature_2 <= -0.5942522082477808) ? ( 5 ) : ( (Feature_1 <= -1.2652337551116943) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_4 <= -0.6978431642055511) ? ( (Feature_8 <= 0.923434317111969) ? ( 11 ) : ( 12 ) ) : ( (Feature_9 <= 0.9145673215389252) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_0 <= -0.3561193495988846) ? ( (Feature_6 <= -0.20008834823966026) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= -1.043316662311554) ? ( 21 ) : ( 22 ) ) ) ) : ( (Feature_8 <= -0.10979260504245758) ? ( (Feature_1 <= 0.5416697859764099) ? ( (Feature_2 <= 0.42820243537425995) ? ( (Feature_4 <= -1.0482117533683777) ? ( (Feature_6 <= -0.2890327125787735) ? ( 28 ) : ( (Feature_8 <= -0.4182208776473999) ? ( 30 ) : ( 31 ) ) ) : ( (Feature_8 <= -0.9606086015701294) ? ( (Feature_1 <= -0.8817030489444733) ? ( 34 ) : ( (Feature_4 <= -0.5625168085098267) ? ( 36 ) : ( (Feature_1 <= -0.597698912024498) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_8 <= -0.6089219897985458) ? ( 41 ) : ( (Feature_3 <= 0.20188001543283463) ? ( 43 ) : ( 44 ) ) ) ) ) : ( (Feature_5 <= 0.42079249024391174) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_2 <= 0.2954411953687668) ? ( (Feature_0 <= 0.37751391530036926) ? ( (Feature_6 <= 0.5092261880636215) ? ( (Feature_7 <= 0.6696974784135818) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (Feature_8 <= -1.1223411113023758) ? ( 56 ) : ( 57 ) ) ) : ( 58 ) ) ) : ( (Feature_5 <= 0.6741634905338287) ? ( (Feature_2 <= 0.33050215244293213) ? ( (Feature_7 <= -0.6343849301338196) ? ( 62 ) : ( 63 ) ) : ( (Feature_2 <= 0.6101390421390533) ? ( (Feature_8 <= 1.5662150382995605) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (Feature_9 <= 0.7737645208835602) ? ( (Feature_8 <= 1.2251691222190857) ? ( (Feature_0 <= 0.5400153195951134) ? ( (Feature_2 <= -0.1929096281528473) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) : ( 76 ) ) : ( (Feature_1 <= 0.07952623069286346) ? ( 78 ) : ( 79 ) ) ) ) ) ) : ( (Feature_9 <= -0.1555289514362812) ? ( (Feature_4 <= 1.1771820485591888) ? ( (Feature_5 <= 1.2155470848083496) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( (Feature_4 <= 0.3107970803976059) ? ( (Feature_9 <= 0.4701662063598633) ? ( (Feature_2 <= 1.5914238691329956) ? ( 89 ) : ( 90 ) ) : ( (Feature_9 <= 0.6075871884822845) ? ( 92 ) : ( (Feature_9 <= 1.0426704585552216) ? ( 94 ) : ( 95 ) ) ) ) : ( (Feature_6 <= 0.12088111694902182) ? ( (Feature_0 <= 0.1416269838809967) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_13
	

	namespace EXT_SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-186.24037603 }} ,
				{ 5 ,  {-101.20974879 }} ,
				{ 10 ,  {-284.89041043 }} ,
				{ 11 ,  {-268.19043239 }} ,
				{ 13 ,  {-298.79907559 }} ,
				{ 14 ,  {-305.67509721 }} ,
				{ 15 ,  {-230.73613628 }} ,
				{ 16 ,  {-351.38429309 }} ,
				{ 19 ,  {-53.5585581 }} ,
				{ 20 ,  {-20.2700101 }} ,
				{ 21 ,  {-103.03861457 }} ,
				{ 28 ,  {-182.68535868 }} ,
				{ 29 ,  {-182.33200566 }} ,
				{ 31 ,  {-154.40083699 }} ,
				{ 32 ,  {-140.83123535 }} ,
				{ 33 ,  {-251.2683419 }} ,
				{ 35 ,  {44.29871811 }} ,
				{ 37 ,  {-130.20856672 }} ,
				{ 38 ,  {-49.96946031 }} ,
				{ 40 ,  {-223.26828856 }} ,
				{ 45 ,  {38.71263785 }} ,
				{ 46 ,  {37.34665341 }} ,
				{ 47 ,  {58.89206445 }} ,
				{ 50 ,  {3.07608881 }} ,
				{ 51 ,  {26.98702516 }} ,
				{ 54 ,  {-33.10367735 }} ,
				{ 55 ,  {-27.42654029 }} ,
				{ 57 ,  {-6.19072274 }} ,
				{ 58 ,  {-9.61795807 }} ,
				{ 60 ,  {8.92365624 }} ,
				{ 62 ,  {144.42445426 }} ,
				{ 63 ,  {156.85798347 }} ,
				{ 69 ,  {23.51174878 }} ,
				{ 70 ,  {11.97984848 }} ,
				{ 72 ,  {60.83005802 }} ,
				{ 73 ,  {62.64480581 }} ,
				{ 74 ,  {116.88919618 }} ,
				{ 78 ,  {250.1827601 }} ,
				{ 79 ,  {191.55215494 }} ,
				{ 81 ,  {113.44087953 }} ,
				{ 82 ,  {131.03680508 }} ,
				{ 85 ,  {133.87071389 }} ,
				{ 86 ,  {156.7480822 }} ,
				{ 88 ,  {248.55956548 }} ,
				{ 90 ,  {360.61572443 }} ,
				{ 92 ,  {310.60889078 }} ,
				{ 94 ,  {320.68265233 }} ,
				{ 95 ,  {316.51213779 }} ,
				{ 97 ,  {243.63801062 }} ,
				{ 99 ,  {393.26109279 }} ,
				{ 101 ,  {447.69098355 }} ,
				{ 102 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.5290045142173767) ? ( (Feature_1 <= -0.19018520135432482) ? ( (Feature_0 <= -1.2196583151817322) ? ( (Feature_5 <= -0.9956261813640594) ? ( 4 ) : ( 5 ) ) : ( (Feature_9 <= 1.2423206567764282) ? ( (Feature_4 <= 1.4663349986076355) ? ( (Feature_8 <= -0.8642420060932636) ? ( (Feature_5 <= -1.0950707495212555) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 0.19170069694519043) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) : ( 16 ) ) ) : ( (Feature_9 <= 0.6392985433340073) ? ( (Feature_2 <= -0.6180337965488434) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) : ( (Feature_8 <= -0.1578926146030426) ? ( (Feature_6 <= -0.21131692826747894) ? ( (Feature_0 <= 0.899311363697052) ? ( (Feature_5 <= 1.0876458585262299) ? ( (Feature_2 <= -0.4218302760273218) ? ( (Feature_1 <= -0.2325815185904503) ? ( 28 ) : ( 29 ) ) : ( (Feature_0 <= -0.22943449020385742) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (Feature_8 <= -1.4549728035926819) ? ( 35 ) : ( (Feature_1 <= 0.26806823164224625) ? ( 37 ) : ( 38 ) ) ) ) : ( (Feature_2 <= -0.15303488820791245) ? ( 40 ) : ( (Feature_2 <= 1.062130093574524) ? ( (Feature_9 <= -0.03845733031630516) ? ( (Feature_4 <= 1.1635724008083344) ? ( (Feature_6 <= 0.7267444394528866) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (Feature_8 <= -1.7109586596488953) ? ( (Feature_2 <= 0.3109996020793915) ? ( 50 ) : ( 51 ) ) : ( (Feature_7 <= 0.8392987549304962) ? ( (Feature_2 <= 0.48750030994415283) ? ( 54 ) : ( 55 ) ) : ( (Feature_9 <= 0.580042153596878) ? ( 57 ) : ( 58 ) ) ) ) ) : ( (Feature_4 <= -1.0453191101551056) ? ( 60 ) : ( (Feature_2 <= 1.4275000095367432) ? ( 62 ) : ( 63 ) ) ) ) ) ) : ( (Feature_0 <= 1.1141976118087769) ? ( (Feature_3 <= -0.1810198426246643) ? ( (Feature_9 <= 1.095573398284614) ? ( (Feature_7 <= -0.787539467215538) ? ( (Feature_1 <= 0.08340618014335632) ? ( 69 ) : ( 70 ) ) : ( (Feature_0 <= -1.090991884469986) ? ( 72 ) : ( 73 ) ) ) : ( 74 ) ) : ( (Feature_1 <= -0.3568589687347412) ? ( (Feature_4 <= 0.1667964607477188) ? ( (Feature_8 <= -0.03347993083298206) ? ( 78 ) : ( 79 ) ) : ( (Feature_5 <= 0.4289702922105789) ? ( 81 ) : ( 82 ) ) ) : ( (Feature_7 <= -0.7332964241504669) ? ( (Feature_5 <= 1.04837616533041) ? ( 85 ) : ( 86 ) ) : ( (Feature_3 <= 0.3905295953154564) ? ( 88 ) : ( (Feature_4 <= -0.14289399981498718) ? ( 90 ) : ( (Feature_3 <= 0.6575542986392975) ? ( 92 ) : ( (Feature_2 <= 1.4179983884096146) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) : ( (Feature_2 <= -0.8668126612901688) ? ( 97 ) : ( (Feature_2 <= 0.17837287485599518) ? ( 99 ) : ( (Feature_4 <= 1.2674155533313751) ? ( 101 ) : ( 102 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_14
	

	namespace EXT_SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-351.38429309 }} ,
				{ 6 ,  {-298.79907559 }} ,
				{ 7 ,  {-459.03067075 }} ,
				{ 11 ,  {-210.3549175 }} ,
				{ 12 ,  {-230.73613628 }} ,
				{ 14 ,  {-284.89041043 }} ,
				{ 15 ,  {-268.19043239 }} ,
				{ 16 ,  {-101.20974879 }} ,
				{ 20 ,  {-20.2700101 }} ,
				{ 21 ,  {-49.96946031 }} ,
				{ 23 ,  {-165.64587305 }} ,
				{ 25 ,  {-103.03861457 }} ,
				{ 26 ,  {-130.20856672 }} ,
				{ 28 ,  {325.07388162 }} ,
				{ 30 ,  {235.32017089 }} ,
				{ 31 ,  {228.58868552 }} ,
				{ 38 ,  {-97.81389434 }} ,
				{ 39 ,  {-33.10367735 }} ,
				{ 42 ,  {-181.51172981 }} ,
				{ 43 ,  {-168.02760852 }} ,
				{ 44 ,  {-154.40083699 }} ,
				{ 47 ,  {-32.37006064 }} ,
				{ 48 ,  {-8.54151458 }} ,
				{ 50 ,  {60.83005802 }} ,
				{ 53 ,  {11.97984848 }} ,
				{ 54 ,  {23.51174878 }} ,
				{ 55 ,  {-20.42352874 }} ,
				{ 59 ,  {26.98702516 }} ,
				{ 60 ,  {44.29871811 }} ,
				{ 61 ,  {-1.77890863 }} ,
				{ 63 ,  {116.88919618 }} ,
				{ 64 ,  {156.7480822 }} ,
				{ 67 ,  {58.56592202 }} ,
				{ 68 ,  {-9.61795807 }} ,
				{ 71 ,  {198.97164294 }} ,
				{ 73 ,  {243.63801062 }} ,
				{ 74 ,  {239.63425512 }} ,
				{ 76 ,  {320.68265233 }} ,
				{ 77 ,  {360.61572443 }} ,
				{ 81 ,  {8.92365624 }} ,
				{ 82 ,  {-27.42654029 }} ,
				{ 84 ,  {156.85798347 }} ,
				{ 85 ,  {144.42445426 }} ,
				{ 88 ,  {113.44087953 }} ,
				{ 91 ,  {277.98128451 }} ,
				{ 93 ,  {248.55956548 }} ,
				{ 94 ,  {250.1827601 }} ,
				{ 96 ,  {310.60889078 }} ,
				{ 97 ,  {316.51213779 }} ,
				{ 99 ,  {479.70721604 }} ,
				{ 100 ,  {447.69098355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.3989693820476532) ? ( (Feature_1 <= -0.265030637383461) ? ( (Feature_7 <= -0.2537200227379799) ? ( (Feature_8 <= 0.12082089111208916) ? ( (Feature_6 <= -0.20008834823966026) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_8 <= 0.9293771684169769) ? ( (Feature_7 <= 0.4286266714334488) ? ( (Feature_4 <= 1.599926471710205) ? ( 11 ) : ( 12 ) ) : ( (Feature_6 <= 0.2370949387550354) ? ( 14 ) : ( 15 ) ) ) : ( 16 ) ) ) : ( (Feature_2 <= 0.3587885946035385) ? ( (Feature_9 <= 0.29193983785808086) ? ( (Feature_4 <= 0.9386435151100159) ? ( 20 ) : ( 21 ) ) : ( (Feature_3 <= -0.3541240096092224) ? ( 23 ) : ( (Feature_7 <= 0.16352881863713264) ? ( 25 ) : ( 26 ) ) ) ) : ( (Feature_6 <= -0.8945183753967285) ? ( 28 ) : ( (Feature_7 <= 0.8963373899459839) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.582874596118927) ? ( (Feature_7 <= 0.6698598563671112) ? ( (Feature_9 <= 0.8011433482170105) ? ( (Feature_8 <= -0.18452340364456177) ? ( (Feature_1 <= -0.8817030489444733) ? ( (Feature_6 <= -1.0024272799491882) ? ( 38 ) : ( 39 ) ) : ( (Feature_1 <= 0.2346850484609604) ? ( (Feature_9 <= 0.08936136960983276) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) : ( (Feature_2 <= -0.6171265840530396) ? ( (Feature_8 <= 0.09053697809576988) ? ( 47 ) : ( 48 ) ) : ( (Feature_5 <= 0.60373355448246) ? ( 50 ) : ( (Feature_2 <= 0.20703700929880142) ? ( (Feature_0 <= -0.7089108675718307) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) ) : ( (Feature_8 <= -0.5040033832192421) ? ( (Feature_6 <= 1.5940252244472504) ? ( (Feature_0 <= 0.7507735937833786) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( (Feature_6 <= -0.7507413513958454) ? ( 63 ) : ( 64 ) ) ) ) : ( (Feature_4 <= -1.0602150559425354) ? ( (Feature_2 <= -0.8151137977838516) ? ( 67 ) : ( 68 ) ) : ( (Feature_3 <= 0.9410157799720764) ? ( (Feature_9 <= -0.2846807069145143) ? ( 71 ) : ( (Feature_2 <= -0.8130484223365784) ? ( 73 ) : ( 74 ) ) ) : ( (Feature_0 <= -0.14655745029449463) ? ( 76 ) : ( 77 ) ) ) ) ) : ( (Feature_4 <= -0.18378066644072533) ? ( (Feature_1 <= -0.7038813307881355) ? ( (Feature_4 <= -0.9856324195861816) ? ( 81 ) : ( 82 ) ) : ( (Feature_8 <= -1.5018147230148315) ? ( 84 ) : ( 85 ) ) ) : ( (Feature_0 <= 1.4841864109039307) ? ( (Feature_9 <= -0.7493974342942238) ? ( 88 ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_8 <= -0.2336205318570137) ? ( 91 ) : ( (Feature_9 <= 0.6451010331511497) ? ( 93 ) : ( 94 ) ) ) : ( (Feature_4 <= 0.5448513627052307) ? ( 96 ) : ( 97 ) ) ) ) : ( (Feature_2 <= 1.356550008058548) ? ( 99 ) : ( 100 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			EXT_SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			EXT_SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
