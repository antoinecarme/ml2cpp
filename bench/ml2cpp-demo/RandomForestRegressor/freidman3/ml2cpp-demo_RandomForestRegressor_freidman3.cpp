// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_freidman3.exe ml2cpp-demo_RandomForestRegressor_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace EXT_SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.48486692 }} ,
				{ 4 ,  {0.38342473 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 9 ,  {1.55432885 }} ,
				{ 11 ,  {1.40929984 }} ,
				{ 14 ,  {1.36871758 }} ,
				{ 15 ,  {1.36789414 }} ,
				{ 17 ,  {1.3413442 }} ,
				{ 18 ,  {1.35009011 }} ,
				{ 20 ,  {0.70507147 }} ,
				{ 24 ,  {1.11561476 }} ,
				{ 25 ,  {1.081892 }} ,
				{ 28 ,  {1.1968265 }} ,
				{ 29 ,  {1.1082904 }} ,
				{ 30 ,  {1.34984299 }} ,
				{ 32 ,  {1.31432562 }} ,
				{ 33 ,  {1.34636148 }} ,
				{ 37 ,  {1.16100714 }} ,
				{ 38 ,  {1.14405643 }} ,
				{ 39 ,  {1.27887759 }} ,
				{ 43 ,  {1.56967904 }} ,
				{ 44 ,  {1.46088901 }} ,
				{ 47 ,  {1.27948723 }} ,
				{ 48 ,  {1.26722342 }} ,
				{ 49 ,  {1.38449452 }} ,
				{ 55 ,  {1.57058399 }} ,
				{ 57 ,  {1.56427232 }} ,
				{ 58 ,  {1.56460912 }} ,
				{ 59 ,  {1.55610197 }} ,
				{ 60 ,  {1.54561918 }} ,
				{ 63 ,  {1.49656192 }} ,
				{ 64 ,  {1.48725785 }} ,
				{ 69 ,  {1.53095005 }} ,
				{ 71 ,  {1.53405928 }} ,
				{ 72 ,  {1.5352537 }} ,
				{ 73 ,  {1.52485398 }} ,
				{ 75 ,  {1.5278957 }} ,
				{ 77 ,  {1.52169424 }} ,
				{ 78 ,  {1.52208363 }} ,
				{ 81 ,  {1.54404651 }} ,
				{ 82 ,  {1.54375025 }} ,
				{ 83 ,  {1.53740023 }} ,
				{ 86 ,  {1.46764868 }} ,
				{ 90 ,  {1.48471099 }} ,
				{ 91 ,  {1.48605726 }} ,
				{ 93 ,  {1.49496626 }} ,
				{ 94 ,  {1.49292179 }} ,
				{ 95 ,  {1.47832813 }} ,
				{ 97 ,  {1.50320739 }} ,
				{ 98 ,  {1.51266196 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_1 <= 1445.2074584960938) ? ( (Feature_3 <= 5.679425954818726) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_2 <= 0.42248982191085815) ? ( (Feature_0 <= 48.903419494628906) ? ( (Feature_0 <= 8.738058090209961) ? ( 9 ) : ( (Feature_0 <= 14.894282341003418) ? ( 11 ) : ( (Feature_1 <= 1173.6154479980469) ? ( (Feature_0 <= 33.08542823791504) ? ( 14 ) : ( 15 ) ) : ( (Feature_3 <= 5.302112340927124) ? ( 17 ) : ( 18 ) ) ) ) ) : ( (Feature_2 <= 0.1361902840435505) ? ( 20 ) : ( (Feature_1 <= 1098.1847229003906) ? ( (Feature_3 <= 6.354635715484619) ? ( (Feature_1 <= 617.0802764892578) ? ( 24 ) : ( 25 ) ) : ( (Feature_2 <= 0.2920553833246231) ? ( (Feature_0 <= 65.30802154541016) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) ) : ( (Feature_2 <= 0.20947152376174927) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (Feature_1 <= 255.7740478515625) ? ( (Feature_2 <= 0.8503361940383911) ? ( (Feature_0 <= 57.371925354003906) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (Feature_1 <= 519.7247924804688) ? ( (Feature_0 <= 48.34617042541504) ? ( (Feature_2 <= 0.7472008019685745) ? ( 43 ) : ( 44 ) ) : ( (Feature_3 <= 8.407146692276001) ? ( (Feature_2 <= 0.5524007081985474) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( (Feature_0 <= 48.62996292114258) ? ( (Feature_0 <= 20.67043399810791) ? ( (Feature_1 <= 1433.7955322265625) ? ( (Feature_0 <= 7.932988882064819) ? ( (Feature_1 <= 823.8902893066406) ? ( 55 ) : ( (Feature_3 <= 7.774684190750122) ? ( 57 ) : ( 58 ) ) ) : ( 59 ) ) : ( 60 ) ) : ( (Feature_1 <= 765.1818237304688) ? ( (Feature_3 <= 7.402557969093323) ? ( 63 ) : ( 64 ) ) : ( (Feature_1 <= 1366.1968383789062) ? ( (Feature_1 <= 1110.9609985351562) ? ( (Feature_3 <= 8.815837860107422) ? ( (Feature_3 <= 2.8088678121566772) ? ( 69 ) : ( (Feature_1 <= 918.6759948730469) ? ( 71 ) : ( 72 ) ) ) : ( 73 ) ) : ( (Feature_0 <= 34.610318183898926) ? ( 75 ) : ( (Feature_1 <= 1186.8003540039062) ? ( 77 ) : ( 78 ) ) ) ) : ( (Feature_0 <= 42.05487632751465) ? ( (Feature_3 <= 9.757994651794434) ? ( 81 ) : ( 82 ) ) : ( 83 ) ) ) ) ) : ( (Feature_1 <= 1431.4244995117188) ? ( (Feature_0 <= 51.891971588134766) ? ( 86 ) : ( (Feature_3 <= 10.541810512542725) ? ( (Feature_2 <= 0.7287198305130005) ? ( (Feature_0 <= 61.12663650512695) ? ( 90 ) : ( 91 ) ) : ( (Feature_3 <= 9.797772884368896) ? ( 93 ) : ( 94 ) ) ) : ( 95 ) ) ) : ( (Feature_1 <= 1558.752685546875) ? ( 97 ) : ( 98 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_0
	

	namespace EXT_SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 3 ,  {0.38342473 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 13 ,  {1.14091625 }} ,
				{ 14 ,  {1.1968265 }} ,
				{ 15 ,  {1.36871758 }} ,
				{ 19 ,  {1.10634412 }} ,
				{ 20 ,  {1.1082904 }} ,
				{ 21 ,  {1.081892 }} ,
				{ 22 ,  {1.15778604 }} ,
				{ 24 ,  {1.40929984 }} ,
				{ 25 ,  {1.34636148 }} ,
				{ 30 ,  {1.41074394 }} ,
				{ 31 ,  {1.45186094 }} ,
				{ 32 ,  {1.53596709 }} ,
				{ 37 ,  {1.16100714 }} ,
				{ 38 ,  {1.14405643 }} ,
				{ 39 ,  {1.11561476 }} ,
				{ 42 ,  {1.27887759 }} ,
				{ 43 ,  {1.27948723 }} ,
				{ 44 ,  {1.26722342 }} ,
				{ 45 ,  {1.46088901 }} ,
				{ 48 ,  {1.42518022 }} ,
				{ 50 ,  {1.36789414 }} ,
				{ 51 ,  {1.34984299 }} ,
				{ 54 ,  {1.49656192 }} ,
				{ 57 ,  {1.56460912 }} ,
				{ 58 ,  {1.56232281 }} ,
				{ 62 ,  {1.54158957 }} ,
				{ 64 ,  {1.53405928 }} ,
				{ 65 ,  {1.53181558 }} ,
				{ 69 ,  {1.52208363 }} ,
				{ 70 ,  {1.52169424 }} ,
				{ 71 ,  {1.52129772 }} ,
				{ 72 ,  {1.52485398 }} ,
				{ 74 ,  {1.53740023 }} ,
				{ 76 ,  {1.54561918 }} ,
				{ 77 ,  {1.54404651 }} ,
				{ 81 ,  {1.46424873 }} ,
				{ 82 ,  {1.46764868 }} ,
				{ 84 ,  {1.48605726 }} ,
				{ 85 ,  {1.47832813 }} ,
				{ 87 ,  {1.51266196 }} ,
				{ 90 ,  {1.50282351 }} ,
				{ 92 ,  {1.49496626 }} ,
				{ 93 ,  {1.49322332 }} ,
				{ 94 ,  {1.50990015 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.02901188051328063) ? ( (Feature_0 <= 26.660706520080566) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 505.7232666015625) ? ( (Feature_0 <= 46.1015510559082) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 1098.1847229003906) ? ( (Feature_0 <= 65.30802154541016) ? ( (Feature_1 <= 840.4352722167969) ? ( (Feature_0 <= 38.84438419342041) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( (Feature_2 <= 0.27144117653369904) ? ( (Feature_0 <= 87.34974670410156) ? ( (Feature_2 <= 0.22980211675167084) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) : ( 22 ) ) ) : ( (Feature_0 <= 40.52076721191406) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_1 <= 519.7247924804688) ? ( (Feature_0 <= 29.003992080688477) ? ( (Feature_3 <= 9.712677955627441) ? ( (Feature_3 <= 5.738123416900635) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (Feature_2 <= 0.9660912156105042) ? ( (Feature_1 <= 245.38916015625) ? ( (Feature_1 <= 231.9021987915039) ? ( (Feature_2 <= 0.7065557539463043) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (Feature_3 <= 6.307325124740601) ? ( (Feature_1 <= 381.1418914794922) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) : ( 45 ) ) ) : ( (Feature_2 <= 0.38769569993019104) ? ( (Feature_0 <= 45.62005615234375) ? ( 48 ) : ( (Feature_0 <= 61.93379783630371) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_0 <= 50.357994079589844) ? ( (Feature_1 <= 686.4284057617188) ? ( 54 ) : ( (Feature_0 <= 12.852156639099121) ? ( (Feature_1 <= 1364.9163818359375) ? ( 57 ) : ( 58 ) ) : ( (Feature_1 <= 1472.6890869140625) ? ( (Feature_0 <= 27.434873580932617) ? ( (Feature_2 <= 0.5803560316562653) ? ( 62 ) : ( (Feature_0 <= 23.65783977508545) ? ( 64 ) : ( 65 ) ) ) : ( (Feature_3 <= 8.160770416259766) ? ( (Feature_0 <= 47.33743667602539) ? ( (Feature_3 <= 4.352863371372223) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) : ( 72 ) ) ) : ( (Feature_1 <= 1643.0460205078125) ? ( 74 ) : ( (Feature_2 <= 0.5624333471059799) ? ( 76 ) : ( 77 ) ) ) ) ) ) : ( (Feature_1 <= 1031.63671875) ? ( (Feature_0 <= 61.90567398071289) ? ( (Feature_1 <= 844.6205444335938) ? ( 81 ) : ( 82 ) ) : ( (Feature_3 <= 10.541810512542725) ? ( 84 ) : ( 85 ) ) ) : ( (Feature_0 <= 63.41266059875488) ? ( 87 ) : ( (Feature_2 <= 0.9793506264686584) ? ( (Feature_0 <= 75.23531341552734) ? ( 90 ) : ( (Feature_2 <= 0.9103804528713226) ? ( 92 ) : ( 93 ) ) ) : ( 94 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_1
	

	namespace EXT_SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38342473 }} ,
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.70507147 }} ,
				{ 9 ,  {1.53596709 }} ,
				{ 12 ,  {1.46088901 }} ,
				{ 13 ,  {1.41074394 }} ,
				{ 14 ,  {1.16100714 }} ,
				{ 17 ,  {1.11561476 }} ,
				{ 18 ,  {1.14405643 }} ,
				{ 20 ,  {1.38449452 }} ,
				{ 22 ,  {1.27887759 }} ,
				{ 23 ,  {1.26722342 }} ,
				{ 27 ,  {1.34984299 }} ,
				{ 28 ,  {1.53671123 }} ,
				{ 30 ,  {1.081892 }} ,
				{ 31 ,  {1.10634412 }} ,
				{ 35 ,  {1.56427232 }} ,
				{ 37 ,  {1.57058399 }} ,
				{ 38 ,  {1.56848669 }} ,
				{ 41 ,  {1.49656192 }} ,
				{ 45 ,  {1.5352537 }} ,
				{ 47 ,  {1.53095005 }} ,
				{ 48 ,  {1.53256929 }} ,
				{ 49 ,  {1.5278957 }} ,
				{ 52 ,  {1.52208363 }} ,
				{ 53 ,  {1.52129772 }} ,
				{ 54 ,  {1.50778907 }} ,
				{ 56 ,  {1.56232281 }} ,
				{ 58 ,  {1.52787455 }} ,
				{ 61 ,  {1.54561918 }} ,
				{ 62 ,  {1.54158957 }} ,
				{ 64 ,  {1.52485398 }} ,
				{ 66 ,  {1.53405928 }} ,
				{ 67 ,  {1.53740023 }} ,
				{ 69 ,  {1.27948723 }} ,
				{ 73 ,  {1.46424873 }} ,
				{ 74 ,  {1.46708262 }} ,
				{ 76 ,  {1.49292179 }} ,
				{ 77 ,  {1.47832813 }} ,
				{ 80 ,  {1.47193903 }} ,
				{ 81 ,  {1.48471099 }} ,
				{ 85 ,  {1.50320739 }} ,
				{ 86 ,  {1.50282351 }} ,
				{ 88 ,  {1.49496626 }} ,
				{ 89 ,  {1.49322332 }} ,
				{ 90 ,  {1.50990015 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.14378926530480385) ? ( (Feature_2 <= 0.07157002203166485) ? ( (Feature_0 <= 39.70485877990723) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_1 <= 450.96368408203125) ? ( (Feature_0 <= 44.8392276763916) ? ( (Feature_1 <= 131.27752685546875) ? ( 9 ) : ( (Feature_3 <= 2.021695613861084) ? ( (Feature_3 <= 1.7604583501815796) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_1 <= 245.38916015625) ? ( (Feature_3 <= 6.365326881408691) ? ( 17 ) : ( 18 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( 20 ) : ( (Feature_0 <= 70.96318054199219) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_0 <= 76.98457717895508) ? ( (Feature_3 <= 8.606595039367676) ? ( 27 ) : ( 28 ) ) : ( (Feature_2 <= 0.20137712359428406) ? ( 30 ) : ( 31 ) ) ) : ( (Feature_0 <= 50.59944534301758) ? ( (Feature_0 <= 7.656977891921997) ? ( (Feature_3 <= 6.9350950717926025) ? ( 35 ) : ( (Feature_1 <= 691.4309997558594) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_3 <= 5.405214548110962) ? ( (Feature_0 <= 26.161124229431152) ? ( 41 ) : ( (Feature_0 <= 43.15521430969238) ? ( (Feature_3 <= 4.313623309135437) ? ( (Feature_0 <= 34.552621841430664) ? ( 45 ) : ( (Feature_3 <= 3.305150866508484) ? ( 47 ) : ( 48 ) ) ) : ( 49 ) ) : ( (Feature_3 <= 2.6998627185821533) ? ( (Feature_1 <= 1285.177001953125) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) ) : ( (Feature_3 <= 6.679344415664673) ? ( 56 ) : ( (Feature_2 <= 0.4563581645488739) ? ( 58 ) : ( (Feature_2 <= 0.6139316260814667) ? ( (Feature_2 <= 0.5333094447851181) ? ( 61 ) : ( 62 ) ) : ( (Feature_2 <= 0.6584039926528931) ? ( 64 ) : ( (Feature_2 <= 0.7457913458347321) ? ( 66 ) : ( 67 ) ) ) ) ) ) ) ) : ( (Feature_1 <= 662.0272216796875) ? ( 69 ) : ( (Feature_1 <= 988.9305114746094) ? ( (Feature_1 <= 890.76611328125) ? ( (Feature_2 <= 0.78250452876091) ? ( 73 ) : ( 74 ) ) : ( (Feature_3 <= 10.46235704421997) ? ( 76 ) : ( 77 ) ) ) : ( (Feature_2 <= 0.5975654423236847) ? ( (Feature_2 <= 0.5079276710748672) ? ( 80 ) : ( 81 ) ) : ( (Feature_2 <= 0.9793506264686584) ? ( (Feature_0 <= 75.23531341552734) ? ( (Feature_0 <= 66.5127944946289) ? ( 85 ) : ( 86 ) ) : ( (Feature_2 <= 0.9103804528713226) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_2
	

	namespace EXT_SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 4 ,  {0.38342473 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 10 ,  {1.14091625 }} ,
				{ 12 ,  {1.40929984 }} ,
				{ 13 ,  {1.35009011 }} ,
				{ 18 ,  {1.53596709 }} ,
				{ 19 ,  {1.45186094 }} ,
				{ 22 ,  {1.16100714 }} ,
				{ 23 ,  {1.11561476 }} ,
				{ 24 ,  {1.27887759 }} ,
				{ 27 ,  {1.31432562 }} ,
				{ 28 ,  {1.34636148 }} ,
				{ 31 ,  {1.41074394 }} ,
				{ 35 ,  {1.55432885 }} ,
				{ 36 ,  {1.52787455 }} ,
				{ 38 ,  {1.56232281 }} ,
				{ 41 ,  {1.56967904 }} ,
				{ 42 ,  {1.57058399 }} ,
				{ 43 ,  {1.56848669 }} ,
				{ 46 ,  {1.48725785 }} ,
				{ 47 ,  {1.49656192 }} ,
				{ 50 ,  {1.52485398 }} ,
				{ 51 ,  {1.53405928 }} ,
				{ 53 ,  {1.53256929 }} ,
				{ 55 ,  {1.54404651 }} ,
				{ 56 ,  {1.54375025 }} ,
				{ 60 ,  {1.38449452 }} ,
				{ 61 ,  {1.36789414 }} ,
				{ 62 ,  {1.46088901 }} ,
				{ 65 ,  {1.46764868 }} ,
				{ 68 ,  {1.49292179 }} ,
				{ 69 ,  {1.48605726 }} ,
				{ 70 ,  {1.47832813 }} ,
				{ 75 ,  {1.52129772 }} ,
				{ 76 ,  {1.52169424 }} ,
				{ 77 ,  {1.53095005 }} ,
				{ 79 ,  {1.50778907 }} ,
				{ 80 ,  {1.51266196 }} ,
				{ 82 ,  {1.50320739 }} ,
				{ 83 ,  {1.48471099 }} ,
				{ 87 ,  {1.081892 }} ,
				{ 88 ,  {1.02748435 }} ,
				{ 89 ,  {1.15778604 }} ,
				{ 91 ,  {1.27948723 }} ,
				{ 92 ,  {1.49496626 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_3 <= 5.149595379829407) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 516.9712219238281) ? ( (Feature_2 <= 0.10221557691693306) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 1042.3444213867188) ? ( 10 ) : ( (Feature_3 <= 4.160592079162598) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (Feature_0 <= 76.04357528686523) ? ( (Feature_1 <= 255.7740478515625) ? ( (Feature_0 <= 26.78800344467163) ? ( (Feature_2 <= 0.5254106521606445) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.7917166650295258) ? ( (Feature_0 <= 43.824588775634766) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) : ( (Feature_2 <= 0.25813600420951843) ? ( (Feature_3 <= 4.860002517700195) ? ( 27 ) : ( 28 ) ) : ( (Feature_0 <= 39.751386642456055) ? ( (Feature_3 <= 2.029953122138977) ? ( 31 ) : ( (Feature_0 <= 15.311119556427002) ? ( (Feature_2 <= 0.46043506264686584) ? ( (Feature_3 <= 5.36810839176178) ? ( 35 ) : ( 36 ) ) : ( (Feature_3 <= 7.183250427246094) ? ( 38 ) : ( (Feature_0 <= 0.953716553747654) ? ( (Feature_1 <= 412.29981994628906) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) : ( (Feature_1 <= 765.1818237304688) ? ( (Feature_2 <= 0.6309767365455627) ? ( 46 ) : ( 47 ) ) : ( (Feature_1 <= 1213.47216796875) ? ( (Feature_2 <= 0.6584039926528931) ? ( 50 ) : ( 51 ) ) : ( (Feature_3 <= 6.190743088722229) ? ( 53 ) : ( (Feature_0 <= 33.70975208282471) ? ( 55 ) : ( 56 ) ) ) ) ) ) ) : ( (Feature_1 <= 820.8436584472656) ? ( (Feature_2 <= 0.9190835654735565) ? ( (Feature_1 <= 558.3694915771484) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) : ( (Feature_1 <= 1065.7364501953125) ? ( (Feature_0 <= 51.891971588134766) ? ( 65 ) : ( (Feature_0 <= 65.99805068969727) ? ( (Feature_3 <= 10.325467109680176) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) ) : ( (Feature_0 <= 57.11452674865723) ? ( (Feature_1 <= 1482.8294677734375) ? ( (Feature_2 <= 0.869676947593689) ? ( (Feature_3 <= 4.694496393203735) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( (Feature_2 <= 0.4911402612924576) ? ( 79 ) : ( 80 ) ) ) : ( (Feature_3 <= 2.4688795804977417) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) : ( (Feature_3 <= 4.276979923248291) ? ( (Feature_3 <= 2.7846378684043884) ? ( (Feature_0 <= 98.21026229858398) ? ( 87 ) : ( 88 ) ) : ( 89 ) ) : ( (Feature_0 <= 86.14800643920898) ? ( 91 ) : ( 92 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_3
	

	namespace EXT_SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.40929984 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 7 ,  {0.48486692 }} ,
				{ 9 ,  {0.37516757 }} ,
				{ 10 ,  {0.38342473 }} ,
				{ 12 ,  {1.36871758 }} ,
				{ 13 ,  {0.70507147 }} ,
				{ 17 ,  {1.53596709 }} ,
				{ 18 ,  {1.16100714 }} ,
				{ 20 ,  {1.3413442 }} ,
				{ 24 ,  {1.41074394 }} ,
				{ 25 ,  {1.46088901 }} ,
				{ 27 ,  {1.52762941 }} ,
				{ 28 ,  {1.52208363 }} ,
				{ 32 ,  {1.50778907 }} ,
				{ 33 ,  {1.47795145 }} ,
				{ 37 ,  {1.56967904 }} ,
				{ 39 ,  {1.56427232 }} ,
				{ 40 ,  {1.56460912 }} ,
				{ 41 ,  {1.55610197 }} ,
				{ 44 ,  {1.49656192 }} ,
				{ 45 ,  {1.49902739 }} ,
				{ 48 ,  {1.54561918 }} ,
				{ 49 ,  {1.54158957 }} ,
				{ 54 ,  {1.53405928 }} ,
				{ 55 ,  {1.5352537 }} ,
				{ 58 ,  {1.53181558 }} ,
				{ 59 ,  {1.53256929 }} ,
				{ 60 ,  {1.53095005 }} ,
				{ 61 ,  {1.52485398 }} ,
				{ 63 ,  {1.53740023 }} ,
				{ 64 ,  {1.54375025 }} ,
				{ 66 ,  {1.46424873 }} ,
				{ 68 ,  {1.4771264 }} ,
				{ 71 ,  {1.48471099 }} ,
				{ 72 ,  {1.49292179 }} ,
				{ 73 ,  {1.51266196 }} ,
				{ 77 ,  {1.02748435 }} ,
				{ 78 ,  {1.07654708 }} ,
				{ 82 ,  {1.1082904 }} ,
				{ 84 ,  {1.15778604 }} ,
				{ 85 ,  {1.14405643 }} ,
				{ 86 ,  {1.1968265 }} ,
				{ 87 ,  {1.27887759 }} ,
				{ 89 ,  {1.34636148 }} ,
				{ 92 ,  {1.50282351 }} ,
				{ 93 ,  {1.50990015 }} ,
				{ 94 ,  {1.47832813 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_3 <= 2.4321192502975464) ? ( 2 ) : ( (Feature_2 <= 0.07823304459452629) ? ( (Feature_2 <= 0.009662731783464551) ? ( 5 ) : ( (Feature_3 <= 5.679425954818726) ? ( 7 ) : ( (Feature_1 <= 809.5308074951172) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_0 <= 34.32356071472168) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_0 <= 61.53804397583008) ? ( (Feature_1 <= 200.30526733398438) ? ( (Feature_1 <= 131.27752685546875) ? ( 17 ) : ( 18 ) ) : ( (Feature_2 <= 0.19440099596977234) ? ( 20 ) : ( (Feature_3 <= 2.1947439908981323) ? ( (Feature_1 <= 705.4456024169922) ? ( (Feature_1 <= 319.2161407470703) ? ( 24 ) : ( 25 ) ) : ( (Feature_3 <= 1.4766400456428528) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_0 <= 46.78996658325195) ? ( (Feature_2 <= 0.42316998541355133) ? ( (Feature_3 <= 4.476046085357666) ? ( 32 ) : ( 33 ) ) : ( (Feature_0 <= 12.716658115386963) ? ( (Feature_0 <= 7.932988882064819) ? ( (Feature_0 <= 1.5249224677681923) ? ( 37 ) : ( (Feature_3 <= 7.774684190750122) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( (Feature_1 <= 712.6783142089844) ? ( (Feature_2 <= 0.7195742726325989) ? ( 44 ) : ( 45 ) ) : ( (Feature_0 <= 20.67043399810791) ? ( (Feature_3 <= 8.855112791061401) ? ( 48 ) : ( 49 ) ) : ( (Feature_3 <= 9.655254364013672) ? ( (Feature_3 <= 8.815837860107422) ? ( (Feature_1 <= 1044.5914306640625) ? ( (Feature_2 <= 0.8152517378330231) ? ( 54 ) : ( 55 ) ) : ( (Feature_2 <= 0.778732568025589) ? ( (Feature_3 <= 3.1646666526794434) ? ( 58 ) : ( 59 ) ) : ( 60 ) ) ) : ( 61 ) ) : ( (Feature_2 <= 0.9026165306568146) ? ( 63 ) : ( 64 ) ) ) ) ) ) ) : ( (Feature_1 <= 852.9207458496094) ? ( 66 ) : ( (Feature_2 <= 0.43931038677692413) ? ( 68 ) : ( (Feature_1 <= 1415.3006591796875) ? ( (Feature_2 <= 0.6654035449028015) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) ) ) ) ) ) ) : ( (Feature_1 <= 882.4816589355469) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_1 <= 256.30464935302734) ? ( 77 ) : ( 78 ) ) : ( (Feature_2 <= 0.8503361940383911) ? ( (Feature_1 <= 739.2130737304688) ? ( (Feature_0 <= 72.7166519165039) ? ( 82 ) : ( (Feature_2 <= 0.5340532064437866) ? ( 84 ) : ( 85 ) ) ) : ( 86 ) ) : ( 87 ) ) ) : ( (Feature_2 <= 0.5223792940378189) ? ( 89 ) : ( (Feature_3 <= 8.553114652633667) ? ( (Feature_0 <= 75.76903915405273) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_4
	

	namespace EXT_SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.14091625 }} ,
				{ 5 ,  {1.36871758 }} ,
				{ 6 ,  {1.40929984 }} ,
				{ 9 ,  {0.48486692 }} ,
				{ 11 ,  {0.38342473 }} ,
				{ 12 ,  {0.37516757 }} ,
				{ 14 ,  {0.70507147 }} ,
				{ 15 ,  {0.80791092 }} ,
				{ 20 ,  {1.53596709 }} ,
				{ 21 ,  {1.41074394 }} ,
				{ 23 ,  {1.11561476 }} ,
				{ 24 ,  {1.38449452 }} ,
				{ 26 ,  {1.31432562 }} ,
				{ 31 ,  {1.56460912 }} ,
				{ 32 ,  {1.56427232 }} ,
				{ 34 ,  {1.56848669 }} ,
				{ 35 ,  {1.57058399 }} ,
				{ 39 ,  {1.55610197 }} ,
				{ 40 ,  {1.56232281 }} ,
				{ 41 ,  {1.54561918 }} ,
				{ 43 ,  {1.52787455 }} ,
				{ 45 ,  {1.53405928 }} ,
				{ 46 ,  {1.53671123 }} ,
				{ 49 ,  {1.4771264 }} ,
				{ 50 ,  {1.47795145 }} ,
				{ 53 ,  {1.46088901 }} ,
				{ 55 ,  {1.46764868 }} ,
				{ 58 ,  {1.49656192 }} ,
				{ 59 ,  {1.49902739 }} ,
				{ 61 ,  {1.48725785 }} ,
				{ 62 ,  {1.49292179 }} ,
				{ 67 ,  {1.52208363 }} ,
				{ 69 ,  {1.50778907 }} ,
				{ 70 ,  {1.51266196 }} ,
				{ 73 ,  {1.52485398 }} ,
				{ 74 ,  {1.52169424 }} ,
				{ 75 ,  {1.53256929 }} ,
				{ 77 ,  {1.53095005 }} ,
				{ 79 ,  {1.54375025 }} ,
				{ 80 ,  {1.53740023 }} ,
				{ 82 ,  {1.50320739 }} ,
				{ 83 ,  {1.48605726 }} ,
				{ 88 ,  {1.34636148 }} ,
				{ 89 ,  {1.34984299 }} ,
				{ 90 ,  {1.26722342 }} ,
				{ 94 ,  {1.14405643 }} ,
				{ 95 ,  {1.15778604 }} ,
				{ 96 ,  {1.10634412 }} ,
				{ 98 ,  {1.081892 }} ,
				{ 99 ,  {1.02748435 }} ,
				{ 101 ,  {1.27887759 }} ,
				{ 104 ,  {1.49322332 }} ,
				{ 106 ,  {1.50282351 }} ,
				{ 107 ,  {1.50990015 }} ,
				{ 108 ,  {1.46708262 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_1 <= 730.0179748535156) ? ( 3 ) : ( (Feature_1 <= 1252.6717834472656) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_2 <= 0.07712984457612038) ? ( (Feature_3 <= 5.679425954818726) ? ( 9 ) : ( (Feature_3 <= 8.43302845954895) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_1 <= 423.75958251953125) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_0 <= 65.76683044433594) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_0 <= 34.57929039001465) ? ( (Feature_0 <= 10.630412340164185) ? ( 20 ) : ( 21 ) ) : ( (Feature_2 <= 0.6276147961616516) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 26 ) : ( (Feature_0 <= 23.030441284179688) ? ( (Feature_0 <= 7.428896188735962) ? ( (Feature_2 <= 0.8650400638580322) ? ( (Feature_0 <= 4.597705602645874) ? ( 31 ) : ( 32 ) ) : ( (Feature_2 <= 0.960829108953476) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_3 <= 8.353456020355225) ? ( (Feature_0 <= 15.2035231590271) ? ( (Feature_1 <= 1346.5750122070312) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( (Feature_1 <= 672.6180419921875) ? ( 43 ) : ( (Feature_1 <= 1008.0122375488281) ? ( 45 ) : ( 46 ) ) ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( (Feature_3 <= 5.249751329421997) ? ( 49 ) : ( 50 ) ) : ( (Feature_1 <= 922.06787109375) ? ( (Feature_3 <= 2.7379260063171387) ? ( 53 ) : ( (Feature_2 <= 0.5898985862731934) ? ( 55 ) : ( (Feature_3 <= 8.915960550308228) ? ( (Feature_3 <= 5.702386260032654) ? ( 58 ) : ( 59 ) ) : ( (Feature_2 <= 0.6789105236530304) ? ( 61 ) : ( 62 ) ) ) ) ) : ( (Feature_0 <= 57.488473892211914) ? ( (Feature_2 <= 0.7955629825592041) ? ( (Feature_3 <= 3.451445698738098) ? ( (Feature_3 <= 2.358229696750641) ? ( 67 ) : ( (Feature_0 <= 48.98343849182129) ? ( 69 ) : ( 70 ) ) ) : ( (Feature_1 <= 1415.4285278320312) ? ( (Feature_2 <= 0.7081756293773651) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) : ( (Feature_1 <= 1290.3574829101562) ? ( 77 ) : ( (Feature_1 <= 1553.7089233398438) ? ( 79 ) : ( 80 ) ) ) ) : ( (Feature_2 <= 0.6608817279338837) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) : ( (Feature_2 <= 0.8226335346698761) ? ( (Feature_0 <= 76.10906219482422) ? ( (Feature_3 <= 6.8319127559661865) ? ( (Feature_0 <= 72.42233276367188) ? ( 88 ) : ( 89 ) ) : ( 90 ) ) : ( (Feature_0 <= 91.95731735229492) ? ( (Feature_3 <= 8.168214797973633) ? ( (Feature_0 <= 81.97764587402344) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) : ( (Feature_3 <= 1.4681963324546814) ? ( 98 ) : ( 99 ) ) ) ) : ( (Feature_0 <= 70.91468811035156) ? ( 101 ) : ( (Feature_3 <= 7.6166417598724365) ? ( (Feature_3 <= 3.5709584951400757) ? ( 104 ) : ( (Feature_2 <= 0.9674052596092224) ? ( 106 ) : ( 107 ) ) ) : ( 108 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_5
	

	namespace EXT_SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 5 ,  {1.14091625 }} ,
				{ 6 ,  {1.36871758 }} ,
				{ 9 ,  {0.38342473 }} ,
				{ 10 ,  {0.37516757 }} ,
				{ 12 ,  {0.70507147 }} ,
				{ 13 ,  {0.80791092 }} ,
				{ 18 ,  {1.41074394 }} ,
				{ 20 ,  {1.45186094 }} ,
				{ 21 ,  {1.48725785 }} ,
				{ 24 ,  {1.16100714 }} ,
				{ 25 ,  {1.11561476 }} ,
				{ 28 ,  {1.46088901 }} ,
				{ 30 ,  {1.36789414 }} ,
				{ 31 ,  {1.38449452 }} ,
				{ 33 ,  {1.27887759 }} ,
				{ 34 ,  {1.26722342 }} ,
				{ 38 ,  {1.10634412 }} ,
				{ 39 ,  {1.14405643 }} ,
				{ 41 ,  {1.27948723 }} ,
				{ 42 ,  {1.15778604 }} ,
				{ 44 ,  {1.07654708 }} ,
				{ 45 ,  {1.02748435 }} ,
				{ 48 ,  {1.31432562 }} ,
				{ 49 ,  {1.081892 }} ,
				{ 53 ,  {1.53671123 }} ,
				{ 55 ,  {1.56427232 }} ,
				{ 56 ,  {1.55610197 }} ,
				{ 58 ,  {1.47795145 }} ,
				{ 61 ,  {1.54158957 }} ,
				{ 64 ,  {1.53181558 }} ,
				{ 66 ,  {1.52485398 }} ,
				{ 68 ,  {1.52762941 }} ,
				{ 69 ,  {1.5278957 }} ,
				{ 70 ,  {1.5352537 }} ,
				{ 72 ,  {1.53256929 }} ,
				{ 75 ,  {1.54561918 }} ,
				{ 77 ,  {1.54404651 }} ,
				{ 78 ,  {1.54375025 }} ,
				{ 79 ,  {1.53740023 }} ,
				{ 82 ,  {1.46424873 }} ,
				{ 84 ,  {1.46708262 }} ,
				{ 85 ,  {1.46764868 }} ,
				{ 88 ,  {1.49322332 }} ,
				{ 90 ,  {1.48471099 }} ,
				{ 91 ,  {1.48605726 }} ,
				{ 94 ,  {1.50320739 }} ,
				{ 95 ,  {1.50990015 }} ,
				{ 96 ,  {1.49496626 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_3 <= 5.158445239067078) ? ( 3 ) : ( (Feature_1 <= 730.0179748535156) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_2 <= 0.07712984457612038) ? ( (Feature_0 <= 50.93963050842285) ? ( 9 ) : ( 10 ) ) : ( (Feature_1 <= 423.75958251953125) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_0 <= 74.51426315307617) ? ( (Feature_0 <= 36.620771408081055) ? ( (Feature_3 <= 5.738123416900635) ? ( 18 ) : ( (Feature_1 <= 431.0274200439453) ? ( 20 ) : ( 21 ) ) ) : ( (Feature_1 <= 245.38916015625) ? ( (Feature_1 <= 189.92037963867188) ? ( 24 ) : ( 25 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( (Feature_0 <= 44.211299896240234) ? ( 28 ) : ( (Feature_3 <= 5.495748341083527) ? ( 30 ) : ( 31 ) ) ) : ( (Feature_0 <= 70.96318054199219) ? ( 33 ) : ( 34 ) ) ) ) ) : ( (Feature_0 <= 89.41059494018555) ? ( (Feature_0 <= 80.37459945678711) ? ( (Feature_2 <= 0.4924141466617584) ? ( 38 ) : ( 39 ) ) : ( (Feature_0 <= 84.98217010498047) ? ( 41 ) : ( 42 ) ) ) : ( (Feature_2 <= 0.6747548580169678) ? ( 44 ) : ( 45 ) ) ) ) : ( (Feature_2 <= 0.19915488362312317) ? ( (Feature_2 <= 0.1755022555589676) ? ( 48 ) : ( 49 ) ) : ( (Feature_0 <= 48.26803398132324) ? ( (Feature_0 <= 12.716658115386963) ? ( (Feature_2 <= 0.41745978593826294) ? ( 53 ) : ( (Feature_3 <= 6.906471490859985) ? ( 55 ) : ( 56 ) ) ) : ( (Feature_2 <= 0.3756476044654846) ? ( 58 ) : ( (Feature_1 <= 1322.9339599609375) ? ( (Feature_0 <= 21.19887685775757) ? ( 61 ) : ( (Feature_0 <= 33.879493713378906) ? ( (Feature_0 <= 26.788522720336914) ? ( 64 ) : ( (Feature_1 <= 995.79150390625) ? ( 66 ) : ( (Feature_3 <= 3.0727529525756836) ? ( 68 ) : ( 69 ) ) ) ) : ( 70 ) ) ) : ( (Feature_3 <= 5.587753176689148) ? ( 72 ) : ( (Feature_0 <= 42.05487632751465) ? ( (Feature_2 <= 0.5624333471059799) ? ( 75 ) : ( (Feature_2 <= 0.8074778616428375) ? ( 77 ) : ( 78 ) ) ) : ( 79 ) ) ) ) ) ) : ( (Feature_1 <= 957.5493774414062) ? ( (Feature_1 <= 844.6205444335938) ? ( 82 ) : ( (Feature_3 <= 9.157878875732422) ? ( 84 ) : ( 85 ) ) ) : ( (Feature_1 <= 1249.110595703125) ? ( (Feature_3 <= 1.915703296661377) ? ( 88 ) : ( (Feature_2 <= 0.6494959592819214) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_2 <= 0.7976565361022949) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_6
	

	namespace EXT_SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.37516757 }} ,
				{ 8 ,  {1.081892 }} ,
				{ 9 ,  {0.70507147 }} ,
				{ 13 ,  {1.15778604 }} ,
				{ 15 ,  {1.14091625 }} ,
				{ 17 ,  {1.11561476 }} ,
				{ 19 ,  {1.10634412 }} ,
				{ 20 ,  {1.1082904 }} ,
				{ 21 ,  {1.1968265 }} ,
				{ 22 ,  {1.36871758 }} ,
				{ 26 ,  {1.55432885 }} ,
				{ 27 ,  {1.53671123 }} ,
				{ 28 ,  {1.47795145 }} ,
				{ 31 ,  {1.3413442 }} ,
				{ 32 ,  {1.31432562 }} ,
				{ 33 ,  {1.34636148 }} ,
				{ 38 ,  {1.56967904 }} ,
				{ 39 ,  {1.52787455 }} ,
				{ 41 ,  {1.45186094 }} ,
				{ 42 ,  {1.41074394 }} ,
				{ 45 ,  {1.16100714 }} ,
				{ 46 ,  {1.02748435 }} ,
				{ 49 ,  {1.38449452 }} ,
				{ 50 ,  {1.46088901 }} ,
				{ 53 ,  {1.27887759 }} ,
				{ 54 ,  {1.27948723 }} ,
				{ 55 ,  {1.26722342 }} ,
				{ 61 ,  {1.57058399 }} ,
				{ 62 ,  {1.56460912 }} ,
				{ 64 ,  {1.56232281 }} ,
				{ 65 ,  {1.55610197 }} ,
				{ 67 ,  {1.53405928 }} ,
				{ 69 ,  {1.54158957 }} ,
				{ 71 ,  {1.54404651 }} ,
				{ 72 ,  {1.54561918 }} ,
				{ 74 ,  {1.49902739 }} ,
				{ 76 ,  {1.50778907 }} ,
				{ 79 ,  {1.53256929 }} ,
				{ 83 ,  {1.52208363 }} ,
				{ 84 ,  {1.52169424 }} ,
				{ 85 ,  {1.52129772 }} ,
				{ 86 ,  {1.52485398 }} ,
				{ 89 ,  {1.5352537 }} ,
				{ 90 ,  {1.53740023 }} ,
				{ 91 ,  {1.53095005 }} ,
				{ 93 ,  {1.46424873 }} ,
				{ 97 ,  {1.48471099 }} ,
				{ 98 ,  {1.47193903 }} ,
				{ 102 ,  {1.49292179 }} ,
				{ 103 ,  {1.49322332 }} ,
				{ 104 ,  {1.47832813 }} ,
				{ 108 ,  {1.50320739 }} ,
				{ 109 ,  {1.50282351 }} ,
				{ 110 ,  {1.50990015 }} ,
				{ 111 ,  {1.49496626 }} ,
				{ 112 ,  {1.51266196 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_2 <= 0.03391193738207221) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.4144279509782791) ? ( (Feature_1 <= 1078.7010192871094) ? ( (Feature_3 <= 3.3261798620224) ? ( (Feature_3 <= 2.009738326072693) ? ( 8 ) : ( 9 ) ) : ( (Feature_1 <= 840.4352722167969) ? ( (Feature_1 <= 765.2993469238281) ? ( (Feature_3 <= 4.893146276473999) ? ( 13 ) : ( (Feature_2 <= 0.1389902587980032) ? ( 15 ) : ( (Feature_1 <= 410.0930938720703) ? ( 17 ) : ( (Feature_2 <= 0.22980211675167084) ? ( 19 ) : ( 20 ) ) ) ) ) : ( 21 ) ) : ( 22 ) ) ) : ( (Feature_0 <= 39.54890251159668) ? ( (Feature_0 <= 19.627939701080322) ? ( (Feature_0 <= 7.060354709625244) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) : ( (Feature_2 <= 0.20947152376174927) ? ( (Feature_2 <= 0.14748626947402954) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) ) : ( (Feature_1 <= 537.6676635742188) ? ( (Feature_0 <= 29.003992080688477) ? ( (Feature_0 <= 12.17395305633545) ? ( (Feature_1 <= 380.5465850830078) ? ( 38 ) : ( 39 ) ) : ( (Feature_1 <= 226.3775177001953) ? ( 41 ) : ( 42 ) ) ) : ( (Feature_1 <= 228.15776824951172) ? ( (Feature_0 <= 69.10795593261719) ? ( 45 ) : ( 46 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( (Feature_1 <= 360.9476013183594) ? ( 49 ) : ( 50 ) ) : ( (Feature_3 <= 6.307325124740601) ? ( (Feature_1 <= 381.1418914794922) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) ) : ( (Feature_0 <= 50.59944534301758) ? ( (Feature_0 <= 28.26369857788086) ? ( (Feature_0 <= 12.852156639099121) ? ( (Feature_0 <= 6.23792839050293) ? ( (Feature_0 <= 1.5105030499398708) ? ( 61 ) : ( 62 ) ) : ( (Feature_3 <= 7.154626846313477) ? ( 64 ) : ( 65 ) ) ) : ( (Feature_1 <= 894.8062133789062) ? ( 67 ) : ( (Feature_1 <= 1299.7375183105469) ? ( 69 ) : ( (Feature_1 <= 1663.318115234375) ? ( 71 ) : ( 72 ) ) ) ) ) : ( (Feature_1 <= 761.7084350585938) ? ( 74 ) : ( (Feature_2 <= 0.4767591804265976) ? ( 76 ) : ( (Feature_2 <= 0.7955629825592041) ? ( (Feature_2 <= 0.5946085453033447) ? ( 79 ) : ( (Feature_3 <= 8.160770416259766) ? ( (Feature_1 <= 1285.177001953125) ? ( (Feature_2 <= 0.7562893331050873) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( 86 ) ) ) : ( (Feature_2 <= 0.9691559076309204) ? ( (Feature_0 <= 39.393333435058594) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) ) ) ) : ( (Feature_1 <= 852.9207458496094) ? ( 93 ) : ( (Feature_1 <= 1643.3941650390625) ? ( (Feature_2 <= 0.5975654423236847) ? ( (Feature_3 <= 5.032552599906921) ? ( 97 ) : ( 98 ) ) : ( (Feature_1 <= 1077.173583984375) ? ( (Feature_3 <= 10.46235704421997) ? ( (Feature_1 <= 964.8534545898438) ? ( 102 ) : ( 103 ) ) : ( 104 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_0 <= 75.76903915405273) ? ( (Feature_3 <= 4.382161855697632) ? ( 108 ) : ( 109 ) ) : ( 110 ) ) : ( 111 ) ) ) ) : ( 112 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_7
	

	namespace EXT_SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.80791092 }} ,
				{ 5 ,  {0.37516757 }} ,
				{ 6 ,  {0.38342473 }} ,
				{ 7 ,  {1.35009011 }} ,
				{ 12 ,  {1.36789414 }} ,
				{ 13 ,  {1.41074394 }} ,
				{ 15 ,  {1.52208363 }} ,
				{ 16 ,  {1.46088901 }} ,
				{ 18 ,  {1.36871758 }} ,
				{ 23 ,  {1.53596709 }} ,
				{ 24 ,  {1.55432885 }} ,
				{ 27 ,  {1.56967904 }} ,
				{ 28 ,  {1.57058399 }} ,
				{ 30 ,  {1.56460912 }} ,
				{ 31 ,  {1.56427232 }} ,
				{ 33 ,  {1.54561918 }} ,
				{ 35 ,  {1.53671123 }} ,
				{ 36 ,  {1.54158957 }} ,
				{ 39 ,  {1.4771264 }} ,
				{ 40 ,  {1.47795145 }} ,
				{ 44 ,  {1.49656192 }} ,
				{ 45 ,  {1.49902739 }} ,
				{ 46 ,  {1.48725785 }} ,
				{ 48 ,  {1.50778907 }} ,
				{ 53 ,  {1.5352537 }} ,
				{ 55 ,  {1.53181558 }} ,
				{ 56 ,  {1.53095005 }} ,
				{ 58 ,  {1.53405928 }} ,
				{ 61 ,  {1.52485398 }} ,
				{ 62 ,  {1.5278957 }} ,
				{ 63 ,  {1.52169424 }} ,
				{ 64 ,  {1.52129772 }} ,
				{ 66 ,  {1.54404651 }} ,
				{ 67 ,  {1.53256929 }} ,
				{ 72 ,  {1.1082904 }} ,
				{ 73 ,  {1.11561476 }} ,
				{ 75 ,  {1.27948723 }} ,
				{ 77 ,  {1.14405643 }} ,
				{ 78 ,  {1.07654708 }} ,
				{ 79 ,  {1.38449452 }} ,
				{ 83 ,  {1.34984299 }} ,
				{ 84 ,  {1.31432562 }} ,
				{ 85 ,  {1.081892 }} ,
				{ 88 ,  {1.46424873 }} ,
				{ 90 ,  {1.46764868 }} ,
				{ 91 ,  {1.46708262 }} ,
				{ 95 ,  {1.48471099 }} ,
				{ 97 ,  {1.49496626 }} ,
				{ 98 ,  {1.49292179 }} ,
				{ 99 ,  {1.47832813 }} ,
				{ 100 ,  {1.50990015 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.10105706006288528) ? ( (Feature_1 <= 1324.3846435546875) ? ( (Feature_1 <= 445.71485900878906) ? ( 3 ) : ( (Feature_1 <= 809.5308074951172) ? ( 5 ) : ( 6 ) ) ) : ( 7 ) ) : ( (Feature_0 <= 49.2326774597168) ? ( (Feature_3 <= 2.029953122138977) ? ( (Feature_2 <= 0.5983338803052902) ? ( (Feature_3 <= 1.5074999928474426) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 1.6441163420677185) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_2 <= 0.1586843952536583) ? ( 18 ) : ( (Feature_0 <= 20.67043399810791) ? ( (Feature_0 <= 7.428896188735962) ? ( (Feature_2 <= 0.385817289352417) ? ( (Feature_1 <= 699.2634429931641) ? ( 23 ) : ( 24 ) ) : ( (Feature_0 <= 1.5249224677681923) ? ( (Feature_2 <= 0.7466520518064499) ? ( 27 ) : ( 28 ) ) : ( (Feature_2 <= 0.6176207959651947) ? ( 30 ) : ( 31 ) ) ) ) : ( (Feature_3 <= 8.855112791061401) ? ( 33 ) : ( (Feature_2 <= 0.3961324691772461) ? ( 35 ) : ( 36 ) ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( (Feature_3 <= 5.249751329421997) ? ( 39 ) : ( 40 ) ) : ( (Feature_1 <= 765.1818237304688) ? ( (Feature_0 <= 33.87558364868164) ? ( (Feature_3 <= 5.702386260032654) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (Feature_2 <= 0.4767591804265976) ? ( 48 ) : ( (Feature_1 <= 1488.353515625) ? ( (Feature_0 <= 45.89867973327637) ? ( (Feature_3 <= 3.8173402547836304) ? ( (Feature_1 <= 1044.5914306640625) ? ( 53 ) : ( (Feature_0 <= 34.63477039337158) ? ( 55 ) : ( 56 ) ) ) : ( (Feature_1 <= 897.8779602050781) ? ( 58 ) : ( (Feature_2 <= 0.7081756293773651) ? ( (Feature_1 <= 1052.1464233398438) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) ) : ( 64 ) ) : ( (Feature_1 <= 1684.162109375) ? ( 66 ) : ( 67 ) ) ) ) ) ) ) ) ) : ( (Feature_1 <= 692.4324340820312) ? ( (Feature_3 <= 8.813652515411377) ? ( (Feature_0 <= 72.7166519165039) ? ( (Feature_2 <= 0.3268495053052902) ? ( 72 ) : ( 73 ) ) : ( (Feature_2 <= 0.5465686023235321) ? ( 75 ) : ( (Feature_1 <= 261.50308990478516) ? ( 77 ) : ( 78 ) ) ) ) : ( 79 ) ) : ( (Feature_2 <= 0.4553815424442291) ? ( (Feature_0 <= 86.0887336730957) ? ( (Feature_1 <= 1131.202880859375) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( (Feature_1 <= 890.76611328125) ? ( (Feature_1 <= 844.6205444335938) ? ( 88 ) : ( (Feature_2 <= 0.7108317017555237) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_2 <= 0.9173916876316071) ? ( (Feature_3 <= 10.46235704421997) ? ( (Feature_3 <= 5.975248217582703) ? ( 95 ) : ( (Feature_3 <= 9.797772884368896) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_8
	

	namespace EXT_SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38342473 }} ,
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 9 ,  {1.1968265 }} ,
				{ 12 ,  {1.35009011 }} ,
				{ 13 ,  {1.36871758 }} ,
				{ 14 ,  {1.40929984 }} ,
				{ 19 ,  {1.55432885 }} ,
				{ 20 ,  {1.53596709 }} ,
				{ 22 ,  {1.56427232 }} ,
				{ 25 ,  {1.57058399 }} ,
				{ 26 ,  {1.56967904 }} ,
				{ 27 ,  {1.56848669 }} ,
				{ 34 ,  {1.52787455 }} ,
				{ 35 ,  {1.5278957 }} ,
				{ 36 ,  {1.52762941 }} ,
				{ 37 ,  {1.52485398 }} ,
				{ 38 ,  {1.53181558 }} ,
				{ 39 ,  {1.5352537 }} ,
				{ 41 ,  {1.56232281 }} ,
				{ 43 ,  {1.54561918 }} ,
				{ 44 ,  {1.54404651 }} ,
				{ 46 ,  {1.27887759 }} ,
				{ 49 ,  {1.42518022 }} ,
				{ 52 ,  {1.46088901 }} ,
				{ 53 ,  {1.46424873 }} ,
				{ 56 ,  {1.49292179 }} ,
				{ 57 ,  {1.48725785 }} ,
				{ 58 ,  {1.47832813 }} ,
				{ 62 ,  {1.48471099 }} ,
				{ 64 ,  {1.50778907 }} ,
				{ 65 ,  {1.50320739 }} ,
				{ 67 ,  {1.48605726 }} ,
				{ 69 ,  {1.4771264 }} ,
				{ 70 ,  {1.47193903 }} ,
				{ 73 ,  {1.52129772 }} ,
				{ 74 ,  {1.53740023 }} ,
				{ 75 ,  {1.50282351 }} ,
				{ 80 ,  {1.07654708 }} ,
				{ 81 ,  {1.081892 }} ,
				{ 82 ,  {1.02748435 }} ,
				{ 85 ,  {1.15778604 }} ,
				{ 86 ,  {1.10634412 }} ,
				{ 89 ,  {1.27948723 }} ,
				{ 90 ,  {1.26722342 }} ,
				{ 91 ,  {1.14405643 }} ,
				{ 93 ,  {1.49322332 }} ,
				{ 94 ,  {1.46708262 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_1 <= 1445.2074584960938) ? ( (Feature_0 <= 39.70485877990723) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_0 <= 72.4854736328125) ? ( (Feature_2 <= 0.22849729657173157) ? ( (Feature_1 <= 840.4352722167969) ? ( 9 ) : ( (Feature_1 <= 1564.9982299804688) ? ( (Feature_2 <= 0.07787800580263138) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_0 <= 34.446685791015625) ? ( (Feature_0 <= 7.656977891921997) ? ( (Feature_2 <= 0.41905950009822845) ? ( (Feature_3 <= 6.004507660865784) ? ( 19 ) : ( 20 ) ) : ( (Feature_3 <= 6.9350950717926025) ? ( 22 ) : ( (Feature_3 <= 9.250843524932861) ? ( (Feature_0 <= 0.13278040662407875) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (Feature_1 <= 1403.8892822265625) ? ( (Feature_2 <= 0.8574210405349731) ? ( (Feature_1 <= 1161.6082153320312) ? ( (Feature_3 <= 8.89365005493164) ? ( (Feature_0 <= 30.44863224029541) ? ( (Feature_2 <= 0.4836960881948471) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( 37 ) ) : ( 38 ) ) : ( 39 ) ) : ( (Feature_0 <= 15.2035231590271) ? ( 41 ) : ( (Feature_0 <= 24.37906837463379) ? ( 43 ) : ( 44 ) ) ) ) ) : ( (Feature_1 <= 306.52972412109375) ? ( 46 ) : ( (Feature_1 <= 988.0879821777344) ? ( (Feature_2 <= 0.46411360800266266) ? ( 49 ) : ( (Feature_3 <= 10.019285678863525) ? ( (Feature_0 <= 50.83867835998535) ? ( 52 ) : ( 53 ) ) : ( (Feature_1 <= 921.3047180175781) ? ( (Feature_3 <= 10.616132259368896) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) ) : ( (Feature_2 <= 0.7321430444717407) ? ( (Feature_3 <= 3.8589189052581787) ? ( (Feature_1 <= 1326.3909912109375) ? ( 62 ) : ( (Feature_0 <= 52.08357238769531) ? ( 64 ) : ( 65 ) ) ) : ( (Feature_1 <= 1334.9600830078125) ? ( 67 ) : ( (Feature_3 <= 6.048382520675659) ? ( 69 ) : ( 70 ) ) ) ) : ( (Feature_0 <= 60.751224517822266) ? ( (Feature_2 <= 0.7885276973247528) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) ) : ( (Feature_2 <= 0.8226335346698761) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_2 <= 0.6747548580169678) ? ( (Feature_0 <= 93.90718078613281) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( (Feature_2 <= 0.4183829128742218) ? ( (Feature_1 <= 684.9308776855469) ? ( 85 ) : ( 86 ) ) : ( (Feature_2 <= 0.6680710017681122) ? ( (Feature_2 <= 0.5524007081985474) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) ) : ( (Feature_3 <= 5.018098473548889) ? ( 93 ) : ( 94 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_9
	

	namespace EXT_SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.37516757 }} ,
				{ 9 ,  {1.53596709 }} ,
				{ 10 ,  {1.52787455 }} ,
				{ 12 ,  {1.57058399 }} ,
				{ 13 ,  {1.56967904 }} ,
				{ 14 ,  {1.45186094 }} ,
				{ 18 ,  {1.16100714 }} ,
				{ 19 ,  {1.14405643 }} ,
				{ 20 ,  {1.11561476 }} ,
				{ 24 ,  {1.14091625 }} ,
				{ 25 ,  {1.15778604 }} ,
				{ 26 ,  {1.10634412 }} ,
				{ 30 ,  {1.41074394 }} ,
				{ 31 ,  {1.49656192 }} ,
				{ 33 ,  {1.36789414 }} ,
				{ 34 ,  {1.38449452 }} ,
				{ 37 ,  {1.27948723 }} ,
				{ 38 ,  {1.27887759 }} ,
				{ 39 ,  {1.26722342 }} ,
				{ 46 ,  {1.55432885 }} ,
				{ 48 ,  {1.56848669 }} ,
				{ 50 ,  {1.56460912 }} ,
				{ 51 ,  {1.56427232 }} ,
				{ 53 ,  {1.56232281 }} ,
				{ 54 ,  {1.55610197 }} ,
				{ 55 ,  {1.53671123 }} ,
				{ 57 ,  {1.47795145 }} ,
				{ 61 ,  {1.5278957 }} ,
				{ 63 ,  {1.53405928 }} ,
				{ 64 ,  {1.53181558 }} ,
				{ 66 ,  {1.52485398 }} ,
				{ 67 ,  {1.52208363 }} ,
				{ 70 ,  {1.53095005 }} ,
				{ 72 ,  {1.53740023 }} ,
				{ 73 ,  {1.5352537 }} ,
				{ 74 ,  {1.54375025 }} ,
				{ 77 ,  {1.3413442 }} ,
				{ 78 ,  {1.34636148 }} ,
				{ 81 ,  {1.34984299 }} ,
				{ 84 ,  {1.46424873 }} ,
				{ 85 ,  {1.46708262 }} ,
				{ 86 ,  {1.47832813 }} ,
				{ 89 ,  {1.48471099 }} ,
				{ 90 ,  {1.4771264 }} ,
				{ 93 ,  {1.49322332 }} ,
				{ 94 ,  {1.48605726 }} ,
				{ 96 ,  {1.50320739 }} ,
				{ 97 ,  {1.50282351 }} ,
				{ 98 ,  {1.081892 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_2 <= 0.03391193738207221) ? ( 2 ) : ( 3 ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_0 <= 15.669092655181885) ? ( (Feature_0 <= 12.17395305633545) ? ( (Feature_2 <= 0.46043506264686584) ? ( (Feature_2 <= 0.381778284907341) ? ( 9 ) : ( 10 ) ) : ( (Feature_3 <= 8.566288948059082) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) : ( (Feature_1 <= 245.38916015625) ? ( (Feature_1 <= 231.9021987915039) ? ( (Feature_2 <= 0.7065557539463043) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 684.9308776855469) ? ( (Feature_2 <= 0.1806293185800314) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( (Feature_0 <= 36.71344184875488) ? ( (Feature_1 <= 398.11248779296875) ? ( 30 ) : ( 31 ) ) : ( (Feature_3 <= 5.495748341083527) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_3 <= 6.307325124740601) ? ( (Feature_2 <= 0.7346659004688263) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) ) ) ) : ( (Feature_0 <= 87.57884216308594) ? ( (Feature_0 <= 47.0081787109375) ? ( (Feature_0 <= 15.311119556427002) ? ( (Feature_3 <= 10.290976524353027) ? ( (Feature_0 <= 7.932988882064819) ? ( (Feature_3 <= 3.8433116674423218) ? ( 46 ) : ( (Feature_1 <= 955.4265747070312) ? ( 48 ) : ( (Feature_0 <= 4.597705602645874) ? ( 50 ) : ( 51 ) ) ) ) : ( (Feature_3 <= 7.154626846313477) ? ( 53 ) : ( 54 ) ) ) : ( 55 ) ) : ( (Feature_2 <= 0.4029855281114578) ? ( 57 ) : ( (Feature_2 <= 0.7863079011440277) ? ( (Feature_0 <= 27.685747146606445) ? ( (Feature_2 <= 0.5639469921588898) ? ( 61 ) : ( (Feature_0 <= 23.65783977508545) ? ( 63 ) : ( 64 ) ) ) : ( (Feature_2 <= 0.6989205479621887) ? ( 66 ) : ( 67 ) ) ) : ( (Feature_2 <= 0.9767304956912994) ? ( (Feature_3 <= 2.8088678121566772) ? ( 70 ) : ( (Feature_2 <= 0.8950419425964355) ? ( 72 ) : ( 73 ) ) ) : ( 74 ) ) ) ) ) : ( (Feature_2 <= 0.28124406933784485) ? ( (Feature_2 <= 0.18905451893806458) ? ( 77 ) : ( 78 ) ) : ( (Feature_1 <= 1005.1666259765625) ? ( (Feature_2 <= 0.5270543694496155) ? ( 81 ) : ( (Feature_3 <= 10.235629081726074) ? ( (Feature_2 <= 0.78250452876091) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) ) : ( (Feature_0 <= 60.21466064453125) ? ( (Feature_1 <= 1423.5971069335938) ? ( 89 ) : ( 90 ) ) : ( (Feature_1 <= 1077.173583984375) ? ( (Feature_3 <= 5.817681431770325) ? ( 93 ) : ( 94 ) ) : ( (Feature_3 <= 4.382161855697632) ? ( 96 ) : ( 97 ) ) ) ) ) ) ) : ( 98 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_10
	

	namespace EXT_SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.48486692 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 12 ,  {1.14091625 }} ,
				{ 14 ,  {1.1082904 }} ,
				{ 15 ,  {1.10634412 }} ,
				{ 16 ,  {1.1968265 }} ,
				{ 18 ,  {1.53671123 }} ,
				{ 21 ,  {1.36871758 }} ,
				{ 22 ,  {1.40929984 }} ,
				{ 24 ,  {1.3413442 }} ,
				{ 25 ,  {1.31432562 }} ,
				{ 31 ,  {1.53596709 }} ,
				{ 33 ,  {1.55432885 }} ,
				{ 34 ,  {1.54561918 }} ,
				{ 37 ,  {1.56427232 }} ,
				{ 40 ,  {1.56967904 }} ,
				{ 41 ,  {1.57058399 }} ,
				{ 42 ,  {1.56848669 }} ,
				{ 44 ,  {1.55610197 }} ,
				{ 45 ,  {1.56232281 }} ,
				{ 47 ,  {1.49902739 }} ,
				{ 50 ,  {1.52485398 }} ,
				{ 51 ,  {1.5278957 }} ,
				{ 52 ,  {1.5352537 }} ,
				{ 55 ,  {1.38449452 }} ,
				{ 59 ,  {1.48725785 }} ,
				{ 60 ,  {1.49292179 }} ,
				{ 61 ,  {1.46088901 }} ,
				{ 62 ,  {1.42518022 }} ,
				{ 64 ,  {1.4771264 }} ,
				{ 67 ,  {1.53256929 }} ,
				{ 70 ,  {1.51266196 }} ,
				{ 71 ,  {1.50778907 }} ,
				{ 74 ,  {1.52169424 }} ,
				{ 75 ,  {1.52208363 }} ,
				{ 76 ,  {1.52129772 }} ,
				{ 77 ,  {1.48471099 }} ,
				{ 81 ,  {1.07654708 }} ,
				{ 82 ,  {1.02748435 }} ,
				{ 86 ,  {1.27887759 }} ,
				{ 87 ,  {1.27948723 }} ,
				{ 88 ,  {1.15778604 }} ,
				{ 89 ,  {1.14405643 }} ,
				{ 91 ,  {1.34636148 }} ,
				{ 95 ,  {1.47193903 }} ,
				{ 96 ,  {1.46708262 }} ,
				{ 97 ,  {1.47832813 }} ,
				{ 99 ,  {1.50990015 }} ,
				{ 100 ,  {1.49496626 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 39.70485877990723) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_1 <= 505.7232666015625) ? ( (Feature_2 <= 0.10221557691693306) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 840.4352722167969) ? ( (Feature_1 <= 765.2993469238281) ? ( (Feature_2 <= 0.1389902587980032) ? ( 12 ) : ( (Feature_0 <= 73.59216690063477) ? ( 14 ) : ( 15 ) ) ) : ( 16 ) ) : ( (Feature_0 <= 10.242729663848877) ? ( 18 ) : ( (Feature_0 <= 33.216888427734375) ? ( (Feature_1 <= 1252.6717834472656) ? ( 21 ) : ( 22 ) ) : ( (Feature_2 <= 0.14748626947402954) ? ( 24 ) : ( 25 ) ) ) ) ) ) : ( (Feature_0 <= 64.48090744018555) ? ( (Feature_0 <= 34.446685791015625) ? ( (Feature_0 <= 23.801116943359375) ? ( (Feature_2 <= 0.49363937973976135) ? ( (Feature_0 <= 3.528907060623169) ? ( 31 ) : ( (Feature_1 <= 1469.901611328125) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_0 <= 7.932988882064819) ? ( (Feature_3 <= 6.9350950717926025) ? ( 37 ) : ( (Feature_1 <= 691.4309997558594) ? ( (Feature_1 <= 412.29981994628906) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) : ( (Feature_1 <= 1346.5750122070312) ? ( 44 ) : ( 45 ) ) ) ) : ( (Feature_1 <= 761.7084350585938) ? ( 47 ) : ( (Feature_0 <= 31.11660861968994) ? ( (Feature_1 <= 1052.1464233398438) ? ( 50 ) : ( 51 ) ) : ( 52 ) ) ) ) : ( (Feature_1 <= 1027.0198364257812) ? ( (Feature_1 <= 360.9476013183594) ? ( 55 ) : ( (Feature_1 <= 915.0120239257812) ? ( (Feature_2 <= 0.8706563711166382) ? ( (Feature_1 <= 789.3717346191406) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( 62 ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 64 ) : ( (Feature_0 <= 57.11452674865723) ? ( (Feature_0 <= 38.69268226623535) ? ( 67 ) : ( (Feature_2 <= 0.6571033298969269) ? ( (Feature_1 <= 1655.8165893554688) ? ( 70 ) : ( 71 ) ) : ( (Feature_0 <= 47.33743667602539) ? ( (Feature_1 <= 1186.8003540039062) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) ) : ( 77 ) ) ) ) ) : ( (Feature_1 <= 771.5745849609375) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_0 <= 95.66353988647461) ? ( 81 ) : ( 82 ) ) : ( (Feature_3 <= 6.176062107086182) ? ( (Feature_0 <= 84.98217010498047) ? ( (Feature_1 <= 381.1418914794922) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) : ( 89 ) ) ) : ( (Feature_2 <= 0.3403577208518982) ? ( 91 ) : ( (Feature_0 <= 78.90243911743164) ? ( (Feature_3 <= 9.742227554321289) ? ( (Feature_2 <= 0.6423677653074265) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) : ( (Feature_1 <= 1354.1441040039062) ? ( 99 ) : ( 100 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_11
	

	namespace EXT_SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.80791092 }} ,
				{ 5 ,  {0.48486692 }} ,
				{ 6 ,  {0.37516757 }} ,
				{ 8 ,  {1.40929984 }} ,
				{ 9 ,  {1.14091625 }} ,
				{ 14 ,  {1.11561476 }} ,
				{ 15 ,  {1.16100714 }} ,
				{ 18 ,  {1.53596709 }} ,
				{ 19 ,  {1.45186094 }} ,
				{ 20 ,  {1.38449452 }} ,
				{ 23 ,  {1.36871758 }} ,
				{ 25 ,  {1.3413442 }} ,
				{ 26 ,  {1.31432562 }} ,
				{ 31 ,  {1.57058399 }} ,
				{ 32 ,  {1.56848669 }} ,
				{ 34 ,  {1.56427232 }} ,
				{ 35 ,  {1.56460912 }} ,
				{ 37 ,  {1.47795145 }} ,
				{ 41 ,  {1.52787455 }} ,
				{ 43 ,  {1.54561918 }} ,
				{ 44 ,  {1.54158957 }} ,
				{ 48 ,  {1.53181558 }} ,
				{ 49 ,  {1.53405928 }} ,
				{ 51 ,  {1.52485398 }} ,
				{ 53 ,  {1.5278957 }} ,
				{ 54 ,  {1.52762941 }} ,
				{ 56 ,  {1.53256929 }} ,
				{ 57 ,  {1.54404651 }} ,
				{ 58 ,  {1.49902739 }} ,
				{ 62 ,  {1.46424873 }} ,
				{ 63 ,  {1.46088901 }} ,
				{ 64 ,  {1.42518022 }} ,
				{ 68 ,  {1.48471099 }} ,
				{ 71 ,  {1.50778907 }} ,
				{ 72 ,  {1.51266196 }} ,
				{ 73 ,  {1.50320739 }} ,
				{ 74 ,  {1.4771264 }} ,
				{ 75 ,  {1.52129772 }} ,
				{ 80 ,  {1.07654708 }} ,
				{ 81 ,  {1.081892 }} ,
				{ 84 ,  {1.1082904 }} ,
				{ 86 ,  {1.1968265 }} ,
				{ 87 ,  {1.15778604 }} ,
				{ 89 ,  {1.14405643 }} ,
				{ 93 ,  {1.27948723 }} ,
				{ 94 ,  {1.27887759 }} ,
				{ 95 ,  {1.26722342 }} ,
				{ 96 ,  {1.34984299 }} ,
				{ 97 ,  {1.46708262 }} ,
				{ 99 ,  {1.34636148 }} ,
				{ 102 ,  {1.48605726 }} ,
				{ 104 ,  {1.49322332 }} ,
				{ 105 ,  {1.49496626 }} ,
				{ 106 ,  {1.50990015 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.10105706006288528) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_1 <= 445.71485900878906) ? ( 3 ) : ( (Feature_0 <= 51.677101135253906) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_3 <= 6.022374868392944) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_0 <= 61.53804397583008) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_3 <= 7.815814971923828) ? ( (Feature_2 <= 0.5308420062065125) ? ( 14 ) : ( 15 ) ) : ( (Feature_2 <= 0.7759501934051514) ? ( (Feature_2 <= 0.5254106521606445) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (Feature_2 <= 0.21481800079345703) ? ( (Feature_2 <= 0.11461476236581802) ? ( 23 ) : ( (Feature_3 <= 4.4665937423706055) ? ( 25 ) : ( 26 ) ) ) : ( (Feature_0 <= 37.74134635925293) ? ( (Feature_0 <= 7.656977891921997) ? ( (Feature_0 <= 2.331439197063446) ? ( (Feature_0 <= 0.9392971359193325) ? ( 31 ) : ( 32 ) ) : ( (Feature_3 <= 7.774684190750122) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_2 <= 0.3424432873725891) ? ( 37 ) : ( (Feature_2 <= 0.7703642249107361) ? ( (Feature_0 <= 20.67043399810791) ? ( (Feature_0 <= 12.44064712524414) ? ( 41 ) : ( (Feature_3 <= 8.855112791061401) ? ( 43 ) : ( 44 ) ) ) : ( (Feature_1 <= 1412.2710571289062) ? ( (Feature_0 <= 26.788522720336914) ? ( (Feature_3 <= 5.455087065696716) ? ( 48 ) : ( 49 ) ) : ( (Feature_1 <= 995.79150390625) ? ( 51 ) : ( (Feature_0 <= 30.44863224029541) ? ( 53 ) : ( 54 ) ) ) ) : ( (Feature_2 <= 0.5868572294712067) ? ( 56 ) : ( 57 ) ) ) ) : ( 58 ) ) ) ) : ( (Feature_1 <= 1057.86767578125) ? ( (Feature_1 <= 870.7051086425781) ? ( (Feature_2 <= 0.8533172607421875) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) : ( (Feature_2 <= 0.680212527513504) ? ( (Feature_3 <= 3.865870237350464) ? ( (Feature_1 <= 1326.3909912109375) ? ( 68 ) : ( (Feature_2 <= 0.5880618095397949) ? ( (Feature_3 <= 3.092164993286133) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) : ( (Feature_1 <= 1010.5097961425781) ? ( (Feature_3 <= 8.640667915344238) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_0 <= 93.90718078613281) ? ( 80 ) : ( 81 ) ) : ( (Feature_2 <= 0.32354533672332764) ? ( (Feature_1 <= 617.5478210449219) ? ( 84 ) : ( (Feature_0 <= 74.56901550292969) ? ( 86 ) : ( 87 ) ) ) : ( (Feature_1 <= 233.35620880126953) ? ( 89 ) : ( (Feature_1 <= 747.4898376464844) ? ( (Feature_3 <= 6.307325124740601) ? ( (Feature_2 <= 0.7346659004688263) ? ( 93 ) : ( 94 ) ) : ( 95 ) ) : ( 96 ) ) ) ) ) : ( 97 ) ) : ( (Feature_2 <= 0.48192600905895233) ? ( 99 ) : ( (Feature_2 <= 0.9793506264686584) ? ( (Feature_0 <= 70.22310256958008) ? ( 102 ) : ( (Feature_1 <= 1212.7426147460938) ? ( 104 ) : ( 105 ) ) ) : ( 106 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_12
	

	namespace EXT_SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.80791092 }} ,
				{ 5 ,  {0.48486692 }} ,
				{ 6 ,  {0.37516757 }} ,
				{ 8 ,  {0.61001684 }} ,
				{ 11 ,  {1.14091625 }} ,
				{ 12 ,  {1.081892 }} ,
				{ 14 ,  {1.35009011 }} ,
				{ 15 ,  {1.40929984 }} ,
				{ 21 ,  {1.53671123 }} ,
				{ 22 ,  {1.53596709 }} ,
				{ 23 ,  {1.42518022 }} ,
				{ 26 ,  {1.11561476 }} ,
				{ 28 ,  {1.1082904 }} ,
				{ 29 ,  {1.10634412 }} ,
				{ 30 ,  {1.34636148 }} ,
				{ 32 ,  {1.16100714 }} ,
				{ 37 ,  {1.52787455 }} ,
				{ 38 ,  {1.56967904 }} ,
				{ 42 ,  {1.45186094 }} ,
				{ 43 ,  {1.46088901 }} ,
				{ 44 ,  {1.38449452 }} ,
				{ 48 ,  {1.49656192 }} ,
				{ 49 ,  {1.49902739 }} ,
				{ 50 ,  {1.48725785 }} ,
				{ 51 ,  {1.46424873 }} ,
				{ 52 ,  {1.27948723 }} ,
				{ 57 ,  {1.56848669 }} ,
				{ 59 ,  {1.56460912 }} ,
				{ 60 ,  {1.56427232 }} ,
				{ 61 ,  {1.55610197 }} ,
				{ 63 ,  {1.50778907 }} ,
				{ 68 ,  {1.53256929 }} ,
				{ 69 ,  {1.53181558 }} ,
				{ 70 ,  {1.52762941 }} ,
				{ 71 ,  {1.52169424 }} ,
				{ 75 ,  {1.54561918 }} ,
				{ 76 ,  {1.54404651 }} ,
				{ 77 ,  {1.54158957 }} ,
				{ 79 ,  {1.52485398 }} ,
				{ 81 ,  {1.54375025 }} ,
				{ 82 ,  {1.53740023 }} ,
				{ 86 ,  {1.48605726 }} ,
				{ 87 ,  {1.48471099 }} ,
				{ 89 ,  {1.50282351 }} ,
				{ 90 ,  {1.49292179 }} ,
				{ 93 ,  {1.50320739 }} ,
				{ 95 ,  {1.51266196 }} ,
				{ 96 ,  {1.50990015 }} ,
				{ 97 ,  {1.49496626 }} ,
				{ 99 ,  {1.07654708 }} ,
				{ 100 ,  {1.02748435 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.19915488362312317) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_3 <= 3.53000545501709) ? ( 3 ) : ( (Feature_2 <= 0.046484289690852165) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_2 <= 0.025156566640362144) ? ( 8 ) : ( (Feature_1 <= 1238.0836486816406) ? ( (Feature_2 <= 0.12071437202394009) ? ( 11 ) : ( 12 ) ) : ( (Feature_1 <= 1564.9982299804688) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (Feature_0 <= 90.57643127441406) ? ( (Feature_2 <= 0.4144279509782791) ? ( (Feature_0 <= 46.24798393249512) ? ( (Feature_0 <= 25.83055353164673) ? ( (Feature_2 <= 0.2778056263923645) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (Feature_1 <= 958.5805969238281) ? ( (Feature_3 <= 6.903095722198486) ? ( 26 ) : ( (Feature_3 <= 8.705983638763428) ? ( 28 ) : ( 29 ) ) ) : ( 30 ) ) ) : ( (Feature_1 <= 158.22232055664062) ? ( 32 ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_0 <= 71.95119857788086) ? ( (Feature_0 <= 12.17395305633545) ? ( (Feature_3 <= 8.646637439727783) ? ( 37 ) : ( 38 ) ) : ( (Feature_1 <= 445.1126251220703) ? ( (Feature_3 <= 9.726371765136719) ? ( (Feature_2 <= 0.8535519540309906) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) : ( (Feature_0 <= 48.19552040100098) ? ( (Feature_1 <= 629.0122985839844) ? ( (Feature_3 <= 5.702386260032654) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) : ( 51 ) ) ) ) : ( 52 ) ) : ( (Feature_0 <= 48.50948524475098) ? ( (Feature_0 <= 12.716658115386963) ? ( (Feature_0 <= 7.932988882064819) ? ( (Feature_0 <= 2.331439197063446) ? ( 57 ) : ( (Feature_0 <= 4.597705602645874) ? ( 59 ) : ( 60 ) ) ) : ( 61 ) ) : ( (Feature_2 <= 0.45233529806137085) ? ( 63 ) : ( (Feature_3 <= 7.223106145858765) ? ( (Feature_2 <= 0.7579420804977417) ? ( (Feature_2 <= 0.6669977009296417) ? ( (Feature_2 <= 0.5610329508781433) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) : ( 71 ) ) : ( (Feature_2 <= 0.6430555284023285) ? ( (Feature_3 <= 9.458102703094482) ? ( (Feature_2 <= 0.5624333471059799) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( (Feature_1 <= 1213.47216796875) ? ( 79 ) : ( (Feature_0 <= 42.05487632751465) ? ( 81 ) : ( 82 ) ) ) ) ) ) ) : ( (Feature_1 <= 1249.110595703125) ? ( (Feature_2 <= 0.7287198305130005) ? ( (Feature_1 <= 1106.8665771484375) ? ( 86 ) : ( 87 ) ) : ( (Feature_3 <= 8.336771249771118) ? ( 89 ) : ( 90 ) ) ) : ( (Feature_3 <= 7.630503416061401) ? ( (Feature_3 <= 2.7179555892944336) ? ( 93 ) : ( (Feature_0 <= 66.74471855163574) ? ( 95 ) : ( 96 ) ) ) : ( 97 ) ) ) ) ) ) ) : ( (Feature_0 <= 95.66353988647461) ? ( 99 ) : ( 100 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_13
	

	namespace EXT_SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.40929984 }} ,
				{ 4 ,  {1.14091625 }} ,
				{ 7 ,  {0.70507147 }} ,
				{ 8 ,  {0.80791092 }} ,
				{ 10 ,  {0.48486692 }} ,
				{ 12 ,  {0.37516757 }} ,
				{ 13 ,  {0.38342473 }} ,
				{ 18 ,  {1.16100714 }} ,
				{ 19 ,  {1.11561476 }} ,
				{ 20 ,  {1.53596709 }} ,
				{ 22 ,  {1.31432562 }} ,
				{ 24 ,  {1.36789414 }} ,
				{ 28 ,  {1.52787455 }} ,
				{ 29 ,  {1.53671123 }} ,
				{ 31 ,  {1.56967904 }} ,
				{ 33 ,  {1.56460912 }} ,
				{ 34 ,  {1.56232281 }} ,
				{ 37 ,  {1.41074394 }} ,
				{ 38 ,  {1.46088901 }} ,
				{ 42 ,  {1.49656192 }} ,
				{ 43 ,  {1.49902739 }} ,
				{ 45 ,  {1.47795145 }} ,
				{ 50 ,  {1.53405928 }} ,
				{ 51 ,  {1.5352537 }} ,
				{ 54 ,  {1.52762941 }} ,
				{ 55 ,  {1.5278957 }} ,
				{ 57 ,  {1.53181558 }} ,
				{ 58 ,  {1.53256929 }} ,
				{ 60 ,  {1.53095005 }} ,
				{ 61 ,  {1.52169424 }} ,
				{ 64 ,  {1.54404651 }} ,
				{ 65 ,  {1.54375025 }} ,
				{ 66 ,  {1.53740023 }} ,
				{ 70 ,  {1.52129772 }} ,
				{ 71 ,  {1.51266196 }} ,
				{ 73 ,  {1.48471099 }} ,
				{ 74 ,  {1.50320739 }} ,
				{ 78 ,  {1.46764868 }} ,
				{ 79 ,  {1.46424873 }} ,
				{ 80 ,  {1.4771264 }} ,
				{ 82 ,  {1.49292179 }} ,
				{ 83 ,  {1.48605726 }} ,
				{ 88 ,  {1.14405643 }} ,
				{ 91 ,  {1.27887759 }} ,
				{ 92 ,  {1.27948723 }} ,
				{ 93 ,  {1.26722342 }} ,
				{ 94 ,  {1.07654708 }} ,
				{ 95 ,  {1.1082904 }} ,
				{ 97 ,  {1.34636148 }} ,
				{ 100 ,  {1.49496626 }} ,
				{ 101 ,  {1.50282351 }} ,
				{ 102 ,  {1.47193903 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 27.489428520202637) ? ( (Feature_0 <= 13.965950965881348) ? ( 3 ) : ( 4 ) ) : ( (Feature_3 <= 3.731728196144104) ? ( (Feature_1 <= 423.75958251953125) ? ( 7 ) : ( 8 ) ) : ( (Feature_3 <= 5.679425954818726) ? ( 10 ) : ( (Feature_1 <= 809.5308074951172) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (Feature_0 <= 65.67565155029297) ? ( (Feature_1 <= 254.32003784179688) ? ( (Feature_3 <= 7.916175842285156) ? ( (Feature_0 <= 43.824588775634766) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 22 ) : ( (Feature_3 <= 1.2365522980690002) ? ( 24 ) : ( (Feature_0 <= 14.801451206207275) ? ( (Feature_2 <= 0.4271928519010544) ? ( (Feature_3 <= 9.531735897064209) ? ( 28 ) : ( 29 ) ) : ( (Feature_1 <= 676.2953948974609) ? ( 31 ) : ( (Feature_2 <= 0.5693832337856293) ? ( 33 ) : ( 34 ) ) ) ) : ( (Feature_1 <= 445.1126251220703) ? ( (Feature_0 <= 30.018630981445312) ? ( 37 ) : ( 38 ) ) : ( (Feature_0 <= 46.78996658325195) ? ( (Feature_1 <= 712.6783142089844) ? ( (Feature_3 <= 5.702386260032654) ? ( 42 ) : ( 43 ) ) : ( (Feature_2 <= 0.40007148683071136) ? ( 45 ) : ( (Feature_3 <= 8.481163501739502) ? ( (Feature_0 <= 38.69268226623535) ? ( (Feature_1 <= 1016.5895385742188) ? ( (Feature_1 <= 918.6759948730469) ? ( 50 ) : ( 51 ) ) : ( (Feature_1 <= 1161.6082153320312) ? ( (Feature_3 <= 3.0727529525756836) ? ( 54 ) : ( 55 ) ) : ( (Feature_1 <= 1437.7227172851562) ? ( 57 ) : ( 58 ) ) ) ) : ( (Feature_3 <= 4.940503835678101) ? ( 60 ) : ( 61 ) ) ) : ( (Feature_0 <= 42.05487632751465) ? ( (Feature_3 <= 9.757994651794434) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) ) ) : ( (Feature_3 <= 3.865870237350464) ? ( (Feature_0 <= 57.11452674865723) ? ( (Feature_1 <= 1482.8294677734375) ? ( 70 ) : ( 71 ) ) : ( (Feature_0 <= 60.21466064453125) ? ( 73 ) : ( 74 ) ) ) : ( (Feature_2 <= 0.7113807201385498) ? ( (Feature_1 <= 1272.4412536621094) ? ( (Feature_0 <= 56.524654388427734) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (Feature_0 <= 57.27299118041992) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) ) ) : ( (Feature_1 <= 849.0594787597656) ? ( (Feature_1 <= 545.8458251953125) ? ( (Feature_0 <= 86.93203353881836) ? ( (Feature_1 <= 233.35620880126953) ? ( 88 ) : ( (Feature_3 <= 6.307325124740601) ? ( (Feature_1 <= 381.1418914794922) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) : ( 94 ) ) : ( 95 ) ) : ( (Feature_2 <= 0.3403577208518982) ? ( 97 ) : ( (Feature_1 <= 1516.0659790039062) ? ( (Feature_2 <= 0.8984350860118866) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_14
	

	namespace EXT_SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 3 ,  {0.48486692 }} ,
				{ 7 ,  {0.70507147 }} ,
				{ 11 ,  {1.1082904 }} ,
				{ 13 ,  {1.14091625 }} ,
				{ 14 ,  {1.15778604 }} ,
				{ 15 ,  {1.1968265 }} ,
				{ 16 ,  {1.081892 }} ,
				{ 18 ,  {1.53671123 }} ,
				{ 20 ,  {1.34636148 }} ,
				{ 21 ,  {1.40929984 }} ,
				{ 26 ,  {1.53596709 }} ,
				{ 30 ,  {1.57058399 }} ,
				{ 31 ,  {1.56967904 }} ,
				{ 32 ,  {1.56848669 }} ,
				{ 35 ,  {1.56460912 }} ,
				{ 36 ,  {1.56427232 }} ,
				{ 37 ,  {1.56232281 }} ,
				{ 40 ,  {1.45186094 }} ,
				{ 42 ,  {1.49656192 }} ,
				{ 43 ,  {1.49902739 }} ,
				{ 47 ,  {1.53181558 }} ,
				{ 49 ,  {1.5278957 }} ,
				{ 50 ,  {1.52762941 }} ,
				{ 52 ,  {1.5352537 }} ,
				{ 53 ,  {1.53256929 }} ,
				{ 55 ,  {1.54158957 }} ,
				{ 57 ,  {1.54561918 }} ,
				{ 58 ,  {1.54375025 }} ,
				{ 61 ,  {1.27887759 }} ,
				{ 62 ,  {1.38449452 }} ,
				{ 65 ,  {1.36789414 }} ,
				{ 67 ,  {1.42518022 }} ,
				{ 69 ,  {1.46424873 }} ,
				{ 70 ,  {1.46088901 }} ,
				{ 73 ,  {1.53095005 }} ,
				{ 74 ,  {1.52208363 }} ,
				{ 78 ,  {1.47193903 }} ,
				{ 79 ,  {1.4771264 }} ,
				{ 80 ,  {1.48471099 }} ,
				{ 83 ,  {1.50320739 }} ,
				{ 84 ,  {1.50282351 }} ,
				{ 85 ,  {1.48605726 }} ,
				{ 90 ,  {1.02748435 }} ,
				{ 91 ,  {1.07654708 }} ,
				{ 92 ,  {1.14405643 }} ,
				{ 93 ,  {1.26722342 }} ,
				{ 95 ,  {1.34984299 }} ,
				{ 97 ,  {1.46708262 }} ,
				{ 99 ,  {1.49496626 }} ,
				{ 100 ,  {1.49322332 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 27.39817714691162) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 1078.7010192871094) ? ( (Feature_1 <= 494.287353515625) ? ( 7 ) : ( (Feature_1 <= 904.9034729003906) ? ( (Feature_1 <= 739.2130737304688) ? ( (Feature_1 <= 587.4989929199219) ? ( 11 ) : ( (Feature_2 <= 0.1806293185800314) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) : ( 16 ) ) ) : ( (Feature_1 <= 1186.6603393554688) ? ( 18 ) : ( (Feature_1 <= 1425.0993041992188) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_0 <= 72.4854736328125) ? ( (Feature_0 <= 39.751386642456055) ? ( (Feature_0 <= 12.58546257019043) ? ( (Feature_2 <= 0.385817289352417) ? ( 26 ) : ( (Feature_0 <= 2.331439197063446) ? ( (Feature_1 <= 691.4309997558594) ? ( (Feature_0 <= 0.13278040662407875) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (Feature_0 <= 8.068487405776978) ? ( (Feature_1 <= 1143.7755737304688) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) ) ) : ( (Feature_1 <= 758.6366882324219) ? ( (Feature_0 <= 20.304784297943115) ? ( 40 ) : ( (Feature_2 <= 0.7195742726325989) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_3 <= 6.097601413726807) ? ( (Feature_0 <= 33.879493713378906) ? ( (Feature_0 <= 26.788522720336914) ? ( 47 ) : ( (Feature_2 <= 0.6472890377044678) ? ( 49 ) : ( 50 ) ) ) : ( (Feature_1 <= 1349.0589599609375) ? ( 52 ) : ( 53 ) ) ) : ( (Feature_0 <= 18.21147108078003) ? ( 55 ) : ( (Feature_0 <= 29.893521308898926) ? ( 57 ) : ( 58 ) ) ) ) ) ) : ( (Feature_1 <= 360.9476013183594) ? ( (Feature_1 <= 301.26104736328125) ? ( 61 ) : ( 62 ) ) : ( (Feature_1 <= 981.7952880859375) ? ( (Feature_3 <= 1.404028594493866) ? ( 65 ) : ( (Feature_2 <= 0.5124913901090622) ? ( 67 ) : ( (Feature_2 <= 0.8533172607421875) ? ( 69 ) : ( 70 ) ) ) ) : ( (Feature_0 <= 47.15189552307129) ? ( (Feature_0 <= 44.1706485748291) ? ( 73 ) : ( 74 ) ) : ( (Feature_2 <= 0.5975654423236847) ? ( (Feature_2 <= 0.5079276710748672) ? ( (Feature_1 <= 1651.6906127929688) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (Feature_3 <= 8.416224718093872) ? ( (Feature_0 <= 66.5127944946289) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) ) ) ) ) ) : ( (Feature_1 <= 644.9218444824219) ? ( (Feature_3 <= 6.842603921890259) ? ( (Feature_3 <= 5.188283920288086) ? ( (Feature_3 <= 2.733761489391327) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) : ( (Feature_0 <= 76.87860488891602) ? ( 95 ) : ( (Feature_1 <= 958.3919067382812) ? ( 97 ) : ( (Feature_2 <= 0.9103804528713226) ? ( 99 ) : ( 100 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			EXT_SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
