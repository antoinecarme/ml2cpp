// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_freidman2.exe ml2cpp-demo_RandomForestRegressor_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace EXT_SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {17.5126316 }} ,
				{ 6 ,  {45.71113412 }} ,
				{ 7 ,  {42.01839185 }} ,
				{ 10 ,  {74.13416807 }} ,
				{ 11 ,  {66.46875936 }} ,
				{ 13 ,  {89.81697753 }} ,
				{ 14 ,  {81.61991679 }} ,
				{ 17 ,  {112.36813458 }} ,
				{ 18 ,  {154.50461473 }} ,
				{ 23 ,  {205.37013415 }} ,
				{ 24 ,  {212.83015826 }} ,
				{ 25 ,  {222.6809715 }} ,
				{ 26 ,  {168.83377965 }} ,
				{ 28 ,  {238.91298805 }} ,
				{ 30 ,  {310.5792773 }} ,
				{ 32 ,  {337.38826236 }} ,
				{ 33 ,  {345.51744456 }} ,
				{ 39 ,  {96.00340237 }} ,
				{ 40 ,  {131.74760526 }} ,
				{ 42 ,  {184.81176238 }} ,
				{ 43 ,  {241.12137081 }} ,
				{ 46 ,  {340.89432548 }} ,
				{ 47 ,  {367.2164339 }} ,
				{ 50 ,  {242.64398564 }} ,
				{ 51 ,  {287.26242769 }} ,
				{ 52 ,  {304.56729485 }} ,
				{ 56 ,  {565.71521017 }} ,
				{ 57 ,  {557.42418185 }} ,
				{ 58 ,  {501.63259526 }} ,
				{ 59 ,  {419.36346749 }} ,
				{ 65 ,  {651.51242251 }} ,
				{ 67 ,  {630.47308595 }} ,
				{ 68 ,  {616.90506534 }} ,
				{ 69 ,  {469.13995216 }} ,
				{ 71 ,  {859.39726521 }} ,
				{ 74 ,  {670.13118584 }} ,
				{ 75 ,  {695.99180066 }} ,
				{ 77 ,  {737.40865774 }} ,
				{ 78 ,  {753.58663382 }} ,
				{ 80 ,  {816.81265916 }} ,
				{ 84 ,  {964.56286917 }} ,
				{ 86 ,  {936.66449274 }} ,
				{ 87 ,  {936.08984202 }} ,
				{ 88 ,  {897.11075364 }} ,
				{ 89 ,  {1054.16277579 }} ,
				{ 92 ,  {954.01675074 }} ,
				{ 93 ,  {1072.70246576 }} ,
				{ 95 ,  {1185.2623187 }} ,
				{ 97 ,  {1450.4501203 }} ,
				{ 98 ,  {1344.28572632 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.42248982191085815) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 26.660706520080566) ? ( 4 ) : ( (Feature_1 <= 856.9492797851562) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_3 <= 4.613852858543396) ? ( (Feature_0 <= 31.27036476135254) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1173.6154479980469) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 668.6555480957031) ? ( (Feature_3 <= 6.903095722198486) ? ( 17 ) : ( 18 ) ) : ( (Feature_2 <= 0.22140106558799744) ? ( (Feature_3 <= 6.573434829711914) ? ( (Feature_3 <= 4.4665937423706055) ? ( (Feature_1 <= 1310.6217956542969) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) : ( 26 ) ) : ( (Feature_3 <= 1.6735233664512634) ? ( 28 ) : ( (Feature_2 <= 0.25813600420951843) ? ( 30 ) : ( (Feature_2 <= 0.30469588935375214) ? ( 32 ) : ( 33 ) ) ) ) ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 310.1919250488281) ? ( (Feature_0 <= 53.82084274291992) ? ( (Feature_1 <= 200.30526733398438) ? ( 39 ) : ( 40 ) ) : ( (Feature_2 <= 0.8503361940383911) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_3 <= 4.302922606468201) ? ( (Feature_2 <= 0.8227225840091705) ? ( 46 ) : ( 47 ) ) : ( (Feature_3 <= 8.407146692276001) ? ( (Feature_1 <= 460.4898681640625) ? ( 50 ) : ( 51 ) ) : ( 52 ) ) ) ) : ( (Feature_3 <= 10.248126983642578) ? ( (Feature_0 <= 36.21427536010742) ? ( (Feature_2 <= 0.830794483423233) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) : ( 59 ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_0 <= 35.25666904449463) ? ( (Feature_3 <= 9.652890682220459) ? ( (Feature_0 <= 18.30630397796631) ? ( 65 ) : ( (Feature_0 <= 27.685747146606445) ? ( 67 ) : ( 68 ) ) ) : ( 69 ) ) : ( (Feature_0 <= 47.157331466674805) ? ( 71 ) : ( (Feature_3 <= 10.325467109680176) ? ( (Feature_0 <= 55.98706817626953) ? ( 74 ) : ( 75 ) ) : ( (Feature_0 <= 65.99805068969727) ? ( 77 ) : ( 78 ) ) ) ) ) : ( (Feature_2 <= 0.5283674448728561) ? ( 80 ) : ( (Feature_3 <= 7.034178972244263) ? ( (Feature_0 <= 57.488473892211914) ? ( (Feature_0 <= 25.951085805892944) ? ( 84 ) : ( (Feature_1 <= 1450.0098876953125) ? ( 86 ) : ( 87 ) ) ) : ( 88 ) ) : ( 89 ) ) ) ) : ( (Feature_1 <= 1246.8423461914062) ? ( (Feature_0 <= 38.316505432128906) ? ( 92 ) : ( 93 ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( 95 ) : ( (Feature_1 <= 1553.7089233398438) ? ( 97 ) : ( 98 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_0
	

	namespace EXT_SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {17.5126316 }} ,
				{ 6 ,  {42.01839185 }} ,
				{ 10 ,  {74.13416807 }} ,
				{ 12 ,  {66.46875936 }} ,
				{ 13 ,  {60.17684929 }} ,
				{ 14 ,  {89.81697753 }} ,
				{ 15 ,  {38.41875351 }} ,
				{ 20 ,  {154.50461473 }} ,
				{ 22 ,  {174.68142017 }} ,
				{ 23 ,  {168.83377965 }} ,
				{ 25 ,  {217.90641985 }} ,
				{ 26 ,  {238.91298805 }} ,
				{ 28 ,  {43.13717196 }} ,
				{ 30 ,  {123.98006476 }} ,
				{ 31 ,  {112.36813458 }} ,
				{ 33 ,  {205.37013415 }} ,
				{ 35 ,  {469.13995216 }} ,
				{ 38 ,  {310.5792773 }} ,
				{ 39 ,  {297.00533496 }} ,
				{ 40 ,  {345.51744456 }} ,
				{ 43 ,  {96.00340237 }} ,
				{ 46 ,  {287.26242769 }} ,
				{ 47 ,  {242.64398564 }} ,
				{ 48 ,  {340.89432548 }} ,
				{ 52 ,  {501.63259526 }} ,
				{ 53 ,  {543.10577247 }} ,
				{ 54 ,  {680.96114859 }} ,
				{ 56 ,  {816.81265916 }} ,
				{ 58 ,  {936.08984202 }} ,
				{ 59 ,  {1054.16277579 }} ,
				{ 65 ,  {184.81176238 }} ,
				{ 66 ,  {129.17022248 }} ,
				{ 67 ,  {241.12137081 }} ,
				{ 68 ,  {367.2164339 }} ,
				{ 71 ,  {616.90506534 }} ,
				{ 73 ,  {565.71521017 }} ,
				{ 74 ,  {577.34865081 }} ,
				{ 76 ,  {737.40865774 }} ,
				{ 77 ,  {753.58663382 }} ,
				{ 81 ,  {936.66449274 }} ,
				{ 82 ,  {859.39726521 }} ,
				{ 84 ,  {1006.94766003 }} ,
				{ 85 ,  {1066.49672809 }} ,
				{ 88 ,  {991.65423222 }} ,
				{ 89 ,  {1161.77589816 }} ,
				{ 92 ,  {1299.75326814 }} ,
				{ 93 ,  {1344.28572632 }} ,
				{ 94 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6497833430767059) ? ( (Feature_2 <= 0.4695979952812195) ? ( (Feature_2 <= 0.14378926530480385) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_0 <= 26.660706520080566) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= 8.432183265686035) ? ( (Feature_3 <= 4.841927647590637) ? ( (Feature_0 <= 26.751619338989258) ? ( 10 ) : ( (Feature_1 <= 423.75958251953125) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) : ( 15 ) ) ) : ( (Feature_1 <= 876.18896484375) ? ( (Feature_2 <= 0.3239428550004959) ? ( (Feature_2 <= 0.27144117653369904) ? ( (Feature_1 <= 643.6340942382812) ? ( 20 ) : ( (Feature_1 <= 765.2993469238281) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( 25 ) : ( 26 ) ) ) : ( (Feature_1 <= 185.29229736328125) ? ( 28 ) : ( (Feature_3 <= 3.9416213035583496) ? ( 30 ) : ( 31 ) ) ) ) : ( (Feature_2 <= 0.21707050502300262) ? ( 33 ) : ( (Feature_0 <= 22.99936294555664) ? ( 35 ) : ( (Feature_2 <= 0.3295965641736984) ? ( (Feature_2 <= 0.2830366790294647) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) ) ) ) : ( (Feature_1 <= 702.318115234375) ? ( (Feature_1 <= 270.7223663330078) ? ( 43 ) : ( (Feature_1 <= 519.7247924804688) ? ( (Feature_2 <= 0.5524007081985474) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) : ( (Feature_1 <= 1406.7470092773438) ? ( (Feature_1 <= 1053.2981262207031) ? ( (Feature_3 <= 9.924248695373535) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (Feature_0 <= 24.37906837463379) ? ( 56 ) : ( (Feature_1 <= 1653.1864013671875) ? ( 58 ) : ( 59 ) ) ) ) ) ) : ( (Feature_1 <= 1031.63671875) ? ( (Feature_1 <= 587.4150543212891) ? ( (Feature_1 <= 306.52972412109375) ? ( (Feature_1 <= 233.35620880126953) ? ( (Feature_3 <= 8.161828994750977) ? ( 65 ) : ( 66 ) ) : ( 67 ) ) : ( 68 ) ) : ( (Feature_0 <= 61.90567398071289) ? ( (Feature_2 <= 0.6584039926528931) ? ( 71 ) : ( (Feature_3 <= 9.088586807250977) ? ( 73 ) : ( 74 ) ) ) : ( (Feature_2 <= 0.7532655298709869) ? ( 76 ) : ( 77 ) ) ) ) : ( (Feature_1 <= 1283.81982421875) ? ( (Feature_0 <= 59.023193359375) ? ( (Feature_2 <= 0.7562893331050873) ? ( 81 ) : ( 82 ) ) : ( (Feature_3 <= 3.828985571861267) ? ( 84 ) : ( 85 ) ) ) : ( (Feature_2 <= 0.7885276973247528) ? ( (Feature_1 <= 1479.9717407226562) ? ( 88 ) : ( 89 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_3 <= 7.987461805343628) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_1
	

	namespace EXT_SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {45.71113412 }} ,
				{ 8 ,  {43.13717196 }} ,
				{ 9 ,  {66.46875936 }} ,
				{ 10 ,  {112.36813458 }} ,
				{ 11 ,  {174.68142017 }} ,
				{ 14 ,  {123.98006476 }} ,
				{ 15 ,  {96.00340237 }} ,
				{ 18 ,  {287.26242769 }} ,
				{ 19 ,  {340.89432548 }} ,
				{ 24 ,  {241.12137081 }} ,
				{ 25 ,  {242.64398564 }} ,
				{ 26 ,  {210.24199264 }} ,
				{ 27 ,  {304.56729485 }} ,
				{ 28 ,  {184.81176238 }} ,
				{ 30 ,  {557.42418185 }} ,
				{ 31 ,  {367.2164339 }} ,
				{ 34 ,  {42.01839185 }} ,
				{ 37 ,  {205.37013415 }} ,
				{ 38 ,  {251.33228306 }} ,
				{ 39 ,  {345.51744456 }} ,
				{ 45 ,  {565.71521017 }} ,
				{ 46 ,  {577.34865081 }} ,
				{ 47 ,  {543.10577247 }} ,
				{ 48 ,  {616.90506534 }} ,
				{ 50 ,  {670.13118584 }} ,
				{ 53 ,  {762.12754055 }} ,
				{ 54 ,  {760.21824104 }} ,
				{ 55 ,  {753.58663382 }} ,
				{ 59 ,  {695.99180066 }} ,
				{ 60 ,  {630.47308595 }} ,
				{ 63 ,  {692.1009437 }} ,
				{ 64 ,  {707.74797907 }} ,
				{ 66 ,  {816.81265916 }} ,
				{ 68 ,  {897.11075364 }} ,
				{ 69 ,  {921.14633043 }} ,
				{ 74 ,  {936.66449274 }} ,
				{ 76 ,  {964.56286917 }} ,
				{ 77 ,  {954.01675074 }} ,
				{ 78 ,  {991.65423222 }} ,
				{ 80 ,  {1006.94766003 }} ,
				{ 81 ,  {1072.70246576 }} ,
				{ 83 ,  {1066.49672809 }} ,
				{ 86 ,  {1299.75326814 }} ,
				{ 88 ,  {1161.77589816 }} ,
				{ 89 ,  {1185.2623187 }} ,
				{ 90 ,  {1344.28572632 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 759.8154907226562) ? ( (Feature_2 <= 0.9655424654483795) ? ( (Feature_2 <= 0.41845081746578217) ? ( (Feature_1 <= 631.0441589355469) ? ( (Feature_2 <= 0.3770752549171448) ? ( (Feature_0 <= 45.53131294250488) ? ( (Feature_2 <= 0.18953273631632328) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) : ( 10 ) ) : ( 11 ) ) : ( (Feature_3 <= 2.999163269996643) ? ( (Feature_3 <= 2.021695613861084) ? ( 14 ) : ( 15 ) ) : ( (Feature_3 <= 5.213881731033325) ? ( (Feature_1 <= 519.7247924804688) ? ( 18 ) : ( 19 ) ) : ( (Feature_0 <= 74.51426315307617) ? ( (Feature_3 <= 9.190333366394043) ? ( (Feature_3 <= 7.75705361366272) ? ( (Feature_3 <= 6.307325124740601) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( 27 ) ) : ( 28 ) ) ) ) ) : ( (Feature_2 <= 0.9961365759372711) ? ( 30 ) : ( 31 ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_2 <= 0.09830964123830199) ? ( 34 ) : ( (Feature_2 <= 0.27968403697013855) ? ( (Feature_1 <= 1078.7010192871094) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_2 <= 0.7272883057594299) ? ( (Feature_1 <= 943.8363342285156) ? ( (Feature_3 <= 10.065526008605957) ? ( (Feature_0 <= 41.088409423828125) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( 48 ) ) : ( (Feature_2 <= 0.7691731154918671) ? ( 50 ) : ( (Feature_3 <= 10.213676452636719) ? ( (Feature_1 <= 853.6359252929688) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) : ( (Feature_2 <= 0.6582429111003876) ? ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_3 <= 3.712217926979065) ? ( 59 ) : ( 60 ) ) : ( (Feature_2 <= 0.45961907505989075) ? ( (Feature_0 <= 56.7153434753418) ? ( 63 ) : ( 64 ) ) : ( (Feature_2 <= 0.5139863640069962) ? ( 66 ) : ( (Feature_1 <= 1589.7283935546875) ? ( 68 ) : ( 69 ) ) ) ) ) : ( (Feature_3 <= 5.701060771942139) ? ( (Feature_2 <= 0.9684208631515503) ? ( (Feature_1 <= 1285.177001953125) ? ( (Feature_3 <= 2.2212273478507996) ? ( 74 ) : ( (Feature_2 <= 0.8842560350894928) ? ( 76 ) : ( 77 ) ) ) : ( 78 ) ) : ( (Feature_2 <= 0.9730744361877441) ? ( 80 ) : ( 81 ) ) ) : ( (Feature_1 <= 1218.5750732421875) ? ( 83 ) : ( (Feature_3 <= 9.706490516662598) ? ( (Feature_3 <= 5.94921612739563) ? ( 86 ) : ( (Feature_0 <= 49.81830644607544) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_2
	

	namespace EXT_SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {17.5126316 }} ,
				{ 5 ,  {42.01839185 }} ,
				{ 9 ,  {60.17684929 }} ,
				{ 10 ,  {66.46875936 }} ,
				{ 12 ,  {74.13416807 }} ,
				{ 13 ,  {81.61991679 }} ,
				{ 14 ,  {38.41875351 }} ,
				{ 19 ,  {112.36813458 }} ,
				{ 21 ,  {131.74760526 }} ,
				{ 22 ,  {123.98006476 }} ,
				{ 23 ,  {43.13717196 }} ,
				{ 25 ,  {337.38826236 }} ,
				{ 29 ,  {205.37013415 }} ,
				{ 31 ,  {217.90641985 }} ,
				{ 32 ,  {222.6809715 }} ,
				{ 33 ,  {238.91298805 }} ,
				{ 35 ,  {210.24199264 }} ,
				{ 37 ,  {287.26242769 }} ,
				{ 38 ,  {310.5792773 }} ,
				{ 39 ,  {692.1009437 }} ,
				{ 44 ,  {193.36881075 }} ,
				{ 46 ,  {96.00340237 }} ,
				{ 47 ,  {129.17022248 }} ,
				{ 50 ,  {367.2164339 }} ,
				{ 51 ,  {340.89432548 }} ,
				{ 53 ,  {241.12137081 }} ,
				{ 54 ,  {304.56729485 }} ,
				{ 58 ,  {565.71521017 }} ,
				{ 59 ,  {557.42418185 }} ,
				{ 60 ,  {762.12754055 }} ,
				{ 62 ,  {419.36346749 }} ,
				{ 63 ,  {501.63259526 }} ,
				{ 69 ,  {616.90506534 }} ,
				{ 70 ,  {670.13118584 }} ,
				{ 72 ,  {695.99180066 }} ,
				{ 73 ,  {737.40865774 }} ,
				{ 75 ,  {859.39726521 }} ,
				{ 76 ,  {753.58663382 }} ,
				{ 79 ,  {991.65423222 }} ,
				{ 81 ,  {897.11075364 }} ,
				{ 83 ,  {921.14633043 }} ,
				{ 84 ,  {936.08984202 }} ,
				{ 86 ,  {1054.16277579 }} ,
				{ 87 ,  {1161.77589816 }} ,
				{ 89 ,  {1450.4501203 }} ,
				{ 91 ,  {1072.70246576 }} ,
				{ 92 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_3 <= 5.149595379829407) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 8.204108476638794) ? ( (Feature_1 <= 960.5686950683594) ? ( (Feature_3 <= 2.6836572885513306) ? ( 9 ) : ( 10 ) ) : ( (Feature_2 <= 0.04905073344707489) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) ) : ( (Feature_1 <= 1473.4187622070312) ? ( (Feature_1 <= 384.3021240234375) ? ( (Feature_3 <= 9.283036708831787) ? ( (Feature_2 <= 0.43169064819812775) ? ( 19 ) : ( (Feature_0 <= 9.95294675976038) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) : ( (Feature_0 <= 7.288436412811279) ? ( 25 ) : ( (Feature_3 <= 4.7291343212127686) ? ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_3 <= 2.450538158416748) ? ( 29 ) : ( (Feature_1 <= 970.8556518554688) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (Feature_1 <= 505.9144287109375) ? ( 35 ) : ( (Feature_3 <= 4.917848348617554) ? ( 37 ) : ( 38 ) ) ) ) ) ) : ( 39 ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 228.15776824951172) ? ( (Feature_3 <= 1.9908787608146667) ? ( 44 ) : ( (Feature_2 <= 0.6791774034500122) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_0 <= 48.34617042541504) ? ( (Feature_1 <= 445.1126251220703) ? ( 50 ) : ( 51 ) ) : ( (Feature_3 <= 7.740604877471924) ? ( 53 ) : ( 54 ) ) ) ) : ( (Feature_0 <= 27.885141372680664) ? ( (Feature_3 <= 9.066634178161621) ? ( (Feature_2 <= 0.830794483423233) ? ( 58 ) : ( 59 ) ) : ( 60 ) ) : ( (Feature_1 <= 781.071533203125) ? ( 62 ) : ( 63 ) ) ) ) : ( (Feature_2 <= 0.8210701644420624) ? ( (Feature_1 <= 1250.4677734375) ? ( (Feature_2 <= 0.7550859153270721) ? ( (Feature_0 <= 55.98706817626953) ? ( (Feature_3 <= 9.74653673171997) ? ( 69 ) : ( 70 ) ) : ( (Feature_3 <= 6.502942442893982) ? ( 72 ) : ( 73 ) ) ) : ( (Feature_0 <= 55.88239097595215) ? ( 75 ) : ( 76 ) ) ) : ( (Feature_3 <= 4.895366311073303) ? ( (Feature_3 <= 2.325653314590454) ? ( 79 ) : ( (Feature_3 <= 2.7179555892944336) ? ( 81 ) : ( (Feature_0 <= 44.79623222351074) ? ( 83 ) : ( 84 ) ) ) ) : ( (Feature_2 <= 0.6714194118976593) ? ( 86 ) : ( 87 ) ) ) ) : ( (Feature_0 <= 40.97804832458496) ? ( 89 ) : ( (Feature_0 <= 66.26214790344238) ? ( 91 ) : ( 92 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_3
	

	namespace EXT_SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {45.71113412 }} ,
				{ 8 ,  {43.13717196 }} ,
				{ 9 ,  {66.46875936 }} ,
				{ 10 ,  {89.81697753 }} ,
				{ 13 ,  {131.74760526 }} ,
				{ 14 ,  {123.98006476 }} ,
				{ 15 ,  {96.00340237 }} ,
				{ 17 ,  {67.61473198 }} ,
				{ 20 ,  {168.83377965 }} ,
				{ 21 ,  {154.50461473 }} ,
				{ 23 ,  {217.90641985 }} ,
				{ 24 ,  {192.59288742 }} ,
				{ 28 ,  {340.89432548 }} ,
				{ 29 ,  {367.2164339 }} ,
				{ 32 ,  {193.36881075 }} ,
				{ 33 ,  {184.81176238 }} ,
				{ 34 ,  {241.12137081 }} ,
				{ 36 ,  {456.84183869 }} ,
				{ 38 ,  {565.71521017 }} ,
				{ 39 ,  {577.34865081 }} ,
				{ 43 ,  {74.13416807 }} ,
				{ 45 ,  {17.5126316 }} ,
				{ 46 ,  {42.01839185 }} ,
				{ 49 ,  {331.03594313 }} ,
				{ 50 ,  {310.5792773 }} ,
				{ 51 ,  {212.83015826 }} ,
				{ 55 ,  {651.51242251 }} ,
				{ 57 ,  {543.10577247 }} ,
				{ 58 ,  {469.13995216 }} ,
				{ 60 ,  {520.61172947 }} ,
				{ 65 ,  {680.96114859 }} ,
				{ 66 ,  {695.99180066 }} ,
				{ 68 ,  {670.13118584 }} ,
				{ 69 ,  {616.90506534 }} ,
				{ 71 ,  {784.59125862 }} ,
				{ 72 ,  {753.58663382 }} ,
				{ 74 ,  {692.1009437 }} ,
				{ 78 ,  {936.66449274 }} ,
				{ 79 ,  {936.08984202 }} ,
				{ 80 ,  {921.14633043 }} ,
				{ 81 ,  {816.81265916 }} ,
				{ 85 ,  {954.01675074 }} ,
				{ 86 ,  {964.56286917 }} ,
				{ 88 ,  {1066.49672809 }} ,
				{ 89 ,  {1072.70246576 }} ,
				{ 92 ,  {1344.28572632 }} ,
				{ 93 ,  {1299.75326814 }} ,
				{ 94 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 879.2583312988281) ? ( (Feature_2 <= 0.6483480334281921) ? ( (Feature_0 <= 56.1487979888916) ? ( (Feature_2 <= 0.3950181156396866) ? ( (Feature_1 <= 706.1800842285156) ? ( (Feature_0 <= 45.53131294250488) ? ( (Feature_3 <= 7.195557594299316) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) : ( 10 ) ) : ( (Feature_0 <= 29.003992080688477) ? ( (Feature_1 <= 268.46046447753906) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) : ( (Feature_2 <= 0.12303409352898598) ? ( 17 ) : ( (Feature_2 <= 0.27144117653369904) ? ( (Feature_2 <= 0.21585679054260254) ? ( 20 ) : ( 21 ) ) : ( (Feature_0 <= 89.41059494018555) ? ( 23 ) : ( 24 ) ) ) ) ) : ( (Feature_1 <= 550.2588806152344) ? ( (Feature_0 <= 54.83548164367676) ? ( (Feature_0 <= 32.780710220336914) ? ( 28 ) : ( 29 ) ) : ( (Feature_2 <= 0.862852156162262) ? ( (Feature_3 <= 4.256818473339081) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( 36 ) : ( (Feature_0 <= 41.088409423828125) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (Feature_2 <= 0.2865905463695526) ? ( (Feature_2 <= 0.08578749001026154) ? ( (Feature_3 <= 2.748636841773987) ? ( 43 ) : ( (Feature_2 <= 0.009662731783464551) ? ( 45 ) : ( 46 ) ) ) : ( (Feature_1 <= 1445.1787109375) ? ( (Feature_0 <= 49.90597724914551) ? ( 49 ) : ( 50 ) ) : ( 51 ) ) ) : ( (Feature_2 <= 0.7988642752170563) ? ( (Feature_0 <= 18.21147108078003) ? ( (Feature_3 <= 9.190508842468262) ? ( 55 ) : ( (Feature_1 <= 1014.3252258300781) ? ( 57 ) : ( 58 ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 60 ) : ( (Feature_1 <= 1217.648193359375) ? ( (Feature_2 <= 0.7474835813045502) ? ( (Feature_3 <= 5.924012064933777) ? ( (Feature_2 <= 0.5849176645278931) ? ( 65 ) : ( 66 ) ) : ( (Feature_1 <= 922.06787109375) ? ( 68 ) : ( 69 ) ) ) : ( (Feature_2 <= 0.7720292806625366) ? ( 71 ) : ( 72 ) ) ) : ( (Feature_2 <= 0.45233529806137085) ? ( 74 ) : ( (Feature_3 <= 5.587753176689148) ? ( (Feature_1 <= 1678.6380615234375) ? ( (Feature_3 <= 2.365181028842926) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( 81 ) ) ) ) ) ) : ( (Feature_1 <= 1257.4737548828125) ? ( (Feature_0 <= 38.316505432128906) ? ( (Feature_3 <= 4.150927901268005) ? ( 85 ) : ( 86 ) ) : ( (Feature_2 <= 0.9611290693283081) ? ( 88 ) : ( 89 ) ) ) : ( (Feature_3 <= 10.500863552093506) ? ( (Feature_0 <= 61.99332237243652) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_4
	

	namespace EXT_SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {42.01839185 }} ,
				{ 6 ,  {45.71113412 }} ,
				{ 9 ,  {38.41875351 }} ,
				{ 11 ,  {60.17684929 }} ,
				{ 13 ,  {66.46875936 }} ,
				{ 14 ,  {67.61473198 }} ,
				{ 16 ,  {74.13416807 }} ,
				{ 17 ,  {89.81697753 }} ,
				{ 21 ,  {43.13717196 }} ,
				{ 23 ,  {112.36813458 }} ,
				{ 24 ,  {123.98006476 }} ,
				{ 26 ,  {174.68142017 }} ,
				{ 28 ,  {217.90641985 }} ,
				{ 29 ,  {210.24199264 }} ,
				{ 34 ,  {222.6809715 }} ,
				{ 35 ,  {205.37013415 }} ,
				{ 36 ,  {251.33228306 }} ,
				{ 38 ,  {310.5792773 }} ,
				{ 40 ,  {345.51744456 }} ,
				{ 41 ,  {331.03594313 }} ,
				{ 42 ,  {469.13995216 }} ,
				{ 44 ,  {692.1009437 }} ,
				{ 45 ,  {520.61172947 }} ,
				{ 50 ,  {304.56729485 }} ,
				{ 52 ,  {367.2164339 }} ,
				{ 53 ,  {340.89432548 }} ,
				{ 56 ,  {193.36881075 }} ,
				{ 57 ,  {184.81176238 }} ,
				{ 59 ,  {241.12137081 }} ,
				{ 60 ,  {242.64398564 }} ,
				{ 64 ,  {456.84183869 }} ,
				{ 65 ,  {419.36346749 }} ,
				{ 66 ,  {557.42418185 }} ,
				{ 70 ,  {565.71521017 }} ,
				{ 71 ,  {616.90506534 }} ,
				{ 72 ,  {501.63259526 }} ,
				{ 75 ,  {762.12754055 }} ,
				{ 76 ,  {760.21824104 }} ,
				{ 78 ,  {670.13118584 }} ,
				{ 79 ,  {737.40865774 }} ,
				{ 86 ,  {921.14633043 }} ,
				{ 88 ,  {936.66449274 }} ,
				{ 89 ,  {936.08984202 }} ,
				{ 90 ,  {897.11075364 }} ,
				{ 91 ,  {964.56286917 }} ,
				{ 92 ,  {1161.77589816 }} ,
				{ 94 ,  {651.51242251 }} ,
				{ 96 ,  {816.81265916 }} ,
				{ 97 ,  {859.39726521 }} ,
				{ 101 ,  {1066.49672809 }} ,
				{ 102 ,  {1072.70246576 }} ,
				{ 103 ,  {1006.94766003 }} ,
				{ 106 ,  {1344.28572632 }} ,
				{ 107 ,  {1299.75326814 }} ,
				{ 108 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4695979952812195) ? ( (Feature_1 <= 1654.0126953125) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 39.70485877990723) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 730.0179748535156) ? ( (Feature_0 <= 28.79713726043701) ? ( 9 ) : ( (Feature_3 <= 2.6836572885513306) ? ( 11 ) : ( (Feature_3 <= 6.485330700874329) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_0 <= 14.973628997802734) ? ( 16 ) : ( 17 ) ) ) ) : ( (Feature_1 <= 845.2781066894531) ? ( (Feature_1 <= 384.3021240234375) ? ( (Feature_2 <= 0.3770752549171448) ? ( 21 ) : ( (Feature_2 <= 0.43169064819812775) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_2 <= 0.26129207015037537) ? ( 26 ) : ( (Feature_3 <= 6.153609991073608) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_2 <= 0.38769569993019104) ? ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_2 <= 0.19915488362312317) ? ( (Feature_0 <= 76.47050094604492) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (Feature_2 <= 0.25638625025749207) ? ( 38 ) : ( (Feature_1 <= 1119.4391479492188) ? ( 40 ) : ( 41 ) ) ) ) : ( 42 ) ) ) ) : ( (Feature_3 <= 3.8589189052581787) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_1 <= 1031.63671875) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_0 <= 62.90308380126953) ? ( (Feature_1 <= 360.9476013183594) ? ( 50 ) : ( (Feature_3 <= 2.7379260063171387) ? ( 52 ) : ( 53 ) ) ) : ( (Feature_1 <= 233.35620880126953) ? ( (Feature_3 <= 4.256818473339081) ? ( 56 ) : ( 57 ) ) : ( (Feature_3 <= 6.307325124740601) ? ( 59 ) : ( 60 ) ) ) ) : ( (Feature_1 <= 752.2415466308594) ? ( (Feature_2 <= 0.8929882645606995) ? ( (Feature_0 <= 33.87558364868164) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) : ( (Feature_2 <= 0.68940669298172) ? ( (Feature_3 <= 9.378531455993652) ? ( (Feature_0 <= 24.55506420135498) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) : ( (Feature_1 <= 890.76611328125) ? ( (Feature_0 <= 40.2320072054863) ? ( 75 ) : ( 76 ) ) : ( (Feature_1 <= 964.0109252929688) ? ( 78 ) : ( 79 ) ) ) ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_3 <= 6.53071928024292) ? ( (Feature_3 <= 5.738802194595337) ? ( (Feature_2 <= 0.775521993637085) ? ( (Feature_0 <= 57.488473892211914) ? ( (Feature_0 <= 40.40676498413086) ? ( 86 ) : ( (Feature_1 <= 1450.0098876953125) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) : ( 91 ) ) : ( 92 ) ) : ( (Feature_0 <= 15.068024635314941) ? ( 94 ) : ( (Feature_0 <= 31.37203884124756) ? ( 96 ) : ( 97 ) ) ) ) : ( (Feature_1 <= 1218.5750732421875) ? ( (Feature_0 <= 75.23531341552734) ? ( (Feature_2 <= 0.9611290693283081) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) : ( (Feature_3 <= 10.500863552093506) ? ( (Feature_2 <= 0.9059717059135437) ? ( 106 ) : ( 107 ) ) : ( 108 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_5
	

	namespace EXT_SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {38.41875351 }} ,
				{ 6 ,  {60.17684929 }} ,
				{ 8 ,  {67.61473198 }} ,
				{ 9 ,  {66.46875936 }} ,
				{ 10 ,  {89.81697753 }} ,
				{ 16 ,  {129.17022248 }} ,
				{ 17 ,  {123.98006476 }} ,
				{ 19 ,  {96.00340237 }} ,
				{ 20 ,  {112.36813458 }} ,
				{ 22 ,  {241.12137081 }} ,
				{ 25 ,  {193.36881075 }} ,
				{ 26 ,  {192.59288742 }} ,
				{ 27 ,  {184.81176238 }} ,
				{ 30 ,  {367.2164339 }} ,
				{ 31 ,  {419.36346749 }} ,
				{ 34 ,  {174.68142017 }} ,
				{ 35 ,  {217.90641985 }} ,
				{ 37 ,  {304.56729485 }} ,
				{ 40 ,  {238.91298805 }} ,
				{ 41 ,  {242.64398564 }} ,
				{ 42 ,  {287.26242769 }} ,
				{ 44 ,  {577.34865081 }} ,
				{ 45 ,  {501.63259526 }} ,
				{ 50 ,  {17.5126316 }} ,
				{ 51 ,  {42.01839185 }} ,
				{ 54 ,  {251.33228306 }} ,
				{ 56 ,  {205.37013415 }} ,
				{ 57 ,  {222.6809715 }} ,
				{ 58 ,  {331.03594313 }} ,
				{ 62 ,  {543.10577247 }} ,
				{ 65 ,  {680.96114859 }} ,
				{ 66 ,  {651.51242251 }} ,
				{ 68 ,  {630.47308595 }} ,
				{ 69 ,  {616.90506534 }} ,
				{ 72 ,  {737.40865774 }} ,
				{ 73 ,  {695.99180066 }} ,
				{ 74 ,  {784.59125862 }} ,
				{ 77 ,  {816.81265916 }} ,
				{ 79 ,  {897.11075364 }} ,
				{ 80 ,  {921.14633043 }} ,
				{ 81 ,  {1054.16277579 }} ,
				{ 85 ,  {1006.94766003 }} ,
				{ 87 ,  {954.01675074 }} ,
				{ 88 ,  {964.56286917 }} ,
				{ 89 ,  {760.21824104 }} ,
				{ 92 ,  {1450.4501203 }} ,
				{ 94 ,  {1299.75326814 }} ,
				{ 95 ,  {1344.28572632 }} ,
				{ 96 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 882.4659118652344) ? ( (Feature_2 <= 0.16206515207886696) ? ( (Feature_1 <= 730.0179748535156) ? ( (Feature_0 <= 28.79713726043701) ? ( 4 ) : ( (Feature_0 <= 46.1015510559082) ? ( 6 ) : ( (Feature_2 <= 0.07939156144857407) ? ( 8 ) : ( 9 ) ) ) ) : ( 10 ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_0 <= 59.396141052246094) ? ( (Feature_0 <= 29.003992080688477) ? ( (Feature_1 <= 226.3775177001953) ? ( 16 ) : ( 17 ) ) : ( (Feature_1 <= 189.92037963867188) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_0 <= 72.94347763061523) ? ( 22 ) : ( (Feature_3 <= 5.188283920288086) ? ( (Feature_1 <= 256.30464935302734) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (Feature_0 <= 44.211299896240234) ? ( (Feature_3 <= 6.321618914604187) ? ( 30 ) : ( 31 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_0 <= 82.8531608581543) ? ( 34 ) : ( 35 ) ) : ( (Feature_1 <= 380.60902404785156) ? ( 37 ) : ( (Feature_0 <= 77.5187873840332) ? ( (Feature_0 <= 60.338998794555664) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) ) ) ) : ( (Feature_1 <= 844.6205444335938) ? ( 44 ) : ( 45 ) ) ) ) : ( (Feature_2 <= 0.7771747410297394) ? ( (Feature_2 <= 0.3756476044654846) ? ( (Feature_2 <= 0.09071065997704864) ? ( (Feature_2 <= 0.009662731783464551) ? ( 50 ) : ( 51 ) ) : ( (Feature_2 <= 0.2384706288576126) ? ( (Feature_0 <= 32.52606248855591) ? ( 54 ) : ( (Feature_1 <= 1136.5460510253906) ? ( 56 ) : ( 57 ) ) ) : ( 58 ) ) ) : ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_0 <= 31.094983100891113) ? ( (Feature_1 <= 943.8363342285156) ? ( 62 ) : ( (Feature_0 <= 26.788522720336914) ? ( (Feature_3 <= 5.423927187919617) ? ( 65 ) : ( 66 ) ) : ( (Feature_3 <= 7.035265684127808) ? ( 68 ) : ( 69 ) ) ) ) : ( (Feature_2 <= 0.73157599568367) ? ( (Feature_1 <= 1106.8665771484375) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) ) : ( (Feature_2 <= 0.6221277117729187) ? ( (Feature_2 <= 0.5139863640069962) ? ( 77 ) : ( (Feature_1 <= 1589.7283935546875) ? ( 79 ) : ( 80 ) ) ) : ( 81 ) ) ) ) : ( (Feature_1 <= 1257.4737548828125) ? ( (Feature_3 <= 7.148200750350952) ? ( (Feature_3 <= 2.0208256244659424) ? ( 85 ) : ( (Feature_1 <= 1094.084716796875) ? ( 87 ) : ( 88 ) ) ) : ( 89 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_0 <= 42.05487632751465) ? ( 92 ) : ( (Feature_1 <= 1471.3319091796875) ? ( 94 ) : ( 95 ) ) ) : ( 96 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_6
	

	namespace EXT_SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {38.41875351 }} ,
				{ 7 ,  {89.81697753 }} ,
				{ 9 ,  {66.46875936 }} ,
				{ 10 ,  {67.61473198 }} ,
				{ 14 ,  {112.36813458 }} ,
				{ 16 ,  {131.74760526 }} ,
				{ 17 ,  {123.98006476 }} ,
				{ 18 ,  {96.00340237 }} ,
				{ 21 ,  {168.83377965 }} ,
				{ 22 ,  {154.50461473 }} ,
				{ 23 ,  {210.24199264 }} ,
				{ 26 ,  {242.64398564 }} ,
				{ 27 ,  {287.26242769 }} ,
				{ 29 ,  {174.68142017 }} ,
				{ 30 ,  {217.90641985 }} ,
				{ 34 ,  {193.36881075 }} ,
				{ 35 ,  {129.17022248 }} ,
				{ 37 ,  {304.56729485 }} ,
				{ 38 ,  {241.12137081 }} ,
				{ 41 ,  {367.2164339 }} ,
				{ 42 ,  {456.84183869 }} ,
				{ 45 ,  {557.42418185 }} ,
				{ 46 ,  {565.71521017 }} ,
				{ 47 ,  {577.34865081 }} ,
				{ 50 ,  {42.01839185 }} ,
				{ 53 ,  {251.33228306 }} ,
				{ 56 ,  {205.37013415 }} ,
				{ 57 ,  {212.83015826 }} ,
				{ 58 ,  {222.6809715 }} ,
				{ 61 ,  {331.03594313 }} ,
				{ 62 ,  {337.38826236 }} ,
				{ 63 ,  {310.5792773 }} ,
				{ 68 ,  {543.10577247 }} ,
				{ 69 ,  {469.13995216 }} ,
				{ 72 ,  {651.51242251 }} ,
				{ 73 ,  {616.90506534 }} ,
				{ 74 ,  {695.99180066 }} ,
				{ 77 ,  {816.81265916 }} ,
				{ 79 ,  {707.74797907 }} ,
				{ 80 ,  {692.1009437 }} ,
				{ 83 ,  {897.11075364 }} ,
				{ 85 ,  {921.14633043 }} ,
				{ 86 ,  {936.08984202 }} ,
				{ 87 ,  {1054.16277579 }} ,
				{ 92 ,  {936.66449274 }} ,
				{ 93 ,  {859.39726521 }} ,
				{ 96 ,  {954.01675074 }} ,
				{ 97 ,  {1006.94766003 }} ,
				{ 99 ,  {1072.70246576 }} ,
				{ 100 ,  {1066.49672809 }} ,
				{ 102 ,  {991.65423222 }} ,
				{ 105 ,  {1299.75326814 }} ,
				{ 107 ,  {1161.77589816 }} ,
				{ 108 ,  {1185.2623187 }} ,
				{ 109 ,  {1344.28572632 }} ,
				{ 111 ,  {670.13118584 }} ,
				{ 112 ,  {753.58663382 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 879.2583312988281) ? ( (Feature_2 <= 0.6569686830043793) ? ( (Feature_0 <= 70.73635482788086) ? ( (Feature_2 <= 0.14811982586979866) ? ( (Feature_0 <= 17.01914691925049) ? ( 5 ) : ( (Feature_0 <= 34.32356071472168) ? ( 7 ) : ( (Feature_0 <= 56.76608467102051) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_1 <= 384.3021240234375) ? ( (Feature_2 <= 0.5728262513875961) ? ( (Feature_1 <= 254.32003784179688) ? ( 14 ) : ( (Feature_1 <= 268.46046447753906) ? ( 16 ) : ( 17 ) ) ) : ( 18 ) ) : ( (Feature_2 <= 0.33155253529548645) ? ( (Feature_0 <= 65.30802154541016) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_1 <= 587.1426086425781) ? ( (Feature_0 <= 77.5187873840332) ? ( 26 ) : ( 27 ) ) : ( (Feature_2 <= 0.26129207015037537) ? ( 29 ) : ( 30 ) ) ) ) : ( (Feature_1 <= 360.9476013183594) ? ( (Feature_1 <= 228.15776824951172) ? ( (Feature_3 <= 5.7073065638542175) ? ( 34 ) : ( 35 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_3 <= 7.982725381851196) ? ( (Feature_1 <= 471.36253356933594) ? ( 41 ) : ( 42 ) ) : ( (Feature_0 <= 41.088409423828125) ? ( (Feature_0 <= 10.448195692151785) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) ) ) ) : ( (Feature_2 <= 0.3401701748371124) ? ( (Feature_2 <= 0.07029365515336394) ? ( 50 ) : ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_0 <= 28.485989093780518) ? ( 53 ) : ( (Feature_3 <= 4.4665937423706055) ? ( (Feature_3 <= 2.697997808456421) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( (Feature_0 <= 49.90597724914551) ? ( (Feature_2 <= 0.2634824812412262) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) ) : ( (Feature_2 <= 0.6791707277297974) ? ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_2 <= 0.5816180408000946) ? ( (Feature_1 <= 1014.3252258300781) ? ( 68 ) : ( 69 ) ) : ( (Feature_1 <= 1117.071044921875) ? ( (Feature_3 <= 8.784677982330322) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) ) : ( (Feature_2 <= 0.5139863640069962) ? ( (Feature_0 <= 32.07068729400635) ? ( 77 ) : ( (Feature_1 <= 1651.5484008789062) ? ( 79 ) : ( 80 ) ) ) : ( (Feature_3 <= 6.190743088722229) ? ( (Feature_1 <= 1558.752685546875) ? ( 83 ) : ( (Feature_2 <= 0.5527913272380829) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (Feature_3 <= 10.154731273651123) ? ( (Feature_1 <= 1283.81982421875) ? ( (Feature_2 <= 0.8569965362548828) ? ( (Feature_3 <= 4.352863371372223) ? ( 92 ) : ( 93 ) ) : ( (Feature_1 <= 1066.5789794921875) ? ( (Feature_1 <= 1010.49169921875) ? ( 96 ) : ( 97 ) ) : ( (Feature_3 <= 4.617027759552002) ? ( 99 ) : ( 100 ) ) ) ) : ( (Feature_3 <= 4.112993240356445) ? ( 102 ) : ( (Feature_3 <= 9.706490516662598) ? ( (Feature_1 <= 1354.1441040039062) ? ( 105 ) : ( (Feature_0 <= 49.81830644607544) ? ( 107 ) : ( 108 ) ) ) : ( 109 ) ) ) ) : ( (Feature_3 <= 10.46235704421997) ? ( 111 ) : ( 112 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_7
	

	namespace EXT_SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {81.61991679 }} ,
				{ 6 ,  {89.81697753 }} ,
				{ 9 ,  {60.17684929 }} ,
				{ 10 ,  {67.61473198 }} ,
				{ 11 ,  {42.01839185 }} ,
				{ 16 ,  {154.50461473 }} ,
				{ 18 ,  {112.36813458 }} ,
				{ 20 ,  {131.74760526 }} ,
				{ 21 ,  {123.98006476 }} ,
				{ 22 ,  {43.13717196 }} ,
				{ 23 ,  {287.26242769 }} ,
				{ 26 ,  {337.38826236 }} ,
				{ 27 ,  {469.13995216 }} ,
				{ 30 ,  {238.91298805 }} ,
				{ 32 ,  {222.6809715 }} ,
				{ 33 ,  {205.37013415 }} ,
				{ 36 ,  {331.03594313 }} ,
				{ 37 ,  {345.51744456 }} ,
				{ 38 ,  {251.33228306 }} ,
				{ 40 ,  {520.61172947 }} ,
				{ 42 ,  {692.1009437 }} ,
				{ 43 ,  {816.81265916 }} ,
				{ 48 ,  {184.81176238 }} ,
				{ 49 ,  {192.59288742 }} ,
				{ 51 ,  {304.56729485 }} ,
				{ 53 ,  {340.89432548 }} ,
				{ 54 ,  {367.2164339 }} ,
				{ 59 ,  {456.84183869 }} ,
				{ 61 ,  {501.63259526 }} ,
				{ 64 ,  {565.71521017 }} ,
				{ 65 ,  {557.42418185 }} ,
				{ 66 ,  {577.34865081 }} ,
				{ 69 ,  {670.13118584 }} ,
				{ 70 ,  {616.90506534 }} ,
				{ 71 ,  {543.10577247 }} ,
				{ 72 ,  {419.36346749 }} ,
				{ 74 ,  {760.21824104 }} ,
				{ 75 ,  {753.58663382 }} ,
				{ 80 ,  {680.96114859 }} ,
				{ 81 ,  {695.99180066 }} ,
				{ 82 ,  {630.47308595 }} ,
				{ 83 ,  {921.14633043 }} ,
				{ 89 ,  {936.66449274 }} ,
				{ 91 ,  {954.01675074 }} ,
				{ 92 ,  {964.56286917 }} ,
				{ 93 ,  {859.39726521 }} ,
				{ 95 ,  {991.65423222 }} ,
				{ 96 ,  {1054.16277579 }} ,
				{ 97 ,  {1072.70246576 }} ,
				{ 99 ,  {1299.75326814 }} ,
				{ 100 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 1574.9563598632812) ? ( (Feature_2 <= 0.13503176718950272) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_2 <= 0.07787800580263138) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 809.5308074951172) ? ( (Feature_1 <= 445.71485900878906) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) : ( (Feature_1 <= 668.6555480957031) ? ( (Feature_2 <= 0.5157754868268967) ? ( (Feature_3 <= 9.283036708831787) ? ( (Feature_2 <= 0.3268495053052902) ? ( 16 ) : ( (Feature_2 <= 0.43169064819812775) ? ( 18 ) : ( (Feature_0 <= 9.95294675976038) ? ( 20 ) : ( 21 ) ) ) ) : ( 22 ) ) : ( 23 ) ) : ( (Feature_0 <= 7.060354709625244) ? ( (Feature_3 <= 6.127349019050598) ? ( 26 ) : ( 27 ) ) : ( (Feature_3 <= 5.269083499908447) ? ( (Feature_1 <= 875.6427307128906) ? ( 30 ) : ( (Feature_2 <= 0.1755022555589676) ? ( 32 ) : ( 33 ) ) ) : ( (Feature_3 <= 8.606595039367676) ? ( (Feature_2 <= 0.30294613540172577) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) ) ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 40 ) : ( (Feature_2 <= 0.45233529806137085) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_1 <= 261.50308990478516) ? ( 48 ) : ( 49 ) ) : ( (Feature_1 <= 360.9476013183594) ? ( 51 ) : ( (Feature_0 <= 32.780710220336914) ? ( 53 ) : ( 54 ) ) ) ) : ( (Feature_0 <= 65.49116516113281) ? ( (Feature_3 <= 10.662372589111328) ? ( (Feature_1 <= 888.9274597167969) ? ( (Feature_3 <= 7.982725381851196) ? ( 59 ) : ( (Feature_2 <= 0.6163023412227631) ? ( 61 ) : ( (Feature_0 <= 41.088409423828125) ? ( (Feature_2 <= 0.830794483423233) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) ) : ( (Feature_3 <= 10.292253971099854) ? ( (Feature_1 <= 922.06787109375) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) ) : ( 72 ) ) : ( (Feature_1 <= 914.8431701660156) ? ( 74 ) : ( 75 ) ) ) ) : ( (Feature_2 <= 0.6107419431209564) ? ( (Feature_1 <= 1446.2763671875) ? ( (Feature_3 <= 3.712217926979065) ? ( (Feature_0 <= 43.189181327819824) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( 83 ) ) : ( (Feature_0 <= 64.08328247070312) ? ( (Feature_2 <= 0.9691559076309204) ? ( (Feature_1 <= 1285.177001953125) ? ( (Feature_3 <= 6.282563924789429) ? ( (Feature_3 <= 2.2212273478507996) ? ( 89 ) : ( (Feature_1 <= 1094.084716796875) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( (Feature_3 <= 5.446111440658569) ? ( 95 ) : ( 96 ) ) ) : ( 97 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( 99 ) : ( 100 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_8
	

	namespace EXT_SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {17.5126316 }} ,
				{ 7 ,  {42.01839185 }} ,
				{ 8 ,  {45.71113412 }} ,
				{ 11 ,  {74.13416807 }} ,
				{ 12 ,  {81.61991679 }} ,
				{ 13 ,  {89.81697753 }} ,
				{ 16 ,  {168.83377965 }} ,
				{ 17 ,  {174.68142017 }} ,
				{ 18 ,  {205.37013415 }} ,
				{ 21 ,  {217.90641985 }} ,
				{ 22 ,  {43.13717196 }} ,
				{ 25 ,  {337.38826236 }} ,
				{ 26 ,  {297.00533496 }} ,
				{ 27 ,  {520.61172947 }} ,
				{ 33 ,  {131.74760526 }} ,
				{ 37 ,  {242.64398564 }} ,
				{ 38 ,  {241.12137081 }} ,
				{ 39 ,  {210.24199264 }} ,
				{ 42 ,  {193.36881075 }} ,
				{ 43 ,  {192.59288742 }} ,
				{ 44 ,  {184.81176238 }} ,
				{ 45 ,  {287.26242769 }} ,
				{ 46 ,  {367.2164339 }} ,
				{ 48 ,  {419.36346749 }} ,
				{ 49 ,  {557.42418185 }} ,
				{ 52 ,  {1161.77589816 }} ,
				{ 57 ,  {680.96114859 }} ,
				{ 58 ,  {695.99180066 }} ,
				{ 61 ,  {630.47308595 }} ,
				{ 62 ,  {616.90506534 }} ,
				{ 63 ,  {577.34865081 }} ,
				{ 65 ,  {670.13118584 }} ,
				{ 67 ,  {784.59125862 }} ,
				{ 68 ,  {737.40865774 }} ,
				{ 72 ,  {692.1009437 }} ,
				{ 73 ,  {707.74797907 }} ,
				{ 74 ,  {816.81265916 }} ,
				{ 76 ,  {897.11075364 }} ,
				{ 77 ,  {1054.16277579 }} ,
				{ 80 ,  {753.58663382 }} ,
				{ 82 ,  {762.12754055 }} ,
				{ 83 ,  {760.21824104 }} ,
				{ 88 ,  {964.56286917 }} ,
				{ 89 ,  {954.01675074 }} ,
				{ 91 ,  {1006.94766003 }} ,
				{ 92 ,  {991.65423222 }} ,
				{ 93 ,  {1066.49672809 }} ,
				{ 94 ,  {1344.28572632 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.37775541841983795) ? ( (Feature_2 <= 0.24244262278079987) ? ( (Feature_0 <= 51.059814453125) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 26.660706520080566) ? ( 5 ) : ( (Feature_0 <= 39.70485877990723) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_3 <= 6.5704004764556885) ? ( (Feature_2 <= 0.04905073344707489) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) : ( (Feature_1 <= 904.9034729003906) ? ( (Feature_0 <= 69.96144485473633) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) : ( (Feature_1 <= 795.8204956054688) ? ( (Feature_3 <= 6.790009260177612) ? ( 21 ) : ( 22 ) ) : ( (Feature_1 <= 1468.0663452148438) ? ( (Feature_2 <= 0.29013291001319885) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (Feature_1 <= 745.0648193359375) ? ( (Feature_1 <= 537.6676635742188) ? ( (Feature_2 <= 0.9660912156105042) ? ( (Feature_1 <= 505.9144287109375) ? ( (Feature_0 <= 4.584194757044315) ? ( 33 ) : ( (Feature_0 <= 74.51426315307617) ? ( (Feature_1 <= 450.96368408203125) ? ( (Feature_2 <= 0.7532319128513336) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (Feature_3 <= 5.188283920288086) ? ( (Feature_1 <= 256.30464935302734) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) ) : ( 45 ) ) : ( 46 ) ) : ( (Feature_2 <= 0.8043907284736633) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_2 <= 0.7509067952632904) ? ( (Feature_0 <= 15.2035231590271) ? ( 52 ) : ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_2 <= 0.7113807201385498) ? ( (Feature_3 <= 3.712217926979065) ? ( (Feature_1 <= 1174.3853149414062) ? ( 57 ) : ( 58 ) ) : ( (Feature_0 <= 44.86544322967529) ? ( (Feature_3 <= 7.035265684127808) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) : ( (Feature_1 <= 964.0109252929688) ? ( 65 ) : ( (Feature_0 <= 48.13521385192871) ? ( 67 ) : ( 68 ) ) ) ) : ( (Feature_2 <= 0.5492568463087082) ? ( (Feature_2 <= 0.45961907505989075) ? ( (Feature_2 <= 0.4223918914794922) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) : ( (Feature_2 <= 0.6221277117729187) ? ( 76 ) : ( 77 ) ) ) ) ) : ( (Feature_1 <= 966.9429626464844) ? ( (Feature_2 <= 0.8243893384933472) ? ( 80 ) : ( (Feature_0 <= 40.2320072054863) ? ( 82 ) : ( 83 ) ) ) : ( (Feature_3 <= 8.24548888206482) ? ( (Feature_3 <= 5.95908784866333) ? ( (Feature_0 <= 41.483293533325195) ? ( (Feature_2 <= 0.8842560350894928) ? ( 88 ) : ( 89 ) ) : ( (Feature_3 <= 1.7724770307540894) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( 94 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_9
	

	namespace EXT_SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {112.36813458 }} ,
				{ 7 ,  {131.74760526 }} ,
				{ 8 ,  {123.98006476 }} ,
				{ 11 ,  {174.68142017 }} ,
				{ 13 ,  {205.37013415 }} ,
				{ 14 ,  {217.90641985 }} ,
				{ 17 ,  {210.24199264 }} ,
				{ 19 ,  {242.64398564 }} ,
				{ 20 ,  {238.91298805 }} ,
				{ 22 ,  {345.51744456 }} ,
				{ 23 ,  {287.26242769 }} ,
				{ 25 ,  {67.61473198 }} ,
				{ 27 ,  {43.13717196 }} ,
				{ 28 ,  {38.41875351 }} ,
				{ 31 ,  {42.01839185 }} ,
				{ 34 ,  {251.33228306 }} ,
				{ 35 ,  {212.83015826 }} ,
				{ 37 ,  {310.5792773 }} ,
				{ 39 ,  {331.03594313 }} ,
				{ 40 ,  {337.38826236 }} ,
				{ 43 ,  {520.61172947 }} ,
				{ 44 ,  {469.13995216 }} ,
				{ 45 ,  {630.47308595 }} ,
				{ 51 ,  {129.17022248 }} ,
				{ 52 ,  {96.00340237 }} ,
				{ 53 ,  {184.81176238 }} ,
				{ 56 ,  {340.89432548 }} ,
				{ 57 ,  {304.56729485 }} ,
				{ 58 ,  {241.12137081 }} ,
				{ 60 ,  {577.34865081 }} ,
				{ 61 ,  {557.42418185 }} ,
				{ 66 ,  {680.96114859 }} ,
				{ 67 ,  {695.99180066 }} ,
				{ 71 ,  {897.11075364 }} ,
				{ 74 ,  {964.56286917 }} ,
				{ 75 ,  {954.01675074 }} ,
				{ 76 ,  {936.66449274 }} ,
				{ 78 ,  {1066.49672809 }} ,
				{ 79 ,  {1006.94766003 }} ,
				{ 80 ,  {1072.70246576 }} ,
				{ 84 ,  {651.51242251 }} ,
				{ 85 ,  {616.90506534 }} ,
				{ 86 ,  {565.71521017 }} ,
				{ 90 ,  {762.12754055 }} ,
				{ 91 ,  {760.21824104 }} ,
				{ 92 ,  {753.58663382 }} ,
				{ 93 ,  {737.40865774 }} ,
				{ 96 ,  {1344.28572632 }} ,
				{ 97 ,  {1450.4501203 }} ,
				{ 98 ,  {1161.77589816 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5773111879825592) ? ( (Feature_1 <= 1039.0556335449219) ? ( (Feature_3 <= 9.719063758850098) ? ( (Feature_1 <= 338.8775634765625) ? ( (Feature_1 <= 254.32003784179688) ? ( 5 ) : ( (Feature_1 <= 268.46046447753906) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_0 <= 82.8531608581543) ? ( 11 ) : ( (Feature_3 <= 2.450538158416748) ? ( 13 ) : ( 14 ) ) ) : ( (Feature_0 <= 74.12876510620117) ? ( (Feature_0 <= 28.582610607147217) ? ( 17 ) : ( (Feature_1 <= 583.2995910644531) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_2 <= 0.4389971196651459) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_2 <= 0.056316668167710304) ? ( 25 ) : ( (Feature_3 <= 9.939465045928955) ? ( 27 ) : ( 28 ) ) ) ) : ( (Feature_2 <= 0.288340300321579) ? ( (Feature_1 <= 1165.0020141601562) ? ( 31 ) : ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_0 <= 28.485989093780518) ? ( 34 ) : ( 35 ) ) : ( (Feature_2 <= 0.25638625025749207) ? ( 37 ) : ( (Feature_2 <= 0.2634824812412262) ? ( 39 ) : ( 40 ) ) ) ) ) : ( (Feature_2 <= 0.4877350926399231) ? ( (Feature_3 <= 7.345672845840454) ? ( 43 ) : ( 44 ) ) : ( 45 ) ) ) ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 233.35620880126953) ? ( (Feature_1 <= 200.20413970947266) ? ( (Feature_0 <= 26.78800344467163) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( (Feature_0 <= 40.84831237792969) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( (Feature_2 <= 0.8527685105800629) ? ( 60 ) : ( 61 ) ) ) : ( (Feature_1 <= 1474.9396362304688) ? ( (Feature_3 <= 7.37491250038147) ? ( (Feature_2 <= 0.5975654423236847) ? ( (Feature_2 <= 0.5849176645278931) ? ( 66 ) : ( 67 ) ) : ( (Feature_2 <= 0.9730744361877441) ? ( (Feature_0 <= 66.5127944946289) ? ( (Feature_2 <= 0.6779927313327789) ? ( 71 ) : ( (Feature_1 <= 1226.0113525390625) ? ( (Feature_2 <= 0.8842560350894928) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) : ( (Feature_2 <= 0.960394024848938) ? ( 78 ) : ( 79 ) ) ) : ( 80 ) ) ) : ( (Feature_2 <= 0.68940669298172) ? ( (Feature_2 <= 0.6584039926528931) ? ( (Feature_3 <= 8.784677982330322) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) : ( (Feature_1 <= 988.0879821777344) ? ( (Feature_1 <= 914.8431701660156) ? ( (Feature_0 <= 40.2320072054863) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) ) ) : ( (Feature_1 <= 1634.6642456054688) ? ( (Feature_3 <= 10.500863552093506) ? ( 96 ) : ( 97 ) ) : ( 98 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_10
	

	namespace EXT_SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {74.13416807 }} ,
				{ 8 ,  {60.17684929 }} ,
				{ 10 ,  {45.71113412 }} ,
				{ 12 ,  {38.41875351 }} ,
				{ 13 ,  {42.01839185 }} ,
				{ 15 ,  {89.81697753 }} ,
				{ 16 ,  {66.46875936 }} ,
				{ 20 ,  {131.74760526 }} ,
				{ 22 ,  {168.83377965 }} ,
				{ 23 ,  {154.50461473 }} ,
				{ 24 ,  {43.13717196 }} ,
				{ 28 ,  {222.6809715 }} ,
				{ 29 ,  {212.83015826 }} ,
				{ 30 ,  {251.33228306 }} ,
				{ 32 ,  {337.38826236 }} ,
				{ 33 ,  {297.00533496 }} ,
				{ 37 ,  {217.90641985 }} ,
				{ 39 ,  {287.26242769 }} ,
				{ 40 ,  {310.5792773 }} ,
				{ 41 ,  {174.68142017 }} ,
				{ 42 ,  {707.74797907 }} ,
				{ 44 ,  {520.61172947 }} ,
				{ 46 ,  {692.1009437 }} ,
				{ 47 ,  {816.81265916 }} ,
				{ 54 ,  {192.59288742 }} ,
				{ 55 ,  {193.36881075 }} ,
				{ 56 ,  {184.81176238 }} ,
				{ 57 ,  {241.12137081 }} ,
				{ 58 ,  {304.56729485 }} ,
				{ 60 ,  {557.42418185 }} ,
				{ 63 ,  {419.36346749 }} ,
				{ 64 ,  {456.84183869 }} ,
				{ 65 ,  {367.2164339 }} ,
				{ 71 ,  {651.51242251 }} ,
				{ 73 ,  {616.90506534 }} ,
				{ 74 ,  {630.47308595 }} ,
				{ 76 ,  {670.13118584 }} ,
				{ 77 ,  {695.99180066 }} ,
				{ 79 ,  {859.39726521 }} ,
				{ 81 ,  {753.58663382 }} ,
				{ 83 ,  {762.12754055 }} ,
				{ 84 ,  {760.21824104 }} ,
				{ 85 ,  {954.01675074 }} ,
				{ 89 ,  {921.14633043 }} ,
				{ 91 ,  {936.08984202 }} ,
				{ 92 ,  {936.66449274 }} ,
				{ 94 ,  {991.65423222 }} ,
				{ 95 ,  {964.56286917 }} ,
				{ 98 ,  {1185.2623187 }} ,
				{ 99 ,  {1161.77589816 }} ,
				{ 100 ,  {1299.75326814 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 1654.0126953125) ? ( (Feature_0 <= 69.02992248535156) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.10105706006288528) ? ( (Feature_3 <= 3.53000545501709) ? ( (Feature_2 <= 0.0722297877073288) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 574.9090576171875) ? ( 10 ) : ( (Feature_0 <= 27.489428520202637) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_0 <= 34.32356071472168) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_1 <= 876.18896484375) ? ( (Feature_3 <= 9.283036708831787) ? ( (Feature_1 <= 420.4779815673828) ? ( 20 ) : ( (Feature_2 <= 0.21585679054260254) ? ( 22 ) : ( 23 ) ) ) : ( 24 ) ) : ( (Feature_2 <= 0.24022038280963898) ? ( (Feature_2 <= 0.1915559023618698) ? ( (Feature_1 <= 1456.9424438476562) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (Feature_0 <= 24.325881958007812) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (Feature_1 <= 1422.635009765625) ? ( (Feature_3 <= 7.336902618408203) ? ( (Feature_3 <= 4.276979923248291) ? ( 37 ) : ( (Feature_1 <= 860.7923278808594) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( 42 ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 44 ) : ( (Feature_1 <= 1665.9483032226562) ? ( 46 ) : ( 47 ) ) ) ) : ( (Feature_1 <= 752.2415466308594) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_2 <= 0.862852156162262) ? ( (Feature_3 <= 5.188283920288086) ? ( (Feature_0 <= 95.66353988647461) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) : ( 58 ) ) : ( (Feature_0 <= 16.43863796815276) ? ( 60 ) : ( (Feature_0 <= 37.63541030883789) ? ( (Feature_2 <= 0.7017911672592163) ? ( 63 ) : ( 64 ) ) : ( 65 ) ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.945286363363266) ? ( (Feature_2 <= 0.7550859153270721) ? ( (Feature_0 <= 40.232760429382324) ? ( (Feature_0 <= 18.30630397796631) ? ( 71 ) : ( (Feature_1 <= 1052.1464233398438) ? ( 73 ) : ( 74 ) ) ) : ( (Feature_1 <= 1040.0833129882812) ? ( 76 ) : ( 77 ) ) ) : ( (Feature_2 <= 0.7796316146850586) ? ( 79 ) : ( (Feature_2 <= 0.8243893384933472) ? ( 81 ) : ( (Feature_0 <= 40.2320072054863) ? ( 83 ) : ( 84 ) ) ) ) ) : ( 85 ) ) : ( (Feature_3 <= 5.701060771942139) ? ( (Feature_2 <= 0.749254047870636) ? ( (Feature_2 <= 0.5527913272380829) ? ( 89 ) : ( (Feature_2 <= 0.6571033298969269) ? ( 91 ) : ( 92 ) ) ) : ( (Feature_3 <= 3.9025793075561523) ? ( 94 ) : ( 95 ) ) ) : ( (Feature_2 <= 0.9173916876316071) ? ( (Feature_1 <= 1517.4764404296875) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_11
	

	namespace EXT_SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {60.17684929 }} ,
				{ 7 ,  {67.61473198 }} ,
				{ 9 ,  {45.71113412 }} ,
				{ 10 ,  {38.41875351 }} ,
				{ 13 ,  {43.13717196 }} ,
				{ 15 ,  {112.36813458 }} ,
				{ 16 ,  {96.00340237 }} ,
				{ 19 ,  {168.83377965 }} ,
				{ 20 ,  {154.50461473 }} ,
				{ 21 ,  {210.24199264 }} ,
				{ 24 ,  {242.64398564 }} ,
				{ 25 ,  {287.26242769 }} ,
				{ 27 ,  {217.90641985 }} ,
				{ 28 ,  {192.59288742 }} ,
				{ 32 ,  {129.17022248 }} ,
				{ 33 ,  {184.81176238 }} ,
				{ 35 ,  {241.12137081 }} ,
				{ 37 ,  {367.2164339 }} ,
				{ 38 ,  {304.56729485 }} ,
				{ 40 ,  {456.84183869 }} ,
				{ 42 ,  {577.34865081 }} ,
				{ 43 ,  {557.42418185 }} ,
				{ 48 ,  {74.13416807 }} ,
				{ 49 ,  {89.81697753 }} ,
				{ 52 ,  {205.37013415 }} ,
				{ 53 ,  {212.83015826 }} ,
				{ 54 ,  {222.6809715 }} ,
				{ 58 ,  {331.03594313 }} ,
				{ 60 ,  {297.00533496 }} ,
				{ 61 ,  {310.5792773 }} ,
				{ 62 ,  {345.51744456 }} ,
				{ 63 ,  {520.61172947 }} ,
				{ 69 ,  {543.10577247 }} ,
				{ 70 ,  {565.71521017 }} ,
				{ 71 ,  {469.13995216 }} ,
				{ 74 ,  {680.96114859 }} ,
				{ 75 ,  {695.99180066 }} ,
				{ 77 ,  {616.90506534 }} ,
				{ 78 ,  {630.47308595 }} ,
				{ 80 ,  {1006.94766003 }} ,
				{ 83 ,  {784.59125862 }} ,
				{ 85 ,  {762.12754055 }} ,
				{ 86 ,  {760.21824104 }} ,
				{ 87 ,  {737.40865774 }} ,
				{ 91 ,  {816.81265916 }} ,
				{ 92 ,  {692.1009437 }} ,
				{ 96 ,  {921.14633043 }} ,
				{ 97 ,  {936.08984202 }} ,
				{ 98 ,  {897.11075364 }} ,
				{ 101 ,  {991.65423222 }} ,
				{ 102 ,  {964.56286917 }} ,
				{ 103 ,  {1054.16277579 }} ,
				{ 105 ,  {1299.75326814 }} ,
				{ 106 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 821.2744140625) ? ( (Feature_2 <= 0.6789427101612091) ? ( (Feature_0 <= 70.73635482788086) ? ( (Feature_2 <= 0.14585810899734497) ? ( (Feature_1 <= 503.65269470214844) ? ( (Feature_1 <= 445.71485900878906) ? ( 6 ) : ( 7 ) ) : ( (Feature_1 <= 574.9090576171875) ? ( 9 ) : ( 10 ) ) ) : ( (Feature_1 <= 370.1616973876953) ? ( (Feature_2 <= 0.3770752549171448) ? ( 13 ) : ( (Feature_2 <= 0.5308420062065125) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_2 <= 0.33155253529548645) ? ( (Feature_0 <= 65.30802154541016) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) ) : ( (Feature_0 <= 84.98217010498047) ? ( (Feature_1 <= 460.4898681640625) ? ( 24 ) : ( 25 ) ) : ( (Feature_2 <= 0.43111681938171387) ? ( 27 ) : ( 28 ) ) ) ) : ( (Feature_1 <= 463.0554962158203) ? ( (Feature_2 <= 0.8033285439014435) ? ( (Feature_0 <= 45.91063833236694) ? ( 32 ) : ( 33 ) ) : ( (Feature_1 <= 301.26104736328125) ? ( 35 ) : ( (Feature_0 <= 48.34617042541504) ? ( 37 ) : ( 38 ) ) ) ) : ( (Feature_3 <= 7.982725381851196) ? ( 40 ) : ( (Feature_2 <= 0.8527685105800629) ? ( 42 ) : ( 43 ) ) ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_2 <= 0.21707050502300262) ? ( (Feature_0 <= 33.216888427734375) ? ( (Feature_3 <= 4.388666868209839) ? ( 48 ) : ( 49 ) ) : ( (Feature_3 <= 4.4665937423706055) ? ( (Feature_1 <= 1310.6217956542969) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) : ( (Feature_1 <= 1461.7972412109375) ? ( (Feature_2 <= 0.3295965641736984) ? ( (Feature_0 <= 36.89346694946289) ? ( 58 ) : ( (Feature_1 <= 1069.47021484375) ? ( 60 ) : ( 61 ) ) ) : ( 62 ) ) : ( 63 ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.68940669298172) ? ( (Feature_0 <= 23.65783977508545) ? ( (Feature_1 <= 1014.3252258300781) ? ( (Feature_2 <= 0.6215287744998932) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) : ( (Feature_3 <= 3.712217926979065) ? ( (Feature_3 <= 2.5632612705230713) ? ( 74 ) : ( 75 ) ) : ( (Feature_1 <= 1052.1464233398438) ? ( 77 ) : ( 78 ) ) ) ) : ( (Feature_3 <= 1.2762383222579956) ? ( 80 ) : ( (Feature_3 <= 10.076786518096924) ? ( (Feature_2 <= 0.8026998043060303) ? ( 83 ) : ( (Feature_1 <= 853.6359252929688) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (Feature_0 <= 69.84485244750977) ? ( (Feature_2 <= 0.5139863640069962) ? ( (Feature_0 <= 32.07068729400635) ? ( 91 ) : ( 92 ) ) : ( (Feature_2 <= 0.6221277117729187) ? ( (Feature_2 <= 0.5880618095397949) ? ( (Feature_2 <= 0.5527913272380829) ? ( 96 ) : ( 97 ) ) : ( 98 ) ) : ( (Feature_1 <= 1488.353515625) ? ( (Feature_3 <= 3.9025793075561523) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) ) ) : ( (Feature_1 <= 1354.1441040039062) ? ( 105 ) : ( 106 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_12
	

	namespace EXT_SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {60.17684929 }} ,
				{ 7 ,  {45.71113412 }} ,
				{ 8 ,  {112.36813458 }} ,
				{ 11 ,  {210.24199264 }} ,
				{ 13 ,  {174.68142017 }} ,
				{ 14 ,  {154.50461473 }} ,
				{ 15 ,  {131.74760526 }} ,
				{ 18 ,  {43.13717196 }} ,
				{ 19 ,  {38.41875351 }} ,
				{ 20 ,  {67.61473198 }} ,
				{ 24 ,  {96.00340237 }} ,
				{ 25 ,  {129.17022248 }} ,
				{ 27 ,  {193.36881075 }} ,
				{ 28 ,  {192.59288742 }} ,
				{ 32 ,  {340.89432548 }} ,
				{ 33 ,  {367.2164339 }} ,
				{ 35 ,  {287.26242769 }} ,
				{ 36 ,  {304.56729485 }} ,
				{ 38 ,  {456.84183869 }} ,
				{ 39 ,  {419.36346749 }} ,
				{ 43 ,  {17.5126316 }} ,
				{ 45 ,  {74.13416807 }} ,
				{ 46 ,  {81.61991679 }} ,
				{ 49 ,  {205.37013415 }} ,
				{ 50 ,  {251.33228306 }} ,
				{ 52 ,  {310.5792773 }} ,
				{ 53 ,  {297.00533496 }} ,
				{ 58 ,  {543.10577247 }} ,
				{ 59 ,  {469.13995216 }} ,
				{ 62 ,  {577.34865081 }} ,
				{ 65 ,  {680.96114859 }} ,
				{ 68 ,  {651.51242251 }} ,
				{ 69 ,  {616.90506534 }} ,
				{ 70 ,  {670.13118584 }} ,
				{ 72 ,  {695.99180066 }} ,
				{ 73 ,  {737.40865774 }} ,
				{ 75 ,  {784.59125862 }} ,
				{ 76 ,  {859.39726521 }} ,
				{ 79 ,  {692.1009437 }} ,
				{ 80 ,  {816.81265916 }} ,
				{ 83 ,  {897.11075364 }} ,
				{ 86 ,  {936.08984202 }} ,
				{ 87 ,  {921.14633043 }} ,
				{ 88 ,  {964.56286917 }} ,
				{ 89 ,  {1054.16277579 }} ,
				{ 92 ,  {762.12754055 }} ,
				{ 93 ,  {1066.49672809 }} ,
				{ 95 ,  {1450.4501203 }} ,
				{ 98 ,  {1344.28572632 }} ,
				{ 99 ,  {1299.75326814 }} ,
				{ 100 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 759.8154907226562) ? ( (Feature_2 <= 0.5157754868268967) ? ( (Feature_3 <= 9.719063758850098) ? ( (Feature_3 <= 6.903095722198486) ? ( (Feature_2 <= 0.25685082376003265) ? ( (Feature_1 <= 493.1333312988281) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_2 <= 0.46043506264686584) ? ( (Feature_1 <= 536.3196411132812) ? ( 11 ) : ( (Feature_2 <= 0.22980211675167084) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) ) : ( (Feature_3 <= 10.075586318969727) ? ( (Feature_1 <= 362.6981964111328) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (Feature_1 <= 329.4079284667969) ? ( (Feature_1 <= 195.00569915771484) ? ( (Feature_3 <= 5.8958892822265625) ? ( 24 ) : ( 25 ) ) : ( (Feature_3 <= 2.733761489391327) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_1 <= 550.2588806152344) ? ( (Feature_0 <= 48.34617042541504) ? ( (Feature_2 <= 0.8227225840091705) ? ( 32 ) : ( 33 ) ) : ( (Feature_2 <= 0.6876582503318787) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_0 <= 33.87558364868164) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (Feature_2 <= 0.3650708496570587) ? ( (Feature_2 <= 0.11834849417209625) ? ( (Feature_2 <= 0.025156566640362144) ? ( 43 ) : ( (Feature_2 <= 0.04905073344707489) ? ( 45 ) : ( 46 ) ) ) : ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_1 <= 1078.7010192871094) ? ( 49 ) : ( 50 ) ) : ( (Feature_3 <= 5.843006610870361) ? ( 52 ) : ( 53 ) ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.5803560316562653) ? ( (Feature_1 <= 1014.3252258300781) ? ( 58 ) : ( 59 ) ) : ( (Feature_2 <= 0.7474835813045502) ? ( (Feature_1 <= 852.9207458496094) ? ( 62 ) : ( (Feature_0 <= 55.98706817626953) ? ( (Feature_2 <= 0.6016833484172821) ? ( 65 ) : ( (Feature_3 <= 9.74653673171997) ? ( (Feature_2 <= 0.6352589428424835) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) ) : ( (Feature_2 <= 0.6494959592819214) ? ( 72 ) : ( 73 ) ) ) ) : ( (Feature_3 <= 4.198257684707642) ? ( 75 ) : ( 76 ) ) ) ) : ( (Feature_2 <= 0.5139863640069962) ? ( (Feature_1 <= 1665.9483032226562) ? ( 79 ) : ( 80 ) ) : ( (Feature_3 <= 7.034178972244263) ? ( (Feature_3 <= 2.7179555892944336) ? ( 83 ) : ( (Feature_3 <= 4.647210955619812) ? ( (Feature_3 <= 3.451445698738098) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) ) : ( 89 ) ) ) ) : ( (Feature_1 <= 1218.5750732421875) ? ( (Feature_2 <= 0.9372595250606537) ? ( 92 ) : ( 93 ) ) : ( (Feature_0 <= 42.05487632751465) ? ( 95 ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_0 <= 61.99332237243652) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_13
	

	namespace EXT_SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {60.17684929 }} ,
				{ 7 ,  {66.46875936 }} ,
				{ 8 ,  {74.13416807 }} ,
				{ 10 ,  {67.61473198 }} ,
				{ 13 ,  {45.71113412 }} ,
				{ 14 ,  {42.01839185 }} ,
				{ 15 ,  {38.41875351 }} ,
				{ 18 ,  {251.33228306 }} ,
				{ 19 ,  {222.6809715 }} ,
				{ 20 ,  {154.50461473 }} ,
				{ 24 ,  {43.13717196 }} ,
				{ 26 ,  {112.36813458 }} ,
				{ 28 ,  {131.74760526 }} ,
				{ 29 ,  {123.98006476 }} ,
				{ 32 ,  {238.91298805 }} ,
				{ 33 ,  {210.24199264 }} ,
				{ 34 ,  {287.26242769 }} ,
				{ 37 ,  {331.03594313 }} ,
				{ 38 ,  {310.5792773 }} ,
				{ 41 ,  {520.61172947 }} ,
				{ 42 ,  {469.13995216 }} ,
				{ 43 ,  {707.74797907 }} ,
				{ 48 ,  {96.00340237 }} ,
				{ 50 ,  {241.12137081 }} ,
				{ 52 ,  {184.81176238 }} ,
				{ 53 ,  {192.59288742 }} ,
				{ 55 ,  {242.64398564 }} ,
				{ 57 ,  {367.2164339 }} ,
				{ 58 ,  {340.89432548 }} ,
				{ 60 ,  {456.84183869 }} ,
				{ 62 ,  {501.63259526 }} ,
				{ 64 ,  {565.71521017 }} ,
				{ 65 ,  {577.34865081 }} ,
				{ 71 ,  {630.47308595 }} ,
				{ 74 ,  {680.96114859 }} ,
				{ 75 ,  {670.13118584 }} ,
				{ 76 ,  {695.99180066 }} ,
				{ 77 ,  {737.40865774 }} ,
				{ 79 ,  {784.59125862 }} ,
				{ 80 ,  {859.39726521 }} ,
				{ 83 ,  {991.65423222 }} ,
				{ 85 ,  {897.11075364 }} ,
				{ 87 ,  {921.14633043 }} ,
				{ 88 ,  {936.08984202 }} ,
				{ 90 ,  {1054.16277579 }} ,
				{ 91 ,  {1161.77589816 }} ,
				{ 94 ,  {1185.2623187 }} ,
				{ 96 ,  {954.01675074 }} ,
				{ 98 ,  {1072.70246576 }} ,
				{ 99 ,  {1066.49672809 }} ,
				{ 101 ,  {1344.28572632 }} ,
				{ 102 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_3 <= 3.731728196144104) ? ( (Feature_1 <= 1039.6250305175781) ? ( (Feature_0 <= 46.1015510559082) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_1 <= 503.65269470214844) ? ( 10 ) : ( (Feature_2 <= 0.048495128750801086) ? ( (Feature_1 <= 856.9492797851562) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) ) : ( (Feature_2 <= 0.22757987678050995) ? ( (Feature_0 <= 32.52606248855591) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (Feature_1 <= 924.4729614257812) ? ( (Feature_1 <= 384.3021240234375) ? ( (Feature_2 <= 0.3770752549171448) ? ( 24 ) : ( (Feature_2 <= 0.43169064819812775) ? ( 26 ) : ( (Feature_1 <= 268.46046447753906) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_0 <= 65.32382011413574) ? ( (Feature_2 <= 0.3653184175491333) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) ) : ( (Feature_2 <= 0.2865905463695526) ? ( (Feature_0 <= 49.90597724914551) ? ( 37 ) : ( 38 ) ) : ( (Feature_0 <= 59.27326774597168) ? ( (Feature_3 <= 7.345672845840454) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_3 <= 7.2798871994018555) ? ( (Feature_1 <= 334.6766052246094) ? ( (Feature_0 <= 53.82084274291992) ? ( 48 ) : ( (Feature_0 <= 72.94347763061523) ? ( 50 ) : ( (Feature_1 <= 261.50308990478516) ? ( 52 ) : ( 53 ) ) ) ) : ( (Feature_2 <= 0.60986328125) ? ( 55 ) : ( (Feature_3 <= 2.7379260063171387) ? ( 57 ) : ( 58 ) ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( 60 ) : ( (Feature_2 <= 0.6163023412227631) ? ( 62 ) : ( (Feature_3 <= 9.088586807250977) ? ( 64 ) : ( 65 ) ) ) ) ) : ( (Feature_2 <= 0.7955629825592041) ? ( (Feature_1 <= 1250.4677734375) ? ( (Feature_2 <= 0.7474835813045502) ? ( (Feature_3 <= 10.325467109680176) ? ( (Feature_2 <= 0.5639469921588898) ? ( 71 ) : ( (Feature_0 <= 55.98706817626953) ? ( (Feature_2 <= 0.6641415357589722) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) : ( 77 ) ) : ( (Feature_0 <= 38.019554138183594) ? ( 79 ) : ( 80 ) ) ) : ( (Feature_3 <= 4.895366311073303) ? ( (Feature_3 <= 2.325653314590454) ? ( 83 ) : ( (Feature_1 <= 1558.752685546875) ? ( 85 ) : ( (Feature_0 <= 44.79623222351074) ? ( 87 ) : ( 88 ) ) ) ) : ( (Feature_2 <= 0.6714194118976593) ? ( 90 ) : ( 91 ) ) ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( (Feature_2 <= 0.8984350860118866) ? ( 94 ) : ( (Feature_0 <= 38.316505432128906) ? ( 96 ) : ( (Feature_3 <= 4.617027759552002) ? ( 98 ) : ( 99 ) ) ) ) : ( (Feature_2 <= 0.9026165306568146) ? ( 101 ) : ( 102 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_14
	

	namespace EXT_SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {74.13416807 }} ,
				{ 5 ,  {66.46875936 }} ,
				{ 7 ,  {17.5126316 }} ,
				{ 9 ,  {38.41875351 }} ,
				{ 10 ,  {45.71113412 }} ,
				{ 14 ,  {154.50461473 }} ,
				{ 15 ,  {43.13717196 }} ,
				{ 18 ,  {205.37013415 }} ,
				{ 19 ,  {168.83377965 }} ,
				{ 22 ,  {217.90641985 }} ,
				{ 23 ,  {238.91298805 }} ,
				{ 27 ,  {297.00533496 }} ,
				{ 28 ,  {310.5792773 }} ,
				{ 29 ,  {345.51744456 }} ,
				{ 30 ,  {251.33228306 }} ,
				{ 31 ,  {520.61172947 }} ,
				{ 36 ,  {129.17022248 }} ,
				{ 37 ,  {131.74760526 }} ,
				{ 40 ,  {184.81176238 }} ,
				{ 42 ,  {192.59288742 }} ,
				{ 43 ,  {193.36881075 }} ,
				{ 44 ,  {241.12137081 }} ,
				{ 48 ,  {340.89432548 }} ,
				{ 49 ,  {367.2164339 }} ,
				{ 51 ,  {242.64398564 }} ,
				{ 52 ,  {304.56729485 }} ,
				{ 54 ,  {557.42418185 }} ,
				{ 55 ,  {456.84183869 }} ,
				{ 61 ,  {469.13995216 }} ,
				{ 63 ,  {577.34865081 }} ,
				{ 64 ,  {543.10577247 }} ,
				{ 66 ,  {630.47308595 }} ,
				{ 68 ,  {680.96114859 }} ,
				{ 69 ,  {695.99180066 }} ,
				{ 72 ,  {784.59125862 }} ,
				{ 74 ,  {762.12754055 }} ,
				{ 75 ,  {760.21824104 }} ,
				{ 76 ,  {737.40865774 }} ,
				{ 79 ,  {954.01675074 }} ,
				{ 80 ,  {1006.94766003 }} ,
				{ 82 ,  {1072.70246576 }} ,
				{ 83 ,  {1066.49672809 }} ,
				{ 87 ,  {897.11075364 }} ,
				{ 88 ,  {921.14633043 }} ,
				{ 90 ,  {816.81265916 }} ,
				{ 91 ,  {707.74797907 }} ,
				{ 94 ,  {936.66449274 }} ,
				{ 95 ,  {964.56286917 }} ,
				{ 98 ,  {1161.77589816 }} ,
				{ 99 ,  {1185.2623187 }} ,
				{ 100 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.3869176059961319) ? ( (Feature_2 <= 0.14378926530480385) ? ( (Feature_3 <= 3.201897621154785) ? ( (Feature_0 <= 31.27036476135254) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 4.048245787620544) ? ( 7 ) : ( (Feature_0 <= 28.22689914703369) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_1 <= 1435.1996459960938) ? ( (Feature_1 <= 617.5478210449219) ? ( (Feature_2 <= 0.29017697274684906) ? ( 14 ) : ( 15 ) ) : ( (Feature_2 <= 0.20348544418811798) ? ( (Feature_3 <= 4.8048388957977295) ? ( 18 ) : ( 19 ) ) : ( (Feature_1 <= 846.92822265625) ? ( (Feature_2 <= 0.3052070587873459) ? ( 22 ) : ( 23 ) ) : ( (Feature_3 <= 8.606595039367676) ? ( (Feature_2 <= 0.3295965641736984) ? ( (Feature_0 <= 56.108591079711914) ? ( 27 ) : ( 28 ) ) : ( 29 ) ) : ( 30 ) ) ) ) ) : ( 31 ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_0 <= 42.35955572128296) ? ( (Feature_1 <= 222.62197875976562) ? ( 36 ) : ( 37 ) ) : ( (Feature_2 <= 0.862852156162262) ? ( (Feature_0 <= 83.92750930786133) ? ( 40 ) : ( (Feature_2 <= 0.6747548580169678) ? ( 42 ) : ( 43 ) ) ) : ( 44 ) ) ) : ( (Feature_1 <= 541.9518432617188) ? ( (Feature_3 <= 5.396366000175476) ? ( (Feature_2 <= 0.8227225840091705) ? ( 48 ) : ( 49 ) ) : ( (Feature_2 <= 0.706224262714386) ? ( 51 ) : ( 52 ) ) ) : ( (Feature_1 <= 568.2017517089844) ? ( 54 ) : ( 55 ) ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.9372595250606537) ? ( (Feature_2 <= 0.7113807201385498) ? ( (Feature_1 <= 1122.6353149414062) ? ( (Feature_0 <= 9.381374835968018) ? ( 61 ) : ( (Feature_3 <= 10.065526008605957) ? ( 63 ) : ( 64 ) ) ) : ( (Feature_2 <= 0.5639469921588898) ? ( 66 ) : ( (Feature_1 <= 1174.3853149414062) ? ( 68 ) : ( 69 ) ) ) ) : ( (Feature_3 <= 10.076786518096924) ? ( (Feature_3 <= 5.063894510269165) ? ( 72 ) : ( (Feature_1 <= 853.6359252929688) ? ( 74 ) : ( 75 ) ) ) : ( 76 ) ) ) : ( (Feature_1 <= 1066.5789794921875) ? ( (Feature_1 <= 1010.49169921875) ? ( 79 ) : ( 80 ) ) : ( (Feature_3 <= 4.617027759552002) ? ( 82 ) : ( 83 ) ) ) ) : ( (Feature_2 <= 0.6582429111003876) ? ( (Feature_3 <= 5.587753176689148) ? ( (Feature_3 <= 3.0702849626541138) ? ( 87 ) : ( 88 ) ) : ( (Feature_3 <= 7.417936086654663) ? ( 90 ) : ( 91 ) ) ) : ( (Feature_3 <= 5.738802194595337) ? ( (Feature_3 <= 3.56094628572464) ? ( 94 ) : ( 95 ) ) : ( (Feature_3 <= 10.14390516281128) ? ( (Feature_0 <= 49.81830644607544) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace EXT_SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			EXT_SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			EXT_SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
