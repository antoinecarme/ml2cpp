// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LogisticRegression
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LogisticRegression_FourClass_10.exe ml2cpp-demo_LogisticRegression_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		std::any score_0 = 0.5233269049240379 * Feature_0 + -0.6074340892111345 * Feature_1 + -0.023427441380779367 * Feature_2 + -0.3982274984368932 * Feature_3 + 0.726789337532782 * Feature_4 + -0.26493768252659433 * Feature_5 + 0.10972066456500955 * Feature_6 + 0.6108844850185677 * Feature_7 + 0.47851252079450146 * Feature_8 + 0.10260509407910166 * Feature_9 + 0.937475226988781;

		std::any logistic_0 = logistic(score_0);

		std::any score_1 = -0.04970053591389931 * Feature_0 + 0.22578318254494376 * Feature_1 + 0.39681543125465296 * Feature_2 + 0.4487611256882911 * Feature_3 + 0.3468957774552111 * Feature_4 + -0.02406945221751675 * Feature_5 + -0.14781085461067286 * Feature_6 + -0.03396783583176235 * Feature_7 + -0.5161667601556162 * Feature_8 + 0.02757232603964917 * Feature_9 + -0.1733364291287359;

		std::any logistic_1 = logistic(score_1);

		std::any score_2 = 0.06005040927757819 * Feature_0 + -0.6188251520766354 * Feature_1 + -0.4468236198286656 * Feature_2 + -0.5094562916921762 * Feature_3 + -0.5204653416144328 * Feature_4 + -0.036165859379771584 * Feature_5 + 0.08585676929240257 * Feature_6 + 0.5196673855344469 * Feature_7 + 0.5410537875511094 * Feature_8 + -0.19642121833924397 * Feature_9 + 0.6827645106631197;

		std::any logistic_2 = logistic(score_2);

		std::any score_3 = -0.5336767782877172 * Feature_0 + 1.000476058742827 * Feature_1 + 0.07343562995479085 * Feature_2 + 0.45892266444077745 * Feature_3 + -0.5532197733735597 * Feature_4 + 0.3251729941238818 * Feature_5 + -0.04776657924673909 * Feature_6 + -1.0965840347212519 * Feature_7 + -0.5033995481899953 * Feature_8 + 0.06624379822049256 * Feature_9 + -1.4469033085231662;

		std::any logistic_3 = logistic(score_3);

		tTable lScores = tTable();

		lScores["Score"] = { 
			score_0,
			score_1,
			score_2,
			score_3
		};

		tTable lSoftMaxTable = soft_max(lScores, false);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
