// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LogisticRegression
// Dataset : BinaryClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LogisticRegression_BinaryClass_10.exe ml2cpp-demo_LogisticRegression_BinaryClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lScores = tTable();

		lScores["Score"] = { 
			-( -1.1540137521623945 * Feature_0 + -0.13990978824015507 * Feature_1 + -0.5691570173483117 * Feature_2 + 0.467514789508327 * Feature_3 + -0.3669408138567798 * Feature_4 + -0.5304131813086257 * Feature_5 + -0.38687863970482905 * Feature_6 + -0.4852621943715103 * Feature_7 + 0.12899722091501456 * Feature_8 + 1.31144470107359 * Feature_9 + 0.725301396106546 ),
			-1.1540137521623945 * Feature_0 + -0.13990978824015507 * Feature_1 + -0.5691570173483117 * Feature_2 + 0.467514789508327 * Feature_3 + -0.3669408138567798 * Feature_4 + -0.5304131813086257 * Feature_5 + -0.38687863970482905 * Feature_6 + -0.4852621943715103 * Feature_7 + 0.12899722091501456 * Feature_8 + 1.31144470107359 * Feature_9 + 0.725301396106546
		};

		tTable lSoftMaxTable = soft_max(lScores, false);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_10.csv");
	return 0;
}
