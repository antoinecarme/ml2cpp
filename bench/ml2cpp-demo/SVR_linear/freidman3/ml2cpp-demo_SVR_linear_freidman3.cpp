// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVR_linear
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVR_linear_freidman3.exe ml2cpp-demo_SVR_linear_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> lProblem_data_dual = { 
	 -0.0005151850060619847 , -0.004158236926683148 , -0.00030815185949676553 , -0.004611354917400281 , -0.00030297462649771 , -0.04056798901408041 , 0.00030815185949676553 , 0.0005151850060619847 , 0.04407221884903289 , -0.0002463939737039072 , 0.009015985817787339 , -0.0032012552084547865 ,};
	

	std::vector<std::vector<std::any> > lProblem_data_sv = { 
	 { 40.442330919192635, 551.0711911042478, 0.03866274947464787, 4.578076302455036 },
	 { 38.24928980103384, 135.90560294712617, 0.6479362057456745, 2.179461386442667 },
	 { 56.48709973533751, 1282.8666984094589, 0.1679032802018684, 4.671288394126134 },
	 { 99.96662363577734, 209.47236840414524, 0.7902072202716324, 1.8022959941601326 },
	 { 38.96738973035813, 1162.8273648517609, 0.013518045508856713, 6.780775777362427 },
	 { 14.354024845151192, 1727.5875493321003, 0.005807417979881824, 3.518415193774599 },
	 { 5.555683279187528, 1271.8773900420756, 0.26523222910347455, 2.1959763981915064 },
	 { 0.11836099216243623, 559.8947439915403, 0.995587810764828, 8.379542913119769 },
	 { 35.204122625647635, 1709.6137391765267, 0.5384102305994837, 3.8037750547337037 },
	 { 49.3998858198411, 243.93515665851513, 0.41374778042760696, 6.0193130914022674 },
	 { 1.5021310253122144, 126.64944659397821, 0.3404027104874394, 9.813039096423058 },
	 { 89.79240360827384, 1393.0059875788913, 0.8484215372640762, 9.34953230770002 },
	};
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3 };

		std::any lDotProduct = linear_kernel( lProblem_data_dual, lProblem_data_sv, inputs ) + -1.375206508964953;


		tTable lTable;

		std::any  lEstimator = lDotProduct;
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
