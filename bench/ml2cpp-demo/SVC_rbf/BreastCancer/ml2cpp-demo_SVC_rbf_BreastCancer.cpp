// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_rbf
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_rbf_BreastCancer.exe ml2cpp-demo_SVC_rbf_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	std::vector<std::any> lProblem_data_dual = { 
	 -1.0 , -0.04535925557532356 , -1.0 , -1.0 , -1.0 , -1.0 , -1.0 , -1.0 , -0.4144092121127498 , -0.3534182551304743 , 1.0 , 1.0 , 0.8131867228185475 , 1.0 , 1.0 , 1.0 , 1.0 , 1.0 ,};
	

	std::vector<std::vector<std::any> > lProblem_data_sv = { 
	 { 13.77, 22.29, 90.63, 588.9, 0.12, 0.1267, 0.1385, 0.06526, 0.1834, 0.06877, 0.6191, 2.112, 4.906, 49.7, 0.0138, 0.03348, 0.04665, 0.0206, 0.02689, 0.004306, 16.39, 34.01, 111.6, 806.9, 0.1737, 0.3122, 0.3809, 0.1673, 0.308, 0.09333 },
	 { 19.53, 18.9, 129.5, 1217.0, 0.115, 0.1642, 0.2197, 0.1062, 0.1792, 0.06552, 1.111, 1.161, 7.237, 133.0, 0.006056, 0.03203, 0.05638, 0.01733, 0.01884, 0.004787, 25.93, 26.24, 171.1, 2053.0, 0.1495, 0.4116, 0.6121, 0.198, 0.2968, 0.09929 },
	 { 13.82, 24.49, 92.33, 595.9, 0.1162, 0.1681, 0.1357, 0.06759, 0.2275, 0.07237, 0.4751, 1.528, 2.974, 39.05, 0.00968, 0.03856, 0.03476, 0.01616, 0.02434, 0.006995, 16.01, 32.94, 106.0, 788.0, 0.1794, 0.3966, 0.3381, 0.1521, 0.3651, 0.1183 },
	 { 16.26, 21.88, 107.5, 826.8, 0.1165, 0.1283, 0.1799, 0.07981, 0.1869, 0.06532, 0.5706, 1.457, 2.961, 57.72, 0.01056, 0.03756, 0.05839, 0.01186, 0.04022, 0.006187, 17.73, 25.21, 113.7, 975.2, 0.1426, 0.2116, 0.3344, 0.1047, 0.2736, 0.07953 },
	 { 17.57, 15.05, 115.0, 955.1, 0.09847, 0.1157, 0.09875, 0.07953, 0.1739, 0.06149, 0.6003, 0.8225, 4.655, 61.1, 0.005627, 0.03033, 0.03407, 0.01354, 0.01925, 0.003742, 20.01, 19.52, 134.9, 1227.0, 0.1255, 0.2812, 0.2489, 0.1456, 0.2756, 0.07919 },
	 { 13.61, 24.69, 87.76, 572.6, 0.09258, 0.07862, 0.05285, 0.03085, 0.1761, 0.0613, 0.231, 1.005, 1.752, 19.83, 0.004088, 0.01174, 0.01796, 0.00688, 0.01323, 0.001465, 16.89, 35.64, 113.2, 848.7, 0.1471, 0.2884, 0.3796, 0.1329, 0.347, 0.079 },
	 { 13.98, 19.62, 91.12, 599.5, 0.106, 0.1133, 0.1126, 0.06463, 0.1669, 0.06544, 0.2208, 0.9533, 1.602, 18.85, 0.005314, 0.01791, 0.02185, 0.009567, 0.01223, 0.002846, 17.04, 30.8, 113.9, 869.3, 0.1613, 0.3568, 0.4069, 0.1827, 0.3179, 0.1055 },
	 { 14.45, 20.22, 94.49, 642.7, 0.09872, 0.1206, 0.118, 0.0598, 0.195, 0.06466, 0.2092, 0.6509, 1.446, 19.42, 0.004044, 0.01597, 0.02, 0.007303, 0.01522, 0.001976, 18.33, 30.12, 117.9, 1044.0, 0.1552, 0.4056, 0.4967, 0.1838, 0.4753, 0.1013 },
	 { 16.13, 20.68, 108.1, 798.8, 0.117, 0.2022, 0.1722, 0.1028, 0.2164, 0.07356, 0.5692, 1.073, 3.854, 54.18, 0.007026, 0.02501, 0.03188, 0.01297, 0.01689, 0.004142, 20.96, 31.48, 136.8, 1315.0, 0.1789, 0.4233, 0.4784, 0.2073, 0.3706, 0.1142 },
	 { 18.08, 21.84, 117.4, 1024.0, 0.07371, 0.08642, 0.1103, 0.05778, 0.177, 0.0534, 0.6362, 1.305, 4.312, 76.36, 0.00553, 0.05296, 0.0611, 0.01444, 0.0214, 0.005036, 19.76, 24.7, 129.1, 1228.0, 0.08822, 0.1963, 0.2535, 0.09181, 0.2369, 0.06558 },
	 { 14.44, 15.18, 93.97, 640.1, 0.0997, 0.1021, 0.08487, 0.05532, 0.1724, 0.06081, 0.2406, 0.7394, 2.12, 21.2, 0.005706, 0.02297, 0.03114, 0.01493, 0.01454, 0.002528, 15.85, 19.85, 108.6, 766.9, 0.1316, 0.2735, 0.3103, 0.1599, 0.2691, 0.07683 },
	 { 13.27, 17.02, 84.55, 546.4, 0.08445, 0.04994, 0.03554, 0.02456, 0.1496, 0.05674, 0.2927, 0.8907, 2.044, 24.68, 0.006032, 0.01104, 0.02259, 0.009057, 0.01482, 0.002496, 15.14, 23.6, 98.84, 708.8, 0.1276, 0.1311, 0.1786, 0.09678, 0.2506, 0.07623 },
	 { 14.06, 17.18, 89.75, 609.1, 0.08045, 0.05361, 0.02681, 0.03251, 0.1641, 0.05764, 0.1504, 1.685, 1.237, 12.67, 0.005371, 0.01273, 0.01132, 0.009155, 0.01719, 0.001444, 14.92, 25.34, 96.42, 684.5, 0.1066, 0.1231, 0.0846, 0.07911, 0.2523, 0.06609 },
	 { 14.59, 22.68, 96.39, 657.1, 0.08473, 0.133, 0.1029, 0.03736, 0.1454, 0.06147, 0.2254, 1.108, 2.224, 19.54, 0.004242, 0.04639, 0.06578, 0.01606, 0.01638, 0.004406, 15.48, 27.27, 105.9, 733.5, 0.1026, 0.3171, 0.3662, 0.1105, 0.2258, 0.08004 },
	 { 14.11, 12.88, 90.03, 616.5, 0.09309, 0.05306, 0.01765, 0.02733, 0.1373, 0.057, 0.2571, 1.081, 1.558, 23.92, 0.006692, 0.01132, 0.005717, 0.006627, 0.01416, 0.002476, 15.53, 18.0, 98.4, 749.9, 0.1281, 0.1109, 0.05307, 0.0589, 0.21, 0.07083 },
	 { 14.03, 21.25, 89.79, 603.4, 0.0907, 0.06945, 0.01462, 0.01896, 0.1517, 0.05835, 0.2589, 1.503, 1.667, 22.07, 0.007389, 0.01383, 0.007302, 0.01004, 0.01263, 0.002925, 15.33, 30.28, 98.27, 715.5, 0.1287, 0.1513, 0.06231, 0.07963, 0.2226, 0.07617 },
	 { 13.68, 16.33, 87.76, 575.5, 0.09277, 0.07255, 0.01752, 0.0188, 0.1631, 0.06155, 0.2047, 0.4801, 1.373, 17.25, 0.003828, 0.007228, 0.007078, 0.005077, 0.01054, 0.001697, 15.85, 20.2, 101.6, 773.4, 0.1264, 0.1564, 0.1206, 0.08704, 0.2806, 0.07782 },
	 { 14.04, 15.98, 89.78, 611.2, 0.08458, 0.05895, 0.03534, 0.02944, 0.1714, 0.05898, 0.3892, 1.046, 2.644, 32.74, 0.007976, 0.01295, 0.01608, 0.009046, 0.02005, 0.00283, 15.66, 21.58, 101.2, 750.0, 0.1195, 0.1252, 0.1117, 0.07453, 0.2725, 0.07234 },
	};
	

	double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
		return rbf_kernel( lProblem_data_dual, lProblem_data_sv, inputs, 9.17041263546023e-07 ) + 0.10112514367156486;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29 };

		std::any lDotProduct_0_1 = rbf_kernel( lProblem_data_dual, lProblem_data_sv, inputs, 9.17041263546023e-07 ) + 0.10112514367156486;

		std::any lLogistic_0_1 = logistic(-3.1662451364328796 * lDotProduct_0_1 + -1.3216454864876326);


		tTable lTable;

		lTable["Score"] = { 
			-lDotProduct_0_1,
			lDotProduct_0_1 
		} ;
		lTable["Proba"] = { 
			lLogistic_0_1,
			1.0 - lLogistic_0_1 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
