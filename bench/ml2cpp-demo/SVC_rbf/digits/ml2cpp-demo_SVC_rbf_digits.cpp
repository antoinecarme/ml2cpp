// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_rbf
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_rbf_digits.exe ml2cpp-demo_SVC_rbf_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace pb_0_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_1 = { 
		0.660622970989436 ,0.9317468124702522 ,0.0 ,0.5946386531281321 ,1.0 ,-0.5901980419220508 ,-0.12953372010324607 ,-0.6893951606113209 ,-0.7778815139512024 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_1 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		};
		
	
		double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.00043172746232553904 ) + -0.46539178004048093;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_1 = rbf_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.00043172746232553904 ) + -0.46539178004048093;
	
			std::any lLogistic_0_1 = logistic(-2.41665368690993 * lDotProduct_0_1 + 0.10334855841327531);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_1,
				lDotProduct_0_1 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_1,
				1.0 - lLogistic_0_1 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_1
	

	namespace pb_0_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_2 = { 
		0.45829210663580167 ,0.7822616095220193 ,0.0 ,0.8661175541784307 ,1.0 ,-0.8544699269863597 ,-0.44378095719419514 ,-1.0 ,-0.2243160860843327 ,-0.35545263671489347 ,-0.0 ,-0.0 ,-0.0 ,-0.22865166335647055 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_2 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		};
		
	
		double get_problem_0_2_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.00043172746232553904 ) + -0.19855942796382522;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_2",
				"Proba_0", "Proba_2",
				"LogProba_0", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_2 = rbf_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.00043172746232553904 ) + -0.19855942796382522;
	
			std::any lLogistic_0_2 = logistic(-2.4840637910439325 * lDotProduct_0_2 + 0.30615949888942706);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_2,
				lDotProduct_0_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_2,
				1.0 - lLogistic_0_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_2
	

	namespace pb_0_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_3 = { 
		0.0 ,0.9675845187694904 ,0.0 ,1.0 ,0.9125734890374689 ,-0.6030733634326708 ,-0.3085053969736905 ,-0.8945930368632609 ,-1.0 ,-0.073986210537337 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_3 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_0_3_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs, 0.00043172746232553904 ) + -0.19746343555785095;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_3",
				"Proba_0", "Proba_3",
				"LogProba_0", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_3 = rbf_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs, 0.00043172746232553904 ) + -0.19746343555785095;
	
			std::any lLogistic_0_3 = logistic(-2.334236868466868 * lDotProduct_0_3 + 0.15935289077951253);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_3,
				lDotProduct_0_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_3,
				1.0 - lLogistic_0_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_3
	

	namespace pb_0_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_4 = { 
		0.76537884443793 ,0.6564918470923985 ,0.3010361881466265 ,0.2770931203230449 ,1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_4 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_4_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs, 0.00043172746232553904 ) + -0.12579300860773251;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_4",
				"Proba_0", "Proba_4",
				"LogProba_0", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_4 = rbf_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs, 0.00043172746232553904 ) + -0.12579300860773251;
	
			std::any lLogistic_0_4 = logistic(-2.7136438538777035 * lDotProduct_0_4 + 0.9601272847960118);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_4,
				lDotProduct_0_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_4,
				1.0 - lLogistic_0_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_4
	

	namespace pb_0_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_5 = { 
		0.27726032593709327 ,1.0 ,0.0 ,0.7623593100467526 ,1.0 ,-1.0 ,-0.0 ,-0.9648920518197763 ,-0.42150439869778555 ,-0.653223185466284 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_5 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_5_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs, 0.00043172746232553904 ) + -0.14450522384910916;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_5",
				"Proba_0", "Proba_5",
				"LogProba_0", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_5 = rbf_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs, 0.00043172746232553904 ) + -0.14450522384910916;
	
			std::any lLogistic_0_5 = logistic(-2.2466236416778016 * lDotProduct_0_5 + 0.23966162577527975);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_5,
				lDotProduct_0_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_5,
				1.0 - lLogistic_0_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_5
	

	namespace pb_0_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_6 = { 
		0.8479139135417963 ,0.9652547184735165 ,0.0 ,0.1627559129532108 ,1.0 ,-0.3209159742323802 ,-0.0 ,-0.8008947704656939 ,-1.0 ,-0.8541138002704495 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_6 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_0_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs, 0.00043172746232553904 ) + -0.07126537349867765;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_6",
				"Proba_0", "Proba_6",
				"LogProba_0", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_6 = rbf_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs, 0.00043172746232553904 ) + -0.07126537349867765;
	
			std::any lLogistic_0_6 = logistic(-2.304978283242363 * lDotProduct_0_6 + -0.19056710097733193);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_6,
				lDotProduct_0_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_6,
				1.0 - lLogistic_0_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_6
	

	namespace pb_0_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_7 = { 
		0.0 ,0.43819794016169034 ,0.38755496452031385 ,0.7362469293334638 ,1.0 ,-0.6601677506757495 ,-0.6765088241287206 ,-0.14667308764675327 ,-0.5794955560267337 ,-0.49915461553751095 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_7 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs, 0.00043172746232553904 ) + -0.06526627180800233;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_7",
				"Proba_0", "Proba_7",
				"LogProba_0", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_7 = rbf_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs, 0.00043172746232553904 ) + -0.06526627180800233;
	
			std::any lLogistic_0_7 = logistic(-2.371839309212314 * lDotProduct_0_7 + 0.04736070804220966);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_7,
				lDotProduct_0_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_7,
				1.0 - lLogistic_0_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_7
	

	namespace pb_0_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_8 = { 
		0.578895066195799 ,1.0 ,0.0 ,1.0 ,1.0 ,-0.7925199328281959 ,-1.0 ,-0.8262704261087346 ,-0.9601047072588684 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_8 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_0_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs, 0.00043172746232553904 ) + -0.4372218587050486;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_8",
				"Proba_0", "Proba_8",
				"LogProba_0", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_8 = rbf_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs, 0.00043172746232553904 ) + -0.4372218587050486;
	
			std::any lLogistic_0_8 = logistic(-2.3421935398324196 * lDotProduct_0_8 + 0.7754375098387032);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_8,
				lDotProduct_0_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_8,
				1.0 - lLogistic_0_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_8
	

	namespace pb_0_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_9 = { 
		0.6615477284754665 ,0.5720906560130457 ,0.0 ,1.0 ,1.0 ,-0.5482811043698033 ,-1.0 ,-1.0 ,-0.6853572801187089 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_9 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_0_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs, 0.00043172746232553904 ) + -0.2156263142950668;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_9",
				"Proba_0", "Proba_9",
				"LogProba_0", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_9 = rbf_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs, 0.00043172746232553904 ) + -0.2156263142950668;
	
			std::any lLogistic_0_9 = logistic(-2.6774230604833615 * lDotProduct_0_9 + 0.8145036146214907);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_9,
				lDotProduct_0_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_9,
				1.0 - lLogistic_0_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_9
	

	namespace pb_1_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_2 = { 
		0.5777983075880854 ,0.8639883590253592 ,1.0 ,1.0 ,1.0 ,-1.0 ,-0.6135509317564577 ,-1.0 ,-0.44822631100060883 ,-0.0 ,-0.006431016315633429 ,-0.76193964984561 ,-0.1885575277920742 ,-0.42308122990306035 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_2 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		};
		
	
		double get_problem_1_2_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.00043172746232553904 ) + 0.1902852278499359;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_2",
				"Proba_1", "Proba_2",
				"LogProba_1", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_2 = rbf_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.00043172746232553904 ) + 0.1902852278499359;
	
			std::any lLogistic_1_2 = logistic(-3.6126261726605344 * lDotProduct_1_2 + -0.7002153987909002);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_2,
				lDotProduct_1_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_2,
				1.0 - lLogistic_1_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_2
	

	namespace pb_1_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_3 = { 
		0.9882625418463806 ,0.15864763632135404 ,1.0 ,0.6033060613460429 ,1.0 ,-0.7448486260405782 ,-0.659396402465244 ,-0.8507298533313454 ,-1.0 ,-0.4952413576766099 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_3 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_1_3_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs, 0.00043172746232553904 ) + 0.29859378677102694;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_3",
				"Proba_1", "Proba_3",
				"LogProba_1", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_3 = rbf_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs, 0.00043172746232553904 ) + 0.29859378677102694;
	
			std::any lLogistic_1_3 = logistic(-2.9587221787478737 * lDotProduct_1_3 + -0.22177733018266743);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_3,
				lDotProduct_1_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_3,
				1.0 - lLogistic_1_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_3
	

	namespace pb_1_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_4 = { 
		0.5198671019872306 ,0.4096555561133978 ,0.4031404361105201 ,1.0 ,0.6673369057888516 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_4 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_4_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs, 0.00043172746232553904 ) + 0.46555679826943225;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_4",
				"Proba_1", "Proba_4",
				"LogProba_1", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_4 = rbf_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs, 0.00043172746232553904 ) + 0.46555679826943225;
	
			std::any lLogistic_1_4 = logistic(-3.659208159539068 * lDotProduct_1_4 + 1.3594160520918968);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_4,
				lDotProduct_1_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_4,
				1.0 - lLogistic_1_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_4
	

	namespace pb_1_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_5 = { 
		0.509029149504859 ,0.43226508896399557 ,0.5788085110586435 ,1.0 ,0.9785201025950997 ,-1.0 ,-0.47186883379050815 ,-0.7280452981933133 ,-0.2987087201387762 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_5 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_5_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs, 0.00043172746232553904 ) + 0.2412105660961532;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_5",
				"Proba_1", "Proba_5",
				"LogProba_1", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_5 = rbf_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs, 0.00043172746232553904 ) + 0.2412105660961532;
	
			std::any lLogistic_1_5 = logistic(-3.2297259908346745 * lDotProduct_1_5 + -0.34205107217158615);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_5,
				lDotProduct_1_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_5,
				1.0 - lLogistic_1_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_5
	

	namespace pb_1_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_6 = { 
		0.5018766536297035 ,1.0 ,0.4247869037104606 ,0.7126868151902485 ,0.7457684171279625 ,-1.0 ,-0.0 ,-0.3851187896583751 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_6 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_1_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs, 0.00043172746232553904 ) + 0.45051287110560184;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_6",
				"Proba_1", "Proba_6",
				"LogProba_1", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_6 = rbf_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs, 0.00043172746232553904 ) + 0.45051287110560184;
	
			std::any lLogistic_1_6 = logistic(-3.7011279237143193 * lDotProduct_1_6 + -0.6239526087829215);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_6,
				lDotProduct_1_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_6,
				1.0 - lLogistic_1_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_6
	

	namespace pb_1_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_7 = { 
		0.5989396549482108 ,0.24282387337698275 ,1.0 ,1.0 ,0.8584335993501675 ,-1.0 ,-0.5695774027015645 ,-0.2734347780967241 ,-1.0 ,-0.8571849468770724 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_7 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs, 0.00043172746232553904 ) + 0.32099408002978164;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_7",
				"Proba_1", "Proba_7",
				"LogProba_1", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_7 = rbf_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs, 0.00043172746232553904 ) + 0.32099408002978164;
	
			std::any lLogistic_1_7 = logistic(-5.178086794427909 * lDotProduct_1_7 + -0.5567292622476172);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_7,
				lDotProduct_1_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_7,
				1.0 - lLogistic_1_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_7
	

	namespace pb_1_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_8 = { 
		0.8510100556230101 ,0.16161291367793632 ,0.9873770306990536 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_8 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_1_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs, 0.00043172746232553904 ) + 0.5415607568480464;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_8",
				"Proba_1", "Proba_8",
				"LogProba_1", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_8 = rbf_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs, 0.00043172746232553904 ) + 0.5415607568480464;
	
			std::any lLogistic_1_8 = logistic(1.3045258980087735 * lDotProduct_1_8 + -0.7672044799653844);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_8,
				lDotProduct_1_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_8,
				1.0 - lLogistic_1_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_8
	

	namespace pb_1_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_9 = { 
		1.0 ,0.0 ,0.67117088676168 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-0.67117088676168 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_9 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_1_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs, 0.00043172746232553904 ) + 0.14257674664258957;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_9",
				"Proba_1", "Proba_9",
				"LogProba_1", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_9 = rbf_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs, 0.00043172746232553904 ) + 0.14257674664258957;
	
			std::any lLogistic_1_9 = logistic(-0.2869951951515326 * lDotProduct_1_9 + -0.11581448340587636);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_9,
				lDotProduct_1_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_9,
				1.0 - lLogistic_1_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_9
	

	namespace pb_2_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_3 = { 
		1.0 ,0.40271699236499153 ,1.0 ,0.0 ,0.7255079804494015 ,0.4879959090016149 ,0.0 ,0.8888843034316117 ,0.19877418751615397 ,-0.811097816509749 ,-0.8927815562540247 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_3 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_2_3_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs, 0.00043172746232553904 ) + 0.11256914042637524;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_3",
				"Proba_2", "Proba_3",
				"LogProba_2", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_3 = rbf_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs, 0.00043172746232553904 ) + 0.11256914042637524;
	
			std::any lLogistic_2_3 = logistic(-2.896803245153198 * lDotProduct_2_3 + 0.6490279313124934);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_3,
				lDotProduct_2_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_3,
				1.0 - lLogistic_2_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_3
	

	namespace pb_2_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_4 = { 
		0.6253365411808814 ,0.5953312091809396 ,1.0 ,0.10969158780350378 ,0.0 ,0.06174659056454252 ,0.20416237076593752 ,0.0 ,0.2923912793830819 ,-1.0 ,-1.0 ,-0.8886595788788868 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_4 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_4_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs, 0.00043172746232553904 ) + 0.12060696712815452;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_4",
				"Proba_2", "Proba_4",
				"LogProba_2", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_4 = rbf_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs, 0.00043172746232553904 ) + 0.12060696712815452;
	
			std::any lLogistic_2_4 = logistic(-3.5246750277995242 * lDotProduct_2_4 + 0.7871535417311075);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_4,
				lDotProduct_2_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_4,
				1.0 - lLogistic_2_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_4
	

	namespace pb_2_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_5 = { 
		0.982120845687561 ,0.662705249330289 ,0.7033808338835641 ,0.0697962398432461 ,0.33693702012654536 ,0.11785759245993031 ,0.0 ,0.14569854569048937 ,0.48241817483411104 ,-1.0 ,-0.17812306547914802 ,-0.7727314806250283 ,-0.7593286991226085 ,-0.7907312566289512 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_5 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_5_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs, 0.00043172746232553904 ) + 0.07605356857275675;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_5",
				"Proba_2", "Proba_5",
				"LogProba_2", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_5 = rbf_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs, 0.00043172746232553904 ) + 0.07605356857275675;
	
			std::any lLogistic_2_5 = logistic(-2.785452429383977 * lDotProduct_2_5 + 0.2062427947473014);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_5,
				lDotProduct_2_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_5,
				1.0 - lLogistic_2_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_5
	

	namespace pb_2_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_6 = { 
		0.46618488580374884 ,1.0 ,1.0 ,0.06322459404599001 ,0.26119363259312856 ,0.0 ,0.47650566125328536 ,0.0 ,0.0 ,-0.9552854487851012 ,-0.0 ,-0.6827229733538197 ,-1.0 ,-0.6291003515572318 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_6 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_2_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs, 0.00043172746232553904 ) + 0.2563289292530183;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_6",
				"Proba_2", "Proba_6",
				"LogProba_2", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_6 = rbf_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs, 0.00043172746232553904 ) + 0.2563289292530183;
	
			std::any lLogistic_2_6 = logistic(-2.7049609189368917 * lDotProduct_2_6 + -0.0694493004409763);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_6,
				lDotProduct_2_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_6,
				1.0 - lLogistic_2_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_6
	

	namespace pb_2_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_7 = { 
		1.0 ,0.0 ,0.9085955464904782 ,0.4941275629484921 ,0.4233874543668927 ,0.0 ,0.0 ,0.5226972335872669 ,0.43611591081374373 ,-1.0 ,-0.7437498605599766 ,-0.2901087487956461 ,-0.7510650988512512 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_7 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs, 0.00043172746232553904 ) + 0.17852209880754627;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_7",
				"Proba_2", "Proba_7",
				"LogProba_2", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_7 = rbf_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs, 0.00043172746232553904 ) + 0.17852209880754627;
	
			std::any lLogistic_2_7 = logistic(-2.978075401054778 * lDotProduct_2_7 + 0.17088851284352263);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_7,
				lDotProduct_2_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_7,
				1.0 - lLogistic_2_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_7
	

	namespace pb_2_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_8 = { 
		1.0 ,0.7152257760823978 ,1.0 ,0.38077284491938934 ,0.27614668514794727 ,0.0 ,0.24625333545531242 ,0.17759405494517022 ,0.20400730344978307 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_8 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_2_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs, 0.00043172746232553904 ) + 0.10451517334408271;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_8",
				"Proba_2", "Proba_8",
				"LogProba_2", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_8 = rbf_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs, 0.00043172746232553904 ) + 0.10451517334408271;
	
			std::any lLogistic_2_8 = logistic(-4.276332726339635 * lDotProduct_2_8 + 1.8206074331724647);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_8,
				lDotProduct_2_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_8,
				1.0 - lLogistic_2_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_8
	

	namespace pb_2_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_9 = { 
		0.4237229758508908 ,0.5107375122207151 ,1.0 ,0.4666657216577039 ,0.5526434186752675 ,0.0 ,0.0 ,0.3188436326587733 ,0.5823530820656754 ,-1.0 ,-0.854966343129026 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_9 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 7.0, 5.0, 1.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 1.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 12.0, 8.0, 5.0, 0.0, 0.0, 0.0, 9.0, 8.0, 13.0, 15.0, 7.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_2_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs, 0.00043172746232553904 ) + 0.049251963006266754;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_9",
				"Proba_2", "Proba_9",
				"LogProba_2", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_9 = rbf_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs, 0.00043172746232553904 ) + 0.049251963006266754;
	
			std::any lLogistic_2_9 = logistic(-3.6556824566580364 * lDotProduct_2_9 + 1.1392435622955364);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_9,
				lDotProduct_2_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_9,
				1.0 - lLogistic_2_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_9
	

	namespace pb_3_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_4 = { 
		0.3188807719661568 ,0.4153535618922992 ,0.6745087301506242 ,1.0 ,0.1611301297640981 ,-0.9539040038623087 ,-1.0 ,-0.6159691899108696 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_4 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_4_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs, 0.00043172746232553904 ) + -0.009537088515464105;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_4",
				"Proba_3", "Proba_4",
				"LogProba_3", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_4 = rbf_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs, 0.00043172746232553904 ) + -0.009537088515464105;
	
			std::any lLogistic_3_4 = logistic(-2.8720911977845462 * lDotProduct_3_4 + 0.3938256768486079);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_4,
				lDotProduct_3_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_4,
				1.0 - lLogistic_3_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_4
	

	namespace pb_3_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_5 = { 
		0.737588413657942 ,0.6826210094609639 ,0.3846556433121189 ,1.0 ,0.25853697416212323 ,-1.0 ,-0.21713325406193223 ,-0.7350979604108162 ,-0.5123235076496363 ,-0.5988473184707636 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_5 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_5_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs, 0.00043172746232553904 ) + 0.036500611089054516;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_5",
				"Proba_3", "Proba_5",
				"LogProba_3", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_5 = rbf_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs, 0.00043172746232553904 ) + 0.036500611089054516;
	
			std::any lLogistic_3_5 = logistic(-2.1823548070937395 * lDotProduct_3_5 + 0.06256688332237795);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_5,
				lDotProduct_3_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_5,
				1.0 - lLogistic_3_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_5
	

	namespace pb_3_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_6 = { 
		0.0 ,0.5049311937296707 ,0.8368335360706131 ,1.0 ,0.3104793531830947 ,-0.886577331854749 ,-0.0 ,-0.4606483521240232 ,-0.6316980388759815 ,-0.6733203601286247 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_6 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_3_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs, 0.00043172746232553904 ) + 0.150136952279286;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_6",
				"Proba_3", "Proba_6",
				"LogProba_3", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_6 = rbf_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs, 0.00043172746232553904 ) + 0.150136952279286;
	
			std::any lLogistic_3_6 = logistic(-2.292171307753099 * lDotProduct_3_6 + -0.23942163220322762);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_6,
				lDotProduct_3_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_6,
				1.0 - lLogistic_3_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_6
	

	namespace pb_3_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_7 = { 
		0.8781065097561708 ,0.16860841742855362 ,0.48347159594162714 ,1.0 ,0.6512858743671378 ,-0.5834436380854142 ,-0.624462465689493 ,-0.21197899633111578 ,-0.7615872973874661 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_7 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs, 0.00043172746232553904 ) + 0.07739742863767417;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_7",
				"Proba_3", "Proba_7",
				"LogProba_3", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_7 = rbf_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs, 0.00043172746232553904 ) + 0.07739742863767417;
	
			std::any lLogistic_3_7 = logistic(-2.701527248263598 * lDotProduct_3_7 + -0.1104380778285449);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_7,
				lDotProduct_3_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_7,
				1.0 - lLogistic_3_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_7
	

	namespace pb_3_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_8 = { 
		1.0 ,0.6622621736630507 ,0.6235304956966388 ,1.0 ,0.6638078999929347 ,-1.0 ,-1.0 ,-0.9496005693526244 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_8 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_3_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs, 0.00043172746232553904 ) + -0.10871009747726383;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_8",
				"Proba_3", "Proba_8",
				"LogProba_3", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_8 = rbf_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs, 0.00043172746232553904 ) + -0.10871009747726383;
	
			std::any lLogistic_3_8 = logistic(-0.3586519015157377 * lDotProduct_3_8 + -0.05137214631577329);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_8,
				lDotProduct_3_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_8,
				1.0 - lLogistic_3_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_8
	

	namespace pb_3_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_9 = { 
		0.6586599697309321 ,0.7883120611289828 ,0.7620856357242048 ,0.7909423334158803 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_9 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_3_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs, 0.00043172746232553904 ) + 0.03399651249767026;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_9",
				"Proba_3", "Proba_9",
				"LogProba_3", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_9 = rbf_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs, 0.00043172746232553904 ) + 0.03399651249767026;
	
			std::any lLogistic_3_9 = logistic(-0.37781898702173716 * lDotProduct_3_9 + -0.07234369061660241);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_9,
				lDotProduct_3_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_9,
				1.0 - lLogistic_3_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_9
	

	namespace pb_4_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_5 = { 
		1.0 ,1.0 ,1.0 ,-1.0 ,-0.0 ,-0.9041338585784647 ,-0.38457992311889927 ,-0.7112862183026359 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_5 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_5_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs, 0.00043172746232553904 ) + -0.09122172943968697;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_5",
				"Proba_4", "Proba_5",
				"LogProba_4", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_5 = rbf_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs, 0.00043172746232553904 ) + -0.09122172943968697;
	
			std::any lLogistic_4_5 = logistic(-3.9555003241787694 * lDotProduct_4_5 + -1.0283722190840519);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_5,
				lDotProduct_4_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_5,
				1.0 - lLogistic_4_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_5
	

	namespace pb_4_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_6 = { 
		1.0 ,1.0 ,1.0 ,-0.6651653798652221 ,-0.0 ,-0.6452339812162191 ,-0.6896006389185588 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_6 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_4_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs, 0.00043172746232553904 ) + 0.062175362807230926;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_6",
				"Proba_4", "Proba_6",
				"LogProba_4", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_6 = rbf_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs, 0.00043172746232553904 ) + 0.062175362807230926;
	
			std::any lLogistic_4_6 = logistic(-4.640468364741306 * lDotProduct_4_6 + -2.0693263552412664);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_6,
				lDotProduct_4_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_6,
				1.0 - lLogistic_4_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_6
	

	namespace pb_4_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_7 = { 
		1.0 ,0.930075511778527 ,1.0 ,-0.932261603961446 ,-0.3611117515679676 ,-0.12865499911133774 ,-1.0 ,-0.5080471571377757 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_7 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs, 0.00043172746232553904 ) + 0.03493415686291499;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_7",
				"Proba_4", "Proba_7",
				"LogProba_4", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_7 = rbf_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs, 0.00043172746232553904 ) + 0.03493415686291499;
	
			std::any lLogistic_4_7 = logistic(-3.979033755693135 * lDotProduct_4_7 + -1.2148342019391318);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_7,
				lDotProduct_4_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_7,
				1.0 - lLogistic_4_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_7
	

	namespace pb_4_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_8 = { 
		1.0 ,1.0 ,1.0 ,-0.47589298172821903 ,-0.7754388400376905 ,-0.7486681782340906 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_8 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_4_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs, 0.00043172746232553904 ) + -0.43133293283846647;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_8",
				"Proba_4", "Proba_8",
				"LogProba_4", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_8 = rbf_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs, 0.00043172746232553904 ) + -0.43133293283846647;
	
			std::any lLogistic_4_8 = logistic(3.4814801853122748 * lDotProduct_4_8 + 0.30602231521352136);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_8,
				lDotProduct_4_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_8,
				1.0 - lLogistic_4_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_8
	

	namespace pb_4_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_9 = { 
		1.0 ,1.0 ,0.991366453893765 ,-0.5452832033080398 ,-1.0 ,-1.0 ,-0.4460832505857251 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_9 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_4_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs, 0.00043172746232553904 ) + -0.05376617180094501;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_9",
				"Proba_4", "Proba_9",
				"LogProba_4", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_9 = rbf_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs, 0.00043172746232553904 ) + -0.05376617180094501;
	
			std::any lLogistic_4_9 = logistic(0.7149638077356806 * lDotProduct_4_9 + 0.3160395850382585);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_9,
				lDotProduct_4_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_9,
				1.0 - lLogistic_4_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_9
	

	namespace pb_5_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_6 = { 
		1.0 ,0.0 ,0.7700296674533715 ,0.5125545737915911 ,0.5092965743987777 ,-0.23256195810094704 ,-0.0 ,-1.0 ,-0.7693753025096655 ,-0.789943555033128 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_6 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_5_6_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs, 0.00043172746232553904 ) + 0.20633168011079053;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_6",
				"Proba_5", "Proba_6",
				"LogProba_5", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_6 = rbf_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs, 0.00043172746232553904 ) + 0.20633168011079053;
	
			std::any lLogistic_5_6 = logistic(-2.50833078626912 * lDotProduct_5_6 + -0.3555120206471589);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_6,
				lDotProduct_5_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_6,
				1.0 - lLogistic_5_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_6
	

	namespace pb_5_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_7 = { 
		1.0 ,0.0013613082009121859 ,0.7848537554784066 ,0.9223205606627799 ,0.7993030919437328 ,-0.6256484816061555 ,-0.2713065991360764 ,-0.8155193621343255 ,-1.0 ,-0.7953642734092742 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_7 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_5_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs, 0.00043172746232553904 ) + 0.17093931373476554;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_7",
				"Proba_5", "Proba_7",
				"LogProba_5", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_7 = rbf_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs, 0.00043172746232553904 ) + 0.17093931373476554;
	
			std::any lLogistic_5_7 = logistic(-3.7991203366500907 * lDotProduct_5_7 + -0.3583535898918737);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_7,
				lDotProduct_5_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_7,
				1.0 - lLogistic_5_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_7
	

	namespace pb_5_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_8 = { 
		1.0 ,0.5678880074370278 ,1.0 ,0.41829522003633507 ,1.0 ,-0.986183227473363 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_8 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_5_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs, 0.00043172746232553904 ) + -0.16864426118821982;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_8",
				"Proba_5", "Proba_8",
				"LogProba_5", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_8 = rbf_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs, 0.00043172746232553904 ) + -0.16864426118821982;
	
			std::any lLogistic_5_8 = logistic(0.4091320107322044 * lDotProduct_5_8 + -0.3166206284620319);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_8,
				lDotProduct_5_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_8,
				1.0 - lLogistic_5_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_8
	

	namespace pb_5_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_9 = { 
		1.0 ,0.0 ,0.629318124613513 ,0.721291648688773 ,0.7658463208479069 ,-0.4815772815522732 ,-1.0 ,-1.0 ,-0.6348788125979199 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_9 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_5_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs, 0.00043172746232553904 ) + -0.15607033910288232;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_9",
				"Proba_5", "Proba_9",
				"LogProba_5", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_9 = rbf_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs, 0.00043172746232553904 ) + -0.15607033910288232;
	
			std::any lLogistic_5_9 = logistic(-1.8099129780692802 * lDotProduct_5_9 + 0.2295203678318588);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_9,
				lDotProduct_5_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_9,
				1.0 - lLogistic_5_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_9
	

	namespace pb_6_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_7 = { 
		0.36947428710168306 ,0.0 ,0.579964294637449 ,0.38875602920068875 ,0.7799925963959295 ,-0.6694845895496623 ,-0.4256467020368467 ,-0.06663339833963453 ,-0.6647571720955164 ,-0.29166534531409044 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_7 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_6_7_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs, 0.00043172746232553904 ) + -0.05898520340303998;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_7",
				"Proba_6", "Proba_7",
				"LogProba_6", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_7 = rbf_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs, 0.00043172746232553904 ) + -0.05898520340303998;
	
			std::any lLogistic_6_7 = logistic(-2.219044377720945 * lDotProduct_6_7 + 0.11921791162998911);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_7,
				lDotProduct_6_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_7,
				1.0 - lLogistic_6_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_7
	

	namespace pb_6_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_8 = { 
		0.9272246088472791 ,0.0 ,0.9306114134955259 ,0.7677221713554956 ,1.0 ,-0.658269227855064 ,-1.0 ,-0.9672889658432365 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_8 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_6_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs, 0.00043172746232553904 ) + -0.26927326980021726;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_8",
				"Proba_6", "Proba_8",
				"LogProba_6", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_8 = rbf_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs, 0.00043172746232553904 ) + -0.26927326980021726;
	
			std::any lLogistic_6_8 = logistic(-3.638683732524684 * lDotProduct_6_8 + 1.5260850029835218);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_8,
				lDotProduct_6_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_8,
				1.0 - lLogistic_6_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_8
	

	namespace pb_6_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_9 = { 
		0.9019318257266243 ,0.010417102958979364 ,0.6308883366323191 ,0.4626584022109797 ,0.6898410236424609 ,-0.5617189727882324 ,-0.8025721326642706 ,-1.0 ,-0.33144558571886046 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_9 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_6_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs, 0.00043172746232553904 ) + -0.26277811877640433;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_9",
				"Proba_6", "Proba_9",
				"LogProba_6", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_9 = rbf_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs, 0.00043172746232553904 ) + -0.26277811877640433;
	
			std::any lLogistic_6_9 = logistic(-2.6581656597847845 * lDotProduct_6_9 + 0.47819894833500587);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_9,
				lDotProduct_6_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_9,
				1.0 - lLogistic_6_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_9
	

	namespace pb_7_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_8 = { 
		0.7862347815373286 ,0.7306067556264739 ,0.5433939825332714 ,1.0 ,0.7802762924693768 ,-1.0 ,-0.840511812166451 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_8 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_7_8_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs, 0.00043172746232553904 ) + -0.1969200755802985;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_8",
				"Proba_7", "Proba_8",
				"LogProba_7", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_8 = rbf_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs, 0.00043172746232553904 ) + -0.1969200755802985;
	
			std::any lLogistic_7_8 = logistic(-2.9625189250411275 * lDotProduct_7_8 + 0.8296501525013881);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_8,
				lDotProduct_7_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_8,
				1.0 - lLogistic_7_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_8
	

	namespace pb_7_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_9 = { 
		0.7223800780093139 ,0.26140459303088015 ,0.4407182958640872 ,0.6622729567494972 ,1.0 ,-0.49387070903171554 ,-0.8588278241609153 ,-1.0 ,-0.7340773904611476 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_9 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_7_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs, 0.00043172746232553904 ) + -0.1659490883835169;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_9",
				"Proba_7", "Proba_9",
				"LogProba_7", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_9 = rbf_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs, 0.00043172746232553904 ) + -0.1659490883835169;
	
			std::any lLogistic_7_9 = logistic(-3.1371143381590416 * lDotProduct_7_9 + 0.8073818656972405);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_9,
				lDotProduct_7_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_9,
				1.0 - lLogistic_7_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_9
	

	namespace pb_8_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_8_9 = { 
		1.0 ,1.0 ,0.870541692874759 ,1.0 ,-0.9266743135623219 ,-1.0 ,-1.0 ,-0.943867379312437 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_8_9 = { 
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_8_9_decision_function( std::vector<std::any> const & inputs) {
			return rbf_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs, 0.00043172746232553904 ) + 0.07252711255512617;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_8", "Score_9",
				"Proba_8", "Proba_9",
				"LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_8_9 = rbf_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs, 0.00043172746232553904 ) + 0.07252711255512617;
	
			std::any lLogistic_8_9 = logistic(1.9453071944810194 * lDotProduct_8_9 + 0.12609971891558414);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_8_9,
				lDotProduct_8_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_8_9,
				1.0 - lLogistic_8_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_8_9
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };

		std::map<uint, tTable> lBinaryScores = { 
			{ 0 , pb_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 1 , pb_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 2 , pb_0_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 3 , pb_0_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 4 , pb_0_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 5 , pb_0_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 6 , pb_0_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 7 , pb_0_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 8 , pb_0_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 9 , pb_1_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 10 , pb_1_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 11 , pb_1_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 12 , pb_1_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 13 , pb_1_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 14 , pb_1_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 15 , pb_1_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 16 , pb_1_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 17 , pb_2_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 18 , pb_2_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 19 , pb_2_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 20 , pb_2_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 21 , pb_2_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 22 , pb_2_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 23 , pb_2_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 24 , pb_3_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 25 , pb_3_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 26 , pb_3_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 27 , pb_3_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 28 , pb_3_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 29 , pb_3_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 30 , pb_4_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 31 , pb_4_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 32 , pb_4_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 33 , pb_4_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 34 , pb_4_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 35 , pb_5_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 36 , pb_5_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 37 , pb_5_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 38 , pb_5_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 39 , pb_6_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 40 , pb_6_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 41 , pb_6_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 42 , pb_7_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 43 , pb_7_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 44 , pb_8_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) }
		};

		tTable lOVRTable = compute_svc_ovr_scores(lBinaryScores, lClasses);


		tTable lTable = lOVRTable;

		int lBestClass = get_arg_max( lTable["Score"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
