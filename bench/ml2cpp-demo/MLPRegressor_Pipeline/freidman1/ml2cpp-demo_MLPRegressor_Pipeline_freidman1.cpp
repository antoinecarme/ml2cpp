// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPRegressor_Pipeline
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPRegressor_Pipeline_freidman1.exe ml2cpp-demo_MLPRegressor_Pipeline_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.5629846484809591 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.45606442423375926 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.47113817481474773 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.533968020094518 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.4780936262373869 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.5682849224172329 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.47914374714280494 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.4594152477223205 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.4901106996809651 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.5378806933707533 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.5629846484809591 ) / 0.2583714683396337 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.45606442423375926 ) / 0.2878721730712705 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.47113817481474773 ) / 0.3109216791553051 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.533968020094518 ) / 0.2826199867400281 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.4780936262373869 ) / 0.286140491317745 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.5682849224172329 ) / 0.29767408106451737 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.47914374714280494 ) / 0.2735314971431575 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.4594152477223205 ) / 0.28721149346998975 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.4901106996809651 ) / 0.2790486717322703 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.5378806933707533 ) / 0.2958192296543193 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace InputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
		
				tTable lTable;
		
				lTable["input_0"] = { scaler_output_2 };
				lTable["input_1"] = { scaler_output_3 };
				lTable["input_2"] = { scaler_output_4 };
				lTable["input_3"] = { scaler_output_5 };
				lTable["input_4"] = { scaler_output_6 };
				lTable["input_5"] = { scaler_output_7 };
				lTable["input_6"] = { scaler_output_8 };
				lTable["input_7"] = { scaler_output_9 };
				lTable["input_8"] = { scaler_output_10 };
				lTable["input_9"] = { scaler_output_11 };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace InputLayer
		
	
		namespace HiddenLayer_1 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9) {
		
				tTable lTable;
		
				double output_1_0_BA = 0.561675606321913 * input_0 + 0.5015339200999346 * input_1 + -0.8545677799396451 * input_2 + -0.3372099669972827 * input_3 + 0.7348182631637586 * input_4 + 0.9786227567392595 * input_5 + -0.7476591394836832 * input_6 + 0.6689114563338806 * input_7 + 0.1901962287663983 * input_8 + -0.12727170186387565 * input_9 + 0.34282327975004834;
		
				double output_1_1_BA = 0.4054555814486167 * input_0 + 0.3262638900505882 * input_1 + -0.5026850699577768 * input_2 + -0.29800621708609587 * input_3 + 0.872269882127992 * input_4 + -0.35073882719661587 * input_5 + -0.5873643916559802 * input_6 + -0.6855427914947139 * input_7 + 0.6759909235333568 * input_8 + 0.21686459050454157 * input_9 + -1.1997138410469703;
		
				double output_1_2_BA = 0.2701656933273878 * input_0 + 0.5837575317103159 * input_1 + 0.3402008767486826 * input_2 + 0.8056628103608232 * input_3 + 0.10711436666507491 * input_4 + -0.25909643377535585 * input_5 + 0.15025852897721603 * input_6 + 0.008705307253012239 * input_7 + -0.10595551218551612 * input_8 + -0.15418799063824737 * input_9 + 1.5410447294956386;
		
				lTable["output_1_0"] = { relu(output_1_0_BA) };
				lTable["output_1_1"] = { relu(output_1_1_BA) };
				lTable["output_1_2"] = { relu(output_1_2_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_1
		
	
		namespace HiddenLayer_2 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
		
				tTable lTable;
		
				double output_2_0_BA = -0.7592249528373832 * output_1_0 + 0.5283427650802925 * output_1_1 + 0.05285337025655471 * output_1_2 + -0.22716442395936942;
		
				double output_2_1_BA = -0.7586218740786262 * output_1_0 + -0.3219627641851553 * output_1_1 + -0.8874281052899597 * output_1_2 + -1.475321093716635;
		
				double output_2_2_BA = 0.7763388605837966 * output_1_0 + 1.5360470972616773 * output_1_1 + 1.9972149631744096 * output_1_2 + 0.8348544386204703;
		
				double output_2_3_BA = 0.1110894835483826 * output_1_0 + -0.5047386895373206 * output_1_1 + -0.406628486758429 * output_1_2 + -0.7964330424336139;
		
				double output_2_4_BA = -0.6381041009384644 * output_1_0 + 0.31074788232900874 * output_1_1 + -0.6607928340804357 * output_1_2 + -0.6138196947824017;
		
				lTable["output_2_0"] = { relu(output_2_0_BA) };
				lTable["output_2_1"] = { relu(output_2_1_BA) };
				lTable["output_2_2"] = { relu(output_2_2_BA) };
				lTable["output_2_3"] = { relu(output_2_3_BA) };
				lTable["output_2_4"] = { relu(output_2_4_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_2
		
	
		namespace OutputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
		
				tTable lTable;
		
				double output_3_0_BA = 0.21431669734591136 * output_2_0 + 0.25965369941188216 * output_2_1 + 2.0295128101346163 * output_2_2 + 0.7008363645778635 * output_2_3 + -0.2160195976737076 * output_2_4 + 5.187175006415675;
		
				lTable["Estimator"] = { output_3_0_BA };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
		
				return lTable;
			}
		
		} // eof namespace OutputLayer
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			tTable lTable_InputLayer = InputLayer::compute_features(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
	
			tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );
	
			tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );
	
			tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );
	
	
			tTable lTable;
	
			std::any  lEstimator = lTable_OutputLayer[ "Estimator" ][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
