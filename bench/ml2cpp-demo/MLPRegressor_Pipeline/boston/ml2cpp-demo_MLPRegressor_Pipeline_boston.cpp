// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPRegressor_Pipeline
// Dataset : boston

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPRegressor_Pipeline_boston.exe ml2cpp-demo_MLPRegressor_Pipeline_boston.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 3.3936090099009903 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 12.113861386138614 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 10.983613861386127 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.07178217821782178 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.5541153465346542 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 6.299148514851482 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 67.85049504950491 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 3.8198420792079233 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 9.55940594059406 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 405.8019801980198 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 18.40915841584154 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 358.3797277227715 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 12.626584158415856 ) : ( Feature_12)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 3.3936090099009903 ) / 8.000616555737787 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 12.113861386138614 ) / 24.187656534977855 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 10.983613861386127 ) / 6.8177472477399235 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.07178217821782178 ) / 0.2581269011709685 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.5541153465346542 ) / 0.11800809760824685 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 6.299148514851482 ) / 0.7060417397996938 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 67.85049504950491 ) / 28.107403181658597 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 3.8198420792079233 ) / 2.0933726902675627 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 9.55940594059406 ) / 8.728803783375893 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 405.8019801980198 ) / 169.7858592930543 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 18.40915841584154 ) / 2.166792648327246 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 358.3797277227715 ) / 90.64691624336051 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 12.626584158415856 ) / 7.167938324035357 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace InputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
		
				tTable lTable;
		
				lTable["input_0"] = { scaler_output_2 };
				lTable["input_1"] = { scaler_output_3 };
				lTable["input_2"] = { scaler_output_4 };
				lTable["input_3"] = { scaler_output_5 };
				lTable["input_4"] = { scaler_output_6 };
				lTable["input_5"] = { scaler_output_7 };
				lTable["input_6"] = { scaler_output_8 };
				lTable["input_7"] = { scaler_output_9 };
				lTable["input_8"] = { scaler_output_10 };
				lTable["input_9"] = { scaler_output_11 };
				lTable["input_10"] = { scaler_output_12 };
				lTable["input_11"] = { scaler_output_13 };
				lTable["input_12"] = { scaler_output_14 };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
		
				return lTable;
			}
		
		} // eof namespace InputLayer
		
	
		namespace HiddenLayer_1 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9, std::any input_10, std::any input_11, std::any input_12) {
		
				tTable lTable;
		
				double output_1_0_BA = -1.4729978591721298 * input_0 + -0.13350931455242812 * input_1 + -0.05395157794226578 * input_2 + 0.009392936326281137 * input_3 + -0.032555538345853896 * input_4 + 0.7134503303339281 * input_5 + -0.3340725957572225 * input_6 + -0.14301206687798346 * input_7 + -1.5425191595887164 * input_8 + -0.21895990480965927 * input_9 + -0.4614160927943722 * input_10 + 0.25506103501085914 * input_11 + -0.15982174415340852 * input_12 + 0.6739848203550737;
		
				double output_1_1_BA = -1.501012518992181 * input_0 + 0.28158236796200686 * input_1 + -0.0011577677534038528 * input_2 + -0.09946519385174883 * input_3 + 0.1914022715364162 * input_4 + 1.1717475725105573 * input_5 + -0.11494657730962524 * input_6 + -0.3911931414438358 * input_7 + 4.253200888229451 * input_8 + -0.37261035976663887 * input_9 + 0.25490945571475676 * input_10 + 0.5497563990099826 * input_11 + -2.108673557739597 * input_12 + -0.6163441556888418;
		
				double output_1_2_BA = 0.022290603062871887 * input_0 + -0.2646492260702326 * input_1 + -0.17067594690225968 * input_2 + 0.19842882336263395 * input_3 + -1.8950809253269452 * input_4 + -0.42714823079841185 * input_5 + 0.9154050622323435 * input_6 + -3.7161219953190177 * input_7 + 0.14155470290234767 * input_8 + -0.11724880126603113 * input_9 + -0.40858229071669916 * input_10 + -0.062215429839311685 * input_11 + -0.36665451239465047 * input_12 + -2.6967835855562696;
		
				lTable["output_1_0"] = { relu(output_1_0_BA) };
				lTable["output_1_1"] = { relu(output_1_1_BA) };
				lTable["output_1_2"] = { relu(output_1_2_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0], iTable.at("input_10")[0], iTable.at("input_11")[0], iTable.at("input_12")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_1
		
	
		namespace HiddenLayer_2 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
		
				tTable lTable;
		
				double output_2_0_BA = 0.5087996110316312 * output_1_0 + -0.886241752820874 * output_1_1 + -0.5084691778249478 * output_1_2 + -0.6295459939336212;
		
				double output_2_1_BA = 1.6785722030601167 * output_1_0 + 3.064550024803006 * output_1_1 + 0.5556216006576238 * output_1_2 + 4.0048215495021395;
		
				double output_2_2_BA = -0.6222327532729409 * output_1_0 + 1.3688050044357054 * output_1_1 + -3.587843194313645 * output_1_2 + 0.8849254601459648;
		
				double output_2_3_BA = 0.6278377349445258 * output_1_0 + 0.940291712482188 * output_1_1 + -0.00716068750722108 * output_1_2 + -0.5496009161359854;
		
				double output_2_4_BA = -0.24986977729665977 * output_1_0 + -1.2512523047695436 * output_1_1 + -0.6798838737075009 * output_1_2 + -0.9372460253695027;
		
				lTable["output_2_0"] = { relu(output_2_0_BA) };
				lTable["output_2_1"] = { relu(output_2_1_BA) };
				lTable["output_2_2"] = { relu(output_2_2_BA) };
				lTable["output_2_3"] = { relu(output_2_3_BA) };
				lTable["output_2_4"] = { relu(output_2_4_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_2
		
	
		namespace OutputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
		
				tTable lTable;
		
				double output_3_0_BA = -0.8571099159930079 * output_2_0 + 2.3491397199889326 * output_2_1 + -3.8035523611617905 * output_2_2 + -0.3911503016143866 * output_2_3 + -0.6084403973688275 * output_2_4 + 3.5454648086004297;
		
				lTable["Estimator"] = { output_3_0_BA };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
		
				return lTable;
			}
		
		} // eof namespace OutputLayer
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14) {
			tTable lTable_InputLayer = InputLayer::compute_features(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14);
	
			tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );
	
			tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );
	
			tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );
	
	
			tTable lTable;
	
			std::any  lEstimator = lTable_OutputLayer[ "Estimator" ][0];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/boston.csv");
	return 0;
}
