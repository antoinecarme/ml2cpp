// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SGDClassifier_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SGDClassifier_Pipeline_digits.exe ml2cpp-demo_SGDClassifier_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::any score_0 = 0.0 * scaler_2 + -3.4572148151273208 * scaler_3 + -4.442478963271113 * scaler_4 + 6.384542000260004 * scaler_5 + -6.337274301253963 * scaler_6 + -10.030695479254984 * scaler_7 + -10.547028972589448 * scaler_8 + -5.24170342847632 * scaler_9 + -0.06691325316607931 * scaler_10 + 1.5609812043586233 * scaler_11 + -5.527060084023825 * scaler_12 + 2.0868385653351433 * scaler_13 + 0.28348600158047643 * scaler_14 + 9.66341019240697 * scaler_15 + -2.681229216061386 * scaler_16 + -3.879910217377289 * scaler_17 + -12.059654615577985 * scaler_18 + 7.582907087018456 * scaler_19 + 7.354432362473874 * scaler_20 + -4.532630160372286 * scaler_21 + -19.40953557217599 * scaler_22 + 13.03958753744196 * scaler_23 + 1.8482317664366053 * scaler_24 + -3.629178091444627 * scaler_25 + -0.028930538506240052 * scaler_26 + 1.7424371331821487 * scaler_27 + 7.211133732936717 * scaler_28 + -13.433956315582765 * scaler_29 + -36.30476299189887 * scaler_30 + 4.827451936913745 * scaler_31 + 6.3237178751369445 * scaler_32 + -0.05792161172163721 * scaler_33 + 0.0 * scaler_34 + 5.5021861639254155 * scaler_35 + 10.187564479342393 * scaler_36 + -14.639073207894587 * scaler_37 + -35.523469324255586 * scaler_38 + 6.394306831299871 * scaler_39 + 3.6188986450985547 * scaler_40 + 0.0 * scaler_41 + -3.494825378660301 * scaler_42 + -0.3910976332984259 * scaler_43 + 14.770275210536262 * scaler_44 + -13.809009840896694 * scaler_45 + -9.792695214760066 * scaler_46 + 5.990499070754297 * scaler_47 + 1.2841647031735046 * scaler_48 + -6.682446696800805 * scaler_49 + -0.043446905160722145 * scaler_50 + -2.616866755850798 * scaler_51 + 6.3767323075949625 * scaler_52 + 10.89237826842813 * scaler_53 + 8.237347476443425 * scaler_54 + 0.4079851599965694 * scaler_55 + -5.143081972466018 * scaler_56 + -6.112645548725038 * scaler_57 + -0.028930538506239948 * scaler_58 + -4.618412349063845 * scaler_59 + -6.48591212834859 * scaler_60 + 5.633115295961962 * scaler_61 + -10.506940550190208 * scaler_62 + -6.014346540580285 * scaler_63 + -7.060504361255637 * scaler_64 + -7.0903713886189506 * scaler_65 + -241.38568925287055;
	
			std::any score_1 = 0.0 * scaler_2 + -3.89264438209215 * scaler_3 + -3.091924793514987 * scaler_4 + -4.5078325087607105 * scaler_5 + -29.867023067404503 * scaler_6 + 22.41437249406614 * scaler_7 + -5.457044274441733 * scaler_8 + -6.228450928737765 * scaler_9 + -4.375760730125842 * scaler_10 + -21.17294103005497 * scaler_11 + -9.430562536504388 * scaler_12 + -4.23666053571634 * scaler_13 + 21.36165049953942 * scaler_14 + 3.1586163216007086 * scaler_15 + -9.63738780300292 * scaler_16 + -5.13216283989477 * scaler_17 + -1.2867021955760054 * scaler_18 + 12.553491311566276 * scaler_19 + 5.706000936459864 * scaler_20 + 48.280432463296975 * scaler_21 + 31.654090194647242 * scaler_22 + -0.01737087004833882 * scaler_23 + 4.4929738860536315 * scaler_24 + -4.998999155810284 * scaler_25 + -9.938669226315941 * scaler_26 + -3.438850988146057 * scaler_27 + 4.699619027997779 * scaler_28 + 14.891493479706728 * scaler_29 + 1.7293599625252538 * scaler_30 + 3.214581380991979 * scaler_31 + -13.828799294091418 * scaler_32 + -1.4862740349942 * scaler_33 + 0.0 * scaler_34 + -6.096991627302017 * scaler_35 + 1.9656355358572437 * scaler_36 + -1.5627455592228556 * scaler_37 + 3.469857683032951 * scaler_38 + -9.8270198457708 * scaler_39 + -14.15527814967269 * scaler_40 + 0.0 * scaler_41 + -1.8338967230363115 * scaler_42 + -13.655411830826507 * scaler_43 + -4.804612918155959 * scaler_44 + 3.212023670421102 * scaler_45 + 9.733875625667629 * scaler_46 + -13.566563398484423 * scaler_47 + -15.141509709839767 * scaler_48 + -4.09887686577382 * scaler_49 + -4.301937676953275 * scaler_50 + -9.515310487467648 * scaler_51 + -3.724497728173585 * scaler_52 + 9.994325922386638 * scaler_53 + 7.998089325505841 * scaler_54 + -4.802714566915193 * scaler_55 + -8.459792320717234 * scaler_56 + 4.3908939325617204 * scaler_57 + -9.938669226315861 * scaler_58 + -9.933133499473977 * scaler_59 + -8.85758706942516 * scaler_60 + -10.028820983438308 * scaler_61 + 1.2136250737200713 * scaler_62 + 9.822412738910256 * scaler_63 + 5.869130982534177 * scaler_64 + 2.6843062224285563 * scaler_65 + -218.46141920060336;
	
			std::any score_2 = 0.0 * scaler_2 + -2.696739453701957 * scaler_3 + 3.0421587174449067 * scaler_4 + 2.1530555446371125 * scaler_5 + -1.2479498207429065 * scaler_6 + -7.411831343318983 * scaler_7 + -6.699881715719166 * scaler_8 + -3.100760993980073 * scaler_9 + -6.2772995626417085 * scaler_10 + 10.557968187430898 * scaler_11 + 8.695771984942105 * scaler_12 + 2.8993320077850204 * scaler_13 + 18.323985993408655 * scaler_14 + 3.80409887900742 * scaler_15 + 2.2407925182594894 * scaler_16 + -2.452224504576747 * scaler_17 + -0.20057637614257 * scaler_18 + 5.837835170108388 * scaler_19 + -6.712285907087581 * scaler_20 + -10.043091741383305 * scaler_21 + 7.108458978346064 * scaler_22 + 4.876405762911676 * scaler_23 + 9.18999906747257 * scaler_24 + -1.7031278021275986 * scaler_25 + -0.11572215402494819 * scaler_26 + -18.89357499566166 * scaler_27 + -37.783621431998434 * scaler_28 + -29.37335776083924 * scaler_29 + -5.390640868424633 * scaler_30 + 5.147051547356128 * scaler_31 + -6.816345837718696 * scaler_32 + -10.635855952383999 * scaler_33 + 0.0 * scaler_34 + -15.205941285001717 * scaler_35 + -23.8614714294711 * scaler_36 + -2.6488770021141472 * scaler_37 + -8.906342660241785 * scaler_38 + -23.511271242077072 * scaler_39 + -23.349148356557347 * scaler_40 + 0.0 * scaler_41 + -7.1325884006195945 * scaler_42 + -1.3825699899877035 * scaler_43 + 4.200279156401842 * scaler_44 + 23.30209806155528 * scaler_45 + -15.564692802794985 * scaler_46 + -30.62990921166604 * scaler_47 + -16.021773133950234 * scaler_48 + -2.0569298927973563 * scaler_49 + -12.180172758325162 * scaler_50 + 5.388863190407258 * scaler_51 + 4.4490518380241 * scaler_52 + 28.583969781481095 * scaler_53 + 15.309231298522466 * scaler_54 + 7.62731227686213 * scaler_55 + 15.389820576111017 * scaler_56 + 3.3380243624357258 * scaler_57 + 20.670869762705287 * scaler_58 + 2.3866991801115747 * scaler_59 + 1.644836410647292 * scaler_60 + 3.5480270963290614 * scaler_61 + 1.9211621304513586 * scaler_62 + 16.919689522132987 * scaler_63 + 21.418153772531326 * scaler_64 + 3.695167425182844 * scaler_65 + -260.89292694324774;
	
			std::any score_3 = 0.0 * scaler_2 + 5.146172275140745 * scaler_3 + -7.2475586694289795 * scaler_4 + 2.5563074335565523 * scaler_5 + 20.077413013909393 * scaler_6 + 1.491660379891374 * scaler_7 + -6.971272612967381 * scaler_8 + -3.481219889887568 * scaler_9 + -4.515945216822294 * scaler_10 + -5.771846508637255 * scaler_11 + 8.356522065741123 * scaler_12 + -3.3165303974828646 * scaler_13 + 4.318627927350268 * scaler_14 + 15.13233964094246 * scaler_15 + 21.725459739815868 * scaler_16 + -3.082497397469793 * scaler_17 + -1.6355152167674858 * scaler_18 + 0.7710886504060518 * scaler_19 + -22.511035685538825 * scaler_20 + -16.713433755941914 * scaler_21 + 13.869297292702669 * scaler_22 + -9.376948660906024 * scaler_23 + -0.7418838169548322 * scaler_24 + -6.65052060038814 * scaler_25 + -0.9436073552863509 * scaler_26 + -8.410384524969556 * scaler_27 + -21.5220555505605 * scaler_28 + 2.0899705370093167 * scaler_29 + 13.983236446926428 * scaler_30 + -13.493354153870136 * scaler_31 + -29.057226476958704 * scaler_32 + -1.8891891292928389 * scaler_33 + 0.0 * scaler_34 + -20.663365363403894 * scaler_35 + -16.39947121805233 * scaler_36 + 2.6610198044895546 * scaler_37 + 5.489404560693511 * scaler_38 + 3.1041834287725067 * scaler_39 + -10.158354288851383 * scaler_40 + 0.0 * scaler_41 + -2.3310491011971974 * scaler_42 + -2.872302804824069 * scaler_43 + -16.047858167834704 * scaler_44 + -33.102092236158065 * scaler_45 + 9.322750601015064 * scaler_46 + 15.936027309008301 * scaler_47 + 18.615393105458303 * scaler_48 + -5.91479529373938 * scaler_49 + -4.214248755319782 * scaler_50 + -2.0540457603702063 * scaler_51 + -1.4542423053276425 * scaler_52 + -19.041833405169672 * scaler_53 + 4.095256828428883 * scaler_54 + 11.578651193707529 * scaler_55 + 16.44386727530494 * scaler_56 + 0.45095598607200343 * scaler_57 + -9.014820269253484 * scaler_58 + 0.1646230479923418 * scaler_59 + 3.4979795598525127 * scaler_60 + 6.4748006275440115 * scaler_61 + -0.4418726667564282 * scaler_62 + 2.956846440345709 * scaler_63 + 3.8351700220569165 * scaler_64 + -7.322230347319213 * scaler_65 + -178.2001749210099;
	
			std::any score_4 = 0.0 * scaler_2 + -6.568559904114356 * scaler_3 + -12.551355444287426 * scaler_4 + -23.83603847308808 * scaler_5 + -19.58479228320084 * scaler_6 + -21.41148596860224 * scaler_7 + -17.186640036422723 * scaler_8 + -0.7763576297181229 * scaler_9 + -5.239818717469152 * scaler_10 + -5.817404037303691 * scaler_11 + -12.341705660100939 * scaler_12 + -13.833436549902876 * scaler_13 + -22.564145820069953 * scaler_14 + -14.035966798036984 * scaler_15 + -6.400978051260525 * scaler_16 + 6.721074218565585 * scaler_17 + -9.997913957477396 * scaler_18 + -0.9528784643191242 * scaler_19 + 10.93215383864327 * scaler_20 + 11.227708526673576 * scaler_21 + 3.9660881768790173 * scaler_22 + 8.217661996185868 * scaler_23 + -0.23890643813999174 * scaler_24 + 1.1225291521215988 * scaler_25 + 16.64961149415298 * scaler_26 + 6.496070287461411 * scaler_27 + 20.128986924024503 * scaler_28 + 6.837029193681427 * scaler_29 + 1.2643385288005018 * scaler_30 + 0.4273376185787126 * scaler_31 + 12.664988547332594 * scaler_32 + 8.087550614096198 * scaler_33 + 0.0 * scaler_34 + 6.341805575488059 * scaler_35 + 12.136712994320364 * scaler_36 + 3.728307827120285 * scaler_37 + 7.95762143438072 * scaler_38 + 2.019953303733257 * scaler_39 + 11.425096748065275 * scaler_40 + 0.0 * scaler_41 + -0.40465726671377467 * scaler_42 + 14.551254255424068 * scaler_43 + -2.441310660269419 * scaler_44 + 16.897696779502372 * scaler_45 + 17.477193784592295 * scaler_46 + 0.858621403343229 * scaler_47 + -7.89610511710717 * scaler_48 + -1.9137472130796014 * scaler_49 + -4.130584679552374 * scaler_50 + 11.33729572458131 * scaler_51 + -13.274503606836209 * scaler_52 + 3.5249721536945957 * scaler_53 + 0.5420572347167111 * scaler_54 + -19.438846915461898 * scaler_55 + -19.99093712437218 * scaler_56 + -6.081294719374951 * scaler_57 + -16.977221558690054 * scaler_58 + -9.772693996616548 * scaler_59 + -9.857571848478583 * scaler_60 + -21.494349804152986 * scaler_61 + -22.21893062503712 * scaler_62 + -17.518714617411963 * scaler_63 + -12.69673981811239 * scaler_64 + -6.345062289087128 * scaler_65 + -264.9487263328943;
	
			std::any score_5 = 0.0 * scaler_2 + 1.5421442776631573 * scaler_3 + 17.223165962320518 * scaler_4 + 6.970289154266669 * scaler_5 + 14.503550325948993 * scaler_6 + 11.862506663123657 * scaler_7 + 19.540556298668857 * scaler_8 + -6.180691699802759 * scaler_9 + -1.0012823372310355 * scaler_10 + -2.39380756193398 * scaler_11 + 11.566398045992633 * scaler_12 + 2.9227685442871576 * scaler_13 + -8.402476293101673 * scaler_14 + -18.6340349833457 * scaler_15 + 9.38880266849527 * scaler_16 + 2.84303295805393 * scaler_17 + -10.464348077197434 * scaler_18 + -1.0136113774295747 * scaler_19 + 19.487504253739083 * scaler_20 + 2.4582695460737543 * scaler_21 + -24.73755837565946 * scaler_22 + -43.15827096413062 * scaler_23 + -21.434542175706277 * scaler_24 + -4.840251285608458 * scaler_25 + -17.246329825988457 * scaler_26 + 7.891679474010651 * scaler_27 + 17.96634180993639 * scaler_28 + 11.511479068446587 * scaler_29 + 3.589404947668575 * scaler_30 + -3.7694135965725075 * scaler_31 + -16.468083633130085 * scaler_32 + -0.8667324336613057 * scaler_33 + 0.0 * scaler_34 + 0.8461350114814294 * scaler_35 + 1.7819668823715886 * scaler_36 + -6.879269773117526 * scaler_37 + -6.816669999669696 * scaler_38 + -0.06368273834072814 * scaler_39 + 4.8610479580319765 * scaler_40 + 0.0 * scaler_41 + -3.838463215684823 * scaler_42 + -7.543612718387484 * scaler_43 + -20.51962075232442 * scaler_44 + -18.07276215436079 * scaler_45 + -5.445577666816167 * scaler_46 + 0.4344141498517492 * scaler_47 + 3.485394327980945 * scaler_48 + -4.202466666748063 * scaler_49 + -0.6501345650735332 * scaler_50 + -10.615403486434012 * scaler_51 + -6.268529185076581 * scaler_52 + -16.91832089235449 * scaler_53 + 3.290004224195964 * scaler_54 + -8.002327188351556 * scaler_55 + -6.745819384568855 * scaler_56 + -6.963844984332476 * scaler_57 + -0.432913299566878 * scaler_58 + 3.097437714879271 * scaler_59 + 15.352831692125731 * scaler_60 + 18.548421533493894 * scaler_61 + -4.783390574144614 * scaler_62 + -13.100865452044653 * scaler_63 + -8.293363749711304 * scaler_64 + -7.244042777943174 * scaler_65 + -215.1559286223792;
	
			std::any score_6 = 0.0 * scaler_2 + -7.392182939144235 * scaler_3 + -11.3860923071167 * scaler_4 + -8.292488136403469 * scaler_5 + -6.723074463050689 * scaler_6 + -5.242313461059416 * scaler_7 + -7.753101808596308 * scaler_8 + -6.061790191527077 * scaler_9 + -10.75922262282924 * scaler_10 + -19.037258348304118 * scaler_11 + -5.908067015493709 * scaler_12 + 8.158259548456673 * scaler_13 + -11.913106588843524 * scaler_14 + -11.228038352133035 * scaler_15 + -3.594478665215422 * scaler_16 + -7.2727105760509 * scaler_17 + -10.656606622304302 * scaler_18 + -6.034192662907904 * scaler_19 + 9.00006906504136 * scaler_20 + 14.35582568288327 * scaler_21 + -17.571651463722702 * scaler_22 + -25.554728358236336 * scaler_23 + -12.556066846132252 * scaler_24 + -6.793627475109688 * scaler_25 + -0.162455310451309 * scaler_26 + 5.960544431525154 * scaler_27 + 8.47288260439883 * scaler_28 + 13.10509016275416 * scaler_29 + -4.825697080596918 * scaler_30 + -6.659732547263171 * scaler_31 + -10.766957552419184 * scaler_32 + -9.313424257514566 * scaler_33 + 0.0 * scaler_34 + 11.526145026440872 * scaler_35 + 23.54406412088211 * scaler_36 + 10.797442115862665 * scaler_37 + -4.2815834927600545 * scaler_38 + -9.005359834402626 * scaler_39 + 4.3864077210923575 * scaler_40 + 0.0 * scaler_41 + -6.316206112415702 * scaler_42 + -6.98693957398292 * scaler_43 + 27.56651519142497 * scaler_44 + 0.9217753564140392 * scaler_45 + -0.4693177085856331 * scaler_46 + -3.452593582345149 * scaler_47 + 12.191193851323774 * scaler_48 + 0.84250996358721 * scaler_49 + -16.8396972485337 * scaler_50 + -10.800026704562937 * scaler_51 + 16.82293904278265 * scaler_52 + 12.413295773073024 * scaler_53 + -2.61848819828417 * scaler_54 + 12.885226665449602 * scaler_55 + 7.970876918139313 * scaler_56 + -6.393923240572368 * scaler_57 + -0.16245531045130857 * scaler_58 + -7.117700522391037 * scaler_59 + -15.063828785796137 * scaler_60 + -13.497051628152178 * scaler_61 + 6.861807990296176 * scaler_62 + 16.263258622639363 * scaler_63 + 3.3115778941651093 * scaler_64 + -7.670404386685041 * scaler_65 + -260.01982630780844;
	
			std::any score_7 = 0.0 * scaler_2 + 1.7420423649020074 * scaler_3 + 7.862064907561517 * scaler_4 + 3.61567082037533 * scaler_5 + 3.668823800310991 * scaler_6 + 14.353822647340262 * scaler_7 + 3.9637223262678094 * scaler_8 + 3.0107573554455174 * scaler_9 + -5.286147489308608 * scaler_10 + -0.8621626480139153 * scaler_11 + -0.24489136935562777 * scaler_12 + -0.4770839463779735 * scaler_13 + 16.16369457815718 * scaler_14 + 6.073227642131719 * scaler_15 + 2.100213398036575 * scaler_16 + -0.8844680987192374 * scaler_17 + -5.029196309762126 * scaler_18 + -6.899492084539194 * scaler_19 + -7.163580072392846 * scaler_20 + -9.714622885486447 * scaler_21 + -6.619479355231918 * scaler_22 + 6.43241439505241 * scaler_23 + 5.770201665572352 * scaler_24 + -0.37681350918046813 * scaler_25 + -0.4372956309450174 * scaler_26 + -8.32633519919189 * scaler_27 + -0.7590817741343796 * scaler_28 + -15.856253905142434 * scaler_29 + 0.37727322094030075 * scaler_30 + 8.497589527243877 * scaler_31 + -0.29528517611774446 * scaler_32 + -4.57580774946179 * scaler_33 + 0.0 * scaler_34 + 9.513302534587854 * scaler_35 + -0.2693905739153683 * scaler_36 + 3.1033296513625657 * scaler_37 + 8.368595425846303 * scaler_38 + 1.8770151129487007 * scaler_39 + 6.122200187714701 * scaler_40 + 0.0 * scaler_41 + -1.0802772803339478 * scaler_42 + -10.147173497817537 * scaler_43 + 3.7549652708131678 * scaler_44 + 9.10047337683163 * scaler_45 + 9.932468097070434 * scaler_46 + 0.27649743463418963 * scaler_47 + -10.306829704548944 * scaler_48 + -2.72716290555998 * scaler_49 + -3.2187989004764654 * scaler_50 + -7.54304518732841 * scaler_51 + -3.190839211678002 * scaler_52 + -0.44776568208412626 * scaler_53 + -8.167828599697488 * scaler_54 + -32.5051005724746 * scaler_55 + -17.507834110690666 * scaler_56 + -5.441935818388408 * scaler_57 + -7.830164121156642 * scaler_58 + -4.237229916927096 * scaler_59 + -0.3979050055681458 * scaler_60 + -16.15458073781009 * scaler_61 + -22.924995405159063 * scaler_62 + -27.38551305724879 * scaler_63 + -12.202491612662383 * scaler_64 + -5.988525560040883 * scaler_65 + -207.95066923018183;
	
			std::any score_8 = 0.0 * scaler_2 + 4.728946651764616 * scaler_3 + 0.20409441983170606 * scaler_4 + -7.8559930430239255 * scaler_5 + -0.1282163414673968 * scaler_6 + 5.025485070248709 * scaler_7 + -12.734349227034889 * scaler_8 + -7.19983048202486 * scaler_9 + 0.7023050246854297 * scaler_10 + -2.527318381920337 * scaler_11 + 8.596058256837553 * scaler_12 + -1.12780355506793 * scaler_13 + -7.672307425350405 * scaler_14 + 6.418279714099831 * scaler_15 + -1.8416148443801121 * scaler_16 + -7.910130066771638 * scaler_17 + 1.3986105417948729 * scaler_18 + 3.0275033244003824 * scaler_19 + 6.976831221221562 * scaler_20 + 8.01746042848258 * scaler_21 + -4.912745453248168 * scaler_22 + 5.293853548044806 * scaler_23 + 12.385537194664199 * scaler_24 + -7.30251913867747 * scaler_25 + -1.206185750988849 * scaler_26 + 0.10047740706142788 * scaler_27 + -4.2086041813584805 * scaler_28 + 8.715874592926928 * scaler_29 + 0.16662661996245687 * scaler_30 + -0.589126902996936 * scaler_31 + -21.282702306526623 * scaler_32 + -5.43772165834214 * scaler_33 + 0.0 * scaler_34 + -12.724518525295478 * scaler_35 + -5.045056307875009 * scaler_36 + 22.985372983757287 * scaler_37 + -4.130438937485582 * scaler_38 + 0.802012369531609 * scaler_39 + -31.98514588933919 * scaler_40 + 0.0 * scaler_41 + -4.968955362399656 * scaler_42 + 3.0549452678145754 * scaler_43 + 6.902473785535708 * scaler_44 + 1.5139570982378885 * scaler_45 + 1.925550902439765 * scaler_46 + 3.7997699719085856 * scaler_47 + 2.1708257977164793 * scaler_48 + -4.772979986873778 * scaler_49 + -7.392743205021907 * scaler_50 + 0.9650425761346335 * scaler_51 + 7.39783200252025 * scaler_52 + -8.220286707729086 * scaler_53 + -6.956385052840706 * scaler_54 + 2.94279217234582 * scaler_55 + -2.5817001151337093 * scaler_56 + -12.096934329134884 * scaler_57 + -1.2061857509888476 * scaler_58 + -4.580244178470147 * scaler_59 + -15.063277015116666 * scaler_60 + 0.7319844921844834 * scaler_61 + 7.320732657796275 * scaler_62 + -10.243408312286544 * scaler_63 + -6.402645151033631 * scaler_64 + -6.473505253916415 * scaler_65 + -85.42296604057552;
	
			std::any score_9 = 0.0 * scaler_2 + -1.7167630095229904 * scaler_3 + -1.3212722139807629 * scaler_4 + 3.7580933195886193 * scaler_5 + 0.8529826775276275 * scaler_6 + -2.631679835269666 * scaler_7 + 1.4054922650679327 * scaler_8 + -0.3349317152271118 * scaler_9 + -7.17273591628765 * scaler_10 + 3.942606042686815 * scaler_11 + 12.426806216281872 * scaler_12 + 5.909209903217746 * scaler_13 + 3.1993001242464594 * scaler_14 + 7.8156219865874155 * scaler_15 + 4.588449628830394 * scaler_16 + -0.1741379371365655 * scaler_17 + -6.577746162206495 * scaler_18 + -0.4056159510444766 * scaler_19 + 19.632915771437464 * scaler_20 + 11.129984487174319 * scaler_21 + 12.737412045284913 * scaler_22 + 31.00186248104586 * scaler_23 + 5.663997700486066 * scaler_24 + -5.209630528399497 * scaler_25 + -1.0197300230381505 * scaler_26 + 2.458986557576311 * scaler_27 + 10.277936925102535 * scaler_28 + 17.197561607795592 * scaler_29 + 12.83820741608394 * scaler_30 + 23.485261732394108 * scaler_31 + -2.2450635784438653 * scaler_32 + -6.208880977493285 * scaler_33 + 0.0 * scaler_34 + -21.60566197376242 * scaler_35 + -7.073328668233155 * scaler_36 + 12.494487193012242 * scaler_37 + -19.27320786672466 * scaler_38 + 1.1253622212033474 * scaler_39 + -5.865392814550506 * scaler_40 + 0.0 * scaler_41 + -2.5190994329898273 * scaler_42 + -8.978681766444373 * scaler_43 + -28.866424724391297 * scaler_44 + -46.32604575071359 * scaler_45 + -22.226642542082043 * scaler_46 + -9.472076763611707 * scaler_47 + -5.991148990842389 * scaler_48 + -1.654643017613923 * scaler_49 + -1.5313960917430993 * scaler_50 + 4.024605500010359 * scaler_51 + -0.6853626745385173 * scaler_52 + -0.8900751231469255 * scaler_53 + -12.010978312631467 * scaler_54 + -11.052400503840602 * scaler_55 + -2.224617795028898 * scaler_56 + 1.5881493918770526 * scaler_57 + -1.0197300230381467 * scaler_58 + -11.653071068852398 * scaler_59 + -0.716300719675083 * scaler_60 + 1.906202073608124 * scaler_61 + -1.168222541410148 * scaler_62 + 0.7794585097192775 * scaler_63 + 2.430003469220096 * scaler_64 + -5.614617195226269 * scaler_65 + -167.8145880583003;
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				score_0,
				score_1,
				score_2,
				score_3,
				score_4,
				score_5,
				score_6,
				score_7,
				score_8,
				score_9 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
			int lBestClass = get_arg_max( lTable["Score"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
