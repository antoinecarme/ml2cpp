// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingRegressor
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingRegressor_freidman2.exe ml2cpp-demo_GradientBoostingRegressor_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-440.74365306 }} ,
				{ 4 ,  {-300.48811853 }} ,
				{ 6 ,  {-252.21981166 }} ,
				{ 7 ,  {185.22544339 }} ,
				{ 10 ,  {-269.85383486 }} ,
				{ 11 ,  {99.60714748 }} ,
				{ 13 ,  {361.14063777 }} ,
				{ 14 ,  {673.39649529 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1455.501708984375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0_0
	

	namespace SubModel_1_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-396.66928775 }} ,
				{ 4 ,  {-270.43930668 }} ,
				{ 6 ,  {-226.9978305 }} ,
				{ 7 ,  {166.70289905 }} ,
				{ 10 ,  {-242.86845137 }} ,
				{ 11 ,  {39.5826129 }} ,
				{ 13 ,  {245.43746079 }} ,
				{ 14 ,  {549.62774214 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1455.501708984375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 882.4659118652344) ? ( (Feature_1 <= 541.9518432617188) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1_0
	

	namespace SubModel_2_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-357.00235897 }} ,
				{ 4 ,  {-243.39537601 }} ,
				{ 6 ,  {-204.29804745 }} ,
				{ 7 ,  {150.03260914 }} ,
				{ 10 ,  {-218.58160623 }} ,
				{ 11 ,  {77.11088611 }} ,
				{ 13 ,  {284.25934624 }} ,
				{ 14 ,  {566.30358562 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1455.501708984375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2_0
	

	namespace SubModel_3_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-321.30212308 }} ,
				{ 4 ,  {-219.05583841 }} ,
				{ 6 ,  {-246.01218887 }} ,
				{ 7 ,  {20.0079661 }} ,
				{ 10 ,  {-253.11775252 }} ,
				{ 11 ,  {-65.05519983 }} ,
				{ 13 ,  {175.66039549 }} ,
				{ 14 ,  {456.83755866 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 956.167724609375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_1 <= 329.4079284667969) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3_0
	

	namespace SubModel_4_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-312.44042299 }} ,
				{ 4 ,  {-279.19969125 }} ,
				{ 6 ,  {-243.06870271 }} ,
				{ 7 ,  {-123.70668646 }} ,
				{ 10 ,  {-240.42354835 }} ,
				{ 11 ,  {-94.03382593 }} ,
				{ 13 ,  {162.00429204 }} ,
				{ 14 ,  {413.62294641 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4144279509782791) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.041584232822060585) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 876.18896484375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 745.0648193359375) ? ( (Feature_1 <= 329.4079284667969) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.7988642752170563) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4_0
	

	namespace SubModel_5_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-268.73887689 }} ,
				{ 4 ,  {-200.06732695 }} ,
				{ 6 ,  {-154.98797255 }} ,
				{ 7 ,  {133.59709412 }} ,
				{ 10 ,  {-160.74740653 }} ,
				{ 11 ,  {45.86449063 }} ,
				{ 13 ,  {205.3933698 }} ,
				{ 14 ,  {436.68603471 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 897.0426940917969) ? ( (Feature_1 <= 476.3112335205078) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.379633828997612) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5_0
	

	namespace SubModel_6_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-264.19493829 }} ,
				{ 4 ,  {-229.61790456 }} ,
				{ 6 ,  {-250.45005786 }} ,
				{ 7 ,  {-113.18381573 }} ,
				{ 10 ,  {-161.87059329 }} ,
				{ 11 ,  {2.72171223 }} ,
				{ 13 ,  {121.7425807 }} ,
				{ 14 ,  {316.58359224 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4144279509782791) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.041584232822060585) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 617.5478210449219) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 882.4659118652344) ? ( (Feature_1 <= 519.7247924804688) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6_0
	

	namespace SubModel_7_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-215.99191321 }} ,
				{ 4 ,  {-123.6665432 }} ,
				{ 6 ,  {-75.82618946 }} ,
				{ 7 ,  {179.56232974 }} ,
				{ 10 ,  {-157.22852354 }} ,
				{ 11 ,  {-9.3613995 }} ,
				{ 13 ,  {187.66729178 }} ,
				{ 14 ,  {434.37196121 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6867678761482239) ? ( (Feature_2 <= 0.4144279509782791) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1326.3909912109375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_1 <= 301.26104736328125) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1283.81982421875) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7_0
	

	namespace SubModel_8_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-221.69268305 }} ,
				{ 4 ,  {-155.58455447 }} ,
				{ 6 ,  {-151.61264173 }} ,
				{ 7 ,  {22.08065705 }} ,
				{ 10 ,  {-95.66530714 }} ,
				{ 11 ,  {66.78513067 }} ,
				{ 13 ,  {149.7610315 }} ,
				{ 14 ,  {331.230072 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5668879747390747) ? ( (Feature_1 <= 870.9581298828125) ? ( (Feature_1 <= 287.6764678955078) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.25638625025749207) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 745.0648193359375) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1283.81982421875) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8_0
	

	namespace SubModel_9_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-146.06482323 }} ,
				{ 4 ,  {-50.35904258 }} ,
				{ 6 ,  {142.21340014 }} ,
				{ 7 ,  {-220.08572171 }} ,
				{ 10 ,  {-118.09567781 }} ,
				{ 11 ,  {13.0457848 }} ,
				{ 13 ,  {179.23266525 }} ,
				{ 14 ,  {437.78541217 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6867678761482239) ? ( (Feature_1 <= 1645.8584594726562) ? ( (Feature_1 <= 834.2146911621094) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1718.6006469726562) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_1 <= 360.9476013183594) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9_0
	

	namespace SubModel_10_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-157.52225851 }} ,
				{ 4 ,  {-84.54335335 }} ,
				{ 6 ,  {-95.5149735 }} ,
				{ 7 ,  {85.20791039 }} ,
				{ 10 ,  {-39.47192314 }} ,
				{ 11 ,  {109.88126504 }} ,
				{ 13 ,  {245.72061799 }} ,
				{ 14 ,  {436.6304988 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.792053759098053) ? ( (Feature_1 <= 870.9581298828125) ? ( (Feature_1 <= 476.3112335205078) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.379633828997612) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1010.49169921875) ? ( (Feature_1 <= 463.0554962158203) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10_0
	

	namespace SubModel_11_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-184.75910601 }} ,
				{ 4 ,  {-149.30036796 }} ,
				{ 6 ,  {-125.71879086 }} ,
				{ 7 ,  {-32.71609333 }} ,
				{ 10 ,  {-125.08317359 }} ,
				{ 11 ,  {-1.06269919 }} ,
				{ 13 ,  {105.60536491 }} ,
				{ 14 ,  {263.91570266 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4695979952812195) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.026090397965162992) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 876.18896484375) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 943.0731811523438) ? ( (Feature_1 <= 329.4079284667969) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11_0
	

	namespace SubModel_12_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-119.24599847 }} ,
				{ 4 ,  {-47.64308226 }} ,
				{ 6 ,  {-170.04974158 }} ,
				{ 7 ,  {116.53349594 }} ,
				{ 10 ,  {-85.22798972 }} ,
				{ 11 ,  {59.05555046 }} ,
				{ 13 ,  {181.88467815 }} ,
				{ 14 ,  {340.94334835 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6867678761482239) ? ( (Feature_1 <= 1645.8584594726562) ? ( (Feature_2 <= 0.2454954981803894) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.15862789168022573) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1072.6768188476562) ? ( (Feature_1 <= 360.9476013183594) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12_0
	

	namespace SubModel_13_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-114.04565336 }} ,
				{ 4 ,  {-58.53586775 }} ,
				{ 6 ,  {80.76617959 }} ,
				{ 7 ,  {-153.04476743 }} ,
				{ 10 ,  {-56.78529898 }} ,
				{ 11 ,  {73.89684204 }} ,
				{ 13 ,  {115.64814437 }} ,
				{ 14 ,  {270.49068469 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5803560316562653) ? ( (Feature_1 <= 1645.8584594726562) ? ( (Feature_1 <= 628.7957763671875) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1718.6006469726562) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1283.81982421875) ? ( (Feature_1 <= 745.0648193359375) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 4.12413477897644) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13_0
	

	namespace SubModel_14_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-168.88048222 }} ,
				{ 4 ,  {-80.76014408 }} ,
				{ 6 ,  {-67.33392127 }} ,
				{ 7 ,  {54.71004779 }} ,
				{ 10 ,  {-21.89256757 }} ,
				{ 11 ,  {80.88488271 }} ,
				{ 13 ,  {164.59141831 }} ,
				{ 14 ,  {313.59231116 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.792053759098053) ? ( (Feature_1 <= 736.0386047363281) ? ( (Feature_1 <= 195.00569915771484) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.379633828997612) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1010.49169921875) ? ( (Feature_1 <= 463.0554962158203) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.9767304956912994) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14_0
	

	namespace SubModel_15_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-116.95071765 }} ,
				{ 4 ,  {-57.03180257 }} ,
				{ 6 ,  {-93.55265275 }} ,
				{ 7 ,  {41.61344291 }} ,
				{ 10 ,  {-19.70331081 }} ,
				{ 11 ,  {79.36128098 }} ,
				{ 13 ,  {155.32158904 }} ,
				{ 14 ,  {282.23308004 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.792053759098053) ? ( (Feature_1 <= 888.9274597167969) ? ( (Feature_1 <= 287.6764678955078) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.23312415182590485) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1066.5789794921875) ? ( (Feature_1 <= 463.0554962158203) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.9767304956912994) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15_0
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_3_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_4_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_5_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_6_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_7_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_8_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_9_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_10_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_11_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_12_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_13_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_14_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_15_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, { "Estimator" });


		tTable lTable;

		std::any  lEstimator = 499.09288446517394 + 0.1 * lAggregatedTable[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
