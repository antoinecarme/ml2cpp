// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LGBMClassifier_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LGBMClassifier_Pipeline_digits.exe ml2cpp-demo_LGBMClassifier_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		namespace LGBM_Tree_0_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-2.370715088873096 }} ,
					{ 8 ,  {-2.2610076720284464 }} ,
					{ 13 ,  {-2.3158613804507713 }} ,
					{ 14 ,  {-2.370715088873096 }} ,
					{ 15 ,  {-2.370715088873096 }} ,
					{ 18 ,  {-2.125930415038471 }} ,
					{ 19 ,  {-2.08273311965589 }} ,
					{ 24 ,  {-2.370715088873096 }} ,
					{ 25 ,  {-2.370715088873096 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_0
		
	
		namespace LGBM_Tree_1_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-2.0713131492151926 }} ,
					{ 12 ,  {-2.2299472532977083 }} ,
					{ 14 ,  {-2.30772913658978 }} ,
					{ 15 ,  {-2.2396699887092173 }} ,
					{ 16 ,  {-2.30772913658978 }} ,
					{ 17 ,  {-2.2668936478614423 }} ,
					{ 20 ,  {-2.280505477437555 }} ,
					{ 22 ,  {-2.2344346696414816 }} ,
					{ 27 ,  {-2.152165370005636 }} ,
					{ 46 ,  {-2.30772913658978 }} ,
					{ 47 ,  {-2.30772913658978 }} ,
					{ 52 ,  {-2.0681609360501985 }} ,
					{ 84 ,  {-2.30772913658978 }} ,
					{ 85 ,  {-2.30772913658978 }} ,
					{ 86 ,  {-2.30772913658978 }} ,
					{ 87 ,  {-2.294117307013668 }} ,
					{ 106 ,  {-2.035492545067528 }} ,
					{ 107 ,  {-2.035492545067528 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_3 <= 1.0000000180025095e-35 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 12 ) : ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 52 ) : ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_0
		
	
		namespace LGBM_Tree_2_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-2.094036341952792 }} ,
					{ 15 ,  {-2.1994934559104857 }} ,
					{ 16 ,  {-2.2719774560700863 }} ,
					{ 17 ,  {-2.3009710561339265 }} ,
					{ 20 ,  {-2.3009710561339265 }} ,
					{ 21 ,  {-2.26038001604455 }} ,
					{ 22 ,  {-2.3009710561339265 }} ,
					{ 25 ,  {-2.0891917165371803 }} ,
					{ 26 ,  {-2.3009710561339265 }} ,
					{ 27 ,  {-2.0980158556870445 }} ,
					{ 29 ,  {-2.2874407094374676 }} ,
					{ 47 ,  {-2.3009710561339265 }} ,
					{ 48 ,  {-2.030364122204751 }} ,
					{ 49 ,  {-2.030364122204751 }} ,
					{ 56 ,  {-2.3009710561339265 }} ,
					{ 57 ,  {-2.3009710561339265 }} ,
					{ 92 ,  {-2.3009710561339265 }} ,
					{ 93 ,  {-2.3009710561339265 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_62 <= -2.3230670362774934 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( 22 ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( ( ( scaler_6 <= -0.31365853924047515 ) ? ( 92 ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( ( ( scaler_4 <= 0.5081311054894627 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_11 <= -0.46497723121655854 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_0
		
	
		namespace LGBM_Tree_3_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-2.163919526033526 }} ,
					{ 10 ,  {-2.2754574796442704 }} ,
					{ 16 ,  {-2.1009333875239293 }} ,
					{ 22 ,  {-2.29382843670957 }} ,
					{ 25 ,  {-2.3213848723075183 }} ,
					{ 26 ,  {-2.118764022322602 }} ,
					{ 27 ,  {-2.3213848723075183 }} ,
					{ 28 ,  {-2.3213848723075183 }} ,
					{ 29 ,  {-2.2524937833126466 }} ,
					{ 34 ,  {-2.045820516328032 }} ,
					{ 35 ,  {-2.045820516328032 }} ,
					{ 46 ,  {-2.3213848723075183 }} ,
					{ 47 ,  {-2.3213848723075183 }} ,
					{ 48 ,  {-2.2332042783940826 }} ,
					{ 49 ,  {-2.3213848723075183 }} ,
					{ 60 ,  {-2.3213848723075183 }} ,
					{ 61 ,  {-2.3213848723075183 }} ,
					{ 63 ,  {-2.273460636484999 }} ,
					{ 124 ,  {-2.2854416954406287 }} ,
					{ 250 ,  {-2.3213848723075183 }} ,
					{ 251 ,  {-2.3213848723075183 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( scaler_5 <= 0.8739877549375447 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 10 ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( ( ( scaler_4 <= -1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_12 <= -0.5274222422224029 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_3 <= 1.3594628760613219 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 124 ) : ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_0
		
	
		namespace LGBM_Tree_4_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-2.0151191436058937 }} ,
					{ 7 ,  {-2.1898201545330607 }} ,
					{ 17 ,  {-2.2277986351694015 }} ,
					{ 19 ,  {-2.2505857235512057 }} ,
					{ 20 ,  {-2.2632452170966526 }} ,
					{ 22 ,  {-2.2012136987239628 }} ,
					{ 23 ,  {-2.2809685080602784 }} ,
					{ 32 ,  {-2.267676039837559 }} ,
					{ 33 ,  {-2.2809685080602784 }} ,
					{ 36 ,  {-2.1879212305012437 }} ,
					{ 37 ,  {-2.0287524443471443 }} ,
					{ 42 ,  {-2.2809685080602784 }} ,
					{ 43 ,  {-2.2729124667131755 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_31 <= -0.6960705321004114 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 6 ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_0
		
	
		namespace LGBM_Tree_5_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {-2.2589679609816025 }} ,
					{ 12 ,  {-2.328283808804682 }} ,
					{ 14 ,  {-2.328283808804682 }} ,
					{ 15 ,  {-2.227460757425657 }} ,
					{ 16 ,  {-2.1619257740292905 }} ,
					{ 17 ,  {-2.328283808804682 }} ,
					{ 18 ,  {-2.3018777715387473 }} ,
					{ 20 ,  {-2.090629473411266 }} ,
					{ 27 ,  {-2.303078045959926 }} ,
					{ 38 ,  {-2.328283808804682 }} ,
					{ 39 ,  {-2.328283808804682 }} ,
					{ 42 ,  {-2.0510204175123627 }} ,
					{ 43 ,  {-2.0510204175123627 }} ,
					{ 52 ,  {-2.328283808804682 }} ,
					{ 53 ,  {-2.328283808804682 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( 18 ) : ( ( ( scaler_4 <= 0.9323486210092059 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 20 ) : ( ( ( scaler_8 <= 1.0000000180025095e-35 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( 12 ) : ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_0
		
	
		namespace LGBM_Tree_6_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-2.3252129440080207 }} ,
					{ 8 ,  {-2.2860802888957794 }} ,
					{ 15 ,  {-2.328190428636126 }} ,
					{ 19 ,  {-2.342227141882908 }} ,
					{ 20 ,  {-2.342227141882908 }} ,
					{ 21 ,  {-2.2720435756489974 }} ,
					{ 22 ,  {-2.187823296168305 }} ,
					{ 36 ,  {-2.342227141882908 }} ,
					{ 37 ,  {-2.342227141882908 }} ,
					{ 46 ,  {-2.0614928769472662 }} ,
					{ 47 ,  {-2.061492876947266 }} ,
					{ 56 ,  {-2.342227141882908 }} ,
					{ 57 ,  {-2.328190428636126 }} ,
					{ 58 ,  {-2.342227141882908 }} ,
					{ 59 ,  {-2.342227141882908 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 8 ) : ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_13 <= 0.8841429258667266 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 22 ) : ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( scaler_3 <= 1.3594628760613219 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_0
		
	
		namespace LGBM_Tree_7_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-2.314559339450899 }} ,
					{ 8 ,  {-2.207446975420856 }} ,
					{ 15 ,  {-2.285292578275404 }} ,
					{ 18 ,  {-2.0862786022820377 }} ,
					{ 24 ,  {-2.356368998273035 }} ,
					{ 25 ,  {-2.3279384302739827 }} ,
					{ 27 ,  {-2.329292266845366 }} ,
					{ 38 ,  {-2.072063318282511 }} ,
					{ 39 ,  {-2.0720633182825114 }} ,
					{ 52 ,  {-2.0720633182825114 }} ,
					{ 53 ,  {-2.2284314422772993 }} ,
					{ 57 ,  {-2.2995078622749303 }} ,
					{ 58 ,  {-2.356368998273035 }} ,
					{ 112 ,  {-2.356368998273035 }} ,
					{ 113 ,  {-2.356368998273035 }} ,
					{ 118 ,  {-2.3326768582738246 }} ,
					{ 119 ,  {-2.356368998273035 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -1.9140056961885608 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_31 <= -0.5260895048885342 ) ? ( 8 ) : ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 18 ) : ( ( ( scaler_8 <= 0.6252656114845001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_47 <= -1.0000000180025095e-35 ) ? ( 24 ) : ( 25 ) ) ) : ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( ( ( scaler_4 <= 0.7202398632493343 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( 58 ) : ( ( ( scaler_55 <= -1.0000000180025095e-35 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_0
		
	
		namespace LGBM_Tree_8_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-2.392630272112306 }} ,
					{ 16 ,  {-2.369443172778941 }} ,
					{ 18 ,  {-2.238785708281406 }} ,
					{ 20 ,  {-2.3192044575566495 }} ,
					{ 23 ,  {-2.3625068610125495 }} ,
					{ 29 ,  {-2.3779451092011747 }} ,
					{ 30 ,  {-2.392630272112306 }} ,
					{ 31 ,  {-2.260463805912124 }} ,
					{ 38 ,  {-2.3525798278092207 }} ,
					{ 39 ,  {-2.392630272112306 }} ,
					{ 42 ,  {-2.3779451092011747 }} ,
					{ 44 ,  {-2.333889620467781 }} ,
					{ 56 ,  {-2.392630272112306 }} ,
					{ 57 ,  {-2.392630272112306 }} ,
					{ 68 ,  {-2.392630272112306 }} ,
					{ 69 ,  {-2.392630272112306 }} ,
					{ 70 ,  {-2.392630272112306 }} ,
					{ 71 ,  {-2.3632599462900434 }} ,
					{ 86 ,  {-2.392630272112306 }} ,
					{ 87 ,  {-2.392630272112306 }} ,
					{ 90 ,  {-2.2010846689236367 }} ,
					{ 182 ,  {-2.128297339711941 }} ,
					{ 183 ,  {-2.098927013889679 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 16 ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_4 <= -0.9766301988296382 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 18 ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( ( ( scaler_14 <= -1.0042287240761734 ) ? ( 20 ) : ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( 42 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 44 ) : ( ( ( scaler_46 <= -0.510181547621488 ) ? ( 90 ) : ( ( ( scaler_12 <= 0.2095713273155506 ) ? ( 182 ) : ( 183 ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 6 ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_29 <= 1.1136086350295498 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_12 <= -0.15892545745342618 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_0
		
	
		namespace LGBM_Tree_9_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {-2.150669564557712 }} ,
					{ 13 ,  {-2.294117307013668 }} ,
					{ 15 ,  {-2.1893654011453227 }} ,
					{ 16 ,  {-2.254794243793787 }} ,
					{ 22 ,  {-2.30772913658978 }} ,
					{ 23 ,  {-2.280505477437555 }} ,
					{ 25 ,  {-2.2040199588670175 }} ,
					{ 28 ,  {-2.257314952974548 }} ,
					{ 34 ,  {-2.26417128194622 }} ,
					{ 36 ,  {-2.30772913658978 }} ,
					{ 37 ,  {-2.294117307013668 }} ,
					{ 39 ,  {-2.30772913658978 }} ,
					{ 49 ,  {-2.1392017227902906 }} ,
					{ 77 ,  {-2.30772913658978 }} ,
					{ 96 ,  {-2.074383486713564 }} ,
					{ 97 ,  {-2.035492545067528 }} ,
					{ 116 ,  {-2.30772913658978 }} ,
					{ 117 ,  {-2.30772913658978 }} ,
					{ 118 ,  {-2.30772913658978 }} ,
					{ 119 ,  {-2.30772913658978 }} ,
					{ 142 ,  {-2.2668936478614423 }} ,
					{ 143 ,  {-2.30772913658978 }} ,
					{ 280 ,  {-2.30772913658978 }} ,
					{ 281 ,  {-2.30772913658978 }} ,
					{ 282 ,  {-2.280505477437555 }} ,
					{ 283 ,  {-2.30772913658978 }} ,
					{ 304 ,  {-2.30772913658978 }} ,
					{ 305 ,  {-2.30772913658978 }} ,
					{ 306 ,  {-2.30772913658978 }} ,
					{ 307 ,  {-2.30772913658978 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 16 ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_56 <= 1.5665167660176842 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_40 <= -1.0000000180025095e-35 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_5 <= 0.8739877549375447 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_4 <= -0.9766301988296382 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_44 <= 1.3208483674838594 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( 304 ) : ( 305 ) ) ) : ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( 306 ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 10 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( 28 ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_5 <= -1.2473003438908805 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_0
		
	
		namespace LGBM_Tree_0_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.07241614082628317 }} ,
					{ 10 ,  {-0.027589848533501757 }} ,
					{ 11 ,  {-0.027558110245759573 }} ,
					{ 13 ,  {0.027045911475137942 }} ,
					{ 17 ,  {0.1717790616298461 }} ,
					{ 24 ,  {-0.027625352533221577 }} ,
					{ 25 ,  {-0.0275694301028332 }} ,
					{ 29 ,  {-0.027539432980197415 }} ,
					{ 32 ,  {0.21242585341990414 }} ,
					{ 56 ,  {-0.027554457024808694 }} ,
					{ 57 ,  {-0.027571970219377268 }} ,
					{ 63 ,  {-0.027541385514255612 }} ,
					{ 66 ,  {0.20514225995726784 }} ,
					{ 121 ,  {-0.027558633158602824 }} ,
					{ 122 ,  {-0.027534474210234444 }} ,
					{ 123 ,  {-0.02756729596779501 }} ,
					{ 124 ,  {-0.027561103168027262 }} ,
					{ 125 ,  {-0.02758038581802376 }} ,
					{ 134 ,  {0.20178251577943335 }} ,
					{ 135 ,  {0.20240738996053392 }} ,
					{ 483 ,  {-0.02755163056181922 }} ,
					{ 962 ,  {-0.02757905612167016 }} ,
					{ 963 ,  {-0.02755410524567128 }} ,
					{ 1923 ,  {-0.02761136164212116 }} ,
					{ 1930 ,  {-0.02756114764365869 }} ,
					{ 3840 ,  {-0.027575404170436107 }} ,
					{ 3841 ,  {-0.027558612238869087 }} ,
					{ 3842 ,  {-0.02760452611242774 }} ,
					{ 3843 ,  {-0.02757590068255844 }} ,
					{ 3845 ,  {-0.02757487833128835 }} ,
					{ 3856 ,  {-0.02757319336643963 }} ,
					{ 3858 ,  {-0.027558187199042457 }} ,
					{ 3859 ,  {-0.027578676079914474 }} ,
					{ 3862 ,  {-0.027560173079311197 }} ,
					{ 7688 ,  {-0.027580667855130303 }} ,
					{ 7689 ,  {-0.02760769002781546 }} ,
					{ 7714 ,  {-0.02758634033884246 }} ,
					{ 7715 ,  {-0.027608023846023785 }} ,
					{ 7726 ,  {-0.02756770683042938 }} ,
					{ 7727 ,  {-0.027594064275115626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_45 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 32 ) : ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( 66 ) : ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_62 <= -1.9140056961885608 ) ? ( ( ( scaler_32 <= 1.374642225541209 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_44 <= 1.1679948056498102 ) ? ( ( ( scaler_64 <= 2.764605635070462 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( 3840 ) : ( 3841 ) ) ) : ( ( ( scaler_36 <= 0.14060793695184343 ) ? ( 3842 ) : ( 3843 ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_37 <= 0.874679379836743 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 7688 ) : ( 7689 ) ) ) : ( 3845 ) ) ) : ( 1923 ) ) ) ) ) : ( ( ( scaler_36 <= 1.0000000180025095e-35 ) ? ( 962 ) : ( 963 ) ) ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 3856 ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 7714 ) : ( 7715 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 3858 ) : ( 3859 ) ) ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 1930 ) : ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 3862 ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 7726 ) : ( 7727 ) ) ) ) ) ) ) ) ) : ( 483 ) ) ) ) ) : ( 121 ) ) ) : ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_1
		
	
		namespace LGBM_Tree_1_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.027795367469311834 }} ,
					{ 12 ,  {0.04648202927283754 }} ,
					{ 14 ,  {0.03958960489387753 }} ,
					{ 18 ,  {0.2034465506465399 }} ,
					{ 19 ,  {0.10102337087690816 }} ,
					{ 20 ,  {-0.0005137162405287921 }} ,
					{ 22 ,  {0.04263911694375085 }} ,
					{ 26 ,  {0.10439787554290676 }} ,
					{ 30 ,  {-0.027745893510220693 }} ,
					{ 31 ,  {-0.027860623045599886 }} ,
					{ 46 ,  {-0.027762843521184674 }} ,
					{ 47 ,  {-0.02773850699638576 }} ,
					{ 55 ,  {0.1576838540532557 }} ,
					{ 87 ,  {-0.013823828169561079 }} ,
					{ 108 ,  {0.19791419037276298 }} ,
					{ 109 ,  {0.18511528191376078 }} ,
					{ 172 ,  {-0.027757361881259053 }} ,
					{ 173 ,  {-0.02778503068778633 }} ,
					{ 342 ,  {-0.02774624145758874 }} ,
					{ 343 ,  {-0.027725558717767898 }} ,
					{ 673 ,  {-0.02778256024608754 }} ,
					{ 674 ,  {-0.0277954730659036 }} ,
					{ 675 ,  {-0.027773147517819886 }} ,
					{ 676 ,  {-0.02775311371704523 }} ,
					{ 680 ,  {-0.02773496869264613 }} ,
					{ 681 ,  {-0.027757095865909166 }} ,
					{ 682 ,  {-0.027777980512668995 }} ,
					{ 683 ,  {-0.027755077784052107 }} ,
					{ 1344 ,  {-0.02773672138959786 }} ,
					{ 1354 ,  {-0.0277452833492446 }} ,
					{ 1355 ,  {-0.0277234405827987 }} ,
					{ 1356 ,  {-0.027758713269368036 }} ,
					{ 1359 ,  {-0.027757083101715808 }} ,
					{ 2690 ,  {-0.02774330904860872 }} ,
					{ 2691 ,  {-0.02776372801527245 }} ,
					{ 2714 ,  {-0.02774700828410915 }} ,
					{ 2715 ,  {-0.02772692774102627 }} ,
					{ 2716 ,  {-0.027784313769401103 }} ,
					{ 5434 ,  {-0.0277592372119852 }} ,
					{ 5435 ,  {-0.02777753074645674 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 1344 ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 2690 ) : ( 2691 ) ) ) ) ) : ( 673 ) ) ) : ( ( ( scaler_36 <= -0.49056302876404567 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 676 ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( 1354 ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 1356 ) : ( ( ( scaler_15 <= 1.0532512804072236 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 2716 ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 5434 ) : ( 5435 ) ) ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_27 <= 1.2727032181942362 ) ? ( 680 ) : ( 681 ) ) ) : ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 12 ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 26 ) : ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 14 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_1
		
	
		namespace LGBM_Tree_2_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.14969219753394128 }} ,
					{ 15 ,  {0.06717717514891126 }} ,
					{ 16 ,  {0.0010401225974015886 }} ,
					{ 21 ,  {0.012329380708808974 }} ,
					{ 25 ,  {0.08677986209605232 }} ,
					{ 26 ,  {-0.027829230081562364 }} ,
					{ 27 ,  {0.06254451254546027 }} ,
					{ 28 ,  {-0.013879833896628783 }} ,
					{ 34 ,  {-0.02775015959329949 }} ,
					{ 40 ,  {-0.02774296510857138 }} ,
					{ 41 ,  {-0.02777039403028608 }} ,
					{ 48 ,  {0.18388079564220822 }} ,
					{ 59 ,  {-0.027768329525871622 }} ,
					{ 70 ,  {-0.02779864419636559 }} ,
					{ 71 ,  {-0.02777575620368954 }} ,
					{ 92 ,  {-0.027798467218428158 }} ,
					{ 95 ,  {-0.027750621729598704 }} ,
					{ 98 ,  {0.1970768462669903 }} ,
					{ 99 ,  {0.1921373467421187 }} ,
					{ 116 ,  {-0.0277731242011776 }} ,
					{ 117 ,  {-0.027803784225577517 }} ,
					{ 176 ,  {-0.027774426925707627 }} ,
					{ 177 ,  {-0.027803659831904904 }} ,
					{ 179 ,  {-0.027742254869590297 }} ,
					{ 180 ,  {-0.027798757516799194 }} ,
					{ 181 ,  {-0.027760841600729266 }} ,
					{ 186 ,  {-0.02776382967660005 }} ,
					{ 187 ,  {-0.027786205155269486 }} ,
					{ 189 ,  {-0.027754280970303854 }} ,
					{ 356 ,  {-0.02775667190915712 }} ,
					{ 357 ,  {-0.0277814207069302 }} ,
					{ 365 ,  {-0.027775802418370944 }} ,
					{ 366 ,  {-0.027789431606733514 }} ,
					{ 367 ,  {-0.027767981682580323 }} ,
					{ 377 ,  {-0.02776647628792916 }} ,
					{ 729 ,  {-0.027813786296562483 }} ,
					{ 752 ,  {-0.0277681677201629 }} ,
					{ 753 ,  {-0.02779612066971971 }} ,
					{ 1456 ,  {-0.02778837333492484 }} ,
					{ 1457 ,  {-0.02780917634001162 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_62 <= -2.3230670362774934 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 176 ) : ( 177 ) ) ) : ( ( ( scaler_47 <= 0.91345632309554 ) ? ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 356 ) : ( 357 ) ) ) : ( 179 ) ) ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_62 <= 0.5403623443450363 ) ? ( ( ( scaler_12 <= 0.393819719700039 ) ? ( 1456 ) : ( 1457 ) ) ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_6 <= -1.2441923630104108 ) ? ( 92 ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_15 <= -0.5980738954644472 ) ? ( 752 ) : ( 753 ) ) ) : ( 377 ) ) ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_21 <= 0.9264910271543165 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( 48 ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_6 <= -1.7094592748953787 ) ? ( 28 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_1
		
	
		namespace LGBM_Tree_3_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.12775479425561717 }} ,
					{ 10 ,  {0.017418987740911506 }} ,
					{ 16 ,  {0.17753115135999165 }} ,
					{ 22 ,  {-0.00010337693845915377 }} ,
					{ 24 ,  {0.16458229427356386 }} ,
					{ 26 ,  {0.020012555922313425 }} ,
					{ 28 ,  {0.04134193941143706 }} ,
					{ 29 ,  {-0.027786808806874192 }} ,
					{ 34 ,  {0.20198511940926728 }} ,
					{ 35 ,  {0.1966324980857852 }} ,
					{ 46 ,  {-0.027732219168062962 }} ,
					{ 47 ,  {-0.027712530828050853 }} ,
					{ 50 ,  {0.02672074389559852 }} ,
					{ 51 ,  {-0.027769269891921224 }} ,
					{ 55 ,  {-0.013757186751428419 }} ,
					{ 63 ,  {0.019362135741492828 }} ,
					{ 109 ,  {-0.02792040980047693 }} ,
					{ 121 ,  {-0.02768927734784726 }} ,
					{ 124 ,  {0.008742269382298764 }} ,
					{ 216 ,  {-0.027787061717864554 }} ,
					{ 217 ,  {-0.02770663047097352 }} ,
					{ 250 ,  {-0.027780392399977434 }} ,
					{ 480 ,  {-0.02770285156835239 }} ,
					{ 481 ,  {-0.02773948258186548 }} ,
					{ 482 ,  {-0.02768357340845916 }} ,
					{ 483 ,  {-0.027703994722181942 }} ,
					{ 488 ,  {-0.027708233742096924 }} ,
					{ 489 ,  {-0.027727578023090074 }} ,
					{ 490 ,  {-0.027717432287004413 }} ,
					{ 491 ,  {-0.02774342849423399 }} ,
					{ 494 ,  {-0.027689826571247574 }} ,
					{ 495 ,  {-0.027713166118395405 }} ,
					{ 503 ,  {-0.02769587388466826 }} ,
					{ 985 ,  {-0.027711526132348497 }} ,
					{ 986 ,  {-0.02771211350978386 }} ,
					{ 987 ,  {-0.027690906974626225 }} ,
					{ 1004 ,  {-0.027726882773801306 }} ,
					{ 1005 ,  {-0.027696266729603094 }} ,
					{ 1968 ,  {-0.02774334617404847 }} ,
					{ 1969 ,  {-0.027715136445044086 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.4865940826873938 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 10 ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( 24 ) : ( ( ( scaler_32 <= 0.30954233844666573 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 26 ) : ( ( ( scaler_60 <= 1.5839833924535454 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 480 ) : ( 481 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( 121 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 488 ) : ( 489 ) ) ) : ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 1968 ) : ( 1969 ) ) ) : ( 985 ) ) ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 986 ) : ( 987 ) ) ) ) ) : ( ( ( scaler_13 <= 0.6293012079907891 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 124 ) : ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( ( ( scaler_44 <= 1.1679948056498102 ) ? ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 1004 ) : ( 1005 ) ) ) : ( 503 ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_1
		
	
		namespace LGBM_Tree_4_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.04770573778531459 }} ,
					{ 12 ,  {0.17151131351383625 }} ,
					{ 17 ,  {0.02406199341153895 }} ,
					{ 19 ,  {0.00233386654200611 }} ,
					{ 20 ,  {-0.00983530988004322 }} ,
					{ 22 ,  {-0.027928269819114594 }} ,
					{ 23 ,  {0.05177776154697559 }} ,
					{ 26 ,  {0.1913669101072507 }} ,
					{ 27 ,  {0.18846508742672688 }} ,
					{ 32 ,  {-0.014390541116003484 }} ,
					{ 36 ,  {0.18570365605283504 }} ,
					{ 37 ,  {0.05548262407232514 }} ,
					{ 43 ,  {-0.01968748624314133 }} ,
					{ 67 ,  {-0.02786973789127542 }} ,
					{ 132 ,  {-0.027838109745144248 }} ,
					{ 133 ,  {-0.027859686488027335 }} ,
					{ 336 ,  {-0.02781922516976409 }} ,
					{ 339 ,  {-0.02780059526576635 }} ,
					{ 674 ,  {-0.0278362798451601 }} ,
					{ 675 ,  {-0.0278537123583599 }} ,
					{ 676 ,  {-0.027817161116367867 }} ,
					{ 677 ,  {-0.027839331855213978 }} ,
					{ 680 ,  {-0.027834669992803953 }} ,
					{ 682 ,  {-0.02780121975421599 }} ,
					{ 683 ,  {-0.027828303177752773 }} ,
					{ 686 ,  {-0.027838323330087223 }} ,
					{ 687 ,  {-0.027815294540759778 }} ,
					{ 1362 ,  {-0.027827426066937333 }} ,
					{ 1363 ,  {-0.02786095248087278 }} ,
					{ 1368 ,  {-0.027840215565975462 }} ,
					{ 1369 ,  {-0.027814415567760122 }} ,
					{ 2742 ,  {-0.027835322929366735 }} ,
					{ 5480 ,  {-0.02786089645737388 }} ,
					{ 5481 ,  {-0.027889655643000413 }} ,
					{ 5482 ,  {-0.027866422593202857 }} ,
					{ 5483 ,  {-0.027832180566353733 }} ,
					{ 5486 ,  {-0.02787161473943733 }} ,
					{ 10975 ,  {-0.027832625582343923 }} ,
					{ 21948 ,  {-0.027871703880022587 }} ,
					{ 21949 ,  {-0.027842337108485323 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 32 ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_28 <= 0.8623826931333223 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 336 ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 676 ) : ( 677 ) ) ) : ( 339 ) ) ) ) ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( 680 ) : ( ( ( scaler_22 <= -1.0000000180025095e-35 ) ? ( 1362 ) : ( 1363 ) ) ) ) ) : ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_62 <= -1.9140056961885608 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 1368 ) : ( 1369 ) ) ) : ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_46 <= -0.6690914606879405 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 5480 ) : ( 5481 ) ) ) : ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 5482 ) : ( 5483 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 2742 ) : ( ( ( scaler_36 <= -0.8061485116219902 ) ? ( 5486 ) : ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 21948 ) : ( 21949 ) ) ) : ( 10975 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( 686 ) : ( 687 ) ) ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 12 ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_1
		
	
		namespace LGBM_Tree_5_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {0.03925108943708288 }} ,
					{ 15 ,  {0.06684623079422787 }} ,
					{ 16 ,  {0.11990049562269456 }} ,
					{ 17 ,  {-0.027701080889371454 }} ,
					{ 18 ,  {-0.0013202233005719913 }} ,
					{ 20 ,  {0.16790307907892876 }} ,
					{ 27 ,  {-0.00262132820795244 }} ,
					{ 29 ,  {-0.027688059077910984 }} ,
					{ 42 ,  {0.19981838993943069 }} ,
					{ 50 ,  {-0.027681151912808923 }} ,
					{ 51 ,  {-0.02764547988754972 }} ,
					{ 56 ,  {-0.027720297572175773 }} ,
					{ 57 ,  {-0.027693479177797034 }} ,
					{ 76 ,  {-0.027696307256390797 }} ,
					{ 77 ,  {-0.027730659446009245 }} ,
					{ 86 ,  {0.19657750495591786 }} ,
					{ 87 ,  {0.195447709542531 }} ,
					{ 104 ,  {-0.027702869038671047 }} ,
					{ 105 ,  {-0.02772698611400695 }} ,
					{ 106 ,  {-0.027708951441229104 }} ,
					{ 107 ,  {-0.027686445184689865 }} ,
					{ 156 ,  {-0.02765929383872297 }} ,
					{ 157 ,  {-0.027685669337022073 }} ,
					{ 158 ,  {-0.027712626254949458 }} ,
					{ 159 ,  {-0.02768282047928505 }} ,
					{ 192 ,  {-0.02770801061040883 }} ,
					{ 193 ,  {-0.02767672966778538 }} ,
					{ 196 ,  {-0.027661755792448412 }} ,
					{ 197 ,  {-0.02768538243407836 }} ,
					{ 198 ,  {-0.027709700109663605 }} ,
					{ 199 ,  {-0.027681316268494717 }} ,
					{ 390 ,  {-0.027704849825786765 }} ,
					{ 778 ,  {-0.02769542400779257 }} ,
					{ 779 ,  {-0.027722388845001084 }} ,
					{ 782 ,  {-0.02766746968847754 }} ,
					{ 783 ,  {-0.027689830153004524 }} ,
					{ 1552 ,  {-0.027692705801274205 }} ,
					{ 1553 ,  {-0.027661132422557314 }} ,
					{ 1554 ,  {-0.027722851584267752 }} ,
					{ 1555 ,  {-0.027696528751254248 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( 18 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_27 <= -0.31060084599511306 ) ? ( 20 ) : ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( 42 ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_32 <= 1.9071921690884805 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 192 ) : ( 193 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_28 <= -1.2305268346904632 ) ? ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( 1552 ) : ( 1553 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 1554 ) : ( 1555 ) ) ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 778 ) : ( 779 ) ) ) ) ) : ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 390 ) : ( ( ( scaler_31 <= -0.6960705321004114 ) ? ( 782 ) : ( 783 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( scaler_39 <= 0.8005891397504875 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_1
		
	
		namespace LGBM_Tree_6_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.010500083575777261 }} ,
					{ 8 ,  {0.0270935443006114 }} ,
					{ 10 ,  {0.0009423762367282414 }} ,
					{ 15 ,  {-0.013418967572037678 }} ,
					{ 22 ,  {0.10769728380233323 }} ,
					{ 36 ,  {-0.027638896670967035 }} ,
					{ 38 ,  {-0.02761854375051962 }} ,
					{ 39 ,  {-0.02764318387409731 }} ,
					{ 46 ,  {0.20835377165319505 }} ,
					{ 57 ,  {-0.013312901337878947 }} ,
					{ 74 ,  {-0.027665088234526472 }} ,
					{ 75 ,  {-0.027693536494499987 }} ,
					{ 95 ,  {0.2006179568960889 }} ,
					{ 112 ,  {-0.02765567657834338 }} ,
					{ 113 ,  {-0.027681912015897942 }} ,
					{ 119 ,  {-0.027615248280401558 }} ,
					{ 189 ,  {0.19859287223840233 }} ,
					{ 234 ,  {-0.027632083195631624 }} ,
					{ 236 ,  {-0.02765973490681329 }} ,
					{ 237 ,  {-0.027635729107093044 }} ,
					{ 376 ,  {0.1973900740827983 }} ,
					{ 377 ,  {0.1978390294058097 }} ,
					{ 471 ,  {-0.027644346638247372 }} ,
					{ 928 ,  {-0.02764603533563603 }} ,
					{ 929 ,  {-0.027668095841223313 }} ,
					{ 934 ,  {-0.027619764205931114 }} ,
					{ 935 ,  {-0.027647163797570914 }} ,
					{ 941 ,  {-0.02764750760232984 }} ,
					{ 1860 ,  {-0.02767461650749574 }} ,
					{ 1861 ,  {-0.027650616438689185 }} ,
					{ 1863 ,  {-0.027667375295836683 }} ,
					{ 1864 ,  {-0.027636838176189716 }} ,
					{ 1866 ,  {-0.02768353909750141 }} ,
					{ 1867 ,  {-0.027657564575281037 }} ,
					{ 1880 ,  {-0.027650497976297234 }} ,
					{ 1881 ,  {-0.02767318224597758 }} ,
					{ 3724 ,  {-0.02766911605413999 }} ,
					{ 3725 ,  {-0.027696590858274237 }} ,
					{ 3730 ,  {-0.027664298641224785 }} ,
					{ 3731 ,  {-0.027650330949543545 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 36 ) : ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 10 ) : ( ( ( scaler_38 <= -0.6370053853428206 ) ? ( 22 ) : ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 46 ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 376 ) : ( 377 ) ) ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_32 <= 1.9071921690884805 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 928 ) : ( 929 ) ) ) : ( ( ( scaler_62 <= 0.13130100425610336 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 1860 ) : ( 1861 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 3724 ) : ( 3725 ) ) ) : ( 1863 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_14 <= -0.37282348386726455 ) ? ( 1864 ) : ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 3730 ) : ( 3731 ) ) ) ) ) : ( ( ( scaler_46 <= -0.6690914606879405 ) ? ( 1866 ) : ( 1867 ) ) ) ) ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= -0.961532671523328 ) ? ( 234 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 1880 ) : ( 1881 ) ) ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( 236 ) : ( 237 ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_1
		
	
		namespace LGBM_Tree_7_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.013624904834156152 }} ,
					{ 8 ,  {0.10588746524026793 }} ,
					{ 15 ,  {0.04079683189887548 }} ,
					{ 19 ,  {0.18954164527131231 }} ,
					{ 24 ,  {0.0012642524016336124 }} ,
					{ 27 ,  {-0.0005041607579323383 }} ,
					{ 36 ,  {0.20380410551274727 }} ,
					{ 37 ,  {0.2007296883429003 }} ,
					{ 50 ,  {-0.027616659406647443 }} ,
					{ 51 ,  {-0.027680367593995992 }} ,
					{ 52 ,  {0.19998326606605427 }} ,
					{ 53 ,  {0.08891279891283217 }} ,
					{ 57 ,  {0.02981852232362115 }} ,
					{ 112 ,  {-0.027610250714824498 }} ,
					{ 113 ,  {-0.027727160418371224 }} ,
					{ 118 ,  {-0.0037366284533536056 }} ,
					{ 238 ,  {-0.027652351071776243 }} ,
					{ 239 ,  {-0.027609968540678844 }} ,
					{ 466 ,  {-0.02757454854920162 }} ,
					{ 467 ,  {-0.027614004868610903 }} ,
					{ 470 ,  {-0.027604058240234694 }} ,
					{ 931 ,  {-0.027622959547390913 }} ,
					{ 936 ,  {-0.02759392648963609 }} ,
					{ 937 ,  {-0.027611054720325864 }} ,
					{ 938 ,  {-0.027628862392429676 }} ,
					{ 942 ,  {-0.027575667477049842 }} ,
					{ 943 ,  {-0.027597605839981595 }} ,
					{ 1857 ,  {-0.02760968396236348 }} ,
					{ 1858 ,  {-0.02760819914899402 }} ,
					{ 1860 ,  {-0.027584011007223276 }} ,
					{ 1861 ,  {-0.027606776376932263 }} ,
					{ 1878 ,  {-0.027602043128395433 }} ,
					{ 1879 ,  {-0.027622676566155344 }} ,
					{ 3712 ,  {-0.027616026432188374 }} ,
					{ 3719 ,  {-0.027611348977708335 }} ,
					{ 7426 ,  {-0.027658714644687485 }} ,
					{ 7436 ,  {-0.02762115792991475 }} ,
					{ 7437 ,  {-0.027645077566621032 }} ,
					{ 14854 ,  {-0.02762215927871439 }} ,
					{ 14855 ,  {-0.02764239121918954 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -1.9140056961885608 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_31 <= -0.5260895048885342 ) ? ( 8 ) : ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 24 ) : ( ( ( scaler_47 <= -0.3117529780602753 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_65 <= 1.6258637778468141 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_36 <= 0.456193419809788 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 3712 ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 7426 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 14854 ) : ( 14855 ) ) ) ) ) ) ) : ( 1857 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 1858 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 7436 ) : ( 7437 ) ) ) : ( 3719 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_28 <= -0.7475477128849743 ) ? ( 1860 ) : ( 1861 ) ) ) : ( 931 ) ) ) ) ) : ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 936 ) : ( 937 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 938 ) : ( ( ( scaler_29 <= 1.1136086350295498 ) ? ( 1878 ) : ( 1879 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 470 ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 118 ) : ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_1
		
	
		namespace LGBM_Tree_8_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 13 ,  {-0.027492293617327065 }} ,
					{ 19 ,  {0.16051536156626814 }} ,
					{ 20 ,  {-0.006935540544607702 }} ,
					{ 23 ,  {0.07892862609315732 }} ,
					{ 29 ,  {-0.012691291884393469 }} ,
					{ 31 ,  {0.09807461090179037 }} ,
					{ 32 ,  {-0.01699370722367546 }} ,
					{ 34 ,  {0.04105704589038126 }} ,
					{ 35 ,  {-0.027537464877508296 }} ,
					{ 36 ,  {0.014861449241725118 }} ,
					{ 42 ,  {0.09973407594014018 }} ,
					{ 45 ,  {0.013597180826273364 }} ,
					{ 49 ,  {-0.027508446239267365 }} ,
					{ 56 ,  {-0.027524827245166292 }} ,
					{ 57 ,  {-0.027506637223454995 }} ,
					{ 60 ,  {-0.027660145736926135 }} ,
					{ 61 ,  {-0.027505550671339064 }} ,
					{ 74 ,  {-0.027597988817276653 }} ,
					{ 75 ,  {-0.02752269718789275 }} ,
					{ 87 ,  {0.14677581112358049 }} ,
					{ 89 ,  {-0.02757271965821151 }} ,
					{ 96 ,  {-0.02750326175288468 }} ,
					{ 97 ,  {-0.02747363683634614 }} ,
					{ 102 ,  {-0.027517026903948562 }} ,
					{ 103 ,  {-0.027501637276643943 }} ,
					{ 133 ,  {-0.02753225580955044 }} ,
					{ 134 ,  {-0.027704497590252605 }} ,
					{ 172 ,  {0.21980448523438204 }} ,
					{ 173 ,  {0.20841979317528703 }} ,
					{ 177 ,  {-0.027525472318047462 }} ,
					{ 200 ,  {-0.027510733084742518 }} ,
					{ 201 ,  {-0.02753916886997268 }} ,
					{ 202 ,  {-0.02749587863218324 }} ,
					{ 203 ,  {-0.02751434285354228 }} ,
					{ 264 ,  {-0.027502102314312167 }} ,
					{ 265 ,  {-0.027478638987843473 }} ,
					{ 270 ,  {-0.027589922089903615 }} ,
					{ 271 ,  {-0.027531168593976564 }} ,
					{ 352 ,  {-0.02751883552194262 }} ,
					{ 353 ,  {-0.02748184157217959 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_38 <= -0.4680387515195381 ) ? ( 32 ) : ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( 134 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( scaler_45 <= 0.19120984640994193 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 36 ) : ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( 20 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 42 ) : ( ( ( scaler_22 <= 1.0329189398710144 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 352 ) : ( 353 ) ) ) : ( 177 ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( ( ( scaler_28 <= -1.2305268346904632 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 200 ) : ( 201 ) ) ) : ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 202 ) : ( 203 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_1
		
	
		namespace LGBM_Tree_9_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.11234914535845053 }} ,
					{ 13 ,  {-0.014025418799238555 }} ,
					{ 15 ,  {0.08130957213912575 }} ,
					{ 22 ,  {0.00010290857669047193 }} ,
					{ 23 ,  {-0.027794801233165124 }} ,
					{ 24 ,  {0.07647402235311407 }} ,
					{ 28 ,  {0.02328829011253535 }} ,
					{ 32 ,  {0.05871426755112136 }} ,
					{ 33 ,  {-0.027812119063927818 }} ,
					{ 34 ,  {0.0090294489745178 }} ,
					{ 36 ,  {-0.0277933671168583 }} ,
					{ 37 ,  {-0.013886895963761015 }} ,
					{ 51 ,  {0.12520389009152588 }} ,
					{ 58 ,  {-0.027848062879688003 }} ,
					{ 70 ,  {-0.002443379959898563 }} ,
					{ 76 ,  {-0.027783225520725704 }} ,
					{ 77 ,  {-0.02775905805441117 }} ,
					{ 78 ,  {-0.02775672422145429 }} ,
					{ 101 ,  {0.16475068300074472 }} ,
					{ 118 ,  {-0.027723401267290473 }} ,
					{ 158 ,  {-0.027748757246011342 }} ,
					{ 200 ,  {0.1945328556975991 }} ,
					{ 201 ,  {0.20372631828643717 }} ,
					{ 239 ,  {-0.027740892890679422 }} ,
					{ 285 ,  {-0.014836336703738136 }} ,
					{ 286 ,  {-0.027801505967959952 }} ,
					{ 287 ,  {-0.00010142279408295547 }} ,
					{ 318 ,  {-0.02774114377230044 }} ,
					{ 319 ,  {-0.027719799735197788 }} ,
					{ 476 ,  {-0.027746635210921158 }} ,
					{ 954 ,  {-0.027759767315924916 }} ,
					{ 955 ,  {-0.02778910399354108 }} ,
					{ 1136 ,  {-0.02772877651219592 }} ,
					{ 1139 ,  {-0.0277473364655407 }} ,
					{ 2274 ,  {-0.0277675912090838 }} ,
					{ 2275 ,  {-0.027745838302200822 }} ,
					{ 2277 ,  {-0.02775398099774294 }} ,
					{ 4552 ,  {-0.027765995142230562 }} ,
					{ 9106 ,  {-0.027772143190109407 }} ,
					{ 9107 ,  {-0.02779793817900757 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_54 <= -1.3408228641265703 ) ? ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 70 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_56 <= 1.9702444426114003 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 1136 ) : ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( 2274 ) : ( 2275 ) ) ) ) ) : ( ( ( scaler_36 <= -0.49056302876404567 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 4552 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 9106 ) : ( 9107 ) ) ) ) ) : ( 2277 ) ) ) : ( 1139 ) ) ) ) ) : ( 285 ) ) ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 78 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 158 ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 10 ) : ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_30 <= 1.0000000180025095e-35 ) ? ( 24 ) : ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_36 <= -0.8061485116219902 ) ? ( 200 ) : ( 201 ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_46 <= -0.510181547621488 ) ? ( 28 ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( 58 ) : ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 118 ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 476 ) : ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( 954 ) : ( 955 ) ) ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_1
		
	
		namespace LGBM_Tree_0_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.06291055007977794 }} ,
					{ 10 ,  {-0.02752867211861153 }} ,
					{ 11 ,  {-0.02747310890226732 }} ,
					{ 13 ,  {0.02577734686554712 }} ,
					{ 16 ,  {0.14802309052633741 }} ,
					{ 24 ,  {-0.027549061126724173 }} ,
					{ 25 ,  {-0.027477835071040308 }} ,
					{ 31 ,  {-0.027441042706978017 }} ,
					{ 35 ,  {0.1743375599278191 }} ,
					{ 59 ,  {-0.027508595077549294 }} ,
					{ 69 ,  {0.16870375448608943 }} ,
					{ 114 ,  {-0.027472878297695236 }} ,
					{ 116 ,  {-0.027435099638513618 }} ,
					{ 117 ,  {-0.027475019319106887 }} ,
					{ 136 ,  {0.16735026665927513 }} ,
					{ 137 ,  {0.16608804132026989 }} ,
					{ 224 ,  {-0.027468635312433022 }} ,
					{ 227 ,  {-0.027498424743242284 }} ,
					{ 230 ,  {-0.02752715408731124 }} ,
					{ 241 ,  {-0.027504323907335673 }} ,
					{ 243 ,  {-0.02754000004905029 }} ,
					{ 246 ,  {-0.02742037335613571 }} ,
					{ 247 ,  {-0.027459531719940197 }} ,
					{ 450 ,  {-0.027471469122451048 }} ,
					{ 451 ,  {-0.027536780457996776 }} ,
					{ 452 ,  {-0.027563450897260502 }} ,
					{ 453 ,  {-0.027521885046178803 }} ,
					{ 463 ,  {-0.02753292188803066 }} ,
					{ 480 ,  {-0.027454491463108074 }} ,
					{ 481 ,  {-0.027477278221155935 }} ,
					{ 484 ,  {-0.027461801795009084 }} ,
					{ 485 ,  {-0.027512007879976316 }} ,
					{ 488 ,  {-0.02747043899944119 }} ,
					{ 489 ,  {-0.0275140782417325 }} ,
					{ 490 ,  {-0.027446773258024516 }} ,
					{ 491 ,  {-0.02747524897513108 }} ,
					{ 924 ,  {-0.02748152944561967 }} ,
					{ 1851 ,  {-0.02748000952128289 }} ,
					{ 3700 ,  {-0.027502605217128967 }} ,
					{ 3701 ,  {-0.027542540538918737 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 16 ) : ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( ( ( scaler_13 <= 0.8841429258667266 ) ? ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_64 <= 2.0379073702133685 ) ? ( ( ( scaler_60 <= -0.3897292760534952 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 224 ) : ( ( ( scaler_55 <= -1.0364552765484578 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_15 <= 1.2183837979943908 ) ? ( ( ( scaler_37 <= -0.2443539914545507 ) ? ( 452 ) : ( 453 ) ) ) : ( 227 ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 114 ) : ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 230 ) : ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( 924 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 3700 ) : ( 3701 ) ) ) : ( 1851 ) ) ) ) ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 1.5665167660176842 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( scaler_36 <= 1.0873643855256774 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 484 ) : ( 485 ) ) ) : ( 243 ) ) ) ) ) : ( ( ( scaler_32 <= 1.374642225541209 ) ? ( ( ( scaler_27 <= -0.6272616588329828 ) ? ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 488 ) : ( 489 ) ) ) : ( ( ( scaler_27 <= 0.6393815925184965 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 246 ) : ( 247 ) ) ) ) ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_2
		
	
		namespace LGBM_Tree_1_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.027700205034838273 }} ,
					{ 13 ,  {0.02633985573726987 }} ,
					{ 15 ,  {0.03848765796190767 }} ,
					{ 18 ,  {0.16826457405871847 }} ,
					{ 19 ,  {0.09067508939176352 }} ,
					{ 20 ,  {-0.0004019223752314007 }} ,
					{ 22 ,  {0.04003771438840274 }} ,
					{ 24 ,  {0.07552410228184943 }} ,
					{ 28 ,  {-0.027639223656259256 }} ,
					{ 29 ,  {-0.027798064049292928 }} ,
					{ 46 ,  {-0.027682566311277215 }} ,
					{ 47 ,  {-0.027632510559287074 }} ,
					{ 50 ,  {0.11685795038527642 }} ,
					{ 86 ,  {-0.013483373845660515 }} ,
					{ 102 ,  {0.1591160287304959 }} ,
					{ 103 ,  {0.17846234214866208 }} ,
					{ 174 ,  {-0.027714838497956786 }} ,
					{ 175 ,  {-0.027670594860394773 }} ,
					{ 337 ,  {-0.0276586543929767 }} ,
					{ 341 ,  {-0.02769062396776283 }} ,
					{ 342 ,  {-0.0275984360441977 }} ,
					{ 343 ,  {-0.027645761596286553 }} ,
					{ 676 ,  {-0.027680224298762532 }} ,
					{ 677 ,  {-0.027639682930148457 }} ,
					{ 680 ,  {-0.027644394875304946 }} ,
					{ 681 ,  {-0.0276750908472921 }} ,
					{ 1344 ,  {-0.027638410785534896 }} ,
					{ 1345 ,  {-0.02769807479474895 }} ,
					{ 1356 ,  {-0.027668037259853992 }} ,
					{ 1357 ,  {-0.027638021201196374 }} ,
					{ 1359 ,  {-0.027713238775115313 }} ,
					{ 2692 ,  {-0.02772257683766869 }} ,
					{ 2694 ,  {-0.02769970843999758 }} ,
					{ 2695 ,  {-0.027745303443163838 }} ,
					{ 2717 ,  {-0.027704160731489003 }} ,
					{ 5386 ,  {-0.027650855500900653 }} ,
					{ 5387 ,  {-0.02769435384477429 }} ,
					{ 5433 ,  {-0.027650092130086963 }} ,
					{ 10864 ,  {-0.027695037089157798 }} ,
					{ 10865 ,  {-0.027665707419563743 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 1344 ) : ( 1345 ) ) ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 2692 ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 5386 ) : ( 5387 ) ) ) ) ) : ( ( ( scaler_31 <= -1.0000000180025095e-35 ) ? ( 2694 ) : ( 2695 ) ) ) ) ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 1356 ) : ( 1357 ) ) ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_19 <= 1.119137615002823 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 10864 ) : ( 10865 ) ) ) : ( 5433 ) ) ) : ( 2717 ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_14 <= 1.0000000180025095e-35 ) ? ( 680 ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 86 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_12 <= 0.5780681120845275 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 24 ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 50 ) : ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_2
		
	
		namespace LGBM_Tree_2_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.12831724725512245 }} ,
					{ 13 ,  {0.006350877695545792 }} ,
					{ 15 ,  {0.06173124240364252 }} ,
					{ 16 ,  {0.0009438268992088219 }} ,
					{ 20 ,  {0.011812418752417234 }} ,
					{ 25 ,  {0.052405361698068975 }} ,
					{ 29 ,  {-0.013587751540684992 }} ,
					{ 34 ,  {-0.02765265160618635 }} ,
					{ 42 ,  {-0.02767671584276417 }} ,
					{ 43 ,  {-0.027803762653939846 }} ,
					{ 47 ,  {-0.02770994707609723 }} ,
					{ 49 ,  {0.1542254755535517 }} ,
					{ 56 ,  {-0.027675367739520024 }} ,
					{ 70 ,  {-0.0277254752658988 }} ,
					{ 71 ,  {-0.02768822423601581 }} ,
					{ 89 ,  {-0.027664038234271354 }} ,
					{ 97 ,  {0.16894576045758303 }} ,
					{ 114 ,  {-0.027674894179643212 }} ,
					{ 176 ,  {-0.027684628334412445 }} ,
					{ 177 ,  {-0.027718257073947164 }} ,
					{ 180 ,  {-0.02771979310085146 }} ,
					{ 181 ,  {-0.027654481485511508 }} ,
					{ 185 ,  {-0.027667463277963197 }} ,
					{ 186 ,  {-0.02762361304388133 }} ,
					{ 187 ,  {-0.027663425701040974 }} ,
					{ 192 ,  {0.15867210833268644 }} ,
					{ 193 ,  {0.16388843148453308 }} ,
					{ 230 ,  {-0.027750155537542037 }} ,
					{ 231 ,  {-0.02769671749090659 }} ,
					{ 365 ,  {-0.027699279720246335 }} ,
					{ 367 ,  {-0.02767444665075642 }} ,
					{ 368 ,  {-0.027671962302834353 }} ,
					{ 729 ,  {-0.027691408644252926 }} ,
					{ 732 ,  {-0.027740073083011435 }} ,
					{ 733 ,  {-0.02769033517865528 }} ,
					{ 738 ,  {-0.027743220320990317 }} ,
					{ 739 ,  {-0.02769275591791036 }} ,
					{ 1457 ,  {-0.027727259806081775 }} ,
					{ 2912 ,  {-0.02774642138987828 }} ,
					{ 2913 ,  {-0.027785764453162644 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 20 ) : ( ( ( scaler_61 <= -0.13702521679354787 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 176 ) : ( 177 ) ) ) : ( 89 ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_8 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 2912 ) : ( 2913 ) ) ) : ( 1457 ) ) ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_37 <= 0.7148174696522726 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( ( ( scaler_15 <= -0.5980738954644472 ) ? ( 368 ) : ( ( ( scaler_52 <= -0.527371360340495 ) ? ( 738 ) : ( 739 ) ) ) ) ) : ( 185 ) ) ) : ( ( ( scaler_39 <= 0.971164659629122 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_60 <= 0.794498325050729 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( 56 ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 114 ) : ( ( ( scaler_36 <= 0.6139861612387604 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_2
		
	
		namespace LGBM_Tree_3_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.10547368909442163 }} ,
					{ 10 ,  {0.016913849602839294 }} ,
					{ 16 ,  {0.14881788046488328 }} ,
					{ 22 ,  {1.8942177113622047e-05 }} ,
					{ 25 ,  {-0.02772595084669905 }} ,
					{ 26 ,  {0.019217362438905546 }} ,
					{ 28 ,  {0.04058785391719322 }} ,
					{ 29 ,  {-0.027759045286222014 }} ,
					{ 34 ,  {0.16202247168379058 }} ,
					{ 35 ,  {0.17237640675564184 }} ,
					{ 47 ,  {-0.027674259592218427 }} ,
					{ 48 ,  {0.06462405656883435 }} ,
					{ 49 ,  {0.16779152260335328 }} ,
					{ 55 ,  {-0.013474146217773993 }} ,
					{ 63 ,  {0.01864152145786624 }} ,
					{ 92 ,  {-0.02766152895454997 }} ,
					{ 93 ,  {-0.027607285085716866 }} ,
					{ 109 ,  {-0.027833837259502198 }} ,
					{ 124 ,  {0.008489144693438243 }} ,
					{ 216 ,  {-0.027692008581387973 }} ,
					{ 217 ,  {-0.02761098080516064 }} ,
					{ 241 ,  {-0.02764701972223922 }} ,
					{ 242 ,  {-0.027573524897644502 }} ,
					{ 243 ,  {-0.027603488096552095 }} ,
					{ 244 ,  {-0.027616864569918805 }} ,
					{ 246 ,  {-0.027608421619928547 }} ,
					{ 250 ,  {-0.02770071251881301 }} ,
					{ 480 ,  {-0.02757160975053634 }} ,
					{ 481 ,  {-0.027620300913932163 }} ,
					{ 490 ,  {-0.027612602603608205 }} ,
					{ 494 ,  {-0.027663945940276803 }} ,
					{ 503 ,  {-0.027596301642759963 }} ,
					{ 983 ,  {-0.027642596566020874 }} ,
					{ 990 ,  {-0.027604770597706343 }} ,
					{ 991 ,  {-0.027646818477167802 }} ,
					{ 1004 ,  {-0.027617979522236505 }} ,
					{ 1005 ,  {-0.02766617768391341 }} ,
					{ 1964 ,  {-0.027655685338310504 }} ,
					{ 3930 ,  {-0.027709177221854703 }} ,
					{ 3931 ,  {-0.027664555283036258 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( ( ( scaler_47 <= 0.21333672243507412 ) ? ( 16 ) : ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 10 ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 26 ) : ( ( ( scaler_60 <= 1.5839833924535454 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_45 <= 0.3452712701784233 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_15 <= -0.7632064130516144 ) ? ( 244 ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 490 ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( 1964 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 3930 ) : ( 3931 ) ) ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 246 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 494 ) : ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( 990 ) : ( 991 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 124 ) : ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 1004 ) : ( 1005 ) ) ) : ( 503 ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_2
		
	
		namespace LGBM_Tree_4_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.053675302461074464 }} ,
					{ 12 ,  {0.16008696955039936 }} ,
					{ 17 ,  {0.023015096550378897 }} ,
					{ 18 ,  {-0.0282000237978397 }} ,
					{ 20 ,  {-0.009495665159168479 }} ,
					{ 22 ,  {0.050467960047620455 }} ,
					{ 23 ,  {-0.027891866138848632 }} ,
					{ 26 ,  {0.1579978742495696 }} ,
					{ 27 ,  {0.15681893649486944 }} ,
					{ 32 ,  {-0.014023945024753208 }} ,
					{ 39 ,  {0.007837399818637457 }} ,
					{ 43 ,  {-0.01948696329528843 }} ,
					{ 67 ,  {-0.027807095621347967 }} ,
					{ 76 ,  {0.17042973227864955 }} ,
					{ 77 ,  {0.12327122244951083 }} ,
					{ 132 ,  {-0.027762807137277575 }} ,
					{ 133 ,  {-0.027724973380871182 }} ,
					{ 171 ,  {-0.027686921203199235 }} ,
					{ 336 ,  {-0.027685763532633714 }} ,
					{ 340 ,  {-0.027754001340693266 }} ,
					{ 674 ,  {-0.02776620154886359 }} ,
					{ 675 ,  {-0.02771941884345774 }} ,
					{ 678 ,  {-0.02770034674303841 }} ,
					{ 682 ,  {-0.027733526381731766 }} ,
					{ 683 ,  {-0.027698917698608674 }} ,
					{ 1354 ,  {-0.027717387006653167 }} ,
					{ 1355 ,  {-0.027771649997123567 }} ,
					{ 1358 ,  {-0.027722017656682953 }} ,
					{ 1359 ,  {-0.02776854692320703 }} ,
					{ 5408 ,  {-0.02778161431103094 }} ,
					{ 5409 ,  {-0.027730299357418987 }} ,
					{ 5410 ,  {-0.027759590389952245 }} ,
					{ 5411 ,  {-0.027806341741524195 }} ,
					{ 5413 ,  {-0.027775864908850707 }} ,
					{ 5414 ,  {-0.027731332322778773 }} ,
					{ 10824 ,  {-0.027730356914603783 }} ,
					{ 10825 ,  {-0.027770234238616454 }} ,
					{ 10831 ,  {-0.027760209267993025 }} ,
					{ 21660 ,  {-0.02776872803611249 }} ,
					{ 21661 ,  {-0.027822988766020476 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 32 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= 0.9847887654326736 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( ( ( scaler_5 <= -1.0116016662432779 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_62 <= -1.9140056961885608 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( 336 ) : ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( scaler_64 <= 2.0379073702133685 ) ? ( ( ( scaler_8 <= 0.3282876958661803 ) ? ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( ( ( scaler_30 <= -0.4137664436055789 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 5408 ) : ( 5409 ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 5410 ) : ( 5411 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( 10824 ) : ( 10825 ) ) ) : ( 5413 ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 5414 ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( ( ( scaler_15 <= 0.5578537276457223 ) ? ( 21660 ) : ( 21661 ) ) ) : ( 10831 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 1354 ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_52 <= -0.527371360340495 ) ? ( 678 ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_3 <= 1.3594628760613219 ) ? ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 340 ) : ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( 12 ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_2
		
	
		namespace LGBM_Tree_5_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {0.03742315275037566 }} ,
					{ 15 ,  {0.06134100258790376 }} ,
					{ 16 ,  {0.007989217363363737 }} ,
					{ 18 ,  {-0.027629937020457712 }} ,
					{ 19 ,  {0.11046719728523267 }} ,
					{ 20 ,  {0.14097875836156878 }} ,
					{ 27 ,  {-0.0026528744029015797 }} ,
					{ 28 ,  {-0.027650068951002933 }} ,
					{ 34 ,  {-0.02786326445474053 }} ,
					{ 42 ,  {0.16627797308308703 }} ,
					{ 50 ,  {-0.027539111845872263 }} ,
					{ 51 ,  {-0.027587424596717522 }} ,
					{ 58 ,  {-0.02759098814201487 }} ,
					{ 70 ,  {-0.027715680564845885 }} ,
					{ 86 ,  {0.16291446132032628 }} ,
					{ 87 ,  {0.16155615267345008 }} ,
					{ 98 ,  {-0.027565946728553836 }} ,
					{ 104 ,  {-0.027679424321239123 }} ,
					{ 105 ,  {-0.02762113257243364 }} ,
					{ 106 ,  {-0.027629391812623718 }} ,
					{ 107 ,  {-0.02759217316779732 }} ,
					{ 118 ,  {-0.02765091543759538 }} ,
					{ 119 ,  {-0.027600610541222922 }} ,
					{ 142 ,  {-0.027629349709849222 }} ,
					{ 193 ,  {-0.027642975248304415 }} ,
					{ 195 ,  {-0.02760768204826578 }} ,
					{ 198 ,  {-0.02763127039686379 }} ,
					{ 287 ,  {-0.02754751885134738 }} ,
					{ 385 ,  {-0.027562688888678397 }} ,
					{ 389 ,  {-0.02767322232171529 }} ,
					{ 399 ,  {-0.027568791605307393 }} ,
					{ 572 ,  {-0.027623297345939487 }} ,
					{ 573 ,  {-0.027582604550523894 }} ,
					{ 768 ,  {-0.02757165961942858 }} ,
					{ 776 ,  {-0.027637938145550114 }} ,
					{ 777 ,  {-0.027596042317814137 }} ,
					{ 796 ,  {-0.027622327153600124 }} ,
					{ 797 ,  {-0.027590091144404513 }} ,
					{ 1538 ,  {-0.027634172112331504 }} ,
					{ 1539 ,  {-0.02760299168828112 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 16 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 34 ) : ( ( ( scaler_62 <= -1.0000000180025095e-35 ) ? ( 70 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 142 ) : ( ( ( scaler_52 <= 1.41104489193301 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 572 ) : ( 573 ) ) ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.9766301988296382 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 20 ) : ( ( ( scaler_27 <= 1.0000000180025095e-35 ) ? ( 42 ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_32 <= 1.9071921690884805 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_38 <= -0.6370053853428206 ) ? ( 768 ) : ( ( ( scaler_4 <= -0.128195167790152 ) ? ( 1538 ) : ( 1539 ) ) ) ) ) : ( 385 ) ) ) : ( 193 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 776 ) : ( 777 ) ) ) : ( 389 ) ) ) : ( 195 ) ) ) ) ) : ( ( ( scaler_53 <= -0.961532671523328 ) ? ( 98 ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 198 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 796 ) : ( 797 ) ) ) : ( 399 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 0.9222435271028199 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_2
		
	
		namespace LGBM_Tree_6_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.010256271626521988 }} ,
					{ 8 ,  {0.026129578515778597 }} ,
					{ 10 ,  {0.0010229013153628124 }} ,
					{ 15 ,  {-0.013107585336950332 }} ,
					{ 22 ,  {0.0875798583842252 }} ,
					{ 37 ,  {-0.027631163925110055 }} ,
					{ 38 ,  {-0.027508620803655317 }} ,
					{ 39 ,  {-0.027547486184367195 }} ,
					{ 46 ,  {0.15768560325899705 }} ,
					{ 57 ,  {-0.012992920065516342 }} ,
					{ 72 ,  {-0.02751145170205693 }} ,
					{ 73 ,  {-0.027577760959824657 }} ,
					{ 94 ,  {0.1722080037423267 }} ,
					{ 112 ,  {-0.027578960144147097 }} ,
					{ 113 ,  {-0.027632752890209267 }} ,
					{ 118 ,  {-0.027540997860192235 }} ,
					{ 191 ,  {0.1681283357546371 }} ,
					{ 239 ,  {-0.027537379310148203 }} ,
					{ 380 ,  {0.16509984977712291 }} ,
					{ 381 ,  {0.16306210941862553 }} ,
					{ 464 ,  {-0.027556942904530635 }} ,
					{ 465 ,  {-0.02752214007872127 }} ,
					{ 468 ,  {-0.027579019571590604 }} ,
					{ 469 ,  {-0.027531413300979614 }} ,
					{ 470 ,  {-0.02755417352238576 }} ,
					{ 476 ,  {-0.027556037874183772 }} ,
					{ 932 ,  {-0.027625785232275293 }} ,
					{ 933 ,  {-0.027578359576645662 }} ,
					{ 934 ,  {-0.02753774833869074 }} ,
					{ 954 ,  {-0.027611308551859316 }} ,
					{ 955 ,  {-0.027573159508147278 }} ,
					{ 1870 ,  {-0.0275514575787819 }} ,
					{ 1871 ,  {-0.027587278898113434 }} ,
					{ 1886 ,  {-0.02760282190285588 }} ,
					{ 1887 ,  {-0.02756204194578826 }} ,
					{ 3768 ,  {-0.027653429566853134 }} ,
					{ 3769 ,  {-0.027605435883201898 }} ,
					{ 3770 ,  {-0.027569629463502412 }} ,
					{ 7542 ,  {-0.027625806433150338 }} ,
					{ 7543 ,  {-0.027580232164845578 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_6 <= -2.4073596427228305 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 10 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 22 ) : ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( 46 ) : ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 94 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_64 <= 1.0689763504039107 ) ? ( 380 ) : ( 381 ) ) ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_12 <= -0.7116706346068912 ) ? ( 934 ) : ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 470 ) : ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_56 <= -0.2502577786540379 ) ? ( 3768 ) : ( 3769 ) ) ) : ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 3770 ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 7542 ) : ( 7543 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 1886 ) : ( 1887 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 118 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 476 ) : ( ( ( scaler_62 <= 1.0000000180025095e-35 ) ? ( 954 ) : ( 955 ) ) ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_2
		
	
		namespace LGBM_Tree_7_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.038546478034163986 }} ,
					{ 8 ,  {0.04532882269299049 }} ,
					{ 18 ,  {0.131931444108749 }} ,
					{ 20 ,  {0.14457037458679814 }} ,
					{ 21 ,  {-0.002344027974111499 }} ,
					{ 23 ,  {-0.013650762897283217 }} ,
					{ 25 ,  {0.029393301187440116 }} ,
					{ 38 ,  {0.18454120159488946 }} ,
					{ 44 ,  {-0.02766968729107811 }} ,
					{ 45 ,  {-0.02801264966805891 }} ,
					{ 48 ,  {-0.027621064333267355 }} ,
					{ 49 ,  {-0.02753231066811774 }} ,
					{ 54 ,  {-0.0035912979287575975 }} ,
					{ 78 ,  {0.15881263801373838 }} ,
					{ 110 ,  {-0.027578659841953887 }} ,
					{ 111 ,  {-0.02750302983107787 }} ,
					{ 158 ,  {0.16895115905195357 }} ,
					{ 159 ,  {0.16497107194728206 }} ,
					{ 210 ,  {-0.027462734855760576 }} ,
					{ 211 ,  {-0.027518376479733105 }} ,
					{ 212 ,  {-0.027510005669374477 }} ,
					{ 214 ,  {-0.027468844030840857 }} ,
					{ 418 ,  {-0.02750563920378813 }} ,
					{ 419 ,  {-0.02753806976883898 }} ,
					{ 426 ,  {-0.02751152972214088 }} ,
					{ 430 ,  {-0.02753058747301363 }} ,
					{ 431 ,  {-0.027497937868866635 }} ,
					{ 833 ,  {-0.02752227676586032 }} ,
					{ 834 ,  {-0.0275218346463593 }} ,
					{ 854 ,  {-0.027533525963956574 }} ,
					{ 855 ,  {-0.027566477303564915 }} ,
					{ 3329 ,  {-0.027523490564281113 }} ,
					{ 3330 ,  {-0.02756837920653233 }} ,
					{ 3331 ,  {-0.027609447152785783 }} ,
					{ 3340 ,  {-0.02754227146902512 }} ,
					{ 3341 ,  {-0.027590198213469797 }} ,
					{ 3342 ,  {-0.027511069685821357 }} ,
					{ 3343 ,  {-0.02754538234744665 }} ,
					{ 6656 ,  {-0.027597591402609353 }} ,
					{ 6657 ,  {-0.027552697871695182 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 8 ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( 38 ) : ( ( ( scaler_12 <= -0.15892545745342618 ) ? ( 78 ) : ( ( ( scaler_16 <= 0.4422250040381117 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_39 <= 0.971164659629122 ) ? ( ( ( scaler_63 <= -0.5477631993517276 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_65 <= 1.6258637778468141 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_36 <= 0.456193419809788 ) ? ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_12 <= 1.0000000180025095e-35 ) ? ( 6656 ) : ( 6657 ) ) ) : ( 3329 ) ) ) : ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 3330 ) : ( 3331 ) ) ) ) ) : ( 833 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 834 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 3340 ) : ( 3341 ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 3342 ) : ( 3343 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= -0.961532671523328 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_14 <= -0.5832918972702341 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 212 ) : ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 426 ) : ( ( ( scaler_12 <= 1.0000000180025095e-35 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 54 ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_2
		
	
		namespace LGBM_Tree_8_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 13 ,  {-0.027397724053842543 }} ,
					{ 18 ,  {0.10058310627299437 }} ,
					{ 20 ,  {0.0411725840115434 }} ,
					{ 23 ,  {0.0015197876550281872 }} ,
					{ 25 ,  {-0.02742002932760164 }} ,
					{ 29 ,  {-0.012498960855345867 }} ,
					{ 30 ,  {0.0928298586210491 }} ,
					{ 33 ,  {0.03223198856340898 }} ,
					{ 34 ,  {-0.011697815198050694 }} ,
					{ 38 ,  {0.010629123911667192 }} ,
					{ 39 ,  {-0.02748271575317267 }} ,
					{ 42 ,  {-0.012524805825303083 }} ,
					{ 44 ,  {0.026692665946196504 }} ,
					{ 57 ,  {-0.02742210654569377 }} ,
					{ 62 ,  {-0.027432534095205508 }} ,
					{ 63 ,  {-0.027717969951198098 }} ,
					{ 64 ,  {-0.027506426090075697 }} ,
					{ 65 ,  {-0.027426666699755037 }} ,
					{ 86 ,  {-0.02758560419723989 }} ,
					{ 91 ,  {0.11927870102613254 }} ,
					{ 96 ,  {-0.02740952075269657 }} ,
					{ 97 ,  {-0.027449613556923293 }} ,
					{ 98 ,  {-0.027414890616043783 }} ,
					{ 112 ,  {-0.027428049801808647 }} ,
					{ 141 ,  {-0.027446344513505846 }} ,
					{ 142 ,  {-0.02745676307199259 }} ,
					{ 143 ,  {-0.027518142027877193 }} ,
					{ 174 ,  {-0.027503797258173115 }} ,
					{ 175 ,  {-0.027437476906132387 }} ,
					{ 180 ,  {0.18696547884207304 }} ,
					{ 226 ,  {-0.027444439074360245 }} ,
					{ 227 ,  {-0.027495472224306868 }} ,
					{ 280 ,  {-0.02742117326168264 }} ,
					{ 281 ,  {-0.02737929728004755 }} ,
					{ 362 ,  {0.1788619706928798 }} ,
					{ 363 ,  {0.16562448075861982 }} ,
					{ 396 ,  {-0.027442932053948023 }} ,
					{ 397 ,  {-0.02749312835883603 }} ,
					{ 398 ,  {-0.02742156175105381 }} ,
					{ 399 ,  {-0.027457990874023258 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 34 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( 280 ) : ( 281 ) ) ) : ( 141 ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 18 ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( ( ( scaler_14 <= -1.0042287240761734 ) ? ( 20 ) : ( ( ( scaler_63 <= -0.88833030263715 ) ? ( 42 ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 86 ) : ( ( ( scaler_4 <= 0.5081311054894627 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 44 ) : ( ( ( scaler_60 <= 0.597127058200025 ) ? ( ( ( scaler_61 <= -0.13702521679354787 ) ? ( 180 ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 98 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 396 ) : ( 397 ) ) ) : ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( 112 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_36 <= 0.456193419809788 ) ? ( 30 ) : ( ( ( scaler_12 <= -1.4486642041448448 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_2
		
	
		namespace LGBM_Tree_9_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.08774189784041181 }} ,
					{ 13 ,  {-0.019827511744258206 }} ,
					{ 15 ,  {0.006989306878619314 }} ,
					{ 22 ,  {-0.027692243816128406 }} ,
					{ 23 ,  {-0.027737405502391607 }} ,
					{ 25 ,  {0.013394591746130745 }} ,
					{ 28 ,  {-0.027733839720402782 }} ,
					{ 32 ,  {0.05573411730229029 }} ,
					{ 33 ,  {-0.02781451594146417 }} ,
					{ 34 ,  {0.008965072398417614 }} ,
					{ 36 ,  {-0.013576760839317529 }} ,
					{ 37 ,  {-0.02773111800113654 }} ,
					{ 49 ,  {0.09542088378615932 }} ,
					{ 59 ,  {-0.027641862987323663 }} ,
					{ 70 ,  {-0.002301788868394579 }} ,
					{ 77 ,  {-0.027656385098121357 }} ,
					{ 96 ,  {0.14232982762086108 }} ,
					{ 116 ,  {-0.027649807718519128 }} ,
					{ 117 ,  {-0.027699882368909797 }} ,
					{ 152 ,  {-0.02771776744485186 }} ,
					{ 153 ,  {-0.027675691956478905 }} ,
					{ 158 ,  {-0.02764572304046689 }} ,
					{ 194 ,  {0.17596441154167627 }} ,
					{ 195 ,  {0.15619324238389923 }} ,
					{ 285 ,  {-0.014687746310165135 }} ,
					{ 286 ,  {-0.02776924478579959 }} ,
					{ 287 ,  {0.00024563064431574203 }} ,
					{ 312 ,  {-0.02766753217478035 }} ,
					{ 313 ,  {-0.02762381323005286 }} ,
					{ 314 ,  {-0.0276560665494549 }} ,
					{ 315 ,  {-0.0276863960843058 }} ,
					{ 318 ,  {-0.02763547130272854 }} ,
					{ 319 ,  {-0.027592153509334673 }} ,
					{ 568 ,  {-0.027625572063520266 }} ,
					{ 1139 ,  {-0.027655747618077334 }} ,
					{ 4552 ,  {-0.02768669107066865 }} ,
					{ 4553 ,  {-0.02765016685618248 }} ,
					{ 4555 ,  {-0.027658748842704202 }} ,
					{ 9108 ,  {-0.02769744450630256 }} ,
					{ 9109 ,  {-0.027744994837315896 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_54 <= -1.3408228641265703 ) ? ( ( ( scaler_38 <= 0.37679441759687454 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 70 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_56 <= 1.9702444426114003 ) ? ( ( ( scaler_14 <= -1.0042287240761734 ) ? ( 568 ) : ( ( ( scaler_36 <= -0.33277028733507336 ) ? ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 4552 ) : ( 4553 ) ) ) : ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 9108 ) : ( 9109 ) ) ) : ( 4555 ) ) ) ) ) : ( 1139 ) ) ) ) ) : ( 285 ) ) ) : ( ( ( scaler_15 <= 1.0532512804072236 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_45 <= 0.9615169652523486 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_22 <= 0.8706910021045081 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( 312 ) : ( 313 ) ) ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 314 ) : ( 315 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 158 ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 28 ) : ( ( ( scaler_43 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_2
		
	
		namespace LGBM_Tree_0_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.05561891352349962 }} ,
					{ 10 ,  {-0.027466812313861458 }} ,
					{ 11 ,  {-0.02738436115339847 }} ,
					{ 13 ,  {0.025532214546780358 }} ,
					{ 18 ,  {0.12351124171651268 }} ,
					{ 24 ,  {-0.027502077643397013 }} ,
					{ 25 ,  {-0.02738463272408642 }} ,
					{ 39 ,  {0.15032684627695164 }} ,
					{ 60 ,  {-0.027349991062701626 }} ,
					{ 63 ,  {-0.027340526991986133 }} ,
					{ 77 ,  {0.14500818979141317 }} ,
					{ 117 ,  {-0.027365205256234534 }} ,
					{ 118 ,  {-0.02741297848348506 }} ,
					{ 119 ,  {-0.027346384525455326 }} ,
					{ 123 ,  {-0.027392352094290418 }} ,
					{ 124 ,  {-0.02735404743085487 }} ,
					{ 125 ,  {-0.027386805978053225 }} ,
					{ 153 ,  {0.14249826997817258 }} ,
					{ 226 ,  {-0.027501074781284038 }} ,
					{ 228 ,  {-0.02740695854746311 }} ,
					{ 229 ,  {-0.027346045215327082 }} ,
					{ 230 ,  {-0.027466524537440862 }} ,
					{ 231 ,  {-0.027399605338775015 }} ,
					{ 244 ,  {-0.02738888053942597 }} ,
					{ 304 ,  {0.1404448883527705 }} ,
					{ 305 ,  {0.14183018049059962 }} ,
					{ 448 ,  {-0.027359038463786196 }} ,
					{ 449 ,  {-0.027418394728769675 }} ,
					{ 450 ,  {-0.02750071023453018 }} ,
					{ 451 ,  {-0.027431227960968696 }} ,
					{ 454 ,  {-0.027423706322198833 }} ,
					{ 455 ,  {-0.027480919122627925 }} ,
					{ 464 ,  {-0.02739700321807983 }} ,
					{ 466 ,  {-0.027415548796460007 }} ,
					{ 467 ,  {-0.027485239204215823 }} ,
					{ 490 ,  {-0.027412030763322073 }} ,
					{ 930 ,  {-0.027397632276895074 }} ,
					{ 931 ,  {-0.0274762000853578 }} ,
					{ 982 ,  {-0.027483336051320063 }} ,
					{ 983 ,  {-0.027425931885082216 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 18 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_47 <= 1.0884862232606567 ) ? ( ( ( scaler_28 <= 0.8623826931333223 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 304 ) : ( 305 ) ) ) : ( 153 ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_4 <= 0.7202398632493343 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_63 <= -1.058613854279861 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( 448 ) : ( 449 ) ) ) : ( ( ( scaler_35 <= 1.0000000180025095e-35 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( 226 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 464 ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 930 ) : ( 931 ) ) ) ) ) : ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 60 ) : ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( 244 ) : ( ( ( scaler_12 <= -0.7116706346068912 ) ? ( 490 ) : ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( 982 ) : ( 983 ) ) ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_3
		
	
		namespace LGBM_Tree_1_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.027608649658877035 }} ,
					{ 12 ,  {0.045707803967009644 }} ,
					{ 14 ,  {0.03679595453295082 }} ,
					{ 18 ,  {0.14621944142104587 }} ,
					{ 19 ,  {0.08020874154342948 }} ,
					{ 20 ,  {-0.0004651637472363854 }} ,
					{ 22 ,  {0.0376900047255601 }} ,
					{ 26 ,  {0.08210661588175097 }} ,
					{ 30 ,  {-0.027545405673700743 }} ,
					{ 31 ,  {-0.02778018409963244 }} ,
					{ 46 ,  {-0.02760379341720516 }} ,
					{ 47 ,  {-0.02752849554885661 }} ,
					{ 54 ,  {0.12408080391589918 }} ,
					{ 87 ,  {-0.013193307600400439 }} ,
					{ 110 ,  {0.14034316761133642 }} ,
					{ 111 ,  {0.1501422246539273 }} ,
					{ 172 ,  {-0.027650464554066053 }} ,
					{ 173 ,  {-0.02757890720361955 }} ,
					{ 337 ,  {-0.02757008707578154 }} ,
					{ 341 ,  {-0.027616449845626723 }} ,
					{ 342 ,  {-0.027500037167395082 }} ,
					{ 343 ,  {-0.02755304755390181 }} ,
					{ 672 ,  {-0.027562106142265154 }} ,
					{ 677 ,  {-0.027540246312676 }} ,
					{ 680 ,  {-0.027551286975215684 }} ,
					{ 681 ,  {-0.027607286419591145 }} ,
					{ 1352 ,  {-0.027566842552009297 }} ,
					{ 1353 ,  {-0.02763375855269648 }} ,
					{ 1356 ,  {-0.027627500448323374 }} ,
					{ 1358 ,  {-0.0276566565141049 }} ,
					{ 2692 ,  {-0.027589098653551383 }} ,
					{ 2693 ,  {-0.027654561198676764 }} ,
					{ 2694 ,  {-0.02763356986838757 }} ,
					{ 2695 ,  {-0.027700527373016037 }} ,
					{ 2714 ,  {-0.027554651190884127 }} ,
					{ 2715 ,  {-0.02759710140649467 }} ,
					{ 2719 ,  {-0.0276403913538794 }} ,
					{ 5437 ,  {-0.027566412417069724 }} ,
					{ 10872 ,  {-0.02756761278461414 }} ,
					{ 10873 ,  {-0.027618788592344314 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_60 <= -0.3897292760534952 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 672 ) : ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 2692 ) : ( 2693 ) ) ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 2694 ) : ( 2695 ) ) ) ) ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 1352 ) : ( 1353 ) ) ) : ( 677 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_38 <= -1.3128719206359507 ) ? ( 1356 ) : ( ( ( scaler_51 <= 0.44897628365603276 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 1358 ) : ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 10872 ) : ( 10873 ) ) ) : ( 5437 ) ) ) : ( 2719 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 680 ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_29 <= 1.1136086350295498 ) ? ( 12 ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 26 ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 54 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 14 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_3
		
	
		namespace LGBM_Tree_2_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.1123984880131921 }} ,
					{ 15 ,  {0.057055400950842855 }} ,
					{ 16 ,  {0.0009262198786939798 }} ,
					{ 21 ,  {0.012141373734695045 }} ,
					{ 24 ,  {0.07189094564497713 }} ,
					{ 26 ,  {0.056656065027349115 }} ,
					{ 27 ,  {-0.027840020962777857 }} ,
					{ 28 ,  {-0.013148123216962952 }} ,
					{ 40 ,  {-0.027578012218568572 }} ,
					{ 41 ,  {-0.027638858592735644 }} ,
					{ 50 ,  {0.1523805657953124 }} ,
					{ 59 ,  {-0.02757350766075103 }} ,
					{ 68 ,  {-0.02760738128429487 }} ,
					{ 69 ,  {-0.027546238079470382 }} ,
					{ 70 ,  {-0.027662472768353593 }} ,
					{ 71 ,  {-0.027600709212017585 }} ,
					{ 88 ,  {-0.027650012128948843 }} ,
					{ 89 ,  {-0.02755212427844252 }} ,
					{ 92 ,  {-0.027535539522041574 }} ,
					{ 94 ,  {-0.02758338828220687 }} ,
					{ 95 ,  {-0.027644781264971857 }} ,
					{ 103 ,  {0.12541931577742924 }} ,
					{ 116 ,  {-0.027605273944760162 }} ,
					{ 117 ,  {-0.027671052354052823 }} ,
					{ 181 ,  {-0.02754769644066862 }} ,
					{ 186 ,  {-0.027583684535447153 }} ,
					{ 187 ,  {-0.027537712960237444 }} ,
					{ 204 ,  {0.13950882873082404 }} ,
					{ 205 ,  {0.13645153669038332 }} ,
					{ 360 ,  {-0.0275923363382043 }} ,
					{ 361 ,  {-0.02766604120604308 }} ,
					{ 365 ,  {-0.027592997082964726 }} ,
					{ 728 ,  {-0.027708956684830217 }} ,
					{ 733 ,  {-0.02756062894732343 }} ,
					{ 734 ,  {-0.027659120734611478 }} ,
					{ 735 ,  {-0.027598035231053766 }} ,
					{ 1458 ,  {-0.027602633733841832 }} ,
					{ 1459 ,  {-0.027702264847246846 }} ,
					{ 1464 ,  {-0.027656781004525684 }} ,
					{ 1465 ,  {-0.02759215189367997 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_52 <= -0.527371360340495 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_62 <= -2.3230670362774934 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 360 ) : ( 361 ) ) ) : ( 181 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_43 <= 0.6383459446991454 ) ? ( ( ( scaler_37 <= -0.2443539914545507 ) ? ( 728 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 1458 ) : ( 1459 ) ) ) ) ) : ( 365 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 1464 ) : ( 1465 ) ) ) : ( 733 ) ) ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 92 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_21 <= 0.9264910271543165 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( 24 ) : ( ( ( scaler_30 <= 1.0000000180025095e-35 ) ? ( 50 ) : ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( 204 ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_6 <= -1.7094592748953787 ) ? ( 28 ) : ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_3
		
	
		namespace LGBM_Tree_3_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.08726542739126678 }} ,
					{ 10 ,  {0.016274477233962522 }} ,
					{ 16 ,  {0.11953147362026205 }} ,
					{ 23 ,  {0.00045727916603280664 }} ,
					{ 26 ,  {0.11570472101172491 }} ,
					{ 27 ,  {-0.027629995337452463 }} ,
					{ 28 ,  {-0.027707010136008015 }} ,
					{ 29 ,  {0.03934351899654928 }} ,
					{ 34 ,  {0.14176181826978015 }} ,
					{ 35 ,  {0.1481934163137646 }} ,
					{ 44 ,  {-0.027716145610981666 }} ,
					{ 48 ,  {0.05346492233298317 }} ,
					{ 49 ,  {-0.027529855969492485 }} ,
					{ 50 ,  {-0.02784379937826566 }} ,
					{ 63 ,  {0.01804503422848062 }} ,
					{ 90 ,  {-0.027602182209356885 }} ,
					{ 102 ,  {-0.02765301260799979 }} ,
					{ 103 ,  {-0.027537576216385303 }} ,
					{ 121 ,  {-0.027495082346370898 }} ,
					{ 124 ,  {0.00905111461112665 }} ,
					{ 182 ,  {-0.027508825712048227 }} ,
					{ 183 ,  {-0.027573306718506437 }} ,
					{ 241 ,  {-0.027492369483790025 }} ,
					{ 246 ,  {-0.02751749176245677 }} ,
					{ 250 ,  {-0.027673664340556983 }} ,
					{ 480 ,  {-0.02750665993474759 }} ,
					{ 481 ,  {-0.027605165713835506 }} ,
					{ 488 ,  {-0.027561001133160085 }} ,
					{ 490 ,  {-0.02750621049273765 }} ,
					{ 494 ,  {-0.02759862166326292 }} ,
					{ 495 ,  {-0.02753816921822513 }} ,
					{ 978 ,  {-0.027586950550553296 }} ,
					{ 979 ,  {-0.027634796571681355 }} ,
					{ 982 ,  {-0.0276072063628801 }} ,
					{ 983 ,  {-0.027530381890454616 }} ,
					{ 1005 ,  {-0.027513812916337588 }} ,
					{ 1006 ,  {-0.027521213019789062 }} ,
					{ 1007 ,  {-0.02747064717109144 }} ,
					{ 2008 ,  {-0.027551127218394707 }} ,
					{ 2009 ,  {-0.027629545145173896 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 10 ) : ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 44 ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 90 ) : ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 182 ) : ( 183 ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( 50 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_61 <= -0.5957444632287917 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_56 <= -0.2502577786540379 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 488 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( 978 ) : ( 979 ) ) ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 490 ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( 982 ) : ( 983 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 246 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 124 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( 250 ) : ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 2008 ) : ( 2009 ) ) ) : ( 1005 ) ) ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 1006 ) : ( 1007 ) ) ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_3
		
	
		namespace LGBM_Tree_4_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.04149243764310247 }} ,
					{ 12 ,  {0.12802588348169644 }} ,
					{ 17 ,  {0.022029246071959687 }} ,
					{ 18 ,  {-0.028097757833373996 }} ,
					{ 20 ,  {-0.009283399173645974 }} ,
					{ 22 ,  {0.04885186142914769 }} ,
					{ 23 ,  {-0.027856043968905425 }} ,
					{ 26 ,  {0.14069283661043097 }} ,
					{ 27 ,  {0.13558410801723686 }} ,
					{ 32 ,  {-0.013656839895864048 }} ,
					{ 39 ,  {0.007396257975668976 }} ,
					{ 43 ,  {-0.019259672744837614 }} ,
					{ 67 ,  {-0.027745682387052446 }} ,
					{ 76 ,  {0.14532994331889987 }} ,
					{ 77 ,  {0.1087172264061159 }} ,
					{ 133 ,  {-0.027626281883825255 }} ,
					{ 264 ,  {-0.02771095918648397 }} ,
					{ 265 ,  {-0.027646791474830203 }} ,
					{ 340 ,  {-0.0276315986929479 }} ,
					{ 342 ,  {-0.027573194174278573 }} ,
					{ 672 ,  {-0.02766213684593017 }} ,
					{ 673 ,  {-0.027731478455543742 }} ,
					{ 674 ,  {-0.0276671487066887 }} ,
					{ 676 ,  {-0.027642502694603728 }} ,
					{ 679 ,  {-0.027667941955574 }} ,
					{ 683 ,  {-0.027635886160997276 }} ,
					{ 686 ,  {-0.027671987106858018 }} ,
					{ 687 ,  {-0.027625273490569813 }} ,
					{ 1350 ,  {-0.027572606001327944 }} ,
					{ 1351 ,  {-0.02761941712845475 }} ,
					{ 1355 ,  {-0.027623251757227192 }} ,
					{ 1356 ,  {-0.027749645533850693 }} ,
					{ 1357 ,  {-0.027693569226991722 }} ,
					{ 1364 ,  {-0.02772229223143985 }} ,
					{ 1365 ,  {-0.027659165939390315 }} ,
					{ 2708 ,  {-0.027729222449637266 }} ,
					{ 5419 ,  {-0.027645622597116185 }} ,
					{ 10837 ,  {-0.02764939559514676 }} ,
					{ 21672 ,  {-0.027679346813428943 }} ,
					{ 21673 ,  {-0.02772295540194397 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 32 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( ( ( scaler_5 <= -1.0116016662432779 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 674 ) : ( ( ( scaler_27 <= -0.6272616588329828 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( 676 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 2708 ) : ( ( ( scaler_63 <= 0.8145052137899623 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( 21672 ) : ( 21673 ) ) ) : ( 10837 ) ) ) : ( 5419 ) ) ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 1356 ) : ( 1357 ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 340 ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 1364 ) : ( 1365 ) ) ) : ( 683 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 342 ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( 686 ) : ( 687 ) ) ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( ( ( scaler_35 <= 2.320232750280485 ) ? ( 12 ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_3
		
	
		namespace LGBM_Tree_5_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {0.03562088111479702 }} ,
					{ 15 ,  {0.056828540559254216 }} ,
					{ 16 ,  {0.10017411024779353 }} ,
					{ 17 ,  {-0.027583340751149384 }} ,
					{ 18 ,  {-0.0008612719807169762 }} ,
					{ 21 ,  {0.12426318397289633 }} ,
					{ 24 ,  {0.0009997242707141323 }} ,
					{ 28 ,  {-0.02758824602150156 }} ,
					{ 39 ,  {-0.027643581282481806 }} ,
					{ 40 ,  {0.143251078471296 }} ,
					{ 50 ,  {-0.027495054939030806 }} ,
					{ 55 ,  {-0.027752733192831704 }} ,
					{ 59 ,  {-0.02748816471909939 }} ,
					{ 82 ,  {0.1407476281046076 }} ,
					{ 83 ,  {0.13856422866619053 }} ,
					{ 102 ,  {-0.02761700302651763 }} ,
					{ 103 ,  {-0.027531561371347647 }} ,
					{ 104 ,  {-0.02756549165200375 }} ,
					{ 105 ,  {-0.027476654826772695 }} ,
					{ 108 ,  {-0.02758282803408232 }} ,
					{ 109 ,  {-0.027517806530659168 }} ,
					{ 117 ,  {-0.027507039449182494 }} ,
					{ 152 ,  {-0.02761074843057274 }} ,
					{ 153 ,  {-0.027533556682634366 }} ,
					{ 155 ,  {-0.027466519179486372 }} ,
					{ 232 ,  {-0.027587930189607902 }} ,
					{ 233 ,  {-0.027512314674387653 }} ,
					{ 308 ,  {-0.02754817620807636 }} ,
					{ 309 ,  {-0.027495854033354656 }} ,
					{ 426 ,  {-0.027615691076864807 }} ,
					{ 428 ,  {-0.027579913102846205 }} ,
					{ 429 ,  {-0.027511169238698643 }} ,
					{ 430 ,  {-0.027519599606869057 }} ,
					{ 431 ,  {-0.0274465755331907 }} ,
					{ 848 ,  {-0.02755608710587028 }} ,
					{ 849 ,  {-0.02749354775266248 }} ,
					{ 850 ,  {-0.027447969360695948 }} ,
					{ 851 ,  {-0.027527353501399926 }} ,
					{ 854 ,  {-0.027584667417904975 }} ,
					{ 855 ,  {-0.027531547741274833 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( 18 ) : ( ( ( scaler_15 <= -0.9283389306387814 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 152 ) : ( 153 ) ) ) : ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( ( ( scaler_37 <= 1.0000000180025095e-35 ) ? ( 308 ) : ( 309 ) ) ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( 40 ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 50 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( 426 ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 428 ) : ( 429 ) ) ) : ( ( ( scaler_46 <= -0.6690914606879405 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_7 <= 0.8256909793536391 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( ( ( scaler_32 <= 1.1083672537675733 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_3
		
	
		namespace LGBM_Tree_6_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.010065060027887549 }} ,
					{ 8 ,  {0.025149272675977476 }} ,
					{ 10 ,  {0.0011554245745429295 }} ,
					{ 15 ,  {-0.012815412998566015 }} ,
					{ 23 ,  {0.07619392175711487 }} ,
					{ 37 ,  {-0.027577437341904487 }} ,
					{ 38 ,  {-0.027406638760391806 }} ,
					{ 39 ,  {-0.02745528666806874 }} ,
					{ 44 ,  {0.1475135201216143 }} ,
					{ 57 ,  {-0.012762780366020321 }} ,
					{ 72 ,  {-0.027524402643272806 }} ,
					{ 73 ,  {-0.027452891531893998 }} ,
					{ 91 ,  {0.13517841921102572 }} ,
					{ 112 ,  {-0.027504325658877022 }} ,
					{ 113 ,  {-0.027558164275335924 }} ,
					{ 118 ,  {-0.02741718604878079 }} ,
					{ 180 ,  {0.1446321307935929 }} ,
					{ 181 ,  {0.14077285902423983 }} ,
					{ 239 ,  {-0.027434493270723934 }} ,
					{ 464 ,  {-0.027437509888538783 }} ,
					{ 465 ,  {-0.027478952964362643 }} ,
					{ 470 ,  {-0.027505023183071325 }} ,
					{ 471 ,  {-0.02744388854094672 }} ,
					{ 476 ,  {-0.02745747333940129 }} ,
					{ 932 ,  {-0.027473871275316614 }} ,
					{ 933 ,  {-0.02756529670948384 }} ,
					{ 935 ,  {-0.027441198569678728 }} ,
					{ 936 ,  {-0.02756755346677536 }} ,
					{ 938 ,  {-0.02745141223769588 }} ,
					{ 939 ,  {-0.02752120491173128 }} ,
					{ 1869 ,  {-0.027527301426031648 }} ,
					{ 1875 ,  {-0.02749016728087846 }} ,
					{ 1908 ,  {-0.02748904114095287 }} ,
					{ 1909 ,  {-0.027540546969753256 }} ,
					{ 1910 ,  {-0.027459574984797966 }} ,
					{ 1911 ,  {-0.02749843276427612 }} ,
					{ 3736 ,  {-0.02748637092463332 }} ,
					{ 3737 ,  {-0.027428646870612357 }} ,
					{ 3748 ,  {-0.027508292110148432 }} ,
					{ 3749 ,  {-0.027561961122921266 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_64 <= 0.3422780855468171 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 10 ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_36 <= 1.0873643855256774 ) ? ( 44 ) : ( ( ( scaler_39 <= 0.971164659629122 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 180 ) : ( 181 ) ) ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_24 <= 1.0000000180025095e-35 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 936 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 3748 ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 118 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 476 ) : ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 1908 ) : ( 1909 ) ) ) : ( ( ( scaler_36 <= 1.2451571269546495 ) ? ( 1910 ) : ( 1911 ) ) ) ) ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_3
		
	
		namespace LGBM_Tree_7_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03644896603677378 }} ,
					{ 8 ,  {0.08057764685051053 }} ,
					{ 19 ,  {0.15747652173880522 }} ,
					{ 20 ,  {-0.0077322404056747 }} ,
					{ 23 ,  {-0.013532908958471843 }} ,
					{ 25 ,  {0.02834675500413808 }} ,
					{ 36 ,  {0.1469378513536503 }} ,
					{ 37 ,  {0.13131193761630075 }} ,
					{ 42 ,  {0.10673764981577408 }} ,
					{ 43 ,  {0.1501146403676944 }} ,
					{ 44 ,  {-0.027944159890806793 }} ,
					{ 45 ,  {-0.027611990251636534 }} ,
					{ 48 ,  {-0.027454051514055746 }} ,
					{ 49 ,  {-0.027616760729888473 }} ,
					{ 54 ,  {-0.0032824302749754745 }} ,
					{ 105 ,  {-0.0274042553673992 }} ,
					{ 110 ,  {-0.0274206130460293 }} ,
					{ 111 ,  {-0.027527162805453198 }} ,
					{ 212 ,  {-0.027413948368976856 }} ,
					{ 214 ,  {-0.027368220057659792 }} ,
					{ 417 ,  {-0.02753506600465923 }} ,
					{ 419 ,  {-0.027475691452383905 }} ,
					{ 427 ,  {-0.027408510526030168 }} ,
					{ 430 ,  {-0.02744732042086652 }} ,
					{ 431 ,  {-0.027407570809610506 }} ,
					{ 836 ,  {-0.02743627006859994 }} ,
					{ 837 ,  {-0.02738566782871097 }} ,
					{ 852 ,  {-0.027433873040635354 }} ,
					{ 1664 ,  {-0.027445169959578793 }} ,
					{ 1666 ,  {-0.027421343437750184 }} ,
					{ 1706 ,  {-0.02744212408865121 }} ,
					{ 3334 ,  {-0.027437069054587777 }} ,
					{ 3335 ,  {-0.027487996123238757 }} ,
					{ 3414 ,  {-0.02746850794033467 }} ,
					{ 3415 ,  {-0.027522412474363118 }} ,
					{ 6660 ,  {-0.027439801743380895 }} ,
					{ 6662 ,  {-0.02748673775396006 }} ,
					{ 6663 ,  {-0.027541654346224805 }} ,
					{ 13322 ,  {-0.02752743020057823 }} ,
					{ 13323 ,  {-0.027460582456716703 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 8 ) : ( ( ( scaler_60 <= 1.1892408587521373 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 20 ) : ( ( ( scaler_16 <= 0.992302762794023 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_60 <= 1.3866121256028412 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_65 <= 3.1923178501001646 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 1664 ) : ( ( ( scaler_21 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 6660 ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 13322 ) : ( 13323 ) ) ) ) ) : ( ( ( scaler_47 <= 0.21333672243507412 ) ? ( 6662 ) : ( 6663 ) ) ) ) ) ) ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 1666 ) : ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( 417 ) ) ) : ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( 836 ) : ( 837 ) ) ) : ( 419 ) ) ) ) ) : ( 105 ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 212 ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 852 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 1706 ) : ( ( ( scaler_21 <= 0.9264910271543165 ) ? ( 3414 ) : ( 3415 ) ) ) ) ) ) ) : ( 427 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -1.0000000180025095e-35 ) ? ( 54 ) : ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_3
		
	
		namespace LGBM_Tree_8_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 13 ,  {-0.0273084426992925 }} ,
					{ 19 ,  {0.1268651668217045 }} ,
					{ 21 ,  {0.0036122154337181337 }} ,
					{ 25 ,  {-0.02733824524896075 }} ,
					{ 29 ,  {0.06294292021188687 }} ,
					{ 31 ,  {-0.027637064734634155 }} ,
					{ 32 ,  {-0.0166327884452516 }} ,
					{ 34 ,  {0.03514294495146066 }} ,
					{ 35 ,  {-0.027400580782696443 }} ,
					{ 36 ,  {0.014837815025875629 }} ,
					{ 40 ,  {-0.027426069817128185 }} ,
					{ 44 ,  {0.04009880809292765 }} ,
					{ 46 ,  {-0.027578052344161497 }} ,
					{ 47 ,  {0.01283723596808238 }} ,
					{ 56 ,  {-0.0119664887500642 }} ,
					{ 57 ,  {-0.027492461945846144 }} ,
					{ 60 ,  {-0.027344136496041557 }} ,
					{ 61 ,  {-0.02742092091577213 }} ,
					{ 74 ,  {-0.027534986887288233 }} ,
					{ 82 ,  {-0.0273908417578278 }} ,
					{ 83 ,  {-0.027334085863942065 }} ,
					{ 91 ,  {0.09726626376553688 }} ,
					{ 96 ,  {-0.027325123229430506 }} ,
					{ 97 ,  {-0.02737769489186396 }} ,
					{ 98 ,  {-0.0273360143436389 }} ,
					{ 132 ,  {-0.02732365813585441 }} ,
					{ 133 ,  {-0.027401125062064838 }} ,
					{ 134 ,  {-0.027754244407129137 }} ,
					{ 150 ,  {-0.0273403062542254 }} ,
					{ 151 ,  {-0.027413885951526024 }} ,
					{ 180 ,  {0.16529677059277315 }} ,
					{ 271 ,  {-0.027372018252159742 }} ,
					{ 362 ,  {0.14553172022541844 }} ,
					{ 363 ,  {0.15146654107880314 }} ,
					{ 396 ,  {-0.02736367626172219 }} ,
					{ 397 ,  {-0.027438265360921546 }} ,
					{ 398 ,  {-0.027339763736364205 }} ,
					{ 399 ,  {-0.02739855183138827 }} ,
					{ 540 ,  {-0.027470767752202196 }} ,
					{ 541 ,  {-0.027536580319013706 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_38 <= -0.4680387515195381 ) ? ( 32 ) : ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 132 ) : ( 133 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( 134 ) : ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( 540 ) : ( 541 ) ) ) : ( 271 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( scaler_45 <= 0.19120984640994193 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 36 ) : ( ( ( scaler_13 <= -0.8997490992648355 ) ? ( 74 ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_15 <= -0.5980738954644472 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 40 ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 44 ) : ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( ( ( scaler_12 <= 1.0000000180025095e-35 ) ? ( 180 ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( scaler_12 <= -0.8959190269913796 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 98 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 396 ) : ( 397 ) ) ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_3
		
	
		namespace LGBM_Tree_9_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.07921674973610583 }} ,
					{ 11 ,  {-0.027621944483307227 }} ,
					{ 13 ,  {-0.019626879417346074 }} ,
					{ 15 ,  {0.006599905949380914 }} ,
					{ 16 ,  {0.02282367775748598 }} ,
					{ 25 ,  {0.012913461047549937 }} ,
					{ 28 ,  {-0.027648994791804965 }} ,
					{ 34 ,  {0.014984704674245071 }} ,
					{ 36 ,  {-0.027667172055520252 }} ,
					{ 37 ,  {-0.01327314377694365 }} ,
					{ 49 ,  {0.08590239082509753 }} ,
					{ 59 ,  {-0.02754192462651633 }} ,
					{ 76 ,  {-0.027550392738902526 }} ,
					{ 116 ,  {-0.027562459455527762 }} ,
					{ 142 ,  {-0.02773010495581998 }} ,
					{ 143 ,  {0.013740240972416946 }} ,
					{ 154 ,  {-0.02758645468846942 }} ,
					{ 155 ,  {-0.027652708434103 }} ,
					{ 157 ,  {-0.027627736138447448 }} ,
					{ 192 ,  {0.15292812425970526 }} ,
					{ 193 ,  {0.14221476228182947 }} ,
					{ 194 ,  {0.14596617903388887 }} ,
					{ 195 ,  {0.11591533804688102 }} ,
					{ 234 ,  {-0.027663994805644243 }} ,
					{ 235 ,  {-0.027596281944063494 }} ,
					{ 280 ,  {-0.027776676754218844 }} ,
					{ 282 ,  {0.0005855756644181242 }} ,
					{ 283 ,  {-0.02773016060432819 }} ,
					{ 312 ,  {-0.027545042489670914 }} ,
					{ 313 ,  {-0.027579132896139988 }} ,
					{ 316 ,  {-0.027537027224893786 }} ,
					{ 317 ,  {-0.02757290641463081 }} ,
					{ 318 ,  {-0.027538990340102806 }} ,
					{ 319 ,  {-0.02748934313975178 }} ,
					{ 1125 ,  {-0.027605548001099135 }} ,
					{ 1127 ,  {-0.02769242951224457 }} ,
					{ 2248 ,  {-0.027564472040213596 }} ,
					{ 2249 ,  {-0.027511982902423068 }} ,
					{ 2252 ,  {-0.027607890159556364 }} ,
					{ 2253 ,  {-0.027555554826140107 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 16 ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_56 <= 1.5665167660176842 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 280 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( 2248 ) : ( 2249 ) ) ) : ( 1125 ) ) ) : ( ( ( scaler_16 <= 0.1671861246601561 ) ? ( ( ( scaler_64 <= 0.3422780855468171 ) ? ( 2252 ) : ( 2253 ) ) ) : ( 1127 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_45 <= -0.11691300112702074 ) ? ( 76 ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( 312 ) : ( 313 ) ) ) : ( 157 ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 316 ) : ( 317 ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 192 ) : ( 193 ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 28 ) : ( ( ( scaler_43 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 116 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_3
		
	
		namespace LGBM_Tree_0_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.05104671491496802 }} ,
					{ 10 ,  {-0.027402727161094154 }} ,
					{ 11 ,  {-0.02729782844505076 }} ,
					{ 13 ,  {0.025405723191568752 }} ,
					{ 17 ,  {0.10824219525901893 }} ,
					{ 24 ,  {-0.02734448856917438 }} ,
					{ 25 ,  {-0.027625544807230354 }} ,
					{ 32 ,  {0.13529077633227649 }} ,
					{ 60 ,  {-0.02728891782729159 }} ,
					{ 62 ,  {-0.027300858418692394 }} ,
					{ 63 ,  {-0.02726044386487573 }} ,
					{ 66 ,  {0.12607949263916027 }} ,
					{ 118 ,  {-0.02723314883972602 }} ,
					{ 119 ,  {-0.027303053045075538 }} ,
					{ 122 ,  {-0.027411752934750677 }} ,
					{ 134 ,  {0.12302899370687846 }} ,
					{ 135 ,  {0.12460281093888517 }} ,
					{ 224 ,  {-0.027293089439173236 }} ,
					{ 228 ,  {-0.027327750232495004 }} ,
					{ 229 ,  {-0.02724034440968384 }} ,
					{ 230 ,  {-0.027432396982991665 }} ,
					{ 232 ,  {-0.027356676029531797 }} ,
					{ 233 ,  {-0.027288263683026955 }} ,
					{ 234 ,  {-0.027310654721383526 }} ,
					{ 247 ,  {-0.027283625137402637 }} ,
					{ 450 ,  {-0.027320086970614766 }} ,
					{ 451 ,  {-0.0274192066354665 }} ,
					{ 452 ,  {-0.027351314774166247 }} ,
					{ 454 ,  {-0.027385890133473735 }} ,
					{ 455 ,  {-0.02730576871243708 }} ,
					{ 462 ,  {-0.02736374451740499 }} ,
					{ 463 ,  {-0.02730070403506419 }} ,
					{ 492 ,  {-0.027361327119015445 }} ,
					{ 493 ,  {-0.027312498646674822 }} ,
					{ 906 ,  {-0.027485616819645148 }} ,
					{ 907 ,  {-0.027427547495059004 }} ,
					{ 940 ,  {-0.027390485263832826 }} ,
					{ 941 ,  {-0.027344022274909043 }} ,
					{ 942 ,  {-0.027310094582831842 }} ,
					{ 943 ,  {-0.0273675560433848 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 32 ) : ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( 66 ) : ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 224 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 452 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 906 ) : ( 907 ) ) ) ) ) : ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 230 ) : ( ( ( scaler_61 <= -0.8251040864464135 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 232 ) : ( 233 ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 234 ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 940 ) : ( 941 ) ) ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 60 ) : ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 122 ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( 492 ) : ( 493 ) ) ) : ( 247 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_4
		
	
		namespace LGBM_Tree_1_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.027520084255068317 }} ,
					{ 13 ,  {0.021509096159786037 }} ,
					{ 15 ,  {0.03658492026718457 }} ,
					{ 18 ,  {0.12840315715917622 }} ,
					{ 19 ,  {0.07315528652619596 }} ,
					{ 20 ,  {-0.0005124301301201131 }} ,
					{ 22 ,  {0.03565634468849921 }} ,
					{ 25 ,  {0.056244712215797424 }} ,
					{ 28 ,  {-0.027769264266797683 }} ,
					{ 29 ,  {-0.027487504005557474 }} ,
					{ 46 ,  {-0.027525186377034057 }} ,
					{ 47 ,  {-0.02743253635120012 }} ,
					{ 48 ,  {0.09842727332526768 }} ,
					{ 86 ,  {-0.01281991495927342 }} ,
					{ 98 ,  {0.1404516058707693 }} ,
					{ 174 ,  {-0.02750365938636844 }} ,
					{ 175 ,  {-0.027577373451713596 }} ,
					{ 198 ,  {0.11433439007649385 }} ,
					{ 199 ,  {0.12965617505939783 }} ,
					{ 340 ,  {-0.027559642320026518 }} ,
					{ 342 ,  {-0.02740186667752119 }} ,
					{ 343 ,  {-0.02746649482238679 }} ,
					{ 672 ,  {-0.027448074474677005 }} ,
					{ 674 ,  {-0.027527715004979234 }} ,
					{ 676 ,  {-0.027524290835345574 }} ,
					{ 677 ,  {-0.027444061341824078 }} ,
					{ 682 ,  {-0.027449135469406374 }} ,
					{ 1347 ,  {-0.027500178364660267 }} ,
					{ 1350 ,  {-0.027585744650270097 }} ,
					{ 1351 ,  {-0.027651638408424745 }} ,
					{ 1356 ,  {-0.027529300463763052 }} ,
					{ 1357 ,  {-0.027470854735781886 }} ,
					{ 1359 ,  {-0.027496194905555073 }} ,
					{ 1366 ,  {-0.0274652135642388 }} ,
					{ 1367 ,  {-0.027528607380310377 }} ,
					{ 2692 ,  {-0.027535335774687465 }} ,
					{ 2693 ,  {-0.027647158629016035 }} ,
					{ 2717 ,  {-0.027615250785424008 }} ,
					{ 5432 ,  {-0.027588021458277302 }} ,
					{ 5433 ,  {-0.027516737742570727 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 672 ) : ( ( ( scaler_19 <= 0.8363273182017931 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 674 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 1356 ) : ( 1357 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 5432 ) : ( 5433 ) ) ) : ( 2717 ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 340 ) : ( ( ( scaler_14 <= -0.7937603106732037 ) ? ( 682 ) : ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 1366 ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 86 ) : ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_12 <= 0.5780681120845275 ) ? ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 48 ) : ( ( ( scaler_45 <= 0.8074555414838673 ) ? ( 98 ) : ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_4
		
	
		namespace LGBM_Tree_2_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.10027150033550714 }} ,
					{ 15 ,  {0.037372206541815355 }} ,
					{ 16 ,  {0.0008325179668049828 }} ,
					{ 20 ,  {0.011785664693746999 }} ,
					{ 25 ,  {0.04740731796496717 }} ,
					{ 26 ,  {-0.02825352131492826 }} ,
					{ 27 ,  {0.04577315023981249 }} ,
					{ 29 ,  {-0.01289183359505252 }} ,
					{ 42 ,  {-0.02750143899675707 }} ,
					{ 43 ,  {-0.02769859975029726 }} ,
					{ 46 ,  {-0.027550415291007976 }} ,
					{ 48 ,  {0.11740956472432823 }} ,
					{ 57 ,  {-0.028007176221118802 }} ,
					{ 68 ,  {-0.027523070763531762 }} ,
					{ 69 ,  {-0.027447490922935427 }} ,
					{ 70 ,  {-0.027574388974722225 }} ,
					{ 71 ,  {-0.027503294454760786 }} ,
					{ 88 ,  {-0.02758047390342205 }} ,
					{ 89 ,  {-0.027453902681916432 }} ,
					{ 94 ,  {-0.027466719914673605 }} ,
					{ 99 ,  {0.1285215684341647 }} ,
					{ 112 ,  {-0.027474927781164084 }} ,
					{ 190 ,  {-0.027477636363896243 }} ,
					{ 191 ,  {-0.027519191972216167 }} ,
					{ 196 ,  {0.12527891455586426 }} ,
					{ 197 ,  {0.1211034383586376 }} ,
					{ 226 ,  {-0.027614258875875132 }} ,
					{ 227 ,  {-0.027499856601349088 }} ,
					{ 360 ,  {-0.027509729600721202 }} ,
					{ 361 ,  {-0.027588762427204268 }} ,
					{ 362 ,  {-0.027430429185482576 }} ,
					{ 363 ,  {-0.027505946695114504 }} ,
					{ 364 ,  {-0.027509558965564562 }} ,
					{ 366 ,  {-0.027506269334136153 }} ,
					{ 367 ,  {-0.027569943015371676 }} ,
					{ 731 ,  {-0.02752302659399371 }} ,
					{ 1461 ,  {-0.02755299504851982 }} ,
					{ 2921 ,  {-0.027661311983497756 }} ,
					{ 5840 ,  {-0.027524810618580253 }} ,
					{ 5841 ,  {-0.027626467906891446 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 20 ) : ( ( ( scaler_61 <= -0.13702521679354787 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( 360 ) : ( 361 ) ) ) : ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 364 ) : ( ( ( scaler_35 <= 1.1839858622198054 ) ? ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_62 <= 0.3358316743005698 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( 5840 ) : ( 5841 ) ) ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 94 ) : ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( 48 ) : ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 196 ) : ( 197 ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_60 <= 0.794498325050729 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 112 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_4
		
	
		namespace LGBM_Tree_3_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.07394116337873585 }} ,
					{ 10 ,  {0.008479527288994216 }} ,
					{ 18 ,  {0.09695827044895601 }} ,
					{ 22 ,  {-0.013500227076622774 }} ,
					{ 25 ,  {-0.027588036788229423 }} ,
					{ 26 ,  {0.018937607304382875 }} ,
					{ 28 ,  {0.038835806482971275 }} ,
					{ 29 ,  {-0.02766387251278157 }} ,
					{ 38 ,  {0.12366573016927836 }} ,
					{ 39 ,  {0.1297923950375195 }} ,
					{ 46 ,  {-0.027660303415561617 }} ,
					{ 48 ,  {0.12990687599789527 }} ,
					{ 49 ,  {0.05895203132966555 }} ,
					{ 55 ,  {-0.012983996477380771 }} ,
					{ 63 ,  {0.01757777164254584 }} ,
					{ 94 ,  {-0.02745492215997743 }} ,
					{ 95 ,  {-0.027528455747427457 }} ,
					{ 109 ,  {-0.02783801016129389 }} ,
					{ 121 ,  {-0.027399425995276578 }} ,
					{ 124 ,  {0.008838086196297288 }} ,
					{ 216 ,  {-0.027597440676723484 }} ,
					{ 217 ,  {-0.027436569841101252 }} ,
					{ 241 ,  {-0.027488768885322163 }} ,
					{ 244 ,  {-0.02741979898168928 }} ,
					{ 246 ,  {-0.027428692348647817 }} ,
					{ 250 ,  {-0.02759853384687549 }} ,
					{ 480 ,  {-0.027374947238485298 }} ,
					{ 481 ,  {-0.027460341509186744 }} ,
					{ 490 ,  {-0.027460499323243834 }} ,
					{ 494 ,  {-0.02753138865335944 }} ,
					{ 495 ,  {-0.027451262335705873 }} ,
					{ 983 ,  {-0.027475765278148143 }} ,
					{ 1004 ,  {-0.027504496549691657 }} ,
					{ 1005 ,  {-0.027428969698437628 }} ,
					{ 1006 ,  {-0.027438502269380056 }} ,
					{ 1007 ,  {-0.027384795197332258 }} ,
					{ 3928 ,  {-0.027556666410918647 }} ,
					{ 3929 ,  {-0.027479287098211277 }} ,
					{ 3930 ,  {-0.027609543511953584 }} ,
					{ 3931 ,  {-0.02754611698119687 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 8 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 18 ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_52 <= -0.8798106789356778 ) ? ( 10 ) : ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( ( ( scaler_47 <= -1.1869024788858573 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( ( ( scaler_13 <= -0.644907381388898 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 26 ) : ( ( ( scaler_60 <= 1.5839833924535454 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_46 <= 0.12545810464432175 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 244 ) : ( ( ( scaler_15 <= -0.7632064130516144 ) ? ( 490 ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 3928 ) : ( 3929 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 3930 ) : ( 3931 ) ) ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 246 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 124 ) : ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 1004 ) : ( 1005 ) ) ) : ( ( ( scaler_14 <= -0.7937603106732037 ) ? ( 1006 ) : ( 1007 ) ) ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_4
		
	
		namespace LGBM_Tree_4_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03249944611076396 }} ,
					{ 13 ,  {0.10686105978054815 }} ,
					{ 17 ,  {0.02109702611561313 }} ,
					{ 18 ,  {-0.027998934344918555 }} ,
					{ 20 ,  {-0.00904820404645005 }} ,
					{ 22 ,  {-0.027799410907157165 }} ,
					{ 23 ,  {0.04704567903263002 }} ,
					{ 24 ,  {0.1285831593500709 }} ,
					{ 25 ,  {0.11966053900342151 }} ,
					{ 32 ,  {-0.013321214100841855 }} ,
					{ 39 ,  {0.007108117197585565 }} ,
					{ 43 ,  {-0.019072331526239866 }} ,
					{ 67 ,  {-0.027690587039575783 }} ,
					{ 76 ,  {0.12709553925250883 }} ,
					{ 77 ,  {0.09728798107632479 }} ,
					{ 133 ,  {-0.027525126099327807 }} ,
					{ 264 ,  {-0.027634286125989588 }} ,
					{ 265 ,  {-0.027553458481836435 }} ,
					{ 340 ,  {-0.027538258239816538 }} ,
					{ 342 ,  {-0.02746464555343503 }} ,
					{ 343 ,  {-0.027552526047363853 }} ,
					{ 672 ,  {-0.02756097067054263 }} ,
					{ 673 ,  {-0.027659171366684533 }} ,
					{ 674 ,  {-0.027585666338199512 }} ,
					{ 675 ,  {-0.027509988771951446 }} ,
					{ 679 ,  {-0.027579923295726613 }} ,
					{ 683 ,  {-0.027541328277753116 }} ,
					{ 1354 ,  {-0.027499632435555827 }} ,
					{ 1356 ,  {-0.027604870888354307 }} ,
					{ 1357 ,  {-0.02769742470830286 }} ,
					{ 1364 ,  {-0.027644676454245454 }} ,
					{ 1365 ,  {-0.02757357155075593 }} ,
					{ 2704 ,  {-0.027593863804837998 }} ,
					{ 2705 ,  {-0.027535656018179946 }} ,
					{ 2706 ,  {-0.027663268041743967 }} ,
					{ 2711 ,  {-0.027553388598801295 }} ,
					{ 5414 ,  {-0.027558009570569766 }} ,
					{ 5415 ,  {-0.027635655289677215 }} ,
					{ 5420 ,  {-0.027558504698989468 }} ,
					{ 5421 ,  {-0.027624135569864997 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 32 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( ( ( scaler_5 <= -1.0116016662432779 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( 2704 ) : ( 2705 ) ) ) : ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 2706 ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 5414 ) : ( 5415 ) ) ) ) ) ) ) : ( ( ( scaler_52 <= -1.056030338233269 ) ? ( 1354 ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 5420 ) : ( 5421 ) ) ) : ( 2711 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_39 <= -0.9051660590358572 ) ? ( 1356 ) : ( 1357 ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 340 ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 1364 ) : ( 1365 ) ) ) : ( 683 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_4
		
	
		namespace LGBM_Tree_5_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.038796881975729905 }} ,
					{ 11 ,  {-0.015652141066218084 }} ,
					{ 15 ,  {0.0528405448804937 }} ,
					{ 19 ,  {-0.005550545923621598 }} ,
					{ 20 ,  {0.10846034828345019 }} ,
					{ 24 ,  {0.0011330877649206007 }} ,
					{ 28 ,  {-0.027531345914863444 }} ,
					{ 36 ,  {-0.027842067960922503 }} ,
					{ 43 ,  {0.13417643817103944 }} ,
					{ 50 ,  {-0.027411234996269046 }} ,
					{ 51 ,  {-0.027505870444196348 }} ,
					{ 55 ,  {-0.027686646831161933 }} ,
					{ 58 ,  {-0.02741539537509008 }} ,
					{ 74 ,  {-0.027596973944503583 }} ,
					{ 84 ,  {0.1254205630027096 }} ,
					{ 85 ,  {0.11597810397049686 }} ,
					{ 107 ,  {-0.02736228759506497 }} ,
					{ 108 ,  {-0.0275142979559467 }} ,
					{ 109 ,  {-0.027432514567591534 }} ,
					{ 118 ,  {-0.02752313974383865 }} ,
					{ 119 ,  {-0.0274163670323827 }} ,
					{ 150 ,  {-0.027487100359492707 }} ,
					{ 208 ,  {-0.027550500842438964 }} ,
					{ 213 ,  {-0.02749717993359912 }} ,
					{ 302 ,  {-0.027425604236888303 }} ,
					{ 419 ,  {-0.027416037184829625 }} ,
					{ 420 ,  {-0.027465756108239082 }} ,
					{ 421 ,  {-0.02741458674027014 }} ,
					{ 422 ,  {-0.027428916441334744 }} ,
					{ 423 ,  {-0.02733872017370946 }} ,
					{ 424 ,  {-0.02738895635021455 }} ,
					{ 425 ,  {-0.02746343754348007 }} ,
					{ 606 ,  {-0.027327237506730374 }} ,
					{ 607 ,  {-0.027406291443307435 }} ,
					{ 1674 ,  {-0.02740257313612265 }} ,
					{ 1675 ,  {-0.027476589785070966 }} ,
					{ 3344 ,  {-0.02743457175822794 }} ,
					{ 3345 ,  {-0.02750542062185839 }} ,
					{ 3346 ,  {-0.027567021798502036 }} ,
					{ 3347 ,  {-0.02748914105011384 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 36 ) : ( ( ( scaler_62 <= 1.0000000180025095e-35 ) ? ( 74 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 150 ) : ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 302 ) : ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 606 ) : ( 607 ) ) ) ) ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_60 <= 0.597127058200025 ) ? ( 20 ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( 84 ) : ( 85 ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 208 ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 3344 ) : ( 3345 ) ) ) : ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 3346 ) : ( 3347 ) ) ) ) ) : ( ( ( scaler_63 <= -0.88833030263715 ) ? ( 1674 ) : ( 1675 ) ) ) ) ) : ( 419 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 420 ) : ( 421 ) ) ) : ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 424 ) : ( 425 ) ) ) : ( 213 ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_7 <= 0.8256909793536391 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_4
		
	
		namespace LGBM_Tree_6_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.009869202971301255 }} ,
					{ 9 ,  {0.012498626539604157 }} ,
					{ 15 ,  {-0.01250897128046353 }} ,
					{ 16 ,  {-0.02774403515187622 }} ,
					{ 20 ,  {-0.02772893024432629 }} ,
					{ 21 ,  {0.029463607915543144 }} ,
					{ 22 ,  {0.06677442257572781 }} ,
					{ 46 ,  {0.13009424070961625 }} ,
					{ 57 ,  {-0.012402013148431321 }} ,
					{ 68 ,  {-0.027500142903607423 }} ,
					{ 69 ,  {-0.027376603663557725 }} ,
					{ 70 ,  {-0.027309524579313973 }} ,
					{ 71 ,  {-0.027365528607392477 }} ,
					{ 94 ,  {0.11717926758811688 }} ,
					{ 112 ,  {-0.02741809515071142 }} ,
					{ 113 ,  {-0.027518064987594865 }} ,
					{ 119 ,  {-0.02733595084532736 }} ,
					{ 190 ,  {0.1263090645921526 }} ,
					{ 236 ,  {-0.027326745151907108 }} ,
					{ 382 ,  {0.12191272581164801 }} ,
					{ 383 ,  {0.12370357815027291 }} ,
					{ 464 ,  {-0.02738891113118602 }} ,
					{ 465 ,  {-0.02733586310054962 }} ,
					{ 470 ,  {-0.02742647457399432 }} ,
					{ 471 ,  {-0.027348506748050963 }} ,
					{ 475 ,  {-0.027409707624599402 }} ,
					{ 932 ,  {-0.0274225766411388 }} ,
					{ 933 ,  {-0.02753702373283052 }} ,
					{ 935 ,  {-0.02734077526312222 }} ,
					{ 936 ,  {-0.02752075724776433 }} ,
					{ 938 ,  {-0.02736859143157716 }} ,
					{ 939 ,  {-0.027448771300217296 }} ,
					{ 948 ,  {-0.027386792835071255 }} ,
					{ 949 ,  {-0.027318042050347737 }} ,
					{ 1869 ,  {-0.027459677546640072 }} ,
					{ 1875 ,  {-0.027412580614038604 }} ,
					{ 3736 ,  {-0.027404933971948816 }} ,
					{ 3737 ,  {-0.02733744557469608 }} ,
					{ 3748 ,  {-0.027434470496075877 }} ,
					{ 3749 ,  {-0.02750628452627626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 16 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_36 <= 1.0873643855256774 ) ? ( 46 ) : ( ( ( scaler_63 <= 0.8145052137899623 ) ? ( 94 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 190 ) : ( ( ( scaler_27 <= -0.31060084599511306 ) ? ( 382 ) : ( 383 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_24 <= -1.0000000180025095e-35 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 936 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 3748 ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 236 ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 948 ) : ( 949 ) ) ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_4
		
	
		namespace LGBM_Tree_7_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03448522199144964 }} ,
					{ 8 ,  {0.038691467115410126 }} ,
					{ 18 ,  {0.10263605607046114 }} ,
					{ 20 ,  {0.11135642323045945 }} ,
					{ 21 ,  {-0.0030634908099050765 }} ,
					{ 23 ,  {-0.013393942882677506 }} ,
					{ 25 ,  {0.028542720100942637 }} ,
					{ 38 ,  {0.1386451187987314 }} ,
					{ 44 ,  {-0.02755075299797956 }} ,
					{ 45 ,  {-0.027969227588741048 }} ,
					{ 48 ,  {-0.027402251118726434 }} ,
					{ 49 ,  {-0.027559733176940993 }} ,
					{ 54 ,  {-0.0030967041129621553 }} ,
					{ 78 ,  {0.12029203085938243 }} ,
					{ 79 ,  {0.12863963797253927 }} ,
					{ 110 ,  {-0.027520880616485693 }} ,
					{ 111 ,  {-0.027402004955797282 }} ,
					{ 212 ,  {-0.027326931267718204 }} ,
					{ 214 ,  {-0.02726871692616973 }} ,
					{ 418 ,  {-0.02730953252641787 }} ,
					{ 419 ,  {-0.02737387269988374 }} ,
					{ 420 ,  {-0.02728873573565975 }} ,
					{ 421 ,  {-0.027342013949475316 }} ,
					{ 422 ,  {-0.02733999117452367 }} ,
					{ 423 ,  {-0.027453510558377133 }} ,
					{ 427 ,  {-0.02732023359383387 }} ,
					{ 430 ,  {-0.02735547879997446 }} ,
					{ 431 ,  {-0.02731402139679521 }} ,
					{ 833 ,  {-0.027339068220115927 }} ,
					{ 853 ,  {-0.027336046883733978 }} ,
					{ 1664 ,  {-0.027442294448501964 }} ,
					{ 1665 ,  {-0.027356922101864113 }} ,
					{ 1668 ,  {-0.02744649340194635 }} ,
					{ 1669 ,  {-0.027367206914995442 }} ,
					{ 1671 ,  {-0.027406869368634037 }} ,
					{ 1705 ,  {-0.02736314996528752 }} ,
					{ 3340 ,  {-0.02745638368345009 }} ,
					{ 3341 ,  {-0.027536061625209732 }} ,
					{ 3408 ,  {-0.027443138089220116 }} ,
					{ 3409 ,  {-0.02737740726616558 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 8 ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 38 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_39 <= 0.971164659629122 ) ? ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 1664 ) : ( 1665 ) ) ) : ( 833 ) ) ) : ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= -1.0000000180025095e-35 ) ? ( 1668 ) : ( 1669 ) ) ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_21 <= -0.6175214017080987 ) ? ( 3340 ) : ( 3341 ) ) ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_52 <= -0.3511517010429038 ) ? ( 420 ) : ( 421 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 212 ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 3408 ) : ( 3409 ) ) ) : ( 1705 ) ) ) : ( 853 ) ) ) : ( 427 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 54 ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_4
		
	
		namespace LGBM_Tree_8_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.03080894362047609 }} ,
					{ 18 ,  {-0.010685043151307607 }} ,
					{ 26 ,  {-0.027217315131843195 }} ,
					{ 27 ,  {-0.027298050664612356 }} ,
					{ 29 ,  {-0.012090114924462839 }} ,
					{ 31 ,  {0.08144690659272329 }} ,
					{ 32 ,  {-0.02736597351357772 }} ,
					{ 33 ,  {-0.027258039419738984 }} ,
					{ 44 ,  {0.03761477393403186 }} ,
					{ 46 ,  {0.01286163632479586 }} ,
					{ 47 ,  {-0.027522600132454014 }} ,
					{ 50 ,  {-0.02725468755678022 }} ,
					{ 51 ,  {-0.027304226527740068 }} ,
					{ 56 ,  {-0.027418969117961087 }} ,
					{ 60 ,  {-0.027560869901895775 }} ,
					{ 61 ,  {-0.027291161421259248 }} ,
					{ 76 ,  {-0.02725182196968058 }} ,
					{ 77 ,  {-0.027306480108663156 }} ,
					{ 78 ,  {-0.027317476510329498 }} ,
					{ 79 ,  {-0.027419582770305664 }} ,
					{ 80 ,  {-0.027435102556672704 }} ,
					{ 81 ,  {-0.027653931508034343 }} ,
					{ 82 ,  {-0.027294043244022514 }} ,
					{ 83 ,  {-0.02744198442588043 }} ,
					{ 84 ,  {-0.028146144386429067 }} ,
					{ 85 ,  {-0.027509328177213455 }} ,
					{ 86 ,  {-0.002527329645047755 }} ,
					{ 87 ,  {0.1177839294290666 }} ,
					{ 91 ,  {0.08747251497500703 }} ,
					{ 96 ,  {-0.027311328067392948 }} ,
					{ 97 ,  {-0.027243199599474417 }} ,
					{ 98 ,  {-0.02737784760790872 }} ,
					{ 114 ,  {-0.0273201869515302 }} ,
					{ 115 ,  {-0.027257689289596577 }} ,
					{ 180 ,  {0.14180234568393912 }} ,
					{ 198 ,  {-0.02724689770841834 }} ,
					{ 362 ,  {0.1267034295746425 }} ,
					{ 363 ,  {0.13147873242253216 }} ,
					{ 398 ,  {-0.027354168601161744 }} ,
					{ 399 ,  {-0.027275869609340767 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_60 <= -0.3897292760534952 ) ? ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( scaler_29 <= -0.5892438348161141 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( ( ( scaler_20 <= -0.4291825262850748 ) ? ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 44 ) : ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( ( ( scaler_12 <= 1.0000000180025095e-35 ) ? ( 180 ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_40 <= 1.5971838672777687 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( 98 ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 198 ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_15 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_4
		
	
		namespace LGBM_Tree_9_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.09283989529289063 }} ,
					{ 13 ,  {-0.019393211547468602 }} ,
					{ 15 ,  {0.0062603981852882755 }} ,
					{ 22 ,  {0.008799801464525437 }} ,
					{ 23 ,  {-0.028149784148583597 }} ,
					{ 25 ,  {0.0125499274847354 }} ,
					{ 32 ,  {0.05116954295378613 }} ,
					{ 33 ,  {-0.027691917912209874 }} ,
					{ 34 ,  {0.008386982414928705 }} ,
					{ 36 ,  {-0.02761455478763196 }} ,
					{ 37 ,  {-0.01291443515139176 }} ,
					{ 49 ,  {0.08093326839832965 }} ,
					{ 56 ,  {-0.027450607217203306 }} ,
					{ 58 ,  {-0.027504855547426505 }} ,
					{ 59 ,  {-0.02760321288644312 }} ,
					{ 70 ,  {-0.0025619016138011866 }} ,
					{ 76 ,  {-0.027462585476216068 }} ,
					{ 96 ,  {0.105658855038799 }} ,
					{ 114 ,  {-0.027567134363030866 }} ,
					{ 115 ,  {-0.027455214581385973 }} ,
					{ 155 ,  {-0.027494538954080112 }} ,
					{ 156 ,  {-0.027480338644779237 }} ,
					{ 157 ,  {-0.027557706205758665 }} ,
					{ 158 ,  {-0.027461603636674305 }} ,
					{ 194 ,  {0.13510455426034892 }} ,
					{ 285 ,  {-0.014448742076379887 }} ,
					{ 286 ,  {0.0009413895517255901 }} ,
					{ 287 ,  {-0.02764120424581268 }} ,
					{ 308 ,  {-0.02763908254145464 }} ,
					{ 309 ,  {-0.027539798704860598 }} ,
					{ 318 ,  {-0.02744330548506335 }} ,
					{ 319 ,  {-0.027362703250757417 }} ,
					{ 390 ,  {0.11700007941943069 }} ,
					{ 391 ,  {0.13033093113577232 }} ,
					{ 568 ,  {-0.02747008639133516 }} ,
					{ 1138 ,  {-0.027460886059678426 }} ,
					{ 2279 ,  {-0.027490283236355963 }} ,
					{ 4556 ,  {-0.0275229679660513 }} ,
					{ 9114 ,  {-0.027646070479121633 }} ,
					{ 9115 ,  {-0.027555448454081075 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_54 <= -1.3408228641265703 ) ? ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 70 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_56 <= 1.9702444426114003 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 568 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 1138 ) : ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 4556 ) : ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 9114 ) : ( 9115 ) ) ) ) ) : ( 2279 ) ) ) ) ) ) ) : ( 285 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_5 <= 0.8739877549375447 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_45 <= -0.11691300112702074 ) ? ( 76 ) : ( ( ( scaler_22 <= 0.708463064338002 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 308 ) : ( 309 ) ) ) : ( 155 ) ) ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 158 ) : ( ( ( scaler_54 <= -1.0000000180025095e-35 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_46 <= -1.1458211998872978 ) ? ( 10 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_8 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( 194 ) : ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( 390 ) : ( 391 ) ) ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 56 ) : ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_4
		
	
		namespace LGBM_Tree_0_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.04613377811820386 }} ,
					{ 10 ,  {-0.02734342395437805 }} ,
					{ 11 ,  {-0.02721618176664712 }} ,
					{ 12 ,  {0.024573918340810956 }} ,
					{ 19 ,  {0.09779597457747051 }} ,
					{ 26 ,  {-0.02744946593880243 }} ,
					{ 27 ,  {-0.02722118243639888 }} ,
					{ 30 ,  {-0.027163909755774963 }} ,
					{ 37 ,  {0.1187935541715254 }} ,
					{ 59 ,  {-0.027189832148578598 }} ,
					{ 72 ,  {0.11436960493093128 }} ,
					{ 125 ,  {-0.027226681465311077 }} ,
					{ 126 ,  {-0.027162174912383777 }} ,
					{ 147 ,  {0.11186225913153672 }} ,
					{ 224 ,  {-0.0272133636056024 }} ,
					{ 228 ,  {-0.027252669307021544 }} ,
					{ 229 ,  {-0.027151174805739076 }} ,
					{ 230 ,  {-0.027380380578125137 }} ,
					{ 232 ,  {-0.027288885255457834 }} ,
					{ 233 ,  {-0.02720316486068547 }} ,
					{ 249 ,  {-0.027247634967357565 }} ,
					{ 254 ,  {-0.027279707546774265 }} ,
					{ 255 ,  {-0.027204989685605932 }} ,
					{ 292 ,  {0.10923493676325594 }} ,
					{ 293 ,  {0.11058892073904228 }} ,
					{ 450 ,  {-0.027246866761448104 }} ,
					{ 451 ,  {-0.027365351383570647 }} ,
					{ 452 ,  {-0.027284518173616164 }} ,
					{ 454 ,  {-0.027329917146358684 }} ,
					{ 455 ,  {-0.02723351613795327 }} ,
					{ 462 ,  {-0.027296255674107286 }} ,
					{ 463 ,  {-0.0272214307322888 }} ,
					{ 468 ,  {-0.027238198650709495 }} ,
					{ 469 ,  {-0.02730863297925037 }} ,
					{ 470 ,  {-0.027228535403176997 }} ,
					{ 471 ,  {-0.027294169731152465 }} ,
					{ 496 ,  {-0.027371833256370045 }} ,
					{ 497 ,  {-0.02725458045834361 }} ,
					{ 906 ,  {-0.027447054140721044 }} ,
					{ 907 ,  {-0.027368816171366717 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( scaler_15 <= 1.0532512804072236 ) ? ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( 72 ) : ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 292 ) : ( 293 ) ) ) : ( 147 ) ) ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 12 ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 224 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 452 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 906 ) : ( 907 ) ) ) ) ) : ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 230 ) : ( ( ( scaler_61 <= -0.8251040864464135 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 232 ) : ( 233 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 30 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 496 ) : ( 497 ) ) ) : ( 249 ) ) ) : ( 125 ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_5
		
	
		namespace LGBM_Tree_1_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.02743515718074538 }} ,
					{ 13 ,  {0.0206652721389936 }} ,
					{ 15 ,  {0.03551893956124131 }} ,
					{ 18 ,  {0.11566297765045226 }} ,
					{ 19 ,  {0.06614623331690632 }} ,
					{ 20 ,  {-0.0006001332317709591 }} ,
					{ 22 ,  {0.03377522185616141 }} ,
					{ 24 ,  {0.05512335885843392 }} ,
					{ 28 ,  {-0.02772557576340673 }} ,
					{ 29 ,  {-0.027411306147242333 }} ,
					{ 46 ,  {-0.027452772052988874 }} ,
					{ 47 ,  {-0.027341055188692488 }} ,
					{ 50 ,  {0.08296836585551176 }} ,
					{ 87 ,  {-0.012478631620500412 }} ,
					{ 102 ,  {0.10806630992368596 }} ,
					{ 103 ,  {0.12209684462960346 }} ,
					{ 172 ,  {-0.027525067887601836 }} ,
					{ 173 ,  {-0.027409890933201522 }} ,
					{ 340 ,  {-0.027491198278957036 }} ,
					{ 343 ,  {-0.027324890456161755 }} ,
					{ 672 ,  {-0.027384313957422742 }} ,
					{ 676 ,  {-0.027434013429929856 }} ,
					{ 677 ,  {-0.027347142168676647 }} ,
					{ 679 ,  {-0.027517151358330924 }} ,
					{ 682 ,  {-0.027357204146436543 }} ,
					{ 684 ,  {-0.027385857429924124 }} ,
					{ 685 ,  {-0.027311163270007224 }} ,
					{ 1347 ,  {-0.027554050123196724 }} ,
					{ 1348 ,  {-0.027388023473641655 }} ,
					{ 1349 ,  {-0.027500841516001184 }} ,
					{ 1350 ,  {-0.027616190690557443 }} ,
					{ 1351 ,  {-0.027507536111008715 }} ,
					{ 1366 ,  {-0.027390973071557096 }} ,
					{ 1367 ,  {-0.02747449276528487 }} ,
					{ 2692 ,  {-0.027503640678714705 }} ,
					{ 2693 ,  {-0.02741965454192613 }} ,
					{ 2712 ,  {-0.027424276714105418 }} ,
					{ 2713 ,  {-0.027544177046749132 }} ,
					{ 2714 ,  {-0.027369538244357762 }} ,
					{ 2715 ,  {-0.02741509249508724 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 672 ) : ( ( ( scaler_45 <= 0.19120984640994193 ) ? ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 1348 ) : ( 1349 ) ) ) : ( ( ( scaler_55 <= -0.3735851870240589 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 2712 ) : ( 2713 ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 340 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 682 ) : ( ( ( scaler_55 <= -1.0364552765484578 ) ? ( 1366 ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_40 <= 1.5971838672777687 ) ? ( 684 ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_12 <= 0.5780681120845275 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 24 ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 50 ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_5
		
	
		namespace LGBM_Tree_2_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.09032900287022627 }} ,
					{ 14 ,  {0.0214139121129792 }} ,
					{ 16 ,  {0.0007998951649247716 }} ,
					{ 21 ,  {0.011868189078666725 }} ,
					{ 25 ,  {0.044682326512033854 }} ,
					{ 26 ,  {0.05383792630823642 }} ,
					{ 27 ,  {-0.027997384438051484 }} ,
					{ 31 ,  {-0.02795346138846071 }} ,
					{ 34 ,  {-0.02751018002565759 }} ,
					{ 40 ,  {-0.027527227449701486 }} ,
					{ 41 ,  {-0.027415325386886253 }} ,
					{ 46 ,  {-0.027472903589295935 }} ,
					{ 49 ,  {0.11823854866624889 }} ,
					{ 60 ,  {-0.02742698970096625 }} ,
					{ 70 ,  {-0.02743204543895519 }} ,
					{ 71 ,  {-0.02737233588359519 }} ,
					{ 88 ,  {-0.02751600185047813 }} ,
					{ 89 ,  {-0.027361519037656885 }} ,
					{ 95 ,  {-0.02741472119886404 }} ,
					{ 97 ,  {0.10317327593174495 }} ,
					{ 122 ,  {-0.027427374469981676 }} ,
					{ 123 ,  {-0.02757866023816849 }} ,
					{ 188 ,  {-0.02732161242136388 }} ,
					{ 189 ,  {-0.02738394412173802 }} ,
					{ 192 ,  {0.11427637259963702 }} ,
					{ 193 ,  {0.10863221978028295 }} ,
					{ 361 ,  {-0.027339228966014758 }} ,
					{ 362 ,  {-0.027430007648346272 }} ,
					{ 363 ,  {-0.02754891569241122 }} ,
					{ 364 ,  {-0.02745035467618865 }} ,
					{ 367 ,  {-0.027504096325614576 }} ,
					{ 720 ,  {-0.027409266769373403 }} ,
					{ 721 ,  {-0.027480189356985835 }} ,
					{ 731 ,  {-0.027433403023547062 }} ,
					{ 732 ,  {-0.02739439747454286 }} ,
					{ 733 ,  {-0.02747229113312389 }} ,
					{ 1461 ,  {-0.027491076127489075 }} ,
					{ 2921 ,  {-0.027516783316677413 }} ,
					{ 5840 ,  {-0.02757514737367669 }} ,
					{ 5841 ,  {-0.02766473073165278 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_4 <= 1.3565661365289492 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_62 <= -2.3230670362774934 ) ? ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 720 ) : ( 721 ) ) ) : ( 361 ) ) ) : ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 364 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_47 <= 0.91345632309554 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( 5840 ) : ( 5841 ) ) ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_37 <= -0.5640778118234917 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( 60 ) : ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_5
		
	
		namespace LGBM_Tree_3_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.07450180796891082 }} ,
					{ 10 ,  {0.01600110164285884 }} ,
					{ 16 ,  {0.11470811616516928 }} ,
					{ 17 ,  {0.1040835520863067 }} ,
					{ 23 ,  {0.0010269230289819675 }} ,
					{ 25 ,  {-0.02750652436166618 }} ,
					{ 26 ,  {0.018286917848477274 }} ,
					{ 28 ,  {0.038196329400850965 }} ,
					{ 29 ,  {-0.02763996910139767 }} ,
					{ 48 ,  {0.050686430106621876 }} ,
					{ 49 ,  {0.11455106611951903 }} ,
					{ 55 ,  {-0.012723502407297114 }} ,
					{ 88 ,  {-0.027517385748858023 }} ,
					{ 89 ,  {-0.027611016762761342 }} ,
					{ 90 ,  {-0.027356145370530934 }} ,
					{ 91 ,  {-0.027467060932223022 }} ,
					{ 109 ,  {-0.02797878113882953 }} ,
					{ 121 ,  {-0.027308101549212822 }} ,
					{ 124 ,  {-0.012137083753551124 }} ,
					{ 126 ,  {0.04737668131772216 }} ,
					{ 127 ,  {-0.0277299182261733 }} ,
					{ 216 ,  {-0.027524313633123427 }} ,
					{ 217 ,  {-0.027355514229335173 }} ,
					{ 241 ,  {-0.02744320292035249 }} ,
					{ 244 ,  {-0.027330052348168328 }} ,
					{ 246 ,  {-0.02734129591877237 }} ,
					{ 250 ,  {-0.027609997432556956 }} ,
					{ 480 ,  {-0.0273125530201308 }} ,
					{ 481 ,  {-0.027390994944433523 }} ,
					{ 494 ,  {-0.027370250054225054 }} ,
					{ 495 ,  {-0.027460601859483333 }} ,
					{ 503 ,  {-0.027503137824762786 }} ,
					{ 980 ,  {-0.027449078900129095 }} ,
					{ 981 ,  {-0.027533966560068898 }} ,
					{ 983 ,  {-0.027381595002911614 }} ,
					{ 1004 ,  {-0.02743060520819912 }} ,
					{ 1005 ,  {-0.027330914858641794 }} ,
					{ 1964 ,  {-0.027506431597810306 }} ,
					{ 3930 ,  {-0.02739231545152543 }} ,
					{ 3931 ,  {-0.02748259503249019 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 10 ) : ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 90 ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 26 ) : ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_32 <= 1.0000000180025095e-35 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 244 ) : ( ( ( scaler_47 <= -0.3117529780602753 ) ? ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( 980 ) : ( 981 ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 1964 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( 3930 ) : ( 3931 ) ) ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 246 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 124 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( 250 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 1004 ) : ( 1005 ) ) ) : ( 503 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_5
		
	
		namespace LGBM_Tree_4_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.04290422662412653 }} ,
					{ 12 ,  {0.10972682995585509 }} ,
					{ 16 ,  {-0.012993887299745363 }} ,
					{ 20 ,  {-0.008749614853347795 }} ,
					{ 22 ,  {0.0458990061427175 }} ,
					{ 23 ,  {-0.027775729080820478 }} ,
					{ 26 ,  {0.10616712576455462 }} ,
					{ 27 ,  {0.10755338943466825 }} ,
					{ 35 ,  {-0.027635734680593157 }} ,
					{ 37 ,  {-0.006358070228371338 }} ,
					{ 38 ,  {0.006987325060911974 }} ,
					{ 39 ,  {-0.02829681433391153 }} ,
					{ 43 ,  {-0.018854478309839426 }} ,
					{ 69 ,  {-0.02742763308810367 }} ,
					{ 72 ,  {0.09084858812667816 }} ,
					{ 73 ,  {0.12384015454688313 }} ,
					{ 136 ,  {-0.027567462620269847 }} ,
					{ 137 ,  {-0.027465190399958886 }} ,
					{ 341 ,  {-0.027394512932434147 }} ,
					{ 342 ,  {-0.02747285605584577 }} ,
					{ 343 ,  {-0.027547649852420017 }} ,
					{ 672 ,  {-0.02758713957851703 }} ,
					{ 673 ,  {-0.027476471711866707 }} ,
					{ 674 ,  {-0.02750348960876009 }} ,
					{ 676 ,  {-0.027619609716967444 }} ,
					{ 681 ,  {-0.027421537575141566 }} ,
					{ 1350 ,  {-0.027359045832908453 }} ,
					{ 1351 ,  {-0.027426370982584103 }} ,
					{ 1355 ,  {-0.02760849307261944 }} ,
					{ 1357 ,  {-0.027441713920243305 }} ,
					{ 1358 ,  {-0.02757890195973818 }} ,
					{ 1359 ,  {-0.027459662623442474 }} ,
					{ 1360 ,  {-0.027456625468122633 }} ,
					{ 1361 ,  {-0.027504053110647183 }} ,
					{ 2709 ,  {-0.027565036244056353 }} ,
					{ 2712 ,  {-0.027501572826094875 }} ,
					{ 2713 ,  {-0.02743771179619995 }} ,
					{ 5417 ,  {-0.0275367550305904 }} ,
					{ 10832 ,  {-0.027536968771939088 }} ,
					{ 10833 ,  {-0.02745246582378757 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 16 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_22 <= -1.0000000180025095e-35 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 674 ) : ( ( ( scaler_27 <= -0.6272616588329828 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 676 ) : ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_63 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= 0.13130100425610336 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 10832 ) : ( 10833 ) ) ) : ( 5417 ) ) ) : ( 2709 ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( ( ( scaler_39 <= 0.8005891397504875 ) ? ( 2712 ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 1360 ) : ( 1361 ) ) ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 12 ) : ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_5
		
	
		namespace LGBM_Tree_5_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.012736852765484514 }} ,
					{ 11 ,  {-0.018871274066826843 }} ,
					{ 15 ,  {0.04952186197397053 }} ,
					{ 19 ,  {-0.014296079225660636 }} ,
					{ 20 ,  {0.08874881727096132 }} ,
					{ 24 ,  {0.0012276827770199476 }} ,
					{ 28 ,  {-0.027459131445506182 }} ,
					{ 36 ,  {-0.0277699187873096 }} ,
					{ 43 ,  {0.09997393605573979 }} ,
					{ 50 ,  {-0.027320938462355893 }} ,
					{ 51 ,  {-0.02743304322178369 }} ,
					{ 53 ,  {-0.027445340325719794 }} ,
					{ 55 ,  {-0.02762816612128202 }} ,
					{ 58 ,  {-0.02729788290376103 }} ,
					{ 74 ,  {-0.027520612688304514 }} ,
					{ 84 ,  {0.1267478810612193 }} ,
					{ 108 ,  {-0.02744621643804427 }} ,
					{ 109 ,  {-0.02734488802651386 }} ,
					{ 118 ,  {-0.027353187319130307 }} ,
					{ 119 ,  {-0.027419955052007672 }} ,
					{ 150 ,  {-0.027417398232760723 }} ,
					{ 170 ,  {0.11712499517852831 }} ,
					{ 208 ,  {-0.027420041629345804 }} ,
					{ 302 ,  {-0.02733330336757365 }} ,
					{ 303 ,  {-0.027267421454264147 }} ,
					{ 342 ,  {0.10588756635850421 }} ,
					{ 343 ,  {0.11127316544785533 }} ,
					{ 418 ,  {-0.027286070373583927 }} ,
					{ 419 ,  {-0.027339595157273695 }} ,
					{ 420 ,  {-0.02747140585767498 }} ,
					{ 844 ,  {-0.027440904264118066 }} ,
					{ 845 ,  {-0.027333756442117774 }} ,
					{ 846 ,  {-0.027334176774250263 }} ,
					{ 847 ,  {-0.027227370987867528 }} ,
					{ 1684 ,  {-0.02737800492172158 }} ,
					{ 1685 ,  {-0.027268193305291018 }} ,
					{ 1687 ,  {-0.027466350174158022 }} ,
					{ 3373 ,  {-0.027345516252972643 }} ,
					{ 6744 ,  {-0.027457097760822786 }} ,
					{ 6745 ,  {-0.02737533476631021 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 36 ) : ( ( ( scaler_62 <= -1.0000000180025095e-35 ) ? ( 74 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 150 ) : ( ( ( scaler_51 <= 0.44897628365603276 ) ? ( 302 ) : ( 303 ) ) ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( 20 ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( 84 ) : ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( 170 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_27 <= 0.9560424053563663 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 208 ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 420 ) : ( ( ( scaler_53 <= -0.961532671523328 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 1684 ) : ( 1685 ) ) ) : ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 6744 ) : ( 6745 ) ) ) : ( 3373 ) ) ) : ( 1687 ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_60 <= -0.3897292760534952 ) ? ( 844 ) : ( 845 ) ) ) : ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( 846 ) : ( 847 ) ) ) ) ) ) ) ) ) : ( 53 ) ) ) : ( ( ( scaler_7 <= 0.8256909793536391 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( 28 ) : ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 58 ) : ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_5
		
	
		namespace LGBM_Tree_6_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.009635205656784808 }} ,
					{ 9 ,  {0.011998909419477228 }} ,
					{ 10 ,  {-0.027769157871629254 }} ,
					{ 15 ,  {-0.012203578235365808 }} ,
					{ 16 ,  {-0.027640056872912874 }} ,
					{ 23 ,  {0.021723419318256294 }} ,
					{ 44 ,  {0.08588961014277463 }} ,
					{ 56 ,  {-0.02739867495011178 }} ,
					{ 57 ,  {-0.012158059508992836 }} ,
					{ 68 ,  {-0.027442782919485532 }} ,
					{ 69 ,  {-0.02728959431427564 }} ,
					{ 70 ,  {-0.027210756926406926 }} ,
					{ 71 ,  {-0.027279671632333965 }} ,
					{ 90 ,  {0.12484124618235891 }} ,
					{ 119 ,  {-0.027243482748776738 }} ,
					{ 182 ,  {0.11482974107867566 }} ,
					{ 232 ,  {-0.02726576123900178 }} ,
					{ 236 ,  {-0.027264953521450627 }} ,
					{ 366 ,  {0.11151226233840401 }} ,
					{ 471 ,  {-0.027294333760166867 }} ,
					{ 474 ,  {-0.027327258082402314 }} ,
					{ 475 ,  {-0.02727320689298738 }} ,
					{ 734 ,  {0.11064448796638676 }} ,
					{ 735 ,  {0.10864226566077062 }} ,
					{ 932 ,  {-0.027471336884874506 }} ,
					{ 933 ,  {-0.027352582005933088 }} ,
					{ 934 ,  {-0.027260246575334792 }} ,
					{ 936 ,  {-0.027367393186076568 }} ,
					{ 938 ,  {-0.027394916484308637 }} ,
					{ 939 ,  {-0.027273424271529845 }} ,
					{ 941 ,  {-0.027313775661005398 }} ,
					{ 1870 ,  {-0.027315987439216732 }} ,
					{ 1871 ,  {-0.027387925610376243 }} ,
					{ 1881 ,  {-0.027315867865872895 }} ,
					{ 3748 ,  {-0.027344078994302495 }} ,
					{ 3749 ,  {-0.02743626471735047 }} ,
					{ 3750 ,  {-0.02754026408831599 }} ,
					{ 3751 ,  {-0.02745023358441967 }} ,
					{ 3760 ,  {-0.027467247531800482 }} ,
					{ 3761 ,  {-0.02737244548895968 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 16 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 44 ) : ( ( ( scaler_48 <= 0.709083439984587 ) ? ( 90 ) : ( ( ( scaler_36 <= 1.0873643855256774 ) ? ( 182 ) : ( ( ( scaler_5 <= 1.0000000180025095e-35 ) ? ( 366 ) : ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 232 ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_52 <= -1.056030338233269 ) ? ( 934 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 936 ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_21 <= -0.6175214017080987 ) ? ( 3748 ) : ( 3749 ) ) ) : ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 3750 ) : ( 3751 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_12 <= 0.9465648968535042 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 3760 ) : ( 3761 ) ) ) : ( 1881 ) ) ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 236 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_5
		
	
		namespace LGBM_Tree_7_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03267885892274986 }} ,
					{ 9 ,  {0.011540898706796468 }} ,
					{ 16 ,  {0.04466785841959842 }} ,
					{ 20 ,  {0.09942609634564609 }} ,
					{ 21 ,  {-0.0030306831633482374 }} ,
					{ 23 ,  {-0.013167238571544414 }} ,
					{ 25 ,  {0.027972855102111466 }} ,
					{ 34 ,  {0.12424382521391292 }} ,
					{ 44 ,  {-0.02746139600644002 }} ,
					{ 45 ,  {-0.02793114458673403 }} ,
					{ 48 ,  {-0.027313638116630345 }} ,
					{ 49 ,  {-0.027564058667566133 }} ,
					{ 54 ,  {-0.002832200964123918 }} ,
					{ 70 ,  {0.11416207401453954 }} ,
					{ 110 ,  {-0.027285890103962696 }} ,
					{ 111 ,  {-0.02742197396311575 }} ,
					{ 142 ,  {0.11211383325769264 }} ,
					{ 143 ,  {0.10986195533063228 }} ,
					{ 210 ,  {-0.0272382356976067 }} ,
					{ 212 ,  {-0.02723897025832038 }} ,
					{ 214 ,  {-0.027184310390094193 }} ,
					{ 215 ,  {-0.027249086932477507 }} ,
					{ 418 ,  {-0.027218850535958163 }} ,
					{ 419 ,  {-0.027297589788206712 }} ,
					{ 422 ,  {-0.02725791837821788 }} ,
					{ 423 ,  {-0.027394570605176312 }} ,
					{ 426 ,  {-0.027254422282682763 }} ,
					{ 834 ,  {-0.02729602875380134 }} ,
					{ 854 ,  {-0.02726925391910323 }} ,
					{ 1666 ,  {-0.027321436947321587 }} ,
					{ 1667 ,  {-0.027248451880537112 }} ,
					{ 1670 ,  {-0.02747558837378965 }} ,
					{ 1671 ,  {-0.027385491242517192 }} ,
					{ 1710 ,  {-0.027299159908550554 }} ,
					{ 1711 ,  {-0.027400181882840175 }} ,
					{ 3329 ,  {-0.027417473359005053 }} ,
					{ 3330 ,  {-0.027275490411926773 }} ,
					{ 3331 ,  {-0.02735888463381518 }} ,
					{ 6656 ,  {-0.027309624270857792 }} ,
					{ 6657 ,  {-0.027396263691554953 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_39 <= -0.9051660590358572 ) ? ( 16 ) : ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( 34 ) : ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 70 ) : ( ( ( scaler_36 <= 0.6139861612387604 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_28 <= 0.8623826931333223 ) ? ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 6656 ) : ( 6657 ) ) ) : ( 3329 ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 3330 ) : ( 3331 ) ) ) ) ) : ( ( ( scaler_36 <= 1.0000000180025095e-35 ) ? ( 1666 ) : ( 1667 ) ) ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 834 ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( 1670 ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 210 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 212 ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 426 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 854 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 1710 ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 54 ) : ( ( ( scaler_13 <= -0.3900656635129606 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_5
		
	
		namespace LGBM_Tree_8_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.029700518505886765 }} ,
					{ 18 ,  {-0.010263449712203747 }} ,
					{ 21 ,  {0.025787200836006042 }} ,
					{ 27 ,  {-0.027238639474148587 }} ,
					{ 29 ,  {-0.011909203195770305 }} ,
					{ 31 ,  {0.07730881337920241 }} ,
					{ 32 ,  {-0.027303182859907515 }} ,
					{ 33 ,  {-0.02716925997067626 }} ,
					{ 41 ,  {-0.01274258979551355 }} ,
					{ 44 ,  {0.018738850143085885 }} ,
					{ 46 ,  {-0.027441471311081347 }} ,
					{ 47 ,  {0.020442251695157024 }} ,
					{ 48 ,  {-0.027236955611257885 }} ,
					{ 49 ,  {-0.02716222680110207 }} ,
					{ 50 ,  {-0.02732902353854241 }} ,
					{ 52 ,  {-0.02717287742449634 }} ,
					{ 53 ,  {-0.02711542996118382 }} ,
					{ 56 ,  {-0.027351757440261013 }} ,
					{ 60 ,  {-0.027680516532885797 }} ,
					{ 61 ,  {-0.027165561929452388 }} ,
					{ 76 ,  {-0.0271719634944306 }} ,
					{ 77 ,  {-0.02723461533109943 }} ,
					{ 78 ,  {-0.027240789348009466 }} ,
					{ 79 ,  {-0.027354547501427653 }} ,
					{ 81 ,  {-0.02776712741459607 }} ,
					{ 90 ,  {0.039402452899889966 }} ,
					{ 102 ,  {-0.027166613911827293 }} ,
					{ 114 ,  {-0.027255557831723894 }} ,
					{ 115 ,  {-0.027180357826570946 }} ,
					{ 161 ,  {-0.02751979933209231 }} ,
					{ 183 ,  {0.09024408131473578 }} ,
					{ 207 ,  {-0.027205174476341895 }} ,
					{ 320 ,  {-0.027215733300801292 }} ,
					{ 321 ,  {-0.027345218319812476 }} ,
					{ 365 ,  {0.12947116558349048 }} ,
					{ 412 ,  {-0.02733046300641015 }} ,
					{ 413 ,  {-0.02721121523676899 }} ,
					{ 729 ,  {0.10932717844550002 }} ,
					{ 1456 ,  {0.12429196708268848 }} ,
					{ 1457 ,  {0.11748689734034146 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_7 <= 1.531899111088587 ) ? ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( ( ( scaler_27 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 320 ) : ( 321 ) ) ) : ( 161 ) ) ) : ( 81 ) ) ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 44 ) : ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 90 ) : ( ( ( scaler_7 <= 0.8256909793536391 ) ? ( ( ( scaler_36 <= 0.6139861612387604 ) ? ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 1456 ) : ( 1457 ) ) ) : ( 729 ) ) ) : ( 365 ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_5
		
	
		namespace LGBM_Tree_9_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.06858829826938388 }} ,
					{ 13 ,  {-0.019183824276555572 }} ,
					{ 15 ,  {0.00590420167505921 }} ,
					{ 22 ,  {-0.027688238321899507 }} ,
					{ 23 ,  {-0.027438294544436706 }} ,
					{ 25 ,  {0.006107069874281688 }} ,
					{ 32 ,  {0.04888214316263004 }} ,
					{ 33 ,  {-0.02769647146826131 }} ,
					{ 34 ,  {0.008314677122962516 }} ,
					{ 36 ,  {-0.01258483402473104 }} ,
					{ 37 ,  {-0.027550983685427646 }} ,
					{ 49 ,  {0.06805168298456563 }} ,
					{ 56 ,  {-0.027363209575111947 }} ,
					{ 58 ,  {-0.027427232696900603 }} ,
					{ 59 ,  {-0.027545875251061933 }} ,
					{ 76 ,  {-0.027367881762601853 }} ,
					{ 96 ,  {0.07822745237038743 }} ,
					{ 114 ,  {-0.027499153713446602 }} ,
					{ 115 ,  {-0.027364074642000052 }} ,
					{ 142 ,  {0.014450723025519835 }} ,
					{ 143 ,  {-0.02764234889987989 }} ,
					{ 155 ,  {-0.027415019667407038 }} ,
					{ 157 ,  {-0.027418811719009215 }} ,
					{ 158 ,  {-0.027374303658761385 }} ,
					{ 159 ,  {-0.027308876697052384 }} ,
					{ 194 ,  {0.12859963679094694 }} ,
					{ 280 ,  {-0.02748474872078854 }} ,
					{ 281 ,  {-0.0005115095111246353 }} ,
					{ 283 ,  {-0.027611528400864723 }} ,
					{ 308 ,  {-0.027591148597447303 }} ,
					{ 309 ,  {-0.027465890008139916 }} ,
					{ 312 ,  {-0.02729659686123565 }} ,
					{ 313 ,  {-0.027380600022506953 }} ,
					{ 390 ,  {0.09978834460033559 }} ,
					{ 391 ,  {0.1136532532564444 }} ,
					{ 565 ,  {-0.027581348222905817 }} ,
					{ 2256 ,  {-0.027412253772311792 }} ,
					{ 2257 ,  {-0.02731563622319649 }} ,
					{ 2258 ,  {-0.027446980361934433 }} ,
					{ 2259 ,  {-0.027606213045834677 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_54 <= -1.3408228641265703 ) ? ( ( ( scaler_38 <= 0.37679441759687454 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( scaler_56 <= 1.5665167660176842 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( ( ( scaler_21 <= 1.2696049002348533 ) ? ( 2256 ) : ( 2257 ) ) ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 2258 ) : ( 2259 ) ) ) ) ) : ( 565 ) ) ) : ( 283 ) ) ) ) ) : ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_45 <= -0.11691300112702074 ) ? ( 76 ) : ( ( ( scaler_22 <= 0.708463064338002 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 308 ) : ( 309 ) ) ) : ( 155 ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 312 ) : ( 313 ) ) ) : ( 157 ) ) ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_44 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.6021878438436793 ) ? ( ( ( scaler_47 <= 1.263516123425773 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 96 ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 194 ) : ( ( ( scaler_14 <= 1.0000000180025095e-35 ) ? ( 390 ) : ( 391 ) ) ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 56 ) : ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_5
		
	
		namespace LGBM_Tree_0_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.04177256602690929 }} ,
					{ 10 ,  {-0.027286758288497012 }} ,
					{ 11 ,  {-0.0271380100554085 }} ,
					{ 13 ,  {0.0243370843372122 }} ,
					{ 16 ,  {0.08820711823682187 }} ,
					{ 24 ,  {-0.02719761982065985 }} ,
					{ 25 ,  {-0.027511116783533542 }} ,
					{ 30 ,  {-0.027078589463499742 }} ,
					{ 34 ,  {0.10946103401320438 }} ,
					{ 58 ,  {-0.02713439437506896 }} ,
					{ 70 ,  {0.09628729453844088 }} ,
					{ 124 ,  {-0.0271620970353825 }} ,
					{ 126 ,  {-0.027079297727272564 }} ,
					{ 143 ,  {0.10357163116403123 }} ,
					{ 224 ,  {-0.02713104188682347 }} ,
					{ 228 ,  {-0.027173756801650753 }} ,
					{ 229 ,  {-0.027063879269196286 }} ,
					{ 230 ,  {-0.02733171836190519 }} ,
					{ 236 ,  {-0.0272194536953677 }} ,
					{ 237 ,  {-0.02711459592158931 }} ,
					{ 250 ,  {-0.02716596635036414 }} ,
					{ 251 ,  {-0.027285744253257416 }} ,
					{ 254 ,  {-0.02721019929773882 }} ,
					{ 255 ,  {-0.027124414771456846 }} ,
					{ 284 ,  {0.10246610757491043 }} ,
					{ 285 ,  {0.09904734812490923 }} ,
					{ 450 ,  {-0.027170476124140714 }} ,
					{ 451 ,  {-0.027312449970099614 }} ,
					{ 452 ,  {-0.0272152883634745 }} ,
					{ 454 ,  {-0.027266521335232902 }} ,
					{ 455 ,  {-0.02715436866878218 }} ,
					{ 462 ,  {-0.027232568498767203 }} ,
					{ 463 ,  {-0.02714456001539405 }} ,
					{ 477 ,  {-0.02728962575339852 }} ,
					{ 478 ,  {-0.027152483941555613 }} ,
					{ 479 ,  {-0.027216209635680347 }} ,
					{ 906 ,  {-0.027410847745382022 }} ,
					{ 907 ,  {-0.02731371337991049 }} ,
					{ 952 ,  {-0.02725412260565681 }} ,
					{ 953 ,  {-0.02714611330217362 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( 16 ) : ( ( ( scaler_63 <= -0.88833030263715 ) ? ( 34 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( 70 ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_47 <= 0.21333672243507412 ) ? ( 284 ) : ( 285 ) ) ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 224 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 452 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 906 ) : ( 907 ) ) ) ) ) : ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 230 ) : ( ( ( scaler_61 <= -0.8251040864464135 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 58 ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 952 ) : ( 953 ) ) ) : ( 477 ) ) ) : ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 30 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 124 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_6
		
	
		namespace LGBM_Tree_1_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.027353234063045725 }} ,
					{ 13 ,  {0.002016943940753413 }} ,
					{ 15 ,  {0.029253422281941402 }} ,
					{ 18 ,  {0.10943147841203818 }} ,
					{ 19 ,  {0.0659764569990731 }} ,
					{ 20 ,  {-0.0006220665719869766 }} ,
					{ 22 ,  {0.03202371021340574 }} ,
					{ 25 ,  {0.05239087637925288 }} ,
					{ 28 ,  {-0.027561118306109675 }} ,
					{ 29 ,  {-0.028655997861681815 }} ,
					{ 46 ,  {-0.027282468709306208 }} ,
					{ 47 ,  {-0.027408594034860234 }} ,
					{ 48 ,  {0.11121747326247045 }} ,
					{ 87 ,  {-0.012074644162842645 }} ,
					{ 98 ,  {0.10335544052836042 }} ,
					{ 99 ,  {0.08011337417218115 }} ,
					{ 172 ,  {-0.027333781777002044 }} ,
					{ 173 ,  {-0.027463074867621364 }} ,
					{ 340 ,  {-0.027423301074968653 }} ,
					{ 343 ,  {-0.02721764064850948 }} ,
					{ 672 ,  {-0.0272732432886174 }} ,
					{ 674 ,  {-0.027382086384907623 }} ,
					{ 676 ,  {-0.02738058427439706 }} ,
					{ 677 ,  {-0.027263594607965427 }} ,
					{ 679 ,  {-0.02746503928951763 }} ,
					{ 682 ,  {-0.027338348576686957 }} ,
					{ 683 ,  {-0.02725792397082883 }} ,
					{ 685 ,  {-0.027273151372640827 }} ,
					{ 1347 ,  {-0.027351137733428635 }} ,
					{ 1350 ,  {-0.02756283464060982 }} ,
					{ 1351 ,  {-0.027459690728637798 }} ,
					{ 1356 ,  {-0.027435881127451267 }} ,
					{ 1368 ,  {-0.027290465402580424 }} ,
					{ 1369 ,  {-0.02738887852038618 }} ,
					{ 2692 ,  {-0.027383450528147286 }} ,
					{ 2693 ,  {-0.027549343977840274 }} ,
					{ 2715 ,  {-0.02741246641751744 }} ,
					{ 5429 ,  {-0.027397739143845707 }} ,
					{ 10856 ,  {-0.027338238396888783 }} ,
					{ 10857 ,  {-0.027293800664733366 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( 8 ) : ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 20 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 672 ) : ( ( ( scaler_19 <= 0.8363273182017931 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 674 ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 1356 ) : ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 10856 ) : ( 10857 ) ) ) : ( 5429 ) ) ) : ( 2715 ) ) ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 340 ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( 1368 ) : ( 1369 ) ) ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 22 ) : ( ( ( scaler_15 <= -0.9283389306387814 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( ( ( scaler_44 <= 1.0000000180025095e-35 ) ? ( 48 ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_6
		
	
		namespace LGBM_Tree_2_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.08220030064136197 }} ,
					{ 14 ,  {0.020597906852965288 }} ,
					{ 16 ,  {0.000825837061197678 }} ,
					{ 20 ,  {0.011958016019628063 }} ,
					{ 21 ,  {-0.0275681441966527 }} ,
					{ 25 ,  {0.0417033363885214 }} ,
					{ 26 ,  {0.050350560267383854 }} ,
					{ 27 ,  {-0.027885661704018662 }} ,
					{ 31 ,  {-0.027857605132175736 }} ,
					{ 34 ,  {-0.027448319261424887 }} ,
					{ 46 ,  {-0.027398544243191006 }} ,
					{ 61 ,  {-0.027333202970862083 }} ,
					{ 71 ,  {-0.027283797001882368 }} ,
					{ 88 ,  {-0.027447337318873333 }} ,
					{ 89 ,  {-0.02727298847670699 }} ,
					{ 94 ,  {-0.027221764939209282 }} ,
					{ 96 ,  {0.09913448312687952 }} ,
					{ 97 ,  {0.0925984462606018 }} ,
					{ 98 ,  {0.09929795059835447 }} ,
					{ 99 ,  {0.10858187092092697 }} ,
					{ 120 ,  {-0.027329419075530756 }} ,
					{ 121 ,  {-0.027520109102192592 }} ,
					{ 140 ,  {-0.02732323822982153 }} ,
					{ 141 ,  {-0.027387831953950177 }} ,
					{ 191 ,  {-0.027249313980334602 }} ,
					{ 361 ,  {-0.027242765183078117 }} ,
					{ 362 ,  {-0.02734600685946112 }} ,
					{ 363 ,  {-0.027491621626374085 }} ,
					{ 364 ,  {-0.027378126300171158 }} ,
					{ 366 ,  {-0.027479415960807687 }} ,
					{ 380 ,  {-0.027330548851240255 }} ,
					{ 381 ,  {-0.02728075751217734 }} ,
					{ 720 ,  {-0.027323844480862947 }} ,
					{ 721 ,  {-0.027405586847733 }} ,
					{ 731 ,  {-0.02734355725158923 }} ,
					{ 734 ,  {-0.027334019408803062 }} ,
					{ 735 ,  {-0.027411245111648774 }} ,
					{ 1461 ,  {-0.02743122651857402 }} ,
					{ 2920 ,  {-0.02751509412155266 }} ,
					{ 2921 ,  {-0.02762040756570769 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_4 <= 1.3565661365289492 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 720 ) : ( 721 ) ) ) : ( 361 ) ) ) : ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= -1.100099575769813 ) ? ( 364 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_47 <= 0.91345632309554 ) ? ( ( ( scaler_36 <= -0.6483557701930179 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 366 ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 94 ) : ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 380 ) : ( 381 ) ) ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_37 <= -0.5640778118234917 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_6
		
	
		namespace LGBM_Tree_3_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.020434100360088404 }} ,
					{ 12 ,  {0.03722537289953754 }} ,
					{ 13 ,  {-0.02767918946695629 }} ,
					{ 16 ,  {0.01684113759043603 }} ,
					{ 20 ,  {-0.01947434746468464 }} ,
					{ 21 ,  {0.0723523569306756 }} ,
					{ 22 ,  {0.018413342909354 }} ,
					{ 34 ,  {0.07587286218493892 }} ,
					{ 47 ,  {-0.02786670474740928 }} ,
					{ 57 ,  {-0.027221908796398686 }} ,
					{ 60 ,  {-0.011809100720496221 }} ,
					{ 62 ,  {-0.02759027140203668 }} ,
					{ 63 ,  {0.045980355054464045 }} ,
					{ 70 ,  {0.11045749383706492 }} ,
					{ 93 ,  {-0.02730467488056972 }} ,
					{ 113 ,  {-0.02737845018878578 }} ,
					{ 122 ,  {-0.02752471521884943 }} ,
					{ 142 ,  {0.09794013371384996 }} ,
					{ 143 ,  {0.10678465425634243 }} ,
					{ 224 ,  {-0.027227364157788893 }} ,
					{ 225 ,  {-0.02731127819652539 }} ,
					{ 234 ,  {-0.02724188377149314 }} ,
					{ 236 ,  {-0.02729501238306778 }} ,
					{ 237 ,  {-0.027240683782756445 }} ,
					{ 238 ,  {-0.02728439385725442 }} ,
					{ 239 ,  {-0.027398312141827752 }} ,
					{ 247 ,  {-0.02725391408061464 }} ,
					{ 368 ,  {-0.027475049135181263 }} ,
					{ 369 ,  {-0.02726212795391868 }} ,
					{ 370 ,  {-0.02756541775143169 }} ,
					{ 371 ,  {-0.027415687888956215 }} ,
					{ 464 ,  {-0.02740264660674656 }} ,
					{ 465 ,  {-0.02730735487285681 }} ,
					{ 466 ,  {-0.02750312585272692 }} ,
					{ 470 ,  {-0.02742048281572574 }} ,
					{ 471 ,  {-0.027261635732832093 }} ,
					{ 492 ,  {-0.027344228224051217 }} ,
					{ 493 ,  {-0.027458085724142284 }} ,
					{ 934 ,  {-0.027322824363223554 }} ,
					{ 935 ,  {-0.02744721165055516 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 34 ) : ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 70 ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 466 ) : ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 234 ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 60 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( 122 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 492 ) : ( 493 ) ) ) : ( 247 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_6
		
	
		namespace LGBM_Tree_4_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {0.0213083512726226 }} ,
					{ 14 ,  {0.07449873203952051 }} ,
					{ 16 ,  {-0.01265667996477475 }} ,
					{ 20 ,  {-0.00847117467916243 }} ,
					{ 22 ,  {0.04512622803831309 }} ,
					{ 23 ,  {-0.027760983139997777 }} ,
					{ 31 ,  {0.10575076406130118 }} ,
					{ 35 ,  {-0.027579371240599233 }} ,
					{ 37 ,  {0.0005373478230469365 }} ,
					{ 38 ,  {0.006881925758174874 }} ,
					{ 39 ,  {-0.028189130255542594 }} ,
					{ 43 ,  {-0.018656638987854204 }} ,
					{ 60 ,  {0.09324633047946511 }} ,
					{ 61 ,  {0.09832910076448564 }} ,
					{ 69 ,  {-0.027340354307563854 }} ,
					{ 72 ,  {0.11013504114220429 }} ,
					{ 73 ,  {0.08146516266140963 }} ,
					{ 136 ,  {-0.027498556963208146 }} ,
					{ 137 ,  {-0.027378697656843837 }} ,
					{ 342 ,  {-0.027387278671835144 }} ,
					{ 343 ,  {-0.027475247623236193 }} ,
					{ 672 ,  {-0.027393065884294104 }} ,
					{ 673 ,  {-0.027522145841095497 }} ,
					{ 674 ,  {-0.027423715540630247 }} ,
					{ 675 ,  {-0.02732012454208592 }} ,
					{ 676 ,  {-0.02755898289484674 }} ,
					{ 680 ,  {-0.02736127298575501 }} ,
					{ 681 ,  {-0.027454036123696623 }} ,
					{ 682 ,  {-0.027371659226353286 }} ,
					{ 683 ,  {-0.02731771697154748 }} ,
					{ 1355 ,  {-0.02755051223984588 }} ,
					{ 1357 ,  {-0.02735248506470829 }} ,
					{ 1358 ,  {-0.027509907456254076 }} ,
					{ 1359 ,  {-0.02737526345727931 }} ,
					{ 2709 ,  {-0.02749692141016262 }} ,
					{ 2712 ,  {-0.027385042113387922 }} ,
					{ 2713 ,  {-0.027463322654398405 }} ,
					{ 5417 ,  {-0.02746507626073895 }} ,
					{ 10832 ,  {-0.027466136355295823 }} ,
					{ 10833 ,  {-0.02736294989276263 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 16 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_38 <= -0.6370053853428206 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 676 ) : ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_63 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= 0.13130100425610336 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 10832 ) : ( 10833 ) ) ) : ( 5417 ) ) ) : ( 2709 ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( 2712 ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( 680 ) : ( 681 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( 6 ) : ( ( ( scaler_46 <= 0.9200076699765841 ) ? ( 14 ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_6
		
	
		namespace LGBM_Tree_5_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.01219403106112937 }} ,
					{ 11 ,  {-0.018606797338038893 }} ,
					{ 15 ,  {0.04658932419282461 }} ,
					{ 19 ,  {-0.014023329272961751 }} ,
					{ 24 ,  {0.001331160290220495 }} ,
					{ 28 ,  {-0.0275807488554372 }} ,
					{ 36 ,  {-0.027683146123945096 }} ,
					{ 40 ,  {0.09839793679769916 }} ,
					{ 41 ,  {0.07294107696379225 }} ,
					{ 42 ,  {0.11050117257491508 }} ,
					{ 50 ,  {-0.027234091403823248 }} ,
					{ 55 ,  {-0.02757232695355154 }} ,
					{ 58 ,  {-0.027297926759189097 }} ,
					{ 59 ,  {-0.027222096655675817 }} ,
					{ 75 ,  {-0.02724641404405704 }} ,
					{ 86 ,  {0.10611540111359377 }} ,
					{ 102 ,  {-0.027408363872847605 }} ,
					{ 103 ,  {-0.027288844902058434 }} ,
					{ 104 ,  {-0.027360480924372117 }} ,
					{ 105 ,  {-0.027215922798014786 }} ,
					{ 108 ,  {-0.02738524452349844 }} ,
					{ 109 ,  {-0.02726315222363106 }} ,
					{ 148 ,  {-0.027323876226303667 }} ,
					{ 149 ,  {-0.02747025464062794 }} ,
					{ 174 ,  {0.09320366558709575 }} ,
					{ 175 ,  {0.09981016575867607 }} ,
					{ 215 ,  {-0.027350520839141662 }} ,
					{ 428 ,  {-0.027308441539814626 }} ,
					{ 429 ,  {-0.027208966047099853 }} ,
					{ 848 ,  {-0.0275067158202526 }} ,
					{ 850 ,  {-0.02736329468436199 }} ,
					{ 851 ,  {-0.02725101502805273 }} ,
					{ 853 ,  {-0.027193783013403736 }} ,
					{ 854 ,  {-0.027278381214862563 }} ,
					{ 855 ,  {-0.027392838382772212 }} ,
					{ 1698 ,  {-0.02731129075555184 }} ,
					{ 1699 ,  {-0.02741026513084864 }} ,
					{ 1705 ,  {-0.027245887401018055 }} ,
					{ 3408 ,  {-0.027260766480038525 }} ,
					{ 3409 ,  {-0.02735662554786819 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 36 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_60 <= 0.597127058200025 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 42 ) : ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 86 ) : ( ( ( scaler_8 <= 0.3282876958661803 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 50 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 848 ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 1698 ) : ( 1699 ) ) ) ) ) : ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 3408 ) : ( 3409 ) ) ) : ( 1705 ) ) ) : ( 853 ) ) ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= 0.8005891397504875 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 428 ) : ( 429 ) ) ) : ( 215 ) ) ) ) ) ) ) : ( ( ( scaler_7 <= 0.8256909793536391 ) ? ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_6
		
	
		namespace LGBM_Tree_6_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.009385440227891504 }} ,
					{ 8 ,  {-0.011500495983038303 }} ,
					{ 10 ,  {-0.027624550838880737 }} ,
					{ 15 ,  {-0.01191333654751991 }} ,
					{ 23 ,  {0.023312521294529126 }} ,
					{ 36 ,  {-0.02760890857774947 }} ,
					{ 38 ,  {-0.027117330926487934 }} ,
					{ 39 ,  {-0.027208036225498524 }} ,
					{ 44 ,  {0.08376075694884239 }} ,
					{ 57 ,  {-0.011803597806699467 }} ,
					{ 75 ,  {-0.027436115733805267 }} ,
					{ 112 ,  {-0.027260060277087855 }} ,
					{ 113 ,  {-0.02742150061105053 }} ,
					{ 119 ,  {-0.027157527027978485 }} ,
					{ 148 ,  {-0.02731931975101621 }} ,
					{ 149 ,  {-0.027199621832826832 }} ,
					{ 180 ,  {0.10247004314594749 }} ,
					{ 181 ,  {0.12099336999360327 }} ,
					{ 182 ,  {0.09419501576472702 }} ,
					{ 236 ,  {-0.027180943210685433 }} ,
					{ 237 ,  {-0.027241678262763292 }} ,
					{ 366 ,  {0.10342002785978158 }} ,
					{ 367 ,  {0.09902120691271118 }} ,
					{ 464 ,  {-0.02717890035186208 }} ,
					{ 465 ,  {-0.027266188276813916 }} ,
					{ 470 ,  {-0.027300979623998058 }} ,
					{ 471 ,  {-0.02719421143990565 }} ,
					{ 932 ,  {-0.0272775483315364 }} ,
					{ 933 ,  {-0.027442101016078874 }} ,
					{ 935 ,  {-0.027174160348690624 }} ,
					{ 937 ,  {-0.027276184230983543 }} ,
					{ 938 ,  {-0.027194957105575485 }} ,
					{ 939 ,  {-0.02732501693147063 }} ,
					{ 1869 ,  {-0.027331186761570488 }} ,
					{ 1872 ,  {-0.027292821932849837 }} ,
					{ 3736 ,  {-0.027215353477650944 }} ,
					{ 3737 ,  {-0.02730329797815677 }} ,
					{ 3747 ,  {-0.02733931723022296 }} ,
					{ 7492 ,  {-0.02748305181094456 }} ,
					{ 7493 ,  {-0.02737117423032775 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( 36 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_52 <= 1.41104489193301 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 44 ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 182 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( ( ( scaler_64 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_15 <= -0.5980738954644472 ) ? ( 1872 ) : ( ( ( scaler_52 <= -0.3511517010429038 ) ? ( ( ( scaler_8 <= 0.9222435271028199 ) ? ( 7492 ) : ( 7493 ) ) ) : ( 3747 ) ) ) ) ) : ( 937 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_21 <= -0.10285059208729375 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 236 ) : ( 237 ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_6
		
	
		namespace LGBM_Tree_7_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03108816045909546 }} ,
					{ 8 ,  {0.05556327125715363 }} ,
					{ 19 ,  {0.11376597112935412 }} ,
					{ 21 ,  {0.016114999695405103 }} ,
					{ 22 ,  {0.004933495757628947 }} ,
					{ 23 ,  {0.10160117455854081 }} ,
					{ 25 ,  {-0.013881901559401891 }} ,
					{ 26 ,  {0.026023074446370753 }} ,
					{ 36 ,  {0.08460583942179745 }} ,
					{ 40 ,  {-0.027419241173550324 }} ,
					{ 41 ,  {-0.028180830901091875 }} ,
					{ 55 ,  {-0.02736191600315717 }} ,
					{ 74 ,  {0.09969940793086145 }} ,
					{ 75 ,  {0.11190942060265188 }} ,
					{ 96 ,  {-0.027303090213662846 }} ,
					{ 97 ,  {-0.027543871056507636 }} ,
					{ 99 ,  {-0.027364061735330958 }} ,
					{ 109 ,  {-0.02715733297683738 }} ,
					{ 216 ,  {-0.027192483354653126 }} ,
					{ 217 ,  {-0.0273347037457808 }} ,
					{ 786 ,  {-0.02715940529968182 }} ,
					{ 788 ,  {-0.027159757898304333 }} ,
					{ 790 ,  {-0.027099005357756764 }} ,
					{ 1568 ,  {-0.02719611403637552 }} ,
					{ 1570 ,  {-0.02714085439352883 }} ,
					{ 1571 ,  {-0.027215531274578444 }} ,
					{ 1574 ,  {-0.027180633193279898 }} ,
					{ 1575 ,  {-0.02733193717428935 }} ,
					{ 1578 ,  {-0.027183954308899805 }} ,
					{ 1582 ,  {-0.027227431709877428 }} ,
					{ 1583 ,  {-0.0271561691693672 }} ,
					{ 3159 ,  {-0.02730305268875184 }} ,
					{ 6277 ,  {-0.02726879737450379 }} ,
					{ 6279 ,  {-0.027314148278948687 }} ,
					{ 6316 ,  {-0.027177224301098285 }} ,
					{ 6317 ,  {-0.027275524451627387 }} ,
					{ 12552 ,  {-0.027424960218748143 }} ,
					{ 12553 ,  {-0.027298088216275957 }} ,
					{ 12556 ,  {-0.0272001926390959 }} ,
					{ 12557 ,  {-0.027301252038311016 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 8 ) : ( ( ( scaler_60 <= 1.1892408587521373 ) ? ( ( ( scaler_13 <= -0.644907381388898 ) ? ( 36 ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_8 <= 0.3282876958661803 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_40 <= 2.1651153778940766 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 1568 ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( ( ( scaler_36 <= -0.8061485116219902 ) ? ( 12552 ) : ( 12553 ) ) ) : ( 6277 ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 12556 ) : ( 12557 ) ) ) : ( 6279 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 1570 ) : ( 1571 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 786 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 1574 ) : ( 1575 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 788 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 1578 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 6316 ) : ( 6317 ) ) ) : ( 3159 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 790 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 1582 ) : ( 1583 ) ) ) ) ) ) ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 26 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_6
		
	
		namespace LGBM_Tree_8_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.002337507072797954 }} ,
					{ 20 ,  {-0.01260717758208465 }} ,
					{ 27 ,  {-0.02717166808526671 }} ,
					{ 29 ,  {0.0533720954152733 }} ,
					{ 31 ,  {-0.027560364731708028 }} ,
					{ 36 ,  {0.004992029401056005 }} ,
					{ 38 ,  {-0.02711683000010444 }} ,
					{ 46 ,  {-0.02736158605457824 }} ,
					{ 47 ,  {0.01060891642509288 }} ,
					{ 48 ,  {-0.02717069944495837 }} ,
					{ 50 ,  {-0.02727410900628065 }} ,
					{ 52 ,  {-0.027096389871581007 }} ,
					{ 53 ,  {-0.027032670379272525 }} ,
					{ 56 ,  {-0.01109521387971645 }} ,
					{ 57 ,  {-0.027351000261881156 }} ,
					{ 61 ,  {-0.02724607180125658 }} ,
					{ 74 ,  {-0.027105768490060536 }} ,
					{ 75 ,  {-0.027240519023072042 }} ,
					{ 78 ,  {-0.027272846372918453 }} ,
					{ 79 ,  {-0.027164628037787953 }} ,
					{ 84 ,  {-0.027266256327647183 }} ,
					{ 85 ,  {-0.027123203900949494 }} ,
					{ 86 ,  {-0.027702659211996012 }} ,
					{ 87 ,  {-0.027347646624623002 }} ,
					{ 88 ,  {-0.01999594319939755 }} ,
					{ 89 ,  {0.07618981267372145 }} ,
					{ 90 ,  {0.03676700048789421 }} ,
					{ 98 ,  {-0.027128086464943076 }} ,
					{ 99 ,  {-0.02706632264518063 }} ,
					{ 102 ,  {-0.027091275467298104 }} ,
					{ 120 ,  {-0.027063764240693906 }} ,
					{ 182 ,  {0.07901962222735301 }} ,
					{ 207 ,  {-0.027133060037464213 }} ,
					{ 242 ,  {-0.02709965411191466 }} ,
					{ 243 ,  {-0.027175825888049177 }} ,
					{ 366 ,  {0.09660449963107744 }} ,
					{ 412 ,  {-0.02727840576350036 }} ,
					{ 413 ,  {-0.027141429411631432 }} ,
					{ 734 ,  {0.1178487442742364 }} ,
					{ 735 ,  {0.10594796536652902 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 8 ) : ( ( ( scaler_38 <= -0.4680387515195381 ) ? ( ( ( scaler_20 <= -0.4291825262850748 ) ? ( 36 ) : ( ( ( scaler_30 <= -1.392368631718952 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 38 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 90 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 182 ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 366 ) : ( ( ( scaler_37 <= 0.874679379836743 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 48 ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 120 ) : ( ( ( scaler_40 <= 1.029252356661461 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_6
		
	
		namespace LGBM_Tree_9_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.07968884040342702 }} ,
					{ 12 ,  {-0.028333444962151455 }} ,
					{ 15 ,  {0.005578656048319228 }} ,
					{ 16 ,  {0.021359887891549762 }} ,
					{ 22 ,  {0.008234152273558129 }} ,
					{ 23 ,  {-0.028158469977574402 }} ,
					{ 26 ,  {-0.019395163836553552 }} ,
					{ 34 ,  {0.014189231822932536 }} ,
					{ 36 ,  {-0.027486597906975153 }} ,
					{ 37 ,  {-0.012250430478128925 }} ,
					{ 55 ,  {0.018503698190294796 }} ,
					{ 56 ,  {-0.027277869027343596 }} ,
					{ 58 ,  {-0.027351235417328562 }} ,
					{ 59 ,  {-0.02748246615744361 }} ,
					{ 77 ,  {-0.027314699986350284 }} ,
					{ 109 ,  {0.08363314977949322 }} ,
					{ 114 ,  {-0.02745984968244878 }} ,
					{ 115 ,  {-0.027295505756438944 }} ,
					{ 142 ,  {0.014523710662095544 }} ,
					{ 143 ,  {-0.027571524944112132 }} ,
					{ 152 ,  {-0.027384017829697956 }} ,
					{ 153 ,  {-0.02747084130992755 }} ,
					{ 156 ,  {-0.027299737061659526 }} ,
					{ 158 ,  {-0.02728206532949385 }} ,
					{ 159 ,  {-0.0271845853640688 }} ,
					{ 216 ,  {0.12487840938165735 }} ,
					{ 280 ,  {-0.027724648931528803 }} ,
					{ 282 ,  {0.0015218016531658434 }} ,
					{ 283 ,  {-0.027547906167015548 }} ,
					{ 314 ,  {-0.027439915436298347 }} ,
					{ 315 ,  {-0.027311142975356275 }} ,
					{ 434 ,  {0.0909108502093121 }} ,
					{ 870 ,  {0.10609568103694111 }} ,
					{ 871 ,  {0.10023712864182482 }} ,
					{ 1124 ,  {-0.027290174827752048 }} ,
					{ 1125 ,  {-0.027381436802108156 }} ,
					{ 1127 ,  {-0.027543182830047898 }} ,
					{ 2253 ,  {-0.02731056592870922 }} ,
					{ 4504 ,  {-0.027360474545177274 }} ,
					{ 4505 ,  {-0.027468259920538387 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 16 ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( 34 ) : ( ( ( scaler_56 <= 1.5665167660176842 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 280 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 1124 ) : ( 1125 ) ) ) : ( ( ( scaler_16 <= 0.1671861246601561 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 4504 ) : ( 4505 ) ) ) : ( 2253 ) ) ) : ( 1127 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 156 ) : ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( 314 ) : ( 315 ) ) ) ) ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_46 <= -1.1458211998872978 ) ? ( 10 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 12 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 26 ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_47 <= 1.263516123425773 ) ? ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( 216 ) : ( ( ( scaler_14 <= -0.37282348386726455 ) ? ( 434 ) : ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 870 ) : ( 871 ) ) ) ) ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 56 ) : ( ( ( scaler_43 <= -0.3567397062131727 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_6
		
	
		namespace LGBM_Tree_0_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.040455699708392086 }} ,
					{ 10 ,  {-0.02722735175323412 }} ,
					{ 11 ,  {-0.027062009794174696 }} ,
					{ 13 ,  {0.02417096503991483 }} ,
					{ 18 ,  {0.07485620422830398 }} ,
					{ 24 ,  {-0.0271370588194796 }} ,
					{ 25 ,  {-0.027311796050695225 }} ,
					{ 30 ,  {-0.026998272612215313 }} ,
					{ 38 ,  {0.1014129742317609 }} ,
					{ 78 ,  {0.0865122068448481 }} ,
					{ 113 ,  {-0.02698739005938864 }} ,
					{ 117 ,  {-0.027053001429033764 }} ,
					{ 118 ,  {-0.02710412469519848 }} ,
					{ 119 ,  {-0.027005539262309697 }} ,
					{ 126 ,  {-0.026998113414541242 }} ,
					{ 158 ,  {0.09211416204357985 }} ,
					{ 159 ,  {0.0950925069346038 }} ,
					{ 224 ,  {-0.027061283548974392 }} ,
					{ 225 ,  {-0.02719629030242518 }} ,
					{ 230 ,  {-0.027206442944001 }} ,
					{ 248 ,  {-0.027040310615111314 }} ,
					{ 250 ,  {-0.02709759176981811 }} ,
					{ 251 ,  {-0.027232705390142938 }} ,
					{ 254 ,  {-0.027142244378551485 }} ,
					{ 255 ,  {-0.02704497118583788 }} ,
					{ 456 ,  {-0.027082339128854188 }} ,
					{ 457 ,  {-0.0272715314501914 }} ,
					{ 458 ,  {-0.027110597783848923 }} ,
					{ 462 ,  {-0.027028305425876715 }} ,
					{ 463 ,  {-0.02712192335153256 }} ,
					{ 464 ,  {-0.027090514926242405 }} ,
					{ 465 ,  {-0.027184712958509757 }} ,
					{ 467 ,  {-0.027294599470803784 }} ,
					{ 498 ,  {-0.02711617008551391 }} ,
					{ 499 ,  {-0.02704788009194033 }} ,
					{ 919 ,  {-0.02737065262431361 }} ,
					{ 932 ,  {-0.027068125394999983 }} ,
					{ 933 ,  {-0.027192080189670054 }} ,
					{ 1836 ,  {-0.027292962745950514 }} ,
					{ 1837 ,  {-0.02719162578356494 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 8 ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( 18 ) : ( ( ( scaler_63 <= -0.88833030263715 ) ? ( 38 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( 78 ) : ( ( ( scaler_13 <= 0.6293012079907891 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( ( ( scaler_36 <= 0.456193419809788 ) ? ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 456 ) : ( 457 ) ) ) : ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 458 ) : ( ( ( scaler_45 <= 0.653394117715386 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 1836 ) : ( 1837 ) ) ) : ( 919 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 230 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_64 <= 2.764605635070462 ) ? ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_48 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 932 ) : ( 933 ) ) ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 30 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( ( ( scaler_45 <= 0.19120984640994193 ) ? ( 248 ) : ( ( ( scaler_35 <= 2.0361710282653154 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_7
		
	
		namespace LGBM_Tree_1_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.041830222688164304 }} ,
					{ 10 ,  {-0.014044905504218115 }} ,
					{ 13 ,  {0.1021522429569076 }} ,
					{ 14 ,  {-0.01817082373795569 }} ,
					{ 25 ,  {0.026675854154363417 }} ,
					{ 31 ,  {0.019136201213897603 }} ,
					{ 61 ,  {0.06753178290632271 }} ,
					{ 92 ,  {-0.027232750935326358 }} ,
					{ 93 ,  {-0.027390210134578347 }} ,
					{ 94 ,  {-0.027217998900550947 }} ,
					{ 95 ,  {-0.027144294276986353 }} ,
					{ 96 ,  {0.021139307815618152 }} ,
					{ 97 ,  {-0.02779308118616873 }} ,
					{ 121 ,  {0.10963904067552815 }} ,
					{ 176 ,  {-0.0271929032675732 }} ,
					{ 178 ,  {-0.027320775565566592 }} ,
					{ 180 ,  {-0.02731203091500503 }} ,
					{ 181 ,  {-0.027176633636036725 }} ,
					{ 196 ,  {-0.027723499544766106 }} ,
					{ 197 ,  {-0.02897081006652132 }} ,
					{ 198 ,  {-0.02769254706209139 }} ,
					{ 240 ,  {0.08153371409769516 }} ,
					{ 354 ,  {-0.02727738659509246 }} ,
					{ 358 ,  {-0.02752729834674616 }} ,
					{ 359 ,  {-0.027400040400987143 }} ,
					{ 365 ,  {-0.02729579302969052 }} ,
					{ 399 ,  {-0.027414713150122234 }} ,
					{ 482 ,  {0.10451842444305424 }} ,
					{ 483 ,  {0.09417233458969392 }} ,
					{ 710 ,  {-0.027455103070709592 }} ,
					{ 711 ,  {-0.027306132749255026 }} ,
					{ 728 ,  {-0.02719769310512529 }} ,
					{ 729 ,  {-0.027279512670960116 }} ,
					{ 733 ,  {-0.027442677638611815 }} ,
					{ 734 ,  {-0.027287810048937308 }} ,
					{ 735 ,  {-0.02719556339913807 }} ,
					{ 796 ,  {-0.027176784859015757 }} ,
					{ 797 ,  {-0.027274138184231658 }} ,
					{ 1464 ,  {-0.027399441628125243 }} ,
					{ 1465 ,  {-0.027290593585282758 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_5 <= -1.4829990215384834 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 176 ) : ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( 354 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 710 ) : ( 711 ) ) ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 178 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 1464 ) : ( 1465 ) ) ) : ( 733 ) ) ) : ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0329189398710144 ) ? ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_21 <= 1.2696049002348533 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 198 ) : ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 796 ) : ( 797 ) ) ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 14 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 240 ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_7
		
	
		namespace LGBM_Tree_2_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.07528287079237032 }} ,
					{ 14 ,  {0.01999839618034739 }} ,
					{ 16 ,  {0.0008600086490452383 }} ,
					{ 20 ,  {0.012184590945710607 }} ,
					{ 25 ,  {0.04316936348875937 }} ,
					{ 26 ,  {0.04810953965950076 }} ,
					{ 27 ,  {-0.027916391724473272 }} ,
					{ 31 ,  {-0.027768423251539876 }} ,
					{ 34 ,  {-0.027382249346877947 }} ,
					{ 42 ,  {-0.02756689357103615 }} ,
					{ 43 ,  {-0.027280948446569656 }} ,
					{ 46 ,  {-0.027334914323947412 }} ,
					{ 48 ,  {0.10612640688370936 }} ,
					{ 61 ,  {-0.02724474271128162 }} ,
					{ 71 ,  {-0.027197388961254718 }} ,
					{ 88 ,  {-0.027382860773826512 }} ,
					{ 89 ,  {-0.027186194661606544 }} ,
					{ 94 ,  {-0.027128033232068888 }} ,
					{ 99 ,  {0.0747561783603196 }} ,
					{ 120 ,  {-0.027466357540869915 }} ,
					{ 121 ,  {-0.027249982748999285 }} ,
					{ 140 ,  {-0.027233076353839564 }} ,
					{ 141 ,  {-0.02731672282676402 }} ,
					{ 190 ,  {-0.02724144532436494 }} ,
					{ 191 ,  {-0.027159596692105444 }} ,
					{ 196 ,  {0.08936421115000724 }} ,
					{ 197 ,  {0.09686026757637181 }} ,
					{ 361 ,  {-0.027147719953880642 }} ,
					{ 362 ,  {-0.02726941224617991 }} ,
					{ 363 ,  {-0.02743652936665461 }} ,
					{ 364 ,  {-0.027308917780389838 }} ,
					{ 366 ,  {-0.027420424149337687 }} ,
					{ 720 ,  {-0.027245310863508305 }} ,
					{ 721 ,  {-0.027331034784755855 }} ,
					{ 731 ,  {-0.027270533053782228 }} ,
					{ 734 ,  {-0.02725169209678054 }} ,
					{ 735 ,  {-0.027336049937312375 }} ,
					{ 1461 ,  {-0.02736388115356561 }} ,
					{ 2920 ,  {-0.027462662032148324 }} ,
					{ 2921 ,  {-0.027576973761903087 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_4 <= 1.3565661365289492 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 20 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 720 ) : ( 721 ) ) ) : ( 361 ) ) ) : ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= -1.100099575769813 ) ? ( 364 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_47 <= 0.91345632309554 ) ? ( ( ( scaler_36 <= -0.6483557701930179 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 366 ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 94 ) : ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 48 ) : ( ( ( scaler_29 <= -0.5892438348161141 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 196 ) : ( 197 ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_28 <= -0.7475477128849743 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_7
		
	
		namespace LGBM_Tree_3_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.020224662458828282 }} ,
					{ 12 ,  {-0.027546206491526698 }} ,
					{ 13 ,  {0.03688981980515987 }} ,
					{ 16 ,  {0.01613326631248639 }} ,
					{ 20 ,  {0.059440762508252566 }} ,
					{ 21 ,  {-0.02796799652430705 }} ,
					{ 22 ,  {0.017854787301216462 }} ,
					{ 34 ,  {0.06565885583517116 }} ,
					{ 47 ,  {-0.02780270070892188 }} ,
					{ 57 ,  {-0.02713700037723323 }} ,
					{ 60 ,  {-0.011422653592837858 }} ,
					{ 62 ,  {0.044050675346682666 }} ,
					{ 63 ,  {-0.02765367534538922 }} ,
					{ 93 ,  {-0.027224220507921882 }} ,
					{ 113 ,  {-0.02731080779535506 }} ,
					{ 116 ,  {-0.027156206728773058 }} ,
					{ 118 ,  {-0.027178683270001603 }} ,
					{ 122 ,  {-0.027429344252208904 }} ,
					{ 140 ,  {0.10313044166151449 }} ,
					{ 141 ,  {0.09435132057028527 }} ,
					{ 142 ,  {0.09660736911302116 }} ,
					{ 143 ,  {0.08256531748904061 }} ,
					{ 224 ,  {-0.027245006113580612 }} ,
					{ 225 ,  {-0.02715098045552331 }} ,
					{ 238 ,  {-0.02721219619078847 }} ,
					{ 239 ,  {-0.027344051830740956 }} ,
					{ 368 ,  {-0.02739772325717732 }} ,
					{ 369 ,  {-0.027178887016300852 }} ,
					{ 370 ,  {-0.02749595408043731 }} ,
					{ 371 ,  {-0.027346009707803737 }} ,
					{ 468 ,  {-0.02733931012493404 }} ,
					{ 469 ,  {-0.027474395301571555 }} ,
					{ 471 ,  {-0.02721797257944522 }} ,
					{ 492 ,  {-0.027271159892168897 }} ,
					{ 493 ,  {-0.027387232944318038 }} ,
					{ 494 ,  {-0.027218629644824178 }} ,
					{ 495 ,  {-0.027140085492728946 }} ,
					{ 941 ,  {-0.027264599575815653 }} ,
					{ 1880 ,  {-0.027305985959462726 }} ,
					{ 1881 ,  {-0.027452389862186368 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( scaler_13 <= -0.644907381388898 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_61 <= -0.5957444632287917 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 116 ) : ( ( ( scaler_47 <= -0.3117529780602753 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 1880 ) : ( 1881 ) ) ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 118 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 60 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( 122 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 492 ) : ( 493 ) ) ) : ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_7
		
	
		namespace LGBM_Tree_4_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.026873968596838833 }} ,
					{ 13 ,  {0.07990377030660771 }} ,
					{ 17 ,  {-0.012325872427165263 }} ,
					{ 18 ,  {-0.0279398286500337 }} ,
					{ 20 ,  {-0.008212725198576498 }} ,
					{ 22 ,  {-0.027689452069146317 }} ,
					{ 23 ,  {0.04296421836825794 }} ,
					{ 24 ,  {0.09673604108464377 }} ,
					{ 25 ,  {0.08880792355591657 }} ,
					{ 33 ,  {-0.02752822182951043 }} ,
					{ 39 ,  {-0.028186716399018836 }} ,
					{ 43 ,  {-0.018444527183519008 }} ,
					{ 65 ,  {-0.027248283884024407 }} ,
					{ 76 ,  {0.03240786202185546 }} ,
					{ 128 ,  {-0.02746058311170675 }} ,
					{ 129 ,  {-0.02732505160518497 }} ,
					{ 154 ,  {0.0882220705613932 }} ,
					{ 155 ,  {0.10832207486217832 }} ,
					{ 337 ,  {-0.027268739034858283 }} ,
					{ 342 ,  {-0.027306760685829434 }} ,
					{ 343 ,  {-0.027411350593535413 }} ,
					{ 672 ,  {-0.027265189705134224 }} ,
					{ 676 ,  {-0.02738456654537251 }} ,
					{ 680 ,  {-0.027276242784004052 }} ,
					{ 681 ,  {-0.02739414069386066 }} ,
					{ 682 ,  {-0.027288177762158007 }} ,
					{ 683 ,  {-0.0272289150694161 }} ,
					{ 1347 ,  {-0.02750882611521759 }} ,
					{ 1354 ,  {-0.027162277592363244 }} ,
					{ 1355 ,  {-0.027250472101514697 }} ,
					{ 1356 ,  {-0.02747048379862302 }} ,
					{ 1358 ,  {-0.027284874342184823 }} ,
					{ 1359 ,  {-0.02736783915060581 }} ,
					{ 2692 ,  {-0.027481104374270055 }} ,
					{ 2714 ,  {-0.027341364343761866 }} ,
					{ 2715 ,  {-0.02745495732814046 }} ,
					{ 5387 ,  {-0.02729816786618826 }} ,
					{ 10773 ,  {-0.027318934510409176 }} ,
					{ 21544 ,  {-0.027506937491855895 }} ,
					{ 21545 ,  {-0.02737253820972931 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_40 <= 0.745286601353307 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 128 ) : ( 129 ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 76 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_8 <= 0.6252656114845001 ) ? ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 672 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 2692 ) : ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_46 <= -0.510181547621488 ) ? ( 21544 ) : ( 21545 ) ) ) : ( 10773 ) ) ) : ( 5387 ) ) ) ) ) : ( 1347 ) ) ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 676 ) : ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( 1354 ) : ( 1355 ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 1356 ) : ( ( ( scaler_46 <= 0.7610977569101317 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( ( ( scaler_30 <= -1.2292682670333899 ) ? ( 680 ) : ( 681 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_7
		
	
		namespace LGBM_Tree_5_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.011644448795364545 }} ,
					{ 11 ,  {-0.018314500316972022 }} ,
					{ 15 ,  {0.04393641949842787 }} ,
					{ 19 ,  {-0.013742737332036528 }} ,
					{ 20 ,  {0.07396141255790488 }} ,
					{ 25 ,  {0.0018275308472076462 }} ,
					{ 28 ,  {-0.02736384940028712 }} ,
					{ 36 ,  {-0.02758474464544864 }} ,
					{ 43 ,  {0.08251234166391966 }} ,
					{ 48 ,  {-0.027383354686396733 }} ,
					{ 58 ,  {-0.027184188073675508 }} ,
					{ 75 ,  {-0.02716493931931251 }} ,
					{ 84 ,  {0.10322234703915306 }} ,
					{ 98 ,  {-0.027161181182957347 }} ,
					{ 99 ,  {-0.02728107453311429 }} ,
					{ 106 ,  {-0.027148520109661647 }} ,
					{ 107 ,  {-0.027222525135201604 }} ,
					{ 109 ,  {-0.02724621847362432 }} ,
					{ 111 ,  {-0.027144660783006397 }} ,
					{ 118 ,  {-0.027316077331925506 }} ,
					{ 119 ,  {-0.027201861612641945 }} ,
					{ 148 ,  {-0.027242138777291952 }} ,
					{ 149 ,  {-0.027409189719274585 }} ,
					{ 171 ,  {0.08757845689428881 }} ,
					{ 209 ,  {-0.027139741058246278 }} ,
					{ 217 ,  {-0.02746308256432883 }} ,
					{ 220 ,  {-0.027308201850822812 }} ,
					{ 221 ,  {-0.027186421562363512 }} ,
					{ 340 ,  {0.09061003479437915 }} ,
					{ 341 ,  {0.09811151515738344 }} ,
					{ 416 ,  {-0.02717850644425833 }} ,
					{ 417 ,  {-0.02734661567080518 }} ,
					{ 421 ,  {-0.027307551971370997 }} ,
					{ 423 ,  {-0.02722955370549479 }} ,
					{ 432 ,  {-0.027365725889265953 }} ,
					{ 433 ,  {-0.02725723483653604 }} ,
					{ 840 ,  {-0.027199801573381456 }} ,
					{ 841 ,  {-0.027082988988121073 }} ,
					{ 844 ,  {-0.027272987311435994 }} ,
					{ 845 ,  {-0.027459800979770205 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 36 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( 20 ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( 84 ) : ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 340 ) : ( 341 ) ) ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 48 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( 840 ) : ( 841 ) ) ) : ( 421 ) ) ) : ( ( ( scaler_52 <= -0.3511517010429038 ) ? ( ( ( scaler_12 <= -1.2644158117603561 ) ? ( 844 ) : ( 845 ) ) ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_11 <= -0.46497723121655854 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_16 <= 0.1671861246601561 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_7
		
	
		namespace LGBM_Tree_6_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.00917408554780679 }} ,
					{ 8 ,  {-0.01120681858455658 }} ,
					{ 10 ,  {-0.027532364475152074 }} ,
					{ 15 ,  {-0.011570751411117651 }} ,
					{ 23 ,  {0.02220884348350998 }} ,
					{ 36 ,  {-0.02748256959454471 }} ,
					{ 38 ,  {-0.027029282181739306 }} ,
					{ 39 ,  {-0.027125323778821125 }} ,
					{ 44 ,  {0.0747461647178172 }} ,
					{ 56 ,  {-0.027272762537323404 }} ,
					{ 57 ,  {-0.011488202777700617 }} ,
					{ 74 ,  {-0.027292321418640103 }} ,
					{ 75 ,  {-0.027131452480153702 }} ,
					{ 90 ,  {0.098876581716646 }} ,
					{ 119 ,  {-0.02707360199910035 }} ,
					{ 183 ,  {0.08918856082320269 }} ,
					{ 364 ,  {0.09099129307554903 }} ,
					{ 365 ,  {0.09605462783101976 }} ,
					{ 464 ,  {-0.027098668440259627 }} ,
					{ 465 ,  {-0.027187017632576055 }} ,
					{ 472 ,  {-0.027134978576205393 }} ,
					{ 473 ,  {-0.027051068831426744 }} ,
					{ 474 ,  {-0.027140987349435226 }} ,
					{ 932 ,  {-0.027210222107451817 }} ,
					{ 933 ,  {-0.02739274030231378 }} ,
					{ 935 ,  {-0.02709702088868328 }} ,
					{ 936 ,  {-0.02715711666581 }} ,
					{ 937 ,  {-0.02727325652101984 }} ,
					{ 939 ,  {-0.027222580006112447 }} ,
					{ 940 ,  {-0.027200755119661753 }} ,
					{ 941 ,  {-0.027308963837997708 }} ,
					{ 942 ,  {-0.02719943434597477 }} ,
					{ 943 ,  {-0.02711915693659252 }} ,
					{ 950 ,  {-0.027160600915904193 }} ,
					{ 951 ,  {-0.027280204117853403 }} ,
					{ 1869 ,  {-0.02726436656659304 }} ,
					{ 1876 ,  {-0.027430240531444466 }} ,
					{ 1877 ,  {-0.027322540756589506 }} ,
					{ 3736 ,  {-0.02714061990537143 }} ,
					{ 3737 ,  {-0.027253886136769507 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 36 ) : ( ( ( scaler_64 <= 2.764605635070462 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_52 <= 1.41104489193301 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 44 ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( 90 ) : ( ( ( scaler_5 <= 0.40259039964233895 ) ? ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 364 ) : ( 365 ) ) ) : ( 183 ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 936 ) : ( 937 ) ) ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( 1876 ) : ( 1877 ) ) ) : ( 939 ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 940 ) : ( 941 ) ) ) : ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 472 ) : ( 473 ) ) ) : ( ( ( scaler_37 <= -0.40421590163902116 ) ? ( 474 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 950 ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_7
		
	
		namespace LGBM_Tree_7_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.02949784034907745 }} ,
					{ 8 ,  {0.0038281938575181864 }} ,
					{ 19 ,  {0.04133965980530879 }} ,
					{ 20 ,  {0.08300911410466294 }} ,
					{ 21 ,  {-0.0035618726328605767 }} ,
					{ 23 ,  {-0.013298345149053127 }} ,
					{ 25 ,  {0.028199510960161114 }} ,
					{ 36 ,  {0.10467881972796969 }} ,
					{ 44 ,  {-0.027298966582160463 }} ,
					{ 45 ,  {-0.02788912274162605 }} ,
					{ 48 ,  {-0.027172470258224137 }} ,
					{ 49 ,  {-0.027458891847974922 }} ,
					{ 54 ,  {-0.002018737722985041 }} ,
					{ 75 ,  {0.08742968707302189 }} ,
					{ 110 ,  {-0.027199045534214462 }} ,
					{ 111 ,  {-0.027394393242642163 }} ,
					{ 148 ,  {0.09647495829727071 }} ,
					{ 149 ,  {0.09212860536227967 }} ,
					{ 210 ,  {-0.027076313608392633 }} ,
					{ 212 ,  {-0.027080051220983906 }} ,
					{ 214 ,  {-0.02702048273994816 }} ,
					{ 215 ,  {-0.027091408936087413 }} ,
					{ 418 ,  {-0.027057981663852572 }} ,
					{ 419 ,  {-0.02714874786169036 }} ,
					{ 422 ,  {-0.027104126331669833 }} ,
					{ 423 ,  {-0.027280517944551688 }} ,
					{ 426 ,  {-0.027105577958634344 }} ,
					{ 835 ,  {-0.027171444889974472 }} ,
					{ 854 ,  {-0.02709731526016674 }} ,
					{ 1664 ,  {-0.0271277680984263 }} ,
					{ 1666 ,  {-0.027089350110916174 }} ,
					{ 1668 ,  {-0.027240701989930467 }} ,
					{ 1669 ,  {-0.027383969796400055 }} ,
					{ 1710 ,  {-0.02716056684537051 }} ,
					{ 1711 ,  {-0.027290736372476768 }} ,
					{ 3330 ,  {-0.027354658785787658 }} ,
					{ 3334 ,  {-0.027252841307649458 }} ,
					{ 3335 ,  {-0.027131185166159935 }} ,
					{ 6662 ,  {-0.02714739492806283 }} ,
					{ 6663 ,  {-0.027276317183694544 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 8 ) : ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 36 ) : ( ( ( scaler_39 <= 1.1417401795077566 ) ? ( ( ( scaler_16 <= 1.0000000180025095e-35 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 1664 ) : ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( 3330 ) : ( ( ( scaler_28 <= -0.7475477128849743 ) ? ( 6662 ) : ( 6663 ) ) ) ) ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 1666 ) : ( ( ( scaler_15 <= 0.8881187628200565 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 1668 ) : ( 1669 ) ) ) : ( 835 ) ) ) ) ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 210 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 212 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 426 ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 854 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 1710 ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 54 ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_7
		
	
		namespace LGBM_Tree_8_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.029441593407089347 }} ,
					{ 18 ,  {-0.009360690600083385 }} ,
					{ 20 ,  {-0.012194281932377739 }} ,
					{ 26 ,  {-0.027108538571929016 }} ,
					{ 29 ,  {-0.011499584609358824 }} ,
					{ 30 ,  {0.06949334749265634 }} ,
					{ 32 ,  {-0.027207264535516126 }} ,
					{ 33 ,  {-0.0270232445220816 }} ,
					{ 46 ,  {-0.027284807408360985 }} ,
					{ 47 ,  {0.01021432588194567 }} ,
					{ 48 ,  {-0.027112416287618818 }} ,
					{ 49 ,  {-0.027011079756400755 }} ,
					{ 50 ,  {-0.027225133501578597 }} ,
					{ 54 ,  {-0.02702631649323811 }} ,
					{ 55 ,  {-0.026962770472142995 }} ,
					{ 56 ,  {-0.02730644910289768 }} ,
					{ 62 ,  {-0.027035732876677588 }} ,
					{ 63 ,  {-0.027606329107800445 }} ,
					{ 76 ,  {-0.02702171071243374 }} ,
					{ 78 ,  {-0.027100633044238577 }} ,
					{ 79 ,  {-0.027249065709789744 }} ,
					{ 84 ,  {-0.027221095665887846 }} ,
					{ 85 ,  {-0.027086248300664764 }} ,
					{ 86 ,  {-0.027643926291218847 }} ,
					{ 87 ,  {-0.027311501453708947 }} ,
					{ 88 ,  {-0.019821813389654667 }} ,
					{ 89 ,  {0.06944779718952204 }} ,
					{ 90 ,  {0.04361720343527695 }} ,
					{ 102 ,  {-0.02701875075437207 }} ,
					{ 114 ,  {-0.027131164128110247 }} ,
					{ 115 ,  {-0.027036090395112435 }} ,
					{ 154 ,  {-0.027163401991815772 }} ,
					{ 155 ,  {-0.02700998329631716 }} ,
					{ 182 ,  {0.08424205040303485 }} ,
					{ 207 ,  {-0.027062469337864666 }} ,
					{ 367 ,  {0.09394399047563967 }} ,
					{ 412 ,  {-0.027230117387886506 }} ,
					{ 413 ,  {-0.027067114210503854 }} ,
					{ 732 ,  {0.10617156963681502 }} ,
					{ 733 ,  {0.1014071016479957 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( 76 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 90 ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 182 ) : ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( ( ( scaler_37 <= 0.874679379836743 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.8520143281365727 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( ( ( scaler_40 <= 1.5971838672777687 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_36 <= 0.456193419809788 ) ? ( 30 ) : ( ( ( scaler_12 <= -1.4486642041448448 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_7
		
	
		namespace LGBM_Tree_9_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.02628642806659158 }} ,
					{ 10 ,  {-0.013881839742336212 }} ,
					{ 13 ,  {0.04669062144573402 }} ,
					{ 17 ,  {0.025567709171510168 }} ,
					{ 22 ,  {-0.019930166703470812 }} ,
					{ 24 ,  {0.013969834747298314 }} ,
					{ 29 ,  {0.03503823779475208 }} ,
					{ 47 ,  {0.046102312872442014 }} ,
					{ 50 ,  {-0.013360720833106493 }} ,
					{ 56 ,  {-0.027702477937296955 }} ,
					{ 57 ,  {-0.027233834504935873 }} ,
					{ 60 ,  {0.0031859487312898213 }} ,
					{ 61 ,  {-0.027316014709134136 }} ,
					{ 64 ,  {-0.02773848979533249 }} ,
					{ 66 ,  {0.026439203190414214 }} ,
					{ 67 ,  {-0.027268755144425352 }} ,
					{ 92 ,  {0.06966492005895099 }} ,
					{ 102 ,  {-0.02779054840201995 }} ,
					{ 103 ,  {-0.02724552516876984 }} ,
					{ 126 ,  {-0.027397281684007197 }} ,
					{ 127 ,  {-0.02818094124801084 }} ,
					{ 131 ,  {-0.027251204990501043 }} ,
					{ 186 ,  {0.11936539563515176 }} ,
					{ 251 ,  {-0.02739858992848821 }} ,
					{ 260 ,  {-0.02758588054910906 }} ,
					{ 374 ,  {0.10384337890089575 }} ,
					{ 497 ,  {-0.02750932706112177 }} ,
					{ 499 ,  {-0.027715464869520857 }} ,
					{ 500 ,  {-0.02735353144230821 }} ,
					{ 501 ,  {-0.027205953724969284 }} ,
					{ 522 ,  {-0.02741903675671353 }} ,
					{ 523 ,  {-0.027197874770242738 }} ,
					{ 750 ,  {0.07994562109197961 }} ,
					{ 751 ,  {0.09592284563769196 }} ,
					{ 993 ,  {-0.027225334573037316 }} ,
					{ 996 ,  {-0.027503782601163596 }} ,
					{ 997 ,  {-0.027301634984178882 }} ,
					{ 1985 ,  {-0.027281916860337426 }} ,
					{ 3968 ,  {-0.027316135720865733 }} ,
					{ 3969 ,  {-0.027468880674605362 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_64 <= 0.826743595451546 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 64 ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 260 ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 522 ) : ( 523 ) ) ) ) ) : ( 131 ) ) ) ) ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_29 <= -1.100099575769813 ) ? ( 10 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( ( ( scaler_13 <= -1.919115970768585 ) ? ( 92 ) : ( ( ( scaler_61 <= -0.3663848400111698 ) ? ( 186 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 374 ) : ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 750 ) : ( 751 ) ) ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 24 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 50 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_56 <= 1.9702444426114003 ) ? ( ( ( scaler_29 <= 1.1136086350295498 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 3968 ) : ( 3969 ) ) ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 500 ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_7
		
	
		namespace LGBM_Tree_0_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.01103846559806428 }} ,
					{ 10 ,  {0.02788883267517353 }} ,
					{ 13 ,  {0.023916756951977293 }} ,
					{ 16 ,  {-0.02912651914284547 }} ,
					{ 17 ,  {-0.02709043423393674 }} ,
					{ 22 ,  {0.07547357640564487 }} ,
					{ 24 ,  {-0.02703398117756734 }} ,
					{ 25 ,  {-0.027270797870651828 }} ,
					{ 30 ,  {-0.026885680012794285 }} ,
					{ 47 ,  {0.09067110208871733 }} ,
					{ 59 ,  {-0.026938074087599503 }} ,
					{ 92 ,  {0.0827377389254827 }} ,
					{ 117 ,  {-0.026979963653617146 }} ,
					{ 124 ,  {-0.027010969147279858 }} ,
					{ 126 ,  {-0.026925739636192315 }} ,
					{ 187 ,  {0.08890728973613143 }} ,
					{ 226 ,  {-0.0270900028301117 }} ,
					{ 228 ,  {-0.02703775987577789 }} ,
					{ 229 ,  {-0.026909971057344724 }} ,
					{ 230 ,  {-0.02701559700977445 }} ,
					{ 250 ,  {-0.027029874175967368 }} ,
					{ 251 ,  {-0.027171244404527353 }} ,
					{ 254 ,  {-0.027078160645733457 }} ,
					{ 255 ,  {-0.026969556498152206 }} ,
					{ 372 ,  {0.08630423621688925 }} ,
					{ 373 ,  {0.08409928852828141 }} ,
					{ 448 ,  {-0.026980139844347814 }} ,
					{ 449 ,  {-0.02717585029108252 }} ,
					{ 450 ,  {-0.02706196514599849 }} ,
					{ 451 ,  {-0.027232989703802352 }} ,
					{ 454 ,  {-0.02731681764287529 }} ,
					{ 455 ,  {-0.027192695368191355 }} ,
					{ 462 ,  {-0.027221375743012723 }} ,
					{ 463 ,  {-0.027070105908674775 }} ,
					{ 465 ,  {-0.02718944123983725 }} ,
					{ 466 ,  {-0.027014681604835625 }} ,
					{ 928 ,  {-0.027003543804645064 }} ,
					{ 929 ,  {-0.027105555031108727 }} ,
					{ 934 ,  {-0.026954394655510885 }} ,
					{ 935 ,  {-0.027197074266312682 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 10 ) : ( ( ( scaler_13 <= -0.8997490992648355 ) ? ( 22 ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 92 ) : ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( 372 ) : ( 373 ) ) ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= -1.0364552765484578 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 448 ) : ( 449 ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( scaler_39 <= -0.7345905391572228 ) ? ( 226 ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 230 ) : ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.374642225541209 ) ? ( ( ( scaler_64 <= 1.5534418603086395 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 466 ) : ( ( ( scaler_15 <= 0.5578537276457223 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 30 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 124 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_8
		
	
		namespace LGBM_Tree_1_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.03960854631232737 }} ,
					{ 10 ,  {-0.01382945655399552 }} ,
					{ 13 ,  {0.0935020243010524 }} ,
					{ 14 ,  {-0.01795268610459485 }} ,
					{ 25 ,  {0.02543692891982372 }} ,
					{ 31 ,  {0.01846288195224088 }} ,
					{ 60 ,  {0.06277573195962985 }} ,
					{ 92 ,  {-0.02715399218902779 }} ,
					{ 93 ,  {-0.027319497987407126 }} ,
					{ 95 ,  {-0.027059496527262306 }} ,
					{ 96 ,  {0.02048545136227882 }} ,
					{ 97 ,  {-0.027696611546549815 }} ,
					{ 123 ,  {0.10409807009171193 }} ,
					{ 176 ,  {-0.027111458775964676 }} ,
					{ 178 ,  {-0.027248848155450135 }} ,
					{ 180 ,  {-0.027247192063747386 }} ,
					{ 181 ,  {-0.02709449655521475 }} ,
					{ 188 ,  {-0.0271182095759425 }} ,
					{ 196 ,  {-0.027634890225458432 }} ,
					{ 197 ,  {-0.028854046349587176 }} ,
					{ 198 ,  {-0.027613641047432764 }} ,
					{ 244 ,  {0.09516951011338885 }} ,
					{ 245 ,  {0.08448034226368874 }} ,
					{ 354 ,  {-0.02723566609925518 }} ,
					{ 355 ,  {-0.02735673241643144 }} ,
					{ 358 ,  {-0.027488897348656713 }} ,
					{ 359 ,  {-0.027341838399196367 }} ,
					{ 365 ,  {-0.0272311755104165 }} ,
					{ 378 ,  {-0.02726012585056239 }} ,
					{ 379 ,  {-0.027136358539772337 }} ,
					{ 399 ,  {-0.027330847204957577 }} ,
					{ 728 ,  {-0.027114229666001213 }} ,
					{ 729 ,  {-0.027200572548436625 }} ,
					{ 733 ,  {-0.02738201645223135 }} ,
					{ 734 ,  {-0.02721137280226631 }} ,
					{ 735 ,  {-0.027117887497222222 }} ,
					{ 796 ,  {-0.02709249844482642 }} ,
					{ 797 ,  {-0.027194438739224225 }} ,
					{ 1464 ,  {-0.027342101169965185 }} ,
					{ 1465 ,  {-0.027217890497437582 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_5 <= -1.4829990215384834 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 176 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 178 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 1464 ) : ( 1465 ) ) ) : ( 733 ) ) ) : ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_13 <= 0.6293012079907891 ) ? ( 188 ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 378 ) : ( 379 ) ) ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0329189398710144 ) ? ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_30 <= 0.40173537982223223 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_21 <= 1.2696049002348533 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 198 ) : ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 796 ) : ( 797 ) ) ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 14 ) : ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( ( ( scaler_31 <= -1.0360325865241657 ) ? ( 60 ) : ( ( ( scaler_39 <= 0.11828706023594954 ) ? ( ( ( scaler_52 <= -0.8798106789356778 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_8
		
	
		namespace LGBM_Tree_2_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.06947292091707867 }} ,
					{ 14 ,  {0.019355434713552496 }} ,
					{ 16 ,  {0.0008984135582859007 }} ,
					{ 20 ,  {0.01212930717223129 }} ,
					{ 21 ,  {-0.02744749806846806 }} ,
					{ 25 ,  {0.03597249765813706 }} ,
					{ 26 ,  {-0.02790450713195208 }} ,
					{ 27 ,  {0.04666504145801689 }} ,
					{ 31 ,  {-0.027686154793847867 }} ,
					{ 34 ,  {-0.027323666566448048 }} ,
					{ 46 ,  {-0.027266453856159934 }} ,
					{ 61 ,  {-0.027164270627127274 }} ,
					{ 71 ,  {-0.027139849408835234 }} ,
					{ 88 ,  {-0.027140162104617546 }} ,
					{ 90 ,  {-0.027179073132437632 }} ,
					{ 96 ,  {0.08396153284432044 }} ,
					{ 97 ,  {0.0782446648533931 }} ,
					{ 98 ,  {0.08417445806910355 }} ,
					{ 99 ,  {0.09077922006566913 }} ,
					{ 120 ,  {-0.027157860701423904 }} ,
					{ 121 ,  {-0.027390617269003027 }} ,
					{ 140 ,  {-0.02715547442688196 }} ,
					{ 141 ,  {-0.027290798978116926 }} ,
					{ 188 ,  {-0.027035806053178776 }} ,
					{ 189 ,  {-0.027127513431784572 }} ,
					{ 190 ,  {-0.027161095580504488 }} ,
					{ 191 ,  {-0.027257268819066795 }} ,
					{ 356 ,  {-0.02734874645507923 }} ,
					{ 357 ,  {-0.0271050355690627 }} ,
					{ 364 ,  {-0.027352858901541984 }} ,
					{ 366 ,  {-0.02734770318561247 }} ,
					{ 367 ,  {-0.02745694357257915 }} ,
					{ 716 ,  {-0.027181443647297063 }} ,
					{ 718 ,  {-0.02718379872551619 }} ,
					{ 719 ,  {-0.02727901255435536 }} ,
					{ 731 ,  {-0.027158535553745047 }} ,
					{ 1434 ,  {-0.027317847605213594 }} ,
					{ 1435 ,  {-0.027514967089663736 }} ,
					{ 1460 ,  {-0.02721556370218873 }} ,
					{ 1461 ,  {-0.02736120479133491 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 88 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 716 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 1434 ) : ( 1435 ) ) ) ) ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 718 ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 90 ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 364 ) : ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_32 <= 0.5758173102203016 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 188 ) : ( 189 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_54 <= 0.7537946200112661 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_8
		
	
		namespace LGBM_Tree_3_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.02000064567770725 }} ,
					{ 12 ,  {-0.0275913181807139 }} ,
					{ 13 ,  {0.03606297957637123 }} ,
					{ 16 ,  {0.0155841350234331 }} ,
					{ 20 ,  {-0.019351082962302757 }} ,
					{ 21 ,  {0.0649199362532618 }} ,
					{ 22 ,  {0.01724262544276088 }} ,
					{ 31 ,  {0.01744030291144569 }} ,
					{ 35 ,  {0.05949401264762166 }} ,
					{ 47 ,  {-0.02773649841917262 }} ,
					{ 57 ,  {-0.027055694566683355 }} ,
					{ 60 ,  {0.01072322539961131 }} ,
					{ 69 ,  {0.07570248909435405 }} ,
					{ 93 ,  {-0.027145048186040167 }} ,
					{ 113 ,  {-0.027236338142114708 }} ,
					{ 137 ,  {0.09636639678908511 }} ,
					{ 224 ,  {-0.02717061144953912 }} ,
					{ 225 ,  {-0.0270649641072789 }} ,
					{ 234 ,  {-0.027263556678096698 }} ,
					{ 235 ,  {-0.027119813827704738 }} ,
					{ 236 ,  {-0.02718322757107755 }} ,
					{ 237 ,  {-0.027088179454751476 }} ,
					{ 238 ,  {-0.027138738421083466 }} ,
					{ 239 ,  {-0.02728176662973594 }} ,
					{ 244 ,  {-0.02722197836646272 }} ,
					{ 245 ,  {-0.02708837499595697 }} ,
					{ 246 ,  {-0.027555730863126855 }} ,
					{ 247 ,  {-0.02725911593005217 }} ,
					{ 272 ,  {0.09208531778244526 }} ,
					{ 368 ,  {-0.027307813800880022 }} ,
					{ 369 ,  {-0.027097875711001314 }} ,
					{ 370 ,  {-0.027300270915339188 }} ,
					{ 371 ,  {-0.027463262039456295 }} ,
					{ 464 ,  {-0.02728240860318995 }} ,
					{ 465 ,  {-0.02715279976666641 }} ,
					{ 467 ,  {-0.02725833685234181 }} ,
					{ 546 ,  {0.08413004602020724 }} ,
					{ 547 ,  {0.08696838829297526 }} ,
					{ 932 ,  {-0.027446591514860244 }} ,
					{ 933 ,  {-0.027315901737553633 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 272 ) : ( ( ( scaler_53 <= -0.961532671523328 ) ? ( 546 ) : ( 547 ) ) ) ) ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_31 <= -1.0360325865241657 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 932 ) : ( 933 ) ) ) : ( 467 ) ) ) ) ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 60 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 244 ) : ( 245 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 246 ) : ( 247 ) ) ) ) ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_8
		
	
		namespace LGBM_Tree_4_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {0.018929975611080396 }} ,
					{ 16 ,  {-0.011827156063455782 }} ,
					{ 18 ,  {-0.027838481959901348 }} ,
					{ 20 ,  {-0.007912280271304944 }} ,
					{ 22 ,  {0.0428411704693142 }} ,
					{ 23 ,  {-0.02771769286730258 }} ,
					{ 28 ,  {0.08423116795650426 }} ,
					{ 29 ,  {0.05433514074602901 }} ,
					{ 30 ,  {0.08147209349244151 }} ,
					{ 31 ,  {0.09214444306706877 }} ,
					{ 35 ,  {-0.027477950255941647 }} ,
					{ 39 ,  {-0.02809003654441606 }} ,
					{ 43 ,  {-0.01822273762425212 }} ,
					{ 69 ,  {-0.027168987406257384 }} ,
					{ 76 ,  {0.03089856989626205 }} ,
					{ 136 ,  {-0.027369192104205017 }} ,
					{ 137 ,  {-0.027214463427070318 }} ,
					{ 154 ,  {0.08083956504959972 }} ,
					{ 155 ,  {0.09895524141350293 }} ,
					{ 337 ,  {-0.02718426025302332 }} ,
					{ 341 ,  {-0.027126635154726464 }} ,
					{ 342 ,  {-0.02723062194577977 }} ,
					{ 343 ,  {-0.027344101290649 }} ,
					{ 672 ,  {-0.027183722600788288 }} ,
					{ 676 ,  {-0.027317772329346925 }} ,
					{ 677 ,  {-0.027147275124230485 }} ,
					{ 681 ,  {-0.027156846472410918 }} ,
					{ 1347 ,  {-0.027448419790496316 }} ,
					{ 1356 ,  {-0.02740981823327406 }} ,
					{ 1358 ,  {-0.027202759938689553 }} ,
					{ 1359 ,  {-0.027298836904921943 }} ,
					{ 1360 ,  {-0.027199245361967918 }} ,
					{ 2714 ,  {-0.02726558916429167 }} ,
					{ 2715 ,  {-0.027389384964942132 }} ,
					{ 2722 ,  {-0.02732148739880007 }} ,
					{ 2723 ,  {-0.027209773190749326 }} ,
					{ 5384 ,  {-0.0272209459785766 }} ,
					{ 5385 ,  {-0.027317364168018124 }} ,
					{ 5386 ,  {-0.027445564196749202 }} ,
					{ 5387 ,  {-0.027289483790115504 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 16 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 76 ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_8 <= 0.6252656114845001 ) ? ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 672 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_12 <= 0.5780681120845275 ) ? ( ( ( scaler_62 <= 0.3358316743005698 ) ? ( 5384 ) : ( 5385 ) ) ) : ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 5386 ) : ( 5387 ) ) ) ) ) : ( 1347 ) ) ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 1356 ) : ( ( ( scaler_46 <= 0.7610977569101317 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_23 <= 0.911593409027679 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 1360 ) : ( ( ( scaler_15 <= 0.8881187628200565 ) ? ( 2722 ) : ( 2723 ) ) ) ) ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( 6 ) : ( ( ( scaler_23 <= -0.8520143281365727 ) ? ( ( ( scaler_5 <= -1.0116016662432779 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_8
		
	
		namespace LGBM_Tree_5_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.011221371281315954 }} ,
					{ 10 ,  {-0.012094952848580842 }} ,
					{ 15 ,  {0.041310712821905245 }} ,
					{ 19 ,  {-0.013446377552733403 }} ,
					{ 23 ,  {0.06458902585215309 }} ,
					{ 24 ,  {0.0021094882179621944 }} ,
					{ 28 ,  {-0.02748031275773287 }} ,
					{ 36 ,  {-0.027484067400708204 }} ,
					{ 45 ,  {0.07473819207098996 }} ,
					{ 50 ,  {-0.02707675940104043 }} ,
					{ 58 ,  {-0.027106121021203557 }} ,
					{ 59 ,  {-0.02718783988473843 }} ,
					{ 75 ,  {-0.02708752352267347 }} ,
					{ 89 ,  {0.10061689286567031 }} ,
					{ 102 ,  {-0.027336595010917536 }} ,
					{ 103 ,  {-0.027130952716738377 }} ,
					{ 106 ,  {-0.027070591994386772 }} ,
					{ 107 ,  {-0.027150090185643985 }} ,
					{ 109 ,  {-0.02717317829989757 }} ,
					{ 111 ,  {-0.027070615637930562 }} ,
					{ 148 ,  {-0.02716884306940236 }} ,
					{ 149 ,  {-0.027348065061031386 }} ,
					{ 176 ,  {0.08977080245375955 }} ,
					{ 208 ,  {-0.027092713694087247 }} ,
					{ 217 ,  {-0.027404032723571038 }} ,
					{ 220 ,  {-0.027242641251618252 }} ,
					{ 221 ,  {-0.02710981168344788 }} ,
					{ 354 ,  {0.08521515467652824 }} ,
					{ 355 ,  {0.08291155920949395 }} ,
					{ 418 ,  {-0.027293792456093598 }} ,
					{ 419 ,  {-0.027075664526108063 }} ,
					{ 421 ,  {-0.02724024426515011 }} ,
					{ 432 ,  {-0.0273133137603306 }} ,
					{ 433 ,  {-0.027191836335113764 }} ,
					{ 840 ,  {-0.02712210529504673 }} ,
					{ 841 ,  {-0.027001862276510614 }} ,
					{ 844 ,  {-0.02720111875736584 }} ,
					{ 845 ,  {-0.02741414785691784 }} ,
					{ 846 ,  {-0.027093080323141512 }} ,
					{ 847 ,  {-0.027215175808764504 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 36 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 10 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 176 ) : ( ( ( scaler_60 <= 1.3866121256028412 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 50 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 208 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( 840 ) : ( 841 ) ) ) : ( 421 ) ) ) : ( ( ( scaler_52 <= -0.3511517010429038 ) ? ( ( ( scaler_12 <= -1.2644158117603561 ) ? ( 844 ) : ( 845 ) ) ) : ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( 846 ) : ( 847 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_11 <= -0.46497723121655854 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_16 <= 0.1671861246601561 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_8
		
	
		namespace LGBM_Tree_6_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.008974560801687004 }} ,
					{ 8 ,  {-0.010879124147658764 }} ,
					{ 10 ,  {-0.02744602094322268 }} ,
					{ 15 ,  {-0.011262902674135662 }} ,
					{ 23 ,  {0.021207691442823605 }} ,
					{ 37 ,  {-0.02708398339448137 }} ,
					{ 38 ,  {-0.02694680694715819 }} ,
					{ 39 ,  {-0.02704622259076858 }} ,
					{ 44 ,  {0.07012226632907757 }} ,
					{ 57 ,  {-0.011202638273713891 }} ,
					{ 72 ,  {-0.027472990986412982 }} ,
					{ 73 ,  {-0.027257937163969778 }} ,
					{ 112 ,  {-0.027182499604705992 }} ,
					{ 113 ,  {-0.027337938218788223 }} ,
					{ 119 ,  {-0.026991915827079355 }} ,
					{ 180 ,  {0.08552230242310356 }} ,
					{ 181 ,  {0.10049952920677392 }} ,
					{ 182 ,  {0.07897251543287676 }} ,
					{ 236 ,  {-0.02704173603344133 }} ,
					{ 366 ,  {0.0865853934420438 }} ,
					{ 367 ,  {0.08329660469614314 }} ,
					{ 464 ,  {-0.02701765929977818 }} ,
					{ 465 ,  {-0.02712041063828277 }} ,
					{ 471 ,  {-0.02708228795836636 }} ,
					{ 474 ,  {-0.027065139854701277 }} ,
					{ 932 ,  {-0.027139216343730108 }} ,
					{ 933 ,  {-0.027340625112035312 }} ,
					{ 934 ,  {-0.02703681268408541 }} ,
					{ 936 ,  {-0.027273415857488617 }} ,
					{ 938 ,  {-0.027403072443668654 }} ,
					{ 939 ,  {-0.027223048359934623 }} ,
					{ 940 ,  {-0.027133341521883243 }} ,
					{ 941 ,  {-0.02724463452755307 }} ,
					{ 950 ,  {-0.027087548382700635 }} ,
					{ 951 ,  {-0.027221873478483122 }} ,
					{ 1871 ,  {-0.027216155769886355 }} ,
					{ 1874 ,  {-0.02707865931876502 }} ,
					{ 1875 ,  {-0.027225956156191375 }} ,
					{ 3740 ,  {-0.02706107214378414 }} ,
					{ 3741 ,  {-0.027170548408989588 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_52 <= -0.3511517010429038 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_52 <= 1.41104489193301 ) ? ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 44 ) : ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( 182 ) : ( ( ( scaler_48 <= 1.1713508339997176 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_52 <= -1.056030338233269 ) ? ( 934 ) : ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 3740 ) : ( 3741 ) ) ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 936 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( 236 ) : ( ( ( scaler_37 <= -0.40421590163902116 ) ? ( 474 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 950 ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_8
		
	
		namespace LGBM_Tree_7_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.02806359469720672 }} ,
					{ 8 ,  {0.04761427339713695 }} ,
					{ 18 ,  {0.09562557651493842 }} ,
					{ 21 ,  {0.014187875972858508 }} ,
					{ 22 ,  {0.004151781394542538 }} ,
					{ 23 ,  {0.08499873112633209 }} ,
					{ 25 ,  {-0.013096958178077142 }} ,
					{ 26 ,  {0.025412749495366906 }} ,
					{ 38 ,  {0.0721816906837356 }} ,
					{ 40 ,  {-0.02724818473747703 }} ,
					{ 41 ,  {-0.028175413763916496 }} ,
					{ 55 ,  {-0.02724306775892367 }} ,
					{ 78 ,  {0.08399234266780534 }} ,
					{ 79 ,  {0.09413160919670026 }} ,
					{ 96 ,  {-0.027168849724698026 }} ,
					{ 97 ,  {-0.027442523937233 }} ,
					{ 109 ,  {-0.026998237963279055 }} ,
					{ 197 ,  {-0.027269591509748232 }} ,
					{ 216 ,  {-0.02703901589494713 }} ,
					{ 217 ,  {-0.02720521721383712 }} ,
					{ 396 ,  {-0.027005458312441527 }} ,
					{ 398 ,  {-0.02693642458570066 }} ,
					{ 399 ,  {-0.027019047599110065 }} ,
					{ 785 ,  {-0.027040245440449043 }} ,
					{ 786 ,  {-0.027000302712240187 }} ,
					{ 795 ,  {-0.027184687359335838 }} ,
					{ 1574 ,  {-0.02703585650075104 }} ,
					{ 1575 ,  {-0.027216067443113525 }} ,
					{ 1588 ,  {-0.027030656650809056 }} ,
					{ 3138 ,  {-0.027022821286346584 }} ,
					{ 3178 ,  {-0.027051242642804837 }} ,
					{ 3179 ,  {-0.02716612842680329 }} ,
					{ 6272 ,  {-0.027056223181562106 }} ,
					{ 6273 ,  {-0.027159859626398154 }} ,
					{ 6278 ,  {-0.027199780323763734 }} ,
					{ 6279 ,  {-0.0270514536527227 }} ,
					{ 12548 ,  {-0.02718889165344837 }} ,
					{ 12549 ,  {-0.02733691279456479 }} ,
					{ 12550 ,  {-0.027065696596711875 }} ,
					{ 12551 ,  {-0.027194369954089512 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 8 ) : ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( 18 ) : ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 38 ) : ( ( ( scaler_35 <= -0.520384469871214 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_8 <= 0.3282876958661803 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_40 <= 2.1651153778940766 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( 6272 ) : ( 6273 ) ) ) : ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 12548 ) : ( 12549 ) ) ) : ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 12550 ) : ( 12551 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( 3138 ) : ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( 6278 ) : ( 6279 ) ) ) ) ) ) ) : ( 785 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 786 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 1574 ) : ( 1575 ) ) ) ) ) ) ) : ( 197 ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 396 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( 1588 ) : ( ( ( scaler_20 <= 0.8044642895176309 ) ? ( 3178 ) : ( 3179 ) ) ) ) ) : ( 795 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 26 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_8
		
	
		namespace LGBM_Tree_8_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.028287904209089467 }} ,
					{ 18 ,  {-0.008965110922707355 }} ,
					{ 20 ,  {-0.01185137913921342 }} ,
					{ 26 ,  {-0.027045962351465128 }} ,
					{ 29 ,  {0.048228491174416306 }} ,
					{ 31 ,  {-0.027489982161322382 }} ,
					{ 32 ,  {-0.027136890674205657 }} ,
					{ 33 ,  {-0.026942449760370052 }} ,
					{ 46 ,  {-0.027204842319903295 }} ,
					{ 47 ,  {0.009778314960408511 }} ,
					{ 49 ,  {-0.026918119866312786 }} ,
					{ 50 ,  {-0.027172379764571205 }} ,
					{ 54 ,  {-0.026951299054062284 }} ,
					{ 55 ,  {-0.026867547604054777 }} ,
					{ 56 ,  {-0.010527446557108775 }} ,
					{ 57 ,  {-0.027255400560369892 }} ,
					{ 60 ,  {-0.026983730044031807 }} ,
					{ 61 ,  {-0.02714152980634509 }} ,
					{ 76 ,  {-0.026949646412530306 }} ,
					{ 78 ,  {-0.02702822817208682 }} ,
					{ 79 ,  {-0.02718757118011221 }} ,
					{ 84 ,  {-0.027157767245358122 }} ,
					{ 85 ,  {-0.026997859443292062 }} ,
					{ 86 ,  {-0.027597184415196097 }} ,
					{ 87 ,  {-0.027231445653157795 }} ,
					{ 88 ,  {-0.02802576311970244 }} ,
					{ 89 ,  {0.059151822225916334 }} ,
					{ 90 ,  {0.03203737092411423 }} ,
					{ 96 ,  {-0.026924284803940324 }} ,
					{ 97 ,  {-0.027093558000945768 }} ,
					{ 102 ,  {-0.026950081321694935 }} ,
					{ 154 ,  {-0.027096958020294434 }} ,
					{ 155 ,  {-0.026940434304500667 }} ,
					{ 183 ,  {0.07017421918008149 }} ,
					{ 207 ,  {-0.0269931480265114 }} ,
					{ 364 ,  {0.07882456655409896 }} ,
					{ 412 ,  {-0.026969591979067953 }} ,
					{ 413 ,  {-0.02715121483383373 }} ,
					{ 730 ,  {0.09849396277184846 }} ,
					{ 731 ,  {0.09027531935619212 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( 76 ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.7475477128849743 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 90 ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( 364 ) : ( ( ( scaler_12 <= -0.15892545745342618 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.8520143281365727 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_29 <= -1.4406700697389458 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_8
		
	
		namespace LGBM_Tree_9_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.025189134981746138 }} ,
					{ 10 ,  {-0.0136991648226141 }} ,
					{ 13 ,  {0.043606296012810374 }} ,
					{ 17 ,  {0.024505332880471218 }} ,
					{ 22 ,  {-0.019750626441393273 }} ,
					{ 24 ,  {0.013428519257900015 }} ,
					{ 28 ,  {0.03460659149247428 }} ,
					{ 47 ,  {0.04312622651129841 }} ,
					{ 51 ,  {-0.012956266327343459 }} ,
					{ 58 ,  {-0.02778426645931233 }} ,
					{ 60 ,  {0.0032081582647535464 }} ,
					{ 61 ,  {-0.027243341792880127 }} ,
					{ 64 ,  {-0.027653509450102556 }} ,
					{ 67 ,  {0.02519576835161392 }} ,
					{ 92 ,  {0.06442377335310838 }} ,
					{ 100 ,  {-0.02770113510183358 }} ,
					{ 101 ,  {-0.027190571136844418 }} ,
					{ 118 ,  {-0.027186796598041157 }} ,
					{ 119 ,  {-0.027370540855246168 }} ,
					{ 126 ,  {-0.02733053932778889 }} ,
					{ 127 ,  {-0.028088489260677998 }} ,
					{ 130 ,  {-0.027172154799746596 }} ,
					{ 132 ,  {-0.02736900693199173 }} ,
					{ 133 ,  {-0.027139237592432804 }} ,
					{ 186 ,  {0.10504051496405575 }} ,
					{ 251 ,  {-0.02732029157769332 }} ,
					{ 262 ,  {-0.02746165639438643 }} ,
					{ 263 ,  {-0.027255590184500883 }} ,
					{ 375 ,  {0.0756543849805316 }} ,
					{ 497 ,  {-0.027403923451446488 }} ,
					{ 499 ,  {-0.02765324386303237 }} ,
					{ 500 ,  {-0.027280819975841916 }} ,
					{ 501 ,  {-0.027126585877499384 }} ,
					{ 748 ,  {0.09338069634648383 }} ,
					{ 749 ,  {0.08528832782477475 }} ,
					{ 993 ,  {-0.027155562319555394 }} ,
					{ 996 ,  {-0.027446146065901057 }} ,
					{ 997 ,  {-0.027229664957037082 }} ,
					{ 1984 ,  {-0.027306715816369443 }} ,
					{ 1985 ,  {-0.0271843115953785 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_64 <= 0.826743595451546 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 64 ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 130 ) : ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 262 ) : ( 263 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_29 <= -1.100099575769813 ) ? ( 10 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( ( ( scaler_13 <= -1.919115970768585 ) ? ( 92 ) : ( ( ( scaler_5 <= 1.0000000180025095e-35 ) ? ( 186 ) : ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= 0.8145052137899623 ) ? ( 748 ) : ( 749 ) ) ) : ( 375 ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 24 ) : ( ( ( scaler_11 <= 0.16463151437420206 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( 28 ) : ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( 58 ) : ( ( ( scaler_5 <= 0.8739877549375447 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_4 <= 0.9323486210092059 ) ? ( 1984 ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 500 ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_8
		
	
		namespace LGBM_Tree_0_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.033179511594212 }} ,
					{ 10 ,  {-0.027169965075710185 }} ,
					{ 11 ,  {-0.026947178264750057 }} ,
					{ 13 ,  {0.02374481043494958 }} ,
					{ 24 ,  {-0.027003792309951744 }} ,
					{ 25 ,  {-0.027434172241838813 }} ,
					{ 32 ,  {0.06289847429231182 }} ,
					{ 33 ,  {0.07881656093319794 }} ,
					{ 35 ,  {0.08620199676816066 }} ,
					{ 59 ,  {-0.02686289922895091 }} ,
					{ 60 ,  {-0.0268107221672898 }} ,
					{ 63 ,  {-0.027059372774582275 }} ,
					{ 68 ,  {0.07801657271037812 }} ,
					{ 69 ,  {0.08189464598300712 }} ,
					{ 114 ,  {-0.026988331913543908 }} ,
					{ 117 ,  {-0.02688542488124218 }} ,
					{ 123 ,  {-0.02687975999984329 }} ,
					{ 124 ,  {-0.026894730266429318 }} ,
					{ 125 ,  {-0.02699487528088021 }} ,
					{ 225 ,  {-0.02683439522393919 }} ,
					{ 230 ,  {-0.02725725004168072 }} ,
					{ 231 ,  {-0.02710301707509158 }} ,
					{ 245 ,  {-0.02689357974282123 }} ,
					{ 448 ,  {-0.026929575303698897 }} ,
					{ 449 ,  {-0.027049024260169682 }} ,
					{ 452 ,  {-0.027107549560042556 }} ,
					{ 454 ,  {-0.027192730378101666 }} ,
					{ 455 ,  {-0.02698791630889944 }} ,
					{ 464 ,  {-0.02696101745836567 }} ,
					{ 466 ,  {-0.026940740216851795 }} ,
					{ 488 ,  {-0.02693191530915421 }} ,
					{ 489 ,  {-0.02701398052058823 }} ,
					{ 906 ,  {-0.027049077503653065 }} ,
					{ 930 ,  {-0.027044634389520497 }} ,
					{ 931 ,  {-0.02719788348848781 }} ,
					{ 934 ,  {-0.026872284816105308 }} ,
					{ 935 ,  {-0.027129692532146615 }} ,
					{ 1815 ,  {-0.026882959912342155 }} ,
					{ 3628 ,  {-0.026939370814584557 }} ,
					{ 3629 ,  {-0.027041128335783333 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( ( ( scaler_20 <= 0.8044642895176309 ) ? ( ( ( scaler_40 <= 1.3132181119696151 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( scaler_24 <= 1.089792159800753 ) ? ( ( ( scaler_13 <= 0.8841429258667266 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 448 ) : ( 449 ) ) ) : ( 225 ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 452 ) : ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 906 ) : ( ( ( scaler_32 <= 1.9071921690884805 ) ? ( ( ( scaler_24 <= 0.19568349086916179 ) ? ( 3628 ) : ( 3629 ) ) ) : ( 1815 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= -1.0000000180025095e-35 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.374642225541209 ) ? ( ( ( scaler_64 <= 2.764605635070462 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 464 ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( 930 ) : ( 931 ) ) ) ) ) : ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( 466 ) : ( ( ( scaler_15 <= 0.5578537276457223 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_53 <= -1.7262355142650903 ) ? ( 60 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 488 ) : ( 489 ) ) ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_9
		
	
		namespace LGBM_Tree_1_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.037561605563167004 }} ,
					{ 10 ,  {-0.013612963204314713 }} ,
					{ 13 ,  {0.08339383505580672 }} ,
					{ 14 ,  {-0.01961169794850113 }} ,
					{ 25 ,  {-0.0016331078692437004 }} ,
					{ 31 ,  {0.024800007652473793 }} ,
					{ 49 ,  {-0.013963900983755021 }} ,
					{ 61 ,  {0.05360924564493568 }} ,
					{ 92 ,  {-0.027077426566860064 }} ,
					{ 93 ,  {-0.027254675164174666 }} ,
					{ 95 ,  {-0.026981034156936486 }} ,
					{ 121 ,  {0.09191344729653474 }} ,
					{ 176 ,  {-0.027036632534386096 }} ,
					{ 178 ,  {-0.027184199537747734 }} ,
					{ 180 ,  {-0.027184472380537117 }} ,
					{ 181 ,  {-0.027016115154670308 }} ,
					{ 189 ,  {-0.026988966924986424 }} ,
					{ 193 ,  {-0.027426045733094435 }} ,
					{ 194 ,  {-0.028746409544737974 }} ,
					{ 195 ,  {-0.027216735845756908 }} ,
					{ 241 ,  {0.07044487912912954 }} ,
					{ 354 ,  {-0.027165598469360116 }} ,
					{ 355 ,  {-0.02730389061895004 }} ,
					{ 358 ,  {-0.027442281081215478 }} ,
					{ 359 ,  {-0.02728899274861217 }} ,
					{ 365 ,  {-0.027162055380857694 }} ,
					{ 376 ,  {-0.027054151280209715 }} ,
					{ 377 ,  {-0.02711158711591661 }} ,
					{ 385 ,  {-0.02734115426610144 }} ,
					{ 480 ,  {0.08838268949865187 }} ,
					{ 481 ,  {0.07554603792957393 }} ,
					{ 728 ,  {-0.027032831441932654 }} ,
					{ 729 ,  {-0.02712599562353369 }} ,
					{ 733 ,  {-0.02732413737076413 }} ,
					{ 734 ,  {-0.027136559904934705 }} ,
					{ 735 ,  {-0.027039298200159725 }} ,
					{ 768 ,  {-0.027020051542016837 }} ,
					{ 769 ,  {-0.027132466963628855 }} ,
					{ 1464 ,  {-0.02728346920959377 }} ,
					{ 1465 ,  {-0.027146591712316682 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_5 <= -1.4829990215384834 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 176 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 178 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 1464 ) : ( 1465 ) ) ) : ( 733 ) ) ) : ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( 376 ) : ( 377 ) ) ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.8706910021045081 ) ? ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_56 <= 2.1721082809082586 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 768 ) : ( 769 ) ) ) : ( 385 ) ) ) : ( 193 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 14 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_36 <= 0.14060793695184343 ) ? ( ( ( scaler_52 <= -1.056030338233269 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_9
		
	
		namespace LGBM_Tree_2_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.0644707962541211 }} ,
					{ 13 ,  {-0.027956946592030546 }} ,
					{ 14 ,  {0.01940490623501412 }} ,
					{ 16 ,  {0.0009263928260292734 }} ,
					{ 20 ,  {0.012441906464458643 }} ,
					{ 25 ,  {0.014797001447221549 }} ,
					{ 31 ,  {-0.027995777962604308 }} ,
					{ 34 ,  {-0.027258986722824737 }} ,
					{ 42 ,  {-0.027476740488752146 }} ,
					{ 43 ,  {-0.027129820316535082 }} ,
					{ 46 ,  {-0.027206279721185472 }} ,
					{ 48 ,  {0.09290661599943977 }} ,
					{ 61 ,  {-0.027303818959972664 }} ,
					{ 70 ,  {-0.027130966564913886 }} ,
					{ 71 ,  {-0.027059972541507812 }} ,
					{ 88 ,  {-0.0270583022454435 }} ,
					{ 90 ,  {-0.027101722852388543 }} ,
					{ 94 ,  {-0.02703137181931488 }} ,
					{ 99 ,  {0.05177632805336584 }} ,
					{ 121 ,  {-0.027062245866199215 }} ,
					{ 190 ,  {-0.027085487457816134 }} ,
					{ 191 ,  {-0.027193565282493705 }} ,
					{ 197 ,  {0.08366542386705672 }} ,
					{ 240 ,  {-0.02729243424287091 }} ,
					{ 241 ,  {-0.02709609225447663 }} ,
					{ 356 ,  {-0.027289156523000138 }} ,
					{ 357 ,  {-0.027028597300810447 }} ,
					{ 364 ,  {-0.027296626469078534 }} ,
					{ 366 ,  {-0.027282383289392406 }} ,
					{ 367 ,  {-0.027416508974533283 }} ,
					{ 392 ,  {0.07562785798064599 }} ,
					{ 393 ,  {0.07785815418528497 }} ,
					{ 717 ,  {-0.02709445250689535 }} ,
					{ 718 ,  {-0.027104943940428863 }} ,
					{ 719 ,  {-0.02720597702444958 }} ,
					{ 731 ,  {-0.02708827975193877 }} ,
					{ 1432 ,  {-0.027254560488860848 }} ,
					{ 1433 ,  {-0.027459684063864 }} ,
					{ 1460 ,  {-0.027148076316090137 }} ,
					{ 1461 ,  {-0.027308224628992864 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 20 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 88 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( 1432 ) : ( 1433 ) ) ) : ( 717 ) ) ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 718 ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 90 ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 364 ) : ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_44 <= 1.0000000180025095e-35 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.846102377688052 ) ? ( 46 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 94 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 48 ) : ( ( ( scaler_29 <= -0.5892438348161141 ) ? ( ( ( scaler_47 <= -1.1869024788858573 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 392 ) : ( 393 ) ) ) : ( 197 ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_6 <= -1.4768258189528949 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_47 <= 0.7384264229304236 ) ? ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_9
		
	
		namespace LGBM_Tree_3_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.019796074541234804 }} ,
					{ 12 ,  {-0.016074527469075776 }} ,
					{ 15 ,  {0.032758555840471076 }} ,
					{ 17 ,  {0.023227609638375977 }} ,
					{ 20 ,  {0.05413443966054426 }} ,
					{ 21 ,  {-0.027938933801238564 }} ,
					{ 22 ,  {0.01672093768947696 }} ,
					{ 26 ,  {-0.02750040281997536 }} ,
					{ 28 ,  {0.015714160980102546 }} ,
					{ 32 ,  {0.05708295454103234 }} ,
					{ 47 ,  {-0.027678102681661237 }} ,
					{ 93 ,  {-0.02706995352231813 }} ,
					{ 109 ,  {-0.026977553166874675 }} ,
					{ 116 ,  {-0.027235103129373606 }} ,
					{ 118 ,  {-0.02749033162103097 }} ,
					{ 119 ,  {-0.027181714489657616 }} ,
					{ 132 ,  {0.08912070217058665 }} ,
					{ 133 ,  {0.08231599542417523 }} ,
					{ 134 ,  {0.07668192541320375 }} ,
					{ 135 ,  {0.08322266228028886 }} ,
					{ 216 ,  {-0.027037244552046244 }} ,
					{ 217 ,  {-0.027190039271075186 }} ,
					{ 220 ,  {-0.027028018794119698 }} ,
					{ 234 ,  {-0.027142521268671605 }} ,
					{ 235 ,  {-0.027007580152942825 }} ,
					{ 368 ,  {-0.027235624580651308 }} ,
					{ 369 ,  {-0.027021227462968086 }} ,
					{ 370 ,  {-0.027225108981234272 }} ,
					{ 371 ,  {-0.027402525635535357 }} ,
					{ 444 ,  {-0.027068470507110254 }} ,
					{ 445 ,  {-0.02699883897958997 }} ,
					{ 446 ,  {-0.027253642432019137 }} ,
					{ 884 ,  {-0.027238817644395244 }} ,
					{ 886 ,  {-0.027180485669907196 }} ,
					{ 894 ,  {-0.02703074596256491 }} ,
					{ 895 ,  {-0.027160706671010837 }} ,
					{ 1770 ,  {-0.027138303306408137 }} ,
					{ 1771 ,  {-0.027002030769308308 }} ,
					{ 1774 ,  {-0.027250798499796475 }} ,
					{ 1775 ,  {-0.027382720006155128 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 132 ) : ( 133 ) ) ) : ( ( ( scaler_54 <= 1.0000000180025095e-35 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 220 ) : ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( 884 ) : ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( 1770 ) : ( 1771 ) ) ) ) ) : ( ( ( scaler_27 <= 1.0000000180025095e-35 ) ? ( 886 ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 1774 ) : ( 1775 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( scaler_14 <= -1.0000000180025095e-35 ) ? ( 446 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 894 ) : ( 895 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 28 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_55 <= -0.3735851870240589 ) ? ( 116 ) : ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_9
		
	
		namespace LGBM_Tree_4_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.028104855160994608 }} ,
					{ 12 ,  {0.07116811934211968 }} ,
					{ 16 ,  {-0.01146748587226313 }} ,
					{ 18 ,  {-0.02773831411454828 }} ,
					{ 20 ,  {-0.00764155108757847 }} ,
					{ 22 ,  {0.040795221268599025 }} ,
					{ 23 ,  {-0.027624366691561278 }} ,
					{ 26 ,  {0.07945751386124382 }} ,
					{ 27 ,  {0.07695971157596194 }} ,
					{ 35 ,  {-0.027446052204273503 }} ,
					{ 39 ,  {-0.02799392427773288 }} ,
					{ 43 ,  {-0.018024476750139757 }} ,
					{ 69 ,  {-0.027128819903587106 }} ,
					{ 76 ,  {0.029548792127823128 }} ,
					{ 136 ,  {-0.027388704966632815 }} ,
					{ 137 ,  {-0.027173106543880894 }} ,
					{ 154 ,  {0.07485408164089598 }} ,
					{ 155 ,  {0.0910880009104294 }} ,
					{ 337 ,  {-0.027099790686741468 }} ,
					{ 340 ,  {-0.0271204281186701 }} ,
					{ 341 ,  {-0.027045822430857652 }} ,
					{ 342 ,  {-0.02715790773365427 }} ,
					{ 343 ,  {-0.02727463906964178 }} ,
					{ 673 ,  {-0.027399824558912163 }} ,
					{ 677 ,  {-0.027012018803009283 }} ,
					{ 1344 ,  {-0.02711920278904268 }} ,
					{ 1352 ,  {-0.0272242397124381 }} ,
					{ 1353 ,  {-0.027101278321335305 }} ,
					{ 1357 ,  {-0.027120299466050712 }} ,
					{ 1358 ,  {-0.027350644795975865 }} ,
					{ 2690 ,  {-0.027338467039392356 }} ,
					{ 2713 ,  {-0.027151313095202485 }} ,
					{ 2719 ,  {-0.02729390843168881 }} ,
					{ 5383 ,  {-0.027184392653729253 }} ,
					{ 5424 ,  {-0.027181134337219377 }} ,
					{ 5425 ,  {-0.02734781277732087 }} ,
					{ 5436 ,  {-0.027111126574435235 }} ,
					{ 5437 ,  {-0.027223305073546134 }} ,
					{ 10764 ,  {-0.027347043751591738 }} ,
					{ 10765 ,  {-0.02720354092941838 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 16 ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_52 <= -0.8798106789356778 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 76 ) : ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_8 <= 0.6252656114845001 ) ? ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_6 <= -0.31365853924047515 ) ? ( 1344 ) : ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 2690 ) : ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 10764 ) : ( 10765 ) ) ) : ( 5383 ) ) ) ) ) ) ) : ( 673 ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 1352 ) : ( 1353 ) ) ) : ( 677 ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_39 <= 0.11828706023594954 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 5424 ) : ( 5425 ) ) ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( scaler_14 <= -0.5832918972702341 ) ? ( 1358 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( ( ( scaler_47 <= 0.21333672243507412 ) ? ( 5436 ) : ( 5437 ) ) ) : ( 2719 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( 340 ) : ( 341 ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( ( ( scaler_21 <= 0.4118202175335114 ) ? ( 12 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_9
		
	
		namespace LGBM_Tree_5_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {-0.018040969569090362 }} ,
					{ 15 ,  {0.03929575408180884 }} ,
					{ 16 ,  {0.03466584237591377 }} ,
					{ 17 ,  {-0.027576022905834493 }} ,
					{ 19 ,  {-0.027359524104355867 }} ,
					{ 25 ,  {0.0026548459169045266 }} ,
					{ 28 ,  {-0.027255351456347766 }} ,
					{ 36 ,  {-0.02719188174974755 }} ,
					{ 40 ,  {0.07716478433671098 }} ,
					{ 41 ,  {0.056656018129618235 }} ,
					{ 43 ,  {0.07388074160185622 }} ,
					{ 48 ,  {-0.027287315844347994 }} ,
					{ 58 ,  {-0.02702633578405645 }} ,
					{ 74 ,  {-0.027014376012722392 }} ,
					{ 75 ,  {-0.02711733836544263 }} ,
					{ 85 ,  {0.08708761146116534 }} ,
					{ 98 ,  {-0.02714334827666852 }} ,
					{ 99 ,  {-0.027001232720277796 }} ,
					{ 106 ,  {-0.027034712079684595 }} ,
					{ 107 ,  {-0.02693956852450377 }} ,
					{ 109 ,  {-0.02710132738019962 }} ,
					{ 111 ,  {-0.02703139231992649 }} ,
					{ 118 ,  {-0.02706378368956243 }} ,
					{ 119 ,  {-0.027212798863550915 }} ,
					{ 168 ,  {0.08296403376052924 }} ,
					{ 169 ,  {0.07804711164351129 }} ,
					{ 208 ,  {-0.02707490067438822 }} ,
					{ 209 ,  {-0.02695150286704568 }} ,
					{ 217 ,  {-0.02715520897530965 }} ,
					{ 220 ,  {-0.027208774650916936 }} ,
					{ 221 ,  {-0.027014309852401927 }} ,
					{ 421 ,  {-0.027373321217760423 }} ,
					{ 423 ,  {-0.027023699705097395 }} ,
					{ 432 ,  {-0.02738032055021647 }} ,
					{ 433 ,  {-0.027197890065264737 }} ,
					{ 840 ,  {-0.027202668911932893 }} ,
					{ 841 ,  {-0.02705730150821954 }} ,
					{ 845 ,  {-0.027184967428573587 }} ,
					{ 1688 ,  {-0.027008053797376776 }} ,
					{ 1689 ,  {-0.02711689927026864 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_64 <= 2.2801401251657336 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_60 <= 0.597127058200025 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( ( ( scaler_36 <= 0.6139861612387604 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( 168 ) : ( 169 ) ) ) : ( 85 ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 48 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( 840 ) : ( 841 ) ) ) : ( 421 ) ) ) : ( ( ( scaler_62 <= 0.7448930143895027 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 1688 ) : ( 1689 ) ) ) : ( 845 ) ) ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= 0.9847887654326736 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_23 <= 1.07192138513352 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_9
		
	
		namespace LGBM_Tree_6_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.008759501594465112 }} ,
					{ 9 ,  {-0.010422502788927826 }} ,
					{ 10 ,  {-0.027366173014878523 }} ,
					{ 15 ,  {-0.010964139412828363 }} ,
					{ 16 ,  {-0.027371899934485633 }} ,
					{ 22 ,  {0.018798220153403676 }} ,
					{ 47 ,  {0.05098449037498725 }} ,
					{ 57 ,  {-0.010697920003749474 }} ,
					{ 68 ,  {-0.027214965876442145 }} ,
					{ 69 ,  {-0.026955009847175568 }} ,
					{ 70 ,  {-0.026869371843439523 }} ,
					{ 71 ,  {-0.02697361234825224 }} ,
					{ 92 ,  {0.09233752746225485 }} ,
					{ 112 ,  {-0.027078626080637165 }} ,
					{ 113 ,  {-0.02721848509325675 }} ,
					{ 119 ,  {-0.026915987910893214 }} ,
					{ 186 ,  {0.08431428636745691 }} ,
					{ 232 ,  {-0.026972362166052418 }} ,
					{ 374 ,  {0.07469649829013598 }} ,
					{ 470 ,  {-0.027073340298593252 }} ,
					{ 471 ,  {-0.0269772929612432 }} ,
					{ 472 ,  {-0.026983024603109525 }} ,
					{ 473 ,  {-0.026890202457132802 }} ,
					{ 474 ,  {-0.026991454762602476 }} ,
					{ 750 ,  {0.08031266202712349 }} ,
					{ 751 ,  {0.07746850785917316 }} ,
					{ 932 ,  {-0.02693971720328049 }} ,
					{ 933 ,  {-0.027068582326294638 }} ,
					{ 934 ,  {-0.026986700051720627 }} ,
					{ 935 ,  {-0.027261233044084645 }} ,
					{ 938 ,  {-0.027067415641487375 }} ,
					{ 939 ,  {-0.026948875007004453 }} ,
					{ 950 ,  {-0.027018850464878265 }} ,
					{ 951 ,  {-0.027162123822780455 }} ,
					{ 1872 ,  {-0.02708875708391477 }} ,
					{ 1874 ,  {-0.027023327452033487 }} ,
					{ 1875 ,  {-0.027173374742361745 }} ,
					{ 3747 ,  {-0.027140434427408346 }} ,
					{ 7492 ,  {-0.027376578498556625 }} ,
					{ 7493 ,  {-0.027225923232777068 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 16 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_65 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 22 ) : ( ( ( scaler_43 <= 0.9700411616699182 ) ? ( ( ( scaler_56 <= 0.7590614128302521 ) ? ( 92 ) : ( ( ( scaler_12 <= -1.2644158117603561 ) ? ( 186 ) : ( ( ( scaler_43 <= -0.3567397062131727 ) ? ( 374 ) : ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( 750 ) : ( 751 ) ) ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_46 <= 0.6021878438436793 ) ? ( ( ( scaler_45 <= 0.9615169652523486 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 232 ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 1872 ) : ( ( ( scaler_47 <= 0.91345632309554 ) ? ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 7492 ) : ( 7493 ) ) ) : ( 3747 ) ) ) ) ) : ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_63 <= 0.8145052137899623 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 472 ) : ( 473 ) ) ) : ( ( ( scaler_37 <= -0.40421590163902116 ) ? ( 474 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 950 ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_9
		
	
		namespace LGBM_Tree_7_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.02675379548567553 }} ,
					{ 8 ,  {-0.004206434963616369 }} ,
					{ 11 ,  {0.025953062676141288 }} ,
					{ 19 ,  {0.00039601828260452977 }} ,
					{ 20 ,  {-0.02718024252086775 }} ,
					{ 21 ,  {-0.027964317937008955 }} ,
					{ 25 ,  {0.02869678561771522 }} ,
					{ 36 ,  {0.09108029030177144 }} ,
					{ 48 ,  {-0.02704248698850883 }} ,
					{ 49 ,  {-0.027380317618613148 }} ,
					{ 54 ,  {-0.0012563418292988993 }} ,
					{ 75 ,  {0.06634348894596119 }} ,
					{ 110 ,  {-0.0270480530876583 }} ,
					{ 111 ,  {-0.027304743611451056 }} ,
					{ 148 ,  {0.09085908174078644 }} ,
					{ 210 ,  {-0.02691882231025748 }} ,
					{ 214 ,  {-0.02686786452790012 }} ,
					{ 298 ,  {0.07723257663325626 }} ,
					{ 299 ,  {0.08448972540008805 }} ,
					{ 418 ,  {-0.026902406039208532 }} ,
					{ 419 ,  {-0.027014379879928642 }} ,
					{ 422 ,  {-0.026972583511753512 }} ,
					{ 423 ,  {-0.027174547030376247 }} ,
					{ 424 ,  {-0.027132208871208676 }} ,
					{ 425 ,  {-0.026983382080298237 }} ,
					{ 426 ,  {-0.02687271344942624 }} ,
					{ 430 ,  {-0.02692816502728712 }} ,
					{ 431 ,  {-0.02703081212805719 }} ,
					{ 834 ,  {-0.027011429782495905 }} ,
					{ 854 ,  {-0.026934220432548846 }} ,
					{ 1664 ,  {-0.02702097433034026 }} ,
					{ 1666 ,  {-0.026970617150412615 }} ,
					{ 1670 ,  {-0.027338270338417126 }} ,
					{ 1671 ,  {-0.027138345433821848 }} ,
					{ 1710 ,  {-0.026948239528829628 }} ,
					{ 1711 ,  {-0.027052189740810563 }} ,
					{ 3330 ,  {-0.02724767236933347 }} ,
					{ 3331 ,  {-0.027086164239869256 }} ,
					{ 3334 ,  {-0.027169411624395762 }} ,
					{ 3335 ,  {-0.027022717927693386 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_27 <= 0.3227207796806266 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 8 ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( ( ( scaler_54 <= -1.7216624066970858 ) ? ( 36 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( 148 ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 298 ) : ( 299 ) ) ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 1664 ) : ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( 3330 ) : ( 3331 ) ) ) ) ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 1666 ) : ( ( ( scaler_22 <= 0.708463064338002 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 834 ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 1670 ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 210 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_38 <= 0.37679441759687454 ) ? ( 424 ) : ( 425 ) ) ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 426 ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 854 ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 1710 ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 214 ) : ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 54 ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_9
		
	
		namespace LGBM_Tree_8_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-0.001366241594816994 }} ,
					{ 21 ,  {-0.011515262358229654 }} ,
					{ 26 ,  {-0.026988000216388537 }} ,
					{ 29 ,  {-0.011088341676752073 }} ,
					{ 31 ,  {0.06320062665607805 }} ,
					{ 36 ,  {0.006051276289969665 }} ,
					{ 38 ,  {-0.02690241422961964 }} ,
					{ 46 ,  {-0.027394755989696564 }} ,
					{ 47 ,  {0.009473857235967227 }} ,
					{ 49 ,  {-0.02684757218047066 }} ,
					{ 50 ,  {-0.027120878596975952 }} ,
					{ 54 ,  {-0.026881084052263932 }} ,
					{ 55 ,  {-0.02679094884839353 }} ,
					{ 56 ,  {-0.027260073894922545 }} ,
					{ 60 ,  {-0.027549118065409824 }} ,
					{ 61 ,  {-0.02685912103119198 }} ,
					{ 74 ,  {-0.026887672487424033 }} ,
					{ 75 ,  {-0.02707609170995596 }} ,
					{ 78 ,  {-0.027127675414189773 }} ,
					{ 79 ,  {-0.026969925095618213 }} ,
					{ 80 ,  {-0.027066047570673164 }} ,
					{ 81 ,  {-0.026922222428330644 }} ,
					{ 82 ,  {-0.027189124386660848 }} ,
					{ 83 ,  {-0.027550278254581992 }} ,
					{ 88 ,  {-0.019862081332973625 }} ,
					{ 89 ,  {0.061005335698941524 }} ,
					{ 90 ,  {0.028299418479735907 }} ,
					{ 96 ,  {-0.026853106171400517 }} ,
					{ 97 ,  {-0.027042324223610033 }} ,
					{ 102 ,  {-0.026885779098984687 }} ,
					{ 114 ,  {-0.027036273158905402 }} ,
					{ 115 ,  {-0.026900293053007618 }} ,
					{ 182 ,  {0.06143504509172202 }} ,
					{ 207 ,  {-0.026932243157283344 }} ,
					{ 367 ,  {0.07377024319336321 }} ,
					{ 412 ,  {-0.02690493330946947 }} ,
					{ 413 ,  {-0.027102994674243278 }} ,
					{ 732 ,  {0.09353499141674865 }} ,
					{ 1466 ,  {0.07872430163282626 }} ,
					{ 1467 ,  {0.08680088972769595 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 8 ) : ( ( ( scaler_38 <= -0.4680387515195381 ) ? ( ( ( scaler_20 <= -0.4291825262850748 ) ? ( 36 ) : ( ( ( scaler_30 <= -1.392368631718952 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 38 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_7 <= 1.531899111088587 ) ? ( ( ( scaler_28 <= -0.908540753486804 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( scaler_52 <= -0.8798106789356778 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 90 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 182 ) : ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 732 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 1466 ) : ( 1467 ) ) ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.8520143281365727 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_29 <= -1.4406700697389458 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( ( ( scaler_40 <= 1.8811496225859226 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_9
		
	
		namespace LGBM_Tree_9_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.024097409202537223 }} ,
					{ 10 ,  {-0.01349925647297709 }} ,
					{ 13 ,  {0.04098639022929621 }} ,
					{ 16 ,  {0.023646047181329566 }} ,
					{ 22 ,  {-0.019554420059937787 }} ,
					{ 24 ,  {0.012984121245239922 }} ,
					{ 29 ,  {0.03347534628629469 }} ,
					{ 46 ,  {0.0414482845545384 }} ,
					{ 50 ,  {-0.01261597676657334 }} ,
					{ 56 ,  {-0.027575641330261275 }} ,
					{ 57 ,  {-0.027084654848408704 }} ,
					{ 60 ,  {0.003268659054239046 }} ,
					{ 68 ,  {-0.02709344947858445 }} ,
					{ 70 ,  {-0.02739418511569354 }} ,
					{ 71 ,  {0.026578993247622223 }} ,
					{ 95 ,  {0.06769155721669541 }} ,
					{ 102 ,  {-0.027611548001121623 }} ,
					{ 122 ,  {-0.02726994842059635 }} ,
					{ 123 ,  {-0.027090282200597927 }} ,
					{ 126 ,  {-0.02725323828659398 }} ,
					{ 127 ,  {-0.028008005937346023 }} ,
					{ 138 ,  {-0.027435690239600685 }} ,
					{ 188 ,  {0.09679887284005342 }} ,
					{ 206 ,  {-0.027003784320238058 }} ,
					{ 207 ,  {-0.0271651585416619 }} ,
					{ 251 ,  {-0.027244364233971793 }} ,
					{ 278 ,  {-0.027282336460721496 }} ,
					{ 279 ,  {-0.02713418825804728 }} ,
					{ 378 ,  {0.08444413240222494 }} ,
					{ 379 ,  {0.07655182603990728 }} ,
					{ 497 ,  {-0.02734727707185491 }} ,
					{ 499 ,  {-0.027594160533394876 }} ,
					{ 500 ,  {-0.02721581610163068 }} ,
					{ 992 ,  {-0.027127255504692162 }} ,
					{ 993 ,  {-0.027267419160408743 }} ,
					{ 996 ,  {-0.027395736843450237 }} ,
					{ 997 ,  {-0.027152948357937624 }} ,
					{ 1002 ,  {-0.026952125527828275 }} ,
					{ 2006 ,  {-0.02710482512828562 }} ,
					{ 2007 ,  {-0.02702745298419745 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_47 <= -0.3117529780602753 ) ? ( 16 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 68 ) : ( ( ( scaler_38 <= -0.9749386529893856 ) ? ( 138 ) : ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 278 ) : ( 279 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_29 <= -1.100099575769813 ) ? ( 10 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_12 <= -1.2644158117603561 ) ? ( 46 ) : ( ( ( scaler_38 <= -0.8059720191661032 ) ? ( ( ( scaler_12 <= 0.2095713273155506 ) ? ( 188 ) : ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 378 ) : ( 379 ) ) ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 24 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 50 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 102 ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 206 ) : ( 207 ) ) ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 60 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 992 ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 500 ) : ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 1002 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 2006 ) : ( 2007 ) ) ) ) ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_9
		
	
		namespace LGBM_Tree_0_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.01050573432050114 }} ,
					{ 10 ,  {0.024754320692811926 }} ,
					{ 12 ,  {0.02321002109482461 }} ,
					{ 16 ,  {-0.029238270231886177 }} ,
					{ 17 ,  {-0.026962745984154792 }} ,
					{ 22 ,  {0.06655447126716006 }} ,
					{ 26 ,  {-0.026950502875960722 }} ,
					{ 27 ,  {-0.027325754538969724 }} ,
					{ 47 ,  {0.07847594811188413 }} ,
					{ 59 ,  {-0.026813315857595055 }} ,
					{ 60 ,  {-0.026735615097151486 }} ,
					{ 63 ,  {-0.027005508318783573 }} ,
					{ 93 ,  {0.07659410994234095 }} ,
					{ 114 ,  {-0.026927575405250693 }} ,
					{ 123 ,  {-0.026808372730962954 }} ,
					{ 124 ,  {-0.02682124801958053 }} ,
					{ 125 ,  {-0.02693256237580449 }} ,
					{ 184 ,  {0.07359575267811015 }} ,
					{ 185 ,  {0.07232140551352116 }} ,
					{ 224 ,  {-0.026922548813353393 }} ,
					{ 225 ,  {-0.026764588514007138 }} ,
					{ 230 ,  {-0.02721727320138592 }} ,
					{ 231 ,  {-0.027051436557102043 }} ,
					{ 232 ,  {-0.026886408239854116 }} ,
					{ 245 ,  {-0.026820502991071672 }} ,
					{ 452 ,  {-0.027055233503473948 }} ,
					{ 454 ,  {-0.02714211466800184 }} ,
					{ 455 ,  {-0.026922865449917083 }} ,
					{ 466 ,  {-0.026981644407904057 }} ,
					{ 467 ,  {-0.02715733419761164 }} ,
					{ 468 ,  {-0.026857155329985557 }} ,
					{ 469 ,  {-0.026949308822981705 }} ,
					{ 470 ,  {-0.02679800074469555 }} ,
					{ 471 ,  {-0.027075768199942507 }} ,
					{ 488 ,  {-0.02685963308596591 }} ,
					{ 489 ,  {-0.026951089371055906 }} ,
					{ 906 ,  {-0.026988085034466827 }} ,
					{ 1815 ,  {-0.02680646984481055 }} ,
					{ 3628 ,  {-0.026871150141413183 }} ,
					{ 3629 ,  {-0.026982460347168332 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 10 ) : ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( 22 ) : ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 184 ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 12 ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 452 ) : ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 906 ) : ( ( ( scaler_32 <= 1.9071921690884805 ) ? ( ( ( scaler_24 <= 0.19568349086916179 ) ? ( 3628 ) : ( 3629 ) ) ) : ( 1815 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= 2.764605635070462 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 232 ) : ( ( ( scaler_21 <= 1.0000000180025095e-35 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( ( ( scaler_46 <= 1.0789175830430369 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( scaler_15 <= 0.5578537276457223 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_53 <= -1.7262355142650903 ) ? ( 60 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 488 ) : ( 489 ) ) ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_10
		
	
		namespace LGBM_Tree_1_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.035583346497455585 }} ,
					{ 10 ,  {-0.013415713687694886 }} ,
					{ 13 ,  {0.07737375180744818 }} ,
					{ 14 ,  {-0.019386759445062456 }} ,
					{ 25 ,  {-0.0015067784517821434 }} ,
					{ 31 ,  {0.02698928200877398 }} ,
					{ 49 ,  {-0.013748350819716357 }} ,
					{ 61 ,  {0.05008845913710952 }} ,
					{ 92 ,  {-0.027007055754606553 }} ,
					{ 93 ,  {-0.02718729772786658 }} ,
					{ 95 ,  {-0.026898960035914656 }} ,
					{ 121 ,  {0.09059712817710776 }} ,
					{ 176 ,  {-0.02695900934203383 }} ,
					{ 178 ,  {-0.02712160253784664 }} ,
					{ 180 ,  {-0.02712108408079719 }} ,
					{ 181 ,  {-0.026937170152856155 }} ,
					{ 188 ,  {-0.026997929213166894 }} ,
					{ 189 ,  {-0.026907040843085428 }} ,
					{ 193 ,  {-0.027346980605508886 }} ,
					{ 194 ,  {-0.02862367699194418 }} ,
					{ 195 ,  {-0.02713451887975334 }} ,
					{ 241 ,  {0.06688233747091805 }} ,
					{ 354 ,  {-0.027097495633674085 }} ,
					{ 355 ,  {-0.027248875271637493 }} ,
					{ 358 ,  {-0.027399156127732163 }} ,
					{ 359 ,  {-0.027231718806695407 }} ,
					{ 365 ,  {-0.027098414443986776 }} ,
					{ 385 ,  {-0.027267440478693613 }} ,
					{ 480 ,  {0.0840193020528699 }} ,
					{ 481 ,  {0.07565532186673854 }} ,
					{ 728 ,  {-0.02695560600859183 }} ,
					{ 729 ,  {-0.027054054243116323 }} ,
					{ 733 ,  {-0.027271736887418463 }} ,
					{ 734 ,  {-0.027063595788440743 }} ,
					{ 735 ,  {-0.02696511560683544 }} ,
					{ 768 ,  {-0.02706183413352757 }} ,
					{ 769 ,  {-0.026942716966410957 }} ,
					{ 1464 ,  {-0.02722767106323819 }} ,
					{ 2930 ,  {-0.027020773478051836 }} ,
					{ 2931 ,  {-0.027145980340545252 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_5 <= -1.4829990215384834 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 176 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 178 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 1464 ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 2930 ) : ( 2931 ) ) ) ) ) : ( 733 ) ) ) : ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_40 <= 1.5971838672777687 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.8706910021045081 ) ? ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_56 <= 2.1721082809082586 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( 768 ) : ( 769 ) ) ) : ( 385 ) ) ) : ( 193 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 14 ) : ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_39 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_52 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_10
		
	
		namespace LGBM_Tree_2_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.06012175420949887 }} ,
					{ 13 ,  {-0.02781424495048614 }} ,
					{ 14 ,  {0.011884706530402788 }} ,
					{ 17 ,  {0.0009526427740169964 }} ,
					{ 21 ,  {0.012702941734418039 }} ,
					{ 24 ,  {0.0001140611381033735 }} ,
					{ 31 ,  {-0.027534541830618965 }} ,
					{ 32 ,  {-0.027780815209384992 }} ,
					{ 40 ,  {-0.02728705151919012 }} ,
					{ 41 ,  {-0.02707816338846597 }} ,
					{ 46 ,  {-0.027127363491867375 }} ,
					{ 51 ,  {0.020378514826029648 }} ,
					{ 61 ,  {-0.027022342513041343 }} ,
					{ 66 ,  {-0.02715646979003411 }} ,
					{ 88 ,  {-0.02697997877671124 }} ,
					{ 90 ,  {-0.027027478232213544 }} ,
					{ 95 ,  {-0.026958117703366327 }} ,
					{ 101 ,  {0.08426993376766913 }} ,
					{ 120 ,  {-0.027010933511326975 }} ,
					{ 121 ,  {-0.027254680356349117 }} ,
					{ 135 ,  {-0.026962900302420607 }} ,
					{ 188 ,  {-0.02700349521187023 }} ,
					{ 189 ,  {-0.02713755079906004 }} ,
					{ 201 ,  {0.06341855659973213 }} ,
					{ 268 ,  {-0.027160080531869524 }} ,
					{ 269 ,  {-0.027013333783446277 }} ,
					{ 356 ,  {-0.0272312070961256 }} ,
					{ 357 ,  {-0.02695138478273261 }} ,
					{ 359 ,  {-0.027052362154165413 }} ,
					{ 364 ,  {-0.026994364194419525 }} ,
					{ 365 ,  {-0.027302935301761058 }} ,
					{ 366 ,  {-0.027423696270891293 }} ,
					{ 400 ,  {0.07692659323517329 }} ,
					{ 401 ,  {0.07176459866367171 }} ,
					{ 716 ,  {-0.02703046742198169 }} ,
					{ 734 ,  {-0.02732277156112123 }} ,
					{ 1434 ,  {-0.027161155083708734 }} ,
					{ 1435 ,  {-0.02736335385892418 }} ,
					{ 1470 ,  {-0.027066620746192878 }} ,
					{ 1471 ,  {-0.027203085647702088 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 32 ) : ( ( ( scaler_13 <= -0.8997490992648355 ) ? ( 66 ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_36 <= -0.17497754590610112 ) ? ( 268 ) : ( 269 ) ) ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_62 <= -2.3230670362774934 ) ? ( ( ( scaler_22 <= 0.546235126571496 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 88 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 716 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 1434 ) : ( 1435 ) ) ) ) ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 90 ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( 364 ) : ( 365 ) ) ) : ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 366 ) : ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 734 ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 1470 ) : ( 1471 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= -1.6356339642850823 ) ? ( 46 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.4779497429770217 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 24 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 400 ) : ( 401 ) ) ) : ( 201 ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_10
		
	
		namespace LGBM_Tree_3_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.019575876163369726 }} ,
					{ 12 ,  {-0.027395525800978156 }} ,
					{ 13 ,  {0.036044337294183035 }} ,
					{ 16 ,  {0.013433613457845717 }} ,
					{ 20 ,  {0.05058562768203655 }} ,
					{ 21 ,  {-0.027849851851064242 }} ,
					{ 22 ,  {0.016177241361323327 }} ,
					{ 34 ,  {0.054167413881848675 }} ,
					{ 47 ,  {-0.02761133657594079 }} ,
					{ 57 ,  {-0.026902054977906372 }} ,
					{ 60 ,  {-0.010324061280454691 }} ,
					{ 62 ,  {0.04239492004171138 }} ,
					{ 63 ,  {-0.027618986000195342 }} ,
					{ 71 ,  {0.08193090113199415 }} ,
					{ 93 ,  {-0.026996881315107548 }} ,
					{ 112 ,  {-0.02696535766522583 }} ,
					{ 113 ,  {-0.027117367885693206 }} ,
					{ 118 ,  {-0.026947322958970434 }} ,
					{ 123 ,  {-0.02727186383909517 }} ,
					{ 140 ,  {0.07878881495814129 }} ,
					{ 233 ,  {-0.026937196725200892 }} ,
					{ 238 ,  {-0.027208834178943504 }} ,
					{ 244 ,  {-0.027160497340899828 }} ,
					{ 282 ,  {0.069442924032487 }} ,
					{ 283 ,  {0.07465741126732274 }} ,
					{ 368 ,  {-0.027151430006594146 }} ,
					{ 369 ,  {-0.026941002853696324 }} ,
					{ 370 ,  {-0.02715097508675961 }} ,
					{ 371 ,  {-0.027342663412312524 }} ,
					{ 465 ,  {-0.027164496887986746 }} ,
					{ 468 ,  {-0.02732855664497131 }} ,
					{ 469 ,  {-0.027150905599598697 }} ,
					{ 470 ,  {-0.02716563675136084 }} ,
					{ 471 ,  {-0.027013900342055766 }} ,
					{ 478 ,  {-0.026962277226235055 }} ,
					{ 479 ,  {-0.027099955390238933 }} ,
					{ 490 ,  {-0.02710053951724403 }} ,
					{ 491 ,  {-0.026926528724556715 }} ,
					{ 928 ,  {-0.027122616973314764 }} ,
					{ 929 ,  {-0.026963415750436998 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 34 ) : ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 140 ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_12 <= -0.5274222422224029 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( scaler_56 <= 0.557197574533394 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_21 <= 1.2696049002348533 ) ? ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( 233 ) ) ) : ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 118 ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 238 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 60 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_55 <= -0.3735851870240589 ) ? ( 244 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_10
		
	
		namespace LGBM_Tree_4_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03093399375266553 }} ,
					{ 12 ,  {0.07428271914283684 }} ,
					{ 16 ,  {-0.011042424610416678 }} ,
					{ 18 ,  {-0.027642069968278473 }} ,
					{ 20 ,  {-0.007332052303830332 }} ,
					{ 22 ,  {0.04004228848207544 }} ,
					{ 23 ,  {-0.02763115006570435 }} ,
					{ 26 ,  {0.07073433721901307 }} ,
					{ 27 ,  {0.07226815773857014 }} ,
					{ 35 ,  {-0.02737809466051477 }} ,
					{ 39 ,  {-0.027908264194900712 }} ,
					{ 43 ,  {-0.017801429384734852 }} ,
					{ 69 ,  {-0.02700328165010032 }} ,
					{ 76 ,  {0.02825643985040563 }} ,
					{ 136 ,  {-0.027250354452844322 }} ,
					{ 137 ,  {-0.027059558431795763 }} ,
					{ 154 ,  {0.06966691630311687 }} ,
					{ 155 ,  {0.08464772467969908 }} ,
					{ 337 ,  {-0.02702388404486516 }} ,
					{ 340 ,  {-0.027008377882380277 }} ,
					{ 341 ,  {-0.027059282326401826 }} ,
					{ 342 ,  {-0.027087985743413968 }} ,
					{ 343 ,  {-0.027214266593297887 }} ,
					{ 673 ,  {-0.02734305591936393 }} ,
					{ 676 ,  {-0.027130512764979922 }} ,
					{ 677 ,  {-0.026988205973686605 }} ,
					{ 1344 ,  {-0.027046026137128722 }} ,
					{ 1358 ,  {-0.02729981675371796 }} ,
					{ 2690 ,  {-0.027280047536002546 }} ,
					{ 2713 ,  {-0.02707376616499942 }} ,
					{ 2714 ,  {-0.027003956211199383 }} ,
					{ 2715 ,  {-0.02707667793780005 }} ,
					{ 2719 ,  {-0.02723096593172283 }} ,
					{ 5383 ,  {-0.027107376786210585 }} ,
					{ 5424 ,  {-0.027112259187095242 }} ,
					{ 5425 ,  {-0.027290094700286583 }} ,
					{ 5436 ,  {-0.027032048801722143 }} ,
					{ 5437 ,  {-0.02715827098637162 }} ,
					{ 10764 ,  {-0.027284704809889045 }} ,
					{ 10765 ,  {-0.02712595338465994 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_5 <= -2.6614924097764976 ) ? ( 16 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 76 ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 20 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_8 <= 0.6252656114845001 ) ? ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_6 <= -0.31365853924047515 ) ? ( 1344 ) : ( ( ( scaler_30 <= 0.23863501513667 ) ? ( 2690 ) : ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( 10764 ) : ( 10765 ) ) ) : ( 5383 ) ) ) ) ) ) ) : ( 673 ) ) ) : ( 337 ) ) ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_39 <= 0.11828706023594954 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 5424 ) : ( 5425 ) ) ) : ( 2713 ) ) ) : ( ( ( scaler_21 <= -0.6175214017080987 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( scaler_14 <= -0.5832918972702341 ) ? ( 1358 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 5436 ) : ( 5437 ) ) ) : ( 2719 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 340 ) : ( 341 ) ) ) : ( ( ( scaler_23 <= 0.911593409027679 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_61 <= -1.9719022025345232 ) ? ( 12 ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_10
		
	
		namespace LGBM_Tree_5_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {-0.017750919645136646 }} ,
					{ 15 ,  {0.03701769502983215 }} ,
					{ 16 ,  {0.0325682838890104 }} ,
					{ 17 ,  {-0.027472950326640034 }} ,
					{ 19 ,  {-0.02730084124381459 }} ,
					{ 24 ,  {0.003122265450679281 }} ,
					{ 28 ,  {-0.02737262763114603 }} ,
					{ 36 ,  {-0.02712245448097969 }} ,
					{ 40 ,  {0.07193050758965029 }} ,
					{ 41 ,  {0.053085306933996136 }} ,
					{ 50 ,  {-0.02693151817782094 }} ,
					{ 58 ,  {-0.02695376276163057 }} ,
					{ 59 ,  {-0.02706032980942046 }} ,
					{ 74 ,  {-0.02693817015256324 }} ,
					{ 75 ,  {-0.027046798560561365 }} ,
					{ 84 ,  {0.07416872104956662 }} ,
					{ 85 ,  {0.06808402163054571 }} ,
					{ 86 ,  {0.07362874215505419 }} ,
					{ 87 ,  {0.08324869070717425 }} ,
					{ 102 ,  {-0.027242137241948478 }} ,
					{ 103 ,  {-0.02698668149041379 }} ,
					{ 106 ,  {-0.02700519013345569 }} ,
					{ 109 ,  {-0.027032706505913853 }} ,
					{ 111 ,  {-0.026960816877205612 }} ,
					{ 208 ,  {-0.027009563386593813 }} ,
					{ 209 ,  {-0.02687679812945758 }} ,
					{ 214 ,  {-0.026951039375078006 }} ,
					{ 215 ,  {-0.026852094189817266 }} ,
					{ 217 ,  {-0.027097502132348607 }} ,
					{ 220 ,  {-0.027155015324465123 }} ,
					{ 221 ,  {-0.026941132297199685 }} ,
					{ 421 ,  {-0.027330952838556036 }} ,
					{ 432 ,  {-0.02732705452996195 }} ,
					{ 433 ,  {-0.027139377868881043 }} ,
					{ 840 ,  {-0.027143973980891224 }} ,
					{ 841 ,  {-0.02698432912346745 }} ,
					{ 844 ,  {-0.026939256820669378 }} ,
					{ 845 ,  {-0.0270591519628274 }} ,
					{ 846 ,  {-0.026977368647313444 }} ,
					{ 847 ,  {-0.02713772713643189 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_64 <= 2.2801401251657336 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_60 <= 0.597127058200025 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_14 <= -0.37282348386726455 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 50 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( 840 ) : ( 841 ) ) ) : ( 421 ) ) ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 844 ) : ( 845 ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 846 ) : ( 847 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 106 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_10
		
	
		namespace LGBM_Tree_6_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.008555762388360703 }} ,
					{ 8 ,  {-0.01004118505329493 }} ,
					{ 10 ,  {-0.027289244228388566 }} ,
					{ 15 ,  {-0.010691547464783886 }} ,
					{ 19 ,  {-0.026871263848939977 }} ,
					{ 23 ,  {0.020641169313919124 }} ,
					{ 37 ,  {-0.026928819434261814 }} ,
					{ 44 ,  {0.05627037296869704 }} ,
					{ 56 ,  {-0.010354287618354607 }} ,
					{ 72 ,  {-0.0273522890983248 }} ,
					{ 73 ,  {-0.027146792992643904 }} ,
					{ 90 ,  {0.0827539576790429 }} ,
					{ 114 ,  {-0.027217472803820048 }} ,
					{ 115 ,  {-0.027083453086820232 }} ,
					{ 182 ,  {0.07557023796703508 }} ,
					{ 232 ,  {-0.026902214359330892 }} ,
					{ 235 ,  {-0.026905733063034953 }} ,
					{ 236 ,  {-0.02681552447833345 }} ,
					{ 238 ,  {-0.026779960136320474 }} ,
					{ 239 ,  {-0.026930260931131534 }} ,
					{ 366 ,  {0.07415828682372819 }} ,
					{ 367 ,  {0.07147395199939337 }} ,
					{ 466 ,  {-0.02692110271313692 }} ,
					{ 934 ,  {-0.026911865951713493 }} ,
					{ 935 ,  {-0.027189433212080994 }} ,
					{ 939 ,  {-0.02692505406497508 }} ,
					{ 948 ,  {-0.027077013619084225 }} ,
					{ 949 ,  {-0.026899316313386698 }} ,
					{ 951 ,  {-0.026927687558142094 }} ,
					{ 1872 ,  {-0.02692433465197811 }} ,
					{ 1874 ,  {-0.02730445891660696 }} ,
					{ 1876 ,  {-0.027173813991753226 }} ,
					{ 1900 ,  {-0.026983688733749463 }} ,
					{ 1901 ,  {-0.027126573958887446 }} ,
					{ 3746 ,  {-0.02700406310696063 }} ,
					{ 3747 ,  {-0.02718082641689043 }} ,
					{ 3750 ,  {-0.027019371111239684 }} ,
					{ 3751 ,  {-0.027194293177113985 }} ,
					{ 3754 ,  {-0.027085644495483237 }} ,
					{ 3755 ,  {-0.026960297813854495 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 44 ) : ( ( ( scaler_56 <= 0.7590614128302521 ) ? ( 90 ) : ( ( ( scaler_6 <= -1.2441923630104108 ) ? ( 182 ) : ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( 56 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 232 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 466 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 1872 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 3746 ) : ( 3747 ) ) ) ) ) : ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 1874 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 3750 ) : ( 3751 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 1876 ) : ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 3754 ) : ( 3755 ) ) ) ) ) : ( 939 ) ) ) ) ) : ( 235 ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_61 <= -2.201261825752145 ) ? ( 236 ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 948 ) : ( 949 ) ) ) : ( ( ( scaler_35 <= 0.8999241402046355 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 1900 ) : ( 1901 ) ) ) : ( 951 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_10
		
	
		namespace LGBM_Tree_7_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.01708738199364721 }} ,
					{ 8 ,  {-0.004109805538540634 }} ,
					{ 11 ,  {0.025276214491084664 }} ,
					{ 19 ,  {0.0004169890107399215 }} ,
					{ 20 ,  {-0.027156699573964438 }} ,
					{ 21 ,  {-0.02810672275480417 }} ,
					{ 24 ,  {0.037096609406923865 }} ,
					{ 27 ,  {-0.027330998822394578 }} ,
					{ 51 ,  {-0.02746477959042889 }} ,
					{ 72 ,  {0.07744033854519881 }} ,
					{ 73 ,  {0.06262130209653229 }} ,
					{ 74 ,  {0.08656469100075546 }} ,
					{ 100 ,  {-0.02714463214069874 }} ,
					{ 101 ,  {-0.02695942617557076 }} ,
					{ 107 ,  {-0.02702276853396475 }} ,
					{ 150 ,  {0.0778455851712153 }} ,
					{ 151 ,  {0.0743914836560864 }} ,
					{ 210 ,  {-0.026849362826868825 }} ,
					{ 418 ,  {-0.02722321636406689 }} ,
					{ 422 ,  {-0.026901051256899528 }} ,
					{ 423 ,  {-0.027122912874954216 }} ,
					{ 426 ,  {-0.026798633468457157 }} ,
					{ 832 ,  {-0.02702188840422482 }} ,
					{ 833 ,  {-0.027185170056347463 }} ,
					{ 838 ,  {-0.027125151956055193 }} ,
					{ 848 ,  {-0.027051804990588332 }} ,
					{ 849 ,  {-0.02690875377024934 }} ,
					{ 851 ,  {-0.026824749387557148 }} ,
					{ 854 ,  {-0.02685403037764434 }} ,
					{ 855 ,  {-0.026962328491464255 }} ,
					{ 1669 ,  {-0.026994935766475426 }} ,
					{ 1670 ,  {-0.027091038958864794 }} ,
					{ 1671 ,  {-0.02695100884760068 }} ,
					{ 1678 ,  {-0.026946006278818498 }} ,
					{ 1679 ,  {-0.027067551943033077 }} ,
					{ 1700 ,  {-0.026874408844965166 }} ,
					{ 1701 ,  {-0.026968167270463292 }} ,
					{ 3336 ,  {-0.026849365206267857 }} ,
					{ 6674 ,  {-0.02689622611179231 }} ,
					{ 6675 ,  {-0.027013366117634496 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_27 <= 0.3227207796806266 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 8 ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 72 ) : ( 73 ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 74 ) : ( ( ( scaler_52 <= -1.056030338233269 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_16 <= 2.367497159683802 ) ? ( ( ( scaler_63 <= -1.058613854279861 ) ? ( ( ( scaler_21 <= -0.6175214017080987 ) ? ( 24 ) : ( ( ( scaler_12 <= 0.5780681120845275 ) ? ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( scaler_8 <= 1.5161993583394597 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( ( ( scaler_13 <= -0.644907381388898 ) ? ( 832 ) : ( 833 ) ) ) : ( ( ( scaler_40 <= 1.029252356661461 ) ? ( ( ( scaler_14 <= 1.1004554099535233 ) ? ( ( ( scaler_28 <= -1.2305268346904632 ) ? ( 3336 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 6674 ) : ( 6675 ) ) ) ) ) : ( 1669 ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( 1670 ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 418 ) : ( ( ( scaler_6 <= 1.0000000180025095e-35 ) ? ( 838 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 1678 ) : ( 1679 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 210 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_38 <= 0.37679441759687454 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( scaler_51 <= 0.44897628365603276 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 1700 ) : ( 1701 ) ) ) : ( 851 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 426 ) : ( ( ( scaler_30 <= -1.0000000180025095e-35 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_10
		
	
		namespace LGBM_Tree_8_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.027935239768084364 }} ,
					{ 18 ,  {-0.008117116172005001 }} ,
					{ 20 ,  {-0.011226489503396601 }} ,
					{ 26 ,  {-0.026932263190399992 }} ,
					{ 27 ,  {-0.026800737347781007 }} ,
					{ 29 ,  {-0.010924686828281195 }} ,
					{ 31 ,  {0.05980038792090634 }} ,
					{ 32 ,  {-0.027052263317071903 }} ,
					{ 33 ,  {-0.026806318441791918 }} ,
					{ 46 ,  {-0.027324314603653088 }} ,
					{ 47 ,  {0.0091312884792912 }} ,
					{ 49 ,  {-0.026778406015229125 }} ,
					{ 50 ,  {-0.027068768269623567 }} ,
					{ 56 ,  {-0.027189656769909715 }} ,
					{ 60 ,  {-0.027493307923380228 }} ,
					{ 61 ,  {-0.02689047211714786 }} ,
					{ 76 ,  {-0.026803982022206692 }} ,
					{ 78 ,  {-0.026902984912059787 }} ,
					{ 79 ,  {-0.027087069118548652 }} ,
					{ 84 ,  {-0.027032861896942546 }} ,
					{ 85 ,  {-0.026837705921776853 }} ,
					{ 86 ,  {-0.027462382020674633 }} ,
					{ 87 ,  {-0.027097996490573224 }} ,
					{ 88 ,  {-0.027655075294994298 }} ,
					{ 89 ,  {0.05244096843523044 }} ,
					{ 90 ,  {0.02794151715437775 }} ,
					{ 96 ,  {-0.02677943920465118 }} ,
					{ 97 ,  {-0.026995532180979456 }} ,
					{ 102 ,  {-0.026820175982890684 }} ,
					{ 114 ,  {-0.02698862073203655 }} ,
					{ 115 ,  {-0.026832077615218743 }} ,
					{ 154 ,  {-0.0269477389107394 }} ,
					{ 155 ,  {-0.02681464279037727 }} ,
					{ 182 ,  {0.057968626023787086 }} ,
					{ 207 ,  {-0.02687060872714242 }} ,
					{ 367 ,  {0.06961809455838862 }} ,
					{ 412 ,  {-0.026837398489369516 }} ,
					{ 413 ,  {-0.027050654955566234 }} ,
					{ 732 ,  {0.08178654966352333 }} ,
					{ 733 ,  {0.07512790039408246 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 76 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 90 ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 182 ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( ( ( scaler_20 <= 0.8044642895176309 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_23 <= -0.8520143281365727 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_29 <= -1.4406700697389458 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_12 <= -0.15892545745342618 ) ? ( ( ( scaler_43 <= -0.3567397062131727 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_10
		
	
		namespace LGBM_Tree_9_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.023175017630421995 }} ,
					{ 10 ,  {-0.019554288245078138 }} ,
					{ 13 ,  {0.03854196411089847 }} ,
					{ 17 ,  {0.023259110817743088 }} ,
					{ 22 ,  {-0.01938583504067938 }} ,
					{ 24 ,  {0.004403644919355125 }} ,
					{ 28 ,  {0.03281621039806439 }} ,
					{ 47 ,  {0.03212364698014302 }} ,
					{ 50 ,  {-0.027288710963373652 }} ,
					{ 51 ,  {-0.027024632918324923 }} ,
					{ 58 ,  {-0.027677190222001574 }} ,
					{ 60 ,  {-0.027104045214659603 }} ,
					{ 61 ,  {0.0034658508358836864 }} ,
					{ 64 ,  {-0.02756657081011254 }} ,
					{ 66 ,  {0.025873326339062325 }} ,
					{ 92 ,  {0.05552422068140739 }} ,
					{ 118 ,  {-0.02726570841187528 }} ,
					{ 119 ,  {-0.02701948398153763 }} ,
					{ 126 ,  {-0.027939824021457973 }} ,
					{ 127 ,  {-0.027198692827071574 }} ,
					{ 130 ,  {-0.027021286928768137 }} ,
					{ 134 ,  {-0.027162218399071694 }} ,
					{ 135 ,  {-0.026987807568305423 }} ,
					{ 186 ,  {0.09168505865899779 }} ,
					{ 251 ,  {-0.02694519629465173 }} ,
					{ 262 ,  {-0.02710043460644837 }} ,
					{ 263 ,  {-0.02728508804064645 }} ,
					{ 374 ,  {0.06835127924940403 }} ,
					{ 375 ,  {0.07907566489568083 }} ,
					{ 497 ,  {-0.027292254824669585 }} ,
					{ 498 ,  {-0.027169635546978623 }} ,
					{ 499 ,  {-0.027540681235234676 }} ,
					{ 501 ,  {-0.02728321064837277 }} ,
					{ 993 ,  {-0.027019699191607044 }} ,
					{ 1000 ,  {-0.026975704505374287 }} ,
					{ 1985 ,  {-0.027057538153230268 }} ,
					{ 2002 ,  {-0.027235281983373417 }} ,
					{ 2003 ,  {-0.02701666989008152 }} ,
					{ 3968 ,  {-0.027128740572718215 }} ,
					{ 3969 ,  {-0.02731432153092549 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_64 <= 0.826743595451546 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_54 <= -1.1504030928413123 ) ? ( 64 ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 130 ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( 262 ) : ( 263 ) ) ) ) ) ) ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 66 ) : ( ( ( scaler_36 <= -0.17497754590610112 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 10 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( ( ( scaler_13 <= -1.919115970768585 ) ? ( 92 ) : ( ( ( scaler_61 <= -0.3663848400111698 ) ? ( 186 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 374 ) : ( 375 ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_36 <= -0.33277028733507336 ) ? ( 24 ) : ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( 28 ) : ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 58 ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_4 <= 0.9323486210092059 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( ( ( scaler_21 <= -0.6175214017080987 ) ? ( 3968 ) : ( 3969 ) ) ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( 1000 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( 2002 ) : ( 2003 ) ) ) ) ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_10
		
	
		namespace LGBM_Tree_0_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.033071906932187055 }} ,
					{ 11 ,  {-0.02723524955358523 }} ,
					{ 13 ,  {0.022664287157933137 }} ,
					{ 19 ,  {0.056077524594015465 }} ,
					{ 20 ,  {-0.026983273842333535 }} ,
					{ 21 ,  {-0.026800582408439435 }} ,
					{ 24 ,  {-0.026887514677542995 }} ,
					{ 25 ,  {-0.027336036356767554 }} ,
					{ 37 ,  {0.07918921930997186 }} ,
					{ 58 ,  {-0.026769844867602605 }} ,
					{ 60 ,  {-0.026662964992950018 }} ,
					{ 63 ,  {-0.026949478491096298 }} ,
					{ 73 ,  {0.07253023560005767 }} ,
					{ 114 ,  {-0.026877550937627167 }} ,
					{ 123 ,  {-0.026739244704838617 }} ,
					{ 124 ,  {-0.02675271082246728 }} ,
					{ 125 ,  {-0.026876038547245303 }} ,
					{ 145 ,  {0.07003431190751976 }} ,
					{ 224 ,  {-0.026851428672943857 }} ,
					{ 225 ,  {-0.02669459215154866 }} ,
					{ 230 ,  {-0.02719687818094671 }} ,
					{ 236 ,  {-0.026760378508135133 }} ,
					{ 237 ,  {-0.02691579434328134 }} ,
					{ 239 ,  {-0.02704654115473132 }} ,
					{ 244 ,  {-0.02684020327836008 }} ,
					{ 245 ,  {-0.02675061336743534 }} ,
					{ 288 ,  {0.06911494218883 }} ,
					{ 289 ,  {0.06777290023612631 }} ,
					{ 452 ,  {-0.02674842741680086 }} ,
					{ 453 ,  {-0.026954474805380452 }} ,
					{ 454 ,  {-0.026822140693360016 }} ,
					{ 462 ,  {-0.027062648254071293 }} ,
					{ 463 ,  {-0.026893877314802084 }} ,
					{ 476 ,  {-0.026957675416424045 }} ,
					{ 477 ,  {-0.026807391947806514 }} ,
					{ 1821 ,  {-0.027165312943450055 }} ,
					{ 1822 ,  {-0.026970794128917248 }} ,
					{ 1823 ,  {-0.026797755671717178 }} ,
					{ 3640 ,  {-0.027034264889135087 }} ,
					{ 3641 ,  {-0.02686413692985311 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( 8 ) : ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 454 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= -1.0000000180025095e-35 ) ? ( 230 ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 58 ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_53 <= -1.7262355142650903 ) ? ( 60 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_11
		
	
		namespace LGBM_Tree_1_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.03386595093905439 }} ,
					{ 10 ,  {-0.013134508346313979 }} ,
					{ 13 ,  {0.0684808077686497 }} ,
					{ 14 ,  {-0.01916451353591077 }} ,
					{ 25 ,  {-0.0013912562354883016 }} ,
					{ 31 ,  {0.02249383396208683 }} ,
					{ 47 ,  {-0.02704048050741425 }} ,
					{ 61 ,  {0.047065418926802494 }} ,
					{ 93 ,  {-0.02701713375220918 }} ,
					{ 97 ,  {-0.02729036578564697 }} ,
					{ 98 ,  {-0.028528845518344437 }} ,
					{ 99 ,  {-0.027157629114033927 }} ,
					{ 121 ,  {0.07987933642411377 }} ,
					{ 176 ,  {-0.026886677353146274 }} ,
					{ 178 ,  {-0.02705083929471221 }} ,
					{ 180 ,  {-0.027061629972423607 }} ,
					{ 181 ,  {-0.026862812728349547 }} ,
					{ 185 ,  {-0.026806261474217115 }} ,
					{ 193 ,  {-0.0271825292481042 }} ,
					{ 241 ,  {0.05987161853947685 }} ,
					{ 355 ,  {-0.027222937604183563 }} ,
					{ 358 ,  {-0.027342855667068778 }} ,
					{ 359 ,  {-0.027178523139080736 }} ,
					{ 366 ,  {-0.027241804710568085 }} ,
					{ 367 ,  {-0.02696241356877896 }} ,
					{ 369 ,  {-0.0268484807381143 }} ,
					{ 384 ,  {-0.02701848532113174 }} ,
					{ 385 ,  {-0.026875134465142694 }} ,
					{ 480 ,  {0.07594650907518052 }} ,
					{ 481 ,  {0.06742474109386334 }} ,
					{ 708 ,  {-0.027103086259753675 }} ,
					{ 709 ,  {-0.02696826180857689 }} ,
					{ 728 ,  {-0.026885509100454258 }} ,
					{ 729 ,  {-0.02698673808327572 }} ,
					{ 731 ,  {-0.02693696135278519 }} ,
					{ 736 ,  {-0.026964710609824572 }} ,
					{ 737 ,  {-0.026899358735466818 }} ,
					{ 1461 ,  {-0.026979162807301643 }} ,
					{ 2920 ,  {-0.027019748769846388 }} ,
					{ 2921 ,  {-0.027208241736574258 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_61 <= -1.7425425793169012 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 176 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 178 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_39 <= 0.8005891397504875 ) ? ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( 736 ) : ( 737 ) ) ) : ( 369 ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.8706910021045081 ) ? ( ( ( scaler_65 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 384 ) : ( 385 ) ) ) : ( 193 ) ) ) : ( 97 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 14 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_11
		
	
		namespace LGBM_Tree_2_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.05635675176985222 }} ,
					{ 13 ,  {-0.027716295460758496 }} ,
					{ 14 ,  {0.011630088572315879 }} ,
					{ 16 ,  {0.0015941874635460231 }} ,
					{ 20 ,  {0.012930092986826257 }} ,
					{ 21 ,  {-0.027288546834369834 }} ,
					{ 24 ,  {0.00013895747195650796 }} ,
					{ 31 ,  {-0.027463264866091387 }} ,
					{ 34 ,  {-0.02715681194995457 }} ,
					{ 46 ,  {-0.027063273302408555 }} ,
					{ 51 ,  {0.015971641020476487 }} ,
					{ 61 ,  {-0.02694595330931379 }} ,
					{ 88 ,  {-0.027187783535780538 }} ,
					{ 91 ,  {-0.027258315593271888 }} ,
					{ 95 ,  {-0.026880391792432318 }} ,
					{ 101 ,  {0.07861595498909688 }} ,
					{ 120 ,  {-0.026932817874476142 }} ,
					{ 121 ,  {-0.027201852159899127 }} ,
					{ 140 ,  {-0.026953648357571615 }} ,
					{ 141 ,  {-0.027117110288269238 }} ,
					{ 142 ,  {-0.02699793099988329 }} ,
					{ 143 ,  {-0.026862038679324046 }} ,
					{ 178 ,  {-0.026904038455876314 }} ,
					{ 188 ,  {-0.026931840887609044 }} ,
					{ 189 ,  {-0.027079817563198206 }} ,
					{ 200 ,  {0.05542360077694746 }} ,
					{ 361 ,  {-0.027217856966022243 }} ,
					{ 362 ,  {-0.026889042969058433 }} ,
					{ 363 ,  {-0.027083351563344543 }} ,
					{ 402 ,  {0.06707493663106791 }} ,
					{ 403 ,  {0.07346245186350253 }} ,
					{ 716 ,  {-0.02708365272583901 }} ,
					{ 717 ,  {-0.02688509318781659 }} ,
					{ 719 ,  {-0.026966941377944947 }} ,
					{ 720 ,  {-0.02700499089712949 }} ,
					{ 1436 ,  {-0.02698172630906097 }} ,
					{ 1442 ,  {-0.027210083568631496 }} ,
					{ 1443 ,  {-0.027022964801972384 }} ,
					{ 2874 ,  {-0.0270730303592544 }} ,
					{ 2875 ,  {-0.027260203422041208 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_39 <= -1.0757415789144915 ) ? ( ( ( scaler_56 <= -0.45212161695089587 ) ? ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( 16 ) : ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 34 ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 88 ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 178 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 716 ) : ( 717 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_30 <= -0.4137664436055789 ) ? ( 1436 ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 2874 ) : ( 2875 ) ) ) ) ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= -0.2502577786540379 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 720 ) : ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 1442 ) : ( 1443 ) ) ) ) ) : ( 361 ) ) ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( scaler_14 <= -1.6356339642850823 ) ? ( 46 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_48 <= 0.4779497429770217 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 24 ) : ( ( ( scaler_21 <= 1.2696049002348533 ) ? ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( 200 ) : ( ( ( scaler_29 <= -0.5892438348161141 ) ? ( 402 ) : ( 403 ) ) ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_54 <= -0.5791437789855389 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_11
		
	
		namespace LGBM_Tree_3_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.02779479759048256 }} ,
					{ 12 ,  {-0.015785028598393116 }} ,
					{ 15 ,  {0.025443757760447674 }} ,
					{ 17 ,  {0.017296254312628014 }} ,
					{ 20 ,  {-0.019377016508831127 }} ,
					{ 21 ,  {0.057360629264148824 }} ,
					{ 22 ,  {0.01566155204258744 }} ,
					{ 26 ,  {-0.027360059771948206 }} ,
					{ 28 ,  {0.011743890852045245 }} ,
					{ 32 ,  {0.04900144128629536 }} ,
					{ 47 ,  {-0.027547314929348 }} ,
					{ 66 ,  {0.07687625146332686 }} ,
					{ 109 ,  {-0.02683091552604244 }} ,
					{ 117 ,  {-0.02687046304650531 }} ,
					{ 118 ,  {-0.027478103081126838 }} ,
					{ 119 ,  {-0.027066541842418336 }} ,
					{ 134 ,  {0.07440463581239391 }} ,
					{ 186 ,  {-0.026996254667661174 }} ,
					{ 187 ,  {-0.026891066996670723 }} ,
					{ 216 ,  {-0.026893110811314 }} ,
					{ 217 ,  {-0.027080235774783974 }} ,
					{ 232 ,  {-0.02716016411166027 }} ,
					{ 233 ,  {-0.026932241032899318 }} ,
					{ 270 ,  {0.07106616035376119 }} ,
					{ 271 ,  {0.06494793118686534 }} ,
					{ 368 ,  {-0.027064906664991346 }} ,
					{ 369 ,  {-0.026876140992199767 }} ,
					{ 370 ,  {-0.027070408023876946 }} ,
					{ 371 ,  {-0.027294839230272917 }} ,
					{ 442 ,  {-0.026861144512614107 }} ,
					{ 444 ,  {-0.026937899138480242 }} ,
					{ 445 ,  {-0.026841996796104273 }} ,
					{ 446 ,  {-0.02712430782131163 }} ,
					{ 447 ,  {-0.026928591533816132 }} ,
					{ 880 ,  {-0.027110538627218784 }} ,
					{ 881 ,  {-0.02693486093982013 }} ,
					{ 882 ,  {-0.02725444697821284 }} ,
					{ 883 ,  {-0.027082187572041807 }} ,
					{ 886 ,  {-0.027089465492402078 }} ,
					{ 887 ,  {-0.026877200194802893 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= 0.30954233844666573 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 66 ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( 134 ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( ( ( scaler_13 <= -0.8997490992648355 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 442 ) : ( ( ( scaler_55 <= 0.9521549920247392 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 28 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 0.5081311054894627 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_11
		
	
		namespace LGBM_Tree_4_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.026669394065946844 }} ,
					{ 12 ,  {0.02530907575011462 }} ,
					{ 14 ,  {-0.009585772894187503 }} ,
					{ 16 ,  {0.05752703001789971 }} ,
					{ 18 ,  {0.0006344602929074236 }} ,
					{ 27 ,  {-0.013828447237117212 }} ,
					{ 31 ,  {0.03439231412215326 }} ,
					{ 34 ,  {-0.014273397484256151 }} ,
					{ 61 ,  {0.09229235463115812 }} ,
					{ 71 ,  {-0.027855456994044965 }} ,
					{ 77 ,  {-0.02816663890213706 }} ,
					{ 79 ,  {-0.02753395065678941 }} ,
					{ 104 ,  {-0.027034215475826424 }} ,
					{ 105 ,  {-0.027227644637616566 }} ,
					{ 106 ,  {-0.027369273091334464 }} ,
					{ 107 ,  {-0.02868014247203181 }} ,
					{ 152 ,  {-0.02723391343909743 }} ,
					{ 153 ,  {-0.026975259467004187 }} ,
					{ 157 ,  {-0.027227136154715437 }} ,
					{ 240 ,  {0.07498604893618312 }} ,
					{ 241 ,  {0.0694386758308435 }} ,
					{ 242 ,  {0.06892175604002442 }} ,
					{ 243 ,  {0.06465364104679036 }} ,
					{ 280 ,  {-0.027149229597656633 }} ,
					{ 281 ,  {-0.02757546002566257 }} ,
					{ 282 ,  {-0.027078922773673193 }} ,
					{ 283 ,  {-0.027290103170080262 }} ,
					{ 626 ,  {-0.026918866636317818 }} ,
					{ 627 ,  {-0.027032184298086973 }} ,
					{ 2496 ,  {-0.02700400703409512 }} ,
					{ 2498 ,  {-0.027297392801465 }} ,
					{ 2500 ,  {-0.026950640438412155 }} ,
					{ 2501 ,  {-0.027104775168025144 }} ,
					{ 2502 ,  {-0.02721105249767865 }} ,
					{ 4994 ,  {-0.027279781417015182 }} ,
					{ 4995 ,  {-0.027020023764669485 }} ,
					{ 4998 ,  {-0.027194530487746928 }} ,
					{ 4999 ,  {-0.02699969291381184 }} ,
					{ 5006 ,  {-0.0271268114114174 }} ,
					{ 5007 ,  {-0.02697015001782437 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_43 <= 1.301736378640691 ) ? ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 16 ) : ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 34 ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 18 ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_24 <= 1.3878283827779498 ) ? ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 2496 ) : ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( 4994 ) : ( 4995 ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 2498 ) : ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 4998 ) : ( 4999 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_16 <= 0.992302762794023 ) ? ( 2500 ) : ( 2501 ) ) ) : ( ( ( scaler_39 <= 1.0000000180025095e-35 ) ? ( 2502 ) : ( ( ( scaler_15 <= -0.5980738954644472 ) ? ( 5006 ) : ( 5007 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 626 ) : ( 627 ) ) ) ) ) : ( 157 ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 12 ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( ( ( scaler_24 <= 1.0000000180025095e-35 ) ? ( 240 ) : ( 241 ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_11
		
	
		namespace LGBM_Tree_5_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {-0.012175233969891508 }} ,
					{ 15 ,  {0.03524794555310336 }} ,
					{ 16 ,  {0.031053446677766695 }} ,
					{ 17 ,  {-0.027376535017821058 }} ,
					{ 19 ,  {-0.027243272610688842 }} ,
					{ 23 ,  {0.0528118496683459 }} ,
					{ 25 ,  {0.0034016295108572334 }} ,
					{ 28 ,  {-0.02715115750858201 }} ,
					{ 36 ,  {-0.027058030493917445 }} ,
					{ 37 ,  {-0.02688449872865204 }} ,
					{ 45 ,  {0.060449984860973006 }} ,
					{ 48 ,  {-0.02718265771130804 }} ,
					{ 58 ,  {-0.026881531851576337 }} ,
					{ 89 ,  {0.0819979968882282 }} ,
					{ 98 ,  {-0.02701160664858426 }} ,
					{ 99 ,  {-0.026853827003617232 }} ,
					{ 107 ,  {-0.026852859821006186 }} ,
					{ 109 ,  {-0.02696476608491796 }} ,
					{ 111 ,  {-0.02689053536141662 }} ,
					{ 118 ,  {-0.026925324702791627 }} ,
					{ 119 ,  {-0.027116859562648612 }} ,
					{ 176 ,  {0.07303449428551499 }} ,
					{ 209 ,  {-0.0267508706587908 }} ,
					{ 210 ,  {-0.026904444227679056 }} ,
					{ 211 ,  {-0.027133160539426472 }} ,
					{ 217 ,  {-0.027038666008855718 }} ,
					{ 220 ,  {-0.026863874712478572 }} ,
					{ 221 ,  {-0.027094506501906715 }} ,
					{ 354 ,  {0.06964423187172707 }} ,
					{ 355 ,  {0.06751782813855123 }} ,
					{ 416 ,  {-0.02695046932464168 }} ,
					{ 417 ,  {-0.026854228060519705 }} ,
					{ 426 ,  {-0.026979964200913573 }} ,
					{ 427 ,  {-0.02721715521634814 }} ,
					{ 432 ,  {-0.027275183385141868 }} ,
					{ 433 ,  {-0.027083861653065585 }} ,
					{ 848 ,  {-0.027109372726744657 }} ,
					{ 849 ,  {-0.0269398970662045 }} ,
					{ 850 ,  {-0.02679704500177692 }} ,
					{ 851 ,  {-0.026974706202307294 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 10 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 176 ) : ( ( ( scaler_60 <= 1.3866121256028412 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 48 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_31 <= -0.8660515593122885 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( scaler_56 <= 0.15346989793967802 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( ( ( scaler_31 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_52 <= -0.527371360340495 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( scaler_45 <= -0.11691300112702074 ) ? ( 426 ) : ( 427 ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( ( ( scaler_37 <= -0.8838016321924327 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_23 <= 1.07192138513352 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_11
		
	
		namespace LGBM_Tree_6_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.008335802568551593 }} ,
					{ 9 ,  {-0.009701732931716806 }} ,
					{ 10 ,  {-0.0272175787150642 }} ,
					{ 15 ,  {-0.010370646388688343 }} ,
					{ 23 ,  {0.018577230036495657 }} ,
					{ 32 ,  {-0.027268730776952396 }} ,
					{ 34 ,  {-0.0269429490072851 }} ,
					{ 35 ,  {-0.026786842549815344 }} ,
					{ 44 ,  {0.056377580031819766 }} ,
					{ 57 ,  {-0.009958686052419077 }} ,
					{ 66 ,  {-0.026983798579816278 }} ,
					{ 67 ,  {-0.026809604756036744 }} ,
					{ 90 ,  {0.07982274317757895 }} ,
					{ 112 ,  {-0.027008876885736267 }} ,
					{ 113 ,  {-0.027171730253639472 }} ,
					{ 182 ,  {0.061438182988980475 }} ,
					{ 232 ,  {-0.02683112413883563 }} ,
					{ 235 ,  {-0.026838078485561835 }} ,
					{ 238 ,  {-0.026825206679068226 }} ,
					{ 367 ,  {0.07256295059909179 }} ,
					{ 466 ,  {-0.026854156250775908 }} ,
					{ 472 ,  {-0.026815891937465988 }} ,
					{ 473 ,  {-0.02671828362054092 }} ,
					{ 474 ,  {-0.026974314368130182 }} ,
					{ 475 ,  {-0.026828565751271585 }} ,
					{ 478 ,  {-0.02688309737388829 }} ,
					{ 479 ,  {-0.027049578948900185 }} ,
					{ 732 ,  {0.06855448134341392 }} ,
					{ 733 ,  {0.0669266306770867 }} ,
					{ 934 ,  {-0.02683933778274772 }} ,
					{ 935 ,  {-0.027137953752588775 }} ,
					{ 939 ,  {-0.02685789188706697 }} ,
					{ 1872 ,  {-0.02691361393894471 }} ,
					{ 1874 ,  {-0.02729199241445984 }} ,
					{ 1875 ,  {-0.02708064550303997 }} ,
					{ 1876 ,  {-0.027118986273749576 }} ,
					{ 3746 ,  {-0.02697792593876458 }} ,
					{ 3747 ,  {-0.027126402890038617 }} ,
					{ 3754 ,  {-0.02702934876874079 }} ,
					{ 3755 ,  {-0.026892333509391186 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 32 ) : ( ( ( scaler_64 <= 2.764605635070462 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_51 <= 0.44897628365603276 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 44 ) : ( ( ( scaler_39 <= -0.7345905391572228 ) ? ( 90 ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 182 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 232 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 466 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 1872 ) : ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 3746 ) : ( 3747 ) ) ) ) ) : ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 1876 ) : ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 3754 ) : ( 3755 ) ) ) ) ) : ( 939 ) ) ) ) ) : ( 235 ) ) ) ) ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_13 <= 0.6293012079907891 ) ? ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( 472 ) : ( 473 ) ) ) : ( ( ( scaler_43 <= 1.0000000180025095e-35 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 238 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_11
		
	
		namespace LGBM_Tree_7_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.025312324358380264 }} ,
					{ 8 ,  {0.04265987531426668 }} ,
					{ 18 ,  {0.07875016502338202 }} ,
					{ 20 ,  {-0.028022171259061448 }} ,
					{ 23 ,  {-0.013226216868377182 }} ,
					{ 25 ,  {-0.011887665957246895 }} ,
					{ 26 ,  {0.02453658637216208 }} ,
					{ 38 ,  {0.06357698644520633 }} ,
					{ 39 ,  {0.07509070286347522 }} ,
					{ 42 ,  {0.032836312875163864 }} ,
					{ 43 ,  {0.07390396212359136 }} ,
					{ 44 ,  {-0.02724364809698961 }} ,
					{ 45 ,  {-0.02808932249397127 }} ,
					{ 55 ,  {-0.027162713789176163 }} ,
					{ 96 ,  {-0.027207688929326852 }} ,
					{ 97 ,  {-0.02689418133615313 }} ,
					{ 109 ,  {-0.02704111312476007 }} ,
					{ 197 ,  {-0.027089422671828286 }} ,
					{ 199 ,  {-0.026951117713508485 }} ,
					{ 216 ,  {-0.026935252702275377 }} ,
					{ 217 ,  {-0.026810250857965137 }} ,
					{ 393 ,  {-0.02677818513462084 }} ,
					{ 396 ,  {-0.0266843617260724 }} ,
					{ 1570 ,  {-0.026801717659909248 }} ,
					{ 1571 ,  {-0.026932906864259726 }} ,
					{ 1588 ,  {-0.026957539725023967 }} ,
					{ 1590 ,  {-0.02672705210346459 }} ,
					{ 3136 ,  {-0.026821873294402124 }} ,
					{ 3137 ,  {-0.026986688128467346 }} ,
					{ 3178 ,  {-0.026859990014590242 }} ,
					{ 3179 ,  {-0.026799517856136525 }} ,
					{ 3182 ,  {-0.02689350560390176 }} ,
					{ 3183 ,  {-0.02678079538621452 }} ,
					{ 6277 ,  {-0.026968585944825586 }} ,
					{ 6279 ,  {-0.02691226739191387 }} ,
					{ 12552 ,  {-0.02678599300093661 }} ,
					{ 12553 ,  {-0.026910654329310082 }} ,
					{ 12556 ,  {-0.02694236749463945 }} ,
					{ 25114 ,  {-0.027176164811981332 }} ,
					{ 25115 ,  {-0.02705562359667419 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( 8 ) : ( ( ( scaler_39 <= 0.11828706023594954 ) ? ( 18 ) : ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.09189715312215128 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( scaler_46 <= 0.6021878438436793 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_8 <= 2.7041110208127392 ) ? ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_40 <= 2.1651153778940766 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_63 <= -0.7180467509944388 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_16 <= 0.992302762794023 ) ? ( ( ( scaler_65 <= 1.6258637778468141 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_13 <= -1.0000000180025095e-35 ) ? ( 3136 ) : ( 3137 ) ) ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( 12552 ) : ( 12553 ) ) ) : ( 6277 ) ) ) : ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( 12556 ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 25114 ) : ( 25115 ) ) ) ) ) : ( 6279 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 1570 ) : ( 1571 ) ) ) ) ) : ( 393 ) ) ) : ( 197 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 396 ) : ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 1588 ) : ( ( ( scaler_40 <= 0.745286601353307 ) ? ( 3178 ) : ( 3179 ) ) ) ) ) : ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( 1590 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 3182 ) : ( 3183 ) ) ) ) ) ) ) ) ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 26 ) : ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_11
		
	
		namespace LGBM_Tree_8_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.02687870933940849 }} ,
					{ 18 ,  {-0.007782053078394738 }} ,
					{ 21 ,  {-0.01073804997159071 }} ,
					{ 26 ,  {-0.026875078009203537 }} ,
					{ 27 ,  {-0.0267330634455655 }} ,
					{ 28 ,  {0.037036797137829945 }} ,
					{ 31 ,  {-0.027406712615061363 }} ,
					{ 32 ,  {-0.02698009621398699 }} ,
					{ 33 ,  {-0.026735460487810003 }} ,
					{ 41 ,  {-0.027386944649481482 }} ,
					{ 46 ,  {-0.027032336764077288 }} ,
					{ 47 ,  {0.009352656700637455 }} ,
					{ 48 ,  {-0.026725344437757915 }} ,
					{ 49 ,  {-0.026866108584144482 }} ,
					{ 50 ,  {-0.027015776859366188 }} ,
					{ 58 ,  {-0.027524715030690334 }} ,
					{ 59 ,  {-0.02700231330980111 }} ,
					{ 61 ,  {-0.026975864781197456 }} ,
					{ 76 ,  {-0.026736982711260533 }} ,
					{ 78 ,  {-0.02683773538532902 }} ,
					{ 79 ,  {-0.027029542012741076 }} ,
					{ 80 ,  {-0.027069612468239846 }} ,
					{ 88 ,  {-0.028092694036830207 }} ,
					{ 89 ,  {0.04991727663031279 }} ,
					{ 90 ,  {0.03263489824642186 }} ,
					{ 102 ,  {-0.026790544723054074 }} ,
					{ 120 ,  {-0.026715237419849786 }} ,
					{ 154 ,  {-0.026764227928226726 }} ,
					{ 155 ,  {-0.02690316617654734 }} ,
					{ 162 ,  {-0.026924438189124846 }} ,
					{ 163 ,  {-0.026784400673639266 }} ,
					{ 182 ,  {0.05606897835577464 }} ,
					{ 207 ,  {-0.026814022923745507 }} ,
					{ 242 ,  {-0.026898925030211896 }} ,
					{ 243 ,  {-0.026735570716154927 }} ,
					{ 366 ,  {0.06587641990046517 }} ,
					{ 412 ,  {-0.027026601773487202 }} ,
					{ 413 ,  {-0.026873999795472437 }} ,
					{ 734 ,  {0.07964802401840938 }} ,
					{ 735 ,  {0.07322773040373855 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 76 ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( scaler_61 <= 0.7804132760769399 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_27 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( 80 ) : ( ( ( scaler_39 <= -0.5640150192785883 ) ? ( 162 ) : ( 163 ) ) ) ) ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 90 ) : ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 182 ) : ( ( ( scaler_21 <= -0.44596446516783045 ) ? ( 366 ) : ( ( ( scaler_20 <= -1.0000000180025095e-35 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 28 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( 120 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_11
		
	
		namespace LGBM_Tree_9_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {-0.01934555234088068 }} ,
					{ 17 ,  {0.054910365735508206 }} ,
					{ 22 ,  {-0.019199014410207684 }} ,
					{ 24 ,  {0.0030772017575841377 }} ,
					{ 26 ,  {-0.017284698843737876 }} ,
					{ 27 ,  {0.06039353439516453 }} ,
					{ 29 ,  {0.032086794044729784 }} ,
					{ 32 ,  {-0.02714875967601095 }} ,
					{ 33 ,  {-0.02794985765836476 }} ,
					{ 36 ,  {-0.02701966200408067 }} ,
					{ 37 ,  {0.04192571940050062 }} ,
					{ 39 ,  {-0.027641717708731684 }} ,
					{ 47 ,  {0.03037247953630324 }} ,
					{ 50 ,  {-0.027495237830483667 }} ,
					{ 51 ,  {-0.026963328479987694 }} ,
					{ 56 ,  {-0.02761352683545308 }} ,
					{ 60 ,  {0.0036812803993709134 }} ,
					{ 77 ,  {-0.026919237110189172 }} ,
					{ 93 ,  {0.050917316014490524 }} ,
					{ 114 ,  {-0.027171999409207937 }} ,
					{ 115 ,  {-0.026922154434109353 }} ,
					{ 122 ,  {-0.027166300338079104 }} ,
					{ 123 ,  {-0.02695189670688324 }} ,
					{ 126 ,  {-0.027831390033868787 }} ,
					{ 127 ,  {-0.027100022292941613 }} ,
					{ 152 ,  {-0.027048981115020843 }} ,
					{ 153 ,  {-0.027235235835205353 }} ,
					{ 184 ,  {0.08171124015213913 }} ,
					{ 251 ,  {-0.026874094681598334 }} ,
					{ 370 ,  {0.07458251307629601 }} ,
					{ 371 ,  {0.06497256095095884 }} ,
					{ 497 ,  {-0.027234516647814573 }} ,
					{ 498 ,  {-0.027105357855407703 }} ,
					{ 499 ,  {-0.0274871903616312 }} ,
					{ 500 ,  {-0.026925589678847006 }} ,
					{ 993 ,  {-0.026945360844523533 }} ,
					{ 1002 ,  {-0.026984974678249403 }} ,
					{ 1003 ,  {-0.027261996423737573 }} ,
					{ 1984 ,  {-0.027213348936384458 }} ,
					{ 1985 ,  {-0.02698815417526438 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_35 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 10 ) : ( ( ( scaler_23 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_38 <= 0.207827783773592 ) ? ( ( ( scaler_47 <= 1.263516123425773 ) ? ( ( ( scaler_12 <= 0.2095713273155506 ) ? ( 184 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 24 ) : ( ( ( scaler_36 <= 1.0000000180025095e-35 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_36 <= -0.17497754590610112 ) ? ( 56 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 60 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 1984 ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 500 ) : ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_11
		
	
		namespace LGBM_Tree_0_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.028085851943982026 }} ,
					{ 11 ,  {-0.027189270083563623 }} ,
					{ 13 ,  {0.022549008454583675 }} ,
					{ 18 ,  {0.053900921280720486 }} ,
					{ 20 ,  {-0.02692183067505114 }} ,
					{ 21 ,  {-0.026728450474072213 }} ,
					{ 24 ,  {-0.02678413796205505 }} ,
					{ 25 ,  {-0.02716504068467203 }} ,
					{ 38 ,  {0.07237760743749692 }} ,
					{ 60 ,  {-0.026600875757972733 }} ,
					{ 61 ,  {-0.02671191845947008 }} ,
					{ 63 ,  {-0.026918404138579717 }} ,
					{ 78 ,  {0.061327796156267614 }} ,
					{ 114 ,  {-0.02681618826794098 }} ,
					{ 116 ,  {-0.026678844387418705 }} ,
					{ 117 ,  {-0.026792510994398517 }} ,
					{ 124 ,  {-0.02685865329762749 }} ,
					{ 159 ,  {0.0680797779933866 }} ,
					{ 224 ,  {-0.026787771162793163 }} ,
					{ 225 ,  {-0.026630765850446787 }} ,
					{ 230 ,  {-0.0271608878469395 }} ,
					{ 236 ,  {-0.02669117264373229 }} ,
					{ 237 ,  {-0.02685816820011058 }} ,
					{ 239 ,  {-0.02699291356412097 }} ,
					{ 250 ,  {-0.026797268889220113 }} ,
					{ 251 ,  {-0.026671731464622334 }} ,
					{ 316 ,  {0.06430097594113006 }} ,
					{ 317 ,  {0.06655008157238393 }} ,
					{ 452 ,  {-0.02668253724272031 }} ,
					{ 453 ,  {-0.026896973108223688 }} ,
					{ 454 ,  {-0.026760569391928904 }} ,
					{ 462 ,  {-0.027016743539254474 }} ,
					{ 463 ,  {-0.026840104941093443 }} ,
					{ 476 ,  {-0.026900680024288 }} ,
					{ 477 ,  {-0.026743466233018272 }} ,
					{ 1821 ,  {-0.027125689730584737 }} ,
					{ 1822 ,  {-0.02691006844939732 }} ,
					{ 1823 ,  {-0.02673159388959841 }} ,
					{ 3640 ,  {-0.02698155229870497 }} ,
					{ 3641 ,  {-0.026799087315756937 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 8 ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( 18 ) : ( ( ( scaler_63 <= -0.88833030263715 ) ? ( 38 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( 78 ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 316 ) : ( 317 ) ) ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 454 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 230 ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_53 <= -1.7262355142650903 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 124 ) : ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_12
		
	
		namespace LGBM_Tree_1_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.032256512535089564 }} ,
					{ 10 ,  {-0.012865980123239138 }} ,
					{ 13 ,  {0.0625986428164636 }} ,
					{ 15 ,  {-0.019490088201375034 }} ,
					{ 25 ,  {-0.001094354689007715 }} ,
					{ 47 ,  {-0.02697263135676539 }} ,
					{ 57 ,  {0.03881534664430918 }} ,
					{ 58 ,  {-0.029224636945314943 }} ,
					{ 59 ,  {0.05619171243749354 }} ,
					{ 93 ,  {-0.026951654557806234 }} ,
					{ 97 ,  {-0.027213480030992124 }} ,
					{ 98 ,  {-0.028415040312381214 }} ,
					{ 99 ,  {-0.02708125972219847 }} ,
					{ 112 ,  {0.07689919438778844 }} ,
					{ 176 ,  {-0.026879240546987433 }} ,
					{ 179 ,  {-0.027207798837099558 }} ,
					{ 180 ,  {-0.027029858576076995 }} ,
					{ 185 ,  {-0.026735178554211453 }} ,
					{ 193 ,  {-0.027091647097906953 }} ,
					{ 227 ,  {0.061826102016641175 }} ,
					{ 355 ,  {-0.027125283989553068 }} ,
					{ 356 ,  {-0.027147430960037258 }} ,
					{ 357 ,  {-0.02692470267088471 }} ,
					{ 362 ,  {-0.02673600450342561 }} ,
					{ 363 ,  {-0.026837051120523633 }} ,
					{ 364 ,  {-0.026832960950498336 }} ,
					{ 366 ,  {-0.027143617957070487 }} ,
					{ 367 ,  {-0.026886223016637307 }} ,
					{ 369 ,  {-0.026903436080732784 }} ,
					{ 384 ,  {-0.02695333704986686 }} ,
					{ 385 ,  {-0.026801859551339575 }} ,
					{ 452 ,  {0.06659944895005541 }} ,
					{ 453 ,  {0.07317896041355687 }} ,
					{ 708 ,  {-0.02680298683592714 }} ,
					{ 709 ,  {-0.02702053688065241 }} ,
					{ 731 ,  {-0.026872759915291436 }} ,
					{ 736 ,  {-0.026844859241647284 }} ,
					{ 737 ,  {-0.026761297247041255 }} ,
					{ 1460 ,  {-0.027134178014192413 }} ,
					{ 1461 ,  {-0.02696289081807557 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_61 <= -1.7425425793169012 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 176 ) : ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( 356 ) : ( 357 ) ) ) : ( 179 ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 180 ) : ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( 364 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_11 <= -0.46497723121655854 ) ? ( 736 ) : ( 737 ) ) ) : ( 369 ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 0.708463064338002 ) ? ( ( ( scaler_65 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 384 ) : ( 385 ) ) ) : ( 193 ) ) ) : ( 97 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_52 <= 0.7061662547426445 ) ? ( ( ( scaler_37 <= -1.0000000180025095e-35 ) ? ( 112 ) : ( ( ( scaler_55 <= -0.5393027094051587 ) ? ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( 452 ) : ( 453 ) ) ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_12
		
	
		namespace LGBM_Tree_2_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.028899710076198515 }} ,
					{ 10 ,  {0.024781036084665174 }} ,
					{ 16 ,  {0.027409562355633806 }} ,
					{ 22 ,  {-0.027196811479023215 }} ,
					{ 26 ,  {0.01944391748872002 }} ,
					{ 27 ,  {-0.028048662836145224 }} ,
					{ 35 ,  {-0.029273102381072186 }} ,
					{ 36 ,  {-0.0010958384797254807 }} ,
					{ 37 ,  {-0.027072292714657248 }} ,
					{ 39 ,  {0.0008787329789464942 }} ,
					{ 47 ,  {-0.027084981503339378 }} ,
					{ 49 ,  {-0.030938215296184703 }} ,
					{ 68 ,  {-0.02729397711000924 }} ,
					{ 69 ,  {-0.02682487781381493 }} ,
					{ 76 ,  {0.042311886433478406 }} ,
					{ 92 ,  {-0.026853523303236433 }} ,
					{ 96 ,  {-0.02753566044418275 }} ,
					{ 100 ,  {-0.027438948332229585 }} ,
					{ 103 ,  {-0.02782086922936173 }} ,
					{ 154 ,  {0.08521633517393758 }} ,
					{ 186 ,  {-0.02685451215224831 }} ,
					{ 187 ,  {-0.02713775155818241 }} ,
					{ 194 ,  {-0.026918047734657048 }} ,
					{ 195 ,  {-0.0272026323798173 }} ,
					{ 204 ,  {-0.027315196422476387 }} ,
					{ 205 ,  {-0.02696352940930812 }} ,
					{ 311 ,  {0.07669103357862933 }} ,
					{ 620 ,  {0.0633279466446109 }} ,
					{ 621 ,  {0.0659358856941746 }} ,
					{ 809 ,  {-0.026941811994536033 }} ,
					{ 810 ,  {-0.026852026432039933 }} ,
					{ 811 ,  {-0.026997234820034702 }} ,
					{ 812 ,  {-0.026881763185766086 }} ,
					{ 813 ,  {-0.027195303028818035 }} ,
					{ 815 ,  {-0.026782487050823225 }} ,
					{ 1617 ,  {-0.02695514088065236 }} ,
					{ 1628 ,  {-0.02686423255231893 }} ,
					{ 1629 ,  {-0.026991945016436366 }} ,
					{ 3232 ,  {-0.02700116407056785 }} ,
					{ 3233 ,  {-0.02727348305481085 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 16 ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( ( ( scaler_37 <= 0.874679379836743 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 76 ) : ( ( ( scaler_64 <= 0.3422780855468171 ) ? ( 154 ) : ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 620 ) : ( 621 ) ) ) : ( 311 ) ) ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_30 <= -0.7399671729767032 ) ? ( 10 ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 22 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( 92 ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 96 ) : ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 100 ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( ( ( scaler_22 <= 0.546235126571496 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_38 <= 1.0000000180025095e-35 ) ? ( 3232 ) : ( 3233 ) ) ) : ( 1617 ) ) ) : ( 809 ) ) ) : ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_27 <= 0.9560424053563663 ) ? ( 812 ) : ( 813 ) ) ) : ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 1628 ) : ( 1629 ) ) ) : ( 815 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( ( ( scaler_48 <= 0.9402171369921523 ) ? ( 204 ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_12
		
	
		namespace LGBM_Tree_3_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.027712622340605786 }} ,
					{ 12 ,  {-0.015487895304563536 }} ,
					{ 15 ,  {0.024368300281230826 }} ,
					{ 17 ,  {0.016665278747204866 }} ,
					{ 20 ,  {0.046358592901369025 }} ,
					{ 21 ,  {-0.027823990119705044 }} ,
					{ 22 ,  {0.01526902162601341 }} ,
					{ 26 ,  {-0.0272752936470204 }} ,
					{ 28 ,  {0.011446959332397392 }} ,
					{ 32 ,  {0.04652941965627207 }} ,
					{ 47 ,  {-0.02748551967102582 }} ,
					{ 66 ,  {0.07205908546966301 }} ,
					{ 109 ,  {-0.026759226843075336 }} ,
					{ 116 ,  {-0.027013300616017828 }} ,
					{ 117 ,  {-0.026805539802942358 }} ,
					{ 118 ,  {-0.02741067489132892 }} ,
					{ 119 ,  {-0.026995322216962127 }} ,
					{ 134 ,  {0.06983971563874718 }} ,
					{ 186 ,  {-0.026935720439361273 }} ,
					{ 187 ,  {-0.026816579802222393 }} ,
					{ 216 ,  {-0.02682615797451049 }} ,
					{ 217 ,  {-0.027018490113457333 }} ,
					{ 270 ,  {0.06687521462678193 }} ,
					{ 271 ,  {0.06135137536518601 }} ,
					{ 368 ,  {-0.027005855765086108 }} ,
					{ 369 ,  {-0.026814002455616284 }} ,
					{ 370 ,  {-0.026996746088984933 }} ,
					{ 371 ,  {-0.02723475999340453 }} ,
					{ 441 ,  {-0.02684441070630031 }} ,
					{ 442 ,  {-0.02720330846402686 }} ,
					{ 443 ,  {-0.02697047651950553 }} ,
					{ 445 ,  {-0.026775544667412988 }} ,
					{ 446 ,  {-0.027104172264810655 }} ,
					{ 880 ,  {-0.026880294358043667 }} ,
					{ 888 ,  {-0.026942699895557417 }} ,
					{ 889 ,  {-0.0267937878164944 }} ,
					{ 894 ,  {-0.026820422432622795 }} ,
					{ 895 ,  {-0.026980755097669253 }} ,
					{ 1762 ,  {-0.027129653439974977 }} ,
					{ 1763 ,  {-0.02697667188022871 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= 0.30954233844666573 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 66 ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( 134 ) : ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( ( ( scaler_64 <= -1.0000000180025095e-35 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 880 ) : ( ( ( scaler_32 <= 1.0000000180025095e-35 ) ? ( 1762 ) : ( 1763 ) ) ) ) ) : ( 441 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 442 ) : ( 443 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( 888 ) : ( 889 ) ) ) : ( 445 ) ) ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 446 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 894 ) : ( 895 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 28 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_12
		
	
		namespace LGBM_Tree_4_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.025679068230984016 }} ,
					{ 12 ,  {0.024250324171462626 }} ,
					{ 14 ,  {-0.009290525835517914 }} ,
					{ 16 ,  {0.05400571495087524 }} ,
					{ 18 ,  {0.0008593107530874273 }} ,
					{ 27 ,  {-0.013560848220814117 }} ,
					{ 31 ,  {0.03242529190133222 }} ,
					{ 34 ,  {-0.013905231429932547 }} ,
					{ 61 ,  {0.08454475955943208 }} ,
					{ 71 ,  {-0.027723112000633817 }} ,
					{ 77 ,  {-0.02803822905234925 }} ,
					{ 79 ,  {-0.027442870438045587 }} ,
					{ 104 ,  {-0.02695760733590684 }} ,
					{ 105 ,  {-0.027145055923844325 }} ,
					{ 106 ,  {-0.027286104882559427 }} ,
					{ 107 ,  {-0.028537294173514135 }} ,
					{ 141 ,  {-0.027418988143377884 }} ,
					{ 152 ,  {-0.027178850215446977 }} ,
					{ 153 ,  {-0.026903813558013936 }} ,
					{ 240 ,  {0.07056032153423426 }} ,
					{ 241 ,  {0.06554682442659317 }} ,
					{ 242 ,  {0.06514157489066762 }} ,
					{ 243 ,  {0.0610948475953836 }} ,
					{ 281 ,  {-0.02699187843908342 }} ,
					{ 560 ,  {-0.027015088004760192 }} ,
					{ 626 ,  {-0.026907199358527114 }} ,
					{ 627 ,  {-0.027052054265090393 }} ,
					{ 628 ,  {-0.026875472474030566 }} ,
					{ 629 ,  {-0.027019894020936283 }} ,
					{ 630 ,  {-0.027209396503065916 }} ,
					{ 1122 ,  {-0.027094951444093685 }} ,
					{ 1123 ,  {-0.027326910603190837 }} ,
					{ 1248 ,  {-0.026884000601852073 }} ,
					{ 1250 ,  {-0.027077520192132956 }} ,
					{ 1251 ,  {-0.027257512540187507 }} ,
					{ 1262 ,  {-0.027093270233844793 }} ,
					{ 1263 ,  {-0.026917481637928026 }} ,
					{ 2499 ,  {-0.026939415578230277 }} ,
					{ 4996 ,  {-0.027015862775802188 }} ,
					{ 4997 ,  {-0.027185781381143442 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_43 <= 1.301736378640691 ) ? ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 16 ) : ( ( ( scaler_47 <= -1.1869024788858573 ) ? ( 34 ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_32 <= 1.374642225541209 ) ? ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_13 <= -0.644907381388898 ) ? ( 560 ) : ( ( ( scaler_62 <= 1.0000000180025095e-35 ) ? ( 1122 ) : ( 1123 ) ) ) ) ) : ( 281 ) ) ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 18 ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_6 <= -0.31365853924047515 ) ? ( 1248 ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( 4996 ) : ( 4997 ) ) ) : ( 2499 ) ) ) ) ) : ( ( ( scaler_38 <= 0.37679441759687454 ) ? ( 1250 ) : ( 1251 ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( 626 ) : ( 627 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_16 <= 0.992302762794023 ) ? ( 628 ) : ( 629 ) ) ) : ( ( ( scaler_15 <= -1.0934714482259484 ) ? ( 630 ) : ( ( ( scaler_39 <= 1.0000000180025095e-35 ) ? ( 1262 ) : ( 1263 ) ) ) ) ) ) ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 12 ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( ( ( scaler_24 <= 1.0000000180025095e-35 ) ? ( 240 ) : ( 241 ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_12
		
	
		namespace LGBM_Tree_5_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 11 ,  {-0.017456540052332038 }} ,
					{ 15 ,  {0.03337660976351128 }} ,
					{ 16 ,  {0.0301556318570928 }} ,
					{ 17 ,  {-0.02736549122782461 }} ,
					{ 19 ,  {-0.027189853933163297 }} ,
					{ 21 ,  {0.050376427277530514 }} ,
					{ 24 ,  {0.004058952777370494 }} ,
					{ 28 ,  {-0.02727165840172749 }} ,
					{ 36 ,  {-0.026990026141862872 }} ,
					{ 50 ,  {-0.026795912861179508 }} ,
					{ 58 ,  {-0.026812150396232005 }} ,
					{ 59 ,  {-0.026940137066150966 }} ,
					{ 74 ,  {-0.02679470231482228 }} ,
					{ 75 ,  {-0.02691134376909612 }} ,
					{ 81 ,  {0.07412965789171626 }} ,
					{ 82 ,  {0.050680125790799946 }} ,
					{ 83 ,  {0.06575847940391732 }} ,
					{ 102 ,  {-0.027115416630108274 }} ,
					{ 103 ,  {-0.02689629651584083 }} ,
					{ 107 ,  {-0.026787022265824714 }} ,
					{ 109 ,  {-0.026901624400786025 }} ,
					{ 111 ,  {-0.026826109790886978 }} ,
					{ 160 ,  {0.06830872306013906 }} ,
					{ 161 ,  {0.06499794201183651 }} ,
					{ 209 ,  {-0.026676850777414246 }} ,
					{ 210 ,  {-0.026839365661020156 }} ,
					{ 211 ,  {-0.027081953605951364 }} ,
					{ 217 ,  {-0.02698561392504678 }} ,
					{ 220 ,  {-0.02679177051164122 }} ,
					{ 221 ,  {-0.02704186668870557 }} ,
					{ 416 ,  {-0.02688608788696036 }} ,
					{ 417 ,  {-0.026784554293475926 }} ,
					{ 426 ,  {-0.026922241637755258 }} ,
					{ 427 ,  {-0.027163491108971823 }} ,
					{ 432 ,  {-0.027226441470331056 }} ,
					{ 433 ,  {-0.027022417010689477 }} ,
					{ 848 ,  {-0.02705524442616279 }} ,
					{ 849 ,  {-0.02687858653068513 }} ,
					{ 850 ,  {-0.026723540792418583 }} ,
					{ 851 ,  {-0.026906712207664052 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_64 <= 2.2801401251657336 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_40 <= 0.745286601353307 ) ? ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( ( ( scaler_35 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_7 <= 1.35534707815485 ) ? ( 160 ) : ( 161 ) ) ) : ( 81 ) ) ) : ( ( ( scaler_4 <= 0.7202398632493343 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( 50 ) : ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_31 <= -0.8660515593122885 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( scaler_56 <= 0.15346989793967802 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( scaler_44 <= 1.015141243815761 ) ? ( ( ( scaler_32 <= -0.48928257687424165 ) ? ( ( ( scaler_31 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_52 <= -0.527371360340495 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( scaler_45 <= -0.11691300112702074 ) ? ( 426 ) : ( 427 ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_4 <= -0.34030392555002353 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( ( ( scaler_37 <= -0.8838016321924327 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= -1.0000000180025095e-35 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_12
		
	
		namespace LGBM_Tree_6_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.008075628176086208 }} ,
					{ 8 ,  {-0.009202212542595865 }} ,
					{ 15 ,  {-0.010074124626257848 }} ,
					{ 19 ,  {-0.02673465161874837 }} ,
					{ 20 ,  {0.023968226131090772 }} ,
					{ 21 ,  {-0.02778362206762578 }} ,
					{ 23 ,  {0.02058666057651195 }} ,
					{ 37 ,  {-0.026784766221744284 }} ,
					{ 45 ,  {0.07207861128866676 }} ,
					{ 56 ,  {-0.009529148102344839 }} ,
					{ 72 ,  {-0.027033204022372533 }} ,
					{ 73 ,  {-0.027218604020988826 }} ,
					{ 88 ,  {0.06727149944622428 }} ,
					{ 114 ,  {-0.02711622696179654 }} ,
					{ 115 ,  {-0.0269605712623698 }} ,
					{ 178 ,  {0.0660220016119998 }} ,
					{ 232 ,  {-0.026763036751283133 }} ,
					{ 236 ,  {-0.026730216572857818 }} ,
					{ 238 ,  {-0.026754918643951298 }} ,
					{ 358 ,  {0.06383097455875923 }} ,
					{ 359 ,  {0.06420302906763135 }} ,
					{ 466 ,  {-0.026783854712247115 }} ,
					{ 469 ,  {-0.026747430531809974 }} ,
					{ 474 ,  {-0.02691724222419639 }} ,
					{ 475 ,  {-0.0267587841121011 }} ,
					{ 478 ,  {-0.02682404854836696 }} ,
					{ 479 ,  {-0.02699123102826656 }} ,
					{ 934 ,  {-0.026774226057599507 }} ,
					{ 935 ,  {-0.027084532370844155 }} ,
					{ 937 ,  {-0.02681526035542957 }} ,
					{ 940 ,  {-0.02723126404945231 }} ,
					{ 943 ,  {-0.026736988530345604 }} ,
					{ 1872 ,  {-0.027046981946951845 }} ,
					{ 1882 ,  {-0.026941882063295952 }} ,
					{ 1883 ,  {-0.027092775682187892 }} ,
					{ 1884 ,  {-0.027012203152787517 }} ,
					{ 1885 ,  {-0.026834560768505294 }} ,
					{ 3746 ,  {-0.02677586971536581 }} ,
					{ 7494 ,  {-0.026850236476428105 }} ,
					{ 7495 ,  {-0.026981076314878845 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_37 <= 0.3950936492833314 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_12 <= 0.393819719700039 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 88 ) : ( ( ( scaler_36 <= 1.2451571269546495 ) ? ( 178 ) : ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_60 <= -1.0000000180025095e-35 ) ? ( 56 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 232 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 466 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 1872 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 3746 ) : ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 7494 ) : ( 7495 ) ) ) ) ) ) ) : ( 937 ) ) ) : ( 469 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 940 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 1882 ) : ( 1883 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 1884 ) : ( 1885 ) ) ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_13 <= 0.6293012079907891 ) ? ( 236 ) : ( ( ( scaler_43 <= -1.0000000180025095e-35 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 238 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_12
		
	
		namespace LGBM_Tree_7_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.016394216538481048 }} ,
					{ 11 ,  {0.021263945095617312 }} ,
					{ 16 ,  {0.0186111365174824 }} ,
					{ 17 ,  {-0.028095407659904745 }} ,
					{ 19 ,  {0.02271383124318838 }} ,
					{ 20 ,  {-0.02852894637766549 }} ,
					{ 21 ,  {-0.027525980466424956 }} ,
					{ 25 ,  {0.028892920536243802 }} ,
					{ 27 ,  {-0.014937404373610295 }} ,
					{ 36 ,  {0.07694342223845022 }} ,
					{ 48 ,  {-0.02722368449486236 }} ,
					{ 49 ,  {-0.026792275388899552 }} ,
					{ 107 ,  {-0.026912155519142767 }} ,
					{ 148 ,  {0.07315368272940989 }} ,
					{ 149 ,  {0.06735427407715695 }} ,
					{ 150 ,  {0.06258213246108625 }} ,
					{ 151 ,  {0.06649447247443989 }} ,
					{ 210 ,  {-0.026702592706819635 }} ,
					{ 418 ,  {-0.026727900282719427 }} ,
					{ 419 ,  {-0.026867124575342863 }} ,
					{ 422 ,  {-0.02677095836347401 }} ,
					{ 423 ,  {-0.027018840998129907 }} ,
					{ 426 ,  {-0.026623751244271462 }} ,
					{ 834 ,  {-0.027260081938243044 }} ,
					{ 848 ,  {-0.02680927625959358 }} ,
					{ 849 ,  {-0.026990013726706126 }} ,
					{ 850 ,  {-0.026786104338000622 }} ,
					{ 851 ,  {-0.026661638925816585 }} ,
					{ 854 ,  {-0.026726477307589754 }} ,
					{ 855 ,  {-0.02681945050561374 }} ,
					{ 1666 ,  {-0.02689144575820156 }} ,
					{ 1667 ,  {-0.027065281996094082 }} ,
					{ 1670 ,  {-0.026768292459081706 }} ,
					{ 1671 ,  {-0.027019921290627625 }} ,
					{ 3328 ,  {-0.02682620083555652 }} ,
					{ 3331 ,  {-0.02673506629018726 }} ,
					{ 6658 ,  {-0.0268648990182846 }} ,
					{ 6659 ,  {-0.027102313249248486 }} ,
					{ 6660 ,  {-0.026803699465358256 }} ,
					{ 6661 ,  {-0.026901868556703536 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 36 ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_8 <= 0.9222435271028199 ) ? ( 148 ) : ( 149 ) ) ) : ( ( ( scaler_16 <= -0.38289163409575516 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_28 <= 0.7013896525314925 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_16 <= 2.367497159683802 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_39 <= 0.971164659629122 ) ? ( ( ( scaler_63 <= -0.5477631993517276 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( scaler_8 <= 1.2192214427211399 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_23 <= 0.7512654329218379 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_4 <= -0.5524126833098951 ) ? ( 3328 ) : ( ( ( scaler_21 <= -0.27440752862756207 ) ? ( 6658 ) : ( 6659 ) ) ) ) ) : ( ( ( scaler_4 <= 1.3565661365289492 ) ? ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( 6660 ) : ( 6661 ) ) ) : ( 3331 ) ) ) ) ) : ( ( ( scaler_12 <= 0.393819719700039 ) ? ( 1666 ) : ( 1667 ) ) ) ) ) : ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 834 ) : ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 1670 ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 210 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( scaler_53 <= -1.5350598035796497 ) ? ( 426 ) : ( ( ( scaler_22 <= 0.708463064338002 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_12
		
	
		namespace LGBM_Tree_8_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.044944752471692904 }} ,
					{ 19 ,  {-0.012299116396526194 }} ,
					{ 26 ,  {-0.026669520677130593 }} ,
					{ 27 ,  {-0.02681856142527967 }} ,
					{ 28 ,  {0.034939986298089046 }} ,
					{ 31 ,  {-0.027325450753147046 }} ,
					{ 32 ,  {-0.026818929616839033 }} ,
					{ 33 ,  {-0.02744805892641416 }} ,
					{ 41 ,  {0.042023638531525465 }} ,
					{ 42 ,  {0.02332817351075344 }} ,
					{ 44 ,  {0.036573193999263454 }} ,
					{ 46 ,  {-0.02687395558207701 }} ,
					{ 48 ,  {-0.02666214916977084 }} ,
					{ 49 ,  {-0.02681063823173234 }} ,
					{ 50 ,  {-0.02696998919077953 }} ,
					{ 58 ,  {-0.027457985997165587 }} ,
					{ 59 ,  {-0.026943434846007204 }} ,
					{ 61 ,  {-0.026922665860567074 }} ,
					{ 72 ,  {-0.02708256118877447 }} ,
					{ 75 ,  {-0.028331143330442454 }} ,
					{ 80 ,  {-0.027989845910694318 }} ,
					{ 81 ,  {-0.0123739591417311 }} ,
					{ 87 ,  {0.05079391655677162 }} ,
					{ 90 ,  {-0.027303388350183085 }} ,
					{ 91 ,  {-0.026636250878783692 }} ,
					{ 94 ,  {-0.026972205398198102 }} ,
					{ 95 ,  {-0.027480761740879378 }} ,
					{ 102 ,  {-0.026728205434148555 }} ,
					{ 120 ,  {-0.02664873235566109 }} ,
					{ 146 ,  {-0.02666660334349253 }} ,
					{ 147 ,  {-0.026807574390821123 }} ,
					{ 148 ,  {-0.02699346501703519 }} ,
					{ 149 ,  {-0.026698122413241838 }} ,
					{ 172 ,  {0.07489488125929172 }} ,
					{ 173 ,  {0.06602193654623727 }} ,
					{ 207 ,  {-0.02675669663201599 }} ,
					{ 242 ,  {-0.02685103319327291 }} ,
					{ 243 ,  {-0.026672314917200193 }} ,
					{ 412 ,  {-0.02697930398629199 }} ,
					{ 413 ,  {-0.026817792067086756 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_45 <= 0.9615169652523486 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 72 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 146 ) : ( 147 ) ) ) ) ) : ( ( ( scaler_37 <= -0.7239397220079622 ) ? ( ( ( scaler_15 <= 1.2183837979943908 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 80 ) : ( 81 ) ) ) : ( 41 ) ) ) : ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( 42 ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 44 ) : ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 90 ) : ( 91 ) ) ) ) ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( 46 ) : ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 28 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_61 <= 1.0000000180025095e-35 ) ? ( 120 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_12
		
	
		namespace LGBM_Tree_9_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.025801861149540552 }} ,
					{ 10 ,  {-0.021111281479257334 }} ,
					{ 22 ,  {-0.017693242604662884 }} ,
					{ 24 ,  {0.0031916542239284855 }} ,
					{ 26 ,  {-0.01706115123004585 }} ,
					{ 27 ,  {0.05642257034549252 }} ,
					{ 28 ,  {0.0313116234625981 }} ,
					{ 32 ,  {-0.027621176553236922 }} ,
					{ 35 ,  {0.030129287275237296 }} ,
					{ 46 ,  {0.002463199198081704 }} ,
					{ 50 ,  {-0.027404689411524644 }} ,
					{ 51 ,  {-0.026892920799611128 }} ,
					{ 58 ,  {-0.027590840468947123 }} ,
					{ 60 ,  {-0.026979232673528294 }} ,
					{ 61 ,  {0.003798791527313444 }} ,
					{ 66 ,  {-0.026889892150898438 }} ,
					{ 67 ,  {-0.02715824476425387 }} ,
					{ 68 ,  {-0.027239692309334013 }} ,
					{ 69 ,  {-0.026975397570329546 }} ,
					{ 118 ,  {-0.02711941925667978 }} ,
					{ 119 ,  {-0.026873941149719152 }} ,
					{ 126 ,  {-0.027758997180901454 }} ,
					{ 127 ,  {-0.027027620872837655 }} ,
					{ 189 ,  {0.08291207135886641 }} ,
					{ 191 ,  {0.03132208301716072 }} ,
					{ 251 ,  {-0.026803328977489622 }} ,
					{ 376 ,  {0.06083669396802332 }} ,
					{ 377 ,  {0.07561613059850596 }} ,
					{ 380 ,  {0.06227932628176165 }} ,
					{ 381 ,  {0.06778273479450038 }} ,
					{ 498 ,  {-0.02737943314123918 }} ,
					{ 499 ,  {-0.027097324749559046 }} ,
					{ 500 ,  {-0.02685859591824872 }} ,
					{ 993 ,  {-0.02686377681115304 }} ,
					{ 994 ,  {-0.026965176300930246 }} ,
					{ 995 ,  {-0.027313116371558088 }} ,
					{ 1002 ,  {-0.026924042298841617 }} ,
					{ 1003 ,  {-0.027191094989851533 }} ,
					{ 1984 ,  {-0.02717548667909527 }} ,
					{ 1985 ,  {-0.026920317171258507 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -1.0412815437379086 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_22 <= -0.10267662449452843 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 32 ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( scaler_28 <= -0.7475477128849743 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 10 ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 22 ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 46 ) : ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_14 <= 1.0000000180025095e-35 ) ? ( 376 ) : ( 377 ) ) ) : ( 189 ) ) ) : ( ( ( scaler_7 <= 1.1787950452211131 ) ? ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( 380 ) : ( 381 ) ) ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 24 ) : ( ( ( scaler_36 <= 1.0000000180025095e-35 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( scaler_22 <= -0.9138163133270587 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( 28 ) : ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 58 ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 1984 ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 994 ) : ( 995 ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 500 ) : ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_12
		
	
		namespace LGBM_Tree_0_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.009752103940805555 }} ,
					{ 10 ,  {0.02027100309329385 }} ,
					{ 13 ,  {0.02202317352327858 }} ,
					{ 16 ,  {-0.029537131619937918 }} ,
					{ 17 ,  {-0.026782940982714235 }} ,
					{ 23 ,  {0.054819465179057315 }} ,
					{ 24 ,  {-0.026772206296828572 }} ,
					{ 25 ,  {-0.027287429530131097 }} ,
					{ 30 ,  {-0.026629045945781867 }} ,
					{ 45 ,  {0.0661026455649181 }} ,
					{ 89 ,  {0.06400542895220572 }} ,
					{ 114 ,  {-0.026761140039129064 }} ,
					{ 116 ,  {-0.02661368071918165 }} ,
					{ 117 ,  {-0.0267287034647636 }} ,
					{ 124 ,  {-0.02658376159991216 }} ,
					{ 125 ,  {-0.026747074815002655 }} ,
					{ 127 ,  {-0.02668227533413326 }} ,
					{ 176 ,  {0.06265948204218753 }} ,
					{ 224 ,  {-0.02672317215107587 }} ,
					{ 225 ,  {-0.026563086609708852 }} ,
					{ 230 ,  {-0.027119275881095015 }} ,
					{ 236 ,  {-0.026624223250493517 }} ,
					{ 237 ,  {-0.026806803844215594 }} ,
					{ 239 ,  {-0.02693976815574511 }} ,
					{ 252 ,  {-0.02674098209141848 }} ,
					{ 253 ,  {-0.0269013878339619 }} ,
					{ 354 ,  {0.06081374614830068 }} ,
					{ 355 ,  {0.06195149020989219 }} ,
					{ 452 ,  {-0.02661770750211484 }} ,
					{ 453 ,  {-0.02683852660555668 }} ,
					{ 454 ,  {-0.026700883373593783 }} ,
					{ 462 ,  {-0.026969421611417806 }} ,
					{ 463 ,  {-0.02678589604585288 }} ,
					{ 476 ,  {-0.026846824485520226 }} ,
					{ 477 ,  {-0.026680456602821912 }} ,
					{ 1821 ,  {-0.027080961156071726 }} ,
					{ 1822 ,  {-0.02684636747267052 }} ,
					{ 1823 ,  {-0.02666634353093419 }} ,
					{ 3640 ,  {-0.026931961103633252 }} ,
					{ 3641 ,  {-0.0267412931599132 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 10 ) : ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 176 ) : ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 454 ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 230 ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( 30 ) : ( ( ( scaler_45 <= 0.8074555414838673 ) ? ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 124 ) : ( 125 ) ) ) : ( ( ( scaler_63 <= 0.1333710072191173 ) ? ( ( ( scaler_20 <= 1.0000000180025095e-35 ) ? ( 252 ) : ( 253 ) ) ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_13
		
	
		namespace LGBM_Tree_1_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0369559868543105 }} ,
					{ 10 ,  {-0.004791008760393401 }} ,
					{ 13 ,  {0.06642744492489987 }} ,
					{ 15 ,  {-0.013287467518415256 }} ,
					{ 25 ,  {0.002639827806426699 }} ,
					{ 29 ,  {0.07915480064878062 }} ,
					{ 48 ,  {-0.012749431085963657 }} ,
					{ 57 ,  {-0.0104273024155488 }} ,
					{ 88 ,  {-0.027296076995358045 }} ,
					{ 89 ,  {-0.026974018084122493 }} ,
					{ 92 ,  {-0.02678331763106542 }} ,
					{ 94 ,  {-0.02677078961265831 }} ,
					{ 95 ,  {-0.026704599703756573 }} ,
					{ 112 ,  {0.03306112470831077 }} ,
					{ 186 ,  {-0.026830645692238937 }} ,
					{ 187 ,  {-0.02705677807927826 }} ,
					{ 196 ,  {-0.02735826413932917 }} ,
					{ 197 ,  {-0.02856370064126006 }} ,
					{ 198 ,  {-0.027193580879390247 }} ,
					{ 226 ,  {0.06631094065897848 }} ,
					{ 227 ,  {0.058797718953728886 }} ,
					{ 363 ,  {-0.027182498329838684 }} ,
					{ 364 ,  {-0.026896704639370512 }} ,
					{ 398 ,  {-0.02690805726397193 }} ,
					{ 399 ,  {-0.02674660204958347 }} ,
					{ 720 ,  {-0.026852835586447188 }} ,
					{ 721 ,  {-0.026735052133873505 }} ,
					{ 723 ,  {-0.02705575383993704 }} ,
					{ 724 ,  {-0.027029282115701887 }} ,
					{ 725 ,  {-0.026803849266252 }} ,
					{ 730 ,  {-0.02664905535225854 }} ,
					{ 731 ,  {-0.026758674014945645 }} ,
					{ 733 ,  {-0.026767222291310386 }} ,
					{ 734 ,  {-0.027067654546072673 }} ,
					{ 735 ,  {-0.02682106989502747 }} ,
					{ 1444 ,  {-0.026772997849743477 }} ,
					{ 1445 ,  {-0.026914165844552154 }} ,
					{ 1464 ,  {-0.02677281777123427 }} ,
					{ 2930 ,  {-0.027045814434638132 }} ,
					{ 2931 ,  {-0.026883198750484602 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_5 <= -2.1900950544812914 ) ? ( 4 ) : ( ( ( scaler_12 <= -1.4486642041448448 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_36 <= -0.49056302876404567 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 720 ) : ( 721 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 1444 ) : ( 1445 ) ) ) : ( 723 ) ) ) ) ) : ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( ( ( scaler_13 <= 1.0000000180025095e-35 ) ? ( 724 ) : ( 725 ) ) ) : ( 363 ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( 364 ) : ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 1464 ) : ( ( ( scaler_31 <= -0.8660515593122885 ) ? ( 2930 ) : ( 2931 ) ) ) ) ) : ( 733 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( scaler_60 <= 0.20238452449861685 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_14 <= -1.214697137479143 ) ? ( 48 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 198 ) : ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_40 <= 0.745286601353307 ) ? ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 112 ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_13
		
	
		namespace LGBM_Tree_2_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.027605072940992615 }} ,
					{ 10 ,  {0.023730915793514273 }} ,
					{ 16 ,  {0.026884279463425188 }} ,
					{ 26 ,  {0.01867806017580796 }} ,
					{ 27 ,  {-0.027976426013250583 }} ,
					{ 35 ,  {-0.02917525224986563 }} ,
					{ 36 ,  {-0.027051878266854387 }} ,
					{ 37 ,  {-0.0008870517723026209 }} ,
					{ 39 ,  {0.0009043114176488205 }} ,
					{ 45 ,  {-0.027010816512491105 }} ,
					{ 46 ,  {-0.026882173385886304 }} ,
					{ 47 ,  {-0.027301494437138064 }} ,
					{ 49 ,  {-0.030777563773288892 }} ,
					{ 68 ,  {-0.02719827701939678 }} ,
					{ 69 ,  {-0.026766938996773737 }} ,
					{ 76 ,  {0.040338219736415375 }} ,
					{ 88 ,  {-0.026782180038261147 }} ,
					{ 89 ,  {-0.026914356955409724 }} ,
					{ 96 ,  {-0.027460025003572544 }} ,
					{ 103 ,  {-0.027064161960229923 }} ,
					{ 154 ,  {0.07939043070916375 }} ,
					{ 194 ,  {-0.026852029514860876 }} ,
					{ 195 ,  {-0.027137747725018403 }} ,
					{ 203 ,  {-0.027631833067519353 }} ,
					{ 205 ,  {-0.026734394362657926 }} ,
					{ 310 ,  {0.07190973811491122 }} ,
					{ 400 ,  {-0.02681423173646985 }} ,
					{ 401 ,  {-0.02703284858415856 }} ,
					{ 403 ,  {-0.027261254515938516 }} ,
					{ 404 ,  {-0.027473655385536547 }} ,
					{ 409 ,  {-0.026798549366994898 }} ,
					{ 622 ,  {0.06027159810181999 }} ,
					{ 623 ,  {0.06280923019928601 }} ,
					{ 805 ,  {-0.026822638892171374 }} ,
					{ 810 ,  {-0.027089665046477404 }} ,
					{ 811 ,  {-0.026846227296162636 }} ,
					{ 816 ,  {-0.026838395255870708 }} ,
					{ 817 ,  {-0.02704858285624505 }} ,
					{ 1608 ,  {-0.026972595809089634 }} ,
					{ 1609 ,  {-0.027247628001049948 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 16 ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( ( ( scaler_55 <= 0.4550024248814398 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 76 ) : ( ( ( scaler_64 <= 0.3422780855468171 ) ? ( 154 ) : ( ( ( scaler_6 <= -1.4768258189528949 ) ? ( 310 ) : ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( 622 ) : ( 623 ) ) ) ) ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_30 <= -0.7399671729767032 ) ? ( 10 ) : ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_37 <= 1.0000000180025095e-35 ) ? ( 88 ) : ( 89 ) ) ) : ( 45 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 96 ) : ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.12545810464432175 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( scaler_64 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( 1608 ) : ( 1609 ) ) ) : ( 805 ) ) ) : ( 403 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 404 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 816 ) : ( 817 ) ) ) : ( 409 ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_13
		
	
		namespace LGBM_Tree_3_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.027635413211300225 }} ,
					{ 12 ,  {-0.015198896141644856 }} ,
					{ 16 ,  {0.008595918206473678 }} ,
					{ 20 ,  {-0.019261946479046547 }} ,
					{ 21 ,  {0.052175674430417464 }} ,
					{ 22 ,  {0.014854396003258219 }} ,
					{ 26 ,  {-0.027196989280365513 }} ,
					{ 28 ,  {-0.01070537428379263 }} ,
					{ 30 ,  {0.05484925559392243 }} ,
					{ 31 ,  {-0.02749678129426581 }} ,
					{ 34 ,  {0.044997438233779344 }} ,
					{ 47 ,  {-0.027413244255454286 }} ,
					{ 59 ,  {-0.027123777727443385 }} ,
					{ 109 ,  {-0.026691841216260555 }} ,
					{ 116 ,  {-0.02702796698329466 }} ,
					{ 140 ,  {0.06576446989417187 }} ,
					{ 141 ,  {0.06925815897034264 }} ,
					{ 142 ,  {0.05854169674211688 }} ,
					{ 143 ,  {0.06383866717627934 }} ,
					{ 186 ,  {-0.026864444573867087 }} ,
					{ 187 ,  {-0.02674555306404593 }} ,
					{ 216 ,  {-0.026762742836979093 }} ,
					{ 217 ,  {-0.026960901865554616 }} ,
					{ 234 ,  {-0.026915105733973977 }} ,
					{ 235 ,  {-0.026716890243046895 }} ,
					{ 368 ,  {-0.026927949095148597 }} ,
					{ 369 ,  {-0.026741455619351824 }} ,
					{ 370 ,  {-0.026922598651211407 }} ,
					{ 371 ,  {-0.027174268860234857 }} ,
					{ 441 ,  {-0.02677846539013838 }} ,
					{ 442 ,  {-0.027158083524988635 }} ,
					{ 443 ,  {-0.0269082329218788 }} ,
					{ 444 ,  {-0.026797262266505823 }} ,
					{ 445 ,  {-0.026705943551594065 }} ,
					{ 446 ,  {-0.027044773509432674 }} ,
					{ 880 ,  {-0.02681853908855375 }} ,
					{ 894 ,  {-0.026756622796798343 }} ,
					{ 895 ,  {-0.026925511697926414 }} ,
					{ 1762 ,  {-0.027082701030235898 }} ,
					{ 1763 ,  {-0.026916467918120492 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= 0.30954233844666573 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 34 ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_38 <= -0.2990721176962556 ) ? ( 880 ) : ( ( ( scaler_32 <= 1.0000000180025095e-35 ) ? ( 1762 ) : ( 1763 ) ) ) ) ) : ( 441 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 442 ) : ( 443 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 446 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 894 ) : ( 895 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 28 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_55 <= -0.3735851870240589 ) ? ( 116 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_13
		
	
		namespace LGBM_Tree_4_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.02458969110730434 }} ,
					{ 12 ,  {0.023282063735104296 }} ,
					{ 14 ,  {-0.009072224822648741 }} ,
					{ 16 ,  {0.05097034725015235 }} ,
					{ 18 ,  {0.0010619588406986936 }} ,
					{ 26 ,  {-0.013563010882919885 }} ,
					{ 31 ,  {0.03078780839337518 }} ,
					{ 34 ,  {-0.013681194486963375 }} ,
					{ 55 ,  {-0.02821538255053311 }} ,
					{ 61 ,  {0.07508996066391145 }} ,
					{ 71 ,  {-0.02765433184607229 }} ,
					{ 77 ,  {-0.02792251929499667 }} ,
					{ 79 ,  {-0.027356328135829416 }} ,
					{ 121 ,  {0.06672343259584491 }} ,
					{ 152 ,  {-0.027121358997605607 }} ,
					{ 153 ,  {-0.02683259421124234 }} ,
					{ 216 ,  {-0.026819427964653406 }} ,
					{ 217 ,  {-0.0270389065072682 }} ,
					{ 218 ,  {-0.027840323753929492 }} ,
					{ 219 ,  {-0.02701806259096913 }} ,
					{ 240 ,  {0.0613468368494836 }} ,
					{ 241 ,  {0.05453682856752234 }} ,
					{ 280 ,  {-0.02703115825487013 }} ,
					{ 281 ,  {-0.027452931533508786 }} ,
					{ 282 ,  {-0.026942174282780892 }} ,
					{ 283 ,  {-0.027176216189231273 }} ,
					{ 626 ,  {-0.026836190993463974 }} ,
					{ 627 ,  {-0.02699931283322445 }} ,
					{ 628 ,  {-0.02680552269800697 }} ,
					{ 629 ,  {-0.026956697809195396 }} ,
					{ 1250 ,  {-0.026780148731292492 }} ,
					{ 1251 ,  {-0.02701301582214313 }} ,
					{ 1260 ,  {-0.027111345577527302 }} ,
					{ 1261 ,  {-0.026926537999970843 }} ,
					{ 1262 ,  {-0.027000120522043744 }} ,
					{ 1263 ,  {-0.026825225565498045 }} ,
					{ 2496 ,  {-0.02690291336958796 }} ,
					{ 2497 ,  {-0.027072277908688276 }} ,
					{ 2498 ,  {-0.02698061535946769 }} ,
					{ 2499 ,  {-0.027299605686600777 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_43 <= 1.301736378640691 ) ? ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 16 ) : ( ( ( scaler_54 <= -0.7695635502707968 ) ? ( 34 ) : ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_47 <= -0.13672307789515883 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -2.639993098665314 ) ? ( 18 ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.23632274785604426 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_45 <= 0.3452712701784233 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 2496 ) : ( 2497 ) ) ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 2498 ) : ( 2499 ) ) ) ) ) : ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 1250 ) : ( 1251 ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( 626 ) : ( 627 ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_16 <= 0.992302762794023 ) ? ( 628 ) : ( 629 ) ) ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 1260 ) : ( 1261 ) ) ) : ( ( ( scaler_39 <= 1.0000000180025095e-35 ) ? ( 1262 ) : ( 1263 ) ) ) ) ) ) ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 12 ) : ( ( ( scaler_14 <= -1.6356339642850823 ) ? ( 26 ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 216 ) : ( 217 ) ) ) : ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_13
		
	
		namespace LGBM_Tree_5_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {-0.01211066023625204 }} ,
					{ 12 ,  {0.03692290343760572 }} ,
					{ 16 ,  {0.029074494597871092 }} ,
					{ 17 ,  {-0.027312648998270884 }} ,
					{ 19 ,  {-0.027132867919686263 }} ,
					{ 23 ,  {0.04706006622456835 }} ,
					{ 26 ,  {-0.026870001427729003 }} ,
					{ 27 ,  {-0.026695223269677926 }} ,
					{ 30 ,  {0.027372539215527243 }} ,
					{ 36 ,  {-0.026922495004085025 }} ,
					{ 37 ,  {-0.026744863189624792 }} ,
					{ 45 ,  {0.054075132501976444 }} ,
					{ 59 ,  {-0.029188338342479303 }} ,
					{ 63 ,  {-0.009586987962668792 }} ,
					{ 89 ,  {0.07329096738838192 }} ,
					{ 113 ,  {-0.026897228460844608 }} ,
					{ 116 ,  {-0.026947765079505467 }} ,
					{ 124 ,  {-0.027507144250995742 }} ,
					{ 176 ,  {0.06519923100763667 }} ,
					{ 225 ,  {-0.0267046337667673 }} ,
					{ 228 ,  {-0.02675643537468915 }} ,
					{ 230 ,  {-0.026955428551493923 }} ,
					{ 231 ,  {-0.02671667678070973 }} ,
					{ 234 ,  {-0.02669999424079647 }} ,
					{ 235 ,  {-0.02684547694713076 }} ,
					{ 251 ,  {-0.02709624930701396 }} ,
					{ 354 ,  {0.06231458420200723 }} ,
					{ 355 ,  {0.06052460582316019 }} ,
					{ 448 ,  {-0.02667145040838034 }} ,
					{ 449 ,  {-0.02683063062005894 }} ,
					{ 458 ,  {-0.027079444435735248 }} ,
					{ 1000 ,  {-0.026980996293913886 }} ,
					{ 1001 ,  {-0.02673708239351987 }} ,
					{ 1002 ,  {-0.026698032245604682 }} ,
					{ 1003 ,  {-0.026884570594138985 }} ,
					{ 1836 ,  {-0.0270768716822558 }} ,
					{ 1837 ,  {-0.02687126117997954 }} ,
					{ 1839 ,  {-0.026781694059716324 }} ,
					{ 3676 ,  {-0.027023989044862362 }} ,
					{ 3677 ,  {-0.02685361100737251 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_4 <= -0.7645214410697666 ) ? ( 10 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 176 ) : ( ( ( scaler_60 <= 1.3866121256028412 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 12 ) : ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( ( ( scaler_46 <= 1.237827496109489 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_53 <= -0.961532671523328 ) ? ( 448 ) : ( 449 ) ) ) : ( 225 ) ) ) : ( 113 ) ) ) : ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 228 ) : ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( 458 ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_54 <= -0.9599833215560546 ) ? ( 1836 ) : ( 1837 ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( 3676 ) : ( 3677 ) ) ) : ( 1839 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.0115589070679267 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_62 <= 0.13130100425610336 ) ? ( 116 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 30 ) : ( ( ( scaler_11 <= 0.7942402599649626 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 124 ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_7 <= 1.35534707815485 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( 1000 ) : ( 1001 ) ) ) : ( ( ( scaler_16 <= 2.367497159683802 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_13
		
	
		namespace LGBM_Tree_6_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.00779162501128355 }} ,
					{ 8 ,  {-0.008868954861228828 }} ,
					{ 10 ,  {-0.02711901410255038 }} ,
					{ 15 ,  {-0.009776868371871507 }} ,
					{ 19 ,  {-0.026667685249683517 }} ,
					{ 22 ,  {0.01310452874229083 }} ,
					{ 37 ,  {-0.026722627880310906 }} ,
					{ 47 ,  {0.04099297111050252 }} ,
					{ 56 ,  {-0.009200754188932226 }} ,
					{ 72 ,  {-0.026981057211467624 }} ,
					{ 73 ,  {-0.02716629326936871 }} ,
					{ 92 ,  {0.07167400867111293 }} ,
					{ 114 ,  {-0.027062427392352296 }} ,
					{ 115 ,  {-0.026893513045541773 }} ,
					{ 186 ,  {0.06649898704382597 }} ,
					{ 232 ,  {-0.026698936018405908 }} ,
					{ 237 ,  {-0.02666568930966789 }} ,
					{ 238 ,  {-0.026694649128017778 }} ,
					{ 374 ,  {0.05867995224208969 }} ,
					{ 466 ,  {-0.02671825887110493 }} ,
					{ 472 ,  {-0.026698443540903977 }} ,
					{ 473 ,  {-0.026895955147830625 }} ,
					{ 478 ,  {-0.02676424023145796 }} ,
					{ 479 ,  {-0.026935971835782946 }} ,
					{ 750 ,  {0.06306519166295488 }} ,
					{ 751 ,  {0.06093624591384705 }} ,
					{ 934 ,  {-0.026704381034783682 }} ,
					{ 935 ,  {-0.02703070445866046 }} ,
					{ 937 ,  {-0.026724160042360435 }} ,
					{ 938 ,  {-0.026663202365174627 }} ,
					{ 939 ,  {-0.02681885655148853 }} ,
					{ 940 ,  {-0.027188891004755425 }} ,
					{ 943 ,  {-0.02666895325093165 }} ,
					{ 1872 ,  {-0.026794986855612858 }} ,
					{ 1882 ,  {-0.026887434893273283 }} ,
					{ 1883 ,  {-0.02704590215503186 }} ,
					{ 1884 ,  {-0.02695367629392096 }} ,
					{ 1885 ,  {-0.026768666291366334 }} ,
					{ 3746 ,  {-0.027060642733456958 }} ,
					{ 3747 ,  {-0.026875351332936493 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_63 <= -0.3774796477090164 ) ? ( 10 ) : ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 22 ) : ( ( ( scaler_43 <= 0.9700411616699182 ) ? ( ( ( scaler_56 <= 0.7590614128302521 ) ? ( 92 ) : ( ( ( scaler_12 <= -1.2644158117603561 ) ? ( 186 ) : ( ( ( scaler_43 <= -0.3567397062131727 ) ? ( 374 ) : ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( 750 ) : ( 751 ) ) ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_60 <= -1.0000000180025095e-35 ) ? ( 56 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( 232 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 466 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 1872 ) : ( ( ( scaler_16 <= 0.1671861246601561 ) ? ( 3746 ) : ( 3747 ) ) ) ) ) : ( 937 ) ) ) : ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 940 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 1882 ) : ( 1883 ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 1884 ) : ( 1885 ) ) ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( 472 ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 238 ) : ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_13
		
	
		namespace LGBM_Tree_7_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03823611052900577 }} ,
					{ 8 ,  {0.017210585261024865 }} ,
					{ 12 ,  {0.001991203906512616 }} ,
					{ 18 ,  {-0.028042564899088237 }} ,
					{ 19 ,  {-0.026871259237652212 }} ,
					{ 21 ,  {0.030920409709600246 }} ,
					{ 22 ,  {0.04811056960475404 }} ,
					{ 40 ,  {0.07221603571544483 }} ,
					{ 46 ,  {-0.027933002456661728 }} ,
					{ 47 ,  {-0.026827916302884544 }} ,
					{ 52 ,  {-0.013137280789163994 }} ,
					{ 55 ,  {0.018858812363899635 }} ,
					{ 107 ,  {-0.028290200274181217 }} ,
					{ 108 ,  {-0.0267773868534288 }} ,
					{ 109 ,  {-0.0276707529121027 }} ,
					{ 164 ,  {0.06883659502495271 }} ,
					{ 165 ,  {0.06372736809898431 }} ,
					{ 166 ,  {0.059333139043218866 }} ,
					{ 167 ,  {0.06290574804596186 }} ,
					{ 212 ,  {-0.02792101788951787 }} ,
					{ 852 ,  {-0.027103667529586713 }} ,
					{ 853 ,  {-0.02673698282070143 }} ,
					{ 3418 ,  {-0.02663738418468789 }} ,
					{ 3421 ,  {-0.02664622662109067 }} ,
					{ 3422 ,  {-0.02671657682375942 }} ,
					{ 3423 ,  {-0.02688142567222577 }} ,
					{ 6832 ,  {-0.026986041824840414 }} ,
					{ 6838 ,  {-0.02670512506152846 }} ,
					{ 6839 ,  {-0.026956357084467454 }} ,
					{ 6840 ,  {-0.026809385322456022 }} ,
					{ 6841 ,  {-0.026656169410880604 }} ,
					{ 13666 ,  {-0.026675224502170514 }} ,
					{ 13668 ,  {-0.026904534947663147 }} ,
					{ 13669 ,  {-0.027139498894147452 }} ,
					{ 13670 ,  {-0.026675175794695135 }} ,
					{ 13671 ,  {-0.0268728986187673 }} ,
					{ 27335 ,  {-0.02670665192813893 }} ,
					{ 54668 ,  {-0.0266962143887986 }} ,
					{ 109338 ,  {-0.026853228321594404 }} ,
					{ 109339 ,  {-0.02702322209799786 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 8 ) : ( ( ( scaler_62 <= -1.095883016010695 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 40 ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_8 <= 0.9222435271028199 ) ? ( 164 ) : ( 165 ) ) ) : ( ( ( scaler_16 <= -0.38289163409575516 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 22 ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 2.706017084409388 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 12 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 52 ) : ( ( ( scaler_8 <= 2.4071331051944194 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 212 ) : ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 852 ) : ( 853 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 6832 ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 13666 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 54668 ) : ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( 109338 ) : ( 109339 ) ) ) ) ) : ( 27335 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 13668 ) : ( 13669 ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 13670 ) : ( 13671 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 3418 ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 6838 ) : ( 6839 ) ) ) ) ) ) ) : ( ( ( scaler_54 <= 0.9442143912965238 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 6840 ) : ( 6841 ) ) ) : ( 3421 ) ) ) : ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 3422 ) : ( 3423 ) ) ) ) ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_13
		
	
		namespace LGBM_Tree_8_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.026274311662607314 }} ,
					{ 18 ,  {-0.00726102973182927 }} ,
					{ 20 ,  {-0.010353453763877838 }} ,
					{ 26 ,  {-0.026606689655453597 }} ,
					{ 27 ,  {-0.026758757906725068 }} ,
					{ 29 ,  {-0.010644425444483041 }} ,
					{ 31 ,  {0.0531740495437584 }} ,
					{ 32 ,  {-0.026765472283834163 }} ,
					{ 33 ,  {-0.027212204528957253 }} ,
					{ 42 ,  {-0.026700227358182962 }} ,
					{ 46 ,  {-0.027208351040224645 }} ,
					{ 47 ,  {0.009092370412707875 }} ,
					{ 49 ,  {-0.026763342783588717 }} ,
					{ 56 ,  {-0.027063622523400905 }} ,
					{ 60 ,  {-0.027418637592561843 }} ,
					{ 61 ,  {-0.026759883661405328 }} ,
					{ 76 ,  {-0.02662083084912796 }} ,
					{ 77 ,  {-0.026749541390025073 }} ,
					{ 78 ,  {-0.02671854418693489 }} ,
					{ 79 ,  {-0.026883804040109555 }} ,
					{ 86 ,  {-0.02738505842324575 }} ,
					{ 87 ,  {-0.026949946917233458 }} ,
					{ 88 ,  {-0.028063049676432212 }} ,
					{ 89 ,  {0.04471046769596085 }} ,
					{ 90 ,  {0.02127297415829667 }} ,
					{ 96 ,  {-0.02668972118787762 }} ,
					{ 97 ,  {-0.026563656063706982 }} ,
					{ 100 ,  {-0.026938305779407402 }} ,
					{ 101 ,  {-0.026710846469648154 }} ,
					{ 102 ,  {-0.02664267456963166 }} ,
					{ 114 ,  {-0.02685737504063698 }} ,
					{ 115 ,  {-0.02663559599126633 }} ,
					{ 182 ,  {0.03292024697698144 }} ,
					{ 207 ,  {-0.02665716418225087 }} ,
					{ 367 ,  {0.0576755271243726 }} ,
					{ 412 ,  {-0.026862819106495562 }} ,
					{ 413 ,  {-0.026706573784883416 }} ,
					{ 732 ,  {0.0739997436063589 }} ,
					{ 1466 ,  {0.06373695614908202 }} ,
					{ 1467 ,  {0.06823140667475022 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_14 <= -0.16235507046429487 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( 42 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_46 <= -0.9869112868208454 ) ? ( 90 ) : ( ( ( scaler_44 <= -1.0000000180025095e-35 ) ? ( 182 ) : ( ( ( scaler_28 <= 0.37940357132783326 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( 732 ) : ( ( ( scaler_21 <= 0.7549340906140481 ) ? ( 1466 ) : ( 1467 ) ) ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( 101 ) ) ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 102 ) : ( ( ( scaler_5 <= 0.40259039964233895 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_12 <= -0.15892545745342618 ) ? ( ( ( scaler_43 <= -0.3567397062131727 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_13
		
	
		namespace LGBM_Tree_9_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 13 ,  {0.030880191896618055 }} ,
					{ 18 ,  {0.04310504013913306 }} ,
					{ 19 ,  {-0.027340134962191055 }} ,
					{ 20 ,  {-0.014121188147031042 }} ,
					{ 22 ,  {-0.013174729335752276 }} ,
					{ 23 ,  {-0.027605789146653088 }} ,
					{ 24 ,  {-0.02754672857965473 }} ,
					{ 28 ,  {0.003991002194035217 }} ,
					{ 33 ,  {-0.026814839380066763 }} ,
					{ 35 ,  {0.023835548607329688 }} ,
					{ 42 ,  {-0.016600181104934764 }} ,
					{ 50 ,  {-0.02704726891609141 }} ,
					{ 51 ,  {-0.026789567553493033 }} ,
					{ 58 ,  {-0.027069925884735557 }} ,
					{ 59 ,  {-0.026818288773309926 }} ,
					{ 62 ,  {-0.027685887503813858 }} ,
					{ 63 ,  {-0.02696192274770782 }} ,
					{ 64 ,  {-0.027597208078865405 }} ,
					{ 65 ,  {-0.02693018631264099 }} ,
					{ 68 ,  {-0.008609613685597274 }} ,
					{ 86 ,  {0.02542453979378852 }} ,
					{ 123 ,  {-0.02673572542885301 }} ,
					{ 138 ,  {-0.02759567201265243 }} ,
					{ 139 ,  {-0.027003156262480784 }} ,
					{ 174 ,  {0.07776341472753659 }} ,
					{ 242 ,  {-0.027329667423987458 }} ,
					{ 243 ,  {-0.027031079232122307 }} ,
					{ 351 ,  {0.047770136142461984 }} ,
					{ 481 ,  {-0.026791181782863965 }} ,
					{ 482 ,  {-0.026901125574601503 }} ,
					{ 483 ,  {-0.027245743302323863 }} ,
					{ 488 ,  {-0.02686127163198635 }} ,
					{ 489 ,  {-0.026734579518419566 }} ,
					{ 490 ,  {-0.02686225600243824 }} ,
					{ 491 ,  {-0.027119433848517567 }} ,
					{ 701 ,  {0.06044260486194421 }} ,
					{ 960 ,  {-0.027113762899753775 }} ,
					{ 961 ,  {-0.02685230510951378 }} ,
					{ 1400 ,  {0.07402158658986854 }} ,
					{ 1401 ,  {0.06811280183236705 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_38 <= 1.0000000180025095e-35 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 68 ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_20 <= -1.1341235638866207 ) ? ( 20 ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 42 ) : ( ( ( scaler_29 <= -0.5892438348161141 ) ? ( 86 ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 174 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( 1400 ) : ( 1401 ) ) ) : ( 701 ) ) ) : ( 351 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_36 <= -0.17497754590610112 ) ? ( 24 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 28 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_29 <= -0.24867334084698148 ) ? ( 960 ) : ( 961 ) ) ) : ( 481 ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( scaler_63 <= 0.47393811050453977 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( ( ( scaler_43 <= 0.6383459446991454 ) ? ( 488 ) : ( 489 ) ) ) : ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_13
		
	
		namespace LGBM_Tree_0_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.02372759158265823 }} ,
					{ 11 ,  {-0.02720298061194217 }} ,
					{ 12 ,  {0.021815739863749864 }} ,
					{ 17 ,  {0.052171969158223835 }} ,
					{ 20 ,  {-0.02680443576122592 }} ,
					{ 21 ,  {-0.02661141293248382 }} ,
					{ 26 ,  {-0.026707304293913266 }} ,
					{ 27 ,  {-0.027197817754011408 }} ,
					{ 32 ,  {0.06463410791061665 }} ,
					{ 60 ,  {-0.02666026743183539 }} ,
					{ 61 ,  {-0.02656878924215387 }} ,
					{ 63 ,  {-0.026806097134547666 }} ,
					{ 66 ,  {0.05565866926907052 }} ,
					{ 114 ,  {-0.026707074054826294 }} ,
					{ 116 ,  {-0.026550397860520675 }} ,
					{ 117 ,  {-0.02666641803491906 }} ,
					{ 124 ,  {-0.026745017478124074 }} ,
					{ 134 ,  {0.05883066483155755 }} ,
					{ 135 ,  {0.06211302054018371 }} ,
					{ 224 ,  {-0.026668954563891595 }} ,
					{ 225 ,  {-0.026506158475837916 }} ,
					{ 230 ,  {-0.027072005994031114 }} ,
					{ 236 ,  {-0.0265590444100915 }} ,
					{ 237 ,  {-0.02675737870082381 }} ,
					{ 239 ,  {-0.026887132624504595 }} ,
					{ 250 ,  {-0.02668046074536174 }} ,
					{ 251 ,  {-0.026540857382681162 }} ,
					{ 452 ,  {-0.02655400485404696 }} ,
					{ 453 ,  {-0.026781799525351327 }} ,
					{ 462 ,  {-0.026921962264683 }} ,
					{ 463 ,  {-0.026732190493761594 }} ,
					{ 476 ,  {-0.02679650735870099 }} ,
					{ 477 ,  {-0.026619077049284998 }} ,
					{ 908 ,  {-0.02656207938159131 }} ,
					{ 909 ,  {-0.026707929942365313 }} ,
					{ 1821 ,  {-0.027039195729092844 }} ,
					{ 1822 ,  {-0.026784957386484728 }} ,
					{ 1823 ,  {-0.02660528937224596 }} ,
					{ 3640 ,  {-0.026883237629766455 }} ,
					{ 3641 ,  {-0.02668236004437216 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( ( ( scaler_46 <= -0.3512716345550356 ) ? ( ( ( scaler_12 <= 0.9465648968535042 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( 32 ) : ( ( ( scaler_44 <= 0.8622876819817117 ) ? ( 66 ) : ( ( ( scaler_31 <= 0.6637776855946061 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_30 <= -0.576866808291141 ) ? ( 12 ) : ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( 908 ) : ( 909 ) ) ) : ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_6 <= 0.6168752845294607 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( scaler_20 <= -0.7816530450858478 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 114 ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 230 ) : ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 124 ) : ( ( ( scaler_29 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_14
		
	
		namespace LGBM_Tree_1_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.02954106926370006 }} ,
					{ 10 ,  {-0.012359655844481284 }} ,
					{ 15 ,  {0.05862250088087811 }} ,
					{ 24 ,  {-0.02734281939719567 }} ,
					{ 26 ,  {-0.028627018254867756 }} ,
					{ 27 ,  {-0.02774282991083185 }} ,
					{ 29 ,  {-0.028968698547888968 }} ,
					{ 47 ,  {-0.02684974849069412 }} ,
					{ 51 ,  {0.01068596107929482 }} ,
					{ 57 ,  {-0.027857516079140596 }} ,
					{ 93 ,  {-0.02682747666222858 }} ,
					{ 100 ,  {0.025243171189570396 }} ,
					{ 112 ,  {-0.027331755526283936 }} ,
					{ 176 ,  {-0.026744955883709617 }} ,
					{ 178 ,  {-0.02715740810528577 }} ,
					{ 180 ,  {-0.026826333554276705 }} ,
					{ 181 ,  {-0.02665228117620453 }} ,
					{ 184 ,  {-0.02670645960816187 }} ,
					{ 185 ,  {-0.026601613094939948 }} ,
					{ 226 ,  {-0.027070640632621268 }} ,
					{ 355 ,  {-0.02701774790878027 }} ,
					{ 358 ,  {-0.026817092388004372 }} ,
					{ 359 ,  {-0.027090726675592994 }} ,
					{ 364 ,  {-0.02668948090460048 }} ,
					{ 367 ,  {-0.02674063030830319 }} ,
					{ 404 ,  {0.0202128957881601 }} ,
					{ 406 ,  {0.07600869800811076 }} ,
					{ 407 ,  {0.06449776817796342 }} ,
					{ 454 ,  {-0.026667426738188334 }} ,
					{ 455 ,  {-0.0269187781444563 }} ,
					{ 708 ,  {-0.026662753447866224 }} ,
					{ 709 ,  {-0.026907158496770597 }} ,
					{ 731 ,  {-0.02673340951241452 }} ,
					{ 732 ,  {-0.026859443818321393 }} ,
					{ 733 ,  {-0.02707992724036524 }} ,
					{ 810 ,  {0.0570846171725655 }} ,
					{ 1460 ,  {-0.027016567568158414 }} ,
					{ 1461 ,  {-0.026828781269464558 }} ,
					{ 1622 ,  {0.06637533580675209 }} ,
					{ 1623 ,  {0.06080508810760982 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 4 ) : ( ( ( scaler_61 <= -1.7425425793169012 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= -0.128195167790152 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( 176 ) : ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( scaler_61 <= -0.13702521679354787 ) ? ( 178 ) : ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_7 <= 0.29603488055242816 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( scaler_28 <= -0.26456859107948544 ) ? ( ( ( scaler_21 <= -0.9606352747886354 ) ? ( 364 ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_63 <= 1.4956394203608072 ) ? ( 184 ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_11 <= 0.16463151437420206 ) ? ( ( ( scaler_30 <= -0.9030675376622654 ) ? ( 24 ) : ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 100 ) : ( ( ( scaler_63 <= 0.6442216621472511 ) ? ( ( ( scaler_22 <= 1.3573748154040264 ) ? ( 404 ) : ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( 810 ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 1622 ) : ( 1623 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= -0.10357555047765579 ) ? ( 406 ) : ( 407 ) ) ) ) ) ) ) : ( 51 ) ) ) ) ) : ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_15 <= 1.0532512804072236 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_22 <= 0.3840071888049898 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 112 ) : ( ( ( scaler_7 <= -0.9398293499837305 ) ? ( 226 ) : ( ( ( scaler_23 <= -0.6916863520307318 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_14
		
	
		namespace LGBM_Tree_2_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.026517753190024713 }} ,
					{ 10 ,  {0.022676758043666402 }} ,
					{ 16 ,  {0.02645109196847381 }} ,
					{ 26 ,  {-0.027917232501360457 }} ,
					{ 27 ,  {0.018156651177022243 }} ,
					{ 35 ,  {-0.029038061467002607 }} ,
					{ 36 ,  {-0.0005928227529089767 }} ,
					{ 37 ,  {-0.026963684848018168 }} ,
					{ 39 ,  {0.0009172118923955699 }} ,
					{ 45 ,  {-0.026950566632983244 }} ,
					{ 46 ,  {-0.026815813326503454 }} ,
					{ 47 ,  {-0.02726145528591177 }} ,
					{ 49 ,  {-0.030638439527256874 }} ,
					{ 68 ,  {-0.02673042793250201 }} ,
					{ 69 ,  {-0.027213763835655793 }} ,
					{ 77 ,  {0.03332915905012065 }} ,
					{ 88 ,  {-0.026711732979406478 }} ,
					{ 89 ,  {-0.026839494643887664 }} ,
					{ 97 ,  {-0.027394157271364118 }} ,
					{ 103 ,  {-0.02699836485167567 }} ,
					{ 152 ,  {0.07899759888673757 }} ,
					{ 192 ,  {-0.026763295532695647 }} ,
					{ 193 ,  {-0.02698965068490063 }} ,
					{ 203 ,  {-0.027526509375584214 }} ,
					{ 205 ,  {-0.026666877087037535 }} ,
					{ 307 ,  {0.07129357781501976 }} ,
					{ 400 ,  {-0.026750720458717476 }} ,
					{ 401 ,  {-0.026978791177240953 }} ,
					{ 404 ,  {-0.027401738830000584 }} ,
					{ 409 ,  {-0.026730766765714276 }} ,
					{ 612 ,  {0.056588018506505994 }} ,
					{ 613 ,  {0.059707997692913795 }} ,
					{ 804 ,  {-0.026988121978747667 }} ,
					{ 805 ,  {-0.027232092226833232 }} ,
					{ 806 ,  {-0.027059904750813758 }} ,
					{ 807 ,  {-0.02675823507620901 }} ,
					{ 810 ,  {-0.027036023391610556 }} ,
					{ 811 ,  {-0.026785118206421012 }} ,
					{ 816 ,  {-0.026773820220704028 }} ,
					{ 817 ,  {-0.026985876317271403 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_46 <= -0.6690914606879405 ) ? ( 16 ) : ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( ( ( scaler_37 <= 0.874679379836743 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 152 ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 612 ) : ( 613 ) ) ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_30 <= -0.7399671729767032 ) ? ( 10 ) : ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( ( ( scaler_37 <= 1.0000000180025095e-35 ) ? ( 88 ) : ( 89 ) ) ) : ( 45 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.12545810464432175 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 804 ) : ( 805 ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 806 ) : ( 807 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 404 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( 816 ) : ( 817 ) ) ) : ( 409 ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_52 <= -0.1749320417453124 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_14
		
	
		namespace LGBM_Tree_3_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.02756859188385842 }} ,
					{ 12 ,  {-0.014919248333567598 }} ,
					{ 15 ,  {0.02279626332219883 }} ,
					{ 17 ,  {0.014632168297110688 }} ,
					{ 20 ,  {0.042422972371847674 }} ,
					{ 21 ,  {-0.02777800772029897 }} ,
					{ 22 ,  {0.014453081079158074 }} ,
					{ 26 ,  {-0.027128097494814124 }} ,
					{ 28 ,  {0.011789514623657292 }} ,
					{ 32 ,  {0.04166783698130812 }} ,
					{ 47 ,  {-0.027339769361661537 }} ,
					{ 59 ,  {-0.02724935800578232 }} ,
					{ 66 ,  {0.06478118594443187 }} ,
					{ 93 ,  {-0.026978775511813203 }} ,
					{ 109 ,  {-0.02662552391614971 }} ,
					{ 117 ,  {-0.026668708979723767 }} ,
					{ 134 ,  {0.06285837098780839 }} ,
					{ 185 ,  {-0.02668674148419528 }} ,
					{ 216 ,  {-0.02666968141443068 }} ,
					{ 217 ,  {-0.02686197995413178 }} ,
					{ 232 ,  {-0.027018727486644196 }} ,
					{ 233 ,  {-0.02674181405398331 }} ,
					{ 270 ,  {0.055681769544803264 }} ,
					{ 271 ,  {0.06071407372151869 }} ,
					{ 440 ,  {-0.02692504677757014 }} ,
					{ 443 ,  {-0.026843834709967287 }} ,
					{ 445 ,  {-0.026639883051395443 }} ,
					{ 446 ,  {-0.026994857080795062 }} ,
					{ 736 ,  {-0.026869453389162207 }} ,
					{ 737 ,  {-0.02704434823944267 }} ,
					{ 738 ,  {-0.02680358978570225 }} ,
					{ 739 ,  {-0.02665618503160624 }} ,
					{ 882 ,  {-0.026676086318630655 }} ,
					{ 883 ,  {-0.026858766022908265 }} ,
					{ 884 ,  {-0.027163969750402334 }} ,
					{ 885 ,  {-0.02694407580611524 }} ,
					{ 888 ,  {-0.026832151786046254 }} ,
					{ 889 ,  {-0.02666489931368006 }} ,
					{ 894 ,  {-0.026684833460867204 }} ,
					{ 895 ,  {-0.026868873080364314 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= 0.30954233844666573 ) ? ( ( ( scaler_21 <= 0.24026328099324298 ) ? ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( scaler_29 <= -0.9298143287852468 ) ? ( 66 ) : ( ( ( scaler_39 <= 0.6300136198718531 ) ? ( 134 ) : ( ( ( scaler_52 <= 1.0000000180025095e-35 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( scaler_13 <= -1.1545908171407728 ) ? ( 22 ) : ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( ( ( scaler_62 <= -0.2777603358328295 ) ? ( 736 ) : ( 737 ) ) ) : ( ( ( scaler_12 <= -0.7116706346068912 ) ? ( 738 ) : ( 739 ) ) ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 440 ) : ( ( ( scaler_12 <= -0.7116706346068912 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( 884 ) : ( 885 ) ) ) : ( 443 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( 888 ) : ( 889 ) ) ) : ( 445 ) ) ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 446 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 894 ) : ( 895 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_55 <= -0.7050202317862585 ) ? ( 28 ) : ( ( ( scaler_22 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 0.5081311054894627 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_14
		
	
		namespace LGBM_Tree_4_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.059107788492689106 }} ,
					{ 12 ,  {0.022750367886408347 }} ,
					{ 14 ,  {-0.008845468070018915 }} ,
					{ 16 ,  {-0.02705947253937381 }} ,
					{ 17 ,  {0.03560297246379107 }} ,
					{ 19 ,  {-0.011934642574233732 }} ,
					{ 22 ,  {0.0276310696225147 }} ,
					{ 27 ,  {-0.013693131792428252 }} ,
					{ 31 ,  {0.029127289683152393 }} ,
					{ 53 ,  {-0.027826337892147526 }} ,
					{ 61 ,  {0.07068285076327933 }} ,
					{ 73 ,  {-0.027577372135755937 }} ,
					{ 75 ,  {-0.0273527797111291 }} ,
					{ 92 ,  {-0.026966427671114047 }} ,
					{ 93 ,  {-0.027456461525898892 }} ,
					{ 94 ,  {-0.026805222274939085 }} ,
					{ 95 ,  {-0.02700093630754757 }} ,
					{ 105 ,  {-0.027361998371369153 }} ,
					{ 121 ,  {0.06337654019881232 }} ,
					{ 145 ,  {-0.027163008416122333 }} ,
					{ 149 ,  {-0.027204828509210268 }} ,
					{ 208 ,  {-0.026946569288396685 }} ,
					{ 209 ,  {-0.026750183650581072 }} ,
					{ 240 ,  {0.05845450459410431 }} ,
					{ 241 ,  {0.05193796668030945 }} ,
					{ 288 ,  {-0.027018413197591292 }} ,
					{ 289 ,  {-0.02682603993402276 }} ,
					{ 593 ,  {-0.026730513548666776 }} ,
					{ 1184 ,  {-0.02677132303686616 }} ,
					{ 1188 ,  {-0.026764835253086462 }} ,
					{ 1190 ,  {-0.02720628256228691 }} ,
					{ 1191 ,  {-0.02697983284072096 }} ,
					{ 2371 ,  {-0.02701145807847217 }} ,
					{ 2379 ,  {-0.02677733613852832 }} ,
					{ 4741 ,  {-0.026795834019196337 }} ,
					{ 4756 ,  {-0.026757127569235168 }} ,
					{ 9480 ,  {-0.026841562282134253 }} ,
					{ 9481 ,  {-0.027044001912017203 }} ,
					{ 9514 ,  {-0.027265620672689717 }} ,
					{ 9515 ,  {-0.026983231812626976 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( ( ( scaler_14 <= -1.4251655508821126 ) ? ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_27 <= 2.222685656707846 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_48 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_56 <= 0.15346989793967802 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 1184 ) : ( ( ( scaler_8 <= -0.2656681353704593 ) ? ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( 9480 ) : ( 9481 ) ) ) : ( 4741 ) ) ) : ( 2371 ) ) ) ) ) : ( 593 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_28 <= -1.0695337940886336 ) ? ( 1188 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 4756 ) : ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( 9514 ) : ( 9515 ) ) ) ) ) : ( 2379 ) ) ) ) ) : ( ( ( scaler_52 <= 0.1775072768498703 ) ? ( 1190 ) : ( 1191 ) ) ) ) ) ) ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 10 ) : ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( 22 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( ( ( scaler_27 <= -0.6272616588329828 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_32 <= 0.5758173102203016 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 12 ) : ( ( ( scaler_51 <= 1.0161665426571045 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( ( ( scaler_51 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_60 <= -0.5871005429041992 ) ? ( 208 ) : ( 209 ) ) ) : ( 105 ) ) ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 14 ) : ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( ( ( scaler_21 <= 1.4411618367751216 ) ? ( ( ( scaler_38 <= 0.8836943190667222 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_14
		
	
		namespace LGBM_Tree_5_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {-0.018329011762285793 }} ,
					{ 15 ,  {0.03192764622916151 }} ,
					{ 16 ,  {0.02802041199929578 }} ,
					{ 17 ,  {-0.027263238184268 }} ,
					{ 19 ,  {-0.02707398252906193 }} ,
					{ 23 ,  {0.04207674167714046 }} ,
					{ 25 ,  {0.00466803199020217 }} ,
					{ 28 ,  {-0.0269974437281037 }} ,
					{ 36 ,  {-0.02685956820519795 }} ,
					{ 37 ,  {-0.02668024243703819 }} ,
					{ 45 ,  {0.05137003253169717 }} ,
					{ 48 ,  {-0.027037553692557927 }} ,
					{ 58 ,  {-0.02668866149388065 }} ,
					{ 89 ,  {0.06925297856408015 }} ,
					{ 98 ,  {-0.026813061095243923 }} ,
					{ 99 ,  {-0.026648128822257096 }} ,
					{ 118 ,  {-0.026737039987766626 }} ,
					{ 119 ,  {-0.026954341247532224 }} ,
					{ 176 ,  {0.062199367328702015 }} ,
					{ 209 ,  {-0.026595967266751896 }} ,
					{ 210 ,  {-0.026667134699049563 }} ,
					{ 211 ,  {-0.026832949472667195 }} ,
					{ 212 ,  {-0.026692356753132807 }} ,
					{ 213 ,  {-0.027048189528154028 }} ,
					{ 214 ,  {-0.02666386708010847 }} ,
					{ 216 ,  {-0.02678660728318324 }} ,
					{ 217 ,  {-0.02696293120844294 }} ,
					{ 218 ,  {-0.026685088610900905 }} ,
					{ 219 ,  {-0.02681849140994308 }} ,
					{ 220 ,  {-0.0272159570198028 }} ,
					{ 221 ,  {-0.026928862656818417 }} ,
					{ 222 ,  {-0.026698429990472422 }} ,
					{ 354 ,  {0.05931615769028692 }} ,
					{ 355 ,  {0.0577431354877308 }} ,
					{ 416 ,  {-0.02678652633653334 }} ,
					{ 417 ,  {-0.026611774520197425 }} ,
					{ 430 ,  {-0.02686296143753758 }} ,
					{ 431 ,  {-0.026679294334138418 }} ,
					{ 446 ,  {-0.027083988017496466 }} ,
					{ 447 ,  {-0.02679683600023057 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.4101732511825196 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_64 <= 2.2801401251657336 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_12 <= 0.7623165044690158 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_4 <= -0.9766301988296382 ) ? ( 10 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( 176 ) : ( ( ( scaler_60 <= 1.3866121256028412 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_15 <= -0.10267634270294615 ) ? ( 48 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( 214 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.14060793695184343 ) ? ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( 216 ) : ( 217 ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_37 <= 0.2352317390988609 ) ? ( 220 ) : ( 221 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 222 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_60 <= 0.3997557913493209 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( scaler_23 <= 1.07192138513352 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_14
		
	
		namespace LGBM_Tree_6_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.007529874079592891 }} ,
					{ 9 ,  {-0.008434145567331602 }} ,
					{ 11 ,  {-0.028908624115915528 }} ,
					{ 15 ,  {-0.009434575168640928 }} ,
					{ 20 ,  {-0.001119037845816151 }} ,
					{ 32 ,  {-0.02707822466248603 }} ,
					{ 34 ,  {-0.026790861190322257 }} ,
					{ 35 ,  {-0.026582381312657256 }} ,
					{ 43 ,  {0.06463089678896825 }} ,
					{ 57 ,  {-0.008741060077340842 }} ,
					{ 66 ,  {-0.02680569522083146 }} ,
					{ 67 ,  {-0.026599185227934627 }} ,
					{ 84 ,  {0.06069355114093289 }} ,
					{ 112 ,  {-0.026836193754026235 }} ,
					{ 113 ,  {-0.027006620526422023 }} ,
					{ 170 ,  {0.05603049682182024 }} ,
					{ 237 ,  {-0.02660317753031919 }} ,
					{ 238 ,  {-0.026846799037198107 }} ,
					{ 239 ,  {-0.026686457204462773 }} ,
					{ 342 ,  {0.059604176078254904 }} ,
					{ 343 ,  {0.0582437938558768 }} ,
					{ 464 ,  {-0.026660601975448058 }} ,
					{ 465 ,  {-0.026573610000795996 }} ,
					{ 466 ,  {-0.026661965129063214 }} ,
					{ 470 ,  {-0.02683340777048226 }} ,
					{ 471 ,  {-0.02667046064710081 }} ,
					{ 473 ,  {-0.026842651940629278 }} ,
					{ 934 ,  {-0.02664355685813798 }} ,
					{ 935 ,  {-0.026975542633025776 }} ,
					{ 937 ,  {-0.026646687230020585 }} ,
					{ 938 ,  {-0.027082256369205027 }} ,
					{ 944 ,  {-0.026688797908108935 }} ,
					{ 945 ,  {-0.026590011286207273 }} ,
					{ 1879 ,  {-0.02667958460929365 }} ,
					{ 3744 ,  {-0.02681285535459928 }} ,
					{ 3745 ,  {-0.02666653934376847 }} ,
					{ 3746 ,  {-0.02681639745870733 }} ,
					{ 3747 ,  {-0.027009911488148592 }} ,
					{ 3756 ,  {-0.02699290341902146 }} ,
					{ 3757 ,  {-0.026807008827459816 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( 32 ) : ( ( ( scaler_64 <= 3.0068383900228266 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 20 ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_6 <= -1.2441923630104108 ) ? ( 84 ) : ( ( ( scaler_14 <= -1.0042287240761734 ) ? ( 170 ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_13 <= -0.3900656635129606 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 466 ) : ( ( ( scaler_12 <= -1.8171609889138216 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.6382890772899419 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_21 <= 1.098047963694585 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 3744 ) : ( 3745 ) ) ) : ( ( ( scaler_30 <= 1.0000000180025095e-35 ) ? ( 3746 ) : ( 3747 ) ) ) ) ) : ( 937 ) ) ) : ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 938 ) : ( ( ( scaler_12 <= 0.9465648968535042 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 3756 ) : ( 3757 ) ) ) : ( 1879 ) ) ) ) ) ) ) : ( ( ( scaler_63 <= -1.058613854279861 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( 944 ) : ( 945 ) ) ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_14
		
	
		namespace LGBM_Tree_7_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.036313043443827756 }} ,
					{ 8 ,  {0.016661285102891794 }} ,
					{ 12 ,  {0.001760944411517623 }} ,
					{ 18 ,  {-0.028184964943542612 }} ,
					{ 19 ,  {-0.027035643521660303 }} ,
					{ 21 ,  {0.02929457675353993 }} ,
					{ 22 ,  {0.04509152900559302 }} ,
					{ 40 ,  {0.0682576430090595 }} ,
					{ 46 ,  {-0.027848752426879793 }} ,
					{ 47 ,  {-0.026766479063788314 }} ,
					{ 52 ,  {-0.012833103312310554 }} ,
					{ 55 ,  {0.018297134126122393 }} ,
					{ 107 ,  {-0.0281923253055842 }} ,
					{ 108 ,  {-0.026721554204203912 }} ,
					{ 109 ,  {-0.0275815595237237 }} ,
					{ 164 ,  {0.06507149308298087 }} ,
					{ 165 ,  {0.0606016478902564 }} ,
					{ 166 ,  {0.05646357654115122 }} ,
					{ 167 ,  {0.05975916367280446 }} ,
					{ 212 ,  {-0.027815836943135604 }} ,
					{ 854 ,  {-0.026570882705043736 }} ,
					{ 1704 ,  {-0.027105327446588796 }} ,
					{ 1705 ,  {-0.02688051260258007 }} ,
					{ 1711 ,  {-0.026588724627983142 }} ,
					{ 3415 ,  {-0.026796833529703967 }} ,
					{ 3420 ,  {-0.026657948235981017 }} ,
					{ 3421 ,  {-0.026950410948816336 }} ,
					{ 6824 ,  {-0.026931941754596962 }} ,
					{ 6828 ,  {-0.02678120477966563 }} ,
					{ 13650 ,  {-0.02661183000627068 }} ,
					{ 13652 ,  {-0.026845400741016812 }} ,
					{ 13653 ,  {-0.027092276265979126 }} ,
					{ 13654 ,  {-0.026622662927579133 }} ,
					{ 13655 ,  {-0.026815822814150837 }} ,
					{ 13658 ,  {-0.026601512928127735 }} ,
					{ 13659 ,  {-0.026707300335893164 }} ,
					{ 27303 ,  {-0.02664105689896895 }} ,
					{ 54604 ,  {-0.026637007372561403 }} ,
					{ 109210 ,  {-0.026799249403531303 }} ,
					{ 109211 ,  {-0.026966024945731554 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 8 ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_61 <= -1.0544637096640355 ) ? ( 40 ) : ( ( ( scaler_60 <= -0.1923580092027912 ) ? ( ( ( scaler_8 <= 0.9222435271028199 ) ? ( 164 ) : ( 165 ) ) ) : ( ( ( scaler_16 <= -0.38289163409575516 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 22 ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 2.706017084409388 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 12 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 52 ) : ( ( ( scaler_8 <= 2.4071331051944194 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 212 ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 1704 ) : ( 1705 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 6824 ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 13650 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 54604 ) : ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( 109210 ) : ( 109211 ) ) ) ) ) : ( 27303 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 13652 ) : ( 13653 ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 13654 ) : ( 13655 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 6828 ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( 13658 ) : ( 13659 ) ) ) ) ) : ( 3415 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 854 ) : ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 3420 ) : ( 3421 ) ) ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_14
		
	
		namespace LGBM_Tree_8_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.04139641164000329 }} ,
					{ 19 ,  {-0.012082265099632557 }} ,
					{ 26 ,  {-0.02654676907748198 }} ,
					{ 27 ,  {-0.026703418195343432 }} ,
					{ 29 ,  {0.032647823788751286 }} ,
					{ 31 ,  {-0.027244814782851946 }} ,
					{ 32 ,  {-0.02669440137802803 }} ,
					{ 33 ,  {-0.027402583831936868 }} ,
					{ 41 ,  {0.037956024428196886 }} ,
					{ 42 ,  {0.034121121342827986 }} ,
					{ 44 ,  {0.033771500756493655 }} ,
					{ 46 ,  {-0.026729362267780346 }} ,
					{ 49 ,  {-0.02671989273835564 }} ,
					{ 50 ,  {-0.02687078927401448 }} ,
					{ 56 ,  {-0.02672598309445239 }} ,
					{ 57 ,  {-0.027175782754615897 }} ,
					{ 60 ,  {-0.02660715103600489 }} ,
					{ 61 ,  {-0.02677579538474552 }} ,
					{ 72 ,  {-0.026970806615182693 }} ,
					{ 75 ,  {-0.028327685935710858 }} ,
					{ 80 ,  {-0.02791860230972459 }} ,
					{ 81 ,  {-0.011947509886064737 }} ,
					{ 86 ,  {0.0524147106598289 }} ,
					{ 90 ,  {-0.027250675458188857 }} ,
					{ 91 ,  {-0.026525513024113934 }} ,
					{ 94 ,  {-0.026873938703321533 }} ,
					{ 95 ,  {-0.027402529702798373 }} ,
					{ 96 ,  {-0.026631951642395204 }} ,
					{ 97 ,  {-0.02650123038409354 }} ,
					{ 102 ,  {-0.026608293353048974 }} ,
					{ 146 ,  {-0.026544006279823108 }} ,
					{ 147 ,  {-0.02669683030422545 }} ,
					{ 148 ,  {-0.026883045945691728 }} ,
					{ 149 ,  {-0.02656667007643054 }} ,
					{ 174 ,  {0.07031727856202163 }} ,
					{ 207 ,  {-0.026642916185877982 }} ,
					{ 350 ,  {0.05439004185170219 }} ,
					{ 351 ,  {0.061512765327346876 }} ,
					{ 412 ,  {-0.02688742155684348 }} ,
					{ 413 ,  {-0.026711433986539298 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_44 <= -0.5133943745247307 ) ? ( ( ( scaler_60 <= -0.7844718097549032 ) ? ( ( ( scaler_47 <= 0.5633965227653072 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_45 <= 0.9615169652523486 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( ( ( scaler_54 <= -0.19830423641502326 ) ? ( 72 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( 146 ) : ( 147 ) ) ) ) ) : ( ( ( scaler_37 <= -0.7239397220079622 ) ? ( ( ( scaler_15 <= 1.2183837979943908 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( ( ( scaler_29 <= 0.2621824001067177 ) ? ( ( ( scaler_23 <= 0.27028150460431466 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 80 ) : ( 81 ) ) ) : ( 41 ) ) ) : ( ( ( scaler_20 <= -0.9578883044862343 ) ? ( 42 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 86 ) : ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( 174 ) : ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 350 ) : ( 351 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( 44 ) : ( ( ( scaler_28 <= -0.42556163168131506 ) ? ( 90 ) : ( 91 ) ) ) ) ) : ( ( ( scaler_52 <= 0.3537269361474617 ) ? ( 46 ) : ( ( ( scaler_20 <= -0.25294726688468827 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 50 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( 102 ) : ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( ( ( scaler_20 <= 0.09952325191608474 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_53 <= 0.3766973032747564 ) ? ( ( ( scaler_53 <= -0.5791812501524467 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_14
		
	
		namespace LGBM_Tree_9_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 12 ,  {0.029931178081395532 }} ,
					{ 18 ,  {0.040568714753089964 }} ,
					{ 19 ,  {-0.02724720084399154 }} ,
					{ 20 ,  {-0.013859400167596646 }} ,
					{ 22 ,  {-0.012834645185414299 }} ,
					{ 23 ,  {-0.02751885179682098 }} ,
					{ 26 ,  {-0.027497700327920777 }} ,
					{ 28 ,  {0.004068059401407024 }} ,
					{ 33 ,  {-0.026745779277012435 }} ,
					{ 35 ,  {0.02276605914329101 }} ,
					{ 42 ,  {-0.016393357885654096 }} ,
					{ 54 ,  {-0.026995568363932868 }} ,
					{ 55 ,  {-0.02674069215101718 }} ,
					{ 58 ,  {-0.02710415840866295 }} ,
					{ 59 ,  {-0.026817727416477685 }} ,
					{ 62 ,  {-0.02761062615229358 }} ,
					{ 63 ,  {-0.026895122654793303 }} ,
					{ 64 ,  {-0.027523116785817744 }} ,
					{ 68 ,  {-0.008306974380516361 }} ,
					{ 86 ,  {0.026023497846763638 }} ,
					{ 123 ,  {-0.026692942686931856 }} ,
					{ 130 ,  {-0.026761483680020366 }} ,
					{ 131 ,  {-0.02693394182488239 }} ,
					{ 138 ,  {-0.0275209209224639 }} ,
					{ 139 ,  {-0.026928350686779692 }} ,
					{ 175 ,  {0.04843967309415841 }} ,
					{ 241 ,  {-0.026724923426766474 }} ,
					{ 242 ,  {-0.02728187905136402 }} ,
					{ 243 ,  {-0.02696578560388086 }} ,
					{ 245 ,  {-0.02703715101964115 }} ,
					{ 348 ,  {0.07817386512213956 }} ,
					{ 481 ,  {-0.027082409053086925 }} ,
					{ 489 ,  {-0.02665088121425929 }} ,
					{ 698 ,  {0.06631461111604668 }} ,
					{ 699 ,  {0.056193801548425515 }} ,
					{ 960 ,  {-0.027033898886397574 }} ,
					{ 976 ,  {-0.026708095125667852 }} ,
					{ 977 ,  {-0.026902150775449742 }} ,
					{ 1922 ,  {-0.026837981731348565 }} ,
					{ 1923 ,  {-0.026665904522787127 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_23 <= 1.07192138513352 ) ? ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( ( ( scaler_38 <= 1.0000000180025095e-35 ) ? ( 64 ) : ( ( ( scaler_22 <= -1.0760442510935648 ) ? ( 130 ) : ( 131 ) ) ) ) ) : ( 33 ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 68 ) : ( ( ( scaler_61 <= 0.551053652859318 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_44 <= -0.6662479363587799 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_20 <= -1.1341235638866207 ) ? ( 20 ) : ( ( ( scaler_23 <= -0.37103039981904967 ) ? ( 42 ) : ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( 86 ) : ( ( ( scaler_55 <= 1.1178725144058392 ) ? ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( 348 ) : ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 698 ) : ( 699 ) ) ) ) ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_53 <= -0.7703569608378873 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_37 <= 0.554955559467802 ) ? ( 12 ) : ( ( ( scaler_31 <= -0.35610847767665704 ) ? ( 26 ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_54 <= -1.0000000180025095e-35 ) ? ( 28 ) : ( ( ( scaler_46 <= 0.9200076699765841 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 960 ) : ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( 1922 ) : ( 1923 ) ) ) ) ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( scaler_62 <= 0.3358316743005698 ) ? ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_55 <= -1.0364552765484578 ) ? ( 976 ) : ( 977 ) ) ) : ( 489 ) ) ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_14
		
	
		namespace LGBM_Tree_0_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.009235505720166114 }} ,
					{ 10 ,  {0.02242627233461462 }} ,
					{ 13 ,  {0.0217600421832503 }} ,
					{ 16 ,  {-0.029626149035225875 }} ,
					{ 17 ,  {-0.02667097613747479 }} ,
					{ 22 ,  {0.04830852283343193 }} ,
					{ 24 ,  {-0.02665900542175359 }} ,
					{ 25 ,  {-0.027088237642376747 }} ,
					{ 47 ,  {0.06375634899234982 }} ,
					{ 58 ,  {-0.026515477794175714 }} ,
					{ 61 ,  {-0.026486551830150935 }} ,
					{ 63 ,  {-0.026727936374607505 }} ,
					{ 92 ,  {0.054566738339949586 }} ,
					{ 121 ,  {-0.02647668081383552 }} ,
					{ 124 ,  {-0.026497732743230397 }} ,
					{ 186 ,  {0.05981572943288347 }} ,
					{ 187 ,  {0.05659042244409871 }} ,
					{ 224 ,  {-0.026600347645269452 }} ,
					{ 225 ,  {-0.026467821778543496 }} ,
					{ 226 ,  {-0.026879045779443618 }} ,
					{ 228 ,  {-0.02679699566177553 }} ,
					{ 229 ,  {-0.02659856453519765 }} ,
					{ 230 ,  {-0.027083976323123562 }} ,
					{ 231 ,  {-0.02678422466803007 }} ,
					{ 236 ,  {-0.02650041888071325 }} ,
					{ 237 ,  {-0.026682947068199892 }} ,
					{ 239 ,  {-0.02684783410501747 }} ,
					{ 240 ,  {-0.026523313664813076 }} ,
					{ 250 ,  {-0.02653440325807512 }} ,
					{ 251 ,  {-0.02669844698111365 }} ,
					{ 476 ,  {-0.02674514844065362 }} ,
					{ 477 ,  {-0.026559119863615328 }} ,
					{ 482 ,  {-0.026739038344052352 }} ,
					{ 483 ,  {-0.026590934036133104 }} ,
					{ 910 ,  {-0.026455288095453867 }} ,
					{ 911 ,  {-0.026589704136418348 }} ,
					{ 1816 ,  {-0.026490091615277364 }} ,
					{ 1817 ,  {-0.02673147047431176 }} ,
					{ 1818 ,  {-0.02665105405267229 }} ,
					{ 1819 ,  {-0.026888140346974482 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_31 <= 1.343701794442115 ) ? ( ( ( scaler_30 <= -0.08756571423445449 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 10 ) : ( ( ( scaler_24 <= -0.40038895508523226 ) ? ( 22 ) : ( ( ( scaler_24 <= 1.3878283827779498 ) ? ( ( ( scaler_39 <= -0.3934394993999539 ) ? ( 92 ) : ( ( ( scaler_63 <= -0.5477631993517276 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 226 ) : ( ( ( scaler_29 <= 0.9433233880449833 ) ? ( ( ( scaler_62 <= -1.095883016010695 ) ? ( ( ( scaler_21 <= -0.7890783382483672 ) ? ( 1816 ) : ( 1817 ) ) ) : ( ( ( scaler_15 <= 1.0000000180025095e-35 ) ? ( 1818 ) : ( 1819 ) ) ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 910 ) : ( 911 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_15 <= 0.39272121005855515 ) ? ( ( ( scaler_13 <= 0.37445949011485163 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( 58 ) : ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( ( ( scaler_7 <= -0.7632773170499935 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_61 <= 0.32169402964169597 ) ? ( ( ( scaler_64 <= -0.38442017931027633 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_7 <= -0.2336212182487827 ) ? ( 240 ) : ( ( ( scaler_30 <= 0.7279361091933567 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( ( ( scaler_39 <= 0.45943809999321855 ) ? ( ( ( scaler_45 <= 0.653394117715386 ) ? ( 124 ) : ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_0_15
		
	
		namespace LGBM_Tree_1_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.034164280762293865 }} ,
					{ 10 ,  {-0.004824255634848751 }} ,
					{ 13 ,  {0.06000030657804478 }} ,
					{ 15 ,  {-0.012874211309465334 }} ,
					{ 25 ,  {0.002024244334143098 }} ,
					{ 48 ,  {-0.01252458147998436 }} ,
					{ 56 ,  {-0.004428389512415803 }} ,
					{ 59 ,  {0.07888052605182123 }} ,
					{ 88 ,  {-0.027194285012897824 }} ,
					{ 89 ,  {-0.026871787782635655 }} ,
					{ 92 ,  {-0.026661385295782478 }} ,
					{ 94 ,  {-0.026721145866816776 }} ,
					{ 95 ,  {-0.026616076344300934 }} ,
					{ 114 ,  {0.04813275503459177 }} ,
					{ 115 ,  {0.06053512266238507 }} ,
					{ 116 ,  {0.05150214700898127 }} ,
					{ 117 ,  {0.06395384389438137 }} ,
					{ 186 ,  {-0.026703066495419522 }} ,
					{ 187 ,  {-0.026932432634278265 }} ,
					{ 196 ,  {-0.027219642878697627 }} ,
					{ 197 ,  {-0.028435045431578283 }} ,
					{ 198 ,  {-0.027090453182543307 }} ,
					{ 360 ,  {-0.026621963980344995 }} ,
					{ 363 ,  {-0.027070005972423247 }} ,
					{ 366 ,  {-0.026504243928296495 }} ,
					{ 367 ,  {-0.02665497441147931 }} ,
					{ 398 ,  {-0.026775195081473385 }} ,
					{ 399 ,  {-0.026614023319973645 }} ,
					{ 723 ,  {-0.026957713635959932 }} ,
					{ 724 ,  {-0.02667001574064772 }} ,
					{ 725 ,  {-0.026918198988319725 }} ,
					{ 728 ,  {-0.026578964539285124 }} ,
					{ 729 ,  {-0.026696985765841227 }} ,
					{ 731 ,  {-0.026909344262064677 }} ,
					{ 1444 ,  {-0.026642766679909564 }} ,
					{ 1445 ,  {-0.026801830390697667 }} ,
					{ 1461 ,  {-0.02665608771634191 }} ,
					{ 2920 ,  {-0.026727850110834006 }} ,
					{ 5842 ,  {-0.0267202777690426 }} ,
					{ 5843 ,  {-0.02696340550443495 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_21 <= 0.7549340906140481 ) ? ( ( ( scaler_5 <= -2.1900950544812914 ) ? ( 4 ) : ( ( ( scaler_12 <= -1.4486642041448448 ) ? ( 10 ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_36 <= -0.49056302876404567 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 360 ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_28 <= -0.908540753486804 ) ? ( 1444 ) : ( 1445 ) ) ) : ( 723 ) ) ) ) ) : ( ( ( scaler_38 <= 0.5457610514201572 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( 724 ) : ( 725 ) ) ) : ( 363 ) ) ) ) ) : ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( ( ( scaler_21 <= -1.1321922113289038 ) ? ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( scaler_3 <= 1.3594628760613219 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( 2920 ) : ( ( ( scaler_40 <= -0.674542175187462 ) ? ( 5842 ) : ( 5843 ) ) ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_19 <= -0.5777241658033564 ) ? ( 92 ) : ( ( ( scaler_22 <= -0.2649045622610345 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_65 <= 0.5815610630112473 ) ? ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_14 <= -1.214697137479143 ) ? ( 48 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 198 ) : ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( scaler_40 <= 0.745286601353307 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 56 ) : ( ( ( scaler_38 <= 0.7147276852434398 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_1_15
		
	
		namespace LGBM_Tree_2_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.025411388413015185 }} ,
					{ 10 ,  {0.021821747637308146 }} ,
					{ 16 ,  {0.026279014427530292 }} ,
					{ 26 ,  {0.017857644902824456 }} ,
					{ 27 ,  {-0.027884790726566196 }} ,
					{ 35 ,  {-0.0289586755861389 }} ,
					{ 36 ,  {-0.026965657662868653 }} ,
					{ 37 ,  {-0.0002924422675983037 }} ,
					{ 39 ,  {0.0009672927921355001 }} ,
					{ 44 ,  {-0.02670955123736293 }} ,
					{ 45 ,  {-0.026893785546976492 }} ,
					{ 46 ,  {-0.02675517507957916 }} ,
					{ 47 ,  {-0.02722179203171303 }} ,
					{ 49 ,  {-0.030475407590455573 }} ,
					{ 68 ,  {-0.027129800081239143 }} ,
					{ 69 ,  {-0.026638416501181674 }} ,
					{ 77 ,  {0.03174217863848917 }} ,
					{ 96 ,  {-0.02731878285678074 }} ,
					{ 103 ,  {-0.026935212878869092 }} ,
					{ 152 ,  {0.07415558884502746 }} ,
					{ 195 ,  {-0.02701421700697141 }} ,
					{ 203 ,  {-0.027417314109271302 }} ,
					{ 205 ,  {-0.026601380157126243 }} ,
					{ 307 ,  {0.06742529461539926 }} ,
					{ 388 ,  {-0.026842067909885043 }} ,
					{ 389 ,  {-0.026641356098588004 }} ,
					{ 400 ,  {-0.026684732185577154 }} ,
					{ 401 ,  {-0.026919353528758985 }} ,
					{ 404 ,  {-0.027338919379476058 }} ,
					{ 409 ,  {-0.026665107078812235 }} ,
					{ 612 ,  {0.054116306570685814 }} ,
					{ 613 ,  {0.05699352835814772 }} ,
					{ 804 ,  {-0.026935450755306192 }} ,
					{ 805 ,  {-0.027189858341951145 }} ,
					{ 806 ,  {-0.026991611695881487 }} ,
					{ 807 ,  {-0.026687092602972626 }} ,
					{ 810 ,  {-0.02698038605225266 }} ,
					{ 811 ,  {-0.02672112547216718 }} ,
					{ 816 ,  {-0.02671172229647419 }} ,
					{ 817 ,  {-0.026925659405050886 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.42556163168131506 ) ? ( ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_53 <= -0.1968298287815655 ) ? ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 16 ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( scaler_55 <= -0.8707377541673581 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( scaler_47 <= 0.3883666226001906 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( ( ( scaler_64 <= -1.0000000180025095e-35 ) ? ( 152 ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( 612 ) : ( 613 ) ) ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_30 <= -0.7399671729767032 ) ? ( 10 ) : ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 44 ) : ( 45 ) ) ) : ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_65 <= 1.1037124204290307 ) ? ( ( ( scaler_11 <= 1.7386533783511038 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( ( ( scaler_55 <= 0.12356738011924029 ) ? ( ( ( scaler_29 <= 0.4324676470912841 ) ? ( 96 ) : ( ( ( scaler_52 <= 0.8823859140402358 ) ? ( ( ( scaler_37 <= 1.0345412900212136 ) ? ( 388 ) : ( 389 ) ) ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( ( ( scaler_35 <= 0.3318006961742956 ) ? ( ( ( scaler_46 <= 0.12545810464432175 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_15 <= 0.7229862452328893 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 804 ) : ( 805 ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 806 ) : ( 807 ) ) ) ) ) ) ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 404 ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( scaler_53 <= 1.141400146016519 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( 816 ) : ( 817 ) ) ) : ( 409 ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( scaler_47 <= -0.8368426785556246 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_2_15
		
	
		namespace LGBM_Tree_3_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {-0.01883869437779971 }} ,
					{ 12 ,  {-0.01461078774916694 }} ,
					{ 16 ,  {0.008990981604110467 }} ,
					{ 22 ,  {0.07628584143748007 }} ,
					{ 26 ,  {-0.027057493507366245 }} ,
					{ 28 ,  {-0.010120105556848169 }} ,
					{ 30 ,  {0.051340741911557165 }} ,
					{ 31 ,  {-0.02759093119885448 }} ,
					{ 34 ,  {0.04059675756626607 }} ,
					{ 40 ,  {0.004899111133541625 }} ,
					{ 41 ,  {-0.027332156882700822 }} ,
					{ 42 ,  {-0.027806954261106222 }} ,
					{ 47 ,  {-0.026786681576075 }} ,
					{ 59 ,  {-0.027022244972288313 }} ,
					{ 71 ,  {0.06303277075029166 }} ,
					{ 87 ,  {-0.027060718204782532 }} ,
					{ 92 ,  {-0.02703141594468086 }} ,
					{ 93 ,  {-0.02743087006862562 }} ,
					{ 109 ,  {-0.02656150378835865 }} ,
					{ 116 ,  {-0.026925937173865405 }} ,
					{ 140 ,  {0.05968891635446007 }} ,
					{ 173 ,  {-0.026646794169892546 }} ,
					{ 216 ,  {-0.026607350948189157 }} ,
					{ 217 ,  {-0.02680811379367677 }} ,
					{ 222 ,  {-0.026612490075044928 }} ,
					{ 234 ,  {-0.026808064861634152 }} ,
					{ 235 ,  {-0.026584312809448424 }} ,
					{ 282 ,  {0.05336755774603963 }} ,
					{ 283 ,  {0.057081476092260434 }} ,
					{ 344 ,  {-0.026925806414634153 }} ,
					{ 345 ,  {-0.026728891777714647 }} ,
					{ 440 ,  {-0.026871725293838036 }} ,
					{ 443 ,  {-0.026786264385693256 }} ,
					{ 446 ,  {-0.026944335888969037 }} ,
					{ 882 ,  {-0.026607848627044673 }} ,
					{ 883 ,  {-0.026807291243905552 }} ,
					{ 884 ,  {-0.02711482608754991 }} ,
					{ 885 ,  {-0.026892930944192435 }} ,
					{ 894 ,  {-0.026626661508059854 }} ,
					{ 895 ,  {-0.02681626939667007 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( ( ( scaler_6 <= -0.5462919951829591 ) ? ( 16 ) : ( ( ( scaler_48 <= -0.6777187420608045 ) ? ( 34 ) : ( ( ( scaler_31 <= 0.15383460395897453 ) ? ( ( ( scaler_30 <= 0.8910364738789189 ) ? ( 140 ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_6 <= 0.8495087404719447 ) ? ( ( ( scaler_38 <= -0.13010548387297308 ) ? ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 42 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 344 ) : ( 345 ) ) ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( scaler_28 <= -1.2305268346904632 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( 92 ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_56 <= 0.355333736236536 ) ? ( ( ( scaler_20 <= -1.6628293420877804 ) ? ( 12 ) : ( ( ( scaler_20 <= -1.3103588232870071 ) ? ( 26 ) : ( ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= 0.11948284761869118 ) ? ( ( ( scaler_12 <= -0.3431738498379145 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 440 ) : ( ( ( scaler_12 <= -0.7116706346068912 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( scaler_55 <= 0.6207199472625397 ) ? ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( 884 ) : ( 885 ) ) ) : ( 443 ) ) ) ) ) : ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( 222 ) : ( ( ( scaler_14 <= 0.25858175634164454 ) ? ( 446 ) : ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 894 ) : ( 895 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_37 <= -1.2035254525613734 ) ? ( 28 ) : ( ( ( scaler_22 <= -0.7515883755605527 ) ? ( ( ( scaler_55 <= -0.3735851870240589 ) ? ( 116 ) : ( ( ( scaler_36 <= 0.7717789026677327 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_3_15
		
	
		namespace LGBM_Tree_4_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {0.05574786214671737 }} ,
					{ 12 ,  {0.02249870855811558 }} ,
					{ 15 ,  {-0.009515595446406885 }} ,
					{ 16 ,  {-0.026991868783634566 }} ,
					{ 17 ,  {0.034177448548540754 }} ,
					{ 19 ,  {-0.011699522136148248 }} ,
					{ 22 ,  {0.026256141052062296 }} ,
					{ 27 ,  {-0.012626939231798884 }} ,
					{ 28 ,  {0.02249141641901875 }} ,
					{ 59 ,  {0.048786362465341994 }} ,
					{ 73 ,  {-0.02748077620874714 }} ,
					{ 75 ,  {-0.02727096729757943 }} ,
					{ 92 ,  {-0.026891853475185745 }} ,
					{ 93 ,  {-0.02738017837264828 }} ,
					{ 94 ,  {-0.026737489377406144 }} ,
					{ 95 ,  {-0.026928992820768785 }} ,
					{ 104 ,  {-0.02674706137917971 }} ,
					{ 105 ,  {-0.026952013893163318 }} ,
					{ 106 ,  {-0.027060985723079946 }} ,
					{ 107 ,  {-0.028232898594864365 }} ,
					{ 117 ,  {0.07310474513082708 }} ,
					{ 145 ,  {-0.027105729868945883 }} ,
					{ 149 ,  {-0.02713292523533827 }} ,
					{ 232 ,  {0.06156899044342096 }} ,
					{ 288 ,  {-0.02695824696192733 }} ,
					{ 289 ,  {-0.0267604652553355 }} ,
					{ 466 ,  {0.05523142610692066 }} ,
					{ 467 ,  {0.05161865402594578 }} ,
					{ 1184 ,  {-0.02677915489629735 }} ,
					{ 1185 ,  {-0.026955926456813318 }} ,
					{ 1186 ,  {-0.02668617967471211 }} ,
					{ 1187 ,  {-0.026823241525022606 }} ,
					{ 1189 ,  {-0.026675179303907337 }} ,
					{ 1191 ,  {-0.026758332303997663 }} ,
					{ 2376 ,  {-0.027077478718062827 }} ,
					{ 2377 ,  {-0.026687003286408474 }} ,
					{ 2381 ,  {-0.027168133592544316 }} ,
					{ 4761 ,  {-0.026719730184963833 }} ,
					{ 9520 ,  {-0.027069460622537702 }} ,
					{ 9521 ,  {-0.026799728750430137 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( ( ( scaler_14 <= -1.4251655508821126 ) ? ( ( ( scaler_20 <= 0.6282290301172444 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( scaler_27 <= 2.222685656707846 ) ? ( ( ( scaler_60 <= -0.9818430766056072 ) ? ( ( ( scaler_35 <= -0.520384469871214 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( ( ( scaler_32 <= 1.6409171973148446 ) ? ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( 1184 ) : ( 1185 ) ) ) : ( ( ( scaler_13 <= 0.8841429258667266 ) ? ( 1186 ) : ( 1187 ) ) ) ) ) : ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( ( ( scaler_7 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 2376 ) : ( 2377 ) ) ) : ( 1189 ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_48 <= 0.24681604596945647 ) ? ( ( ( scaler_13 <= 0.8841429258667266 ) ? ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 9520 ) : ( 9521 ) ) ) : ( 4761 ) ) ) : ( 2381 ) ) ) : ( 1191 ) ) ) ) ) ) ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 10 ) : ( ( ( scaler_52 <= -1.2322499975308603 ) ? ( 22 ) : ( ( ( scaler_5 <= -0.3045056333004695 ) ? ( ( ( scaler_27 <= -0.6272616588329828 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_32 <= 0.5758173102203016 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_46 <= 0.4432779307772267 ) ? ( ( ( scaler_5 <= -0.5402043109480722 ) ? ( 12 ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_35 <= 1.4680475842349756 ) ? ( ( ( scaler_54 <= 0.5633748487260083 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( scaler_6 <= 0.15160837264449273 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( ( ( scaler_39 <= -0.2228639795213194 ) ? ( 28 ) : ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( ( ( scaler_35 <= 1.7521093062501454 ) ? ( 232 ) : ( ( ( scaler_53 <= -1.0000000180025095e-35 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_4_15
		
	
		namespace LGBM_Tree_5_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {0.004720702703033653 }} ,
					{ 10 ,  {-0.01992048090304238 }} ,
					{ 15 ,  {0.030230086241490945 }} ,
					{ 18 ,  {-0.0271730435721052 }} ,
					{ 23 ,  {0.03793281693769952 }} ,
					{ 24 ,  {0.005398646073989955 }} ,
					{ 28 ,  {-0.027110088461376705 }} ,
					{ 39 ,  {-0.026604058686773013 }} ,
					{ 45 ,  {0.04898877105456911 }} ,
					{ 51 ,  {-0.02694102069187156 }} ,
					{ 58 ,  {-0.0266234914100284 }} ,
					{ 59 ,  {-0.026764777288286593 }} ,
					{ 76 ,  {-0.02668443329905032 }} ,
					{ 77 ,  {-0.027006442662962583 }} ,
					{ 89 ,  {0.06589644503865504 }} ,
					{ 100 ,  {-0.026746290241044864 }} ,
					{ 101 ,  {-0.02657841291752775 }} ,
					{ 176 ,  {0.0609025879575594 }} ,
					{ 209 ,  {-0.02653125630119396 }} ,
					{ 210 ,  {-0.02660463437971223 }} ,
					{ 211 ,  {-0.026772191099753897 }} ,
					{ 212 ,  {-0.026634308404150344 }} ,
					{ 213 ,  {-0.027000239974561815 }} ,
					{ 214 ,  {-0.026598512355691696 }} ,
					{ 217 ,  {-0.02692138644256179 }} ,
					{ 218 ,  {-0.026616248088491667 }} ,
					{ 219 ,  {-0.02677440882241717 }} ,
					{ 220 ,  {-0.02717134047517894 }} ,
					{ 221 ,  {-0.026874605630366075 }} ,
					{ 222 ,  {-0.02663445230415691 }} ,
					{ 354 ,  {0.05739456214889586 }} ,
					{ 355 ,  {0.05558409409179186 }} ,
					{ 416 ,  {-0.026722764809325308 }} ,
					{ 417 ,  {-0.026550367862448018 }} ,
					{ 430 ,  {-0.026804903994945974 }} ,
					{ 431 ,  {-0.026616750277266822 }} ,
					{ 432 ,  {-0.02683815654999504 }} ,
					{ 433 ,  {-0.026649657493699203 }} ,
					{ 446 ,  {-0.027038192906585386 }} ,
					{ 447 ,  {-0.026731304931570957 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.0123423042424138 ) ? ( ( ( scaler_7 <= -0.5867252841162566 ) ? ( ( ( scaler_45 <= -1.0412815437379086 ) ? ( 8 ) : ( ( ( scaler_44 <= -0.9719550600268783 ) ? ( 18 ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_47 <= -0.6618127783905082 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_4 <= -0.9766301988296382 ) ? ( 10 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_35 <= 0.6158624181894655 ) ? ( ( ( scaler_7 <= 1.0022430122873762 ) ? ( 176 ) : ( ( ( scaler_3 <= 1.0000000180025095e-35 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_28 <= 1.0233757337351521 ) ? ( ( ( scaler_38 <= -1.6508051882825157 ) ? ( ( ( scaler_15 <= -0.2678088602901132 ) ? ( 24 ) : ( ( ( scaler_7 <= 0.47258691348616516 ) ? ( ( ( scaler_36 <= -0.33277028733507336 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( scaler_28 <= -0.5865546722831446 ) ? ( ( ( scaler_54 <= 0.1825353061554924 ) ? ( ( ( scaler_48 <= -0.2154513480456741 ) ? ( ( ( scaler_36 <= -0.9639412530509625 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( ( ( scaler_45 <= -0.42503584866398336 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( 214 ) : ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_19 <= -0.2949138690023265 ) ? ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_7 <= 0.6491389464199021 ) ? ( ( ( scaler_46 <= 1.0000000180025095e-35 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( ( ( scaler_20 <= 0.4519937707168578 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 220 ) : ( 221 ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 222 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_4 <= 0.29602234772959113 ) ? ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 28 ) : ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_5_15
		
	
		namespace LGBM_Tree_6_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-0.007264707611884112 }} ,
					{ 8 ,  {-0.00802587005773851 }} ,
					{ 11 ,  {-0.02880081207252896 }} ,
					{ 15 ,  {-0.00915116721996398 }} ,
					{ 20 ,  {-0.0010250370261543026 }} ,
					{ 37 ,  {-0.026600969271533777 }} ,
					{ 38 ,  {-0.026486904312153017 }} ,
					{ 39 ,  {-0.026601289448872162 }} ,
					{ 43 ,  {0.061448402929006996 }} ,
					{ 56 ,  {-0.008299375495432703 }} ,
					{ 72 ,  {-0.0268754221272334 }} ,
					{ 73 ,  {-0.027081243851973698 }} ,
					{ 84 ,  {0.05772180806844397 }} ,
					{ 114 ,  {-0.02697733474639907 }} ,
					{ 115 ,  {-0.026770895582639037 }} ,
					{ 171 ,  {0.053517982373035206 }} ,
					{ 237 ,  {-0.026542553155351797 }} ,
					{ 238 ,  {-0.026795685557609562 }} ,
					{ 239 ,  {-0.026629865684208793 }} ,
					{ 340 ,  {0.05540368408363458 }} ,
					{ 341 ,  {0.05711916718675625 }} ,
					{ 465 ,  {-0.02670763591751399 }} ,
					{ 471 ,  {-0.02661163095653815 }} ,
					{ 472 ,  {-0.026575836399611214 }} ,
					{ 473 ,  {-0.02679008775448193 }} ,
					{ 928 ,  {-0.02661406378168281 }} ,
					{ 929 ,  {-0.02649048448915512 }} ,
					{ 932 ,  {-0.026958198801435247 }} ,
					{ 933 ,  {-0.02663836582021278 }} ,
					{ 936 ,  {-0.02689527839255834 }} ,
					{ 938 ,  {-0.027093867202136985 }} ,
					{ 939 ,  {-0.026821970210582514 }} ,
					{ 940 ,  {-0.02668233722417336 }} ,
					{ 941 ,  {-0.026843832455423322 }} ,
					{ 1868 ,  {-0.026560157453270106 }} ,
					{ 1869 ,  {-0.02670025420230958 }} ,
					{ 1870 ,  {-0.02655852520740956 }} ,
					{ 1871 ,  {-0.02681221685110456 }} ,
					{ 1874 ,  {-0.026590503775284515 }} ,
					{ 1875 ,  {-0.026806775094726856 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_23 <= -1.172670280348255 ) ? ( ( ( scaler_44 <= 0.09801987281146583 ) ? ( ( ( scaler_5 <= -0.7759029885956751 ) ? ( 8 ) : ( ( ( scaler_7 <= -1.0000000180025095e-35 ) ? ( ( ( scaler_64 <= 1.3112091053562749 ) ? ( ( ( scaler_29 <= 0.7730381410604169 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( scaler_55 <= 1.0000000180025095e-35 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( scaler_11 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_56 <= -0.6539854552477539 ) ? ( 20 ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( ( ( scaler_39 <= 0.28886258011458404 ) ? ( 84 ) : ( ( ( scaler_6 <= 0.3842418285869767 ) ? ( ( ( scaler_63 <= 1.155072317075385 ) ? ( 340 ) : ( 341 ) ) ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( scaler_6 <= -1.9420927308378628 ) ? ( 6 ) : ( ( ( scaler_48 <= 2.0958856220299786 ) ? ( ( ( scaler_31 <= -1.2060136137360429 ) ? ( ( ( scaler_60 <= 1.0000000180025095e-35 ) ? ( 56 ) : ( ( ( scaler_44 <= 0.25087343464551504 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= 0.2757585113164713 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_28 <= 0.21841053072600355 ) ? ( ( ( scaler_31 <= 0.8337587128064834 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( ( ( scaler_55 <= -0.20786766464295922 ) ? ( ( ( scaler_14 <= 0.8899869965505536 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( scaler_36 <= -1.1217339944799345 ) ? ( ( ( scaler_13 <= -0.13522394563702322 ) ? ( 1868 ) : ( 1869 ) ) ) : ( ( ( scaler_12 <= -1.632912596529333 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( ( ( scaler_19 <= 0.2707067245997332 ) ? ( ( ( scaler_47 <= -0.48678287822539174 ) ? ( 936 ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( scaler_22 <= 0.22177925103848373 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( scaler_63 <= 0.30365455886182857 ) ? ( ( ( scaler_22 <= -1.0000000180025095e-35 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( scaler_53 <= 0.9502244353310784 ) ? ( ( ( scaler_43 <= 0.3066507277283727 ) ? ( ( ( scaler_36 <= 0.9295716440967049 ) ? ( 472 ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_6_15
		
	
		namespace LGBM_Tree_7_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {0.03454563479594596 }} ,
					{ 8 ,  {0.015993022896830855 }} ,
					{ 12 ,  {0.0016253363427865008 }} ,
					{ 18 ,  {-0.028115058484522438 }} ,
					{ 19 ,  {-0.02696724360227535 }} ,
					{ 21 ,  {0.027697610301463046 }} ,
					{ 22 ,  {0.04226220989478918 }} ,
					{ 46 ,  {-0.027764447980590124 }} ,
					{ 47 ,  {-0.02670901276611036 }} ,
					{ 52 ,  {-0.012537865156089109 }} ,
					{ 55 ,  {0.017759394436924886 }} ,
					{ 80 ,  {0.06593194936069713 }} ,
					{ 81 ,  {0.05961862596631351 }} ,
					{ 82 ,  {0.05944151509315651 }} ,
					{ 107 ,  {-0.02808637986398658 }} ,
					{ 108 ,  {-0.026658325968020726 }} ,
					{ 109 ,  {-0.027490413876758255 }} ,
					{ 166 ,  {0.05711765067634822 }} ,
					{ 167 ,  {0.05399723534258667 }} ,
					{ 212 ,  {-0.0277090820260919 }} ,
					{ 854 ,  {-0.02651176646327562 }} ,
					{ 1704 ,  {-0.027033414625811665 }} ,
					{ 1705 ,  {-0.026814222485094852 }} ,
					{ 1711 ,  {-0.02652464134436441 }} ,
					{ 3415 ,  {-0.026748493361526154 }} ,
					{ 3420 ,  {-0.02660030227725012 }} ,
					{ 3421 ,  {-0.026898456811431604 }} ,
					{ 6824 ,  {-0.02687874295283485 }} ,
					{ 6828 ,  {-0.02673077682147751 }} ,
					{ 13650 ,  {-0.026547691340524877 }} ,
					{ 13652 ,  {-0.026783377941765763 }} ,
					{ 13653 ,  {-0.027045385026807714 }} ,
					{ 13654 ,  {-0.026559545672046672 }} ,
					{ 13655 ,  {-0.02675862942214844 }} ,
					{ 13658 ,  {-0.026540020210976095 }} ,
					{ 13659 ,  {-0.026654005670662808 }} ,
					{ 27303 ,  {-0.026578668985827184 }} ,
					{ 54604 ,  {-0.026579219946486172 }} ,
					{ 109210 ,  {-0.02675083002639079 }} ,
					{ 109211 ,  {-0.026916849889860206 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_55 <= -1.3678903213106575 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( ( ( scaler_46 <= -0.19236172148858316 ) ? ( 8 ) : ( ( ( scaler_62 <= -1.7094750261440945 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( scaler_28 <= 0.5403966119296629 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( ( ( scaler_53 <= 0.5678730139601972 ) ? ( ( ( scaler_16 <= 1.2673416421719788 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( scaler_32 <= -0.22300760510060588 ) ? ( 82 ) : ( ( ( scaler_46 <= 0.28436801771077425 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( scaler_44 <= -0.8191014981928291 ) ? ( 22 ) : ( ( ( scaler_62 <= -0.6868216759217624 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_32 <= 2.706017084409388 ) ? ( ( ( scaler_62 <= -1.5049443560996278 ) ? ( 12 ) : ( ( ( scaler_24 <= 1.685864605755147 ) ? ( ( ( scaler_55 <= -1.2021727989295574 ) ? ( 52 ) : ( ( ( scaler_8 <= 2.4071331051944194 ) ? ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 212 ) : ( ( ( scaler_64 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_62 <= -0.48229100587729595 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( 1704 ) : ( 1705 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_45 <= -0.7331586962009459 ) ? ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 6824 ) : ( ( ( scaler_28 <= -1.3915198752922928 ) ? ( 13650 ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_22 <= -0.4271325000275405 ) ? ( 54604 ) : ( ( ( scaler_40 <= 0.46132084604515317 ) ? ( 109210 ) : ( 109211 ) ) ) ) ) : ( 27303 ) ) ) ) ) ) ) : ( ( ( scaler_21 <= 0.5833771540737799 ) ? ( ( ( scaler_39 <= -1.2463170987931262 ) ? ( 13652 ) : ( 13653 ) ) ) : ( ( ( scaler_53 <= 0.18552159258931578 ) ? ( 13654 ) : ( 13655 ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( ( ( scaler_39 <= -1.4168926186717605 ) ? ( 6828 ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( 13658 ) : ( 13659 ) ) ) ) ) : ( 3415 ) ) ) ) ) ) ) : ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( 854 ) : ( ( ( scaler_36 <= 0.29840067838081574 ) ? ( ( ( scaler_53 <= -0.38800553946700606 ) ? ( 3420 ) : ( 3421 ) ) ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( scaler_37 <= 0.554955559467802 ) ? ( ( ( scaler_31 <= 1.1737207672302379 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0,
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_7_15
		
	
		namespace LGBM_Tree_8_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 17 ,  {0.02613847968692299 }} ,
					{ 18 ,  {-0.007003755865505582 }} ,
					{ 20 ,  {-0.009801341543000651 }} ,
					{ 26 ,  {-0.026647238495094278 }} ,
					{ 27 ,  {-0.02648730124570229 }} ,
					{ 29 ,  {-0.010277865660752894 }} ,
					{ 30 ,  {0.049351379113462907 }} ,
					{ 32 ,  {-0.02681360526170605 }} ,
					{ 33 ,  {-0.02650787306796821 }} ,
					{ 42 ,  {-0.02657121002605304 }} ,
					{ 44 ,  {-0.002244741423047089 }} ,
					{ 49 ,  {-0.026675292234987703 }} ,
					{ 56 ,  {-0.027009149144094816 }} ,
					{ 62 ,  {-0.02658336878405674 }} ,
					{ 63 ,  {-0.0274414176026686 }} ,
					{ 76 ,  {-0.026509206506535706 }} ,
					{ 77 ,  {-0.026637218771269334 }} ,
					{ 78 ,  {-0.026828160121819523 }} ,
					{ 86 ,  {-0.027330065761987283 }} ,
					{ 87 ,  {-0.02689416141155071 }} ,
					{ 90 ,  {-0.0007348618190474061 }} ,
					{ 92 ,  {-0.02825460432688239 }} ,
					{ 93 ,  {-0.026842533561982258 }} ,
					{ 94 ,  {0.041368818900796585 }} ,
					{ 95 ,  {-0.012132075010778738 }} ,
					{ 96 ,  {-0.02657858064961201 }} ,
					{ 97 ,  {-0.026442737923847756 }} ,
					{ 100 ,  {-0.026845560254369988 }} ,
					{ 101 ,  {-0.026602221415596778 }} ,
					{ 102 ,  {-0.026526736224052678 }} ,
					{ 114 ,  {-0.026773248571059633 }} ,
					{ 115 ,  {-0.0265119125095134 }} ,
					{ 158 ,  {-0.026567987798936238 }} ,
					{ 159 ,  {-0.02673032673186685 }} ,
					{ 183 ,  {0.04504178910859015 }} ,
					{ 206 ,  {-0.026693976339083242 }} ,
					{ 207 ,  {-0.02653950805578465 }} ,
					{ 364 ,  {0.05249507711115978 }} ,
					{ 730 ,  {0.06036849786133726 }} ,
					{ 731 ,  {0.07378163221808709 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_40 <= -0.674542175187462 ) ? ( ( ( scaler_23 <= -0.5313583759248907 ) ? ( ( ( scaler_54 <= -0.3887240077002811 ) ? ( ( ( scaler_30 <= -0.2506660789200167 ) ? ( ( ( scaler_53 <= 0.7590487246456378 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( scaler_38 <= -1.1439052868126682 ) ? ( 18 ) : ( ( ( scaler_44 <= -0.3605408126906816 ) ? ( ( ( scaler_23 <= -1.172670280348255 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( scaler_45 <= 1.1155783890208302 ) ? ( 78 ) : ( ( ( scaler_47 <= -1.011872578720741 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_37 <= -0.08449208127008018 ) ? ( ( ( scaler_47 <= -1.3619323790509739 ) ? ( 20 ) : ( ( ( scaler_28 <= -0.908540753486804 ) ? ( 42 ) : ( ( ( scaler_14 <= 0.679518583147584 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( scaler_22 <= 1.1951468776375205 ) ? ( ( ( scaler_29 <= -0.7595290818006805 ) ? ( 44 ) : ( ( ( scaler_62 <= -1.3004136860551616 ) ? ( 90 ) : ( ( ( scaler_14 <= 0.46905016974461416 ) ? ( ( ( scaler_38 <= 0.207827783773592 ) ? ( 364 ) : ( ( ( scaler_53 <= 1.0000000180025095e-35 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( scaler_52 <= 0.5299465954450532 ) ? ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( scaler_45 <= 1.2696398127893114 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_29 <= 0.6027528940758505 ) ? ( ( ( scaler_44 <= 0.7094341201476626 ) ? ( ( ( scaler_20 <= -0.6054177856854613 ) ? ( ( ( scaler_54 <= 0.3729550774407503 ) ? ( ( ( scaler_31 <= -0.18612745046477985 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( scaler_47 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_4 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( 101 ) ) ) : ( ( ( scaler_15 <= 0.22758869247138805 ) ? ( 102 ) : ( ( ( scaler_5 <= 0.40259039964233895 ) ? ( 206 ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -0.8913523459662288 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( scaler_45 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_45 <= -0.8872201199694273 ) ? ( ( ( scaler_40 <= 0.17735509073699937 ) ? ( 56 ) : ( ( ( scaler_15 <= -0.43294137787728026 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( scaler_36 <= 0.456193419809788 ) ? ( 30 ) : ( ( ( scaler_12 <= -1.4486642041448448 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ],
					0.0 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_8_15
		
	
		namespace LGBM_Tree_9_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {0.026918013688668564 }} ,
					{ 13 ,  {0.02996122423661278 }} ,
					{ 23 ,  {-0.027368965939770187 }} ,
					{ 24 ,  {-0.027498934926204716 }} ,
					{ 29 ,  {0.004548647729277282 }} ,
					{ 33 ,  {-0.02903356633886869 }} ,
					{ 34 ,  {-0.027025688261802096 }} ,
					{ 35 ,  {0.011344980797005216 }} ,
					{ 40 ,  {-0.001959376372880312 }} ,
					{ 41 ,  {-0.028066703530379752 }} ,
					{ 42 ,  {-0.005982218929361672 }} ,
					{ 44 ,  {-0.026701345969972225 }} ,
					{ 45 ,  {-0.02704708628671821 }} ,
					{ 50 ,  {-0.026666670708293566 }} ,
					{ 51 ,  {-0.0269450818270431 }} ,
					{ 56 ,  {-0.02693071296118156 }} ,
					{ 57 ,  {-0.026712742374533433 }} ,
					{ 62 ,  {-0.027539219530830716 }} ,
					{ 63 ,  {-0.026832910061984717 }} ,
					{ 65 ,  {-0.027550698894799514 }} ,
					{ 123 ,  {-0.026628538307595196 }} ,
					{ 128 ,  {-0.0267273264999766 }} ,
					{ 172 ,  {0.08599502290542771 }} ,
					{ 174 ,  {0.03069093494963254 }} ,
					{ 241 ,  {-0.026658649905461247 }} ,
					{ 242 ,  {-0.02723589344851676 }} ,
					{ 243 ,  {-0.026899086699009745 }} ,
					{ 244 ,  {-0.026707326109049308 }} ,
					{ 245 ,  {-0.02697804586468132 }} ,
					{ 258 ,  {-0.02719015351295423 }} ,
					{ 346 ,  {0.06855630272998564 }} ,
					{ 347 ,  {0.05624777051641568 }} ,
					{ 350 ,  {0.06641382203566841 }} ,
					{ 351 ,  {0.05383772569781932 }} ,
					{ 481 ,  {-0.027020799315205537 }} ,
					{ 518 ,  {-0.027021952190336665 }} ,
					{ 519 ,  {-0.026775564845067795 }} ,
					{ 960 ,  {-0.026981457170566592 }} ,
					{ 1922 ,  {-0.02677658730508476 }} ,
					{ 1923 ,  {-0.026604154593345464 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = ( ( scaler_45 <= -0.5790972724324647 ) ? ( ( ( scaler_23 <= 0.4306094807101557 ) ? ( ( ( scaler_64 <= 0.826743595451546 ) ? ( ( ( scaler_23 <= 0.10995352849847354 ) ? ( ( ( scaler_31 <= 1.0037397400183607 ) ? ( ( ( scaler_31 <= 0.3238156311708517 ) ? ( ( ( scaler_30 <= 1.0000000180025095e-35 ) ? ( 128 ) : ( ( ( scaler_55 <= 0.28928490250034006 ) ? ( 258 ) : ( ( ( scaler_11 <= 0.47943588716958235 ) ? ( 518 ) : ( 519 ) ) ) ) ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( scaler_44 <= 0.5565805583136134 ) ? ( ( ( scaler_20 <= -1.1341235638866207 ) ? ( ( ( scaler_16 <= -1.0000000180025095e-35 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( scaler_29 <= -1.2703848227543795 ) ? ( 42 ) : ( ( ( scaler_55 <= 0.7864374696436395 ) ? ( ( ( scaler_40 <= -0.3905764198793082 ) ? ( 172 ) : ( ( ( scaler_37 <= -1.0436635423769032 ) ? ( 346 ) : ( 347 ) ) ) ) ) : ( ( ( scaler_52 <= -0.7035910196380865 ) ? ( 174 ) : ( ( ( scaler_30 <= 0.5648357445077945 ) ? ( 350 ) : ( 351 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( scaler_31 <= 0.49379665838272896 ) ? ( ( ( scaler_22 <= -0.5893604377940466 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( scaler_62 <= -2.118536366233027 ) ? ( ( ( scaler_19 <= 0.5535170214007631 ) ? ( ( ( scaler_36 <= -0.17497754590610112 ) ? ( 24 ) : ( ( ( scaler_20 <= -1.1341235638866207 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( scaler_45 <= -0.27097442489550205 ) ? ( ( ( scaler_19 <= 1.0000000180025095e-35 ) ? ( ( ( scaler_63 <= -0.20719609606630515 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( scaler_23 <= 1.2322493612393612 ) ? ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( ( ( scaler_48 <= -0.4465850450532393 ) ? ( ( ( scaler_64 <= -0.14218742435791187 ) ? ( ( ( scaler_23 <= 0.5909374568159969 ) ? ( ( ( scaler_29 <= -0.41895858783154777 ) ? ( 960 ) : ( ( ( scaler_54 <= 1.1346341625817817 ) ? ( 1922 ) : ( 1923 ) ) ) ) ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( scaler_5 <= 0.16689172199473615 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( scaler_62 <= 0.3358316743005698 ) ? ( ( ( scaler_20 <= 0.9806995489180174 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( scaler_44 <= 0.40372699647956417 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					0.0,
					lNodeValue [ 0 ] 
				} ;
				lTable["Proba"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace LGBM_Tree_9_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lTreeScores = { 
				LGBM_Tree_0_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_0_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_1_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_2_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_3_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_4_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_5_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_6_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_7_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_8_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				LGBM_Tree_9_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65)
			};
	
			tTable lAggregatedTable = aggregate_lgb_scores(lTreeScores, {"Score"});
	
			tTable lSoftMaxTable = soft_max(lAggregatedTable);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
