// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestClassifier
// Dataset : iris

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestClassifier_iris.exe ml2cpp-demo_RandomForestClassifier_iris.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2 };

		return lClasses;
	}

	namespace RF_Tree_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 8 ,  {1.0, 0.0, 0.0 }} ,
				{ 10 ,  {0.0, 1.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} ,
				{ 13 ,  {0.0, 1.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_0 <= 5.450000047683716) ? ( (Feature_3 <= 0.800000011920929) ? ( 2 ) : ( (Feature_3 <= 1.600000023841858) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_3 <= 1.75) ? ( (Feature_3 <= 0.7000000029802322) ? ( 8 ) : ( (Feature_2 <= 4.950000047683716) ? ( 10 ) : ( (Feature_1 <= 2.600000023841858) ? ( 12 ) : ( 13 ) ) ) ) : ( 14 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_0
	

	namespace RF_Tree_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 1.0, 0.0 }} ,
				{ 10 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 1.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 1.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.599999964237213) ? ( 1 ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.699999988079071) ? ( 4 ) : ( (Feature_1 <= 3.100000023841858) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_3 <= 1.75) ? ( (Feature_1 <= 2.350000023841858) ? ( 10 ) : ( (Feature_2 <= 5.049999952316284) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_1
	

	namespace RF_Tree_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 1.0, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 1.75) ? ( (Feature_3 <= 0.800000011920929) ? ( 2 ) : ( (Feature_3 <= 1.449999988079071) ? ( 4 ) : ( (Feature_1 <= 2.850000023841858) ? ( 6 ) : ( 7 ) ) ) ) : ( 8 );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_2
	

	namespace RF_Tree_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 1.0, 0.0 }} ,
				{ 10 ,  {0.0, 0.0, 1.0 }} ,
				{ 11 ,  {0.0, 1.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.75) ? ( 1 ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 4 ) : ( (Feature_2 <= 4.650000095367432) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 5.049999952316284) ? ( (Feature_0 <= 6.5) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_3
	

	namespace RF_Tree_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 3 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 1.0, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 1.0 }} ,
				{ 10 ,  {0.0, 1.0, 0.0 }} ,
				{ 11 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_0 <= 5.6499998569488525) ? ( 3 ) : ( (Feature_3 <= 1.75) ? ( (Feature_2 <= 4.950000047683716) ? ( 6 ) : ( (Feature_1 <= 2.899999976158142) ? ( 8 ) : ( (Feature_0 <= 6.949999809265137) ? ( 10 ) : ( 11 ) ) ) ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_4
	

	namespace RF_Tree_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 1.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 1.0 }} ,
				{ 10 ,  {1.0, 0.0, 0.0 }} ,
				{ 11 ,  {0.0, 1.0, 0.0 }} ,
				{ 14 ,  {0.0, 1.0, 0.0 }} ,
				{ 16 ,  {0.0, 0.0, 1.0 }} ,
				{ 17 ,  {0.0, 1.0, 0.0 }} ,
				{ 18 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_0 <= 5.450000047683716) ? ( (Feature_2 <= 2.350000023841858) ? ( 2 ) : ( (Feature_1 <= 2.450000047683716) ? ( 4 ) : ( (Feature_3 <= 1.4000000357627869) ? ( 6 ) : ( 7 ) ) ) ) : ( (Feature_2 <= 4.75) ? ( (Feature_3 <= 0.6500000059604645) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 4.950000047683716) ? ( (Feature_3 <= 1.649999976158142) ? ( 14 ) : ( (Feature_1 <= 3.100000023841858) ? ( 16 ) : ( 17 ) ) ) : ( 18 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_5
	

	namespace RF_Tree_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 1.0, 0.0 }} ,
				{ 10 ,  {0.0, 1.0, 0.0 }} ,
				{ 11 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.800000011920929) ? ( 1 ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 4 ) : ( (Feature_1 <= 3.100000023841858) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_3 <= 1.550000011920929) ? ( (Feature_2 <= 5.0) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_6
	

	namespace RF_Tree_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 9 ,  {0.0, 0.0, 1.0 }} ,
				{ 10 ,  {0.0, 1.0, 0.0 }} ,
				{ 11 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_3 <= 1.6500000357627869) ? ( (Feature_2 <= 4.900000095367432) ? ( 4 ) : ( 5 ) ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_0 <= 5.950000047683716) ? ( (Feature_1 <= 2.850000023841858) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_7
	

	namespace RF_Tree_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.0, 0.0, 0.0 }} ,
				{ 5 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 8 ,  {1.0, 0.0, 0.0 }} ,
				{ 9 ,  {0.0, 1.0, 0.0 }} ,
				{ 12 ,  {0.0, 0.0, 1.0 }} ,
				{ 13 ,  {0.0, 1.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.8500001430511475) ? ( (Feature_0 <= 5.450000047683716) ? ( (Feature_3 <= 0.7000000029802322) ? ( 3 ) : ( (Feature_2 <= 4.200000047683716) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_2 <= 2.700000047683716) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 4.950000047683716) ? ( (Feature_1 <= 3.049999952316284) ? ( 12 ) : ( 13 ) ) : ( 14 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_8
	

	namespace RF_Tree_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.800000011920929) ? ( 1 ) : ( (Feature_3 <= 1.550000011920929) ? ( (Feature_2 <= 4.950000047683716) ? ( 4 ) : ( 5 ) ) : ( 6 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_9
	

	namespace RF_Tree_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0, 0.0 }} ,
				{ 11 ,  {0.0, 1.0, 0.0 }} ,
				{ 13 ,  {0.0, 1.0, 0.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} ,
				{ 15 ,  {1.0, 0.0, 0.0 }} ,
				{ 18 ,  {0.0, 0.0, 1.0 }} ,
				{ 19 ,  {0.0, 1.0, 0.0 }} ,
				{ 20 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_0 <= 5.450000047683716) ? ( (Feature_2 <= 2.599999964237213) ? ( 2 ) : ( (Feature_3 <= 1.600000023841858) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_1 <= 3.549999952316284) ? ( (Feature_2 <= 4.75) ? ( 9 ) : ( (Feature_0 <= 5.950000047683716) ? ( 11 ) : ( (Feature_3 <= 1.5999999642372131) ? ( 13 ) : ( 14 ) ) ) ) : ( 15 ) ) : ( (Feature_2 <= 4.950000047683716) ? ( (Feature_0 <= 6.200000047683716) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_10
	

	namespace RF_Tree_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 6 ,  {0.0, 1.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 1.0 }} ,
				{ 8 ,  {0.0, 1.0, 0.0 }} ,
				{ 9 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 1.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 1.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.950000047683716) ? ( (Feature_2 <= 2.449999988079071) ? ( 2 ) : ( (Feature_3 <= 1.899999976158142) ? ( (Feature_0 <= 4.950000047683716) ? ( (Feature_1 <= 2.450000047683716) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) ) : ( (Feature_2 <= 5.049999952316284) ? ( (Feature_3 <= 1.800000011920929) ? ( 12 ) : ( 13 ) ) : ( 14 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_11
	

	namespace RF_Tree_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 8 ,  {0.0, 0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0, 0.0 }} ,
				{ 10 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.75) ? ( 1 ) : ( (Feature_3 <= 1.6500000357627869) ? ( (Feature_2 <= 4.950000047683716) ? ( 4 ) : ( 5 ) ) : ( (Feature_2 <= 5.049999952316284) ? ( (Feature_0 <= 6.5) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_12
	

	namespace RF_Tree_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} ,
				{ 7 ,  {0.0, 1.0, 0.0 }} ,
				{ 8 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.8500001430511475) ? ( (Feature_2 <= 2.449999988079071) ? ( 2 ) : ( (Feature_3 <= 1.6500000357627869) ? ( 4 ) : ( (Feature_2 <= 4.650000095367432) ? ( 6 ) : ( 7 ) ) ) ) : ( 8 );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_13
	

	namespace RF_Tree_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 4 ,  {0.0, 1.0, 0.0 }} ,
				{ 5 ,  {0.0, 0.0, 1.0 }} ,
				{ 6 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_2 <= 4.950000047683716) ? ( (Feature_3 <= 1.699999988079071) ? ( 4 ) : ( 5 ) ) : ( 6 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_14
	

	namespace RF_Tree_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.0, 0.0, 0.0 }} ,
				{ 5 ,  {0.0, 1.0, 0.0 }} ,
				{ 7 ,  {0.0, 0.0, 1.0 }} ,
				{ 8 ,  {0.0, 1.0, 0.0 }} ,
				{ 9 ,  {0.0, 0.0, 1.0 }} ,
				{ 12 ,  {0.0, 1.0, 0.0 }} ,
				{ 13 ,  {0.0, 0.0, 1.0 }} ,
				{ 14 ,  {0.0, 0.0, 1.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_3 <= 1.75) ? ( (Feature_2 <= 5.299999952316284) ? ( (Feature_3 <= 1.6500000357627869) ? ( 5 ) : ( (Feature_2 <= 4.75) ? ( 7 ) : ( 8 ) ) ) : ( 9 ) ) : ( (Feature_3 <= 1.8499999642372131) ? ( (Feature_0 <= 5.950000047683716) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2",
				"Proba_0", "Proba_1", "Proba_2",
				"LogProba_0", "LogProba_1", "LogProba_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				lNodeValue [ 0 ],
				lNodeValue [ 1 ],
				lNodeValue [ 2 ] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace RF_Tree_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2",
			"Proba_0", "Proba_1", "Proba_2",
			"LogProba_0", "LogProba_1", "LogProba_2",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		auto lClasses = get_classes();

		std::vector<tTable> lTreeScores = { 
			RF_Tree_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			RF_Tree_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Proba", "Score"});


		tTable lTable = lAggregatedTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/iris.csv");
	return 0;
}
