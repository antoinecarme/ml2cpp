// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingClassifier_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingClassifier_Pipeline_digits.exe ml2cpp-demo_BaggingClassifier_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		namespace SubModel_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 22 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 0.036036036036036036, 0.8828828828828829, 0.0, 0.0, 0.0, 0.0, 0.04504504504504504, 0.036036036036036036 }} ,
					{ 29 ,  {0.0, 0.55, 0.05, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.3 }} ,
					{ 31 ,  {0.0, 0.07291666666666667, 0.0, 0.11458333333333333, 0.0, 0.6770833333333334, 0.020833333333333332, 0.03125, 0.052083333333333336, 0.03125 }} ,
					{ 32 ,  {0.0, 0.14414414414414414, 0.0, 0.009009009009009009, 0.009009009009009009, 0.0, 0.0, 0.02702702702702703, 0.036036036036036036, 0.7747747747747747 }} ,
					{ 35 ,  {0.0, 0.0, 0.0, 0.0, 0.0625, 0.9375, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.015151515151515152, 0.030303030303030304, 0.030303030303030304, 0.06818181818181818, 0.007575757575757576, 0.0, 0.7651515151515151, 0.030303030303030304, 0.05303030303030303 }} ,
					{ 38 ,  {0.013368983957219251, 0.23796791443850268, 0.3235294117647059, 0.026737967914438502, 0.0213903743315508, 0.02406417112299465, 0.016042780748663103, 0.016042780748663103, 0.32085561497326204, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.08080808080808081, 0.010101010101010102, 0.020202020202020204, 0.0, 0.797979797979798, 0.0, 0.0707070707070707, 0.020202020202020204 }} ,
					{ 43 ,  {0.0, 0.38095238095238093, 0.0, 0.0, 0.2857142857142857, 0.09523809523809523, 0.0, 0.0, 0.14285714285714285, 0.09523809523809523 }} ,
					{ 44 ,  {0.0, 0.0, 0.0, 0.0, 0.9465648854961832, 0.0, 0.0, 0.05343511450381679, 0.0, 0.0 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 47 ,  {0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.125, 0.75, 0.0, 0.0 }} ,
					{ 50 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 53 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 54 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_44 <= -0.20768724475055933) ? ( (scaler_23 <= -0.45119438879191875) ? ( (scaler_6 <= -0.8952421676367521) ? ( 4 ) : ( 5 ) ) : ( (scaler_29 <= -1.2703848481178284) ? ( 7 ) : ( (scaler_35 <= -0.23632274568080902) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_15 <= -1.0934714078903198) ? ( (scaler_56 <= -0.25025779008865356) ? ( 13 ) : ( (scaler_3 <= 1.3594628721475601) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_39 <= -1.4168925881385803) ? ( (scaler_37 <= -0.9637326151132584) ? ( 19 ) : ( 20 ) ) : ( (scaler_64 <= 1.3112090826034546) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_35 <= 0.6158624142408371) ? ( (scaler_45 <= -0.7331587076187134) ? ( (scaler_28 <= -0.5865546762943268) ? ( (scaler_21 <= 0.5833771377801895) ? ( 28 ) : ( 29 ) ) : ( (scaler_23 <= -0.37103039026260376) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_23 <= -1.0123423337936401) ? ( 35 ) : ( 36 ) ) : ( (scaler_48 <= 0.47794973850250244) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_56 <= -0.1493258774280548) ? ( (scaler_4 <= -0.12819516845047474) ? ( (scaler_40 <= -0.6745421588420868) ? ( 43 ) : ( 44 ) ) : ( (scaler_22 <= -0.8327023684978485) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_57 <= 0.2737451493740082) ? ( (scaler_7 <= 1.2670710682868958) ? ( 50 ) : ( 51 ) ) : ( (scaler_30 <= 0.23863500356674194) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.05555555555555555, 0.5555555555555556, 0.0, 0.1111111111111111, 0.2777777777777778, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.2, 0.4, 0.0, 0.0, 0.4, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.045454545454545456, 0.18181818181818182, 0.09090909090909091, 0.0, 0.0, 0.0, 0.0, 0.09090909090909091, 0.5909090909090909 }} ,
					{ 20 ,  {0.0, 0.023076923076923078, 0.0, 0.8692307692307693, 0.0, 0.007692307692307693, 0.0, 0.0, 0.05384615384615385, 0.046153846153846156 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.2, 0.4666666666666667, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.015625, 0.03125, 0.0234375, 0.0078125, 0.015625, 0.0, 0.0, 0.0078125, 0.8984375 }} ,
					{ 28 ,  {0.0, 0.028368794326241134, 0.7801418439716312, 0.0070921985815602835, 0.0, 0.0070921985815602835, 0.0, 0.028368794326241134, 0.12056737588652482, 0.028368794326241134 }} ,
					{ 29 ,  {0.0, 0.029940119760479042, 0.059880239520958084, 0.023952095808383235, 0.0718562874251497, 0.24550898203592814, 0.10778443113772455, 0.08982035928143713, 0.3473053892215569, 0.023952095808383235 }} ,
					{ 31 ,  {0.013888888888888888, 0.25, 0.1388888888888889, 0.0, 0.125, 0.05555555555555555, 0.013888888888888888, 0.0, 0.4027777777777778, 0.0 }} ,
					{ 32 ,  {0.0, 0.9145299145299145, 0.017094017094017096, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06837606837606838, 0.0 }} ,
					{ 35 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.07692307692307693, 0.23076923076923078, 0.15384615384615385, 0.3076923076923077, 0.0, 0.0, 0.0, 0.15384615384615385, 0.07692307692307693 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.968421052631579, 0.010526315789473684, 0.021052631578947368, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.3695652173913043, 0.06521739130434782, 0.0, 0.0, 0.1956521739130435, 0.043478260869565216, 0.0, 0.1956521739130435, 0.13043478260869565, 0.0 }} ,
					{ 42 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 45 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 48 ,  {0.0, 0.125, 0.0, 0.875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 49 ,  {0.0, 0.0, 0.4444444444444444, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4444444444444444, 0.1111111111111111 }} ,
					{ 50 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_45 <= -0.8872201144695282) ? ( (scaler_30 <= -1.2292682528495789) ? ( (scaler_38 <= -1.3973552584648132) ? ( 3 ) : ( (scaler_21 <= -0.4459644705057144) ? ( 5 ) : ( (scaler_40 <= -0.6745421588420868) ? ( 7 ) : ( 8 ) ) ) ) : ( (scaler_23 <= -1.0123423039913177) ? ( (scaler_7 <= -0.7632773220539093) ? ( (scaler_65 <= 1.8869394809007645) ? ( 12 ) : ( 13 ) ) : ( (scaler_20 <= -0.6935354294255376) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_32 <= -0.4892825782299042) ? ( (scaler_6 <= -0.5462920069694519) ? ( 19 ) : ( 20 ) ) : ( (scaler_23 <= -0.05037444643676281) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_48 <= 0.7090834379196167) ? ( (scaler_40 <= -0.6745421588420868) ? ( (scaler_21 <= 0.9264910221099854) ? ( (scaler_36 <= -0.9639412462711334) ? ( 28 ) : ( 29 ) ) : ( (scaler_14 <= 0.8899869918823242) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_28 <= -0.023079030215740204) ? ( (scaler_55 <= -0.37358517944812775) ? ( 35 ) : ( 36 ) ) : ( (scaler_15 <= -0.26780886203050613) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_23 <= -0.8520143330097198) ? ( (scaler_36 <= -0.7272521406412125) ? ( 42 ) : ( (scaler_63 <= -0.20719609409570694) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_35 <= -0.23632274195551872) ? ( (scaler_44 <= -0.9719550311565399) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.78125, 0.03125, 0.0, 0.0, 0.125, 0.0, 0.0, 0.0625, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.8888888888888888, 0.0, 0.0, 0.027777777777777776, 0.0, 0.0, 0.027777777777777776, 0.05555555555555555 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.6, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.02857142857142857, 0.0, 0.0, 0.9428571428571428, 0.0, 0.0, 0.02857142857142857, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.25, 0.0, 0.0, 0.0, 0.375, 0.375, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.75, 0.0, 0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.008547008547008548, 0.0, 0.0, 0.0, 0.9914529914529915, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 0.0, 0.018867924528301886, 0.9528301886792453, 0.0, 0.0, 0.0, 0.018867924528301886, 0.0, 0.009433962264150943 }} ,
					{ 44 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.46153846153846156, 0.5384615384615384 }} ,
					{ 46 ,  {0.036585365853658534, 0.036585365853658534, 0.0, 0.07926829268292683, 0.012195121951219513, 0.06097560975609756, 0.0, 0.0, 0.024390243902439025, 0.75 }} ,
					{ 47 ,  {0.0, 0.32894736842105265, 0.0, 0.013157894736842105, 0.14473684210526316, 0.09210526315789473, 0.0, 0.10526315789473684, 0.19736842105263158, 0.11842105263157894 }} ,
					{ 50 ,  {0.0, 0.02962962962962963, 0.014814814814814815, 0.044444444444444446, 0.022222222222222223, 0.0, 0.0, 0.8592592592592593, 0.007407407407407408, 0.022222222222222223 }} ,
					{ 51 ,  {0.0, 0.07692307692307693, 0.0, 0.0, 0.5897435897435898, 0.0, 0.0, 0.07692307692307693, 0.1794871794871795, 0.07692307692307693 }} ,
					{ 53 ,  {0.0056179775280898875, 0.011235955056179775, 0.5224719101123596, 0.028089887640449437, 0.25842696629213485, 0.0, 0.0056179775280898875, 0.033707865168539325, 0.1348314606741573, 0.0 }} ,
					{ 54 ,  {0.0, 0.41148325358851673, 0.023923444976076555, 0.03827751196172249, 0.07177033492822966, 0.0, 0.004784688995215311, 0.0, 0.44976076555023925, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_7 <= 0.1194828450679779) ? ( (scaler_36 <= 0.2984006777405739) ? ( (scaler_48 <= 0.7090834379196167) ? ( (scaler_11 <= 0.16463151574134827) ? ( 5 ) : ( 6 ) ) : ( (scaler_63 <= 0.8145052194595337) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_56 <= -0.553053542971611) ? ( (scaler_12 <= 0.3938197195529938) ? ( 12 ) : ( 13 ) ) : ( (scaler_44 <= 0.250873439013958) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_44 <= 1.0915680229663849) ? ( (scaler_61 <= -1.5131829977035522) ? ( (scaler_63 <= -1.0586138665676117) ? ( 20 ) : ( 21 ) ) : ( (scaler_24 <= 0.791755884885788) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_12 <= -1.1722916215658188) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_12 <= -1.4486641883850098) ? ( (scaler_19 <= -0.2949138730764389) ? ( 31 ) : ( 32 ) ) : ( (scaler_38 <= -1.1439052820205688) ? ( (scaler_28 <= -1.1500303447246552) ? ( 35 ) : ( 36 ) ) : ( (scaler_62 <= -0.07322967052459717) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_45 <= -0.5790972709655762) ? ( (scaler_28 <= -1.0695337653160095) ? ( (scaler_21 <= 0.32604174315929413) ? ( 43 ) : ( 44 ) ) : ( (scaler_46 <= -0.033451806753873825) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_27 <= 0.3227207735180855) ? ( 50 ) : ( 51 ) ) : ( (scaler_29 <= 0.26218239963054657) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.8695652173913043, 0.08695652173913043, 0.0, 0.0, 0.0, 0.043478260869565216, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.08333333333333333, 0.3333333333333333, 0.08333333333333333, 0.08333333333333333, 0.25, 0.0, 0.16666666666666666 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.02631578947368421, 0.9736842105263158, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.14285714285714285, 0.0, 0.0, 0.0, 0.0, 0.42857142857142855, 0.42857142857142855, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.3333333333333333, 0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.16666666666666666 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.125, 0.75 }} ,
					{ 42 ,  {0.0, 0.0, 0.0, 0.38095238095238093, 0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 0.047619047619047616, 0.07142857142857142 }} ,
					{ 43 ,  {0.035897435897435895, 0.09230769230769231, 0.0, 0.05641025641025641, 0.005128205128205128, 0.010256410256410256, 0.0, 0.020512820512820513, 0.06666666666666667, 0.7128205128205128 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.04838709677419355, 0.024193548387096774, 0.0, 0.0, 0.8951612903225806, 0.03225806451612903, 0.0 }} ,
					{ 47 ,  {0.0, 0.046511627906976744, 0.0, 0.0, 0.5348837209302325, 0.06976744186046512, 0.0, 0.16279069767441862, 0.046511627906976744, 0.13953488372093023 }} ,
					{ 49 ,  {0.0, 0.23157894736842105, 0.3017543859649123, 0.03859649122807018, 0.028070175438596492, 0.0, 0.0035087719298245615, 0.03859649122807018, 0.3368421052631579, 0.021052631578947368 }} ,
					{ 50 ,  {0.023529411764705882, 0.08235294117647059, 0.0, 0.0, 0.8235294117647058, 0.0, 0.023529411764705882, 0.0, 0.047058823529411764, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.7632773220539093) ? ( (scaler_52 <= 0.17750727385282516) ? ( (scaler_40 <= -0.6745421588420868) ? ( 5 ) : ( 6 ) ) : ( (scaler_53 <= 0.08993375301361084) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_22 <= 1.3573748469352722) ? ( (scaler_4 <= -0.9766302406787872) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_56 <= -0.45212162286043167) ? ( (scaler_39 <= -0.56401501968503) ? ( (scaler_22 <= 0.46512114256620407) ? ( 18 ) : ( 19 ) ) : ( (scaler_8 <= 1.2192215025424957) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_48 <= -0.6777187585830688) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_52 <= -0.351151704788208) ? ( (scaler_44 <= 0.09801986813545227) ? ( (scaler_16 <= 1.1298221945762634) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (scaler_56 <= 1.5665167570114136) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_28 <= -1.3915199041366577) ? ( (scaler_21 <= 0.49759867787361145) ? ( 39 ) : ( 40 ) ) : ( (scaler_23 <= 0.27028150111436844) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_28 <= 0.5403966009616852) ? ( 46 ) : ( 47 ) ) : ( (scaler_35 <= 0.6158624142408371) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.09090909090909091, 0.36363636363636365, 0.0, 0.0, 0.0, 0.2727272727272727, 0.2727272727272727, 0.0 }} ,
					{ 29 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9901960784313726, 0.00980392156862745, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 0.8863636363636364, 0.0, 0.0, 0.0, 0.022727272727272728, 0.007575757575757576, 0.08333333333333333 }} ,
					{ 34 ,  {0.0, 0.4482758620689655, 0.0, 0.06896551724137931, 0.0, 0.0, 0.0, 0.0, 0.2413793103448276, 0.2413793103448276 }} ,
					{ 36 ,  {0.0, 0.01652892561983471, 0.9338842975206612, 0.0, 0.0, 0.0, 0.0, 0.03305785123966942, 0.01652892561983471, 0.0 }} ,
					{ 37 ,  {0.0, 0.3235294117647059, 0.19852941176470587, 0.0661764705882353, 0.007352941176470588, 0.0, 0.058823529411764705, 0.007352941176470588, 0.3382352941176471, 0.0 }} ,
					{ 41 ,  {0.0, 0.4772727272727273, 0.18181818181818182, 0.022727272727272728, 0.18181818181818182, 0.022727272727272728, 0.0, 0.0, 0.09090909090909091, 0.022727272727272728 }} ,
					{ 42 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.0, 0.3076923076923077, 0.0, 0.0, 0.4230769230769231, 0.07692307692307693, 0.19230769230769232, 0.0, 0.0, 0.0 }} ,
					{ 45 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 48 ,  {0.011049723756906077, 0.016574585635359115, 0.0055248618784530384, 0.0, 0.04419889502762431, 0.022099447513812154, 0.0, 0.07734806629834254, 0.39226519337016574, 0.430939226519337 }} ,
					{ 49 ,  {0.0, 0.7692307692307693, 0.0, 0.046153846153846156, 0.015384615384615385, 0.0, 0.0, 0.07692307692307693, 0.03076923076923077, 0.06153846153846154 }} ,
					{ 51 ,  {0.009523809523809525, 0.0, 0.0, 0.0, 0.9238095238095239, 0.0, 0.01904761904761905, 0.01904761904761905, 0.0, 0.02857142857142857 }} ,
					{ 52 ,  {0.0, 0.71875, 0.0, 0.0, 0.09375, 0.0, 0.125, 0.0, 0.0625, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_44 <= 0.09801987465471029) ? ( (scaler_23 <= -0.13053843192756176) ? ( 3 ) : ( (scaler_35 <= -0.23632274568080902) ? ( (scaler_11 <= 2.683066487312317) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) ) : ( (scaler_15 <= -0.9283389151096344) ? ( (scaler_5 <= -1.3651496767997742) ? ( 11 ) : ( (scaler_19 <= 1.2605427503585815) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_28 <= -0.5865546762943268) ? ( (scaler_20 <= -0.78165303170681) ? ( 17 ) : ( 18 ) ) : ( (scaler_30 <= -0.49531662091612816) ? ( 20 ) : ( 21 ) ) ) ) ) : ( (scaler_28 <= -0.10357555374503136) ? ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_39 <= -1.0757415890693665) ? ( (scaler_23 <= -0.852014347910881) ? ( 26 ) : ( 27 ) ) : ( (scaler_63 <= -1.0586138665676117) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_21 <= 0.8407125473022461) ? ( 33 ) : ( 34 ) ) : ( (scaler_29 <= 0.09189715096727014) ? ( 36 ) : ( 37 ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.4101732522249222) ? ( 41 ) : ( 42 ) ) : ( (scaler_56 <= -0.653985470533371) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( (scaler_22 <= 1.3573748469352722) ? ( 48 ) : ( 49 ) ) : ( (scaler_29 <= 0.9433233737945557) ? ( 51 ) : ( 52 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.46808510638297873, 0.0851063829787234, 0.0, 0.02127659574468085, 0.0, 0.3829787234042553, 0.0, 0.0425531914893617, 0.0 }} ,
					{ 6 ,  {0.0, 0.030303030303030304, 0.0, 0.0, 0.8181818181818182, 0.030303030303030304, 0.0, 0.12121212121212122, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.3333333333333333, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 22 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.8, 0.2, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 41 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 45 ,  {0.0, 0.0, 0.010638297872340425, 0.9893617021276596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.36363636363636365, 0.6363636363636364 }} ,
					{ 48 ,  {0.0, 0.058823529411764705, 0.0, 0.47058823529411764, 0.0, 0.0392156862745098, 0.0, 0.0, 0.37254901960784315, 0.058823529411764705 }} ,
					{ 49 ,  {0.01904761904761905, 0.08095238095238096, 0.0, 0.014285714285714285, 0.047619047619047616, 0.0761904761904762, 0.014285714285714285, 0.03333333333333333, 0.004761904761904762, 0.7095238095238096 }} ,
					{ 52 ,  {0.0, 0.0, 0.017391304347826087, 0.06086956521739131, 0.008695652173913044, 0.0, 0.0, 0.8782608695652174, 0.02608695652173913, 0.008695652173913044 }} ,
					{ 53 ,  {0.0, 0.1111111111111111, 0.0, 0.0, 0.48148148148148145, 0.037037037037037035, 0.0, 0.1111111111111111, 0.07407407407407407, 0.18518518518518517 }} ,
					{ 55 ,  {0.0, 0.26804123711340205, 0.32646048109965636, 0.041237113402061855, 0.024054982817869417, 0.0, 0.006872852233676976, 0.027491408934707903, 0.29896907216494845, 0.006872852233676976 }} ,
					{ 56 ,  {0.02247191011235955, 0.1348314606741573, 0.0, 0.0, 0.8314606741573034, 0.0, 0.0, 0.0, 0.011235955056179775, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_7 <= 0.1194828450679779) ? ( (scaler_48 <= 0.47794973850250244) ? ( (scaler_11 <= 0.007229328155517578) ? ( (scaler_31 <= -1.0360325574874878) ? ( 5 ) : ( 6 ) ) : ( (scaler_64 <= -0.3844201862812042) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_44 <= -0.20768725126981735) ? ( (scaler_14 <= -0.05712085962295532) ? ( 12 ) : ( 13 ) ) : ( (scaler_14 <= 0.8899869918823242) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_44 <= 1.0151412189006805) ? ( (scaler_32 <= 0.7089547999203205) ? ( 19 ) : ( (scaler_20 <= -0.25294727087020874) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_52 <= 1.0586055517196655) ? ( (scaler_53 <= -0.5791812688112259) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_38 <= -1.059421956539154) ? ( (scaler_20 <= -1.2222411632537842) ? ( (scaler_63 <= 0.04822923243045807) ? ( 32 ) : ( 33 ) ) : ( (scaler_52 <= -0.8798106759786606) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_62 <= -0.48229101300239563) ? ( (scaler_21 <= 0.6691556423902512) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (scaler_45 <= -0.7331587076187134) ? ( (scaler_28 <= -1.2305268049240112) ? ( (scaler_21 <= 0.4118202030658722) ? ( 45 ) : ( 46 ) ) : ( (scaler_31 <= 0.15383460000157356) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_62 <= -1.0958830118179321) ? ( (scaler_28 <= 0.5403966009616852) ? ( 52 ) : ( 53 ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.5, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.9712230215827338, 0.0, 0.0, 0.0, 0.0, 0.02158273381294964, 0.007194244604316547 }} ,
					{ 23 ,  {0.0, 0.0, 0.15789473684210525, 0.3684210526315789, 0.0, 0.0, 0.0, 0.10526315789473684, 0.0, 0.3684210526315789 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.3181818181818182, 0.0, 0.2727272727272727, 0.0, 0.045454545454545456, 0.0, 0.0, 0.0, 0.36363636363636365 }} ,
					{ 29 ,  {0.0, 0.08333333333333333, 0.0, 0.25, 0.0, 0.3333333333333333, 0.0, 0.08333333333333333, 0.25, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.044444444444444446, 0.011111111111111112, 0.0, 0.0, 0.0, 0.9333333333333333, 0.011111111111111112, 0.0 }} ,
					{ 32 ,  {0.0, 0.05421686746987952, 0.7530120481927711, 0.04216867469879518, 0.0, 0.0, 0.03614457831325301, 0.03614457831325301, 0.06626506024096386, 0.012048192771084338 }} ,
					{ 33 ,  {0.0, 0.41346153846153844, 0.057692307692307696, 0.057692307692307696, 0.04807692307692308, 0.0, 0.0673076923076923, 0.0, 0.3557692307692308, 0.0 }} ,
					{ 37 ,  {0.0, 0.3902439024390244, 0.21951219512195122, 0.04878048780487805, 0.14634146341463414, 0.07317073170731707, 0.024390243902439025, 0.0, 0.0975609756097561, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.008849557522123894, 0.008849557522123894, 0.9823008849557522, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.2962962962962963, 0.0, 0.0, 0.5925925925925926, 0.037037037037037035, 0.07407407407407407, 0.0, 0.0, 0.0 }} ,
					{ 41 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.012345679012345678, 0.024691358024691357, 0.006172839506172839, 0.006172839506172839, 0.09876543209876543, 0.024691358024691357, 0.0, 0.1111111111111111, 0.29012345679012347, 0.42592592592592593 }} ,
					{ 45 ,  {0.0, 0.8392857142857143, 0.0, 0.0, 0.017857142857142856, 0.0, 0.0, 0.05357142857142857, 0.03571428571428571, 0.05357142857142857 }} ,
					{ 47 ,  {0.009259259259259259, 0.0, 0.0, 0.0, 0.9351851851851852, 0.009259259259259259, 0.0, 0.037037037037037035, 0.0, 0.009259259259259259 }} ,
					{ 48 ,  {0.0, 0.5, 0.0, 0.0, 0.25, 0.0, 0.1875, 0.0, 0.0625, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_44 <= 0.09801987465471029) ? ( (scaler_23 <= -0.290866419672966) ? ( 3 ) : ( 4 ) ) : ( (scaler_15 <= -1.0934714078903198) ? ( (scaler_56 <= -0.25025779008865356) ? ( 7 ) : ( (scaler_28 <= -0.0230790376663208) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_39 <= -1.4168925881385803) ? ( (scaler_5 <= 0.5204397328197956) ? ( 13 ) : ( 14 ) ) : ( (scaler_57 <= 1.7360938489437103) ? ( 16 ) : ( 17 ) ) ) ) ) : ( (scaler_28 <= -0.10357555374503136) ? ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_21 <= 0.24026328325271606) ? ( (scaler_31 <= 1.0037397146224976) ? ( 22 ) : ( 23 ) ) : ( (scaler_39 <= -0.5640150159597397) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_39 <= -1.4168925881385803) ? ( 29 ) : ( 30 ) ) : ( (scaler_29 <= 0.6027528941631317) ? ( 32 ) : ( 33 ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.4101732522249222) ? ( 37 ) : ( 38 ) ) : ( (scaler_56 <= -0.553053542971611) ? ( 40 ) : ( 41 ) ) ) : ( (scaler_35 <= 0.6158624142408371) ? ( (scaler_22 <= 1.3573748469352722) ? ( 44 ) : ( 45 ) ) : ( (scaler_29 <= 1.1136085987091064) ? ( 47 ) : ( 48 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.8666666666666667, 0.0, 0.1, 0.03333333333333333, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.4426229508196721, 0.06557377049180328, 0.22950819672131148, 0.09836065573770492, 0.08196721311475409, 0.04918032786885246, 0.0, 0.0, 0.03278688524590164 }} ,
					{ 27 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.4, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 0.007042253521126761, 0.0, 0.007042253521126761, 0.0, 0.9859154929577465, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.4, 0.5, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.01282051282051282, 0.01282051282051282, 0.7948717948717948, 0.0, 0.0, 0.0, 0.0, 0.08333333333333333, 0.09615384615384616 }} ,
					{ 40 ,  {0.0, 0.0759493670886076, 0.0, 0.012658227848101266, 0.0379746835443038, 0.08860759493670886, 0.0, 0.0379746835443038, 0.08860759493670886, 0.6582278481012658 }} ,
					{ 42 ,  {0.0, 0.023622047244094488, 0.05511811023622047, 0.05511811023622047, 0.031496062992125984, 0.015748031496062992, 0.0, 0.7244094488188977, 0.031496062992125984, 0.06299212598425197 }} ,
					{ 43 ,  {0.005681818181818182, 0.23295454545454544, 0.3096590909090909, 0.04261363636363636, 0.014204545454545454, 0.0, 0.002840909090909091, 0.04261363636363636, 0.33238636363636365, 0.017045454545454544 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 47 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 49 ,  {0.0, 0.7777777777777778, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2222222222222222, 0.0 }} ,
					{ 50 ,  {0.01, 0.01, 0.0, 0.0, 0.95, 0.0, 0.02, 0.01, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_30 <= -0.9030675292015076) ? ( (scaler_23 <= -1.172670304775238) ? ( (scaler_62 <= 0.3358316719532013) ? ( 4 ) : ( (scaler_5 <= -1.6008483171463013) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_28 <= -1.1500303447246552) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_23 <= -0.21070241928100586) ? ( (scaler_64 <= 1.0689763575792313) ? ( 13 ) : ( 14 ) ) : ( (scaler_55 <= -1.2850315570831299) ? ( 16 ) : ( (scaler_29 <= -1.2703848481178284) ? ( 18 ) : ( 19 ) ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.05706918239593506) ? ( (scaler_29 <= -0.07838809629902244) ? ( 24 ) : ( 25 ) ) : ( (scaler_61 <= -1.5131829977035522) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_63 <= -0.46262140572071075) ? ( (scaler_46 <= 0.9200076460838318) ? ( 31 ) : ( 32 ) ) : ( (scaler_22 <= 0.3028932139277458) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_35 <= 0.8999241292476654) ? ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_28 <= -0.4255616366863251) ? ( 39 ) : ( 40 ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_28 <= 0.21841052919626236) ? ( (scaler_55 <= 0.1235673725605011) ? ( 46 ) : ( 47 ) ) : ( (scaler_39 <= -0.39343950152397156) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.16666666666666666, 0.16666666666666666, 0.0 }} ,
					{ 12 ,  {0.0, 0.375, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.375 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.9836065573770492, 0.0, 0.0, 0.0, 0.0, 0.01639344262295082, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.09523809523809523, 0.0, 0.23809523809523808, 0.19047619047619047, 0.19047619047619047, 0.23809523809523808, 0.0, 0.0, 0.047619047619047616 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.02040816326530612, 0.9795918367346939, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.5714285714285714, 0.0, 0.0, 0.0, 0.0, 0.32142857142857145, 0.10714285714285714 }} ,
					{ 23 ,  {0.0, 0.10526315789473684, 0.0, 0.0, 0.02631578947368421, 0.03289473684210526, 0.0, 0.013157894736842105, 0.03289473684210526, 0.7894736842105263 }} ,
					{ 28 ,  {0.0, 0.029411764705882353, 0.0, 0.058823529411764705, 0.0, 0.7058823529411765, 0.0, 0.029411764705882353, 0.08823529411764706, 0.08823529411764706 }} ,
					{ 29 ,  {0.0, 0.05357142857142857, 0.005952380952380952, 0.005952380952380952, 0.05952380952380952, 0.011904761904761904, 0.0, 0.7738095238095238, 0.05952380952380952, 0.02976190476190476 }} ,
					{ 31 ,  {0.17346938775510204, 0.0, 0.11224489795918367, 0.05102040816326531, 0.14285714285714285, 0.061224489795918366, 0.02040816326530612, 0.04081632653061224, 0.3979591836734694, 0.0 }} ,
					{ 32 ,  {0.0, 0.7857142857142857, 0.061224489795918366, 0.01020408163265306, 0.02040816326530612, 0.0, 0.0, 0.0, 0.12244897959183673, 0.0 }} ,
					{ 35 ,  {0.0, 0.008264462809917356, 0.0, 0.0, 0.9752066115702479, 0.0, 0.008264462809917356, 0.008264462809917356, 0.0, 0.0 }} ,
					{ 36 ,  {0.2222222222222222, 0.2222222222222222, 0.0, 0.0, 0.3333333333333333, 0.0, 0.05555555555555555, 0.16666666666666666, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.5555555555555556, 0.0, 0.0, 0.1111111111111111, 0.0 }} ,
					{ 43 ,  {0.00909090909090909, 0.0, 0.9636363636363636, 0.0, 0.0, 0.0, 0.01818181818181818, 0.0, 0.0, 0.00909090909090909 }} ,
					{ 44 ,  {0.0, 0.5, 0.2222222222222222, 0.0, 0.0, 0.0, 0.2777777777777778, 0.0, 0.0, 0.0 }} ,
					{ 46 ,  {0.0, 0.075, 0.075, 0.0, 0.0, 0.0, 0.025, 0.0, 0.8, 0.025 }} ,
					{ 47 ,  {0.0, 0.23809523809523808, 0.2857142857142857, 0.42857142857142855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.047619047619047616 }} ,
					{ 50 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 51 ,  {0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.0 }} ,
					{ 53 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 54 ,  {0.0, 0.14285714285714285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8571428571428571, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_45 <= -0.8872201144695282) ? ( (scaler_30 <= -1.2292682528495789) ? ( (scaler_38 <= -1.6508051753044128) ? ( 3 ) : ( (scaler_54 <= -1.245613008737564) ? ( 5 ) : ( (scaler_5 <= -2.307944357395172) ? ( 7 ) : ( 8 ) ) ) ) : ( (scaler_28 <= -0.9085407555103302) ? ( (scaler_32 <= -0.22300760075449944) ? ( (scaler_6 <= -1.476825773715973) ? ( 12 ) : ( 13 ) ) : ( (scaler_38 <= -0.29907214641571045) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_23 <= -0.691686362028122) ? ( (scaler_7 <= -0.4101732522249222) ? ( 19 ) : ( 20 ) ) : ( (scaler_31 <= -0.1861274465918541) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_56 <= -0.45212163031101227) ? ( (scaler_35 <= 0.8999241292476654) ? ( (scaler_62 <= -0.48229101300239563) ? ( (scaler_31 <= -1.2060136198997498) ? ( 28 ) : ( 29 ) ) : ( (scaler_22 <= 0.8706910014152527) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_60 <= 0.005013260990381241) ? ( (scaler_15 <= 0.2275886908173561) ? ( 35 ) : ( 36 ) ) : ( (scaler_19 <= -0.4363190233707428) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_36 <= 0.6139861643314362) ? ( (scaler_47 <= 0.0383068211376667) ? ( (scaler_29 <= 0.8581807613372803) ? ( 43 ) : ( 44 ) ) : ( (scaler_22 <= 0.708463042974472) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_23 <= 0.029789552092552185) ? ( (scaler_15 <= -0.35037512332201004) ? ( 50 ) : ( 51 ) ) : ( (scaler_46 <= -0.9074563086032867) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.0, 0.375, 0.0, 0.0, 0.0, 0.0, 0.625, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.034782608695652174, 0.0, 0.0, 0.0, 0.9652173913043478, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 0.0, 0.06666666666666667, 0.0, 0.3333333333333333, 0.0, 0.06666666666666667, 0.5333333333333333, 0.0 }} ,
					{ 37 ,  {0.0, 0.02158273381294964, 0.02877697841726619, 0.8776978417266187, 0.0, 0.0, 0.0, 0.014388489208633094, 0.007194244604316547, 0.050359712230215826 }} ,
					{ 38 ,  {0.0, 0.4230769230769231, 0.038461538461538464, 0.0, 0.0, 0.0, 0.0, 0.0, 0.34615384615384615, 0.19230769230769232 }} ,
					{ 40 ,  {0.0, 0.0, 0.9727272727272728, 0.00909090909090909, 0.0, 0.0, 0.00909090909090909, 0.0, 0.00909090909090909, 0.0 }} ,
					{ 41 ,  {0.0, 0.26119402985074625, 0.27611940298507465, 0.04477611940298507, 0.05970149253731343, 0.0, 0.08208955223880597, 0.0, 0.27611940298507465, 0.0 }} ,
					{ 45 ,  {0.0, 0.2926829268292683, 0.1951219512195122, 0.024390243902439025, 0.17073170731707318, 0.0975609756097561, 0.04878048780487805, 0.0, 0.14634146341463414, 0.024390243902439025 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.0, 0.009708737864077669, 0.9902912621359223, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 48 ,  {0.0, 0.34782608695652173, 0.0, 0.0, 0.5652173913043478, 0.043478260869565216, 0.043478260869565216, 0.0, 0.0, 0.0 }} ,
					{ 49 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 52 ,  {0.01675977653631285, 0.0223463687150838, 0.0, 0.0, 0.0446927374301676, 0.0446927374301676, 0.0, 0.0893854748603352, 0.3463687150837989, 0.43575418994413406 }} ,
					{ 53 ,  {0.0, 0.8, 0.0, 0.0, 0.07058823529411765, 0.0, 0.0, 0.07058823529411765, 0.011764705882352941, 0.047058823529411764 }} ,
					{ 55 ,  {0.0, 0.009523809523809525, 0.0, 0.0, 0.9619047619047619, 0.01904761904761905, 0.009523809523809525, 0.0, 0.0, 0.0 }} ,
					{ 56 ,  {0.0, 0.5882352941176471, 0.0, 0.0, 0.23529411764705882, 0.0, 0.058823529411764705, 0.058823529411764705, 0.058823529411764705, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_30 <= -1.2292682528495789) ? ( (scaler_45 <= 0.961516946554184) ? ( (scaler_3 <= 2.4877032041549683) ? ( (scaler_36 <= -0.8850448429584503) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_7 <= 0.4725869372487068) ? ( (scaler_5 <= -1.0116016268730164) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (scaler_36 <= -1.0428375899791718) ? ( (scaler_27 <= 0.4810511991381645) ? ( (scaler_20 <= -1.3103588223457336) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) : ( (scaler_45 <= -0.27097442746162415) ? ( (scaler_15 <= 0.0624561682343483) ? ( 21 ) : ( 22 ) ) : ( (scaler_35 <= -0.23632274568080902) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_28 <= -0.10357555374503136) ? ( (scaler_63 <= -1.0586138665676117) ? ( (scaler_21 <= 0.49759867787361145) ? ( (scaler_39 <= -1.2463170886039734) ? ( 30 ) : ( 31 ) ) : ( (scaler_60 <= -0.685786172747612) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_45 <= -0.8101893961429596) ? ( (scaler_21 <= 0.5833771377801895) ? ( 37 ) : ( 38 ) ) : ( (scaler_29 <= 0.09189715096727014) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.4101732522249222) ? ( 45 ) : ( 46 ) ) : ( (scaler_56 <= -0.653985470533371) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_35 <= 0.6158624142408371) ? ( (scaler_22 <= 1.1951468586921692) ? ( 52 ) : ( 53 ) ) : ( (scaler_15 <= 0.2275886908173561) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0 }} ,
					{ 8 ,  {0.0, 0.8918918918918919, 0.08108108108108109, 0.0, 0.02702702702702703, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.4117647058823529, 0.0, 0.17647058823529413, 0.29411764705882354, 0.0, 0.058823529411764705, 0.058823529411764705 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.8333333333333334, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.013605442176870748, 0.0, 0.0, 0.0, 0.0, 0.9863945578231292, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.019801980198019802, 0.9801980198019802, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2857142857142857, 0.7142857142857143 }} ,
					{ 33 ,  {0.0, 0.022222222222222223, 0.0, 0.4222222222222222, 0.0, 0.28888888888888886, 0.0, 0.08888888888888889, 0.044444444444444446, 0.13333333333333333 }} ,
					{ 34 ,  {0.014492753623188406, 0.057971014492753624, 0.0, 0.036231884057971016, 0.0, 0.0, 0.0, 0.007246376811594203, 0.036231884057971016, 0.8478260869565217 }} ,
					{ 37 ,  {0.0, 0.1, 0.14, 0.04, 0.08, 0.0, 0.0, 0.32, 0.04, 0.28 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.013333333333333334, 0.02666666666666667, 0.76, 0.03333333333333333, 0.006666666666666667, 0.0, 0.0, 0.02666666666666667, 0.12666666666666668, 0.006666666666666667 }} ,
					{ 41 ,  {0.005291005291005291, 0.42857142857142855, 0.037037037037037035, 0.015873015873015872, 0.0, 0.0, 0.010582010582010581, 0.015873015873015872, 0.48148148148148145, 0.005291005291005291 }} ,
					{ 45 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 48 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 49 ,  {0.0, 0.16666666666666666, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.5, 0.0 }} ,
					{ 52 ,  {0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0 }} ,
					{ 53 ,  {0.0, 0.008333333333333333, 0.0, 0.0, 0.9666666666666667, 0.0, 0.0, 0.025, 0.0, 0.0 }} ,
					{ 55 ,  {0.0, 0.0, 0.0, 0.07407407407407407, 0.0, 0.0, 0.0, 0.9259259259259259, 0.0, 0.0 }} ,
					{ 56 ,  {0.0, 0.5, 0.041666666666666664, 0.0, 0.125, 0.0, 0.041666666666666664, 0.041666666666666664, 0.20833333333333334, 0.041666666666666664 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.7632773220539093) ? ( (scaler_29 <= 0.006754525005817413) ? ( (scaler_37 <= 0.3950936496257782) ? ( 5 ) : ( 6 ) ) : ( (scaler_48 <= -0.6777187585830688) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_20 <= -0.9578883051872253) ? ( (scaler_31 <= -0.44109901785850525) ? ( 12 ) : ( 13 ) ) : ( (scaler_22 <= 1.3573748469352722) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_43 <= 1.965126872062683) ? ( (scaler_60 <= 0.9918695986270905) ? ( (scaler_63 <= -0.6329049617052078) ? ( 20 ) : ( 21 ) ) : ( (scaler_56 <= -0.45212162286043167) ? ( 23 ) : ( 24 ) ) ) : ( 25 ) ) ) : ( (scaler_35 <= 0.047738973051309586) ? ( (scaler_45 <= -0.7331587076187134) ? ( (scaler_28 <= -1.2305268049240112) ? ( (scaler_21 <= 0.49759867787361145) ? ( 30 ) : ( 31 ) ) : ( (scaler_23 <= 0.27028150111436844) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_40 <= -0.6745421588420868) ? ( 37 ) : ( 38 ) ) : ( (scaler_29 <= 0.26218239963054657) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_38 <= -0.9749386310577393) ? ( (scaler_30 <= -1.0661678910255432) ? ( (scaler_45 <= 1.1155783832073212) ? ( 45 ) : ( 46 ) ) : ( (scaler_21 <= -0.703299880027771) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_15 <= 0.06245617661625147) ? ( (scaler_39 <= -0.9051660597324371) ? ( 52 ) : ( 53 ) ) : ( (scaler_21 <= -0.6175214052200317) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.9090909090909091, 0.06060606060606061, 0.0, 0.0, 0.0, 0.030303030303030304, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 0.625, 0.1875, 0.0625, 0.125, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 0.9333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06666666666666667 }} ,
					{ 9 ,  {0.0, 0.05128205128205128, 0.7948717948717948, 0.0, 0.0, 0.0, 0.0, 0.05128205128205128, 0.10256410256410256, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.2, 0.0, 0.0, 0.0, 0.06666666666666667, 0.4, 0.3333333333333333, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 29 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5714285714285714, 0.42857142857142855 }} ,
					{ 42 ,  {0.0, 0.015384615384615385, 0.0, 0.3076923076923077, 0.13846153846153847, 0.3076923076923077, 0.03076923076923077, 0.0, 0.03076923076923077, 0.16923076923076924 }} ,
					{ 43 ,  {0.04878048780487805, 0.08536585365853659, 0.0, 0.018292682926829267, 0.006097560975609756, 0.006097560975609756, 0.0, 0.006097560975609756, 0.042682926829268296, 0.7865853658536586 }} ,
					{ 46 ,  {0.0, 0.06451612903225806, 0.06451612903225806, 0.0, 0.6774193548387096, 0.0, 0.0, 0.1935483870967742, 0.0, 0.0 }} ,
					{ 47 ,  {0.0, 0.02666666666666667, 0.0, 0.013333333333333334, 0.0, 0.0, 0.0, 0.8466666666666667, 0.02, 0.09333333333333334 }} ,
					{ 49 ,  {0.016042780748663103, 0.016042780748663103, 0.46524064171123, 0.016042780748663103, 0.2994652406417112, 0.0, 0.0053475935828877, 0.0374331550802139, 0.12834224598930483, 0.016042780748663103 }} ,
					{ 50 ,  {0.0, 0.3783783783783784, 0.032432432432432434, 0.021621621621621623, 0.032432432432432434, 0.0, 0.005405405405405406, 0.0, 0.5297297297297298, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.4101732522249222) ? ( (scaler_11 <= -0.4649772346019745) ? ( (scaler_40 <= -0.39057641476392746) ? ( 5 ) : ( 6 ) ) : ( (scaler_45 <= -0.7331586927175522) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_20 <= -0.7816530615091324) ? ( (scaler_21 <= 0.1544848084449768) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_56 <= -0.3511897101998329) ? ( (scaler_61 <= -0.3663848340511322) ? ( (scaler_20 <= 0.8044643104076385) ? ( 18 ) : ( 19 ) ) : ( (scaler_14 <= 0.6795185804367065) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_59 <= 0.8240770399570465) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_46 <= 0.602187842130661) ? ( (scaler_65 <= 0.5815610438585281) ? ( 29 ) : ( 30 ) ) : ( (scaler_44 <= -0.2841140180826187) ? ( (scaler_27 <= -0.6272616684436798) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_28 <= -1.3915199041366577) ? ( (scaler_21 <= 0.6691556125879288) ? ( 39 ) : ( 40 ) ) : ( (scaler_23 <= 0.43060947954654694) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_7 <= -0.9398293495178223) ? ( 46 ) : ( 47 ) ) : ( (scaler_29 <= 0.26218239963054657) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.2, 0.0, 0.4, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 11 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 0.45, 0.55, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 0.01694915254237288, 0.0, 0.0, 0.01694915254237288, 0.01694915254237288, 0.9491525423728814, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.5227272727272727, 0.0, 0.06818181818181818, 0.20454545454545456, 0.0, 0.11363636363636363, 0.09090909090909091, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.0, 0.6666666666666666, 0.17543859649122806, 0.0, 0.017543859649122806, 0.0, 0.05263157894736842, 0.07017543859649122, 0.017543859649122806 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.75, 0.25, 0.0, 0.0 }} ,
					{ 42 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.9916666666666667, 0.008333333333333333, 0.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 47 ,  {0.0, 0.0625, 0.0, 0.09375, 0.0, 0.03125, 0.0, 0.21875, 0.28125, 0.3125 }} ,
					{ 48 ,  {0.0, 0.031746031746031744, 0.023809523809523808, 0.023809523809523808, 0.031746031746031744, 0.0, 0.0, 0.8571428571428571, 0.007936507936507936, 0.023809523809523808 }} ,
					{ 50 ,  {0.0, 0.0593607305936073, 0.0136986301369863, 0.5251141552511416, 0.0, 0.0045662100456621, 0.0, 0.0, 0.0639269406392694, 0.3333333333333333 }} ,
					{ 51 ,  {0.00964630225080386, 0.19614147909967847, 0.33440514469453375, 0.05144694533762058, 0.01607717041800643, 0.0, 0.006430868167202572, 0.01929260450160772, 0.33440514469453375, 0.03215434083601286 }} ,
					{ 54 ,  {0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0 }} ,
					{ 55 ,  {0.0, 0.0, 0.0, 0.0, 0.9901960784313726, 0.0, 0.00980392156862745, 0.0, 0.0, 0.0 }} ,
					{ 57 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 58 ,  {0.05263157894736842, 0.3684210526315789, 0.0, 0.0, 0.2631578947368421, 0.0, 0.10526315789473684, 0.0, 0.21052631578947367, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_30 <= -0.9030675292015076) ? ( (scaler_23 <= -1.172670304775238) ? ( (scaler_55 <= -0.870737761259079) ? ( 4 ) : ( (scaler_39 <= -0.5640150085091591) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_36 <= -0.8061484843492508) ? ( (scaler_55 <= 0.5378612075001001) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (scaler_23 <= 0.10995352268218994) ? ( (scaler_7 <= -0.851553350687027) ? ( (scaler_6 <= -1.9420927166938782) ? ( 16 ) : ( 17 ) ) : ( (scaler_30 <= -0.5768668055534363) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_46 <= -0.5101815462112427) ? ( (scaler_28 <= -1.3110233545303345) ? ( 23 ) : ( 24 ) ) : ( (scaler_12 <= 0.5780681073665619) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_7 <= 0.1194828450679779) ? ( (scaler_22 <= -0.5893604457378387) ? ( (scaler_63 <= -0.3774796351790428) ? ( 32 ) : ( 33 ) ) : ( (scaler_12 <= 0.5780681073665619) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_4 <= -0.9766302406787872) ? ( (scaler_61 <= -1.9719021916389465) ? ( 39 ) : ( 40 ) ) : ( (scaler_45 <= 1.269639790058136) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_45 <= -0.42503584921360016) ? ( 47 ) : ( 48 ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_15 <= 0.2275886908173561) ? ( (scaler_39 <= -0.8198782950639725) ? ( 54 ) : ( 55 ) ) : ( (scaler_21 <= -0.6175214052200317) ? ( 57 ) : ( 58 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.2413793103448276, 0.40229885057471265, 0.10344827586206896, 0.09195402298850575, 0.022988505747126436, 0.034482758620689655, 0.05747126436781609, 0.04597701149425287, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.017543859649122806, 0.0, 0.9736842105263158, 0.0, 0.008771929824561403, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.006896551724137931, 0.0, 0.006896551724137931, 0.006896551724137931, 0.9793103448275862, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.6428571428571429, 0.21428571428571427, 0.0, 0.14285714285714285, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.2222222222222222, 0.3333333333333333, 0.0, 0.0, 0.2222222222222222, 0.0, 0.2222222222222222 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 0.010309278350515464, 0.0, 0.0, 0.979381443298969, 0.0, 0.010309278350515464 }} ,
					{ 34 ,  {0.0, 0.06363636363636363, 0.004545454545454545, 0.42727272727272725, 0.03636363636363636, 0.013636363636363636, 0.0, 0.013636363636363636, 0.06363636363636363, 0.37727272727272726 }} ,
					{ 35 ,  {0.005076142131979695, 0.2512690355329949, 0.233502538071066, 0.03299492385786802, 0.1065989847715736, 0.005076142131979695, 0.0, 0.06852791878172589, 0.2893401015228426, 0.007614213197969543 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 42 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_44 <= 0.09801987465471029) ? ( (scaler_23 <= 0.19011751003563404) ? ( (scaler_57 <= 0.7611947357654572) ? ( 4 ) : ( 5 ) ) : ( (scaler_11 <= 2.683066487312317) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_23 <= -0.9321783483028412) ? ( (scaler_39 <= 0.032999299466609955) ? ( (scaler_27 <= 0.9560423791408539) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) : ( (scaler_29 <= 0.8581807613372803) ? ( 16 ) : ( (scaler_32 <= 0.04326736927032471) ? ( 18 ) : ( 19 ) ) ) ) ) : ( (scaler_35 <= 1.7521092891693115) ? ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.250873439013958) ? ( (scaler_7 <= -0.5867252945899963) ? ( 24 ) : ( 25 ) ) : ( (scaler_22 <= 0.2217792496085167) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_62 <= -1.9140057563781738) ? ( (scaler_39 <= -1.4168925881385803) ? ( 31 ) : ( 32 ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( 34 ) : ( 35 ) ) ) ) : ( (scaler_20 <= -1.5747117400169373) ? ( (scaler_5 <= -1.1294509582221508) ? ( 38 ) : ( 39 ) ) : ( (scaler_8 <= 2.11015522480011) ? ( (scaler_55 <= 1.0350137650966644) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.5555555555555556, 0.06349206349206349, 0.0, 0.015873015873015872, 0.07936507936507936, 0.23809523809523808, 0.0, 0.047619047619047616, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.8181818181818182, 0.0, 0.0, 0.18181818181818182, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.14285714285714285, 0.8571428571428571, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.2, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.01834862385321101, 0.0, 0.981651376146789, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.9090909090909091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09090909090909091 }} ,
					{ 16 ,  {0.0, 0.0, 0.25, 0.0, 0.25, 0.0, 0.0, 0.0, 0.5, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.0, 0.0, 0.125, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.625 }} ,
					{ 46 ,  {0.0, 0.0, 0.0, 0.40540540540540543, 0.16216216216216217, 0.2972972972972973, 0.0, 0.0, 0.10810810810810811, 0.02702702702702703 }} ,
					{ 47 ,  {0.044585987261146494, 0.09554140127388536, 0.0, 0.006369426751592357, 0.0, 0.01910828025477707, 0.0, 0.006369426751592357, 0.025477707006369428, 0.802547770700637 }} ,
					{ 50 ,  {0.0, 0.006578947368421052, 0.039473684210526314, 0.019736842105263157, 0.0, 0.0, 0.0, 0.881578947368421, 0.05263157894736842, 0.0 }} ,
					{ 51 ,  {0.0, 0.04878048780487805, 0.0, 0.0, 0.5121951219512195, 0.024390243902439025, 0.0, 0.1951219512195122, 0.04878048780487805, 0.17073170731707318 }} ,
					{ 53 ,  {0.0, 0.2064516129032258, 0.29354838709677417, 0.05161290322580645, 0.012903225806451613, 0.0, 0.0, 0.02903225806451613, 0.3903225806451613, 0.016129032258064516 }} ,
					{ 54 ,  {0.041237113402061855, 0.13402061855670103, 0.020618556701030927, 0.0, 0.7835051546391752, 0.0, 0.010309278350515464, 0.0, 0.010309278350515464, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.0123423039913177) ? ( (scaler_7 <= 0.29603487998247147) ? ( (scaler_48 <= 0.47794973850250244) ? ( (scaler_40 <= -0.6745421588420868) ? ( (scaler_11 <= 0.007229328155517578) ? ( 5 ) : ( 6 ) ) : ( (scaler_4 <= 0.08391358703374863) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_22 <= 0.3028932139277458) ? ( (scaler_44 <= -0.20768725126981735) ? ( 12 ) : ( 13 ) ) : ( (scaler_45 <= 0.11417913436889648) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_44 <= 1.1679947674274445) ? ( (scaler_20 <= -0.2529472531750798) ? ( (scaler_23 <= -1.172670304775238) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (scaler_55 <= 0.5378611832857132) ? ( (scaler_43 <= 0.6383459568023682) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_38 <= -1.1439052820205688) ? ( (scaler_44 <= -0.7426746934652328) ? ( (scaler_22 <= -0.34601855278015137) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( (scaler_15 <= -0.763206422328949) ? ( 36 ) : ( (scaler_36 <= -0.806148499250412) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_28 <= -1.2305268049240112) ? ( (scaler_21 <= 0.5833771526813507) ? ( 43 ) : ( 44 ) ) : ( (scaler_23 <= 0.27028150111436844) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_28 <= 0.5403966009616852) ? ( 50 ) : ( 51 ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 0.5, 0.3333333333333333, 0.16666666666666666, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.96875, 0.0, 0.0, 0.0, 0.0, 0.0, 0.03125, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.6, 0.0, 0.08, 0.0, 0.2, 0.08, 0.04 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.007142857142857143, 0.9928571428571429, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.6666666666666666, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 42 ,  {0.0, 0.0, 0.0, 0.6129032258064516, 0.0, 0.0, 0.0, 0.0, 0.3870967741935484, 0.0 }} ,
					{ 43 ,  {0.021739130434782608, 0.07065217391304347, 0.0, 0.03260869565217391, 0.016304347826086956, 0.03260869565217391, 0.0, 0.005434782608695652, 0.005434782608695652, 0.8152173913043478 }} ,
					{ 46 ,  {0.0, 0.04, 0.04, 0.0, 0.92, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 47 ,  {0.0, 0.021897810218978103, 0.0, 0.058394160583941604, 0.014598540145985401, 0.0072992700729927005, 0.0, 0.8175182481751825, 0.029197080291970802, 0.051094890510948905 }} ,
					{ 49 ,  {0.006097560975609756, 0.03048780487804878, 0.5182926829268293, 0.024390243902439025, 0.3170731707317073, 0.0, 0.0, 0.042682926829268296, 0.054878048780487805, 0.006097560975609756 }} ,
					{ 50 ,  {0.0, 0.33480176211453744, 0.06167400881057269, 0.048458149779735685, 0.05286343612334802, 0.0, 0.00881057268722467, 0.0, 0.4889867841409692, 0.004405286343612335 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.0123423039913177) ? ( (scaler_44 <= 0.250873439013958) ? ( (scaler_7 <= -0.7632773220539093) ? ( (scaler_11 <= -0.4649772346019745) ? ( (scaler_39 <= 0.5447258464992046) ? ( 5 ) : ( 6 ) ) : ( (scaler_39 <= -0.8198783099651337) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_20 <= -0.2529472531750798) ? ( (scaler_4 <= 0.08391359262168407) ? ( 12 ) : ( 13 ) ) : ( (scaler_12 <= -1.1722915768623352) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_56 <= -0.3511897101998329) ? ( (scaler_12 <= 0.11744712293148041) ? ( (scaler_39 <= -0.6493027955293655) ? ( 20 ) : ( 21 ) ) : ( (scaler_21 <= -0.01707214117050171) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_4 <= 1.2505117356777191) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_52 <= -0.17493204772472382) ? ( (scaler_15 <= -0.763206422328949) ? ( 31 ) : ( (scaler_14 <= 0.36381596326828003) ? ( 33 ) : ( 34 ) ) ) : ( 35 ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( (scaler_28 <= -1.3915199041366577) ? ( (scaler_21 <= 0.9264910370111465) ? ( 39 ) : ( 40 ) ) : ( (scaler_31 <= -0.016146425157785416) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_7 <= -0.9398293495178223) ? ( 46 ) : ( 47 ) ) : ( (scaler_29 <= 0.09189715096727014) ? ( 49 ) : ( 50 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ],
					lNodeValue [ 4 ],
					lNodeValue [ 5 ],
					lNodeValue [ 6 ],
					lNodeValue [ 7 ],
					lNodeValue [ 8 ],
					lNodeValue [ 9 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_4::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_5::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_6::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_7::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_8::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_9::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_10::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_11::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_12::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_13::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_14::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				SubModel_15::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Proba", "Score"});
	
	
			tTable lTable = lAggregatedTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
