// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingClassifier_Pipeline
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingClassifier_Pipeline_FourClass_10.exe ml2cpp-demo_BaggingClassifier_Pipeline_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( -0.003903374463034205 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.6152232215702322 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.042796236914291665 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.7709819558904074 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.43300733624893334 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( -0.0424956965794036 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.29809080119845455 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.14672241507251663 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.01746942384662034 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.11507331415602866 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - -0.003903374463034205 ) / 0.9795060640183997 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.6152232215702322 ) / 1.3900807236205235 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.042796236914291665 ) / 1.4962685135870766 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.7709819558904074 ) / 2.3333561060111743 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.43300733624893334 ) / 1.4029757772648748 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - -0.0424956965794036 ) / 0.9558091076873229 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.29809080119845455 ) / 1.017013180721433 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.14672241507251663 ) / 1.600798539929603 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.01746942384662034 ) / 1.1487296361671415 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.11507331415602866 ) / 0.9690911857336224 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		namespace SubModel_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 6 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 15 ,  {0.9583333333333334, 0.0, 0.0, 0.041666666666666664 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 25 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 26 ,  {1.0, 0.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= -0.20496699959039688) ? ( (scaler_output_3 <= -0.7135222852230072) ? ( 2 ) : ( (scaler_output_9 <= -0.10785947740077972) ? ( 4 ) : ( (scaler_output_9 <= 0.7079376727342606) ? ( 6 ) : ( (scaler_output_6 <= -1.2704921662807465) ? ( 8 ) : ( 9 ) ) ) ) ) : ( (scaler_output_5 <= -0.062243292573839426) ? ( (scaler_output_8 <= 1.4334330558776855) ? ( (scaler_output_4 <= -1.72577565908432) ? ( 13 ) : ( (scaler_output_4 <= 0.41027943789958954) ? ( 15 ) : ( 16 ) ) ) : ( 17 ) ) : ( (scaler_output_8 <= -0.8759022653102875) ? ( (scaler_output_9 <= 0.593229278922081) ? ( 20 ) : ( (scaler_output_10 <= -0.11427998542785645) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_2 <= 0.44471753761172295) ? ( 25 ) : ( 26 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_0
		
	
		namespace SubModel_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 18 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.3333333333333333, 0.0, 0.6666666666666666 }} ,
					{ 21 ,  {0.0, 0.96, 0.0, 0.04 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.0758902789093554) ? ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_3 <= -0.18067405000329018) ? ( (scaler_output_7 <= 0.12190598528832197) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_11 <= -0.15214083343744278) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_5 <= -1.2971596121788025) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_10 <= 0.8861697912216187) ? ( (scaler_output_2 <= -1.5039697587490082) ? ( 14 ) : ( (scaler_output_3 <= -0.5353318005800247) ? ( (scaler_output_2 <= -0.34406259655952454) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_6 <= -0.9074655771255493) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_7 <= 0.8208808302879333) ? ( 23 ) : ( 24 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_1
		
	
		namespace SubModel_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.26133164018392563) ? ( (scaler_output_9 <= 0.2546616494655609) ? ( (scaler_output_7 <= 0.12190598528832197) ? ( (scaler_output_6 <= 0.6188681200146675) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_4 <= 1.2549768686294556) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_3 <= -0.8593521118164062) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_9 <= 0.18635689839720726) ? ( (scaler_output_6 <= 1.003070890903473) ? ( (scaler_output_4 <= -1.2985426783561707) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_7 <= -0.08975870162248611) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_10 <= -0.9956725239753723) ? ( 21 ) : ( (scaler_output_6 <= 0.686269611120224) ? ( (scaler_output_9 <= 0.289800763130188) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_2
		
	
		namespace SubModel_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 23 ,  {0.0, 0.9565217391304348, 0.0, 0.043478260869565216 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.041819671634584665) ? ( (scaler_output_6 <= 0.037758152931928635) ? ( (scaler_output_3 <= -0.7135222852230072) ? ( (scaler_output_5 <= -0.6424866914749146) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_8 <= 1.5459498167037964) ? ( (scaler_output_7 <= 1.0352771431207657) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) : ( (scaler_output_11 <= -2.4598768949508667) ? ( 15 ) : ( (scaler_output_3 <= -0.5353318005800247) ? ( (scaler_output_8 <= -0.4873635321855545) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_9 <= -0.2956913411617279) ? ( 21 ) : ( (scaler_output_3 <= 1.5061954259872437) ? ( 23 ) : ( 24 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_3
		
	
		namespace SubModel_4 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.2727272727272727, 0.0, 0.0, 0.7272727272727273 }} ,
					{ 11 ,  {0.0, 0.3333333333333333, 0.6111111111111112, 0.05555555555555555 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.690996915102005) ? ( (scaler_output_10 <= -1.3757396340370178) ? ( 2 ) : ( (scaler_output_5 <= -1.091533362865448) ? ( 4 ) : ( (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_6 <= -1.0733897984027863) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_9 <= -0.38386066257953644) ? ( 10 ) : ( 11 ) ) ) ) ) : ( (scaler_output_3 <= 1.29959374666214) ? ( (scaler_output_8 <= -0.4136694520711899) ? ( 14 ) : ( 15 ) ) : ( 16 ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_4
		
	
		namespace SubModel_5 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 25 ,  {0.5, 0.5, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( (scaler_output_7 <= 0.12190598528832197) ? ( (scaler_output_11 <= 0.011103138327598572) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_3 <= -0.7135222852230072) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_3 <= -0.8707321509718895) ? ( 10 ) : ( (scaler_output_6 <= 0.2346882950514555) ? ( 12 ) : ( (scaler_output_5 <= 1.0432680249214172) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (scaler_output_3 <= -0.31972385942935944) ? ( (scaler_output_8 <= -0.5153167992830276) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= 0.1137549951672554) ? ( (scaler_output_9 <= 0.289800763130188) ? ( 22 ) : ( (scaler_output_6 <= 0.686269611120224) ? ( 24 ) : ( 25 ) ) ) : ( (scaler_output_11 <= -2.258976697921753) ? ( 27 ) : ( 28 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_5
		
	
		namespace SubModel_6 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 23 ,  {0.0, 0.5, 0.5, 0.0 }} ,
					{ 25 ,  {0.0, 0.6666666666666666, 0.0, 0.3333333333333333 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.024253899697214365) ? ( (scaler_output_10 <= -0.06688698753714561) ? ( (scaler_output_9 <= 0.012722700834274292) ? ( 3 ) : ( (scaler_output_3 <= -0.5041590929031372) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_5 <= -0.8025107383728027) ? ( (scaler_output_3 <= 0.26682789623737335) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) : ( (scaler_output_9 <= 0.16974786296486855) ? ( (scaler_output_4 <= 0.09038191568106413) ? ( 14 ) : ( (scaler_output_11 <= 1.071708858013153) ? ( 16 ) : ( 17 ) ) ) : ( (scaler_output_11 <= -1.75930517911911) ? ( 19 ) : ( (scaler_output_4 <= 0.12697471678256989) ? ( (scaler_output_5 <= 0.4062139391899109) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_9 <= 0.2709335684776306) ? ( 25 ) : ( 26 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_6
		
	
		namespace SubModel_7 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 12 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.125, 0.875, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 25 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.1466479580849409) ? ( (scaler_output_5 <= -0.8025107383728027) ? ( (scaler_output_10 <= -1.15753173828125) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_9 <= -0.010347388684749603) ? ( (scaler_output_5 <= -0.6293138116598129) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_10 <= -1.1501893997192383) ? ( 10 ) : ( (scaler_output_3 <= -0.6457916796207428) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (scaler_output_5 <= -0.062243292573839426) ? ( (scaler_output_8 <= 0.823839396238327) ? ( 16 ) : ( (scaler_output_6 <= 1.249502956867218) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_2 <= -0.27654649317264557) ? ( (scaler_output_5 <= 1.3132024705410004) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_5 <= 0.6029440760612488) ? ( 25 ) : ( 26 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_7
		
	
		namespace SubModel_8 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 12 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.06916628405451775) ? ( (scaler_output_5 <= -1.089933693408966) ? ( 2 ) : ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_3 <= -0.17495721392333508) ? ( (scaler_output_9 <= 0.30720651149749756) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_9 <= 0.4066825211048126) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_7 <= 1.1410517990589142) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_9 <= 0.2709335684776306) ? ( (scaler_output_5 <= 0.5198379158973694) ? ( (scaler_output_5 <= 0.27204815298318863) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( 21 ) : ( 22 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_8
		
	
		namespace SubModel_9 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 24 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.39379824697971344) ? ( (scaler_output_5 <= -1.146536111831665) ? ( 2 ) : ( (scaler_output_6 <= -0.22245632112026215) ? ( (scaler_output_10 <= -0.8591018095612526) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) ) : ( (scaler_output_9 <= 0.18635689839720726) ? ( (scaler_output_6 <= 0.21016703569330275) ? ( 10 ) : ( (scaler_output_9 <= -0.047089215368032455) ? ( 12 ) : ( 13 ) ) ) : ( (scaler_output_5 <= 0.3651570528745651) ? ( (scaler_output_3 <= 0.09014090895652771) ? ( 16 ) : ( (scaler_output_3 <= 0.9381917417049408) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_10 <= 0.8899189829826355) ? ( 21 ) : ( (scaler_output_2 <= 1.4410680532455444) ? ( 23 ) : ( 24 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_9
		
	
		namespace SubModel_10 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 15 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.5, 0.0, 0.5 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.6293008476495743) ? ( (scaler_output_7 <= 0.21149110049009323) ? ( (scaler_output_7 <= -0.34059810638427734) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_2 <= -1.0364435613155365) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_6 <= 0.18601789884269238) ? ( 10 ) : ( (scaler_output_5 <= 1.125637412071228) ? ( 12 ) : ( 13 ) ) ) : ( (scaler_output_3 <= -0.4133424684405327) ? ( 15 ) : ( (scaler_output_10 <= -0.5202423483133316) ? ( 17 ) : ( (scaler_output_9 <= 0.4906497150659561) ? ( 19 ) : ( 20 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_10
		
	
		namespace SubModel_11 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 1 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -1.146536111831665) ? ( 1 ) : ( (scaler_output_5 <= 0.3390422910451889) ? ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_9 <= -0.12061124108731747) ? ( (scaler_output_4 <= -1.2985426783561707) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_4 <= -0.6120464354753494) ? ( 9 ) : ( 10 ) ) ) : ( 11 ) ) : ( (scaler_output_9 <= 0.16974786296486855) ? ( 13 ) : ( (scaler_output_4 <= 0.14891164749860764) ? ( (scaler_output_3 <= 0.3889448046684265) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_11
		
	
		namespace SubModel_12 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 14 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.8333333333333334, 0.16666666666666666 }} ,
					{ 25 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.46353819966316223) ? ( (scaler_output_9 <= 0.12132770754396915) ? ( (scaler_output_2 <= 2.1401240825653076) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_5 <= 0.4057677686214447) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_6 <= 1.003070890903473) ? ( (scaler_output_6 <= 0.161614328622818) ? ( 11 ) : ( (scaler_output_10 <= 0.3320254161953926) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_5 <= -0.4321153745986521) ? ( 16 ) : ( 17 ) ) ) : ( (scaler_output_4 <= 0.1137549951672554) ? ( (scaler_output_11 <= -0.06389793008565903) ? ( (scaler_output_5 <= -0.18983598053455353) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_6 <= 0.3266519755125046) ? ( 24 ) : ( 25 ) ) ) : ( 26 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_12
		
	
		namespace SubModel_13 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.8888888888888888, 0.05555555555555555, 0.05555555555555555 }} ,
					{ 15 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 18 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 21 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.7317952811717987) ? ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_3 <= -0.9766426384449005) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_6 <= 0.14677949994802475) ? ( 7 ) : ( (scaler_output_7 <= 0.1948721781373024) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_8 <= -0.12711439840495586) ? ( (scaler_output_9 <= 1.8272849917411804) ? ( (scaler_output_7 <= 1.9231358766555786) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) : ( (scaler_output_3 <= -0.6457916796207428) ? ( 18 ) : ( 19 ) ) ) ) : ( (scaler_output_8 <= -0.535994365811348) ? ( 21 ) : ( (scaler_output_7 <= 0.26232411712408066) ? ( (scaler_output_3 <= 0.903044730424881) ? ( 24 ) : ( (scaler_output_10 <= 1.6438356339931488) ? ( 26 ) : ( 27 ) ) ) : ( 28 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_13
		
	
		namespace SubModel_14 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 12 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 23 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.75, 0.25, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 27 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_6 <= 0.16372588276863098) ? ( (scaler_output_9 <= -0.058202026411890984) ? ( (scaler_output_3 <= -0.5756765604019165) ? ( (scaler_output_7 <= 0.12190598528832197) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_7 <= -1.9583714604377747) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_2 <= 0.5615823566913605) ? ( (scaler_output_11 <= 0.10855816677212715) ? ( (scaler_output_5 <= -0.07403384149074554) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_6 <= -0.42016299068927765) ? ( 15 ) : ( 16 ) ) ) : ( 17 ) ) ) : ( (scaler_output_5 <= 0.332256555557251) ? ( (scaler_output_5 <= -1.2459433674812317) ? ( 20 ) : ( (scaler_output_7 <= 0.39308997988700867) ? ( (scaler_output_3 <= 0.903044730424881) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_7 <= 1.1418177634477615) ? ( 26 ) : ( 27 ) ) ) ) : ( 28 ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_14
		
	
		namespace SubModel_15 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 11 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 12 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.8, 0.0, 0.2 }} ,
					{ 23 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.12131557986140251) ? ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_3 <= 0.16096458584070206) ? ( (scaler_output_10 <= -0.446695014834404) ? ( (scaler_output_3 <= -0.7765676081180573) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_8 <= 1.4334330558776855) ? ( (scaler_output_4 <= -1.72577565908432) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) : ( (scaler_output_10 <= 0.8861697912216187) ? ( (scaler_output_9 <= -0.2896479144692421) ? ( 16 ) : ( (scaler_output_11 <= -1.75930517911911) ? ( 18 ) : ( (scaler_output_10 <= 0.2743743285536766) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_9 <= 0.31594332307577133) ? ( 23 ) : ( 24 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					lNodeValue [ 0 ],
					lNodeValue [ 1 ],
					lNodeValue [ 2 ],
					lNodeValue [ 3 ] 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lTreeScores = { 
				SubModel_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_4::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_5::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_6::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_7::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_8::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_9::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_10::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_11::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_12::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_13::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_14::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				SubModel_15::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Proba", "Score"});
	
	
			tTable lTable = lAggregatedTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
