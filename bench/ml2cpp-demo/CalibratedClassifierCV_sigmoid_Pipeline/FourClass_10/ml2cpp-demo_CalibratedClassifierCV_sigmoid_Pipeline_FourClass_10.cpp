// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : CalibratedClassifierCV_sigmoid_Pipeline
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_CalibratedClassifierCV_sigmoid_Pipeline_FourClass_10.exe ml2cpp-demo_CalibratedClassifierCV_sigmoid_Pipeline_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( -0.003903374463034205 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.6152232215702322 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.042796236914291665 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.7709819558904074 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.43300733624893334 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( -0.0424956965794036 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.29809080119845455 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.14672241507251663 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.01746942384662034 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.11507331415602866 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - -0.003903374463034205 ) / 0.9795060640183997 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.6152232215702322 ) / 1.3900807236205235 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.042796236914291665 ) / 1.4962685135870766 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.7709819558904074 ) / 2.3333561060111743 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.43300733624893334 ) / 1.4029757772648748 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - -0.0424956965794036 ) / 0.9558091076873229 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.29809080119845455 ) / 1.017013180721433 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.14672241507251663 ) / 1.600798539929603 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.01746942384662034 ) / 1.1487296361671415 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.11507331415602866 ) / 0.9690911857336224 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		namespace BestEstimator_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.2, 0.0, 0.8, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.875, 0.0, 0.125 }} ,
					{ 19 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.0912456251680851) ? ( (scaler_output_5 <= -1.091533362865448) ? ( 2 ) : ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_9 <= -0.9628250300884247) ? ( 5 ) : ( (scaler_output_3 <= 0.42813173681497574) ? ( 7 ) : ( 8 ) ) ) : ( 9 ) ) ) : ( (scaler_output_9 <= 0.13469922170042992) ? ( (scaler_output_3 <= -0.8707321509718895) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_9 <= 1.8647207021713257) ? ( (scaler_output_11 <= -1.75930517911911) ? ( 16 ) : ( (scaler_output_7 <= 1.9231358766555786) ? ( 18 ) : ( 19 ) ) ) : ( 20 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					logistic(2.549247031260632 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.7882076040738046),
					logistic(1.596529418727809 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.5654279247168081),
					logistic(1.5421687240963162 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.3957623211185077),
					logistic(2.458665819722004 * coalesce( std::any() , lNodeValue [ 3 ] ) + -2.131680397837361) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_0
		
	
		namespace BestEstimator_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 13 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.3333333333333333, 0.0, 0.6666666666666666 }} ,
					{ 21 ,  {0.0, 0.3333333333333333, 0.6666666666666666, 0.0 }} ,
					{ 23 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 26 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 27 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 1.0, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.05717501789331436) ? ( (scaler_output_6 <= 0.05571444891393185) ? ( (scaler_output_3 <= -0.07998256757855415) ? ( (scaler_output_7 <= 0.10643760394304991) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_4 <= -1.2985426783561707) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_5 <= -1.2971596121788025) ? ( 10 ) : ( (scaler_output_4 <= -1.72577565908432) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_6 <= 0.20309582352638245) ? ( (scaler_output_9 <= 0.02690359205007553) ? ( 16 ) : ( (scaler_output_10 <= 0.2743743285536766) ? ( 18 ) : ( (scaler_output_10 <= 0.6807283908128738) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_11 <= -1.593790590763092) ? ( 23 ) : ( (scaler_output_10 <= -0.7875761687755585) ? ( (scaler_output_8 <= -0.6242193728685379) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					logistic(2.905345084762549 * coalesce( std::any() , lNodeValue [ 0 ] ) + -2.0700246142981693),
					logistic(2.4518409127002156 * coalesce( std::any() , lNodeValue [ 1 ] ) + -2.0071873789295784),
					logistic(1.307588792019992 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.515381085469717),
					logistic(3.505003484432656 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.7132439237219161) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_1
		
	
		namespace BestEstimator_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 4 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.6, 0.0, 0.2, 0.2 }} ,
					{ 8 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 9 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 21 ,  {0.14285714285714285, 0.5714285714285714, 0.0, 0.2857142857142857 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 1.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.053778067231178284) ? ( (scaler_output_5 <= -1.148135781288147) ? ( 2 ) : ( (scaler_output_10 <= -1.2135148644447327) ? ( 4 ) : ( (scaler_output_10 <= 0.19233238697052002) ? ( (scaler_output_3 <= -0.42041534185409546) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) ) ) : ( (scaler_output_9 <= -0.23792331665754318) ? ( (scaler_output_3 <= -0.5790218412876129) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_3 <= 1.5061954259872437) ? ( (scaler_output_11 <= -0.012925520539283752) ? ( (scaler_output_11 <= -1.75930517911911) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_6 <= -0.4129837602376938) ? ( 20 ) : ( 21 ) ) ) : ( 22 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					logistic(1.655312265996893 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.9465359156649764),
					logistic(1.4842829120382715 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.4260945474099451),
					logistic(0.18516420736990685 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.1227740857433035),
					logistic(2.3275370279747007 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.178817079014264) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_2
		
	
		namespace BestEstimator_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 5 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 7 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 8 ,  {0.4, 0.0, 0.4, 0.2 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 16 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 1.0 }} ,
					{ 21 ,  {1.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 1.0, 0.0, 0.0 }} ,
					{ 23 ,  {0.0, 0.0, 1.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 1.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.05717501789331436) ? ( (scaler_output_6 <= 0.1466479580849409) ? ( (scaler_output_10 <= -1.2135148644447327) ? ( 3 ) : ( (scaler_output_9 <= -1.6641907095909119) ? ( 5 ) : ( (scaler_output_5 <= -0.8025107383728027) ? ( 7 ) : ( 8 ) ) ) ) : ( (scaler_output_7 <= 0.3396560847759247) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_9 <= 0.18635689839720726) ? ( (scaler_output_6 <= 0.21016703569330275) ? ( 14 ) : ( (scaler_output_9 <= -0.047089215368032455) ? ( 16 ) : ( 17 ) ) ) : ( (scaler_output_10 <= 0.8858284950256348) ? ( (scaler_output_9 <= 1.9481966495513916) ? ( (scaler_output_3 <= -0.9329586327075958) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( 24 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					logistic(0.6541345978264838 * coalesce( std::any() , lNodeValue [ 0 ] ) + -1.431848418349633),
					logistic(1.3969638678099034 * coalesce( std::any() , lNodeValue [ 1 ] ) + -1.5654274312060947),
					logistic(0.7771003168569949 * coalesce( std::any() , lNodeValue [ 2 ] ) + -1.2745028430865424),
					logistic(1.948907765544585 * coalesce( std::any() , lNodeValue [ 3 ] ) + -1.5260515838033688) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_3
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lBaseScores = { 
				BestEstimator_0::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				BestEstimator_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				BestEstimator_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				BestEstimator_3::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_calibrated_scores(lBaseScores, {"Proba", "Score"});
	
	
			tTable lTable = lAggregatedTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
