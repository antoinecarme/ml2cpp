// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : CalibratedClassifierCV_isotonic
// Dataset : BinaryClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_CalibratedClassifierCV_isotonic_BinaryClass_10.exe ml2cpp-demo_CalibratedClassifierCV_isotonic_BinaryClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace BestEstimator_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {1.0, 0.0 }} ,
				{ 5 ,  {0.0, 1.0 }} ,
				{ 6 ,  {1.0, 0.0 }} ,
				{ 7 ,  {0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0 }} ,
				{ 10 ,  {1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_9 <= 0.1528602191247046) ? ( (Feature_5 <= 2.3706862926483154) ? ( (Feature_5 <= -1.4731858372688293) ? ( (Feature_3 <= 0.8493471741676331) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_6 <= 1.9341034293174744) ? ( 9 ) : ( 10 ) );
		
			return lNodeIndex;
		}
		
	
		typedef std::vector<tAnyVector> tIsotonicData;
		std::map<std::any, tIsotonicData> lIsotonicData_0 = {
					 // {xmin, xmax, ymin, ymax, coeff}
			{ 1 ,	{ 
					{ -1.79769313486231e+308, 0.0, 0.23076923076923078, 0.23076923076923078, 0.0 },
					{ 0.0, 1.0, 0.23076923076923078, 1.0, 0.7692307692307692 },
					{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
				} },
		};
		
		std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
			std::any lResult = iData[iData.size() - 1][3];
			for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
				if(iX <= iData[lIndex][1]) {
					return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
				}
			}
			return(lResult);
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - interpolate_isotonic( lIsotonicData_0 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
				interpolate_isotonic( lIsotonicData_0 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_0
	

	namespace BestEstimator_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {1.0, 0.0 }} ,
				{ 6 ,  {0.75, 0.25 }} ,
				{ 7 ,  {0.0, 1.0 }} ,
				{ 8 ,  {0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0 }} ,
				{ 11 ,  {0.0, 1.0 }} ,
				{ 12 ,  {1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_9 <= 0.034406057093292475) ? ( (Feature_5 <= 2.3706862926483154) ? ( (Feature_2 <= 1.922914445400238) ? ( (Feature_3 <= 1.6463998556137085) ? ( (Feature_3 <= 1.2421400547027588) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (Feature_5 <= 1.928068220615387) ? ( 11 ) : ( 12 ) );
		
			return lNodeIndex;
		}
		
	
		typedef std::vector<tAnyVector> tIsotonicData;
		std::map<std::any, tIsotonicData> lIsotonicData_1 = {
					 // {xmin, xmax, ymin, ymax, coeff}
			{ 1 ,	{ 
					{ -1.79769313486231e+308, 0.0, 0.1111111111111111, 0.1111111111111111, 0.0 },
					{ 0.0, 0.25, 0.1111111111111111, 0.1111111111111111, 0.0 },
					{ 0.25, 1.0, 0.1111111111111111, 0.8181818181818182, 0.9427609427609429 },
					{ 1.0, 1.79769313486231e+308, 0.8181818181818182, 0.8181818181818182, 0.0 },
				} },
		};
		
		std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
			std::any lResult = iData[iData.size() - 1][3];
			for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
				if(iX <= iData[lIndex][1]) {
					return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
				}
			}
			return(lResult);
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - interpolate_isotonic( lIsotonicData_1 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
				interpolate_isotonic( lIsotonicData_1 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_1
	

	namespace BestEstimator_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {1.0, 0.0 }} ,
				{ 6 ,  {0.8, 0.2 }} ,
				{ 7 ,  {0.0, 1.0 }} ,
				{ 8 ,  {0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0 }} ,
				{ 11 ,  {0.0, 1.0 }} ,
				{ 12 ,  {1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_9 <= 0.034406057093292475) ? ( (Feature_5 <= 2.3706862926483154) ? ( (Feature_2 <= 1.922914445400238) ? ( (Feature_3 <= 1.7716785669326782) ? ( (Feature_8 <= 1.0718297362327576) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (Feature_6 <= 2.0320791602134705) ? ( 11 ) : ( 12 ) );
		
			return lNodeIndex;
		}
		
	
		typedef std::vector<tAnyVector> tIsotonicData;
		std::map<std::any, tIsotonicData> lIsotonicData_2 = {
					 // {xmin, xmax, ymin, ymax, coeff}
			{ 1 ,	{ 
					{ -1.79769313486231e+308, 0.0, 0.16666666666666666, 0.16666666666666666, 0.0 },
					{ 0.0, 1.0, 0.16666666666666666, 1.0, 0.8333333333333334 },
					{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
				} },
		};
		
		std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
			std::any lResult = iData[iData.size() - 1][3];
			for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
				if(iX <= iData[lIndex][1]) {
					return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
				}
			}
			return(lResult);
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - interpolate_isotonic( lIsotonicData_2 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
				interpolate_isotonic( lIsotonicData_2 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_2
	

	namespace BestEstimator_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.0, 1.0 }} ,
				{ 6 ,  {1.0, 0.0 }} ,
				{ 7 ,  {1.0, 0.0 }} ,
				{ 8 ,  {0.0, 1.0 }} ,
				{ 9 ,  {0.0, 1.0 }} ,
				{ 13 ,  {1.0, 0.0 }} ,
				{ 14 ,  {0.0, 1.0 }} ,
				{ 15 ,  {0.0, 1.0 }} ,
				{ 16 ,  {1.0, 0.0 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_9 <= -0.27291035652160645) ? ( (Feature_6 <= 1.6239227056503296) ? ( (Feature_5 <= 2.391359508037567) ? ( (Feature_5 <= -1.4731858372688293) ? ( (Feature_0 <= 1.1504928469657898) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (Feature_6 <= 1.9341034293174744) ? ( (Feature_9 <= -0.03950319066643715) ? ( (Feature_3 <= -0.09809866547584534) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( 16 ) );
		
			return lNodeIndex;
		}
		
	
		typedef std::vector<tAnyVector> tIsotonicData;
		std::map<std::any, tIsotonicData> lIsotonicData_3 = {
					 // {xmin, xmax, ymin, ymax, coeff}
			{ 1 ,	{ 
					{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
					{ 0.0, 1.0, 0.0, 0.9090909090909091, 0.9090909090909091 },
					{ 1.0, 1.79769313486231e+308, 0.9090909090909091, 0.9090909090909091, 0.0 },
				} },
		};
		
		std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
			std::any lResult = iData[iData.size() - 1][3];
			for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
				if(iX <= iData[lIndex][1]) {
					return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
				}
			}
			return(lResult);
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - interpolate_isotonic( lIsotonicData_3 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
				interpolate_isotonic( lIsotonicData_3 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )) 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace BestEstimator_3
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		std::vector<tTable> lBaseScores = { 
			BestEstimator_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			BestEstimator_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_calibrated_scores(lBaseScores, {"Proba", "Score"});


		tTable lTable = lAggregatedTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_10.csv");
	return 0;
}
