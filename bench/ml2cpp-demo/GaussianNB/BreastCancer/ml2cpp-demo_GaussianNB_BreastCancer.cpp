// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_BreastCancer.exe ml2cpp-demo_GaussianNB_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		tTable lLogLikelihoodTable = tTable();

		lLogLikelihoodTable["Score"] = {
			-1.0451236037171234 + log_normal_cdf( Feature_0 , 17.640437500000008 , 10.326290666987266 ) + log_normal_cdf( Feature_1 , 21.23356249999999 , 13.661016916987258 ) + log_normal_cdf( Feature_2 , 116.71625000000002 , 481.78443867089345 ) + log_normal_cdf( Feature_3 , 997.9731250000001 , 141138.1045367178 ) + log_normal_cdf( Feature_4 , 0.10367662500000004 , 0.0004908213596233952 ) + log_normal_cdf( Feature_5 , 0.14956893750000003 , 0.0033098107330101125 ) + log_normal_cdf( Feature_6 , 0.16609156250000007 , 0.006376279290447614 ) + log_normal_cdf( Feature_7 , 0.09101468749999998 , 0.0014959487134163644 ) + log_normal_cdf( Feature_8 , 0.19494124999999993 , 0.0011068424419515208 ) + log_normal_cdf( Feature_9 , 0.06299824999999996 , 0.0003820868554515203 ) + log_normal_cdf( Feature_10 , 0.6418068749999999 , 0.13361123090874846 ) + log_normal_cdf( Feature_11 , 1.23094 , 0.26814431291851415 ) + log_normal_cdf( Feature_12 , 4.582681250000002 , 7.555591000541953 ) + log_normal_cdf( Feature_13 , 77.180875 , 4430.131334467768 ) + log_normal_cdf( Feature_14 , 0.0068303437500000005 , 0.00032786161255210614 ) + log_normal_cdf( Feature_15 , 0.033086856250000005 , 0.000631186485949606 ) + log_normal_cdf( Feature_16 , 0.042250062500000005 , 0.0007572476641351138 ) + log_normal_cdf( Feature_17 , 0.015666206250000002 , 0.00035251303480273116 ) + log_normal_cdf( Feature_18 , 0.0213653875 , 0.0004372861375138639 ) + log_normal_cdf( Feature_19 , 0.0041392562500000025 , 0.00032536593755460615 ) + log_normal_cdf( Feature_20 , 21.339374999999993 , 17.606827342768515 ) + log_normal_cdf( Feature_21 , 28.707562499999995 , 27.686516166987257 ) + log_normal_cdf( Feature_22 , 143.08187499999994 , 844.9460617177685 ) + log_normal_cdf( Feature_23 , 1445.1737500000002 , 356014.1008824211 ) + log_normal_cdf( Feature_24 , 0.14505743749999986 , 0.0008228784400726135 ) + log_normal_cdf( Feature_25 , 0.37679406249999975 , 0.027335907006385118 ) + log_normal_cdf( Feature_26 , 0.44977674999999967 , 0.0331167763679515 ) + log_normal_cdf( Feature_27 , 0.18633093750000013 , 0.002389128377010113 ) + log_normal_cdf( Feature_28 , 0.32580749999999986 , 0.0061781942122640186 ) + log_normal_cdf( Feature_29 , 0.09126924999999997 , 0.0007273887492015202 ),
			-0.43332206261113054 + log_normal_cdf( Feature_0 , 12.145386440677964 , 3.1662389679554206 ) + log_normal_cdf( Feature_1 , 17.84881355932203 , 15.28363702490457 ) + log_normal_cdf( Feature_2 , 78.0729152542372 , 139.68415501858448 ) + log_normal_cdf( Feature_3 , 462.7613559322033 , 17868.228997610935 ) + log_normal_cdf( Feature_4 , 0.09248705084745759 , 0.0004965189580368584 ) + log_normal_cdf( Feature_5 , 0.07992647457627115 , 0.0013939530746447297 ) + log_normal_cdf( Feature_6 , 0.04604985999999998 , 0.0023189379977747223 ) + log_normal_cdf( Feature_7 , 0.025466481355932213 , 0.0005646562314924864 ) + log_normal_cdf( Feature_8 , 0.1743464406779661 , 0.0009375306944045692 ) + log_normal_cdf( Feature_9 , 0.06290888135593216 , 0.00036460568751689297 ) + log_normal_cdf( Feature_10 , 0.284146779661017 , 0.013838492798397668 ) + log_normal_cdf( Feature_11 , 1.2095464406779655 , 0.2986627325927097 ) + log_normal_cdf( Feature_12 , 1.9954552542372879 , 0.628633192238788 ) + log_normal_cdf( Feature_13 , 21.19121355932202 , 81.83924253948085 ) + log_normal_cdf( Feature_14 , 0.007178345762711861 , 0.00033062966402497686 ) + log_normal_cdf( Feature_15 , 0.021489715254237294 , 0.0006030054075481944 ) + log_normal_cdf( Feature_16 , 0.026439496949152534 , 0.0015437219991494353 ) + log_normal_cdf( Feature_17 , 0.00996893220338983 , 0.00035625749093993233 ) + log_normal_cdf( Feature_18 , 0.020641725423728836 , 0.0003721119454555773 ) + log_normal_cdf( Feature_19 , 0.0036877969491525436 , 0.0003309159663044177 ) + log_normal_cdf( Feature_20 , 13.378247457627124 , 3.9589654323277315 ) + log_normal_cdf( Feature_21 , 23.397932203389832 , 29.185687038119188 ) + log_normal_cdf( Feature_22 , 86.93901694915259 , 185.38043068649608 ) + log_normal_cdf( Feature_23 , 559.3738983050844 , 26837.02780967645 ) + log_normal_cdf( Feature_24 , 0.12465203389830506 , 0.0007012693792077864 ) + log_normal_cdf( Feature_25 , 0.18110396610169477 , 0.008058552566597618 ) + log_normal_cdf( Feature_26 , 0.16549405084745772 , 0.020156854994070727 ) + log_normal_cdf( Feature_27 , 0.07397993559322037 , 0.0015577341352217375 ) + log_normal_cdf( Feature_28 , 0.27025220338983036 , 0.002027734973404855 ) + log_normal_cdf( Feature_29 , 0.07950433898305088 , 0.000501827185534704 ) 
		};

		tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
