// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_FourClass_10.exe ml2cpp-demo_GaussianNB_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lLogLikelihoodTable = tTable();

		lLogLikelihoodTable["Score"] = {
			-1.491654876777717 + log_normal_cdf( Feature_0 , 0.12197232402085767 , 1.5553353291646597 ) + log_normal_cdf( Feature_1 , -0.2042090641433511 , 1.2980326196044893 ) + log_normal_cdf( Feature_2 , -0.17866802296600057 , 1.119534683590659 ) + log_normal_cdf( Feature_3 , -0.33848916280925834 , 0.807413707514524 ) + log_normal_cdf( Feature_4 , 0.692046433348698 , 0.8231148856087814 ) + log_normal_cdf( Feature_5 , -0.2328895438714148 , 0.2873090716734153 ) + log_normal_cdf( Feature_6 , 0.14890501454364152 , 0.28978399250919723 ) + log_normal_cdf( Feature_7 , 0.3442614656998575 , 1.9627740217881728 ) + log_normal_cdf( Feature_8 , 0.48106253993680564 , 1.150880748340327 ) + log_normal_cdf( Feature_9 , 0.21072572298483708 , 1.1886192914192353 ),
			-1.3862943611198906 + log_normal_cdf( Feature_0 , -0.05580445711365931 , 0.7441480169661928 ) + log_normal_cdf( Feature_1 , 1.1164241563456594 , 1.0691970510541402 ) + log_normal_cdf( Feature_2 , 1.232091266694883 , 2.139795924363826 ) + log_normal_cdf( Feature_3 , 2.8562011764091926 , 2.83257632656276 ) + log_normal_cdf( Feature_4 , -0.1946777354077039 , 2.893599168042484 ) + log_normal_cdf( Feature_5 , -0.30885979017841814 , 0.8919705820140024 ) + log_normal_cdf( Feature_6 , -1.2090009093244745 , 0.6860269502139601 ) + log_normal_cdf( Feature_7 , 1.2254337694197592 , 1.1330815914976922 ) + log_normal_cdf( Feature_8 , -0.2168859340616714 , 1.121140542791448 ) + log_normal_cdf( Feature_9 , 0.046430005146285355 , 0.8138360388374362 ),
			-1.3862943611198906 + log_normal_cdf( Feature_0 , 0.040527414301684696 , 0.8990561717501684 ) + log_normal_cdf( Feature_1 , -0.20169636688948053 , 2.1804307785140757 ) + log_normal_cdf( Feature_2 , -1.065660222353177 , 1.3006511285278701 ) + log_normal_cdf( Feature_3 , -0.9339519751932575 , 6.273764618376192 ) + log_normal_cdf( Feature_4 , -0.9273853948833596 , 1.542269805220253 ) + log_normal_cdf( Feature_5 , 0.18075085383747674 , 1.3463003486072516 ) + log_normal_cdf( Feature_6 , 0.3367308034182364 , 1.1676050353285106 ) + log_normal_cdf( Feature_7 , -0.04097908155884643 , 3.905404516616854 ) + log_normal_cdf( Feature_8 , 0.26965800608399576 , 0.48568799956621594 ) + log_normal_cdf( Feature_9 , 0.14187498063568335 , 0.9414004152308103 ),
			-1.2909841813155656 + log_normal_cdf( Feature_0 , -0.10010140605357654 , 0.6960136795512221 ) + log_normal_cdf( Feature_1 , 1.5726847768670615 , 0.7092293451100524 ) + log_normal_cdf( Feature_2 , 0.1505046581680554 , 1.6429529379426115 ) + log_normal_cdf( Feature_3 , 1.3330171535218418 , 2.9408593057393206 ) + log_normal_cdf( Feature_4 , -1.120734549744089 , 0.6691310328199525 ) + log_normal_cdf( Feature_5 , 0.15247885409781847 , 0.8747316882183717 ) + log_normal_cdf( Feature_6 , -0.41282510179714293 , 0.5416044528896263 ) + log_normal_cdf( Feature_7 , -0.824909406091562 , 1.0661785214754689 ) + log_normal_cdf( Feature_8 , -0.3780460568899708 , 1.9560672132251689 ) + log_normal_cdf( Feature_9 , 0.07485010923253889 , 0.8328297595291985 ) 
		};

		tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
