// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB
// Dataset : BinaryClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_BinaryClass_10.exe ml2cpp-demo_GaussianNB_BinaryClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lLogLikelihoodTable = tTable();

		lLogLikelihoodTable["Score"] = {
			-0.6931471805599453 + log_normal_cdf( Feature_0 , 0.8736540997238669 , 0.5107192898924603 ) + log_normal_cdf( Feature_1 , 0.22417823322532193 , 0.8155480583254483 ) + log_normal_cdf( Feature_2 , 0.05238040173285245 , 0.9001431357527093 ) + log_normal_cdf( Feature_3 , 0.008194292112152635 , 1.3319115733414975 ) + log_normal_cdf( Feature_4 , 0.04244853351408695 , 1.3138267788970095 ) + log_normal_cdf( Feature_5 , -0.011775929294600088 , 1.735183753981251 ) + log_normal_cdf( Feature_6 , 0.3850522853640051 , 0.8739503227600202 ) + log_normal_cdf( Feature_7 , 0.34626546901416927 , 0.05716036876573926 ) + log_normal_cdf( Feature_8 , -0.11404947981156924 , 0.9580831309538496 ) + log_normal_cdf( Feature_9 , -0.8981761455859457 , 0.3094017028245138 ),
			-0.6931471805599453 + log_normal_cdf( Feature_0 , -0.7499956892475977 , 1.1890156830364773 ) + log_normal_cdf( Feature_1 , 0.12987104211834458 , 0.9502958003050084 ) + log_normal_cdf( Feature_2 , 0.03038729836521653 , 1.407351058585931 ) + log_normal_cdf( Feature_3 , 0.2530186440047904 , 0.9675698015595363 ) + log_normal_cdf( Feature_4 , -0.16156474295374862 , 1.1277385426461355 ) + log_normal_cdf( Feature_5 , -0.08608225044561162 , 2.0608553480000658 ) + log_normal_cdf( Feature_6 , -0.0030163281297424945 , 0.9462666331870782 ) + log_normal_cdf( Feature_7 , -0.3021662755488199 , 0.18310380942558865 ) + log_normal_cdf( Feature_8 , -0.0014101482567108082 , 1.302351427232641 ) + log_normal_cdf( Feature_9 , 0.7930769614818811 , 1.2593913605868818 ) 
		};

		tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_10.csv");
	return 0;
}
