// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LGBMClassifier
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LGBMClassifier_BreastCancer.exe ml2cpp-demo_LGBMClassifier_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace LGBM_Tree_0_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.5354058820751393 }} ,
				{ 6 ,  {0.5354058820751393 }} ,
				{ 9 ,  {0.6535482271280002 }} ,
				{ 14 ,  {0.46961403722534256 }} ,
				{ 15 ,  {0.46961403722534256 }} ,
				{ 16 ,  {0.6889201867246652 }} ,
				{ 17 ,  {0.677954879249699 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_0 <= 15.475000000000003 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_1 <= 24.355000000000004 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_0 <= 19.185000000000006 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_0
	

	namespace LGBM_Tree_0_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.07207546120951412 }} ,
				{ 6 ,  {-0.07100347765468033 }} ,
				{ 9 ,  {0.04018284481296092 }} ,
				{ 15 ,  {-0.12996883510683102 }} ,
				{ 17 ,  {0.06390352547532467 }} ,
				{ 28 ,  {-0.12996883510683097 }} ,
				{ 29 ,  {-0.12996883510683102 }} ,
				{ 33 ,  {0.07558108215614001 }} ,
				{ 64 ,  {0.07510590061677179 }} ,
				{ 65 ,  {0.07531369139275672 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_23 <= 896.9500000000002 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_28 <= 0.33055000000000007 ) ? ( ( ( Feature_5 <= 0.11675 ) ? ( ( ( Feature_1 <= 22.645000000000003 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_0 <= 19.540000000000003 ) ? ( ( ( Feature_0 <= 18.235000000000003 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_1
	

	namespace LGBM_Tree_0_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.0672091988345742 }} ,
				{ 6 ,  {-0.06625954772521767 }} ,
				{ 7 ,  {-0.12022246377998394 }} ,
				{ 9 ,  {0.038688015662857955 }} ,
				{ 16 ,  {0.06181830875156677 }} ,
				{ 35 ,  {0.07376222825488356 }} ,
				{ 69 ,  {0.07348300977852566 }} ,
				{ 137 ,  {0.07345179724796454 }} ,
				{ 273 ,  {0.07328778634908635 }} ,
				{ 545 ,  {0.07328936666650858 }} ,
				{ 1088 ,  {0.07328936666650857 }} ,
				{ 1089 ,  {0.07328936666650858 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_23 <= 896.9500000000002 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_19 <= 0.0015535000000000002 ) ? ( 16 ) : ( ( ( Feature_5 <= 0.12075000000000001 ) ? ( ( ( Feature_28 <= 0.32245000000000007 ) ? ( ( ( Feature_1 <= 22.415000000000003 ) ? ( ( ( Feature_5 <= 0.10570000000000002 ) ? ( ( ( Feature_0 <= 12.905000000000003 ) ? ( ( ( Feature_0 <= 12.260000000000002 ) ? ( 1088 ) : ( 1089 ) ) ) : ( 545 ) ) ) : ( 273 ) ) ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_2
	

	namespace LGBM_Tree_0_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.06377889783106465 }} ,
				{ 6 ,  {-0.062043494897927556 }} ,
				{ 9 ,  {0.027400374328027034 }} ,
				{ 15 ,  {-0.11226788386358476 }} ,
				{ 17 ,  {0.049160490322085915 }} ,
				{ 29 ,  {-0.11226788386358476 }} ,
				{ 33 ,  {0.07403722685232066 }} ,
				{ 56 ,  {-0.11226788386358462 }} ,
				{ 57 ,  {-0.11226788386358476 }} ,
				{ 65 ,  {0.07252337908464461 }} ,
				{ 129 ,  {0.07185517738831212 }} ,
				{ 257 ,  {0.07180951745022449 }} ,
				{ 512 ,  {0.0717811694600263 }} ,
				{ 1027 ,  {0.07163488435117137 }} ,
				{ 2052 ,  {0.07164354982202076 }} ,
				{ 2053 ,  {0.07164257461988083 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_0 <= 15.475000000000003 ) ? ( ( ( Feature_27 <= 0.1223 ) ? ( ( ( Feature_11 <= 2.0975000000000006 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_0 <= 14.045000000000002 ) ? ( ( ( Feature_21 <= 29.470000000000002 ) ? ( ( ( Feature_28 <= 0.3219 ) ? ( ( ( Feature_19 <= 0.0017905000000000002 ) ? ( 512 ) : ( ( ( Feature_5 <= 0.10685000000000001 ) ? ( ( ( Feature_1 <= 19.790000000000003 ) ? ( 2052 ) : ( 2053 ) ) ) : ( 1027 ) ) ) ) ) : ( 257 ) ) ) : ( 129 ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_0 <= 20.145000000000003 ) ? ( ( ( Feature_0 <= 18.980000000000004 ) ? ( ( ( Feature_0 <= 16.150000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_3
	

	namespace LGBM_Tree_0_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.05983718015333134 }} ,
				{ 6 ,  {-0.059325711020958585 }} ,
				{ 9 ,  {0.034960545003972915 }} ,
				{ 14 ,  {-0.10705498628918952 }} ,
				{ 16 ,  {0.05833468381156039 }} ,
				{ 31 ,  {-0.10565532685824766 }} ,
				{ 35 ,  {0.07156932820328817 }} ,
				{ 60 ,  {-0.10565532685824758 }} ,
				{ 61 ,  {-0.10565532685824766 }} ,
				{ 69 ,  {0.07048745472474918 }} ,
				{ 137 ,  {0.07033125566359116 }} ,
				{ 273 ,  {0.07025887096284902 }} ,
				{ 545 ,  {0.07013740187078958 }} ,
				{ 1089 ,  {0.070139809494837 }} ,
				{ 2176 ,  {0.07014583136536337 }} ,
				{ 4355 ,  {0.0701466517805533 }} ,
				{ 8709 ,  {0.0701471886217326 }} ,
				{ 17416 ,  {0.07014717179388522 }} ,
				{ 17417 ,  {0.07014717179388523 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_23 <= 896.9500000000002 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_19 <= 0.0015535000000000002 ) ? ( 16 ) : ( ( ( Feature_27 <= 0.12170000000000002 ) ? ( ( ( Feature_11 <= 1.9615000000000002 ) ? ( ( ( Feature_28 <= 0.3219 ) ? ( ( ( Feature_21 <= 28.895000000000007 ) ? ( ( ( Feature_5 <= 0.10805000000000002 ) ? ( ( ( Feature_20 <= 15.075000000000001 ) ? ( ( ( Feature_19 <= 0.0020995000000000002 ) ? ( 2176 ) : ( ( ( Feature_11 <= 1.3955000000000002 ) ? ( ( ( Feature_1 <= 17.100000000000005 ) ? ( ( ( Feature_0 <= 11.475000000000003 ) ? ( 17416 ) : ( 17417 ) ) ) : ( 8709 ) ) ) : ( 4355 ) ) ) ) ) : ( 1089 ) ) ) : ( 545 ) ) ) : ( 273 ) ) ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_22 <= 112.80000000000001 ) ? ( 6 ) : ( ( ( Feature_13 <= 39.96500000000001 ) ? ( 14 ) : ( ( ( Feature_0 <= 19.570000000000004 ) ? ( ( ( Feature_0 <= 17.325000000000006 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_4
	

	namespace LGBM_Tree_0_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.057093641268548836 }} ,
				{ 6 ,  {-0.054514773150041565 }} ,
				{ 9 ,  {0.0237959366124585 }} ,
				{ 14 ,  {-0.10040652106230677 }} ,
				{ 16 ,  {0.04607649602964367 }} ,
				{ 30 ,  {-0.10003650815176111 }} ,
				{ 35 ,  {0.07165446931616039 }} ,
				{ 62 ,  {-0.100075024406625 }} ,
				{ 63 ,  {-0.10007502440662502 }} ,
				{ 69 ,  {0.06994850745370089 }} ,
				{ 136 ,  {0.06910460991759856 }} ,
				{ 275 ,  {0.06902195908963044 }} ,
				{ 549 ,  {0.06892966886226143 }} ,
				{ 1097 ,  {0.06886299744545456 }} ,
				{ 2193 ,  {0.06877714238114228 }} ,
				{ 4385 ,  {0.06878111647323673 }} ,
				{ 8768 ,  {0.06878139922501263 }} ,
				{ 17538 ,  {0.06878235826368721 }} ,
				{ 35078 ,  {0.06878233349202692 }} ,
				{ 35079 ,  {0.06878233670922308 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_0 <= 15.475000000000003 ) ? ( ( ( Feature_27 <= 0.1223 ) ? ( ( ( Feature_28 <= 0.21285000000000004 ) ? ( 16 ) : ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_3 <= 603.1500000000001 ) ? ( ( ( Feature_19 <= 0.0016715000000000002 ) ? ( 136 ) : ( ( ( Feature_21 <= 29.470000000000002 ) ? ( ( ( Feature_28 <= 0.3212500000000001 ) ? ( ( ( Feature_14 <= 0.010440000000000001 ) ? ( ( ( Feature_5 <= 0.09956000000000002 ) ? ( ( ( Feature_21 <= 26.435000000000006 ) ? ( ( ( Feature_19 <= 0.0021375 ) ? ( 8768 ) : ( ( ( Feature_28 <= 0.25455000000000005 ) ? ( 17538 ) : ( ( ( Feature_1 <= 15.705000000000002 ) ? ( 35078 ) : ( 35079 ) ) ) ) ) ) ) : ( 4385 ) ) ) : ( 2193 ) ) ) : ( 1097 ) ) ) : ( 549 ) ) ) : ( 275 ) ) ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_2 <= 101.45000000000002 ) ? ( 14 ) : ( ( ( Feature_10 <= 0.44610000000000005 ) ? ( 30 ) : ( ( ( Feature_0 <= 20.515000000000004 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_5
	

	namespace LGBM_Tree_0_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.053796524411075956 }} ,
				{ 6 ,  {-0.05143713059358743 }} ,
				{ 9 ,  {0.02284381133857261 }} ,
				{ 14 ,  {-0.09559182632644225 }} ,
				{ 17 ,  {0.04400760323033391 }} ,
				{ 30 ,  {-0.09527299455204818 }} ,
				{ 33 ,  {0.07011698406671166 }} ,
				{ 62 ,  {-0.09530662861783923 }} ,
				{ 63 ,  {-0.09530636736120551 }} ,
				{ 64 ,  {0.0687006211794552 }} ,
				{ 130 ,  {0.06786042315139046 }} ,
				{ 262 ,  {0.06772885119586226 }} ,
				{ 527 ,  {0.0676952119543707 }} ,
				{ 1053 ,  {0.06761578020994406 }} ,
				{ 2105 ,  {0.06751626171158175 }} ,
				{ 4209 ,  {0.0675303396977818 }} ,
				{ 8417 ,  {0.06753201253544289 }} ,
				{ 16833 ,  {0.06753279663440243 }} ,
				{ 33664 ,  {0.06753369156426256 }} ,
				{ 33665 ,  {0.06753391294628687 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_0 <= 15.475000000000003 ) ? ( ( ( Feature_27 <= 0.1223 ) ? ( ( ( Feature_11 <= 2.0975000000000006 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_18 <= 0.012835000000000001 ) ? ( 64 ) : ( ( ( Feature_19 <= 0.0016575000000000003 ) ? ( 130 ) : ( ( ( Feature_28 <= 0.22560000000000002 ) ? ( 262 ) : ( ( ( Feature_28 <= 0.32795 ) ? ( ( ( Feature_21 <= 28.695000000000004 ) ? ( ( ( Feature_22 <= 95.915 ) ? ( ( ( Feature_4 <= 0.10380000000000002 ) ? ( ( ( Feature_11 <= 1.3570000000000004 ) ? ( ( ( Feature_24 <= 0.13190000000000004 ) ? ( ( ( Feature_27 <= 0.05652000000000001 ) ? ( 33664 ) : ( 33665 ) ) ) : ( 16833 ) ) ) : ( 8417 ) ) ) : ( 4209 ) ) ) : ( 2105 ) ) ) : ( 1053 ) ) ) : ( 527 ) ) ) ) ) ) ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_2 <= 101.45000000000002 ) ? ( 14 ) : ( ( ( Feature_13 <= 50.40500000000001 ) ? ( 30 ) : ( ( ( Feature_12 <= 4.049 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_6
	

	namespace LGBM_Tree_0_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.033269228448339856 }} ,
				{ 6 ,  {-0.04945024259723097 }} ,
				{ 8 ,  {0.03433303869313951 }} ,
				{ 14 ,  {-0.0926898401591884 }} ,
				{ 19 ,  {0.05400727961079754 }} ,
				{ 30 ,  {-0.09116170108749538 }} ,
				{ 37 ,  {0.07364900845413833 }} ,
				{ 62 ,  {-0.09118522049223562 }} ,
				{ 73 ,  {0.06762249280497175 }} ,
				{ 126 ,  {-0.09118791961275645 }} ,
				{ 145 ,  {0.06730702940615 }} ,
				{ 254 ,  {-0.09118775945917888 }} ,
				{ 255 ,  {-0.09118776155417274 }} ,
				{ 289 ,  {0.06679765283148213 }} ,
				{ 576 ,  {0.06653857069876114 }} ,
				{ 1154 ,  {0.0665338957902683 }} ,
				{ 2311 ,  {0.06646273760038542 }} ,
				{ 4621 ,  {0.06638196799884935 }} ,
				{ 9241 ,  {0.06638686053270523 }} ,
				{ 18480 ,  {0.06638834601763427 }} ,
				{ 18481 ,  {0.06638886447136857 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_13 <= 35.18500000000001 ) ? ( ( ( Feature_9 <= 0.05551000000000001 ) ? ( 8 ) : ( ( ( Feature_1 <= 24.355000000000004 ) ? ( ( ( Feature_20 <= 15.995000000000003 ) ? ( ( ( Feature_27 <= 0.11065000000000001 ) ? ( ( ( Feature_13 <= 28.310000000000006 ) ? ( ( ( Feature_11 <= 1.8545000000000003 ) ? ( ( ( Feature_28 <= 0.22560000000000002 ) ? ( 576 ) : ( ( ( Feature_19 <= 0.0018970000000000002 ) ? ( 1154 ) : ( ( ( Feature_28 <= 0.31540000000000007 ) ? ( ( ( Feature_23 <= 581.7500000000001 ) ? ( ( ( Feature_25 <= 0.18685000000000002 ) ? ( ( ( Feature_23 <= 463.00000000000006 ) ? ( 18480 ) : ( 18481 ) ) ) : ( 9241 ) ) ) : ( 4621 ) ) ) : ( 2311 ) ) ) ) ) ) ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_22 <= 112.80000000000001 ) ? ( 6 ) : ( ( ( Feature_23 <= 1030.5000000000002 ) ? ( 14 ) : ( ( ( Feature_13 <= 52.41500000000001 ) ? ( 30 ) : ( ( ( Feature_0 <= 17.970000000000002 ) ? ( 62 ) : ( ( ( Feature_8 <= 0.17925000000000002 ) ? ( 126 ) : ( ( ( Feature_7 <= 0.10355000000000002 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_7
	

	namespace LGBM_Tree_0_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.05146487811580419 }} ,
				{ 6 ,  {-0.04575937853464512 }} ,
				{ 9 ,  {0.029249423045354956 }} ,
				{ 14 ,  {-0.0880494732101907 }} ,
				{ 17 ,  {0.05221687739174629 }} ,
				{ 30 ,  {-0.08755672434087935 }} ,
				{ 33 ,  {0.0680754326049349 }} ,
				{ 62 ,  {-0.087593214655873 }} ,
				{ 65 ,  {0.0659213036558656 }} ,
				{ 126 ,  {-0.08759921674351656 }} ,
				{ 128 ,  {0.06587073001970373 }} ,
				{ 254 ,  {-0.08759812543729652 }} ,
				{ 255 ,  {-0.08759809096156229 }} ,
				{ 258 ,  {0.06552056229024322 }} ,
				{ 519 ,  {0.06550301555779227 }} ,
				{ 1036 ,  {0.06543102201001026 }} ,
				{ 2075 ,  {0.06531081326734471 }} ,
				{ 4149 ,  {0.06532968523484121 }} ,
				{ 8297 ,  {0.0653316325795121 }} ,
				{ 16592 ,  {0.06533458947542269 }} ,
				{ 16593 ,  {0.06533599155660606 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_23 <= 896.9500000000002 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_28 <= 0.33055000000000007 ) ? ( ( ( Feature_27 <= 0.12035000000000001 ) ? ( ( ( Feature_11 <= 1.9230000000000003 ) ? ( ( ( Feature_19 <= 0.0016280000000000003 ) ? ( 128 ) : ( ( ( Feature_28 <= 0.22495 ) ? ( 258 ) : ( ( ( Feature_1 <= 21.535000000000004 ) ? ( ( ( Feature_9 <= 0.05709000000000001 ) ? ( 1036 ) : ( ( ( Feature_22 <= 92.08000000000003 ) ? ( ( ( Feature_10 <= 0.3111500000000001 ) ? ( ( ( Feature_26 <= 0.18070000000000003 ) ? ( ( ( Feature_8 <= 0.171 ) ? ( 16592 ) : ( 16593 ) ) ) : ( 8297 ) ) ) : ( 4149 ) ) ) : ( 2075 ) ) ) ) ) : ( 519 ) ) ) ) ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 822.8500000000001 ) ? ( 6 ) : ( ( ( Feature_2 <= 101.45000000000002 ) ? ( 14 ) : ( ( ( Feature_22 <= 134.20000000000002 ) ? ( 30 ) : ( ( ( Feature_24 <= 0.12665 ) ? ( 62 ) : ( ( ( Feature_12 <= 4.0950000000000015 ) ? ( 126 ) : ( ( ( Feature_0 <= 19.570000000000004 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_8
	

	namespace LGBM_Tree_0_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.005374622411092199 }} ,
				{ 6 ,  {0.001969267582772399 }} ,
				{ 9 ,  {0.03220477417188651 }} ,
				{ 14 ,  {-0.060648232519325544 }} ,
				{ 17 ,  {0.06951435811978941 }} ,
				{ 30 ,  {-0.09710783307242843 }} ,
				{ 33 ,  {0.06494486416064015 }} ,
				{ 62 ,  {-0.0873061502650535 }} ,
				{ 64 ,  {0.0648224199765515 }} ,
				{ 126 ,  {-0.08441733908969956 }} ,
				{ 131 ,  {0.06460029235440982 }} ,
				{ 254 ,  {-0.08444511336113734 }} ,
				{ 260 ,  {0.0645515417947529 }} ,
				{ 510 ,  {-0.08444479419258637 }} ,
				{ 511 ,  {-0.08444470936964386 }} ,
				{ 522 ,  {0.0644650488094486 }} ,
				{ 1047 ,  {0.06440923915859482 }} ,
				{ 2093 ,  {0.06433831670853953 }} ,
				{ 4184 ,  {0.06438814581793295 }} ,
				{ 8370 ,  {0.0643656040168256 }} ,
				{ 8371 ,  {0.06436216398375036 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_7 <= 0.04840500000000001 ) ? ( ( ( Feature_20 <= 16.455000000000002 ) ? ( ( ( Feature_13 <= 32.06000000000001 ) ? ( ( ( Feature_27 <= 0.11325000000000002 ) ? ( ( ( Feature_11 <= 1.9615000000000002 ) ? ( ( ( Feature_19 <= 0.0016280000000000003 ) ? ( 64 ) : ( ( ( Feature_28 <= 0.3204000000000001 ) ? ( ( ( Feature_28 <= 0.22495 ) ? ( 260 ) : ( ( ( Feature_4 <= 0.081305 ) ? ( 522 ) : ( ( ( Feature_11 <= 1.4335000000000002 ) ? ( ( ( Feature_22 <= 91.96000000000002 ) ? ( ( ( Feature_18 <= 0.017140000000000002 ) ? ( 4184 ) : ( ( ( Feature_12 <= 1.7250000000000003 ) ? ( 8370 ) : ( 8371 ) ) ) ) ) : ( 2093 ) ) ) : ( 1047 ) ) ) ) ) ) ) : ( 131 ) ) ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_20 <= 16.155000000000005 ) ? ( 6 ) : ( ( ( Feature_21 <= 22.560000000000002 ) ? ( 14 ) : ( ( ( Feature_27 <= 0.15270000000000003 ) ? ( 30 ) : ( ( ( Feature_2 <= 102.75000000000001 ) ? ( 62 ) : ( ( ( Feature_22 <= 142.70000000000002 ) ? ( 126 ) : ( ( ( Feature_13 <= 80.57000000000001 ) ? ( 254 ) : ( ( ( Feature_7 <= 0.11325000000000002 ) ? ( 510 ) : ( 511 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_9
	

	namespace LGBM_Tree_0_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.0393679513344459 }} ,
				{ 6 ,  {-0.0454578920233277 }} ,
				{ 9 ,  {0.026358337403841872 }} ,
				{ 14 ,  {-0.09568010504495317 }} ,
				{ 17 ,  {0.06723963174343398 }} ,
				{ 30 ,  {-0.07245684109969945 }} ,
				{ 32 ,  {0.06405631413155058 }} ,
				{ 62 ,  {-0.0828217623371546 }} ,
				{ 67 ,  {0.06400536623568658 }} ,
				{ 126 ,  {-0.08150472837743505 }} ,
				{ 127 ,  {-0.08165326986937366 }} ,
				{ 133 ,  {0.06379063571626149 }} ,
				{ 528 ,  {0.06353797989537943 }} ,
				{ 529 ,  {0.0636712655915594 }} ,
				{ 531 ,  {0.06356292071597923 }} ,
				{ 2120 ,  {0.0634826695402461 }} ,
				{ 2121 ,  {0.06355071711000258 }} ,
				{ 2122 ,  {0.06344796262017471 }} ,
				{ 2123 ,  {0.06348383481214101 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_22 <= 112.80000000000001 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_27 <= 0.11325000000000002 ) ? ( ( ( Feature_19 <= 0.0016040000000000002 ) ? ( 32 ) : ( ( ( Feature_11 <= 1.9615000000000002 ) ? ( ( ( Feature_27 <= 0.09809500000000002 ) ? ( ( ( Feature_29 <= 0.07321500000000002 ) ? ( ( ( Feature_29 <= 0.07042000000000002 ) ? ( 528 ) : ( 529 ) ) ) : ( ( ( Feature_28 <= 0.3072500000000001 ) ? ( ( ( Feature_13 <= 17.030000000000005 ) ? ( ( ( Feature_25 <= 0.1847 ) ? ( 2120 ) : ( 2121 ) ) ) : ( ( ( Feature_4 <= 0.08856500000000002 ) ? ( 2122 ) : ( 2123 ) ) ) ) ) : ( 531 ) ) ) ) ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_21 <= 23.785000000000004 ) ? ( 6 ) : ( ( ( Feature_2 <= 94.53000000000002 ) ? ( 14 ) : ( ( ( Feature_1 <= 19.635 ) ? ( 30 ) : ( ( ( Feature_11 <= 0.9633000000000002 ) ? ( 62 ) : ( ( ( Feature_22 <= 143.65 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_10
	

	namespace LGBM_Tree_0_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.005527623361927883 }} ,
				{ 6 ,  {0.0027612443486659637 }} ,
				{ 9 ,  {0.03043009779386976 }} ,
				{ 14 ,  {-0.05638770571504177 }} ,
				{ 17 ,  {0.06824096673258005 }} ,
				{ 30 ,  {-0.09108950225513292 }} ,
				{ 33 ,  {0.06313725352886146 }} ,
				{ 62 ,  {-0.08149104780956185 }} ,
				{ 64 ,  {0.06303092460183274 }} ,
				{ 126 ,  {-0.07967261752413951 }} ,
				{ 131 ,  {0.06284319187995767 }} ,
				{ 254 ,  {-0.07912109521633842 }} ,
				{ 260 ,  {0.06280166575855377 }} ,
				{ 510 ,  {-0.07916321749743285 }} ,
				{ 511 ,  {-0.07917435689774611 }} ,
				{ 523 ,  {0.06274778990551215 }} ,
				{ 1044 ,  {0.06271782345592446 }} ,
				{ 2091 ,  {0.06263003717763244 }} ,
				{ 4180 ,  {0.06263812161837498 }} ,
				{ 8362 ,  {0.06263981701249621 }} ,
				{ 8363 ,  {0.06264168960243943 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_7 <= 0.04840500000000001 ) ? ( ( ( Feature_20 <= 16.455000000000002 ) ? ( ( ( Feature_13 <= 32.06000000000001 ) ? ( ( ( Feature_27 <= 0.11325000000000002 ) ? ( ( ( Feature_11 <= 1.9615000000000002 ) ? ( ( ( Feature_19 <= 0.0016280000000000003 ) ? ( 64 ) : ( ( ( Feature_28 <= 0.3204000000000001 ) ? ( ( ( Feature_28 <= 0.22495 ) ? ( 260 ) : ( ( ( Feature_1 <= 21.375000000000004 ) ? ( ( ( Feature_9 <= 0.05709000000000001 ) ? ( 1044 ) : ( ( ( Feature_7 <= 0.028670000000000005 ) ? ( ( ( Feature_29 <= 0.07809500000000001 ) ? ( 4180 ) : ( ( ( Feature_7 <= 0.019420000000000003 ) ? ( 8362 ) : ( 8363 ) ) ) ) ) : ( 2091 ) ) ) ) ) : ( 523 ) ) ) ) ) : ( 131 ) ) ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_20 <= 16.155000000000005 ) ? ( 6 ) : ( ( ( Feature_1 <= 17.230000000000004 ) ? ( 14 ) : ( ( ( Feature_27 <= 0.15270000000000003 ) ? ( 30 ) : ( ( ( Feature_20 <= 18.775000000000002 ) ? ( 62 ) : ( ( ( Feature_1 <= 19.950000000000006 ) ? ( 126 ) : ( ( ( Feature_13 <= 68.76 ) ? ( 254 ) : ( ( ( Feature_16 <= 0.04470000000000001 ) ? ( 510 ) : ( 511 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_11
	

	namespace LGBM_Tree_0_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.028504347586887274 }} ,
				{ 6 ,  {-0.04166347665722389 }} ,
				{ 8 ,  {0.027985265030355217 }} ,
				{ 14 ,  {-0.09059679060628395 }} ,
				{ 19 ,  {0.04757505576930681 }} ,
				{ 30 ,  {-0.06779490142022258 }} ,
				{ 37 ,  {0.07144347769634697 }} ,
				{ 63 ,  {-0.07801115534731529 }} ,
				{ 73 ,  {0.0637777430941253 }} ,
				{ 124 ,  {-0.07710353706133953 }} ,
				{ 125 ,  {-0.07690727203314893 }} ,
				{ 145 ,  {0.06296645206108141 }} ,
				{ 289 ,  {0.062128466843877156 }} ,
				{ 577 ,  {0.06203568400560299 }} ,
				{ 1153 ,  {0.06196685104977996 }} ,
				{ 2304 ,  {0.061943436581624746 }} ,
				{ 4610 ,  {0.06190962983218932 }} ,
				{ 9222 ,  {0.061870615328908356 }} ,
				{ 9223 ,  {0.061853147815578685 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_27 <= 0.14545000000000005 ) ? ( ( ( Feature_13 <= 35.18500000000001 ) ? ( ( ( Feature_9 <= 0.05551000000000001 ) ? ( 8 ) : ( ( ( Feature_21 <= 32.115 ) ? ( ( ( Feature_2 <= 94.06000000000002 ) ? ( ( ( Feature_12 <= 2.8585000000000007 ) ? ( ( ( Feature_27 <= 0.10975000000000001 ) ? ( ( ( Feature_11 <= 1.7690000000000003 ) ? ( ( ( Feature_7 <= 0.029305 ) ? ( ( ( Feature_28 <= 0.30335000000000006 ) ? ( ( ( Feature_21 <= 18.100000000000005 ) ? ( 2304 ) : ( ( ( Feature_13 <= 14.980000000000002 ) ? ( 4610 ) : ( ( ( Feature_23 <= 581.7500000000001 ) ? ( 9222 ) : ( 9223 ) ) ) ) ) ) ) : ( 1153 ) ) ) : ( 577 ) ) ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_21 <= 23.785000000000004 ) ? ( 6 ) : ( ( ( Feature_0 <= 14.415000000000001 ) ? ( 14 ) : ( ( ( Feature_27 <= 0.16135000000000002 ) ? ( 30 ) : ( ( ( Feature_14 <= 0.008039500000000002 ) ? ( ( ( Feature_21 <= 28.695000000000004 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_12
	

	namespace LGBM_Tree_0_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.04993436910341474 }} ,
				{ 6 ,  {-0.04610276844407545 }} ,
				{ 9 ,  {0.01726603135632427 }} ,
				{ 14 ,  {-0.08724946883046382 }} ,
				{ 17 ,  {0.04279612056905613 }} ,
				{ 30 ,  {-0.0769715546390497 }} ,
				{ 33 ,  {0.07088664010178851 }} ,
				{ 62 ,  {-0.0750427898869189 }} ,
				{ 65 ,  {0.06378856494814926 }} ,
				{ 126 ,  {-0.07486810829767145 }} ,
				{ 127 ,  {-0.07496354026128105 }} ,
				{ 128 ,  {0.06155004559716132 }} ,
				{ 259 ,  {0.06139024580640672 }} ,
				{ 517 ,  {0.06130494235330387 }} ,
				{ 2064 ,  {0.06129275423289651 }} ,
				{ 2065 ,  {0.06118079488742442 }} ,
				{ 2067 ,  {0.061104469699895164 }} ,
				{ 4132 ,  {0.061156517985571285 }} ,
				{ 4133 ,  {0.0611603265378906 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_22 <= 114.40000000000002 ) ? ( ( ( Feature_27 <= 0.14895000000000003 ) ? ( ( ( Feature_13 <= 32.85000000000001 ) ? ( ( ( Feature_1 <= 22.645000000000003 ) ? ( ( ( Feature_7 <= 0.04474000000000001 ) ? ( ( ( Feature_22 <= 101.15000000000002 ) ? ( ( ( Feature_9 <= 0.05724500000000001 ) ? ( 128 ) : ( ( ( Feature_11 <= 1.8000000000000003 ) ? ( ( ( Feature_28 <= 0.3204000000000001 ) ? ( ( ( Feature_29 <= 0.07754500000000002 ) ? ( ( ( Feature_18 <= 0.01889 ) ? ( 2064 ) : ( 2065 ) ) ) : ( ( ( Feature_7 <= 0.028110000000000003 ) ? ( ( ( Feature_28 <= 0.2608500000000001 ) ? ( 4132 ) : ( 4133 ) ) ) : ( 2067 ) ) ) ) ) : ( 517 ) ) ) : ( 259 ) ) ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_20 <= 18.225000000000005 ) ? ( 6 ) : ( ( ( Feature_27 <= 0.15270000000000003 ) ? ( 14 ) : ( ( ( Feature_1 <= 18.515000000000004 ) ? ( 30 ) : ( ( ( Feature_25 <= 0.35730000000000006 ) ? ( 62 ) : ( ( ( Feature_7 <= 0.09990500000000001 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_13
	

	namespace LGBM_Tree_0_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.0046917332243551395 }} ,
				{ 6 ,  {0.006356801600363823 }} ,
				{ 9 ,  {0.02867688591581395 }} ,
				{ 14 ,  {-0.04835471378659775 }} ,
				{ 17 ,  {0.06660844442240613 }} ,
				{ 30 ,  {-0.08280527048890843 }} ,
				{ 33 ,  {0.06117419521055774 }} ,
				{ 62 ,  {-0.06703591012945113 }} ,
				{ 64 ,  {0.06096904760468506 }} ,
				{ 127 ,  {-0.07777887615153498 }} ,
				{ 131 ,  {0.060679180725265784 }} ,
				{ 252 ,  {-0.07392509236477399 }} ,
				{ 253 ,  {-0.07311593168945973 }} ,
				{ 261 ,  {0.060627324170807365 }} ,
				{ 520 ,  {0.060605952531793045 }} ,
				{ 1042 ,  {0.06055693355092854 }} ,
				{ 2086 ,  {0.06047255678365235 }} ,
				{ 4175 ,  {0.0605070154173023 }} ,
				{ 8348 ,  {0.0604984140273397 }} ,
				{ 8349 ,  {0.060494252994296074 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_7 <= 0.04840500000000001 ) ? ( ( ( Feature_20 <= 16.455000000000002 ) ? ( ( ( Feature_13 <= 32.06000000000001 ) ? ( ( ( Feature_27 <= 0.11325000000000002 ) ? ( ( ( Feature_21 <= 30.890000000000004 ) ? ( ( ( Feature_9 <= 0.056545000000000005 ) ? ( 64 ) : ( ( ( Feature_11 <= 1.8000000000000003 ) ? ( ( ( Feature_28 <= 0.31970000000000004 ) ? ( ( ( Feature_28 <= 0.22990000000000002 ) ? ( 520 ) : ( ( ( Feature_19 <= 0.0020410000000000007 ) ? ( 1042 ) : ( ( ( Feature_28 <= 0.2528500000000001 ) ? ( 2086 ) : ( ( ( Feature_11 <= 1.2205000000000001 ) ? ( ( ( Feature_15 <= 0.014615000000000001 ) ? ( 8348 ) : ( 8349 ) ) ) : ( 4175 ) ) ) ) ) ) ) ) ) : ( 261 ) ) ) : ( 131 ) ) ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_23 <= 782.8500000000001 ) ? ( 6 ) : ( ( ( Feature_12 <= 2.5620000000000007 ) ? ( 14 ) : ( ( ( Feature_6 <= 0.12110000000000001 ) ? ( 30 ) : ( ( ( Feature_24 <= 0.13145000000000004 ) ? ( 62 ) : ( ( ( Feature_18 <= 0.02356 ) ? ( ( ( Feature_1 <= 20.450000000000003 ) ? ( 252 ) : ( 253 ) ) ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_14
	

	namespace LGBM_Tree_0_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-0.024613483613761856 }} ,
				{ 6 ,  {-0.018694914876303533 }} ,
				{ 9 ,  {0.020911531671680333 }} ,
				{ 15 ,  {-0.061314467379025864 }} ,
				{ 17 ,  {0.06601759672411622 }} ,
				{ 28 ,  {-0.08308274423104232 }} ,
				{ 33 ,  {0.06325573093436991 }} ,
				{ 58 ,  {-0.07367315319973992 }} ,
				{ 64 ,  {0.06069384397197049 }} ,
				{ 118 ,  {-0.0727838997416269 }} ,
				{ 131 ,  {0.06038275652774429 }} ,
				{ 238 ,  {-0.07148094659382125 }} ,
				{ 239 ,  {-0.0715940505368357 }} ,
				{ 261 ,  {0.0602352153803343 }} ,
				{ 520 ,  {0.05998526966396385 }} ,
				{ 1043 ,  {0.05995396686654519 }} ,
				{ 2084 ,  {0.05993492113541391 }} ,
				{ 4171 ,  {0.05985098887162499 }} ,
				{ 8341 ,  {0.05987734757958534 }} ,
				{ 16680 ,  {0.05988248590415236 }} ,
				{ 16681 ,  {0.059881010964843356 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			int lNodeIndex = ( ( Feature_22 <= 112.80000000000001 ) ? ( ( ( Feature_27 <= 0.1358 ) ? ( ( ( Feature_11 <= 2.0975000000000006 ) ? ( ( ( Feature_13 <= 32.06000000000001 ) ? ( ( ( Feature_27 <= 0.11065000000000001 ) ? ( ( ( Feature_9 <= 0.056255000000000006 ) ? ( 64 ) : ( ( ( Feature_27 <= 0.09809500000000002 ) ? ( ( ( Feature_21 <= 28.895000000000007 ) ? ( ( ( Feature_28 <= 0.22990000000000002 ) ? ( 520 ) : ( ( ( Feature_28 <= 0.3168500000000001 ) ? ( ( ( Feature_19 <= 0.0020410000000000007 ) ? ( 2084 ) : ( ( ( Feature_13 <= 22.710000000000004 ) ? ( ( ( Feature_11 <= 1.2355000000000003 ) ? ( ( ( Feature_26 <= 0.1223 ) ? ( 16680 ) : ( 16681 ) ) ) : ( 8341 ) ) ) : ( 4171 ) ) ) ) ) : ( 1043 ) ) ) ) ) : ( 261 ) ) ) : ( 131 ) ) ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_22 <= 117.80000000000003 ) ? ( 6 ) : ( ( ( Feature_11 <= 1.6300000000000001 ) ? ( ( ( Feature_27 <= 0.15270000000000003 ) ? ( 28 ) : ( ( ( Feature_21 <= 24.195000000000004 ) ? ( 58 ) : ( ( ( Feature_13 <= 50.40500000000001 ) ? ( 118 ) : ( ( ( Feature_18 <= 0.015765000000000005 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				1.0 - lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		std::vector<tTable> lTreeScores = { 
			LGBM_Tree_0_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29),
			LGBM_Tree_0_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29)
		};

		tTable lAggregatedTable = aggregate_lgb_scores(lTreeScores, {"Score"});


		tTable lTable;

		lTable["Score"] = { 
			std::any(),
			std::any() 
		} ;
		lTable["Proba"] = { 
			1.0 - logistic(lAggregatedTable["Score"][1]),
			logistic(lAggregatedTable["Score"][1]) 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
