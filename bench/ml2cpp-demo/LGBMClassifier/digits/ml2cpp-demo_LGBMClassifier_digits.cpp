// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LGBMClassifier
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LGBMClassifier_digits.exe ml2cpp-demo_LGBMClassifier_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace LGBM_Tree_0_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-2.370715088873096 }} ,
				{ 8 ,  {-2.2610076720284464 }} ,
				{ 13 ,  {-2.3158613804507713 }} ,
				{ 14 ,  {-2.370715088873096 }} ,
				{ 15 ,  {-2.370715088873096 }} ,
				{ 18 ,  {-2.125930415038471 }} ,
				{ 19 ,  {-2.08273311965589 }} ,
				{ 24 ,  {-2.370715088873096 }} ,
				{ 25 ,  {-2.370715088873096 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 8 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_0
	

	namespace LGBM_Tree_1_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-2.0713131492151926 }} ,
				{ 12 ,  {-2.2299472532977083 }} ,
				{ 14 ,  {-2.30772913658978 }} ,
				{ 15 ,  {-2.2396699887092173 }} ,
				{ 16 ,  {-2.30772913658978 }} ,
				{ 17 ,  {-2.2668936478614423 }} ,
				{ 20 ,  {-2.280505477437555 }} ,
				{ 22 ,  {-2.2344346696414816 }} ,
				{ 27 ,  {-2.152165370005636 }} ,
				{ 46 ,  {-2.30772913658978 }} ,
				{ 47 ,  {-2.30772913658978 }} ,
				{ 52 ,  {-2.0681609360501985 }} ,
				{ 84 ,  {-2.30772913658978 }} ,
				{ 85 ,  {-2.30772913658978 }} ,
				{ 86 ,  {-2.30772913658978 }} ,
				{ 87 ,  {-2.294117307013668 }} ,
				{ 106 ,  {-2.035492545067528 }} ,
				{ 107 ,  {-2.035492545067528 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_3 <= 11.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 12 ) : ( ( ( Feature_50 <= 11.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 52 ) : ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_0
	

	namespace LGBM_Tree_2_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-2.094036341952792 }} ,
				{ 15 ,  {-2.1994934559104857 }} ,
				{ 16 ,  {-2.2719774560700863 }} ,
				{ 17 ,  {-2.3009710561339265 }} ,
				{ 20 ,  {-2.3009710561339265 }} ,
				{ 21 ,  {-2.26038001604455 }} ,
				{ 22 ,  {-2.3009710561339265 }} ,
				{ 24 ,  {-2.0891917165371803 }} ,
				{ 26 ,  {-2.3009710561339265 }} ,
				{ 27 ,  {-2.0980158556870445 }} ,
				{ 28 ,  {-2.2874407094374676 }} ,
				{ 47 ,  {-2.3009710561339265 }} ,
				{ 50 ,  {-2.030364122204751 }} ,
				{ 51 ,  {-2.030364122204751 }} ,
				{ 58 ,  {-2.3009710561339265 }} ,
				{ 59 ,  {-2.3009710561339265 }} ,
				{ 92 ,  {-2.3009710561339265 }} ,
				{ 93 ,  {-2.3009710561339265 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_3 <= 14.500000000000002 ) ? ( 22 ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( ( ( Feature_4 <= 10.500000000000002 ) ? ( 92 ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 24 ) : ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( ( ( Feature_4 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_0
	

	namespace LGBM_Tree_3_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-2.163919526033526 }} ,
				{ 10 ,  {-2.2754574796442704 }} ,
				{ 16 ,  {-2.1009333875239293 }} ,
				{ 22 ,  {-2.29382843670957 }} ,
				{ 23 ,  {-2.3213848723075183 }} ,
				{ 25 ,  {-2.3213848723075183 }} ,
				{ 26 ,  {-2.118764022322602 }} ,
				{ 27 ,  {-2.3213848723075183 }} ,
				{ 28 ,  {-2.2524937833126466 }} ,
				{ 29 ,  {-2.3213848723075183 }} ,
				{ 34 ,  {-2.045820516328032 }} ,
				{ 35 ,  {-2.045820516328032 }} ,
				{ 48 ,  {-2.2332042783940826 }} ,
				{ 49 ,  {-2.3213848723075183 }} ,
				{ 60 ,  {-2.3213848723075183 }} ,
				{ 61 ,  {-2.3213848723075183 }} ,
				{ 63 ,  {-2.273460636484999 }} ,
				{ 124 ,  {-2.2854416954406287 }} ,
				{ 125 ,  {-2.3213848723075183 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_19 <= 5.500000000000001 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 16 ) : ( ( ( Feature_3 <= 15.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 10 ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_1 <= 1.5000000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_0
	

	namespace LGBM_Tree_4_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-2.0151191436058937 }} ,
				{ 7 ,  {-2.1898201545330607 }} ,
				{ 17 ,  {-2.2277986351694015 }} ,
				{ 19 ,  {-2.2505857235512057 }} ,
				{ 20 ,  {-2.2632452170966526 }} ,
				{ 22 ,  {-2.2012136987239628 }} ,
				{ 23 ,  {-2.2809685080602784 }} ,
				{ 32 ,  {-2.267676039837559 }} ,
				{ 33 ,  {-2.2809685080602784 }} ,
				{ 36 ,  {-2.1879212305012437 }} ,
				{ 37 ,  {-2.0287524443471443 }} ,
				{ 42 ,  {-2.2809685080602784 }} ,
				{ 43 ,  {-2.2729124667131755 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 3.5000000000000004 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_0
	

	namespace LGBM_Tree_5_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {-2.2589679609816025 }} ,
				{ 12 ,  {-2.328283808804682 }} ,
				{ 14 ,  {-2.328283808804682 }} ,
				{ 15 ,  {-2.227460757425657 }} ,
				{ 16 ,  {-2.1619257740292905 }} ,
				{ 17 ,  {-2.328283808804682 }} ,
				{ 18 ,  {-2.3018777715387473 }} ,
				{ 20 ,  {-2.090629473411266 }} ,
				{ 27 ,  {-2.303078045959926 }} ,
				{ 38 ,  {-2.328283808804682 }} ,
				{ 39 ,  {-2.328283808804682 }} ,
				{ 42 ,  {-2.0510204175123627 }} ,
				{ 43 ,  {-2.0510204175123627 }} ,
				{ 52 ,  {-2.328283808804682 }} ,
				{ 53 ,  {-2.328283808804682 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 18 ) : ( ( ( Feature_2 <= 9.500000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 20 ) : ( ( ( Feature_6 <= 1.5000000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 13.500000000000002 ) ? ( 12 ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_0
	

	namespace LGBM_Tree_6_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-2.3252129440080207 }} ,
				{ 8 ,  {-2.2860802888957794 }} ,
				{ 15 ,  {-2.328190428636126 }} ,
				{ 18 ,  {-2.342227141882908 }} ,
				{ 19 ,  {-2.342227141882908 }} ,
				{ 20 ,  {-2.342227141882908 }} ,
				{ 21 ,  {-2.2720435756489974 }} ,
				{ 22 ,  {-2.187823296168305 }} ,
				{ 23 ,  {-2.061492876947266 }} ,
				{ 56 ,  {-2.342227141882908 }} ,
				{ 57 ,  {-2.328190428636126 }} ,
				{ 58 ,  {-2.342227141882908 }} ,
				{ 59 ,  {-2.342227141882908 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 8 ) : ( ( ( Feature_60 <= 5.500000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_10 <= 3.5000000000000004 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( Feature_1 <= 1.5000000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_0
	

	namespace LGBM_Tree_7_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-2.314559339450899 }} ,
				{ 8 ,  {-2.207446975420856 }} ,
				{ 15 ,  {-2.285292578275404 }} ,
				{ 18 ,  {-2.086278602282037 }} ,
				{ 24 ,  {-2.3279384302739827 }} ,
				{ 25 ,  {-2.356368998273035 }} ,
				{ 27 ,  {-2.329292266845366 }} ,
				{ 38 ,  {-2.072063318282511 }} ,
				{ 39 ,  {-2.0720633182825114 }} ,
				{ 52 ,  {-2.072063318282511 }} ,
				{ 53 ,  {-2.2284314422772993 }} ,
				{ 57 ,  {-2.2995078622749303 }} ,
				{ 58 ,  {-2.356368998273035 }} ,
				{ 112 ,  {-2.356368998273035 }} ,
				{ 113 ,  {-2.356368998273035 }} ,
				{ 118 ,  {-2.3326768582738246 }} ,
				{ 119 ,  {-2.356368998273035 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 4.500000000000001 ) ? ( 8 ) : ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 18 ) : ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_35 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 8.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( 58 ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_0
	

	namespace LGBM_Tree_8_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-2.392630272112306 }} ,
				{ 16 ,  {-2.369443172778941 }} ,
				{ 18 ,  {-2.238785708281406 }} ,
				{ 20 ,  {-2.3192044575566495 }} ,
				{ 23 ,  {-2.3625068610125495 }} ,
				{ 29 ,  {-2.3779451092011747 }} ,
				{ 30 ,  {-2.260463805912124 }} ,
				{ 31 ,  {-2.392630272112306 }} ,
				{ 38 ,  {-2.3525798278092207 }} ,
				{ 39 ,  {-2.392630272112306 }} ,
				{ 42 ,  {-2.3779451092011747 }} ,
				{ 44 ,  {-2.333889620467781 }} ,
				{ 56 ,  {-2.392630272112306 }} ,
				{ 57 ,  {-2.392630272112306 }} ,
				{ 68 ,  {-2.392630272112306 }} ,
				{ 69 ,  {-2.392630272112306 }} ,
				{ 70 ,  {-2.392630272112306 }} ,
				{ 71 ,  {-2.3632599462900434 }} ,
				{ 86 ,  {-2.392630272112306 }} ,
				{ 87 ,  {-2.392630272112306 }} ,
				{ 91 ,  {-2.2010846689236363 }} ,
				{ 181 ,  {-2.1282973397119416 }} ,
				{ 360 ,  {-2.098927013889679 }} ,
				{ 361 ,  {-2.098927013889679 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 16 ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_12 <= 5.500000000000001 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 11.500000000000002 ) ? ( 18 ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_12 <= 5.500000000000001 ) ? ( 20 ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( 42 ) : ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 44 ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( 360 ) : ( 361 ) ) ) : ( 181 ) ) ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 6 ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_2 <= 9.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_34 <= 10.500000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_0
	

	namespace LGBM_Tree_9_0 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {-2.1506695645577114 }} ,
				{ 13 ,  {-2.294117307013668 }} ,
				{ 15 ,  {-2.1893654011453227 }} ,
				{ 16 ,  {-2.254794243793787 }} ,
				{ 22 ,  {-2.30772913658978 }} ,
				{ 23 ,  {-2.280505477437555 }} ,
				{ 25 ,  {-2.2040199588670175 }} ,
				{ 28 ,  {-2.257314952974548 }} ,
				{ 34 ,  {-2.26417128194622 }} ,
				{ 36 ,  {-2.30772913658978 }} ,
				{ 37 ,  {-2.294117307013668 }} ,
				{ 39 ,  {-2.30772913658978 }} ,
				{ 49 ,  {-2.1392017227902906 }} ,
				{ 77 ,  {-2.30772913658978 }} ,
				{ 96 ,  {-2.074383486713564 }} ,
				{ 97 ,  {-2.035492545067528 }} ,
				{ 116 ,  {-2.30772913658978 }} ,
				{ 117 ,  {-2.30772913658978 }} ,
				{ 118 ,  {-2.30772913658978 }} ,
				{ 119 ,  {-2.30772913658978 }} ,
				{ 142 ,  {-2.2668936478614423 }} ,
				{ 143 ,  {-2.30772913658978 }} ,
				{ 280 ,  {-2.30772913658978 }} ,
				{ 281 ,  {-2.30772913658978 }} ,
				{ 282 ,  {-2.30772913658978 }} ,
				{ 283 ,  {-2.280505477437555 }} ,
				{ 304 ,  {-2.30772913658978 }} ,
				{ 305 ,  {-2.30772913658978 }} ,
				{ 306 ,  {-2.30772913658978 }} ,
				{ 307 ,  {-2.30772913658978 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 16 ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_54 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 13.500000000000002 ) ? ( ( ( Feature_2 <= 12.500000000000002 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( Feature_3 <= 14.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_3 <= 15.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 15.500000000000002 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 304 ) : ( 305 ) ) ) : ( ( ( Feature_52 <= 15.500000000000002 ) ? ( 306 ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( 28 ) : ( ( ( Feature_3 <= 13.500000000000002 ) ? ( ( ( Feature_3 <= 6.500000000000001 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_0
	

	namespace LGBM_Tree_0_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.07254542987775629 }} ,
				{ 10 ,  {-0.027587726828316603 }} ,
				{ 11 ,  {-0.027558110245759573 }} ,
				{ 13 ,  {0.02701999483216946 }} ,
				{ 17 ,  {0.17188473109170704 }} ,
				{ 24 ,  {-0.027626939416372055 }} ,
				{ 25 ,  {-0.027569316046118165 }} ,
				{ 32 ,  {0.2125499151241697 }} ,
				{ 56 ,  {-0.02758039437798415 }} ,
				{ 60 ,  {-0.027529435290817552 }} ,
				{ 63 ,  {-0.027555493716164066 }} ,
				{ 66 ,  {0.20514225995726784 }} ,
				{ 114 ,  {-0.027539916662972588 }} ,
				{ 119 ,  {-0.027547350139385352 }} ,
				{ 122 ,  {-0.027566243816014746 }} ,
				{ 123 ,  {-0.0275490901369181 }} ,
				{ 125 ,  {-0.027605428437534732 }} ,
				{ 134 ,  {0.20178251577943335 }} ,
				{ 135 ,  {0.20240738996053392 }} ,
				{ 230 ,  {-0.027585110657807506 }} ,
				{ 231 ,  {-0.027551536148636875 }} ,
				{ 248 ,  {-0.02758318731367146 }} ,
				{ 249 ,  {-0.027559260983260767 }} ,
				{ 464 ,  {-0.027569557836083974 }} ,
				{ 465 ,  {-0.02754547284939155 }} ,
				{ 467 ,  {-0.02756309555447048 }} ,
				{ 468 ,  {-0.027602134885567703 }} ,
				{ 469 ,  {-0.02757082923605247 }} ,
				{ 470 ,  {-0.02759170225412205 }} ,
				{ 472 ,  {-0.02755872282243634 }} ,
				{ 475 ,  {-0.027567238581751682 }} ,
				{ 932 ,  {-0.027610443824523403 }} ,
				{ 933 ,  {-0.02757956399163246 }} ,
				{ 942 ,  {-0.027565656766423197 }} ,
				{ 943 ,  {-0.027591480277947278 }} ,
				{ 946 ,  {-0.027568020697892978 }} ,
				{ 947 ,  {-0.027591630525831936 }} ,
				{ 948 ,  {-0.027608827969969635 }} ,
				{ 1898 ,  {-0.027592703779359434 }} ,
				{ 1899 ,  {-0.02756822211464896 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 32 ) : ( ( ( Feature_42 <= 12.500000000000002 ) ? ( 66 ) : ( ( ( Feature_17 <= 4.500000000000001 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 56 ) : ( ( ( Feature_21 <= 4.500000000000001 ) ? ( 114 ) : ( ( ( Feature_29 <= 8.500000000000002 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 10.500000000000002 ) ? ( ( ( Feature_22 <= 3.5000000000000004 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 12.500000000000002 ) ? ( 932 ) : ( 933 ) ) ) : ( 467 ) ) ) ) ) : ( ( ( Feature_2 <= 3.5000000000000004 ) ? ( ( ( Feature_27 <= 15.500000000000002 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 470 ) : ( ( ( Feature_13 <= 13.500000000000002 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 472 ) : ( ( ( Feature_38 <= 2.5000000000000004 ) ? ( 946 ) : ( 947 ) ) ) ) ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_50 <= 4.500000000000001 ) ? ( 948 ) : ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 1898 ) : ( 1899 ) ) ) ) ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 60 ) : ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 248 ) : ( 249 ) ) ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_1
	

	namespace LGBM_Tree_1_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.027789793739220192 }} ,
				{ 12 ,  {0.04647069447759318 }} ,
				{ 14 ,  {0.039660909082945534 }} ,
				{ 18 ,  {0.20354136173451512 }} ,
				{ 19 ,  {0.10117033301405315 }} ,
				{ 20 ,  {-0.000516780607124465 }} ,
				{ 22 ,  {0.04268524846926734 }} ,
				{ 26 ,  {0.10441502625981565 }} ,
				{ 30 ,  {-0.027745831160926545 }} ,
				{ 31 ,  {-0.027851380566518997 }} ,
				{ 46 ,  {-0.02776771932921626 }} ,
				{ 47 ,  {-0.02773992633490695 }} ,
				{ 55 ,  {0.15760544469520493 }} ,
				{ 87 ,  {-0.013834869600524165 }} ,
				{ 108 ,  {0.19800375009456062 }} ,
				{ 109 ,  {0.18511528191376078 }} ,
				{ 172 ,  {-0.027755000469146775 }} ,
				{ 173 ,  {-0.027785342995428498 }} ,
				{ 672 ,  {-0.02775954217833912 }} ,
				{ 673 ,  {-0.027745450352819778 }} ,
				{ 675 ,  {-0.027754384378898867 }} ,
				{ 676 ,  {-0.02775322440878137 }} ,
				{ 677 ,  {-0.02773655104061696 }} ,
				{ 678 ,  {-0.0277175573874653 }} ,
				{ 679 ,  {-0.02774082285959142 }} ,
				{ 682 ,  {-0.027756879899124377 }} ,
				{ 683 ,  {-0.027771711670001076 }} ,
				{ 685 ,  {-0.027766677033367222 }} ,
				{ 686 ,  {-0.02777474764397191 }} ,
				{ 687 ,  {-0.02774416564047212 }} ,
				{ 1348 ,  {-0.027759584195508502 }} ,
				{ 1349 ,  {-0.027787172987097826 }} ,
				{ 1361 ,  {-0.027730318946783003 }} ,
				{ 1362 ,  {-0.027740098538384057 }} ,
				{ 1368 ,  {-0.02780548017892678 }} ,
				{ 1369 ,  {-0.027780940514935622 }} ,
				{ 2720 ,  {-0.027739102732411883 }} ,
				{ 2721 ,  {-0.027759008937530968 }} ,
				{ 2726 ,  {-0.027753662683723875 }} ,
				{ 2727 ,  {-0.02777538088172898 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( 1348 ) : ( 1349 ) ) ) : ( 675 ) ) ) ) ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 678 ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 2720 ) : ( 2721 ) ) ) : ( 1361 ) ) ) : ( ( ( Feature_18 <= 1.5000000000000002 ) ? ( 1362 ) : ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 2726 ) : ( 2727 ) ) ) ) ) ) ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_26 <= 14.500000000000002 ) ? ( 1368 ) : ( 1369 ) ) ) : ( 685 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 686 ) : ( 687 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 15.500000000000002 ) ? ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 12 ) : ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 26 ) : ( ( ( Feature_34 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 14 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_1
	

	namespace LGBM_Tree_2_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.14967638161800684 }} ,
				{ 15 ,  {0.06723472986509936 }} ,
				{ 16 ,  {0.0010629860384288052 }} ,
				{ 20 ,  {-0.02776341350688942 }} ,
				{ 21 ,  {0.012312730154112921 }} ,
				{ 25 ,  {0.08496060401009042 }} ,
				{ 26 ,  {-0.027827539054145357 }} ,
				{ 27 ,  {0.0625476284935446 }} ,
				{ 29 ,  {-0.013906997018943901 }} ,
				{ 35 ,  {-0.027785796995916198 }} ,
				{ 46 ,  {-0.027789246575914084 }} ,
				{ 49 ,  {0.18354223887677482 }} ,
				{ 57 ,  {-0.027761124257995935 }} ,
				{ 68 ,  {-0.027782958189608395 }} ,
				{ 88 ,  {-0.02779639477687822 }} ,
				{ 95 ,  {-0.027753173287170065 }} ,
				{ 96 ,  {0.20047653626988488 }} ,
				{ 113 ,  {-0.027773795393281637 }} ,
				{ 138 ,  {-0.02774207686692397 }} ,
				{ 139 ,  {-0.027766946946488808 }} ,
				{ 178 ,  {-0.027748173168518825 }} ,
				{ 179 ,  {-0.027766020052304614 }} ,
				{ 181 ,  {-0.027754175498714808 }} ,
				{ 188 ,  {-0.027764527334167923 }} ,
				{ 194 ,  {0.19135748284674903 }} ,
				{ 195 ,  {0.19438324945342478 }} ,
				{ 224 ,  {-0.027771823543756666 }} ,
				{ 225 ,  {-0.027808062291728126 }} ,
				{ 360 ,  {-0.027775407861208797 }} ,
				{ 361 ,  {-0.027805309085505832 }} ,
				{ 366 ,  {-0.027775003302133686 }} ,
				{ 378 ,  {-0.02775907832144501 }} ,
				{ 728 ,  {-0.027819368013691583 }} ,
				{ 729 ,  {-0.02778896950292777 }} ,
				{ 730 ,  {-0.027772555946766215 }} ,
				{ 731 ,  {-0.0277988534334719 }} ,
				{ 734 ,  {-0.027774858013413495 }} ,
				{ 735 ,  {-0.02779798849399283 }} ,
				{ 758 ,  {-0.0277755603749089 }} ,
				{ 759 ,  {-0.027794201521566222 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 68 ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 178 ) : ( 179 ) ) ) ) ) : ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( 181 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 366 ) : ( ( ( Feature_18 <= 10.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_38 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 188 ) : ( ( ( Feature_59 <= 2.5000000000000004 ) ? ( 378 ) : ( ( ( Feature_34 <= 15.500000000000002 ) ? ( 758 ) : ( 759 ) ) ) ) ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 12.500000000000002 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 96 ) : ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_50 <= 6.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_1
	

	namespace LGBM_Tree_3_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.1278441118157552 }} ,
				{ 10 ,  {0.017362840322711 }} ,
				{ 16 ,  {0.1775193369175303 }} ,
				{ 22 ,  {-0.00010337693845915387 }} ,
				{ 24 ,  {0.16458210904889684 }} ,
				{ 26 ,  {0.019975337746957908 }} ,
				{ 28 ,  {-0.0277919426209522 }} ,
				{ 29 ,  {0.041355446207432076 }} ,
				{ 34 ,  {0.20193878801519186 }} ,
				{ 35 ,  {0.19658535928690268 }} ,
				{ 47 ,  {-0.027704745445347685 }} ,
				{ 50 ,  {0.026723852251789762 }} ,
				{ 51 ,  {-0.027769269891921224 }} ,
				{ 55 ,  {-0.013764931197766487 }} ,
				{ 63 ,  {0.019373875193136852 }} ,
				{ 92 ,  {-0.02771355457032351 }} ,
				{ 109 ,  {-0.02791473959571088 }} ,
				{ 124 ,  {0.008764104998178803 }} ,
				{ 186 ,  {-0.027755704884949047 }} ,
				{ 187 ,  {-0.027718985486884035 }} ,
				{ 216 ,  {-0.02778471123788256 }} ,
				{ 217 ,  {-0.027705195545101244 }} ,
				{ 240 ,  {-0.02769648150744893 }} ,
				{ 242 ,  {-0.02768271825471716 }} ,
				{ 243 ,  {-0.027700735764229118 }} ,
				{ 245 ,  {-0.027719425267715342 }} ,
				{ 246 ,  {-0.02772994622665781 }} ,
				{ 250 ,  {-0.02777280323220222 }} ,
				{ 482 ,  {-0.027736801083107505 }} ,
				{ 483 ,  {-0.027714373595883076 }} ,
				{ 489 ,  {-0.027717371816367166 }} ,
				{ 494 ,  {-0.027705768580452178 }} ,
				{ 503 ,  {-0.02769882038290471 }} ,
				{ 976 ,  {-0.0277532471714798 }} ,
				{ 977 ,  {-0.027729403065353205 }} ,
				{ 991 ,  {-0.027701040341544608 }} ,
				{ 1004 ,  {-0.02770677934984256 }} ,
				{ 1005 ,  {-0.027735480094230276 }} ,
				{ 1980 ,  {-0.027734957905812853 }} ,
				{ 1981 ,  {-0.027712610694529863 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.5000000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 10 ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 92 ) : ( ( ( Feature_9 <= 3.5000000000000004 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( 24 ) : ( ( ( Feature_30 <= 3.5000000000000004 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_58 <= 13.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_10 <= 7.500000000000001 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_12 <= 6.500000000000001 ) ? ( 240 ) : ( ( ( Feature_43 <= 12.500000000000002 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( Feature_34 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 14.500000000000002 ) ? ( ( ( Feature_3 <= 13.500000000000002 ) ? ( 976 ) : ( 977 ) ) ) : ( 489 ) ) ) : ( 245 ) ) ) : ( ( ( Feature_4 <= 6.500000000000001 ) ? ( 246 ) : ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 494 ) : ( ( ( Feature_41 <= 4.500000000000001 ) ? ( ( ( Feature_36 <= 10.500000000000002 ) ? ( 1980 ) : ( 1981 ) ) ) : ( 991 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 124 ) : ( ( ( Feature_26 <= 9.500000000000002 ) ? ( 250 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 1004 ) : ( 1005 ) ) ) : ( 503 ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_1
	

	namespace LGBM_Tree_4_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.04775005361944576 }} ,
				{ 12 ,  {0.17159291779205588 }} ,
				{ 17 ,  {0.024104387501394008 }} ,
				{ 19 ,  {0.0023436208832022898 }} ,
				{ 20 ,  {-0.009859602623059927 }} ,
				{ 22 ,  {-0.02793995277586103 }} ,
				{ 23 ,  {0.05180978562569166 }} ,
				{ 26 ,  {0.19126787949653223 }} ,
				{ 27 ,  {0.18846508742672688 }} ,
				{ 32 ,  {-0.01437747080879192 }} ,
				{ 36 ,  {0.18575992220444015 }} ,
				{ 37 ,  {0.05550634434614459 }} ,
				{ 43 ,  {-0.01967991502423546 }} ,
				{ 67 ,  {-0.02786965291941101 }} ,
				{ 132 ,  {-0.027847597503907074 }} ,
				{ 133 ,  {-0.027829247976520994 }} ,
				{ 336 ,  {-0.02785128063204419 }} ,
				{ 337 ,  {-0.027831673619523486 }} ,
				{ 338 ,  {-0.027797366561223603 }} ,
				{ 339 ,  {-0.0278306486891656 }} ,
				{ 342 ,  {-0.02781095737682046 }} ,
				{ 343 ,  {-0.02784803114105959 }} ,
				{ 1360 ,  {-0.02782823690458692 }} ,
				{ 1362 ,  {-0.027832003040721975 }} ,
				{ 1363 ,  {-0.027809283600871884 }} ,
				{ 1367 ,  {-0.02785551783986915 }} ,
				{ 2723 ,  {-0.027829681215525245 }} ,
				{ 2728 ,  {-0.02783455134025973 }} ,
				{ 2729 ,  {-0.027861831582701915 }} ,
				{ 2731 ,  {-0.027878905682489533 }} ,
				{ 2732 ,  {-0.0278117884659571 }} ,
				{ 2733 ,  {-0.027834029325706333 }} ,
				{ 5445 ,  {-0.02786945710604016 }} ,
				{ 5460 ,  {-0.02786352621666789 }} ,
				{ 5461 ,  {-0.027831872847917074 }} ,
				{ 21776 ,  {-0.027830261979717115 }} ,
				{ 21778 ,  {-0.027837433395233504 }} ,
				{ 21779 ,  {-0.02786837922524117 }} ,
				{ 43554 ,  {-0.027834307562704438 }} ,
				{ 43555 ,  {-0.027860205430611323 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_61 <= 2.5000000000000004 ) ? ( 336 ) : ( 337 ) ) ) : ( ( ( Feature_25 <= 1.5000000000000002 ) ? ( 338 ) : ( 339 ) ) ) ) ) : ( ( ( Feature_42 <= 15.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_54 <= 4.500000000000001 ) ? ( ( ( Feature_60 <= 2.5000000000000004 ) ? ( 1360 ) : ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 3.5000000000000004 ) ? ( 21776 ) : ( ( ( Feature_37 <= 3.5000000000000004 ) ? ( 43554 ) : ( 43555 ) ) ) ) ) : ( ( ( Feature_34 <= 3.5000000000000004 ) ? ( 21778 ) : ( 21779 ) ) ) ) ) : ( 5445 ) ) ) : ( 2723 ) ) ) ) ) : ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 1362 ) : ( 1363 ) ) ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_26 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 2728 ) : ( 2729 ) ) ) : ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 5460 ) : ( 5461 ) ) ) : ( 2731 ) ) ) ) ) : ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 2732 ) : ( 2733 ) ) ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 12.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( ( ( Feature_44 <= 14.500000000000002 ) ? ( 12 ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_1
	

	namespace LGBM_Tree_5_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {0.039344954457543095 }} ,
				{ 15 ,  {0.06680570460361943 }} ,
				{ 16 ,  {0.11994476009829202 }} ,
				{ 17 ,  {-0.02770232701287628 }} ,
				{ 18 ,  {-0.0013162258580737525 }} ,
				{ 20 ,  {0.16790307907892876 }} ,
				{ 25 ,  {-0.027669772538854318 }} ,
				{ 27 ,  {-0.002605853995107749 }} ,
				{ 29 ,  {-0.027687972992087015 }} ,
				{ 38 ,  {-0.02771081638140519 }} ,
				{ 42 ,  {0.19977593490779658 }} ,
				{ 52 ,  {-0.027715471826219962 }} ,
				{ 56 ,  {-0.027721622800182023 }} ,
				{ 57 ,  {-0.02769492100131342 }} ,
				{ 86 ,  {0.19676616209128972 }} ,
				{ 96 ,  {-0.027677655518407476 }} ,
				{ 106 ,  {-0.02771021897512814 }} ,
				{ 107 ,  {-0.027686213667419357 }} ,
				{ 156 ,  {-0.027655118965654226 }} ,
				{ 157 ,  {-0.027686634684385078 }} ,
				{ 158 ,  {-0.027706929179359786 }} ,
				{ 159 ,  {-0.027683798144954537 }} ,
				{ 174 ,  {0.19536578929678244 }} ,
				{ 175 ,  {0.19582629597606085 }} ,
				{ 196 ,  {-0.02768363126473441 }} ,
				{ 197 ,  {-0.027649520845137804 }} ,
				{ 198 ,  {-0.02770618822687968 }} ,
				{ 199 ,  {-0.02768185247720056 }} ,
				{ 776 ,  {-0.027690737279952162 }} ,
				{ 777 ,  {-0.02767001853889961 }} ,
				{ 778 ,  {-0.02768941562235851 }} ,
				{ 779 ,  {-0.027727942770867566 }} ,
				{ 780 ,  {-0.027720583925703726 }} ,
				{ 782 ,  {-0.02771048923972132 }} ,
				{ 1563 ,  {-0.02768252169290171 }} ,
				{ 1567 ,  {-0.027668542407130715 }} ,
				{ 3124 ,  {-0.02769455370172256 }} ,
				{ 3125 ,  {-0.027717351784658478 }} ,
				{ 3132 ,  {-0.027700123703391717 }} ,
				{ 3133 ,  {-0.02767699453283335 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 18 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 38 ) : ( ( ( Feature_36 <= 8.500000000000002 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( Feature_34 <= 13.500000000000002 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_25 <= 1.5000000000000002 ) ? ( 20 ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 42 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 86 ) : ( ( ( Feature_28 <= 10.500000000000002 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_30 <= 9.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 96 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 776 ) : ( 777 ) ) ) : ( ( ( Feature_60 <= 5.500000000000001 ) ? ( 778 ) : ( 779 ) ) ) ) ) : ( ( ( Feature_35 <= 13.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 780 ) : ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 3124 ) : ( 3125 ) ) ) : ( 1563 ) ) ) ) ) : ( ( ( Feature_50 <= 4.500000000000001 ) ? ( 782 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( ( ( Feature_22 <= 2.5000000000000004 ) ? ( 3132 ) : ( 3133 ) ) ) : ( 1567 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_37 <= 13.500000000000002 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( 52 ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_1
	

	namespace LGBM_Tree_6_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.010494746640062162 }} ,
				{ 8 ,  {0.02719488046112442 }} ,
				{ 10 ,  {0.000999645549283806 }} ,
				{ 15 ,  {-0.013411811531431648 }} ,
				{ 22 ,  {0.10682577530211729 }} ,
				{ 36 ,  {-0.027641047087645882 }} ,
				{ 38 ,  {-0.027618547324489207 }} ,
				{ 39 ,  {-0.02764348879703195 }} ,
				{ 46 ,  {0.20685609308942343 }} ,
				{ 57 ,  {-0.013303875806883303 }} ,
				{ 74 ,  {-0.02766502475437827 }} ,
				{ 75 ,  {-0.027693410318902933 }} ,
				{ 94 ,  {0.20042135369739703 }} ,
				{ 112 ,  {-0.027653430519799273 }} ,
				{ 113 ,  {-0.027687442636261536 }} ,
				{ 118 ,  {-0.027625553385111613 }} ,
				{ 190 ,  {0.1984529004374752 }} ,
				{ 238 ,  {-0.02765799208199729 }} ,
				{ 382 ,  {0.19734200308051283 }} ,
				{ 383 ,  {0.19765021160796684 }} ,
				{ 464 ,  {-0.02764793644429457 }} ,
				{ 465 ,  {-0.02762690530414448 }} ,
				{ 466 ,  {-0.027685871370138327 }} ,
				{ 469 ,  {-0.02764695304188236 }} ,
				{ 471 ,  {-0.027671611682594712 }} ,
				{ 479 ,  {-0.027626548628639464 }} ,
				{ 936 ,  {-0.027684285332589605 }} ,
				{ 937 ,  {-0.027664385010194387 }} ,
				{ 940 ,  {-0.027644320626089677 }} ,
				{ 956 ,  {-0.027641133715658905 }} ,
				{ 957 ,  {-0.027657365687880554 }} ,
				{ 1870 ,  {-0.027629522101168997 }} ,
				{ 1871 ,  {-0.02764947919990886 }} ,
				{ 1882 ,  {-0.02767332283959409 }} ,
				{ 1883 ,  {-0.027647769853668278 }} ,
				{ 3737 ,  {-0.0276717099163119 }} ,
				{ 3738 ,  {-0.027688014681199857 }} ,
				{ 3739 ,  {-0.02765891659083504 }} ,
				{ 7472 ,  {-0.027652646023817215 }} ,
				{ 7473 ,  {-0.02762288583250476 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 36 ) : ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 22 ) : ( ( ( Feature_34 <= 14.500000000000002 ) ? ( 46 ) : ( ( ( Feature_46 <= 7.500000000000001 ) ? ( 94 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 190 ) : ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( 382 ) : ( 383 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_3 <= 9.500000000000002 ) ? ( 466 ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 1.5000000000000002 ) ? ( ( ( Feature_29 <= 8.500000000000002 ) ? ( 7472 ) : ( 7473 ) ) ) : ( 3737 ) ) ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 3738 ) : ( 3739 ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( 936 ) : ( 937 ) ) ) : ( 469 ) ) ) : ( ( ( Feature_14 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 940 ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 1882 ) : ( 1883 ) ) ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 118 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 238 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 956 ) : ( 957 ) ) ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_1
	

	namespace LGBM_Tree_7_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.013616809985830355 }} ,
				{ 8 ,  {0.10581247750740981 }} ,
				{ 15 ,  {0.04079683189887548 }} ,
				{ 19 ,  {0.189605517666087 }} ,
				{ 25 ,  {0.0012584829363978915 }} ,
				{ 27 ,  {-0.0005118727011562883 }} ,
				{ 36 ,  {0.20322081195428982 }} ,
				{ 37 ,  {0.20044370998722033 }} ,
				{ 48 ,  {-0.02768831031366019 }} ,
				{ 49 ,  {-0.027612566914082884 }} ,
				{ 52 ,  {0.19998326606605427 }} ,
				{ 53 ,  {0.08887560624660817 }} ,
				{ 57 ,  {0.02981490053106127 }} ,
				{ 112 ,  {-0.027608809411260232 }} ,
				{ 113 ,  {-0.02772279670839883 }} ,
				{ 118 ,  {-0.0037058561414143212 }} ,
				{ 238 ,  {-0.027600694735177334 }} ,
				{ 239 ,  {-0.027652640398439746 }} ,
				{ 466 ,  {-0.02757179739539622 }} ,
				{ 467 ,  {-0.02761215849379638 }} ,
				{ 468 ,  {-0.02760759698636289 }} ,
				{ 469 ,  {-0.027623876403251504 }} ,
				{ 930 ,  {-0.027594990422913135 }} ,
				{ 931 ,  {-0.027613807110482714 }} ,
				{ 942 ,  {-0.027572006514623295 }} ,
				{ 943 ,  {-0.027594442662385005 }} ,
				{ 1858 ,  {-0.027602481744143995 }} ,
				{ 1880 ,  {-0.027608983221574054 }} ,
				{ 1881 ,  {-0.02758850268231966 }} ,
				{ 1882 ,  {-0.027601253083572953 }} ,
				{ 1883 ,  {-0.027580205448915845 }} ,
				{ 3713 ,  {-0.027604934387463066 }} ,
				{ 3714 ,  {-0.027620880306892883 }} ,
				{ 3715 ,  {-0.027652126850423765 }} ,
				{ 3718 ,  {-0.027607173345389913 }} ,
				{ 3719 ,  {-0.02763767684747789 }} ,
				{ 7424 ,  {-0.02761471429203871 }} ,
				{ 14850 ,  {-0.0276054195602263 }} ,
				{ 29702 ,  {-0.027650436814258685 }} ,
				{ 29703 ,  {-0.027624319181790282 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 4.500000000000001 ) ? ( 8 ) : ( ( ( Feature_45 <= 5.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_13 <= 13.500000000000002 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_38 <= 4.500000000000001 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 5.500000000000001 ) ? ( 7424 ) : ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 14850 ) : ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 29702 ) : ( 29703 ) ) ) ) ) ) ) : ( 3713 ) ) ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 3714 ) : ( 3715 ) ) ) ) ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 1858 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 3718 ) : ( 3719 ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( 930 ) : ( 931 ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_38 <= 8.500000000000002 ) ? ( 1880 ) : ( 1881 ) ) ) : ( ( ( Feature_45 <= 12.500000000000002 ) ? ( 1882 ) : ( 1883 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 118 ) : ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_1
	

	namespace LGBM_Tree_8_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 13 ,  {-0.027491774584253087 }} ,
				{ 19 ,  {0.1582334793353107 }} ,
				{ 20 ,  {-0.006944362411617726 }} ,
				{ 23 ,  {0.07835951420212728 }} ,
				{ 29 ,  {-0.012679007164717083 }} ,
				{ 31 ,  {0.10024142786972366 }} ,
				{ 32 ,  {-0.016942844858646625 }} ,
				{ 34 ,  {0.0412701460676835 }} ,
				{ 35 ,  {-0.027537670160028362 }} ,
				{ 36 ,  {0.014861449241725118 }} ,
				{ 42 ,  {0.10009694872955797 }} ,
				{ 45 ,  {0.013537126423466363 }} ,
				{ 49 ,  {-0.027510424952447557 }} ,
				{ 51 ,  {-0.02750460338798484 }} ,
				{ 57 ,  {-0.027506918438524677 }} ,
				{ 60 ,  {-0.027710368395232506 }} ,
				{ 61 ,  {-0.027517949170220397 }} ,
				{ 74 ,  {-0.027589651014523826 }} ,
				{ 75 ,  {-0.02752269627688499 }} ,
				{ 87 ,  {0.14657915764849647 }} ,
				{ 89 ,  {-0.027572719658211536 }} ,
				{ 96 ,  {-0.02750384776012371 }} ,
				{ 97 ,  {-0.027478016992308115 }} ,
				{ 101 ,  {-0.027509286387843203 }} ,
				{ 112 ,  {-0.0275073357610206 }} ,
				{ 133 ,  {-0.027532239465723075 }} ,
				{ 134 ,  {-0.027694194862586757 }} ,
				{ 172 ,  {0.20941931634231814 }} ,
				{ 173 ,  {0.22007629844572962 }} ,
				{ 177 ,  {-0.027525684939394147 }} ,
				{ 200 ,  {-0.02751045545677004 }} ,
				{ 201 ,  {-0.027539652789529103 }} ,
				{ 226 ,  {-0.0275196219607333 }} ,
				{ 227 ,  {-0.02754467444630659 }} ,
				{ 264 ,  {-0.027503056916337084 }} ,
				{ 265 ,  {-0.027478638987843473 }} ,
				{ 270 ,  {-0.027588781799765497 }} ,
				{ 271 ,  {-0.02752541841481923 }} ,
				{ 352 ,  {-0.027520903012429515 }} ,
				{ 353 ,  {-0.027480070820889924 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_36 <= 7.500000000000001 ) ? ( 32 ) : ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 134 ) : ( ( ( Feature_53 <= 5.500000000000001 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_43 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( 20 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 42 ) : ( ( ( Feature_20 <= 13.500000000000002 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 8.500000000000002 ) ? ( 352 ) : ( 353 ) ) ) : ( 177 ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 200 ) : ( 201 ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 6.500000000000001 ) ? ( 112 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_1
	

	namespace LGBM_Tree_9_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.11231098875066646 }} ,
				{ 13 ,  {-0.014026384266681475 }} ,
				{ 15 ,  {0.08133527018209136 }} ,
				{ 22 ,  {0.00010290857669047196 }} ,
				{ 23 ,  {-0.027795825374715782 }} ,
				{ 24 ,  {0.07649439697970294 }} ,
				{ 28 ,  {0.0232936542299979 }} ,
				{ 32 ,  {0.05876803505273412 }} ,
				{ 33 ,  {-0.027813222329337608 }} ,
				{ 34 ,  {0.009040933957280802 }} ,
				{ 36 ,  {-0.027792544817117844 }} ,
				{ 37 ,  {-0.013894892699176207 }} ,
				{ 51 ,  {0.12520389009152588 }} ,
				{ 58 ,  {-0.027848675317177336 }} ,
				{ 70 ,  {-0.0024539317943706005 }} ,
				{ 76 ,  {-0.027755444145075234 }} ,
				{ 78 ,  {-0.027765295510200655 }} ,
				{ 101 ,  {0.16475049669435313 }} ,
				{ 118 ,  {-0.027741138113319214 }} ,
				{ 154 ,  {-0.02777875765307657 }} ,
				{ 155 ,  {-0.027756931476843445 }} ,
				{ 200 ,  {0.19452506579618592 }} ,
				{ 201 ,  {0.20372612147270544 }} ,
				{ 239 ,  {-0.027744101354875823 }} ,
				{ 285 ,  {-0.014816315768782663 }} ,
				{ 286 ,  {-0.02778924125508326 }} ,
				{ 287 ,  {-0.0001337582937472485 }} ,
				{ 316 ,  {-0.027751855193322274 }} ,
				{ 317 ,  {-0.027731238367507762 }} ,
				{ 318 ,  {-0.027742570317495968 }} ,
				{ 319 ,  {-0.027720483861647896 }} ,
				{ 476 ,  {-0.027748168007499997 }} ,
				{ 477 ,  {-0.027783445295838313 }} ,
				{ 569 ,  {-0.027787984570427193 }} ,
				{ 2272 ,  {-0.02772737011656372 }} ,
				{ 2273 ,  {-0.02775372175685832 }} ,
				{ 2274 ,  {-0.02775017455416089 }} ,
				{ 4551 ,  {-0.027755583393283302 }} ,
				{ 9100 ,  {-0.027798055309782712 }} ,
				{ 9101 ,  {-0.027771675925795172 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 2272 ) : ( 2273 ) ) ) : ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 2274 ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_44 <= 5.500000000000001 ) ? ( 9100 ) : ( 9101 ) ) ) : ( 4551 ) ) ) ) ) ) ) : ( 569 ) ) ) : ( 285 ) ) ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_61 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 78 ) : ( ( ( Feature_45 <= 12.500000000000002 ) ? ( ( ( Feature_9 <= 3.5000000000000004 ) ? ( 316 ) : ( 317 ) ) ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 10.500000000000002 ) ? ( 24 ) : ( ( ( Feature_52 <= 11.500000000000002 ) ? ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_34 <= 2.5000000000000004 ) ? ( 200 ) : ( 201 ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_44 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 58 ) : ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 118 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_1
	

	namespace LGBM_Tree_0_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.06301427344521474 }} ,
				{ 10 ,  {-0.02752662262761811 }} ,
				{ 11 ,  {-0.027473100158570143 }} ,
				{ 13 ,  {0.025750096323136643 }} ,
				{ 16 ,  {0.14806715992215444 }} ,
				{ 24 ,  {-0.02755157317224746 }} ,
				{ 25 ,  {-0.027477657024119174 }} ,
				{ 35 ,  {0.17432263086474437 }} ,
				{ 60 ,  {-0.0274120938474706 }} ,
				{ 69 ,  {0.16869970834801845 }} ,
				{ 115 ,  {-0.027512163195808348 }} ,
				{ 118 ,  {-0.027437193000956997 }} ,
				{ 122 ,  {-0.027473141661563102 }} ,
				{ 123 ,  {-0.027448063827526854 }} ,
				{ 124 ,  {-0.027475482837048443 }} ,
				{ 125 ,  {-0.027537975064131845 }} ,
				{ 126 ,  {-0.027472449381776294 }} ,
				{ 127 ,  {-0.027442309843254388 }} ,
				{ 136 ,  {0.16734788520692173 }} ,
				{ 137 ,  {0.166111438736186 }} ,
				{ 224 ,  {-0.02746958819884058 }} ,
				{ 228 ,  {-0.027467783487206313 }} ,
				{ 232 ,  {-0.02751252757615967 }} ,
				{ 233 ,  {-0.027471591616526597 }} ,
				{ 234 ,  {-0.027477649184853015 }} ,
				{ 235 ,  {-0.027542260418836558 }} ,
				{ 239 ,  {-0.02744337053559794 }} ,
				{ 450 ,  {-0.027529230766828144 }} ,
				{ 451 ,  {-0.027488125176263374 }} ,
				{ 453 ,  {-0.027512179551128047 }} ,
				{ 454 ,  {-0.027532429205045995 }} ,
				{ 455 ,  {-0.0274756716848236 }} ,
				{ 459 ,  {-0.027475561057104615 }} ,
				{ 477 ,  {-0.027451617229075326 }} ,
				{ 904 ,  {-0.02756931221350673 }} ,
				{ 905 ,  {-0.027533902838303606 }} ,
				{ 916 ,  {-0.02751908356683641 }} ,
				{ 917 ,  {-0.02748386572750658 }} ,
				{ 952 ,  {-0.027482004564653453 }} ,
				{ 953 ,  {-0.027513603470871006 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_44 <= 5.500000000000001 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( ( ( Feature_45 <= 10.500000000000002 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_61 <= 1.0000000180025095e-35 ) ? ( 224 ) : ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( Feature_27 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 7.500000000000001 ) ? ( 904 ) : ( 905 ) ) ) : ( 453 ) ) ) : ( ( ( Feature_20 <= 13.500000000000002 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 228 ) : ( ( ( Feature_28 <= 15.500000000000002 ) ? ( ( ( Feature_45 <= 9.500000000000002 ) ? ( 916 ) : ( 917 ) ) ) : ( 459 ) ) ) ) ) : ( 115 ) ) ) ) ) : ( ( ( Feature_27 <= 8.500000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 7.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( ( ( Feature_60 <= 2.5000000000000004 ) ? ( 118 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_37 <= 15.500000000000002 ) ? ( 952 ) : ( 953 ) ) ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 60 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 124 ) : ( 125 ) ) ) : ( ( ( Feature_53 <= 11.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_2
	

	namespace LGBM_Tree_1_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.027695976677705864 }} ,
				{ 13 ,  {0.026310266195826517 }} ,
				{ 15 ,  {0.03863700127872757 }} ,
				{ 18 ,  {0.1682676834932559 }} ,
				{ 19 ,  {0.09054210959590048 }} ,
				{ 20 ,  {-0.0004051018086499449 }} ,
				{ 22 ,  {0.04009128614176326 }} ,
				{ 24 ,  {0.07552408602241434 }} ,
				{ 28 ,  {-0.027638530327292594 }} ,
				{ 29 ,  {-0.027793549673449526 }} ,
				{ 46 ,  {-0.027684908024611384 }} ,
				{ 47 ,  {-0.02763005732632147 }} ,
				{ 50 ,  {0.11689151156917243 }} ,
				{ 86 ,  {-0.013484274539176647 }} ,
				{ 102 ,  {0.15917847808266214 }} ,
				{ 103 ,  {0.1784444100327976 }} ,
				{ 174 ,  {-0.027713811988089344 }} ,
				{ 175 ,  {-0.027670159245621825 }} ,
				{ 337 ,  {-0.027649761215366348 }} ,
				{ 338 ,  {-0.027619545342655833 }} ,
				{ 678 ,  {-0.027655217834444967 }} ,
				{ 679 ,  {-0.027620959379941634 }} ,
				{ 681 ,  {-0.02762105457213805 }} ,
				{ 684 ,  {-0.02773721349114097 }} ,
				{ 685 ,  {-0.02768470381308051 }} ,
				{ 686 ,  {-0.02769974694289873 }} ,
				{ 687 ,  {-0.027639568355146367 }} ,
				{ 1344 ,  {-0.02771894616458799 }} ,
				{ 1345 ,  {-0.027677204900274317 }} ,
				{ 1346 ,  {-0.027638052796917303 }} ,
				{ 1361 ,  {-0.027644711550608766 }} ,
				{ 1364 ,  {-0.027655873326126762 }} ,
				{ 1365 ,  {-0.027709108045703385 }} ,
				{ 1366 ,  {-0.027713147972579295 }} ,
				{ 1367 ,  {-0.027676480495671858 }} ,
				{ 2694 ,  {-0.027650981716971907 }} ,
				{ 2695 ,  {-0.027704764754201607 }} ,
				{ 2721 ,  {-0.02765078704355229 }} ,
				{ 5440 ,  {-0.027665897134526662 }} ,
				{ 5441 ,  {-0.027729082505479508 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 5.500000000000001 ) ? ( 1344 ) : ( 1345 ) ) ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 1346 ) : ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 2694 ) : ( 2695 ) ) ) ) ) ) ) : ( 337 ) ) ) : ( ( ( Feature_28 <= 1.0000000180025095e-35 ) ? ( 338 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 678 ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( ( ( Feature_43 <= 10.500000000000002 ) ? ( 5440 ) : ( 5441 ) ) ) : ( 2721 ) ) ) : ( 1361 ) ) ) : ( 681 ) ) ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 1364 ) : ( 1365 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 1366 ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 684 ) : ( 685 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 686 ) : ( 687 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 86 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_10 <= 13.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 24 ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 50 ) : ( ( ( Feature_18 <= 9.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_2
	

	namespace LGBM_Tree_2_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.12830162577946122 }} ,
				{ 13 ,  {0.006214235007553255 }} ,
				{ 15 ,  {0.06178401928639621 }} ,
				{ 16 ,  {0.000963446466229919 }} ,
				{ 20 ,  {0.011753714544219413 }} ,
				{ 25 ,  {0.05239703346477386 }} ,
				{ 29 ,  {-0.013585554620817175 }} ,
				{ 34 ,  {-0.02765218630050092 }} ,
				{ 42 ,  {-0.027676850401604808 }} ,
				{ 43 ,  {-0.027803832674446135 }} ,
				{ 46 ,  {-0.027704204826261354 }} ,
				{ 49 ,  {0.1548231314947498 }} ,
				{ 70 ,  {-0.0276827672991523 }} ,
				{ 88 ,  {-0.02771952305440342 }} ,
				{ 95 ,  {-0.027646312414126403 }} ,
				{ 96 ,  {0.1675900852343641 }} ,
				{ 112 ,  {-0.027667138212103173 }} ,
				{ 113 ,  {-0.02771984511879634 }} ,
				{ 114 ,  {-0.027696931297063406 }} ,
				{ 115 ,  {-0.027658299219474977 }} ,
				{ 142 ,  {-0.027740445056155444 }} ,
				{ 143 ,  {-0.027697081054449735 }} ,
				{ 178 ,  {-0.02763047364020086 }} ,
				{ 179 ,  {-0.02766397013992111 }} ,
				{ 181 ,  {-0.027642319984626296 }} ,
				{ 188 ,  {-0.027676216468100395 }} ,
				{ 189 ,  {-0.02764658186670102 }} ,
				{ 194 ,  {0.16371420883606652 }} ,
				{ 195 ,  {0.15933552870618348 }} ,
				{ 361 ,  {-0.02772351518997875 }} ,
				{ 367 ,  {-0.02771821567446251 }} ,
				{ 720 ,  {-0.027665746344517135 }} ,
				{ 721 ,  {-0.027696489474471415 }} ,
				{ 729 ,  {-0.02768766747852493 }} ,
				{ 730 ,  {-0.02772278153417498 }} ,
				{ 731 ,  {-0.027682295628214428 }} ,
				{ 732 ,  {-0.027694777025998568 }} ,
				{ 733 ,  {-0.02766561711524368 }} ,
				{ 1456 ,  {-0.02777652281231225 }} ,
				{ 1457 ,  {-0.027731872413543843 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 70 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_59 <= 11.500000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 178 ) : ( 179 ) ) ) ) ) : ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 720 ) : ( 721 ) ) ) : ( 361 ) ) ) : ( 181 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 1456 ) : ( 1457 ) ) ) : ( 729 ) ) ) : ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( ( ( Feature_18 <= 15.500000000000002 ) ? ( ( ( Feature_30 <= 8.500000000000002 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 46 ) : ( ( ( Feature_5 <= 7.500000000000001 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 96 ) : ( ( ( Feature_2 <= 7.500000000000001 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 112 ) : ( 113 ) ) ) : ( ( ( Feature_12 <= 6.500000000000001 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_2
	

	namespace LGBM_Tree_3_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.10554298063581397 }} ,
				{ 10 ,  {0.016852614663435864 }} ,
				{ 16 ,  {0.1489034998893225 }} ,
				{ 22 ,  {1.8470974342633323e-05 }} ,
				{ 25 ,  {-0.027725946585729185 }} ,
				{ 26 ,  {0.019174983944399992 }} ,
				{ 28 ,  {0.04055916714431379 }} ,
				{ 29 ,  {-0.02776241380958896 }} ,
				{ 34 ,  {0.1619928589954084 }} ,
				{ 35 ,  {0.1723912709687721 }} ,
				{ 46 ,  {-0.027650840870488292 }} ,
				{ 47 ,  {-0.027611641318633057 }} ,
				{ 48 ,  {0.06464030072902885 }} ,
				{ 49 ,  {0.16776935098527737 }} ,
				{ 55 ,  {-0.01348756288516542 }} ,
				{ 63 ,  {0.0186593392630528 }} ,
				{ 109 ,  {-0.027828226173100976 }} ,
				{ 124 ,  {0.00850517620044418 }} ,
				{ 216 ,  {-0.0276888012615316 }} ,
				{ 217 ,  {-0.027609820316112733 }} ,
				{ 241 ,  {-0.027647588836840004 }} ,
				{ 242 ,  {-0.027572937244697688 }} ,
				{ 243 ,  {-0.027603482900468403 }} ,
				{ 244 ,  {-0.02761706723723541 }} ,
				{ 246 ,  {-0.02761021531634212 }} ,
				{ 250 ,  {-0.027692081368278894 }} ,
				{ 480 ,  {-0.02757605097751713 }} ,
				{ 481 ,  {-0.02762246147535706 }} ,
				{ 490 ,  {-0.027613493119356982 }} ,
				{ 494 ,  {-0.02766501826900347 }} ,
				{ 495 ,  {-0.027625359887392842 }} ,
				{ 983 ,  {-0.027641288839933782 }} ,
				{ 1004 ,  {-0.027653762530841033 }} ,
				{ 1005 ,  {-0.027608662983286816 }} ,
				{ 1006 ,  {-0.02761567154247866 }} ,
				{ 1007 ,  {-0.02758171950542379 }} ,
				{ 3928 ,  {-0.02762938640068828 }} ,
				{ 3929 ,  {-0.02767277673779922 }} ,
				{ 3930 ,  {-0.027710106354990743 }} ,
				{ 3931 ,  {-0.027664624410497798 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_19 <= 4.500000000000001 ) ? ( ( ( Feature_45 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_29 <= 8.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 10 ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( ( ( Feature_61 <= 12.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_58 <= 13.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 9.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 5.500000000000001 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_13 <= 3.5000000000000004 ) ? ( 244 ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 490 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 3928 ) : ( 3929 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 3930 ) : ( 3931 ) ) ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 246 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 124 ) : ( ( ( Feature_26 <= 9.500000000000002 ) ? ( 250 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 1004 ) : ( 1005 ) ) ) : ( ( ( Feature_12 <= 6.500000000000001 ) ? ( 1006 ) : ( 1007 ) ) ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_2
	

	namespace LGBM_Tree_4_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.05369669107901187 }} ,
				{ 12 ,  {0.1600393272722019 }} ,
				{ 17 ,  {0.023043568611706054 }} ,
				{ 18 ,  {-0.028201602045565967 }} ,
				{ 20 ,  {-0.009524922725035433 }} ,
				{ 22 ,  {0.050441694343217616 }} ,
				{ 23 ,  {-0.027895794528532514 }} ,
				{ 26 ,  {0.15791934766179785 }} ,
				{ 27 ,  {0.1568187620472291 }} ,
				{ 32 ,  {-0.014022252787840554 }} ,
				{ 39 ,  {0.007793784967677024 }} ,
				{ 43 ,  {-0.019478194845352695 }} ,
				{ 67 ,  {-0.027807133440384543 }} ,
				{ 76 ,  {0.17057451653335334 }} ,
				{ 77 ,  {0.12320453882146204 }} ,
				{ 132 ,  {-0.027761439136289024 }} ,
				{ 133 ,  {-0.027718962473593147 }} ,
				{ 336 ,  {-0.02778074627144039 }} ,
				{ 338 ,  {-0.0276918493057278 }} ,
				{ 343 ,  {-0.02768306287186158 }} ,
				{ 674 ,  {-0.027757770528241712 }} ,
				{ 675 ,  {-0.027730808881796916 }} ,
				{ 678 ,  {-0.027737763705354364 }} ,
				{ 683 ,  {-0.02777520031908916 }} ,
				{ 684 ,  {-0.02772831529552762 }} ,
				{ 1358 ,  {-0.027674830654532624 }} ,
				{ 1359 ,  {-0.027738420559544365 }} ,
				{ 1360 ,  {-0.027775703555694836 }} ,
				{ 1361 ,  {-0.027820391169986837 }} ,
				{ 1363 ,  {-0.027734934477580093 }} ,
				{ 1370 ,  {-0.027736575349242593 }} ,
				{ 1371 ,  {-0.02781084180100385 }} ,
				{ 2725 ,  {-0.02779727981541948 }} ,
				{ 2728 ,  {-0.02773789437327706 }} ,
				{ 2729 ,  {-0.027692128380293796 }} ,
				{ 2730 ,  {-0.027732582917233725 }} ,
				{ 2731 ,  {-0.027779752933730764 }} ,
				{ 5449 ,  {-0.027738539540220344 }} ,
				{ 10896 ,  {-0.027751407802442687 }} ,
				{ 10897 ,  {-0.027794030744179046 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_61 <= 12.500000000000002 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 7.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_52 <= 1.5000000000000002 ) ? ( 336 ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( Feature_60 <= 2.5000000000000004 ) ? ( 338 ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 678 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 1360 ) : ( 1361 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( 10896 ) : ( 10897 ) ) ) : ( 5449 ) ) ) : ( 2725 ) ) ) : ( 1363 ) ) ) ) ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 15.500000000000002 ) ? ( 2728 ) : ( 2729 ) ) ) : ( ( ( Feature_50 <= 11.500000000000002 ) ? ( 2730 ) : ( 2731 ) ) ) ) ) : ( 683 ) ) ) ) ) : ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 684 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 1370 ) : ( 1371 ) ) ) ) ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_44 <= 15.500000000000002 ) ? ( 12 ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_2
	

	namespace LGBM_Tree_5_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {0.037491271093943124 }} ,
				{ 15 ,  {0.06133905438604967 }} ,
				{ 16 ,  {0.007988862494793301 }} ,
				{ 18 ,  {-0.027630891480561328 }} ,
				{ 19 ,  {0.11046104207569254 }} ,
				{ 20 ,  {0.14098250587893177 }} ,
				{ 27 ,  {-0.002643377772343879 }} ,
				{ 28 ,  {-0.027650523724263323 }} ,
				{ 34 ,  {-0.02786444283761488 }} ,
				{ 42 ,  {0.1662589398359483 }} ,
				{ 50 ,  {-0.02758851471764382 }} ,
				{ 51 ,  {-0.027544217122004507 }} ,
				{ 58 ,  {-0.02759095212384671 }} ,
				{ 70 ,  {-0.027715352604424856 }} ,
				{ 86 ,  {0.16287657447836756 }} ,
				{ 87 ,  {0.16152935952248196 }} ,
				{ 104 ,  {-0.027679492983880616 }} ,
				{ 105 ,  {-0.027621397397105674 }} ,
				{ 106 ,  {-0.027630699781513036 }} ,
				{ 107 ,  {-0.027592153309840217 }} ,
				{ 118 ,  {-0.027652452090867603 }} ,
				{ 119 ,  {-0.027601657212983178 }} ,
				{ 142 ,  {-0.027626844578066315 }} ,
				{ 196 ,  {-0.02761992439863096 }} ,
				{ 197 ,  {-0.027588550354657987 }} ,
				{ 198 ,  {-0.027594836854152822 }} ,
				{ 199 ,  {-0.02755196462350558 }} ,
				{ 286 ,  {-0.027590858399911756 }} ,
				{ 287 ,  {-0.027548280789735948 }} ,
				{ 384 ,  {-0.027597937360574167 }} ,
				{ 385 ,  {-0.02755094322914667 }} ,
				{ 386 ,  {-0.027591816297174734 }} ,
				{ 388 ,  {-0.02761976239853832 }} ,
				{ 389 ,  {-0.027589820474731547 }} ,
				{ 774 ,  {-0.02767086720786079 }} ,
				{ 775 ,  {-0.02761726808739818 }} ,
				{ 780 ,  {-0.027645229794768963 }} ,
				{ 781 ,  {-0.027599437581280147 }} ,
				{ 782 ,  {-0.027683265060327464 }} ,
				{ 783 ,  {-0.02762385510273775 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 70 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 142 ) : ( ( ( Feature_50 <= 15.500000000000002 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 20 ) : ( ( ( Feature_25 <= 2.5000000000000004 ) ? ( 42 ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_30 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 384 ) : ( 385 ) ) ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 386 ) : ( ( ( Feature_50 <= 5.500000000000001 ) ? ( 774 ) : ( 775 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 388 ) : ( 389 ) ) ) : ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 780 ) : ( 781 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 782 ) : ( 783 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 7.500000000000001 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 58 ) : ( ( ( Feature_53 <= 11.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_2
	

	namespace LGBM_Tree_6_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.010263114566041112 }} ,
				{ 8 ,  {0.02620612473596681 }} ,
				{ 10 ,  {0.001069265262350168 }} ,
				{ 15 ,  {-0.013097156637040667 }} ,
				{ 22 ,  {0.08791166936297003 }} ,
				{ 37 ,  {-0.027631522200035286 }} ,
				{ 38 ,  {-0.027509189349285958 }} ,
				{ 39 ,  {-0.02754794602114534 }} ,
				{ 57 ,  {-0.013007618709344243 }} ,
				{ 72 ,  {-0.027511231855395137 }} ,
				{ 73 ,  {-0.027579669130876807 }} ,
				{ 92 ,  {0.15549087491541116 }} ,
				{ 94 ,  {0.17285294336408852 }} ,
				{ 95 ,  {0.16674519278453237 }} ,
				{ 112 ,  {-0.027580575297220057 }} ,
				{ 113 ,  {-0.027630463618984743 }} ,
				{ 119 ,  {-0.027527507594392576 }} ,
				{ 186 ,  {0.16543048044515943 }} ,
				{ 187 ,  {0.16356571172584944 }} ,
				{ 233 ,  {-0.027526255554101833 }} ,
				{ 236 ,  {-0.02752271805317552 }} ,
				{ 465 ,  {-0.027540518904502143 }} ,
				{ 469 ,  {-0.027625122777601614 }} ,
				{ 470 ,  {-0.027563126825665304 }} ,
				{ 937 ,  {-0.027615026324304938 }} ,
				{ 942 ,  {-0.027638172584533823 }} ,
				{ 943 ,  {-0.027570981098111232 }} ,
				{ 948 ,  {-0.027556886843228996 }} ,
				{ 949 ,  {-0.027523853890806416 }} ,
				{ 950 ,  {-0.02759017518011611 }} ,
				{ 1856 ,  {-0.027575661569079226 }} ,
				{ 1858 ,  {-0.02754739977814994 }} ,
				{ 1872 ,  {-0.027539525338895907 }} ,
				{ 1873 ,  {-0.027591575612359587 }} ,
				{ 1902 ,  {-0.027593137323594044 }} ,
				{ 1903 ,  {-0.027556522978324546 }} ,
				{ 3714 ,  {-0.027525995997252767 }} ,
				{ 3715 ,  {-0.02756592317898346 }} ,
				{ 3718 ,  {-0.027635129625177574 }} ,
				{ 3719 ,  {-0.027575175222026144 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 1.5000000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 22 ) : ( ( ( Feature_44 <= 5.500000000000001 ) ? ( ( ( Feature_25 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( ( ( Feature_35 <= 14.500000000000002 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_30 <= 9.500000000000002 ) ? ( ( ( Feature_62 <= 6.500000000000001 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 1856 ) : ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 3714 ) : ( 3715 ) ) ) ) ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 1858 ) : ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 3718 ) : ( 3719 ) ) ) ) ) ) ) : ( 465 ) ) ) : ( 233 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 1872 ) : ( 1873 ) ) ) : ( 937 ) ) ) : ( 469 ) ) ) : ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 470 ) : ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 236 ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 948 ) : ( 949 ) ) ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 950 ) : ( ( ( Feature_28 <= 1.5000000000000002 ) ? ( 1902 ) : ( 1903 ) ) ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_2
	

	namespace LGBM_Tree_7_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.03854704359122821 }} ,
				{ 8 ,  {0.04508508832270933 }} ,
				{ 18 ,  {0.13167443227214065 }} ,
				{ 20 ,  {0.14454490533218922 }} ,
				{ 21 ,  {-0.0023414965760332447 }} ,
				{ 23 ,  {-0.01363377072850183 }} ,
				{ 25 ,  {0.029427018152427067 }} ,
				{ 38 ,  {0.18445694484545638 }} ,
				{ 44 ,  {-0.02765859240250882 }} ,
				{ 45 ,  {-0.028017308441592937 }} ,
				{ 48 ,  {-0.027619253458875493 }} ,
				{ 49 ,  {-0.02753018029168698 }} ,
				{ 54 ,  {-0.0036005983744355646 }} ,
				{ 78 ,  {0.15947342549377488 }} ,
				{ 79 ,  {0.1670992531104854 }} ,
				{ 110 ,  {-0.027580833499561835 }} ,
				{ 111 ,  {-0.0275041708260923 }} ,
				{ 210 ,  {-0.027463222856717186 }} ,
				{ 211 ,  {-0.027518831238049664 }} ,
				{ 212 ,  {-0.02750813459127534 }} ,
				{ 418 ,  {-0.027505982992457184 }} ,
				{ 419 ,  {-0.02753756914928084 }} ,
				{ 427 ,  {-0.027503917036592152 }} ,
				{ 428 ,  {-0.027446856850593254 }} ,
				{ 429 ,  {-0.027483467338946712 }} ,
				{ 430 ,  {-0.027529750657135088 }} ,
				{ 431 ,  {-0.027499594738229178 }} ,
				{ 834 ,  {-0.02752276097156188 }} ,
				{ 852 ,  {-0.027519564083788528 }} ,
				{ 1664 ,  {-0.02760777103832786 }} ,
				{ 1665 ,  {-0.027563106476889955 }} ,
				{ 1666 ,  {-0.02756607365994919 }} ,
				{ 1706 ,  {-0.027527237261651863 }} ,
				{ 1707 ,  {-0.027569948883997077 }} ,
				{ 3334 ,  {-0.027513130717270923 }} ,
				{ 3335 ,  {-0.027552477330110917 }} ,
				{ 3340 ,  {-0.027542644755619863 }} ,
				{ 3341 ,  {-0.02758728972873827 }} ,
				{ 3342 ,  {-0.027511039520605192 }} ,
				{ 3343 ,  {-0.027546343701247263 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 9.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 38 ) : ( ( ( Feature_43 <= 12.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_37 <= 14.500000000000002 ) ? ( ( ( Feature_61 <= 3.5000000000000004 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_35 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 1664 ) : ( 1665 ) ) ) : ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 1666 ) : ( ( ( Feature_59 <= 12.500000000000002 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 834 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 3340 ) : ( 3341 ) ) ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 3342 ) : ( 3343 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 4.500000000000001 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( 212 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 852 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 1706 ) : ( 1707 ) ) ) ) ) : ( 427 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 428 ) : ( 429 ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 54 ) : ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_2
	

	namespace LGBM_Tree_8_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 18 ,  {0.10060162883629219 }} ,
				{ 20 ,  {0.04122197601587388 }} ,
				{ 23 ,  {0.0015261710581787058 }} ,
				{ 25 ,  {-0.02742055187486206 }} ,
				{ 26 ,  {-0.027417590486908967 }} ,
				{ 27 ,  {-0.027377065931882855 }} ,
				{ 29 ,  {-0.012489817053550203 }} ,
				{ 31 ,  {0.09207149687149561 }} ,
				{ 33 ,  {0.03221536294600583 }} ,
				{ 34 ,  {-0.011688385968455998 }} ,
				{ 38 ,  {0.010637004583286177 }} ,
				{ 39 ,  {-0.02748097975383041 }} ,
				{ 42 ,  {-0.01251747999003525 }} ,
				{ 44 ,  {0.026746151362523132 }} ,
				{ 57 ,  {-0.0274224036568677 }} ,
				{ 60 ,  {-0.02746408683476442 }} ,
				{ 61 ,  {-0.02767143222117473 }} ,
				{ 64 ,  {-0.027507172684349126 }} ,
				{ 65 ,  {-0.027429280708999543 }} ,
				{ 86 ,  {-0.0275855949556244 }} ,
				{ 91 ,  {0.12019395655644344 }} ,
				{ 96 ,  {-0.02740945305632636 }} ,
				{ 97 ,  {-0.027452433950967733 }} ,
				{ 98 ,  {-0.027429031171430793 }} ,
				{ 112 ,  {-0.02742771154729383 }} ,
				{ 142 ,  {-0.02745694240201467 }} ,
				{ 143 ,  {-0.02751933215482449 }} ,
				{ 174 ,  {-0.027501148343703957 }} ,
				{ 175 ,  {-0.02743606176198827 }} ,
				{ 181 ,  {0.16729027538654193 }} ,
				{ 198 ,  {-0.02748094126269553 }} ,
				{ 199 ,  {-0.027444373734164487 }} ,
				{ 226 ,  {-0.027444803958455322 }} ,
				{ 227 ,  {-0.02749542567442781 }} ,
				{ 280 ,  {-0.027421348162744427 }} ,
				{ 281 ,  {-0.027378323419567904 }} ,
				{ 282 ,  {-0.027476147973813397 }} ,
				{ 283 ,  {-0.027414839653188156 }} ,
				{ 360 ,  {0.18772327311013104 }} ,
				{ 361 ,  {0.17697186438593987 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 34 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 11.500000000000002 ) ? ( 18 ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_12 <= 5.500000000000001 ) ? ( 20 ) : ( ( ( Feature_61 <= 1.5000000000000002 ) ? ( 42 ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 86 ) : ( ( ( Feature_2 <= 7.500000000000001 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 44 ) : ( ( ( Feature_58 <= 8.500000000000002 ) ? ( ( ( Feature_37 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 8.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( 181 ) ) ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 98 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 6.500000000000001 ) ? ( 112 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_10 <= 9.500000000000002 ) ? ( ( ( Feature_61 <= 11.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_2
	

	namespace LGBM_Tree_9_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.08773828206117652 }} ,
				{ 13 ,  {-0.019832848960452176 }} ,
				{ 15 ,  {0.0070009032585798955 }} ,
				{ 22 ,  {-0.027696503238186607 }} ,
				{ 23 ,  {-0.027739125953249805 }} ,
				{ 25 ,  {0.01341967384817153 }} ,
				{ 28 ,  {-0.027733033640913275 }} ,
				{ 32 ,  {0.05577970357858413 }} ,
				{ 33 ,  {-0.027814531036357115 }} ,
				{ 34 ,  {0.008976093191522785 }} ,
				{ 36 ,  {-0.013561062582644001 }} ,
				{ 37 ,  {-0.027733550113844735 }} ,
				{ 49 ,  {0.09542126391294788 }} ,
				{ 59 ,  {-0.027641629709002608 }} ,
				{ 70 ,  {-0.002317413048840461 }} ,
				{ 77 ,  {-0.027711081405577705 }} ,
				{ 96 ,  {0.14233062648138012 }} ,
				{ 116 ,  {-0.027650325987409203 }} ,
				{ 117 ,  {-0.02769912081268083 }} ,
				{ 152 ,  {-0.027653245217121744 }} ,
				{ 156 ,  {-0.02765276013460366 }} ,
				{ 157 ,  {-0.027701010657527544 }} ,
				{ 158 ,  {-0.027648029895384098 }} ,
				{ 194 ,  {0.1759640064249581 }} ,
				{ 195 ,  {0.15614311586206697 }} ,
				{ 285 ,  {-0.014670152419021157 }} ,
				{ 286 ,  {-0.027748074164988586 }} ,
				{ 287 ,  {0.00010791003047123617 }} ,
				{ 306 ,  {-0.02766971718655163 }} ,
				{ 307 ,  {-0.02770471711597543 }} ,
				{ 318 ,  {-0.027634031437565317 }} ,
				{ 319 ,  {-0.027586900674914417 }} ,
				{ 568 ,  {-0.027626694255862356 }} ,
				{ 1139 ,  {-0.027656156016436718 }} ,
				{ 4553 ,  {-0.027653535915168753 }} ,
				{ 4555 ,  {-0.027656297422539056 }} ,
				{ 9104 ,  {-0.027673238628759762 }} ,
				{ 9105 ,  {-0.027711934823351693 }} ,
				{ 9108 ,  {-0.02769886981197649 }} ,
				{ 9109 ,  {-0.027748000418166854 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 2.5000000000000004 ) ? ( ( ( Feature_36 <= 12.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_12 <= 5.500000000000001 ) ? ( 568 ) : ( ( ( Feature_34 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_35 <= 8.500000000000002 ) ? ( 9104 ) : ( 9105 ) ) ) : ( 4553 ) ) ) : ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 9108 ) : ( 9109 ) ) ) : ( 4555 ) ) ) ) ) : ( 1139 ) ) ) ) ) : ( 285 ) ) ) : ( ( ( Feature_13 <= 14.500000000000002 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 13.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_25 <= 6.500000000000001 ) ? ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 152 ) : ( ( ( Feature_34 <= 14.500000000000002 ) ? ( 306 ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_43 <= 13.500000000000002 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 158 ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 318 ) : ( 319 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 10 ) : ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 96 ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 28 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_2
	

	namespace LGBM_Tree_0_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.05567080173775099 }} ,
				{ 10 ,  {-0.027465484180173295 }} ,
				{ 11 ,  {-0.027384348005824927 }} ,
				{ 13 ,  {0.025343730216903622 }} ,
				{ 18 ,  {0.12360310878992685 }} ,
				{ 24 ,  {-0.02741626672837672 }} ,
				{ 25 ,  {-0.02764681904835596 }} ,
				{ 39 ,  {0.1503168892237545 }} ,
				{ 59 ,  {-0.027352880550888976 }} ,
				{ 60 ,  {-0.027348956851275648 }} ,
				{ 63 ,  {-0.02733718349978319 }} ,
				{ 77 ,  {0.1450003349061183 }} ,
				{ 117 ,  {-0.027361917253213904 }} ,
				{ 123 ,  {-0.02739382992253561 }} ,
				{ 124 ,  {-0.0273587700788201 }} ,
				{ 125 ,  {-0.02738980511563188 }} ,
				{ 153 ,  {0.14249408623296625 }} ,
				{ 228 ,  {-0.02740919773931341 }} ,
				{ 229 ,  {-0.027348081168810625 }} ,
				{ 230 ,  {-0.0273927434835895 }} ,
				{ 244 ,  {-0.02738669440423482 }} ,
				{ 245 ,  {-0.027443088426984653 }} ,
				{ 304 ,  {0.1404561671825796 }} ,
				{ 305 ,  {0.14182719863582607 }} ,
				{ 448 ,  {-0.02735815942945234 }} ,
				{ 449 ,  {-0.027421793284437303 }} ,
				{ 450 ,  {-0.02750468223504998 }} ,
				{ 451 ,  {-0.027428503974508096 }} ,
				{ 452 ,  {-0.02752004412745602 }} ,
				{ 453 ,  {-0.027456766375968052 }} ,
				{ 454 ,  {-0.027412754028376375 }} ,
				{ 455 ,  {-0.027470612179762294 }} ,
				{ 462 ,  {-0.02749179686960106 }} ,
				{ 463 ,  {-0.027415453271625402 }} ,
				{ 465 ,  {-0.027439506186090475 }} ,
				{ 467 ,  {-0.027399133606560377 }} ,
				{ 928 ,  {-0.027401083208140373 }} ,
				{ 929 ,  {-0.02737467149739048 }} ,
				{ 932 ,  {-0.02743638075211466 }} ,
				{ 933 ,  {-0.02749818913437137 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 8 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 18 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 14.500000000000002 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 304 ) : ( 305 ) ) ) : ( 153 ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 448 ) : ( 449 ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_34 <= 3.5000000000000004 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( Feature_36 <= 15.500000000000002 ) ? ( 230 ) : ( ( ( Feature_26 <= 11.500000000000002 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 7.500000000000001 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_44 <= 15.500000000000002 ) ? ( ( ( Feature_62 <= 5.500000000000001 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 9.500000000000002 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_59 <= 9.500000000000002 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_3
	

	namespace LGBM_Tree_1_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.02760631029982388 }} ,
				{ 12 ,  {0.045699669918692204 }} ,
				{ 15 ,  {0.036835297427122375 }} ,
				{ 18 ,  {0.14623672438977092 }} ,
				{ 19 ,  {0.08017632182433297 }} ,
				{ 20 ,  {-0.00045224393706422 }} ,
				{ 22 ,  {0.03774753110311696 }} ,
				{ 26 ,  {0.08210850756210895 }} ,
				{ 28 ,  {-0.027543654445229673 }} ,
				{ 29 ,  {-0.027721462776143638 }} ,
				{ 46 ,  {-0.027606447447664308 }} ,
				{ 47 ,  {-0.027528680294256785 }} ,
				{ 54 ,  {0.12407276208362711 }} ,
				{ 87 ,  {-0.013203888844032936 }} ,
				{ 110 ,  {0.14028691296560497 }} ,
				{ 111 ,  {0.1501424654540901 }} ,
				{ 172 ,  {-0.027649656422299152 }} ,
				{ 173 ,  {-0.027580021602057133 }} ,
				{ 340 ,  {-0.027627483116767278 }} ,
				{ 343 ,  {-0.02751844128520067 }} ,
				{ 675 ,  {-0.027682027816477675 }} ,
				{ 676 ,  {-0.027602939575416936 }} ,
				{ 677 ,  {-0.02753928555975201 }} ,
				{ 682 ,  {-0.027587237736929685 }} ,
				{ 683 ,  {-0.027536541479856944 }} ,
				{ 684 ,  {-0.027559773597911192 }} ,
				{ 685 ,  {-0.027513529193615674 }} ,
				{ 1344 ,  {-0.027525712155044475 }} ,
				{ 1345 ,  {-0.02759488834862694 }} ,
				{ 1346 ,  {-0.027677620205772593 }} ,
				{ 1347 ,  {-0.027588204489109133 }} ,
				{ 1349 ,  {-0.027649332087062328 }} ,
				{ 1356 ,  {-0.0275816540163991 }} ,
				{ 1357 ,  {-0.0275451321158149 }} ,
				{ 1359 ,  {-0.027579025350670527 }} ,
				{ 2696 ,  {-0.027577237459309612 }} ,
				{ 2697 ,  {-0.02763635095416139 }} ,
				{ 2716 ,  {-0.02767972686486618 }} ,
				{ 5434 ,  {-0.02759776741032012 }} ,
				{ 5435 ,  {-0.02765229897356311 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_61 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 1344 ) : ( 1345 ) ) ) : ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 1346 ) : ( 1347 ) ) ) ) ) : ( ( ( Feature_43 <= 11.500000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 2696 ) : ( 2697 ) ) ) : ( 1349 ) ) ) : ( 675 ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 1356 ) : ( 1357 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 2716 ) : ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 5434 ) : ( 5435 ) ) ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 7.500000000000001 ) ? ( 340 ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 8.500000000000002 ) ? ( 684 ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 15.500000000000002 ) ? ( 12 ) : ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 26 ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( 54 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_3
	

	namespace LGBM_Tree_2_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.11238733939833541 }} ,
				{ 15 ,  {0.057046948571711935 }} ,
				{ 16 ,  {0.0009416138328053072 }} ,
				{ 21 ,  {0.012150290361955217 }} ,
				{ 24 ,  {0.07308315060434582 }} ,
				{ 26 ,  {0.056655831598291254 }} ,
				{ 27 ,  {-0.027839314181980237 }} ,
				{ 28 ,  {-0.013143361071872925 }} ,
				{ 40 ,  {-0.027578918336690406 }} ,
				{ 41 ,  {-0.027639339554629373 }} ,
				{ 50 ,  {0.15035898826740918 }} ,
				{ 59 ,  {-0.027571067770835046 }} ,
				{ 68 ,  {-0.027607002664881527 }} ,
				{ 69 ,  {-0.027547771857909176 }} ,
				{ 71 ,  {-0.027660875273555225 }} ,
				{ 88 ,  {-0.027649595484177225 }} ,
				{ 92 ,  {-0.02753490529531948 }} ,
				{ 94 ,  {-0.02758431761291785 }} ,
				{ 95 ,  {-0.027643504814749194 }} ,
				{ 103 ,  {0.1252718219609784 }} ,
				{ 116 ,  {-0.027605339753169512 }} ,
				{ 117 ,  {-0.027669714937555042 }} ,
				{ 140 ,  {-0.027615146660426845 }} ,
				{ 141 ,  {-0.027564199694644877 }} ,
				{ 178 ,  {-0.027520343217448437 }} ,
				{ 179 ,  {-0.027566511281951974 }} ,
				{ 181 ,  {-0.027548621484446253 }} ,
				{ 186 ,  {-0.02758548240908276 }} ,
				{ 187 ,  {-0.027547641358179265 }} ,
				{ 204 ,  {0.13985045837231289 }} ,
				{ 205 ,  {0.13740451143589658 }} ,
				{ 360 ,  {-0.027592410827101982 }} ,
				{ 361 ,  {-0.02766538677954419 }} ,
				{ 365 ,  {-0.027591683291516674 }} ,
				{ 366 ,  {-0.027602650472699376 }} ,
				{ 367 ,  {-0.027644489903534138 }} ,
				{ 1456 ,  {-0.027673687979273415 }} ,
				{ 1457 ,  {-0.027724558996515675 }} ,
				{ 1458 ,  {-0.02759663499948809 }} ,
				{ 1459 ,  {-0.027696050709197152 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 178 ) : ( 179 ) ) ) ) ) : ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( 181 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_41 <= 3.5000000000000004 ) ? ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_10 <= 11.500000000000002 ) ? ( 1456 ) : ( 1457 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1458 ) : ( 1459 ) ) ) ) ) : ( 365 ) ) ) : ( ( ( Feature_18 <= 15.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 92 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 12.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_28 <= 10.500000000000002 ) ? ( 50 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( ( ( Feature_51 <= 15.500000000000002 ) ? ( 204 ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_63 <= 1.5000000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( ( ( Feature_4 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_3
	

	namespace LGBM_Tree_3_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.08730877456817088 }} ,
				{ 10 ,  {0.016206471110118466 }} ,
				{ 16 ,  {0.11964038637103354 }} ,
				{ 23 ,  {0.0004662090255001608 }} ,
				{ 26 ,  {0.11571080049923269 }} ,
				{ 27 ,  {-0.027628757607730866 }} ,
				{ 28 ,  {-0.02770751030502718 }} ,
				{ 29 ,  {0.03934233839671383 }} ,
				{ 34 ,  {0.1417556588079434 }} ,
				{ 35 ,  {0.14814202403245752 }} ,
				{ 44 ,  {-0.027716100872601776 }} ,
				{ 48 ,  {0.05342239223545381 }} ,
				{ 49 ,  {-0.027527125804552657 }} ,
				{ 50 ,  {-0.027839808146556268 }} ,
				{ 63 ,  {0.01806226234112003 }} ,
				{ 90 ,  {-0.027600815623155625 }} ,
				{ 102 ,  {-0.027655572960596942 }} ,
				{ 103 ,  {-0.027536973196042203 }} ,
				{ 121 ,  {-0.027494816294065208 }} ,
				{ 124 ,  {0.00905363442963959 }} ,
				{ 182 ,  {-0.027555125286602575 }} ,
				{ 183 ,  {-0.027494611495270185 }} ,
				{ 241 ,  {-0.0274949893149852 }} ,
				{ 246 ,  {-0.02751911872007964 }} ,
				{ 250 ,  {-0.02767018663074545 }} ,
				{ 480 ,  {-0.027509512250903336 }} ,
				{ 481 ,  {-0.02760381116100602 }} ,
				{ 488 ,  {-0.027561360953909417 }} ,
				{ 490 ,  {-0.027506312251475325 }} ,
				{ 494 ,  {-0.027599744016846173 }} ,
				{ 495 ,  {-0.027538013426073635 }} ,
				{ 978 ,  {-0.027587404257369903 }} ,
				{ 979 ,  {-0.027634771809741127 }} ,
				{ 982 ,  {-0.02760711648821887 }} ,
				{ 983 ,  {-0.02753117066448373 }} ,
				{ 1005 ,  {-0.027514158462946914 }} ,
				{ 1006 ,  {-0.027523141402531467 }} ,
				{ 1007 ,  {-0.027472067000765626 }} ,
				{ 2008 ,  {-0.0275467141820921 }} ,
				{ 2009 ,  {-0.027624674907696236 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 10 ) : ( ( ( Feature_27 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 44 ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 90 ) : ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( 182 ) : ( 183 ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 50 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_59 <= 9.500000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_54 <= 2.5000000000000004 ) ? ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 488 ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( 978 ) : ( 979 ) ) ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 490 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 982 ) : ( 983 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 246 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 124 ) : ( ( ( Feature_53 <= 5.500000000000001 ) ? ( 250 ) : ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 2008 ) : ( 2009 ) ) ) : ( 1005 ) ) ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 1006 ) : ( 1007 ) ) ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_3
	

	namespace LGBM_Tree_4_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.04152449940107919 }} ,
				{ 12 ,  {0.12799635703712794 }} ,
				{ 17 ,  {0.02201543148527446 }} ,
				{ 18 ,  {-0.028098657993096455 }} ,
				{ 20 ,  {-0.009282220707792192 }} ,
				{ 22 ,  {0.04884713859160532 }} ,
				{ 23 ,  {-0.027856534534268874 }} ,
				{ 26 ,  {0.1406832399159318 }} ,
				{ 27 ,  {0.13551075431852258 }} ,
				{ 32 ,  {-0.013660167933107027 }} ,
				{ 39 ,  {0.007396096531841348 }} ,
				{ 43 ,  {-0.01925055298314705 }} ,
				{ 67 ,  {-0.027745735672614593 }} ,
				{ 76 ,  {0.14530626369940186 }} ,
				{ 77 ,  {0.10867206841358486 }} ,
				{ 133 ,  {-0.027623563865221475 }} ,
				{ 264 ,  {-0.02771098982006491 }} ,
				{ 265 ,  {-0.02764649719979219 }} ,
				{ 337 ,  {-0.027637268439753167 }} ,
				{ 338 ,  {-0.027586687404912266 }} ,
				{ 343 ,  {-0.027598855575808073 }} ,
				{ 672 ,  {-0.02771807164328249 }} ,
				{ 673 ,  {-0.02764790672680705 }} ,
				{ 678 ,  {-0.02764193584611141 }} ,
				{ 679 ,  {-0.027604510925209283 }} ,
				{ 1360 ,  {-0.027689476672634362 }} ,
				{ 1361 ,  {-0.027632656132424074 }} ,
				{ 1362 ,  {-0.027741177305146428 }} ,
				{ 1365 ,  {-0.027668780529977968 }} ,
				{ 1366 ,  {-0.02769841709126692 }} ,
				{ 1367 ,  {-0.02764921998600266 }} ,
				{ 1369 ,  {-0.027631209945870306 }} ,
				{ 1370 ,  {-0.027666304066260583 }} ,
				{ 1371 ,  {-0.027727966519912474 }} ,
				{ 2726 ,  {-0.027677390555776844 }} ,
				{ 2727 ,  {-0.027712147700901912 }} ,
				{ 2728 ,  {-0.027589911258161876 }} ,
				{ 2729 ,  {-0.027646855886473278 }} ,
				{ 2736 ,  {-0.02763806416206088 }} ,
				{ 2737 ,  {-0.027703109045147802 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 7.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 672 ) : ( 673 ) ) ) : ( 337 ) ) ) : ( ( ( Feature_60 <= 2.5000000000000004 ) ? ( 338 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( 678 ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 1360 ) : ( 1361 ) ) ) : ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 1362 ) : ( ( ( Feature_20 <= 15.500000000000002 ) ? ( 2726 ) : ( 2727 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 13.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( 2728 ) : ( 2729 ) ) ) : ( 1365 ) ) ) : ( ( ( Feature_19 <= 15.500000000000002 ) ? ( 1366 ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 2736 ) : ( 2737 ) ) ) : ( 1369 ) ) ) : ( ( ( Feature_45 <= 9.500000000000002 ) ? ( 1370 ) : ( 1371 ) ) ) ) ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( ( ( Feature_33 <= 10.500000000000002 ) ? ( 12 ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_3
	

	namespace LGBM_Tree_5_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {0.0356946100890785 }} ,
				{ 15 ,  {0.05683230653659871 }} ,
				{ 16 ,  {0.1001576221365087 }} ,
				{ 17 ,  {-0.02758416932396304 }} ,
				{ 18 ,  {-0.000848366400439294 }} ,
				{ 21 ,  {0.12424127129488825 }} ,
				{ 24 ,  {0.0009996043680219808 }} ,
				{ 28 ,  {-0.027588715336631705 }} ,
				{ 39 ,  {-0.02764534686532402 }} ,
				{ 40 ,  {0.14321349961594407 }} ,
				{ 50 ,  {-0.027494395940993108 }} ,
				{ 55 ,  {-0.027752419113013523 }} ,
				{ 59 ,  {-0.027488167085627575 }} ,
				{ 82 ,  {0.14073374597639526 }} ,
				{ 83 ,  {0.13856522037295144 }} ,
				{ 102 ,  {-0.027615410410411406 }} ,
				{ 103 ,  {-0.027531516406224893 }} ,
				{ 104 ,  {-0.027566333523581676 }} ,
				{ 105 ,  {-0.027476242852341872 }} ,
				{ 108 ,  {-0.027584145331164073 }} ,
				{ 109 ,  {-0.027517870873641822 }} ,
				{ 117 ,  {-0.027507970395986455 }} ,
				{ 152 ,  {-0.027612137653059123 }} ,
				{ 153 ,  {-0.027534055606999404 }} ,
				{ 154 ,  {-0.027526545060275156 }} ,
				{ 155 ,  {-0.027487708921248563 }} ,
				{ 232 ,  {-0.027589047689393693 }} ,
				{ 233 ,  {-0.027512291269555164 }} ,
				{ 426 ,  {-0.02761432057899161 }} ,
				{ 428 ,  {-0.027578558713677412 }} ,
				{ 429 ,  {-0.027511132804311385 }} ,
				{ 430 ,  {-0.027515216703783953 }} ,
				{ 431 ,  {-0.027442502413603156 }} ,
				{ 848 ,  {-0.027556368653163438 }} ,
				{ 849 ,  {-0.027495412839704254 }} ,
				{ 850 ,  {-0.027448803600139474 }} ,
				{ 851 ,  {-0.02752652662959857 }} ,
				{ 855 ,  {-0.027506739989432545 }} ,
				{ 1708 ,  {-0.02759248477102158 }} ,
				{ 1709 ,  {-0.027537881752497818 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 18 ) : ( ( ( Feature_13 <= 2.5000000000000004 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 152 ) : ( 153 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_12 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 40 ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 50 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_60 <= 5.500000000000001 ) ? ( ( ( Feature_29 <= 5.500000000000001 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( Feature_28 <= 12.500000000000002 ) ? ( 426 ) : ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_50 <= 7.500000000000001 ) ? ( 1708 ) : ( 1709 ) ) ) : ( 855 ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 428 ) : ( 429 ) ) ) : ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( ( ( Feature_30 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_3
	

	namespace LGBM_Tree_6_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.01007114630043185 }} ,
				{ 8 ,  {0.025125161525194773 }} ,
				{ 10 ,  {0.0011948975918110822 }} ,
				{ 15 ,  {-0.012814614144204053 }} ,
				{ 23 ,  {0.076150631045943 }} ,
				{ 37 ,  {-0.027577791561285515 }} ,
				{ 38 ,  {-0.027407211024989428 }} ,
				{ 39 ,  {-0.02745573471263755 }} ,
				{ 44 ,  {0.13487232966768375 }} ,
				{ 56 ,  {-0.027534033444685958 }} ,
				{ 57 ,  {-0.012759215725739022 }} ,
				{ 72 ,  {-0.027429755587452614 }} ,
				{ 73 ,  {-0.027502484705505 }} ,
				{ 90 ,  {0.14756008454667843 }} ,
				{ 119 ,  {-0.02742770397117114 }} ,
				{ 182 ,  {0.13957077814925803 }} ,
				{ 236 ,  {-0.027419722783149632 }} ,
				{ 366 ,  {0.14462859974642303 }} ,
				{ 367 ,  {0.1415906699204646 }} ,
				{ 464 ,  {-0.027437649595378727 }} ,
				{ 465 ,  {-0.02748134075814896 }} ,
				{ 470 ,  {-0.027448882321962277 }} ,
				{ 471 ,  {-0.027509145409874886 }} ,
				{ 474 ,  {-0.027457075300070577 }} ,
				{ 932 ,  {-0.027473514639830793 }} ,
				{ 933 ,  {-0.02756596320665894 }} ,
				{ 935 ,  {-0.027441071048145534 }} ,
				{ 936 ,  {-0.027567970556543628 }} ,
				{ 938 ,  {-0.02745647793881871 }} ,
				{ 939 ,  {-0.027515275299481376 }} ,
				{ 951 ,  {-0.027475478658611385 }} ,
				{ 1869 ,  {-0.027527893533738607 }} ,
				{ 1875 ,  {-0.02749020046441363 }} ,
				{ 1900 ,  {-0.027493317833810885 }} ,
				{ 1901 ,  {-0.02754006507498659 }} ,
				{ 3736 ,  {-0.02750067272955848 }} ,
				{ 3748 ,  {-0.027507582276119647 }} ,
				{ 3749 ,  {-0.027559670248315595 }} ,
				{ 7474 ,  {-0.02741940353387507 }} ,
				{ 7475 ,  {-0.027475733150671144 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 1.5000000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 5.500000000000001 ) ? ( 44 ) : ( ( ( Feature_34 <= 14.500000000000002 ) ? ( 90 ) : ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 182 ) : ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 3736 ) : ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 7474 ) : ( 7475 ) ) ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 3748 ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 236 ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 474 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 1900 ) : ( 1901 ) ) ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_3
	

	namespace LGBM_Tree_7_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.036449544520606766 }} ,
				{ 8 ,  {0.08039959600441945 }} ,
				{ 19 ,  {0.15768150123732136 }} ,
				{ 20 ,  {-0.007795354941589422 }} ,
				{ 23 ,  {-0.01343730949736906 }} ,
				{ 25 ,  {0.028367988282459445 }} ,
				{ 36 ,  {0.14699451283178613 }} ,
				{ 37 ,  {0.13163080148091563 }} ,
				{ 42 ,  {0.10691309409561714 }} ,
				{ 43 ,  {0.14990339221202584 }} ,
				{ 44 ,  {-0.027945334889444652 }} ,
				{ 45 ,  {-0.027609887143547118 }} ,
				{ 48 ,  {-0.027450196583461102 }} ,
				{ 49 ,  {-0.027616771663670478 }} ,
				{ 54 ,  {-0.003299368216034236 }} ,
				{ 110 ,  {-0.027422335291219825 }} ,
				{ 111 ,  {-0.02752636684432739 }} ,
				{ 210 ,  {-0.027377176683890364 }} ,
				{ 211 ,  {-0.027434414993131803 }} ,
				{ 212 ,  {-0.027414783801911688 }} ,
				{ 214 ,  {-0.027368957967602848 }} ,
				{ 418 ,  {-0.027412684088846975 }} ,
				{ 419 ,  {-0.02745819732224715 }} ,
				{ 427 ,  {-0.0274093954423975 }} ,
				{ 430 ,  {-0.027425686661767985 }} ,
				{ 431 ,  {-0.027384938680027032 }} ,
				{ 832 ,  {-0.02743654469174696 }} ,
				{ 834 ,  {-0.02743874073172486 }} ,
				{ 852 ,  {-0.02743382182882885 }} ,
				{ 1706 ,  {-0.027444760607769875 }} ,
				{ 1707 ,  {-0.027499071955396182 }} ,
				{ 3332 ,  {-0.027562812299276575 }} ,
				{ 3333 ,  {-0.027495096527490166 }} ,
				{ 3335 ,  {-0.027498746952086508 }} ,
				{ 3340 ,  {-0.02746831243219307 }} ,
				{ 3341 ,  {-0.027530080337155885 }} ,
				{ 3342 ,  {-0.02742195727751201 }} ,
				{ 3343 ,  {-0.027472649442874194 }} ,
				{ 6668 ,  {-0.02742314322407873 }} ,
				{ 6669 ,  {-0.027480644401776007 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 8.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_58 <= 11.500000000000002 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 20 ) : ( ( ( Feature_14 <= 5.500000000000001 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_58 <= 12.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_35 <= 15.500000000000002 ) ? ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 832 ) : ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 3332 ) : ( 3333 ) ) ) : ( ( ( Feature_36 <= 15.500000000000002 ) ? ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 6668 ) : ( 6669 ) ) ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 834 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 3340 ) : ( 3341 ) ) ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 3342 ) : ( 3343 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 4.500000000000001 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_12 <= 7.500000000000001 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 212 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 852 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 1706 ) : ( 1707 ) ) ) ) ) : ( 427 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 214 ) : ( ( ( Feature_45 <= 14.500000000000002 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 54 ) : ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_3
	

	namespace LGBM_Tree_8_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 13 ,  {-0.027308392942618644 }} ,
				{ 19 ,  {0.12541383785731566 }} ,
				{ 20 ,  {-0.0062123390840660925 }} ,
				{ 23 ,  {0.06528375890371688 }} ,
				{ 25 ,  {-0.027338181617184088 }} ,
				{ 29 ,  {0.06290246662969039 }} ,
				{ 31 ,  {-0.027641002636430864 }} ,
				{ 32 ,  {-0.01657243287268562 }} ,
				{ 34 ,  {0.03529742604223415 }} ,
				{ 35 ,  {-0.027400633041873148 }} ,
				{ 36 ,  {0.014837106213253388 }} ,
				{ 42 ,  {0.07415859147600269 }} ,
				{ 45 ,  {0.012487461479464161 }} ,
				{ 56 ,  {-0.011968163084473132 }} ,
				{ 57 ,  {-0.027492498800842174 }} ,
				{ 60 ,  {-0.027344081732558763 }} ,
				{ 61 ,  {-0.027422203938175023 }} ,
				{ 74 ,  {-0.027523158535342082 }} ,
				{ 86 ,  {0.10083014355011562 }} ,
				{ 96 ,  {-0.027324845373471403 }} ,
				{ 97 ,  {-0.027378326547810666 }} ,
				{ 98 ,  {-0.027336074203897845 }} ,
				{ 132 ,  {-0.027323977070865247 }} ,
				{ 133 ,  {-0.027401534030182823 }} ,
				{ 134 ,  {-0.02774016229402398 }} ,
				{ 150 ,  {-0.02733965297898186 }} ,
				{ 151 ,  {-0.02741362180650957 }} ,
				{ 175 ,  {0.13458961186480187 }} ,
				{ 176 ,  {-0.02736161824065387 }} ,
				{ 177 ,  {-0.02730525730060044 }} ,
				{ 178 ,  {-0.02739519257277382 }} ,
				{ 179 ,  {-0.027482214624556092 }} ,
				{ 199 ,  {-0.02736987427254449 }} ,
				{ 271 ,  {-0.027367244800621977 }} ,
				{ 348 ,  {0.15019242085567847 }} ,
				{ 349 ,  {0.16589181056566193 }} ,
				{ 396 ,  {-0.027362882339054897 }} ,
				{ 397 ,  {-0.027438562793639123 }} ,
				{ 540 ,  {-0.027470716461980727 }} ,
				{ 541 ,  {-0.027536292259190895 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_36 <= 7.500000000000001 ) ? ( 32 ) : ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( 132 ) : ( 133 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 134 ) : ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 8.500000000000002 ) ? ( 540 ) : ( 541 ) ) ) : ( 271 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_43 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 74 ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( 20 ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 42 ) : ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 86 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 9.500000000000002 ) ? ( 348 ) : ( 349 ) ) ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( 176 ) : ( 177 ) ) ) : ( ( ( Feature_18 <= 7.500000000000001 ) ? ( 178 ) : ( 179 ) ) ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 98 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 396 ) : ( 397 ) ) ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_3
	

	namespace LGBM_Tree_9_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.07919009278232653 }} ,
				{ 11 ,  {-0.027622213468587842 }} ,
				{ 13 ,  {-0.019623937348494325 }} ,
				{ 15 ,  {0.006613281271498681 }} ,
				{ 16 ,  {0.022816169275418668 }} ,
				{ 25 ,  {0.012949979271507218 }} ,
				{ 28 ,  {-0.02764472927983638 }} ,
				{ 34 ,  {0.014992015121442787 }} ,
				{ 36 ,  {-0.013267616374334826 }} ,
				{ 37 ,  {-0.027667672770136976 }} ,
				{ 49 ,  {0.08590318386704836 }} ,
				{ 59 ,  {-0.02754178962550415 }} ,
				{ 76 ,  {-0.02755095261759822 }} ,
				{ 116 ,  {-0.02756253397891294 }} ,
				{ 142 ,  {-0.027731272825303806 }} ,
				{ 143 ,  {0.013775590228925353 }} ,
				{ 154 ,  {-0.027588318381970206 }} ,
				{ 155 ,  {-0.02765017654361563 }} ,
				{ 158 ,  {-0.02755422701205051 }} ,
				{ 159 ,  {-0.02751392501906464 }} ,
				{ 192 ,  {0.1529296066738628 }} ,
				{ 193 ,  {0.14221936967899898 }} ,
				{ 194 ,  {0.14596858469122195 }} ,
				{ 195 ,  {0.1158688612170241 }} ,
				{ 234 ,  {-0.027663352365496153 }} ,
				{ 235 ,  {-0.027596147307927945 }} ,
				{ 280 ,  {-0.027778198405751377 }} ,
				{ 282 ,  {0.0004500550138829101 }} ,
				{ 283 ,  {-0.027721173641182803 }} ,
				{ 313 ,  {-0.02755271906717234 }} ,
				{ 314 ,  {-0.02764915438015261 }} ,
				{ 315 ,  {-0.027572249345123836 }} ,
				{ 624 ,  {-0.02763401439374672 }} ,
				{ 625 ,  {-0.027558602180177777 }} ,
				{ 1125 ,  {-0.02751453943607722 }} ,
				{ 1127 ,  {-0.027686936819815284 }} ,
				{ 2248 ,  {-0.027608425607388028 }} ,
				{ 2249 ,  {-0.027555082438309716 }} ,
				{ 2252 ,  {-0.027610011154865628 }} ,
				{ 2253 ,  {-0.0275632749887518 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 16 ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_54 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 13.500000000000002 ) ? ( ( ( Feature_52 <= 3.5000000000000004 ) ? ( 280 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 14.500000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 2248 ) : ( 2249 ) ) ) : ( 1125 ) ) ) : ( ( ( Feature_14 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( 2252 ) : ( 2253 ) ) ) : ( 1127 ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_10 <= 14.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_43 <= 6.500000000000001 ) ? ( 76 ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( 624 ) : ( 625 ) ) ) : ( 313 ) ) ) : ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 314 ) : ( 315 ) ) ) ) ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 192 ) : ( 193 ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 28 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 116 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_3
	

	namespace LGBM_Tree_0_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.05109792201384982 }} ,
				{ 10 ,  {-0.027403186856345765 }} ,
				{ 11 ,  {-0.027298317603539287 }} ,
				{ 13 ,  {0.02533221859825043 }} ,
				{ 17 ,  {0.10829041674975776 }} ,
				{ 24 ,  {-0.02744193390269391 }} ,
				{ 25 ,  {-0.027311826106694255 }} ,
				{ 32 ,  {0.13551071516193267 }} ,
				{ 60 ,  {-0.02725874200040781 }} ,
				{ 62 ,  {-0.027300289046474996 }} ,
				{ 63 ,  {-0.02726178884700275 }} ,
				{ 66 ,  {0.12608428593895063 }} ,
				{ 113 ,  {-0.027243936617766026 }} ,
				{ 118 ,  {-0.027231585194156506 }} ,
				{ 119 ,  {-0.027303508202478028 }} ,
				{ 123 ,  {-0.02730870469612542 }} ,
				{ 134 ,  {0.12306410098984255 }} ,
				{ 135 ,  {0.1246005308616657 }} ,
				{ 224 ,  {-0.02728931675113974 }} ,
				{ 225 ,  {-0.027390415127465942 }} ,
				{ 230 ,  {-0.02738232457822646 }} ,
				{ 231 ,  {-0.027304863288673466 }} ,
				{ 232 ,  {-0.02735801361361124 }} ,
				{ 233 ,  {-0.027288178438651556 }} ,
				{ 234 ,  {-0.027311609355341427 }} ,
				{ 244 ,  {-0.0273080636334976 }} ,
				{ 456 ,  {-0.027285231410270967 }} ,
				{ 470 ,  {-0.027373722784318558 }} ,
				{ 490 ,  {-0.02734580866264459 }} ,
				{ 491 ,  {-0.027401158830368245 }} ,
				{ 914 ,  {-0.02729418464778252 }} ,
				{ 916 ,  {-0.027318877600608856 }} ,
				{ 917 ,  {-0.02740415139398893 }} ,
				{ 919 ,  {-0.027378517071643974 }} ,
				{ 942 ,  {-0.027311048466844786 }} ,
				{ 943 ,  {-0.027367349645053846 }} ,
				{ 1830 ,  {-0.027341873313117722 }} ,
				{ 1831 ,  {-0.027433717338840015 }} ,
				{ 1836 ,  {-0.02747735913876745 }} ,
				{ 1837 ,  {-0.027395874223092715 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 32 ) : ( ( ( Feature_34 <= 9.500000000000002 ) ? ( 66 ) : ( ( ( Feature_17 <= 4.500000000000001 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 456 ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 914 ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( 1830 ) : ( 1831 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( 916 ) : ( 917 ) ) ) : ( ( ( Feature_5 <= 13.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 1836 ) : ( 1837 ) ) ) : ( 919 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 234 ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( 470 ) : ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 9.500000000000002 ) ? ( 244 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_4
	

	namespace LGBM_Tree_1_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.02751593601646999 }} ,
				{ 13 ,  {0.021567469338122664 }} ,
				{ 14 ,  {0.036377353937244665 }} ,
				{ 18 ,  {0.12846168351569728 }} ,
				{ 19 ,  {0.07311058550967706 }} ,
				{ 20 ,  {-0.0004956075020286953 }} ,
				{ 22 ,  {0.03566621437499716 }} ,
				{ 25 ,  {0.05628391839306677 }} ,
				{ 30 ,  {-0.02745354489158229 }} ,
				{ 31 ,  {-0.027780569369052727 }} ,
				{ 46 ,  {-0.027529375949599578 }} ,
				{ 47 ,  {-0.027430996394215902 }} ,
				{ 48 ,  {0.09834756065983183 }} ,
				{ 86 ,  {-0.0128322407407996 }} ,
				{ 98 ,  {0.14044656114102444 }} ,
				{ 174 ,  {-0.027506134262467893 }} ,
				{ 175 ,  {-0.027584176006724012 }} ,
				{ 198 ,  {0.11422781464871874 }} ,
				{ 199 ,  {0.12980199924513255 }} ,
				{ 340 ,  {-0.027559541393123943 }} ,
				{ 343 ,  {-0.027421618088089295 }} ,
				{ 672 ,  {-0.02744738398008253 }} ,
				{ 674 ,  {-0.027527234785704832 }} ,
				{ 675 ,  {-0.027617079565725056 }} ,
				{ 676 ,  {-0.027523889506636437 }} ,
				{ 677 ,  {-0.027443683596793913 }} ,
				{ 682 ,  {-0.027451570670702193 }} ,
				{ 684 ,  {-0.027472003040950668 }} ,
				{ 685 ,  {-0.027413771685125266 }} ,
				{ 1347 ,  {-0.02750262803814182 }} ,
				{ 1356 ,  {-0.027528863253675623 }} ,
				{ 1357 ,  {-0.027471104951072123 }} ,
				{ 1359 ,  {-0.02749547018596628 }} ,
				{ 1366 ,  {-0.02748536041143388 }} ,
				{ 1367 ,  {-0.027550715673266665 }} ,
				{ 2692 ,  {-0.027533984675265938 }} ,
				{ 2693 ,  {-0.027645679827566952 }} ,
				{ 2717 ,  {-0.027613878008268374 }} ,
				{ 5432 ,  {-0.027590419022548492 }} ,
				{ 5433 ,  {-0.027515860269263583 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 672 ) : ( ( ( Feature_17 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 1356 ) : ( 1357 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 5432 ) : ( 5433 ) ) ) : ( 2717 ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 7.500000000000001 ) ? ( 340 ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 682 ) : ( ( ( Feature_53 <= 2.5000000000000004 ) ? ( 1366 ) : ( 1367 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 8.500000000000002 ) ? ( 684 ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 86 ) : ( ( ( Feature_50 <= 11.500000000000002 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_10 <= 13.500000000000002 ) ? ( ( ( Feature_37 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 48 ) : ( ( ( Feature_43 <= 12.500000000000002 ) ? ( 98 ) : ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 14 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_4
	

	namespace LGBM_Tree_2_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.10027068372585575 }} ,
				{ 15 ,  {0.03739101805729539 }} ,
				{ 16 ,  {0.0009014901046298761 }} ,
				{ 20 ,  {0.011789373481947706 }} ,
				{ 25 ,  {0.04738850591652373 }} ,
				{ 26 ,  {-0.02825480331162864 }} ,
				{ 27 ,  {0.04520033114561492 }} ,
				{ 29 ,  {-0.012901639323369947 }} ,
				{ 42 ,  {-0.027501874104099645 }} ,
				{ 43 ,  {-0.027697489587350185 }} ,
				{ 46 ,  {-0.027550717691141608 }} ,
				{ 48 ,  {0.1294180941412713 }} ,
				{ 57 ,  {-0.02800805233611648 }} ,
				{ 68 ,  {-0.027522841279813016 }} ,
				{ 69 ,  {-0.027448451352589 }} ,
				{ 70 ,  {-0.027577229603628264 }} ,
				{ 71 ,  {-0.02751027913964138 }} ,
				{ 88 ,  {-0.027581908260070166 }} ,
				{ 89 ,  {-0.027454360152823494 }} ,
				{ 94 ,  {-0.027465964515567723 }} ,
				{ 95 ,  {-0.02750047661025423 }} ,
				{ 98 ,  {0.11574847086965814 }} ,
				{ 112 ,  {-0.027473076749978117 }} ,
				{ 198 ,  {0.12103979221204211 }} ,
				{ 199 ,  {0.12532625711013973 }} ,
				{ 226 ,  {-0.027617627631585304 }} ,
				{ 227 ,  {-0.02749599691925807 }} ,
				{ 360 ,  {-0.02751057440732954 }} ,
				{ 361 ,  {-0.027588501727758764 }} ,
				{ 362 ,  {-0.027429470997348427 }} ,
				{ 363 ,  {-0.027504874342444943 }} ,
				{ 364 ,  {-0.02750950075790028 }} ,
				{ 366 ,  {-0.027505313542820944 }} ,
				{ 367 ,  {-0.02757066336272378 }} ,
				{ 731 ,  {-0.027521993072289475 }} ,
				{ 1461 ,  {-0.027560572280817097 }} ,
				{ 2921 ,  {-0.027560579163427704 }} ,
				{ 5840 ,  {-0.027681053225719995 }} ,
				{ 11682 ,  {-0.027650247692021592 }} ,
				{ 11683 ,  {-0.027569842638847344 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_59 <= 11.500000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( 364 ) : ( ( ( Feature_33 <= 6.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_3 <= 13.500000000000002 ) ? ( ( ( Feature_14 <= 1.0000000180025095e-35 ) ? ( 5840 ) : ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 11682 ) : ( 11683 ) ) ) ) ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 48 ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 98 ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 198 ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( ( ( Feature_58 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 112 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_4
	

	namespace LGBM_Tree_3_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.07403123397382387 }} ,
				{ 10 ,  {0.008489746599679621 }} ,
				{ 18 ,  {0.09701713962658395 }} ,
				{ 22 ,  {-0.013475063736321423 }} ,
				{ 25 ,  {-0.027587065069662377 }} ,
				{ 26 ,  {0.01892411878347938 }} ,
				{ 28 ,  {0.03880541626245475 }} ,
				{ 29 ,  {-0.027663953862178837 }} ,
				{ 38 ,  {0.12362556255003819 }} ,
				{ 39 ,  {0.1298389691892294 }} ,
				{ 46 ,  {-0.02768104429198225 }} ,
				{ 48 ,  {0.12986293712904826 }} ,
				{ 49 ,  {0.05884695261265175 }} ,
				{ 55 ,  {-0.012975941187489768 }} ,
				{ 63 ,  {0.01756678462618348 }} ,
				{ 94 ,  {-0.02754301063176622 }} ,
				{ 95 ,  {-0.027461659741984557 }} ,
				{ 109 ,  {-0.027833611366749028 }} ,
				{ 121 ,  {-0.02739890820914592 }} ,
				{ 124 ,  {0.008844495353605602 }} ,
				{ 216 ,  {-0.027599457989637245 }} ,
				{ 217 ,  {-0.02743461190519782 }} ,
				{ 240 ,  {-0.027501345823466444 }} ,
				{ 244 ,  {-0.027422411698343915 }} ,
				{ 246 ,  {-0.027428890598039164 }} ,
				{ 250 ,  {-0.027593205080563538 }} ,
				{ 482 ,  {-0.027456052508687507 }} ,
				{ 483 ,  {-0.027387132036870793 }} ,
				{ 490 ,  {-0.027460782332673368 }} ,
				{ 494 ,  {-0.027537106380363413 }} ,
				{ 495 ,  {-0.0274503531225853 }} ,
				{ 983 ,  {-0.02747574855860632 }} ,
				{ 1004 ,  {-0.02750340074075738 }} ,
				{ 1005 ,  {-0.027429167309443753 }} ,
				{ 1006 ,  {-0.027438969188419527 }} ,
				{ 1007 ,  {-0.02738629803983604 }} ,
				{ 3928 ,  {-0.027556271258089196 }} ,
				{ 3929 ,  {-0.027478496294078777 }} ,
				{ 3930 ,  {-0.027611180395586243 }} ,
				{ 3931 ,  {-0.027546872873844525 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 18 ) : ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 22 ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 9.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_58 <= 13.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_44 <= 8.500000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 240 ) : ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( 121 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 244 ) : ( ( ( Feature_13 <= 3.5000000000000004 ) ? ( 490 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 3928 ) : ( 3929 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 3930 ) : ( 3931 ) ) ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 246 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 124 ) : ( ( ( Feature_26 <= 9.500000000000002 ) ? ( 250 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 1004 ) : ( 1005 ) ) ) : ( ( ( Feature_12 <= 6.500000000000001 ) ? ( 1006 ) : ( 1007 ) ) ) ) ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_4
	

	namespace LGBM_Tree_4_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.032544521062942054 }} ,
				{ 13 ,  {0.1068128571274099 }} ,
				{ 17 ,  {0.021055661483656198 }} ,
				{ 18 ,  {-0.028001554433362483 }} ,
				{ 20 ,  {-0.009027367479908994 }} ,
				{ 22 ,  {-0.02779904832961845 }} ,
				{ 23 ,  {0.0470803219973342 }} ,
				{ 24 ,  {0.12861400462155895 }} ,
				{ 25 ,  {0.11967099286071677 }} ,
				{ 32 ,  {-0.013317233115415642 }} ,
				{ 39 ,  {0.00711326153281041 }} ,
				{ 43 ,  {-0.019060103607733178 }} ,
				{ 67 ,  {-0.027690724490463954 }} ,
				{ 76 ,  {0.12705010140398124 }} ,
				{ 77 ,  {0.09725151766446655 }} ,
				{ 133 ,  {-0.027521695372194704 }} ,
				{ 264 ,  {-0.02762351103548325 }} ,
				{ 265 ,  {-0.02755641248760432 }} ,
				{ 340 ,  {-0.027535917754269064 }} ,
				{ 342 ,  {-0.027467875246262763 }} ,
				{ 343 ,  {-0.027550770632739082 }} ,
				{ 672 ,  {-0.027560489940872224 }} ,
				{ 673 ,  {-0.02765755208491859 }} ,
				{ 674 ,  {-0.02758396544977575 }} ,
				{ 675 ,  {-0.027510080917792924 }} ,
				{ 679 ,  {-0.027580268966520174 }} ,
				{ 683 ,  {-0.027543613367751758 }} ,
				{ 1352 ,  {-0.027565027906081868 }} ,
				{ 1355 ,  {-0.027598610456174746 }} ,
				{ 1356 ,  {-0.027632991942325765 }} ,
				{ 1357 ,  {-0.027722397143659247 }} ,
				{ 1364 ,  {-0.027649413139103865 }} ,
				{ 2706 ,  {-0.027652789382928318 }} ,
				{ 2709 ,  {-0.02748492058474679 }} ,
				{ 2730 ,  {-0.027608842753608837 }} ,
				{ 2731 ,  {-0.027541108060101002 }} ,
				{ 5414 ,  {-0.027561106758642297 }} ,
				{ 5415 ,  {-0.027628844945618347 }} ,
				{ 5416 ,  {-0.027538540669879222 }} ,
				{ 5417 ,  {-0.02757959449154145 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 32 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_61 <= 12.500000000000002 ) ? ( ( ( Feature_19 <= 13.500000000000002 ) ? ( 264 ) : ( 265 ) ) ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 7.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( 674 ) : ( 675 ) ) ) ) ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( 1352 ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 2706 ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 5414 ) : ( 5415 ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 5416 ) : ( 5417 ) ) ) : ( 2709 ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 1356 ) : ( 1357 ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 340 ) : ( ( ( Feature_3 <= 14.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 1364 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 2730 ) : ( 2731 ) ) ) ) ) : ( 683 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_4
	

	namespace LGBM_Tree_5_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.03874663584678456 }} ,
				{ 11 ,  {-0.015653981003905314 }} ,
				{ 15 ,  {0.05278677784152365 }} ,
				{ 19 ,  {-0.005560536542412264 }} ,
				{ 20 ,  {0.10847738824655356 }} ,
				{ 24 ,  {0.0011243628502524135 }} ,
				{ 28 ,  {-0.027532683527743435 }} ,
				{ 36 ,  {-0.027843048915178636 }} ,
				{ 43 ,  {0.13425663073057756 }} ,
				{ 50 ,  {-0.02740983890758903 }} ,
				{ 51 ,  {-0.02750605657429485 }} ,
				{ 55 ,  {-0.027685809330760106 }} ,
				{ 59 ,  {-0.027398752324038503 }} ,
				{ 74 ,  {-0.027595913287073576 }} ,
				{ 84 ,  {0.12541380415353312 }} ,
				{ 85 ,  {0.11596705262553078 }} ,
				{ 106 ,  {-0.027384243668209823 }} ,
				{ 108 ,  {-0.027516876221013283 }} ,
				{ 109 ,  {-0.02743292044352126 }} ,
				{ 117 ,  {-0.027413832300579935 }} ,
				{ 150 ,  {-0.0274894750074506 }} ,
				{ 210 ,  {-0.027415561475195718 }} ,
				{ 211 ,  {-0.02750450050606043 }} ,
				{ 215 ,  {-0.02737807501723601 }} ,
				{ 232 ,  {-0.02752829065195588 }} ,
				{ 233 ,  {-0.027433200357489546 }} ,
				{ 302 ,  {-0.02734799058970699 }} ,
				{ 303 ,  {-0.027412362914276397 }} ,
				{ 418 ,  {-0.02754369283893463 }} ,
				{ 419 ,  {-0.027480505248840343 }} ,
				{ 429 ,  {-0.027523602013274293 }} ,
				{ 832 ,  {-0.027447649193650753 }} ,
				{ 833 ,  {-0.027516518155067435 }} ,
				{ 835 ,  {-0.027483864660473003 }} ,
				{ 1668 ,  {-0.027391088699335937 }} ,
				{ 1669 ,  {-0.02745834068674673 }} ,
				{ 1712 ,  {-0.027425438196393554 }} ,
				{ 1713 ,  {-0.027350999769098123 }} ,
				{ 1714 ,  {-0.027427278968811936 }} ,
				{ 1715 ,  {-0.027506473506435987 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 74 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 150 ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 302 ) : ( 303 ) ) ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_58 <= 8.500000000000002 ) ? ( 20 ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_3 <= 14.500000000000002 ) ? ( 84 ) : ( 85 ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 5.500000000000001 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 832 ) : ( 833 ) ) ) : ( ( ( Feature_29 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( 1668 ) : ( 1669 ) ) ) : ( 835 ) ) ) ) ) : ( ( ( Feature_37 <= 5.500000000000001 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 106 ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_35 <= 3.5000000000000004 ) ? ( ( ( Feature_2 <= 8.500000000000002 ) ? ( 1712 ) : ( 1713 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1714 ) : ( 1715 ) ) ) ) ) : ( 429 ) ) ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( ( ( Feature_30 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_4
	

	namespace LGBM_Tree_6_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.009845156250355189 }} ,
				{ 9 ,  {0.012455505530309503 }} ,
				{ 15 ,  {-0.012508157123035608 }} ,
				{ 16 ,  {-0.02774745721645073 }} ,
				{ 20 ,  {-0.027713828364033674 }} ,
				{ 21 ,  {0.029284588983193693 }} ,
				{ 22 ,  {0.07027840172904022 }} ,
				{ 35 ,  {-0.027351782520543724 }} ,
				{ 46 ,  {0.1296731167720684 }} ,
				{ 57 ,  {-0.012446031508779475 }} ,
				{ 68 ,  {-0.02750133807529739 }} ,
				{ 69 ,  {-0.027378295288406147 }} ,
				{ 95 ,  {0.12546476973817136 }} ,
				{ 112 ,  {-0.027418241926638387 }} ,
				{ 113 ,  {-0.02751436133788848 }} ,
				{ 118 ,  {-0.027321179525969404 }} ,
				{ 188 ,  {0.1243664916651402 }} ,
				{ 233 ,  {-0.027329987627105548 }} ,
				{ 239 ,  {-0.02734168999224116 }} ,
				{ 378 ,  {0.12286710347439467 }} ,
				{ 379 ,  {0.12183288068367866 }} ,
				{ 470 ,  {-0.027438637958507834 }} ,
				{ 471 ,  {-0.027357832598070488 }} ,
				{ 477 ,  {-0.02741242304805877 }} ,
				{ 930 ,  {-0.027323299638247162 }} ,
				{ 931 ,  {-0.027398364929398525 }} ,
				{ 936 ,  {-0.027525286434815128 }} ,
				{ 938 ,  {-0.02736559098601539 }} ,
				{ 939 ,  {-0.02745854904414556 }} ,
				{ 952 ,  {-0.02738522616780242 }} ,
				{ 953 ,  {-0.02731880958879951 }} ,
				{ 1857 ,  {-0.02742748263643351 }} ,
				{ 1858 ,  {-0.027397685329022144 }} ,
				{ 1875 ,  {-0.027411691998554335 }} ,
				{ 3712 ,  {-0.027411811916756613 }} ,
				{ 3713 ,  {-0.02732924441011257 }} ,
				{ 3718 ,  {-0.027509780860573582 }} ,
				{ 3719 ,  {-0.027421327387269035 }} ,
				{ 3748 ,  {-0.027440364580925775 }} ,
				{ 3749 ,  {-0.027505576277344526 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 22 ) : ( ( ( Feature_34 <= 14.500000000000002 ) ? ( 46 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_37 <= 9.500000000000002 ) ? ( 188 ) : ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 378 ) : ( 379 ) ) ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_30 <= 9.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 3712 ) : ( 3713 ) ) ) : ( 1857 ) ) ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 1858 ) : ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 3718 ) : ( 3719 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 4.500000000000001 ) ? ( 930 ) : ( 931 ) ) ) ) ) : ( 233 ) ) ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 3748 ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 118 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 952 ) : ( 953 ) ) ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_4
	

	namespace LGBM_Tree_7_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.03451331534528743 }} ,
				{ 8 ,  {0.03851467588570183 }} ,
				{ 18 ,  {0.10254345477047938 }} ,
				{ 20 ,  {0.11146866923425457 }} ,
				{ 21 ,  {-0.0030271019205959752 }} ,
				{ 23 ,  {-0.013378091114188837 }} ,
				{ 25 ,  {0.028628702915890016 }} ,
				{ 38 ,  {0.1397815641202216 }} ,
				{ 44 ,  {-0.02754160087831068 }} ,
				{ 45 ,  {-0.027974486791085752 }} ,
				{ 48 ,  {-0.02740015843997324 }} ,
				{ 49 ,  {-0.027551942372737927 }} ,
				{ 54 ,  {-0.0031086267756123428 }} ,
				{ 78 ,  {0.11927137258067665 }} ,
				{ 79 ,  {0.12602877512655314 }} ,
				{ 105 ,  {-0.027312757419941422 }} ,
				{ 110 ,  {-0.02751918192165729 }} ,
				{ 111 ,  {-0.02740451034178837 }} ,
				{ 212 ,  {-0.027327399515629593 }} ,
				{ 214 ,  {-0.027272192710676203 }} ,
				{ 215 ,  {-0.02733330637189132 }} ,
				{ 417 ,  {-0.027480941733041633 }} ,
				{ 419 ,  {-0.027401085801452636 }} ,
				{ 427 ,  {-0.027322191100017486 }} ,
				{ 836 ,  {-0.027352133555253934 }} ,
				{ 837 ,  {-0.027286116396757255 }} ,
				{ 852 ,  {-0.02735020355459234 }} ,
				{ 1706 ,  {-0.027360056011060587 }} ,
				{ 1707 ,  {-0.027432643380975164 }} ,
				{ 3328 ,  {-0.027505347073130765 }} ,
				{ 3329 ,  {-0.027416947350426185 }} ,
				{ 3332 ,  {-0.027421643232037853 }} ,
				{ 3334 ,  {-0.02737013746729415 }} ,
				{ 3335 ,  {-0.027467941709215585 }} ,
				{ 6660 ,  {-0.027361235926102886 }} ,
				{ 6661 ,  {-0.027483926409038312 }} ,
				{ 6662 ,  {-0.02730970342176738 }} ,
				{ 6663 ,  {-0.02738098291158843 }} ,
				{ 6666 ,  {-0.0273516664662712 }} ,
				{ 6667 ,  {-0.027398053310712572 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 9.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 38 ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_37 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 10.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 6.500000000000001 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 3328 ) : ( 3329 ) ) ) : ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 6660 ) : ( 6661 ) ) ) : ( ( ( Feature_50 <= 1.5000000000000002 ) ? ( 6662 ) : ( 6663 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 3332 ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( 6666 ) : ( 6667 ) ) ) ) ) : ( ( ( Feature_46 <= 5.500000000000001 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( 417 ) ) ) : ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 13.500000000000002 ) ? ( 836 ) : ( 837 ) ) ) : ( 419 ) ) ) ) ) : ( 105 ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 212 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 852 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 1706 ) : ( 1707 ) ) ) ) ) : ( 427 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 54 ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_4
	

	namespace LGBM_Tree_8_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.030826277782399825 }} ,
				{ 18 ,  {-0.010675626038003544 }} ,
				{ 25 ,  {-0.02726037809823266 }} ,
				{ 26 ,  {-0.027217073377316027 }} ,
				{ 27 ,  {-0.027297815659869176 }} ,
				{ 29 ,  {-0.01209337968716537 }} ,
				{ 31 ,  {0.081485051316604 }} ,
				{ 32 ,  {-0.027383141816662113 }} ,
				{ 33 ,  {-0.027258039325236866 }} ,
				{ 44 ,  {0.036113865942552364 }} ,
				{ 46 ,  {-0.02762793849708809 }} ,
				{ 47 ,  {0.011914941474596518 }} ,
				{ 56 ,  {-0.027419010215453694 }} ,
				{ 60 ,  {-0.027302679521201204 }} ,
				{ 61 ,  {-0.02757451767912802 }} ,
				{ 76 ,  {-0.0272523458323609 }} ,
				{ 77 ,  {-0.027309143457257212 }} ,
				{ 78 ,  {-0.027310331332376283 }} ,
				{ 79 ,  {-0.02744130028311278 }} ,
				{ 80 ,  {-0.027435067254677814 }} ,
				{ 81 ,  {-0.027652434947755402 }} ,
				{ 83 ,  {-0.027441961588823845 }} ,
				{ 84 ,  {-0.02811499132044993 }} ,
				{ 85 ,  {-0.027510047450433357 }} ,
				{ 86 ,  {-0.002676189993146679 }} ,
				{ 87 ,  {0.11786112730504886 }} ,
				{ 91 ,  {0.08558111988390264 }} ,
				{ 96 ,  {-0.027311391909846078 }} ,
				{ 97 ,  {-0.027243003159409713 }} ,
				{ 98 ,  {-0.027377826385328416 }} ,
				{ 114 ,  {-0.02732137225537956 }} ,
				{ 115 ,  {-0.027258256458949883 }} ,
				{ 164 ,  {-0.027329823023671148 }} ,
				{ 165 ,  {-0.027258570362450614 }} ,
				{ 180 ,  {0.14795782129499793 }} ,
				{ 198 ,  {-0.027246977804842573 }} ,
				{ 362 ,  {0.1335782763078826 }} ,
				{ 363 ,  {0.12975000866379394 }} ,
				{ 398 ,  {-0.02735361819772163 }} ,
				{ 399 ,  {-0.027275840136239946 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 3.5000000000000004 ) ? ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 164 ) : ( 165 ) ) ) : ( 83 ) ) ) ) ) : ( ( ( Feature_18 <= 7.500000000000001 ) ? ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 44 ) : ( ( ( Feature_20 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 9.500000000000002 ) ? ( 180 ) : ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( Feature_10 <= 5.500000000000001 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( 98 ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 198 ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( ( ( Feature_61 <= 11.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_4
	

	namespace LGBM_Tree_9_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.09286485190359933 }} ,
				{ 13 ,  {-0.019390633033767923 }} ,
				{ 15 ,  {0.0062680270017960935 }} ,
				{ 22 ,  {0.008821326607378327 }} ,
				{ 23 ,  {-0.028152036958551754 }} ,
				{ 25 ,  {0.012587141605307828 }} ,
				{ 32 ,  {0.05120738556299953 }} ,
				{ 33 ,  {-0.02769190912794019 }} ,
				{ 34 ,  {0.008409799817132614 }} ,
				{ 36 ,  {-0.027610117561601446 }} ,
				{ 37 ,  {-0.012938511817376 }} ,
				{ 49 ,  {0.08086396030711068 }} ,
				{ 56 ,  {-0.0274506256820805 }} ,
				{ 58 ,  {-0.027498037274401622 }} ,
				{ 59 ,  {-0.027605605342355174 }} ,
				{ 70 ,  {-0.002562932970182341 }} ,
				{ 76 ,  {-0.027554502764955163 }} ,
				{ 77 ,  {-0.02748787340814652 }} ,
				{ 96 ,  {0.10560285439088375 }} ,
				{ 114 ,  {-0.027566372440624272 }} ,
				{ 115 ,  {-0.027452272013170492 }} ,
				{ 156 ,  {-0.02748095714036552 }} ,
				{ 157 ,  {-0.02756164463481652 }} ,
				{ 159 ,  {-0.02738815011013568 }} ,
				{ 194 ,  {0.1351061501259262 }} ,
				{ 285 ,  {-0.014431221700424452 }} ,
				{ 286 ,  {-0.02762999383344511 }} ,
				{ 287 ,  {0.0008890248344271285 }} ,
				{ 316 ,  {-0.02747696806748036 }} ,
				{ 390 ,  {0.11702563290815743 }} ,
				{ 391 ,  {0.1303953505483749 }} ,
				{ 569 ,  {-0.027583226870053015 }} ,
				{ 634 ,  {-0.02747422439651835 }} ,
				{ 635 ,  {-0.027424183850088962 }} ,
				{ 1137 ,  {-0.02757715087640541 }} ,
				{ 2272 ,  {-0.027458038382762884 }} ,
				{ 4547 ,  {-0.027562122043819155 }} ,
				{ 9093 ,  {-0.027453641194718603 }} ,
				{ 18184 ,  {-0.02754794324526204 }} ,
				{ 18185 ,  {-0.027466052593909596 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_54 <= 10.500000000000002 ) ? ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 2272 ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_34 <= 5.500000000000001 ) ? ( ( ( Feature_62 <= 4.500000000000001 ) ? ( 18184 ) : ( 18185 ) ) ) : ( 9093 ) ) ) : ( 4547 ) ) ) ) ) : ( 1137 ) ) ) : ( 569 ) ) ) : ( 285 ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_3 <= 15.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 316 ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( 634 ) : ( 635 ) ) ) ) ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_44 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_6 <= 1.5000000000000002 ) ? ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 96 ) : ( ( ( Feature_28 <= 12.500000000000002 ) ? ( 194 ) : ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 390 ) : ( 391 ) ) ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 56 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_4
	

	namespace LGBM_Tree_0_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.04613064062952888 }} ,
				{ 10 ,  {-0.02734487710228363 }} ,
				{ 11 ,  {-0.02721618573370445 }} ,
				{ 12 ,  {0.02454068433913814 }} ,
				{ 19 ,  {0.09788234968703222 }} ,
				{ 26 ,  {-0.027450276056545122 }} ,
				{ 27 ,  {-0.027222439855204485 }} ,
				{ 30 ,  {-0.02716388271895889 }} ,
				{ 37 ,  {0.11878066115325621 }} ,
				{ 59 ,  {-0.027189959990280812 }} ,
				{ 72 ,  {0.11439616818808061 }} ,
				{ 125 ,  {-0.027226393316238825 }} ,
				{ 126 ,  {-0.027165297013645087 }} ,
				{ 147 ,  {0.11185996090061397 }} ,
				{ 224 ,  {-0.027211968505455587 }} ,
				{ 228 ,  {-0.027252417971286302 }} ,
				{ 229 ,  {-0.027152029734828997 }} ,
				{ 230 ,  {-0.02737968917901547 }} ,
				{ 232 ,  {-0.027289110369483532 }} ,
				{ 233 ,  {-0.02720317630489762 }} ,
				{ 235 ,  {-0.02734146642165369 }} ,
				{ 249 ,  {-0.02732578225217168 }} ,
				{ 254 ,  {-0.027274803069040694 }} ,
				{ 255 ,  {-0.027204340116292358 }} ,
				{ 292 ,  {0.10926046050828422 }} ,
				{ 293 ,  {0.11061865913620728 }} ,
				{ 450 ,  {-0.027247163038203105 }} ,
				{ 451 ,  {-0.027362737588081734 }} ,
				{ 452 ,  {-0.02728446140367275 }} ,
				{ 454 ,  {-0.027328982565354237 }} ,
				{ 455 ,  {-0.027234227444487443 }} ,
				{ 462 ,  {-0.027296266143996595 }} ,
				{ 463 ,  {-0.027222550444121963 }} ,
				{ 468 ,  {-0.027250114025628054 }} ,
				{ 496 ,  {-0.027212147774536927 }} ,
				{ 497 ,  {-0.027277106793848222 }} ,
				{ 906 ,  {-0.027446511657347544 }} ,
				{ 907 ,  {-0.027369133355641468 }} ,
				{ 938 ,  {-0.027358842986083 }} ,
				{ 939 ,  {-0.027246877153862044 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 8 ) : ( ( ( Feature_13 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( ( ( Feature_53 <= 12.500000000000002 ) ? ( 72 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 292 ) : ( 293 ) ) ) : ( 147 ) ) ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 12 ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 224 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( 452 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( 906 ) : ( 907 ) ) ) ) ) : ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 230 ) : ( ( ( Feature_59 <= 8.500000000000002 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( ( ( Feature_44 <= 15.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 468 ) : ( ( ( Feature_44 <= 5.500000000000001 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 30 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 496 ) : ( 497 ) ) ) : ( 249 ) ) ) : ( 125 ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( 126 ) : ( ( ( Feature_34 <= 13.500000000000002 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_5
	

	namespace LGBM_Tree_1_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.027433219231691255 }} ,
				{ 13 ,  {0.020719324309934933 }} ,
				{ 15 ,  {0.035552778273384 }} ,
				{ 18 ,  {0.11566922202726052 }} ,
				{ 19 ,  {0.06610858887039492 }} ,
				{ 20 ,  {-0.000585699579432095 }} ,
				{ 22 ,  {0.033775997803832385 }} ,
				{ 24 ,  {0.05515243987636072 }} ,
				{ 28 ,  {-0.027725088779173613 }} ,
				{ 29 ,  {-0.027412634403056052 }} ,
				{ 46 ,  {-0.027456786580638316 }} ,
				{ 47 ,  {-0.027343194230036307 }} ,
				{ 50 ,  {0.08294914130010993 }} ,
				{ 87 ,  {-0.012514860661214265 }} ,
				{ 102 ,  {0.10802364494969506 }} ,
				{ 103 ,  {0.12226970414905819 }} ,
				{ 172 ,  {-0.02752552109542618 }} ,
				{ 173 ,  {-0.02741435359146413 }} ,
				{ 340 ,  {-0.027382214442783027 }} ,
				{ 341 ,  {-0.02733932419739378 }} ,
				{ 343 ,  {-0.027474079745629012 }} ,
				{ 672 ,  {-0.027361106469357424 }} ,
				{ 674 ,  {-0.027456110026636817 }} ,
				{ 676 ,  {-0.027454485794496372 }} ,
				{ 677 ,  {-0.027351314820070128 }} ,
				{ 685 ,  {-0.02734564390435791 }} ,
				{ 1347 ,  {-0.027429990706576562 }} ,
				{ 1350 ,  {-0.027609268218515105 }} ,
				{ 1351 ,  {-0.02752104673962409 }} ,
				{ 1356 ,  {-0.027452475652042726 }} ,
				{ 1357 ,  {-0.02738473331991442 }} ,
				{ 1359 ,  {-0.02741043362010591 }} ,
				{ 1368 ,  {-0.027468505888834406 }} ,
				{ 1369 ,  {-0.02737842574674894 }} ,
				{ 2692 ,  {-0.027457387915663285 }} ,
				{ 2693 ,  {-0.027594996992103327 }} ,
				{ 2717 ,  {-0.02756318187832751 }} ,
				{ 5432 ,  {-0.027522951866766 }} ,
				{ 10866 ,  {-0.027394491444390986 }} ,
				{ 10867 ,  {-0.02746850910007146 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 672 ) : ( ( ( Feature_17 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 674 ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 1356 ) : ( 1357 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 5432 ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 10866 ) : ( 10867 ) ) ) ) ) : ( 2717 ) ) ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_10 <= 14.500000000000002 ) ? ( 340 ) : ( 341 ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 1368 ) : ( 1369 ) ) ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_10 <= 13.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 24 ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 50 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_42 <= 12.500000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_5
	

	namespace LGBM_Tree_2_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.09030227382332896 }} ,
				{ 14 ,  {0.021268557888373993 }} ,
				{ 16 ,  {0.0008628107465060317 }} ,
				{ 21 ,  {0.011884449743671862 }} ,
				{ 25 ,  {0.04465946746469543 }} ,
				{ 26 ,  {0.05324061588969571 }} ,
				{ 27 ,  {-0.027991364934280977 }} ,
				{ 31 ,  {-0.027954087952562635 }} ,
				{ 40 ,  {-0.02752727975106304 }} ,
				{ 41 ,  {-0.02741470029863209 }} ,
				{ 46 ,  {-0.02747267236898296 }} ,
				{ 61 ,  {-0.027410719008856332 }} ,
				{ 68 ,  {-0.027427116693224868 }} ,
				{ 69 ,  {-0.02734616668160518 }} ,
				{ 71 ,  {-0.027417981096500423 }} ,
				{ 88 ,  {-0.02751592586039722 }} ,
				{ 89 ,  {-0.027361949707198952 }} ,
				{ 94 ,  {-0.027372083940878335 }} ,
				{ 96 ,  {0.10978898347078354 }} ,
				{ 97 ,  {0.10238556796601642 }} ,
				{ 98 ,  {0.11074221883138709 }} ,
				{ 99 ,  {0.11922012225345363 }} ,
				{ 120 ,  {-0.027570073064208108 }} ,
				{ 121 ,  {-0.027426750177239573 }} ,
				{ 140 ,  {-0.027467970438858364 }} ,
				{ 141 ,  {-0.027553635371856358 }} ,
				{ 190 ,  {-0.027389654556164468 }} ,
				{ 191 ,  {-0.027437329502187982 }} ,
				{ 360 ,  {-0.027432693308027313 }} ,
				{ 361 ,  {-0.027339115126401456 }} ,
				{ 362 ,  {-0.027429029443945055 }} ,
				{ 363 ,  {-0.02754615240612636 }} ,
				{ 364 ,  {-0.027449317632293024 }} ,
				{ 366 ,  {-0.027422186357703993 }} ,
				{ 367 ,  {-0.027503771204436745 }} ,
				{ 731 ,  {-0.0274313283598695 }} ,
				{ 1461 ,  {-0.027489440768208574 }} ,
				{ 2921 ,  {-0.027517002829567167 }} ,
				{ 5840 ,  {-0.027566509488789533 }} ,
				{ 5841 ,  {-0.02765826228951115 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_12 <= 11.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 364 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_45 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( 5840 ) : ( 5841 ) ) ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 94 ) : ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_35 <= 5.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_5
	

	namespace LGBM_Tree_3_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.07457664347638493 }} ,
				{ 10 ,  {0.015906576581293932 }} ,
				{ 16 ,  {0.11470636155033519 }} ,
				{ 17 ,  {0.10410981777319853 }} ,
				{ 23 ,  {0.0010200984728127211 }} ,
				{ 25 ,  {-0.027506038260051126 }} ,
				{ 26 ,  {0.01827493088045544 }} ,
				{ 28 ,  {0.03818492268810934 }} ,
				{ 29 ,  {-0.027640456394765686 }} ,
				{ 44 ,  {-0.02758322017969895 }} ,
				{ 48 ,  {0.050566116002410955 }} ,
				{ 49 ,  {0.11453776271978233 }} ,
				{ 55 ,  {-0.012709017105031948 }} ,
				{ 90 ,  {-0.027481064269740115 }} ,
				{ 91 ,  {-0.027362602324847957 }} ,
				{ 109 ,  {-0.02797445909252714 }} ,
				{ 121 ,  {-0.027307531087773746 }} ,
				{ 124 ,  {-0.01214362267141927 }} ,
				{ 126 ,  {0.04746751241710874 }} ,
				{ 127 ,  {-0.027729762639052132 }} ,
				{ 216 ,  {-0.027521754929214062 }} ,
				{ 217 ,  {-0.027354480282419602 }} ,
				{ 240 ,  {-0.027350524428802894 }} ,
				{ 241 ,  {-0.02743992707746957 }} ,
				{ 244 ,  {-0.027331814852576655 }} ,
				{ 250 ,  {-0.02761321952689205 }} ,
				{ 493 ,  {-0.027325020934517566 }} ,
				{ 494 ,  {-0.027467740620407632 }} ,
				{ 495 ,  {-0.02737062642306995 }} ,
				{ 503 ,  {-0.02749819410376634 }} ,
				{ 980 ,  {-0.02745008720279479 }} ,
				{ 981 ,  {-0.027535863949304136 }} ,
				{ 983 ,  {-0.027382357163294808 }} ,
				{ 984 ,  {-0.027427727408923942 }} ,
				{ 985 ,  {-0.027336458809515858 }} ,
				{ 1004 ,  {-0.027428265240421412 }} ,
				{ 1005 ,  {-0.027330094649804373 }} ,
				{ 1965 ,  {-0.02739792841342833 }} ,
				{ 3928 ,  {-0.027520867686996138 }} ,
				{ 3929 ,  {-0.027408554358196214 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_19 <= 4.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 10 ) : ( ( ( Feature_27 <= 11.500000000000002 ) ? ( ( ( Feature_50 <= 6.500000000000001 ) ? ( 44 ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 90 ) : ( 91 ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_44 <= 15.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 2.5000000000000004 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_18 <= 15.500000000000002 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 244 ) : ( ( ( Feature_45 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 980 ) : ( 981 ) ) ) : ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_50 <= 9.500000000000002 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( 3928 ) : ( 3929 ) ) ) : ( 1965 ) ) ) : ( 983 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( 984 ) : ( 985 ) ) ) : ( 493 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 124 ) : ( ( ( Feature_53 <= 5.500000000000001 ) ? ( 250 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 1004 ) : ( 1005 ) ) ) : ( 503 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 10.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_5
	

	namespace LGBM_Tree_4_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.042985075971108816 }} ,
				{ 12 ,  {0.10968533602619208 }} ,
				{ 16 ,  {-0.012997123873311093 }} ,
				{ 20 ,  {-0.008731289108598257 }} ,
				{ 22 ,  {0.045947996041708676 }} ,
				{ 23 ,  {-0.02777593378132276 }} ,
				{ 26 ,  {0.10619580657003763 }} ,
				{ 27 ,  {0.1075003127543262 }} ,
				{ 35 ,  {-0.027636364530910947 }} ,
				{ 37 ,  {-0.006367745547948039 }} ,
				{ 38 ,  {0.006963091440908222 }} ,
				{ 39 ,  {-0.02830444623635757 }} ,
				{ 43 ,  {-0.01884468577608299 }} ,
				{ 69 ,  {-0.0274287456083545 }} ,
				{ 72 ,  {0.09084302546739688 }} ,
				{ 73 ,  {0.1237956878699019 }} ,
				{ 136 ,  {-0.027569509191484612 }} ,
				{ 137 ,  {-0.027464898988013728 }} ,
				{ 341 ,  {-0.027393940838027955 }} ,
				{ 342 ,  {-0.02747078421654571 }} ,
				{ 343 ,  {-0.02755151385339974 }} ,
				{ 672 ,  {-0.027586649151732152 }} ,
				{ 673 ,  {-0.027475262465773476 }} ,
				{ 674 ,  {-0.027501352878622695 }} ,
				{ 679 ,  {-0.02749491869073937 }} ,
				{ 681 ,  {-0.02742318960841021 }} ,
				{ 1350 ,  {-0.02735975812984162 }} ,
				{ 1351 ,  {-0.027426921418022627 }} ,
				{ 1352 ,  {-0.02748110037231767 }} ,
				{ 1355 ,  {-0.027519764476136584 }} ,
				{ 1356 ,  {-0.02752989732969634 }} ,
				{ 1357 ,  {-0.027637233460108514 }} ,
				{ 1360 ,  {-0.027455861224290945 }} ,
				{ 1361 ,  {-0.02750589981902675 }} ,
				{ 2708 ,  {-0.027472696811217334 }} ,
				{ 2709 ,  {-0.027380283215310088 }} ,
				{ 5412 ,  {-0.027543825177347353 }} ,
				{ 5413 ,  {-0.02763407680588096 }} ,
				{ 5414 ,  {-0.027478975885007174 }} ,
				{ 5415 ,  {-0.02755432117755151 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_61 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 8.500000000000002 ) ? ( ( ( Feature_36 <= 14.500000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( 674 ) : ( ( ( Feature_25 <= 1.0000000180025095e-35 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( 1352 ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 5.500000000000001 ) ? ( 5412 ) : ( 5413 ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 5414 ) : ( 5415 ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 11.500000000000002 ) ? ( 2708 ) : ( 2709 ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_37 <= 3.5000000000000004 ) ? ( 1356 ) : ( 1357 ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_61 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 13.500000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( 1360 ) : ( 1361 ) ) ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 12 ) : ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_5
	

	namespace LGBM_Tree_5_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.012727947850785152 }} ,
				{ 11 ,  {-0.018854403788576567 }} ,
				{ 15 ,  {0.049501092400042385 }} ,
				{ 19 ,  {-0.014325870226826543 }} ,
				{ 20 ,  {0.08877078780811402 }} ,
				{ 24 ,  {0.0012277735501859766 }} ,
				{ 28 ,  {-0.027480135789283322 }} ,
				{ 36 ,  {-0.027771094103119755 }} ,
				{ 43 ,  {0.09995419658452681 }} ,
				{ 50 ,  {-0.027319569857945043 }} ,
				{ 51 ,  {-0.027433385721081244 }} ,
				{ 55 ,  {-0.027628379654790647 }} ,
				{ 59 ,  {-0.02730711839762655 }} ,
				{ 74 ,  {-0.027518093735159302 }} ,
				{ 84 ,  {0.1267817259270871 }} ,
				{ 106 ,  {-0.02729971608916847 }} ,
				{ 108 ,  {-0.027448608072362102 }} ,
				{ 109 ,  {-0.02734561808110276 }} ,
				{ 117 ,  {-0.0273361554647654 }} ,
				{ 150 ,  {-0.027417578194940145 }} ,
				{ 170 ,  {0.11709007780725036 }} ,
				{ 208 ,  {-0.027359051662043506 }} ,
				{ 210 ,  {-0.02732868195975909 }} ,
				{ 211 ,  {-0.027444425096814593 }} ,
				{ 215 ,  {-0.027290240026037162 }} ,
				{ 232 ,  {-0.027466032728438783 }} ,
				{ 233 ,  {-0.027347099694773492 }} ,
				{ 302 ,  {-0.027334115540676066 }} ,
				{ 303 ,  {-0.027268149686931392 }} ,
				{ 342 ,  {0.10590975512051236 }} ,
				{ 343 ,  {0.11124990865705807 }} ,
				{ 429 ,  {-0.027462076477961162 }} ,
				{ 836 ,  {-0.027414018967240807 }} ,
				{ 837 ,  {-0.027499220475982623 }} ,
				{ 838 ,  {-0.027374652487880593 }} ,
				{ 839 ,  {-0.027448677357354314 }} ,
				{ 1712 ,  {-0.02734793985040737 }} ,
				{ 1713 ,  {-0.027262670809121932 }} ,
				{ 1714 ,  {-0.02734703227363256 }} ,
				{ 1715 ,  {-0.027434460539029745 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_13 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 74 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 150 ) : ( ( ( Feature_49 <= 1.5000000000000002 ) ? ( 302 ) : ( 303 ) ) ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 20 ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 84 ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( 170 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 208 ) : ( ( ( Feature_42 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 836 ) : ( 837 ) ) ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( 838 ) : ( 839 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 106 ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_35 <= 3.5000000000000004 ) ? ( ( ( Feature_2 <= 8.500000000000002 ) ? ( 1712 ) : ( 1713 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1714 ) : ( 1715 ) ) ) ) ) : ( 429 ) ) ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( ( ( Feature_30 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_5
	

	namespace LGBM_Tree_6_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.009614305685555949 }} ,
				{ 9 ,  {0.011998691107060214 }} ,
				{ 10 ,  {-0.02777290843973175 }} ,
				{ 15 ,  {-0.01220273455633735 }} ,
				{ 16 ,  {-0.027642927119563537 }} ,
				{ 23 ,  {0.021795687465722965 }} ,
				{ 44 ,  {0.08645278186532529 }} ,
				{ 56 ,  {-0.02740312280947675 }} ,
				{ 57 ,  {-0.01212531348425838 }} ,
				{ 68 ,  {-0.02744317014874137 }} ,
				{ 69 ,  {-0.027290830903555885 }} ,
				{ 70 ,  {-0.027211217979432135 }} ,
				{ 71 ,  {-0.027280103469321283 }} ,
				{ 90 ,  {0.12479253741703362 }} ,
				{ 119 ,  {-0.027245598409706258 }} ,
				{ 182 ,  {0.11535808657999642 }} ,
				{ 236 ,  {-0.027265322970642065 }} ,
				{ 367 ,  {0.11260575212330554 }} ,
				{ 464 ,  {-0.027263790447694093 }} ,
				{ 465 ,  {-0.027339942154401154 }} ,
				{ 470 ,  {-0.027365431679246262 }} ,
				{ 471 ,  {-0.02727235229487316 }} ,
				{ 474 ,  {-0.02729839538762569 }} ,
				{ 475 ,  {-0.027338513333634164 }} ,
				{ 732 ,  {0.1101588649818277 }} ,
				{ 733 ,  {0.10874364433236568 }} ,
				{ 932 ,  {-0.027349847475211415 }} ,
				{ 933 ,  {-0.027493157132698773 }} ,
				{ 935 ,  {-0.027257959403614654 }} ,
				{ 938 ,  {-0.027280624532712117 }} ,
				{ 939 ,  {-0.027385779455306455 }} ,
				{ 1869 ,  {-0.027396565668874724 }} ,
				{ 1872 ,  {-0.02752082882320065 }} ,
				{ 1873 ,  {-0.027436263318035364 }} ,
				{ 1875 ,  {-0.027338368417505973 }} ,
				{ 3736 ,  {-0.02729731937727996 }} ,
				{ 3737 ,  {-0.02737117150951421 }} ,
				{ 3749 ,  {-0.02736260251414756 }} ,
				{ 7496 ,  {-0.027395677047790987 }} ,
				{ 7497 ,  {-0.027486198063716057 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( 68 ) : ( 69 ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 44 ) : ( ( ( Feature_37 <= 5.500000000000001 ) ? ( 90 ) : ( ( ( Feature_34 <= 14.500000000000002 ) ? ( 182 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( ( ( Feature_3 <= 11.500000000000002 ) ? ( 1872 ) : ( 1873 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_50 <= 9.500000000000002 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 7496 ) : ( 7497 ) ) ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 236 ) : ( ( ( Feature_35 <= 6.500000000000001 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_5
	

	namespace LGBM_Tree_7_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.0327038881544259 }} ,
				{ 9 ,  {0.011448054005495223 }} ,
				{ 16 ,  {0.04463169775518401 }} ,
				{ 20 ,  {0.09949986568092953 }} ,
				{ 21 ,  {-0.002990988483910759 }} ,
				{ 23 ,  {-0.013151330657112848 }} ,
				{ 25 ,  {0.027968665574403275 }} ,
				{ 34 ,  {0.12393894249676687 }} ,
				{ 44 ,  {-0.02745298369870149 }} ,
				{ 45 ,  {-0.027936336546020152 }} ,
				{ 48 ,  {-0.027310433996397987 }} ,
				{ 49 ,  {-0.027553505835311354 }} ,
				{ 54 ,  {-0.0028340616787268518 }} ,
				{ 70 ,  {0.11522525949902995 }} ,
				{ 110 ,  {-0.027289797391682344 }} ,
				{ 111 ,  {-0.027422450525780285 }} ,
				{ 142 ,  {0.11144561705727406 }} ,
				{ 143 ,  {0.10945820005227472 }} ,
				{ 210 ,  {-0.02719198427548554 }} ,
				{ 211 ,  {-0.027271269017445872 }} ,
				{ 212 ,  {-0.027245089085379415 }} ,
				{ 214 ,  {-0.027183939302467902 }} ,
				{ 215 ,  {-0.027249939094252773 }} ,
				{ 418 ,  {-0.02724216748036086 }} ,
				{ 419 ,  {-0.027303538446799315 }} ,
				{ 426 ,  {-0.02726602106710775 }} ,
				{ 832 ,  {-0.027274047537442555 }} ,
				{ 854 ,  {-0.027376293679543324 }} ,
				{ 1668 ,  {-0.027267923322926713 }} ,
				{ 1669 ,  {-0.02732610073945333 }} ,
				{ 1710 ,  {-0.027252456784456078 }} ,
				{ 1711 ,  {-0.027332317277615155 }} ,
				{ 3332 ,  {-0.027474916397273008 }} ,
				{ 3333 ,  {-0.02737078834546058 }} ,
				{ 3334 ,  {-0.027387079000886667 }} ,
				{ 3335 ,  {-0.027310154250525232 }} ,
				{ 3340 ,  {-0.027318507559964157 }} ,
				{ 3341 ,  {-0.027423628831944175 }} ,
				{ 3342 ,  {-0.02724924219210445 }} ,
				{ 3343 ,  {-0.027332242216607947 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 3.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 70 ) : ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_38 <= 4.500000000000001 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 832 ) : ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 3332 ) : ( 3333 ) ) ) : ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 1668 ) : ( 1669 ) ) ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 3340 ) : ( 3341 ) ) ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 3342 ) : ( 3343 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_12 <= 7.500000000000001 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( 212 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 426 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 854 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( 1710 ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 54 ) : ( ( ( Feature_11 <= 10.500000000000002 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_5
	

	namespace LGBM_Tree_8_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.02972959830730809 }} ,
				{ 18 ,  {-0.010265228953911208 }} ,
				{ 21 ,  {0.025693531777999323 }} ,
				{ 27 ,  {-0.02723823719203431 }} ,
				{ 29 ,  {-0.011917126358431717 }} ,
				{ 31 ,  {0.07728058253587101 }} ,
				{ 32 ,  {-0.027316975692335817 }} ,
				{ 33 ,  {-0.027175538803181194 }} ,
				{ 41 ,  {-0.012635721259620765 }} ,
				{ 44 ,  {0.01882300441829237 }} ,
				{ 46 ,  {-0.027512359754697263 }} ,
				{ 47 ,  {0.019685538131598537 }} ,
				{ 48 ,  {-0.027238369953092173 }} ,
				{ 49 ,  {-0.02716193705030172 }} ,
				{ 50 ,  {-0.0273283501331007 }} ,
				{ 52 ,  {-0.027172866596444134 }} ,
				{ 53 ,  {-0.027115924257028846 }} ,
				{ 56 ,  {-0.02735198748462783 }} ,
				{ 60 ,  {-0.027686612792675116 }} ,
				{ 61 ,  {-0.02716846056065371 }} ,
				{ 76 ,  {-0.027171292329013903 }} ,
				{ 78 ,  {-0.02723393200000128 }} ,
				{ 79 ,  {-0.027376651121270346 }} ,
				{ 81 ,  {-0.027828826120926978 }} ,
				{ 90 ,  {0.05134247907218682 }} ,
				{ 102 ,  {-0.02716752017969958 }} ,
				{ 114 ,  {-0.027256191987238273 }} ,
				{ 115 ,  {-0.02718021659656103 }} ,
				{ 154 ,  {-0.027294744924028266 }} ,
				{ 155 ,  {-0.02716654717681636 }} ,
				{ 161 ,  {-0.02751930223682827 }} ,
				{ 182 ,  {0.10479513149589803 }} ,
				{ 207 ,  {-0.02720492942691013 }} ,
				{ 320 ,  {-0.027211451184475266 }} ,
				{ 321 ,  {-0.02734592931507442 }} ,
				{ 367 ,  {0.11216465936873948 }} ,
				{ 412 ,  {-0.027330573264893507 }} ,
				{ 413 ,  {-0.027210337821847813 }} ,
				{ 732 ,  {0.13421413970745802 }} ,
				{ 733 ,  {0.1227048404235466 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 76 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_5 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( ( ( Feature_25 <= 2.5000000000000004 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 320 ) : ( 321 ) ) ) : ( 161 ) ) ) : ( 81 ) ) ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 44 ) : ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 90 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( 182 ) : ( ( ( Feature_18 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_5
	

	namespace LGBM_Tree_9_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.06855796214237724 }} ,
				{ 13 ,  {-0.019178565974435013 }} ,
				{ 15 ,  {0.005905442018660406 }} ,
				{ 22 ,  {-0.02768735224607674 }} ,
				{ 23 ,  {-0.027438036257325896 }} ,
				{ 25 ,  {0.006144474177159468 }} ,
				{ 32 ,  {0.04891744186358249 }} ,
				{ 33 ,  {-0.027694733435319193 }} ,
				{ 34 ,  {0.008319558809141281 }} ,
				{ 36 ,  {-0.027554966828122824 }} ,
				{ 37 ,  {-0.01254126444332021 }} ,
				{ 49 ,  {0.06805383797482321 }} ,
				{ 56 ,  {-0.027363445468309645 }} ,
				{ 58 ,  {-0.027419594848379553 }} ,
				{ 59 ,  {-0.027548470349586674 }} ,
				{ 70 ,  {-0.0023641784275394017 }} ,
				{ 77 ,  {-0.027399716438263368 }} ,
				{ 96 ,  {0.07823210002706046 }} ,
				{ 114 ,  {-0.027499176621938043 }} ,
				{ 115 ,  {-0.027363104096458857 }} ,
				{ 152 ,  {-0.02745459378783517 }} ,
				{ 153 ,  {-0.02752759058878669 }} ,
				{ 156 ,  {-0.027393784824150277 }} ,
				{ 157 ,  {-0.02749042955710253 }} ,
				{ 159 ,  {-0.027284596279178494 }} ,
				{ 194 ,  {0.128602430987076 }} ,
				{ 285 ,  {-0.014253177400855188 }} ,
				{ 286 ,  {0.0011592528769712703 }} ,
				{ 287 ,  {-0.0275816008899904 }} ,
				{ 390 ,  {0.09972914868160704 }} ,
				{ 391 ,  {0.1136563282899476 }} ,
				{ 569 ,  {-0.027510212700949273 }} ,
				{ 632 ,  {-0.027375783797412075 }} ,
				{ 633 ,  {-0.027442203095539765 }} ,
				{ 634 ,  {-0.027370137675825565 }} ,
				{ 635 ,  {-0.027318337398872267 }} ,
				{ 2272 ,  {-0.027398161606261906 }} ,
				{ 2273 ,  {-0.027504881201917127 }} ,
				{ 2274 ,  {-0.027414310849746444 }} ,
				{ 2275 ,  {-0.027362603478159293 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 2.5000000000000004 ) ? ( ( ( Feature_36 <= 12.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 2272 ) : ( 2273 ) ) ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( 2274 ) : ( 2275 ) ) ) ) ) : ( 569 ) ) ) : ( 285 ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 286 ) : ( 287 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 156 ) : ( 157 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_36 <= 2.5000000000000004 ) ? ( 632 ) : ( 633 ) ) ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( 634 ) : ( 635 ) ) ) ) ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 10 ) : ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 11.500000000000002 ) ? ( ( ( Feature_45 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 96 ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 194 ) : ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 390 ) : ( 391 ) ) ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 56 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_5
	

	namespace LGBM_Tree_0_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.041812036493805854 }} ,
				{ 10 ,  {-0.027288440148995587 }} ,
				{ 11 ,  {-0.02713801060518264 }} ,
				{ 13 ,  {0.02425303584316675 }} ,
				{ 16 ,  {0.08824329831622817 }} ,
				{ 24 ,  {-0.02719585944349593 }} ,
				{ 25 ,  {-0.027510095194029915 }} ,
				{ 30 ,  {-0.027078221314386315 }} ,
				{ 34 ,  {0.1095430814889985 }} ,
				{ 70 ,  {0.09627882164469924 }} ,
				{ 116 ,  {-0.02711845039741775 }} ,
				{ 117 ,  {-0.027181593389043652 }} ,
				{ 124 ,  {-0.027161952269737652 }} ,
				{ 126 ,  {-0.027077073154687405 }} ,
				{ 143 ,  {0.10356362655837976 }} ,
				{ 224 ,  {-0.027128868465153506 }} ,
				{ 228 ,  {-0.027173967325826165 }} ,
				{ 229 ,  {-0.027064302493920847 }} ,
				{ 230 ,  {-0.027331377543157037 }} ,
				{ 236 ,  {-0.02721627054421451 }} ,
				{ 237 ,  {-0.027112833891293958 }} ,
				{ 239 ,  {-0.027174395257387282 }} ,
				{ 250 ,  {-0.02716768011909751 }} ,
				{ 251 ,  {-0.02728433870350651 }} ,
				{ 254 ,  {-0.027219341809653 }} ,
				{ 255 ,  {-0.027123498612834574 }} ,
				{ 284 ,  {0.10245953216576703 }} ,
				{ 285 ,  {0.0990430544654993 }} ,
				{ 450 ,  {-0.027170990676889356 }} ,
				{ 451 ,  {-0.027310638525193637 }} ,
				{ 452 ,  {-0.027214806969471796 }} ,
				{ 454 ,  {-0.027265569070313956 }} ,
				{ 455 ,  {-0.027155709555638792 }} ,
				{ 462 ,  {-0.027232848706632673 }} ,
				{ 463 ,  {-0.027145748217315687 }} ,
				{ 476 ,  {-0.027272312058380085 }} ,
				{ 906 ,  {-0.027410209517462987 }} ,
				{ 907 ,  {-0.027315707246529555 }} ,
				{ 954 ,  {-0.027145109250560726 }} ,
				{ 955 ,  {-0.027236983754775547 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_44 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( 16 ) : ( ( ( Feature_61 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_45 <= 9.500000000000002 ) ? ( 284 ) : ( 285 ) ) ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 224 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( 452 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( 906 ) : ( 907 ) ) ) ) ) : ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 230 ) : ( ( ( Feature_59 <= 8.500000000000002 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 476 ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 954 ) : ( 955 ) ) ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 30 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 124 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 126 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_6
	

	namespace LGBM_Tree_1_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.027349738664138014 }} ,
				{ 13 ,  {0.0020806190951964476 }} ,
				{ 15 ,  {0.02923118885556149 }} ,
				{ 18 ,  {0.1093848981002761 }} ,
				{ 19 ,  {0.06595807483471587 }} ,
				{ 20 ,  {-0.000604251357051688 }} ,
				{ 22 ,  {0.03201127282645298 }} ,
				{ 25 ,  {0.05243284659978138 }} ,
				{ 28 ,  {-0.027562994794096535 }} ,
				{ 29 ,  {-0.028657956804700166 }} ,
				{ 46 ,  {-0.027379986266447245 }} ,
				{ 47 ,  {-0.027255229414890322 }} ,
				{ 48 ,  {0.11119314037604772 }} ,
				{ 87 ,  {-0.01209023845094039 }} ,
				{ 98 ,  {0.10340238949070486 }} ,
				{ 99 ,  {0.08012765194307825 }} ,
				{ 172 ,  {-0.027455647040989035 }} ,
				{ 173 ,  {-0.02732921690128532 }} ,
				{ 340 ,  {-0.027418323021894273 }} ,
				{ 343 ,  {-0.02723700772103777 }} ,
				{ 672 ,  {-0.027271178748169356 }} ,
				{ 674 ,  {-0.027382419255770393 }} ,
				{ 676 ,  {-0.027380613824262174 }} ,
				{ 677 ,  {-0.027263131793101872 }} ,
				{ 679 ,  {-0.02746406354303496 }} ,
				{ 682 ,  {-0.027340219747614504 }} ,
				{ 683 ,  {-0.02725617742722604 }} ,
				{ 684 ,  {-0.027300725934807285 }} ,
				{ 685 ,  {-0.02722277678678683 }} ,
				{ 1347 ,  {-0.02735614101455344 }} ,
				{ 1350 ,  {-0.027563826754352472 }} ,
				{ 1351 ,  {-0.02746017287080424 }} ,
				{ 1356 ,  {-0.027434181097106117 }} ,
				{ 2692 ,  {-0.027383724191394676 }} ,
				{ 2693 ,  {-0.027549201212902732 }} ,
				{ 2715 ,  {-0.02741005027318452 }} ,
				{ 5429 ,  {-0.027398711519988045 }} ,
				{ 10857 ,  {-0.027300302509106967 }} ,
				{ 21712 ,  {-0.02730832330080406 }} ,
				{ 21713 ,  {-0.027410679827536363 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 8 ) : ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 672 ) : ( ( ( Feature_17 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 2692 ) : ( 2693 ) ) ) : ( 1347 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 674 ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_18 <= 15.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 1356 ) : ( ( ( Feature_44 <= 14.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( ( ( Feature_13 <= 11.500000000000002 ) ? ( 21712 ) : ( 21713 ) ) ) : ( 10857 ) ) ) : ( 5429 ) ) ) : ( 2715 ) ) ) ) ) : ( 679 ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 7.500000000000001 ) ? ( 340 ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 8.500000000000002 ) ? ( 684 ) : ( 685 ) ) ) : ( 343 ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 15.500000000000002 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( ( ( Feature_9 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 10.500000000000002 ) ? ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 48 ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_6
	

	namespace LGBM_Tree_2_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.0821923970963353 }} ,
				{ 14 ,  {0.020483445321673666 }} ,
				{ 16 ,  {0.0008943049892975036 }} ,
				{ 20 ,  {0.011952087950056133 }} ,
				{ 21 ,  {-0.02756776408775882 }} ,
				{ 25 ,  {0.04168950674083287 }} ,
				{ 26 ,  {0.04981437234046453 }} ,
				{ 27 ,  {-0.02787996090876211 }} ,
				{ 31 ,  {-0.027858172246002268 }} ,
				{ 34 ,  {-0.027447254796685257 }} ,
				{ 46 ,  {-0.027398490458264285 }} ,
				{ 61 ,  {-0.027331045593820005 }} ,
				{ 71 ,  {-0.027284131178548682 }} ,
				{ 88 ,  {-0.02744705295390781 }} ,
				{ 89 ,  {-0.027272956160326836 }} ,
				{ 94 ,  {-0.027223878738759658 }} ,
				{ 96 ,  {0.09929112853085317 }} ,
				{ 97 ,  {0.09287411621754321 }} ,
				{ 98 ,  {0.10015619942152987 }} ,
				{ 99 ,  {0.10741214407035367 }} ,
				{ 120 ,  {-0.02733035255074347 }} ,
				{ 121 ,  {-0.027520913521965496 }} ,
				{ 140 ,  {-0.027325456744963346 }} ,
				{ 141 ,  {-0.027397112121529794 }} ,
				{ 191 ,  {-0.027249945046710168 }} ,
				{ 361 ,  {-0.027242406461451825 }} ,
				{ 362 ,  {-0.02734515855417563 }} ,
				{ 363 ,  {-0.027488907794138897 }} ,
				{ 364 ,  {-0.027376650911129192 }} ,
				{ 366 ,  {-0.027478881967448306 }} ,
				{ 380 ,  {-0.027309813407004654 }} ,
				{ 381 ,  {-0.027349760617737306 }} ,
				{ 720 ,  {-0.02732604898528579 }} ,
				{ 721 ,  {-0.02740583281243916 }} ,
				{ 731 ,  {-0.02734225800538776 }} ,
				{ 734 ,  {-0.027333680881106555 }} ,
				{ 735 ,  {-0.02740914326948431 }} ,
				{ 1461 ,  {-0.0274312923234342 }} ,
				{ 2920 ,  {-0.02751350009124621 }} ,
				{ 2921 ,  {-0.027618660487701792 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_2 <= 11.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 720 ) : ( 721 ) ) ) : ( 361 ) ) ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 364 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_45 <= 13.500000000000002 ) ? ( ( ( Feature_34 <= 3.5000000000000004 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( 366 ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 1.5000000000000002 ) ? ( 94 ) : ( ( ( Feature_38 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 14.500000000000002 ) ? ( 380 ) : ( 381 ) ) ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_44 <= 9.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_35 <= 5.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_6
	

	namespace LGBM_Tree_3_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.02043488106044226 }} ,
				{ 12 ,  {0.03721265204876049 }} ,
				{ 13 ,  {-0.02767947073102882 }} ,
				{ 16 ,  {0.01680184427500774 }} ,
				{ 20 ,  {-0.019472073657399922 }} ,
				{ 21 ,  {0.07209928811175477 }} ,
				{ 22 ,  {0.01836841735200237 }} ,
				{ 34 ,  {0.07602097234523406 }} ,
				{ 47 ,  {-0.027864193796504573 }} ,
				{ 57 ,  {-0.027221053071600616 }} ,
				{ 60 ,  {-0.011815522645678285 }} ,
				{ 62 ,  {-0.02758903799178851 }} ,
				{ 63 ,  {0.0460235506854069 }} ,
				{ 70 ,  {0.11044658175302911 }} ,
				{ 93 ,  {-0.02730251576026398 }} ,
				{ 113 ,  {-0.027376760657583866 }} ,
				{ 122 ,  {-0.027527807234910873 }} ,
				{ 142 ,  {0.09794695379578244 }} ,
				{ 143 ,  {0.10671119598256273 }} ,
				{ 224 ,  {-0.027321071181712828 }} ,
				{ 225 ,  {-0.027235125859256568 }} ,
				{ 234 ,  {-0.02724247042463105 }} ,
				{ 236 ,  {-0.027295036776928967 }} ,
				{ 237 ,  {-0.027240426965711575 }} ,
				{ 238 ,  {-0.02740606703619298 }} ,
				{ 239 ,  {-0.027285937835539637 }} ,
				{ 247 ,  {-0.027254964393195164 }} ,
				{ 368 ,  {-0.027472672561027422 }} ,
				{ 369 ,  {-0.027262170484624062 }} ,
				{ 370 ,  {-0.027565408869039482 }} ,
				{ 371 ,  {-0.027416244069421225 }} ,
				{ 464 ,  {-0.02740432205317091 }} ,
				{ 465 ,  {-0.027307040861522542 }} ,
				{ 466 ,  {-0.027505045747147457 }} ,
				{ 470 ,  {-0.027421834303380545 }} ,
				{ 471 ,  {-0.027264246612069006 }} ,
				{ 492 ,  {-0.027340615767430722 }} ,
				{ 493 ,  {-0.027457945135057324 }} ,
				{ 934 ,  {-0.02732294971228096 }} ,
				{ 935 ,  {-0.02744665113294749 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 70 ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_18 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 466 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 234 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_53 <= 5.500000000000001 ) ? ( 122 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 492 ) : ( 493 ) ) ) : ( 247 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_6
	

	namespace LGBM_Tree_4_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.02131418171831254 }} ,
				{ 14 ,  {0.07455107087627044 }} ,
				{ 17 ,  {-0.012752930321065845 }} ,
				{ 20 ,  {-0.008450372383869508 }} ,
				{ 22 ,  {0.04516203123649967 }} ,
				{ 23 ,  {-0.02776041260370057 }} ,
				{ 31 ,  {0.10583811802529262 }} ,
				{ 33 ,  {-0.027578368267116488 }} ,
				{ 37 ,  {0.0005296570519116122 }} ,
				{ 38 ,  {0.006862774533949379 }} ,
				{ 39 ,  {-0.028196756539865232 }} ,
				{ 43 ,  {-0.018646001234136608 }} ,
				{ 60 ,  {0.09301277115535432 }} ,
				{ 61 ,  {0.09810198772714726 }} ,
				{ 65 ,  {-0.02733781462749481 }} ,
				{ 72 ,  {0.11009319591104566 }} ,
				{ 73 ,  {0.08143357425398723 }} ,
				{ 128 ,  {-0.027534384025126774 }} ,
				{ 129 ,  {-0.02741658965375067 }} ,
				{ 341 ,  {-0.027339313839014442 }} ,
				{ 342 ,  {-0.027383020709502916 }} ,
				{ 343 ,  {-0.027479414224029483 }} ,
				{ 672 ,  {-0.02739352784926845 }} ,
				{ 673 ,  {-0.027521631750435684 }} ,
				{ 674 ,  {-0.027422250003777845 }} ,
				{ 676 ,  {-0.027560638396265952 }} ,
				{ 680 ,  {-0.027456211748707826 }} ,
				{ 681 ,  {-0.027361272258057318 }} ,
				{ 1350 ,  {-0.027256640127635408 }} ,
				{ 1351 ,  {-0.02733580396888728 }} ,
				{ 1355 ,  {-0.027548528561811305 }} ,
				{ 1357 ,  {-0.02735437576343577 }} ,
				{ 1358 ,  {-0.027509052976139665 }} ,
				{ 1359 ,  {-0.02737840055476408 }} ,
				{ 2709 ,  {-0.027497018316133395 }} ,
				{ 2712 ,  {-0.027384415228522502 }} ,
				{ 2713 ,  {-0.02746059887400521 }} ,
				{ 5417 ,  {-0.027466954480678502 }} ,
				{ 10832 ,  {-0.027467420118210434 }} ,
				{ 10833 ,  {-0.027362422138612515 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 5.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 128 ) : ( 129 ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_61 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 672 ) : ( 673 ) ) ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( 674 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 1350 ) : ( 1351 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 676 ) : ( ( ( Feature_44 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 10832 ) : ( 10833 ) ) ) : ( 5417 ) ) ) : ( 2709 ) ) ) : ( 1355 ) ) ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( 2712 ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 680 ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 6 ) : ( ( ( Feature_44 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_6
	

	namespace LGBM_Tree_5_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.012182747832049376 }} ,
				{ 11 ,  {-0.018594163712084975 }} ,
				{ 15 ,  {0.04660543116746139 }} ,
				{ 19 ,  {-0.014054906924921465 }} ,
				{ 24 ,  {0.0013343401336996727 }} ,
				{ 28 ,  {-0.02758767779095215 }} ,
				{ 36 ,  {-0.0276856536697727 }} ,
				{ 40 ,  {0.09841701855488938 }} ,
				{ 41 ,  {0.07293102194499572 }} ,
				{ 42 ,  {0.11061751344866716 }} ,
				{ 50 ,  {-0.02723267847960479 }} ,
				{ 55 ,  {-0.027570703869271452 }} ,
				{ 59 ,  {-0.027221263934804448 }} ,
				{ 86 ,  {0.1060805954202436 }} ,
				{ 102 ,  {-0.02741010646589417 }} ,
				{ 103 ,  {-0.02728882331783458 }} ,
				{ 104 ,  {-0.02735079606607529 }} ,
				{ 108 ,  {-0.02738803418257556 }} ,
				{ 109 ,  {-0.02726416967742283 }} ,
				{ 117 ,  {-0.02725399558451133 }} ,
				{ 148 ,  {-0.027323236751734165 }} ,
				{ 149 ,  {-0.02747013244111974 }} ,
				{ 150 ,  {-0.027294580722106887 }} ,
				{ 151 ,  {-0.027228341454787315 }} ,
				{ 174 ,  {0.0995492799478529 }} ,
				{ 175 ,  {0.09288147782883399 }} ,
				{ 210 ,  {-0.02719867363948173 }} ,
				{ 211 ,  {-0.027274297129239296 }} ,
				{ 214 ,  {-0.02733013382307685 }} ,
				{ 232 ,  {-0.027398030225842043 }} ,
				{ 233 ,  {-0.02726232603758301 }} ,
				{ 426 ,  {-0.027264646389679095 }} ,
				{ 430 ,  {-0.027260526537193526 }} ,
				{ 431 ,  {-0.027178368064152532 }} ,
				{ 848 ,  {-0.027508243921452725 }} ,
				{ 849 ,  {-0.027361836079677515 }} ,
				{ 850 ,  {-0.027263083611440055 }} ,
				{ 851 ,  {-0.02737200268011804 }} ,
				{ 854 ,  {-0.02727657966179427 }} ,
				{ 855 ,  {-0.027385446903122997 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_13 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 148 ) : ( 149 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_58 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 42 ) : ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 86 ) : ( ( ( Feature_57 <= 1.0000000180025095e-35 ) ? ( 174 ) : ( 175 ) ) ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 50 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 5.500000000000001 ) ? ( 104 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 848 ) : ( 849 ) ) ) : ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 850 ) : ( 851 ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 426 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 214 ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( ( ( Feature_30 <= 6.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_6
	

	namespace LGBM_Tree_6_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.009357347450390345 }} ,
				{ 8 ,  {-0.011497898202487667 }} ,
				{ 10 ,  {-0.027627867172571964 }} ,
				{ 15 ,  {-0.011912386251691899 }} ,
				{ 23 ,  {0.023163138494350644 }} ,
				{ 36 ,  {-0.027612780750109197 }} ,
				{ 38 ,  {-0.0271173885382019 }} ,
				{ 39 ,  {-0.02720839008082317 }} ,
				{ 44 ,  {0.0835616842120646 }} ,
				{ 56 ,  {-0.027339160876102088 }} ,
				{ 57 ,  {-0.011803547609124571 }} ,
				{ 75 ,  {-0.027208538516167304 }} ,
				{ 119 ,  {-0.027159013809827548 }} ,
				{ 148 ,  {-0.027316459292199932 }} ,
				{ 149 ,  {-0.027448681340498313 }} ,
				{ 180 ,  {0.10277724841084074 }} ,
				{ 181 ,  {0.12127982745597064 }} ,
				{ 182 ,  {0.09429890385803603 }} ,
				{ 236 ,  {-0.027187473800889192 }} ,
				{ 366 ,  {0.10279736959971748 }} ,
				{ 367 ,  {0.0989490911325214 }} ,
				{ 464 ,  {-0.02717871339787454 }} ,
				{ 465 ,  {-0.02726811655264984 }} ,
				{ 470 ,  {-0.02730007863847894 }} ,
				{ 471 ,  {-0.02719421750529774 }} ,
				{ 474 ,  {-0.027217345937429027 }} ,
				{ 475 ,  {-0.027272061274694743 }} ,
				{ 932 ,  {-0.027277650475704025 }} ,
				{ 933 ,  {-0.02744333403067822 }} ,
				{ 935 ,  {-0.027173070251180504 }} ,
				{ 936 ,  {-0.027420870280451138 }} ,
				{ 938 ,  {-0.027193440916933445 }} ,
				{ 939 ,  {-0.027324842789122197 }} ,
				{ 1869 ,  {-0.02732878045317172 }} ,
				{ 1875 ,  {-0.027264393499607048 }} ,
				{ 3736 ,  {-0.027215273609336288 }} ,
				{ 3737 ,  {-0.027301042022745248 }} ,
				{ 3749 ,  {-0.027295005591763052 }} ,
				{ 7496 ,  {-0.027332565995632538 }} ,
				{ 7497 ,  {-0.027437790102970778 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_2 <= 3.5000000000000004 ) ? ( 36 ) : ( ( ( Feature_63 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_50 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 44 ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( 182 ) : ( ( ( Feature_46 <= 8.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_50 <= 9.500000000000002 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 7496 ) : ( 7497 ) ) ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 236 ) : ( ( ( Feature_35 <= 6.500000000000001 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_6
	

	namespace LGBM_Tree_7_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.031110209187379525 }} ,
				{ 8 ,  {0.05543308389462295 }} ,
				{ 19 ,  {0.1140220133548407 }} ,
				{ 21 ,  {0.0161733082756032 }} ,
				{ 22 ,  {0.004719441181227269 }} ,
				{ 23 ,  {0.10157263250220905 }} ,
				{ 25 ,  {0.027660468202476276 }} ,
				{ 36 ,  {0.08476421478502078 }} ,
				{ 40 ,  {-0.027412133021410653 }} ,
				{ 41 ,  {-0.028176135680039644 }} ,
				{ 48 ,  {-0.027223898233109736 }} ,
				{ 49 ,  {-0.027534522732775565 }} ,
				{ 54 ,  {-0.0025650674928079965 }} ,
				{ 74 ,  {0.09978291518742688 }} ,
				{ 75 ,  {0.11183548981525343 }} ,
				{ 110 ,  {-0.027416084656157514 }} ,
				{ 111 ,  {-0.02725475011563705 }} ,
				{ 210 ,  {-0.0271576594425498 }} ,
				{ 214 ,  {-0.02709834288481532 }} ,
				{ 215 ,  {-0.027170164412464188 }} ,
				{ 418 ,  {-0.027136028227743376 }} ,
				{ 419 ,  {-0.02722529102223489 }} ,
				{ 422 ,  {-0.027181438579337455 }} ,
				{ 423 ,  {-0.027342593890395585 }} ,
				{ 424 ,  {-0.027177249647308173 }} ,
				{ 425 ,  {-0.027112262304766318 }} ,
				{ 426 ,  {-0.027182369217252113 }} ,
				{ 835 ,  {-0.027244903878389688 }} ,
				{ 854 ,  {-0.02731357483872859 }} ,
				{ 1666 ,  {-0.027241670184714448 }} ,
				{ 1667 ,  {-0.02716986869155106 }} ,
				{ 1668 ,  {-0.027421890620068362 }} ,
				{ 1669 ,  {-0.027292788627948324 }} ,
				{ 1710 ,  {-0.027173382519449393 }} ,
				{ 1711 ,  {-0.02725955468728083 }} ,
				{ 3328 ,  {-0.027353509812567418 }} ,
				{ 3330 ,  {-0.0271920838380336 }} ,
				{ 3331 ,  {-0.02729606780381079 }} ,
				{ 6658 ,  {-0.02721300007675011 }} ,
				{ 6659 ,  {-0.027306275721506415 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_58 <= 11.500000000000002 ) ? ( ( ( Feature_11 <= 9.500000000000002 ) ? ( 36 ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_13 <= 12.500000000000002 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_6 <= 2.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_35 <= 15.500000000000002 ) ? ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 14.500000000000002 ) ? ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 12.500000000000002 ) ? ( 3328 ) : ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 6658 ) : ( 6659 ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( 3330 ) : ( 3331 ) ) ) ) ) : ( ( ( Feature_34 <= 7.500000000000001 ) ? ( 1666 ) : ( 1667 ) ) ) ) ) : ( ( ( Feature_45 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 1668 ) : ( 1669 ) ) ) : ( 835 ) ) ) ) ) : ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 210 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 424 ) : ( 425 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 426 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 854 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( 1710 ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 54 ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_6
	

	namespace LGBM_Tree_8_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.002417374741660981 }} ,
				{ 20 ,  {-0.012434837344283824 }} ,
				{ 27 ,  {-0.027171240880349647 }} ,
				{ 29 ,  {0.053342309705432904 }} ,
				{ 31 ,  {-0.027564400540038975 }} ,
				{ 36 ,  {0.004758606571459968 }} ,
				{ 43 ,  {-0.027728366307549976 }} ,
				{ 46 ,  {-0.02743076059226516 }} ,
				{ 47 ,  {0.010155484898021826 }} ,
				{ 48 ,  {-0.027171729831237952 }} ,
				{ 49 ,  {-0.027083861868023303 }} ,
				{ 50 ,  {-0.027274141544711625 }} ,
				{ 52 ,  {-0.027096449168375544 }} ,
				{ 53 ,  {-0.027033107383205402 }} ,
				{ 56 ,  {-0.011097324262390556 }} ,
				{ 57 ,  {-0.027350443679505412 }} ,
				{ 60 ,  {-0.02711901638267812 }} ,
				{ 61 ,  {-0.027248626816293767 }} ,
				{ 74 ,  {-0.027102448202227486 }} ,
				{ 75 ,  {-0.02722877796505463 }} ,
				{ 76 ,  {-0.0270701505682904 }} ,
				{ 78 ,  {-0.027281627380474488 }} ,
				{ 79 ,  {-0.02716178588682347 }} ,
				{ 84 ,  {-0.02739641287025496 }} ,
				{ 88 ,  {-0.019904297114772235 }} ,
				{ 89 ,  {0.0763024283852176 }} ,
				{ 90 ,  {0.03549776583832903 }} ,
				{ 102 ,  {-0.02709193492968366 }} ,
				{ 155 ,  {-0.02721388355354698 }} ,
				{ 170 ,  {-0.027251596718075796 }} ,
				{ 171 ,  {-0.027112834804804187 }} ,
				{ 182 ,  {0.07971324170097781 }} ,
				{ 207 ,  {-0.027132701330731014 }} ,
				{ 308 ,  {-0.027130018723614736 }} ,
				{ 309 ,  {-0.02706042957887299 }} ,
				{ 366 ,  {0.09745954559267445 }} ,
				{ 412 ,  {-0.02727908418983127 }} ,
				{ 413 ,  {-0.027140736573451004 }} ,
				{ 734 ,  {0.11610911857198468 }} ,
				{ 735 ,  {0.1059437883257133 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 8 ) : ( ( ( Feature_36 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 7.500000000000001 ) ? ( 36 ) : ( ( ( Feature_28 <= 1.5000000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 11.500000000000002 ) ? ( 76 ) : ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_6 <= 1.5000000000000002 ) ? ( 308 ) : ( 309 ) ) ) : ( 155 ) ) ) ) ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 20 ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 84 ) : ( ( ( Feature_29 <= 8.500000000000002 ) ? ( 170 ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 6.500000000000001 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 90 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 182 ) : ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 366 ) : ( ( ( Feature_18 <= 10.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_6
	

	namespace LGBM_Tree_9_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.07969179845458411 }} ,
				{ 12 ,  {-0.028330584920557657 }} ,
				{ 15 ,  {0.0055902650388849765 }} ,
				{ 16 ,  {0.020996829271298534 }} ,
				{ 22 ,  {0.008252167880481711 }} ,
				{ 23 ,  {-0.028161376435831525 }} ,
				{ 26 ,  {-0.01939332187596536 }} ,
				{ 34 ,  {0.014201043574215193 }} ,
				{ 36 ,  {-0.027486632166268156 }} ,
				{ 37 ,  {-0.012267870995126703 }} ,
				{ 55 ,  {0.018529369711875892 }} ,
				{ 56 ,  {-0.027277733495188028 }} ,
				{ 58 ,  {-0.02734247173385211 }} ,
				{ 59 ,  {-0.027485268686914723 }} ,
				{ 77 ,  {-0.02731510644965178 }} ,
				{ 109 ,  {0.08363481005722745 }} ,
				{ 114 ,  {-0.027436153529637894 }} ,
				{ 115 ,  {-0.0272768929949328 }} ,
				{ 142 ,  {0.014525106747307984 }} ,
				{ 143 ,  {-0.02758951156359333 }} ,
				{ 152 ,  {-0.027384588914616703 }} ,
				{ 153 ,  {-0.027472598451890845 }} ,
				{ 156 ,  {-0.02730122635106711 }} ,
				{ 158 ,  {-0.027281610452219864 }} ,
				{ 159 ,  {-0.02718187402331537 }} ,
				{ 216 ,  {0.12488357631109087 }} ,
				{ 280 ,  {-0.02772697418228061 }} ,
				{ 282 ,  {0.0016914489158640215 }} ,
				{ 283 ,  {-0.027591924539338415 }} ,
				{ 314 ,  {-0.027435888828876855 }} ,
				{ 315 ,  {-0.027318755734430752 }} ,
				{ 434 ,  {0.09087911764050242 }} ,
				{ 870 ,  {0.10609877851963961 }} ,
				{ 871 ,  {0.1002406361895817 }} ,
				{ 1124 ,  {-0.027283025359713428 }} ,
				{ 1125 ,  {-0.02737602335569794 }} ,
				{ 1127 ,  {-0.027539424359952387 }} ,
				{ 2253 ,  {-0.027297069666987542 }} ,
				{ 4504 ,  {-0.027351797936919088 }} ,
				{ 4505 ,  {-0.02745918174948005 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 16 ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_54 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 13.500000000000002 ) ? ( ( ( Feature_52 <= 3.5000000000000004 ) ? ( 280 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 1124 ) : ( 1125 ) ) ) : ( ( ( Feature_14 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 4504 ) : ( 4505 ) ) ) : ( 2253 ) ) ) : ( 1127 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 156 ) : ( ( ( Feature_50 <= 12.500000000000002 ) ? ( 314 ) : ( 315 ) ) ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_44 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 12 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_45 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 216 ) : ( ( ( Feature_12 <= 8.500000000000002 ) ? ( 434 ) : ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 870 ) : ( 871 ) ) ) ) ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 56 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_6
	

	namespace LGBM_Tree_0_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.040408979543375204 }} ,
				{ 10 ,  {-0.027229389477446964 }} ,
				{ 11 ,  {-0.027061847987676847 }} ,
				{ 13 ,  {0.024170098049432518 }} ,
				{ 18 ,  {0.07490257789391326 }} ,
				{ 24 ,  {-0.02709818620127216 }} ,
				{ 25 ,  {-0.027308804935583648 }} ,
				{ 30 ,  {-0.02697121984495537 }} ,
				{ 38 ,  {0.1015012056099397 }} ,
				{ 78 ,  {0.08653688874113868 }} ,
				{ 113 ,  {-0.02698992254855266 }} ,
				{ 117 ,  {-0.027038905282816023 }} ,
				{ 118 ,  {-0.02710251302541425 }} ,
				{ 119 ,  {-0.02700198787430886 }} ,
				{ 126 ,  {-0.027002087493179713 }} ,
				{ 158 ,  {0.09209334675947853 }} ,
				{ 159 ,  {0.09507368138701575 }} ,
				{ 224 ,  {-0.02706644414686787 }} ,
				{ 225 ,  {-0.027195645550657663 }} ,
				{ 230 ,  {-0.02706591442934461 }} ,
				{ 248 ,  {-0.027103387894513244 }} ,
				{ 249 ,  {-0.02705052957883663 }} ,
				{ 250 ,  {-0.027217479019748705 }} ,
				{ 251 ,  {-0.027105818167821018 }} ,
				{ 254 ,  {-0.02715327667344867 }} ,
				{ 255 ,  {-0.027043167328106788 }} ,
				{ 456 ,  {-0.027240735482986684 }} ,
				{ 457 ,  {-0.027055684817180188 }} ,
				{ 458 ,  {-0.027115318399574415 }} ,
				{ 462 ,  {-0.027240021605354072 }} ,
				{ 463 ,  {-0.027085167565273432 }} ,
				{ 464 ,  {-0.02708824650996604 }} ,
				{ 467 ,  {-0.027258987478760502 }} ,
				{ 918 ,  {-0.027343117127206606 }} ,
				{ 930 ,  {-0.02706380825164281 }} ,
				{ 931 ,  {-0.027255487667494412 }} ,
				{ 932 ,  {-0.027075226851018198 }} ,
				{ 933 ,  {-0.027173881148456876 }} ,
				{ 1838 ,  {-0.027258925165768416 }} ,
				{ 1839 ,  {-0.02716933084504865 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 8 ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( 18 ) : ( ( ( Feature_61 <= 1.5000000000000002 ) ? ( 38 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( 78 ) : ( ( ( Feature_11 <= 14.500000000000002 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 456 ) : ( 457 ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 458 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 918 ) : ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 1838 ) : ( 1839 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 6.500000000000001 ) ? ( 230 ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_44 <= 14.500000000000002 ) ? ( 464 ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 930 ) : ( 931 ) ) ) ) ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 10.500000000000002 ) ? ( 932 ) : ( 933 ) ) ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 1.5000000000000002 ) ? ( 30 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_18 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 248 ) : ( 249 ) ) ) : ( ( ( Feature_35 <= 13.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 126 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_7
	

	namespace LGBM_Tree_1_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.0417951779949399 }} ,
				{ 10 ,  {-0.014045584015590598 }} ,
				{ 13 ,  {0.1020581653682323 }} ,
				{ 14 ,  {-0.01815080770949556 }} ,
				{ 25 ,  {0.0267150873886131 }} ,
				{ 31 ,  {0.01913117526270287 }} ,
				{ 61 ,  {0.06762245446648185 }} ,
				{ 92 ,  {-0.027231226465663744 }} ,
				{ 93 ,  {-0.027387744250021787 }} ,
				{ 94 ,  {-0.02721821835146511 }} ,
				{ 95 ,  {-0.02714224079698271 }} ,
				{ 96 ,  {0.021130477314560567 }} ,
				{ 97 ,  {-0.027791707375775517 }} ,
				{ 120 ,  {0.08566518377230348 }} ,
				{ 176 ,  {-0.027190566267285977 }} ,
				{ 178 ,  {-0.027320107167280033 }} ,
				{ 180 ,  {-0.027311795298813186 }} ,
				{ 181 ,  {-0.027176254354976982 }} ,
				{ 196 ,  {-0.02773084075701018 }} ,
				{ 197 ,  {-0.028976054434600336 }} ,
				{ 198 ,  {-0.027687928300792797 }} ,
				{ 242 ,  {0.09100555276865369 }} ,
				{ 354 ,  {-0.02744230071970093 }} ,
				{ 358 ,  {-0.02752857255616469 }} ,
				{ 359 ,  {-0.0274003066483776 }} ,
				{ 364 ,  {-0.027300771378638008 }} ,
				{ 365 ,  {-0.02722241668653634 }} ,
				{ 399 ,  {-0.027412400132128947 }} ,
				{ 486 ,  {0.10157882463064039 }} ,
				{ 487 ,  {0.11527418627490507 }} ,
				{ 710 ,  {-0.02727070926351607 }} ,
				{ 711 ,  {-0.027379771451755228 }} ,
				{ 733 ,  {-0.02744271736187879 }} ,
				{ 734 ,  {-0.02728615497772759 }} ,
				{ 735 ,  {-0.02719441268149905 }} ,
				{ 796 ,  {-0.027187021271142073 }} ,
				{ 797 ,  {-0.02729196064962334 }} ,
				{ 1464 ,  {-0.027400918251569553 }} ,
				{ 2930 ,  {-0.027231466758632396 }} ,
				{ 2931 ,  {-0.02733616792948994 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_3 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 176 ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 354 ) : ( ( ( Feature_59 <= 12.500000000000002 ) ? ( 710 ) : ( 711 ) ) ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 178 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 364 ) : ( 365 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 1464 ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 2930 ) : ( 2931 ) ) ) ) ) : ( 733 ) ) ) : ( ( ( Feature_9 <= 7.500000000000001 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 13.500000000000002 ) ? ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 12.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 14.500000000000002 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 198 ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( 796 ) : ( 797 ) ) ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 1.5000000000000002 ) ? ( 120 ) : ( ( ( Feature_61 <= 3.5000000000000004 ) ? ( 242 ) : ( ( ( Feature_37 <= 8.500000000000002 ) ? ( 486 ) : ( 487 ) ) ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_7
	

	namespace LGBM_Tree_2_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.07529733575653592 }} ,
				{ 14 ,  {0.019862340217114284 }} ,
				{ 16 ,  {0.0009222439737673121 }} ,
				{ 20 ,  {0.012162018221357051 }} ,
				{ 25 ,  {0.03947876055396746 }} ,
				{ 26 ,  {0.04753198714425087 }} ,
				{ 27 ,  {-0.027908744327041102 }} ,
				{ 31 ,  {-0.02776858682991748 }} ,
				{ 34 ,  {-0.02738190138545052 }} ,
				{ 42 ,  {-0.027565367698598065 }} ,
				{ 43 ,  {-0.027281709860980042 }} ,
				{ 46 ,  {-0.027334424911287188 }} ,
				{ 49 ,  {0.09663297462805387 }} ,
				{ 61 ,  {-0.027243200996755687 }} ,
				{ 71 ,  {-0.027223573473030577 }} ,
				{ 88 ,  {-0.02738255792285227 }} ,
				{ 89 ,  {-0.02718596813477267 }} ,
				{ 94 ,  {-0.02719718433586664 }} ,
				{ 97 ,  {0.08542281663246801 }} ,
				{ 120 ,  {-0.027467479504591705 }} ,
				{ 121 ,  {-0.027250306935136234 }} ,
				{ 140 ,  {-0.027239610761709263 }} ,
				{ 141 ,  {-0.027371161181549444 }} ,
				{ 190 ,  {-0.027217731874765217 }} ,
				{ 192 ,  {0.09492730094987807 }} ,
				{ 193 ,  {0.08974877516850527 }} ,
				{ 360 ,  {-0.02727387215414273 }} ,
				{ 361 ,  {-0.027147014762109324 }} ,
				{ 362 ,  {-0.027268597841432225 }} ,
				{ 363 ,  {-0.027433067892330278 }} ,
				{ 364 ,  {-0.02730341177942281 }} ,
				{ 366 ,  {-0.027418393134263863 }} ,
				{ 382 ,  {-0.027254397583812703 }} ,
				{ 383 ,  {-0.02735382869529178 }} ,
				{ 731 ,  {-0.027281919142504475 }} ,
				{ 734 ,  {-0.02725099270730751 }} ,
				{ 735 ,  {-0.027333223164014667 }} ,
				{ 1461 ,  {-0.02736355596558597 }} ,
				{ 2920 ,  {-0.027533499519427726 }} ,
				{ 2921 ,  {-0.02741911975959038 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 360 ) : ( 361 ) ) ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 364 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_45 <= 13.500000000000002 ) ? ( ( ( Feature_3 <= 13.500000000000002 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( 366 ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 94 ) : ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 190 ) : ( ( ( Feature_37 <= 13.500000000000002 ) ? ( 382 ) : ( 383 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_20 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_26 <= 4.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_7
	

	namespace LGBM_Tree_3_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.02022453182946843 }} ,
				{ 12 ,  {-0.02754677758530419 }} ,
				{ 13 ,  {0.036870527437406715 }} ,
				{ 16 ,  {0.01609109711758067 }} ,
				{ 20 ,  {0.05941664844124733 }} ,
				{ 21 ,  {-0.027972491200152425 }} ,
				{ 22 ,  {0.017775304259447174 }} ,
				{ 34 ,  {0.0656925949736422 }} ,
				{ 47 ,  {-0.027717218513417036 }} ,
				{ 57 ,  {-0.027136656891249163 }} ,
				{ 60 ,  {-0.011434895655107823 }} ,
				{ 62 ,  {0.04414294091819424 }} ,
				{ 63 ,  {-0.027653805504807283 }} ,
				{ 93 ,  {-0.027223090298496982 }} ,
				{ 113 ,  {-0.02729986773251536 }} ,
				{ 116 ,  {-0.027157438027226633 }} ,
				{ 122 ,  {-0.027433835289226584 }} ,
				{ 140 ,  {0.10312428514801573 }} ,
				{ 141 ,  {0.09436771142796865 }} ,
				{ 142 ,  {0.09659218829454624 }} ,
				{ 143 ,  {0.082697863509935 }} ,
				{ 184 ,  {-0.027473270178873917 }} ,
				{ 224 ,  {-0.027237853348291353 }} ,
				{ 225 ,  {-0.027146413631648488 }} ,
				{ 236 ,  {-0.027258414003868442 }} ,
				{ 237 ,  {-0.02716759988116975 }} ,
				{ 238 ,  {-0.027347950719892877 }} ,
				{ 370 ,  {-0.027416328814472764 }} ,
				{ 371 ,  {-0.027200792888211003 }} ,
				{ 468 ,  {-0.0273435798020307 }} ,
				{ 469 ,  {-0.027474913713278593 }} ,
				{ 471 ,  {-0.02724157569913099 }} ,
				{ 478 ,  {-0.02717523866276374 }} ,
				{ 479 ,  {-0.027284282765919567 }} ,
				{ 492 ,  {-0.02726893781064015 }} ,
				{ 493 ,  {-0.027385501332563962 }} ,
				{ 494 ,  {-0.027221697059115143 }} ,
				{ 495 ,  {-0.027145038235175247 }} ,
				{ 940 ,  {-0.027406822172388698 }} ,
				{ 941 ,  {-0.027292963801860234 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 34 ) : ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( Feature_11 <= 9.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 184 ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_59 <= 9.500000000000002 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_29 <= 1.5000000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 116 ) : ( ( ( Feature_45 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 238 ) : ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_53 <= 5.500000000000001 ) ? ( 122 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 492 ) : ( 493 ) ) ) : ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 494 ) : ( 495 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 10.500000000000002 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_7
	

	namespace LGBM_Tree_4_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.02691188753698437 }} ,
				{ 13 ,  {0.07986300545889972 }} ,
				{ 16 ,  {-0.012154908268412647 }} ,
				{ 18 ,  {-0.027941360568450088 }} ,
				{ 20 ,  {-0.008185827446806283 }} ,
				{ 22 ,  {-0.027688895729202648 }} ,
				{ 23 ,  {0.04297936240102544 }} ,
				{ 24 ,  {0.09673313539915629 }} ,
				{ 25 ,  {0.08886775272213038 }} ,
				{ 35 ,  {-0.027531908960663584 }} ,
				{ 39 ,  {-0.02818567499019839 }} ,
				{ 43 ,  {-0.018433162602241312 }} ,
				{ 69 ,  {-0.027254623037768922 }} ,
				{ 76 ,  {0.03228448203711675 }} ,
				{ 136 ,  {-0.027435054765798092 }} ,
				{ 137 ,  {-0.02729379120478296 }} ,
				{ 154 ,  {0.08821547941725168 }} ,
				{ 155 ,  {0.10830403052412803 }} ,
				{ 337 ,  {-0.027266798010968114 }} ,
				{ 342 ,  {-0.027301999111740905 }} ,
				{ 343 ,  {-0.027415713313334707 }} ,
				{ 672 ,  {-0.02726900410974989 }} ,
				{ 676 ,  {-0.027384431922910814 }} ,
				{ 680 ,  {-0.027274205704980622 }} ,
				{ 681 ,  {-0.027383939882509253 }} ,
				{ 682 ,  {-0.027281167976581172 }} ,
				{ 683 ,  {-0.02722538363692183 }} ,
				{ 1347 ,  {-0.02750722160534132 }} ,
				{ 1354 ,  {-0.02716242049699956 }} ,
				{ 1355 ,  {-0.02724997891442334 }} ,
				{ 1356 ,  {-0.02747107066194457 }} ,
				{ 1358 ,  {-0.027285170031054323 }} ,
				{ 1359 ,  {-0.027367273360413266 }} ,
				{ 2692 ,  {-0.027482412482118815 }} ,
				{ 2714 ,  {-0.027341193404069687 }} ,
				{ 2715 ,  {-0.027455145540525777 }} ,
				{ 5387 ,  {-0.02729741862591802 }} ,
				{ 10773 ,  {-0.02731924932358791 }} ,
				{ 21544 ,  {-0.02750828156915379 }} ,
				{ 21545 ,  {-0.0273786649417472 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_6 <= 3.5000000000000004 ) ? ( ( ( Feature_4 <= 7.500000000000001 ) ? ( 672 ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 2692 ) : ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_44 <= 4.500000000000001 ) ? ( 21544 ) : ( 21545 ) ) ) : ( 10773 ) ) ) : ( 5387 ) ) ) ) ) : ( 1347 ) ) ) ) ) : ( 337 ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 1354 ) : ( 1355 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 1356 ) : ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 680 ) : ( 681 ) ) ) : ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 682 ) : ( 683 ) ) ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_60 <= 3.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 13.500000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_7
	

	namespace LGBM_Tree_5_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.011636540771761145 }} ,
				{ 11 ,  {-0.01829964963468737 }} ,
				{ 15 ,  {0.04389793404716319 }} ,
				{ 19 ,  {-0.013774529138477279 }} ,
				{ 20 ,  {0.07395905897563876 }} ,
				{ 25 ,  {0.0018067550778227547 }} ,
				{ 28 ,  {-0.02736548674777955 }} ,
				{ 36 ,  {-0.027587354724285452 }} ,
				{ 43 ,  {0.08255957550544817 }} ,
				{ 48 ,  {-0.02738353943876358 }} ,
				{ 75 ,  {-0.027165139858526744 }} ,
				{ 84 ,  {0.10330791978022352 }} ,
				{ 98 ,  {-0.02715986269912074 }} ,
				{ 99 ,  {-0.02728110779428566 }} ,
				{ 106 ,  {-0.027147476022933555 }} ,
				{ 107 ,  {-0.027222104854047892 }} ,
				{ 109 ,  {-0.02724894906371805 }} ,
				{ 111 ,  {-0.02714644356719589 }} ,
				{ 116 ,  {-0.027236242071346346 }} ,
				{ 117 ,  {-0.027156090554403958 }} ,
				{ 118 ,  {-0.027200326002776457 }} ,
				{ 119 ,  {-0.027318927034383364 }} ,
				{ 148 ,  {-0.02724140158083016 }} ,
				{ 149 ,  {-0.027409352186895688 }} ,
				{ 171 ,  {0.087471887363665 }} ,
				{ 209 ,  {-0.02713985904639529 }} ,
				{ 211 ,  {-0.02713799766625942 }} ,
				{ 217 ,  {-0.02746213080712469 }} ,
				{ 220 ,  {-0.027306517735573035 }} ,
				{ 221 ,  {-0.027186543348198602 }} ,
				{ 340 ,  {0.09053362367432963 }} ,
				{ 341 ,  {0.098142074447208 }} ,
				{ 416 ,  {-0.02717947051322528 }} ,
				{ 417 ,  {-0.02734316759661831 }} ,
				{ 432 ,  {-0.02724805215185029 }} ,
				{ 433 ,  {-0.027381148018778508 }} ,
				{ 840 ,  {-0.027165241041550887 }} ,
				{ 841 ,  {-0.027298156728387563 }} ,
				{ 842 ,  {-0.02739705094470652 }} ,
				{ 843 ,  {-0.027266201808962515 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_13 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 20 ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 84 ) : ( ( ( Feature_36 <= 15.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 340 ) : ( 341 ) ) ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 48 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( Feature_62 <= 10.500000000000002 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 840 ) : ( 841 ) ) ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 842 ) : ( 843 ) ) ) ) ) : ( 211 ) ) ) ) ) : ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( ( ( Feature_2 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_5 <= 10.500000000000002 ) ? ( ( ( Feature_37 <= 7.500000000000001 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 7.500000000000001 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_36 <= 2.5000000000000004 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_7
	

	namespace LGBM_Tree_6_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.009147033459044714 }} ,
				{ 8 ,  {-0.01120228622745987 }} ,
				{ 10 ,  {-0.027536392038400977 }} ,
				{ 15 ,  {-0.011573390630735453 }} ,
				{ 23 ,  {0.022069197576685847 }} ,
				{ 36 ,  {-0.027483823556133172 }} ,
				{ 38 ,  {-0.027029664290775853 }} ,
				{ 39 ,  {-0.027126047999718114 }} ,
				{ 44 ,  {0.07530477917699549 }} ,
				{ 57 ,  {-0.011460378432576912 }} ,
				{ 74 ,  {-0.027294308859065215 }} ,
				{ 75 ,  {-0.027134124922398195 }} ,
				{ 90 ,  {0.09911298780720308 }} ,
				{ 112 ,  {-0.027208126454281507 }} ,
				{ 113 ,  {-0.027332216288602176 }} ,
				{ 119 ,  {-0.02707497629901573 }} ,
				{ 182 ,  {0.09371290828228628 }} ,
				{ 236 ,  {-0.02710668844473882 }} ,
				{ 366 ,  {0.08752127298933715 }} ,
				{ 367 ,  {0.09251357801609111 }} ,
				{ 464 ,  {-0.02709828565630351 }} ,
				{ 465 ,  {-0.02718889877580637 }} ,
				{ 469 ,  {-0.02719392603741066 }} ,
				{ 470 ,  {-0.02728685546123621 }} ,
				{ 471 ,  {-0.0271537377819758 }} ,
				{ 474 ,  {-0.027138932524701204 }} ,
				{ 932 ,  {-0.0272104240792624 }} ,
				{ 933 ,  {-0.027394332399334614 }} ,
				{ 935 ,  {-0.027095595047106513 }} ,
				{ 936 ,  {-0.027208783205000066 }} ,
				{ 951 ,  {-0.02724626814654009 }} ,
				{ 1869 ,  {-0.027262059198648367 }} ,
				{ 1875 ,  {-0.027222614041314527 }} ,
				{ 1900 ,  {-0.02722089753920325 }} ,
				{ 1901 ,  {-0.027111725816184953 }} ,
				{ 3736 ,  {-0.02714044843627795 }} ,
				{ 3737 ,  {-0.02725136400298139 }} ,
				{ 3749 ,  {-0.027271161160852694 }} ,
				{ 7496 ,  {-0.02744201651333929 }} ,
				{ 7497 ,  {-0.02732425435629888 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 36 ) : ( ( ( Feature_62 <= 13.500000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_50 <= 15.500000000000002 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 44 ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( 90 ) : ( ( ( Feature_28 <= 1.0000000180025095e-35 ) ? ( 182 ) : ( ( ( Feature_45 <= 10.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_44 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 13.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_3 <= 14.500000000000002 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 936 ) : ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_38 <= 2.5000000000000004 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 7496 ) : ( 7497 ) ) ) : ( 3749 ) ) ) : ( 1875 ) ) ) ) ) : ( 469 ) ) ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 236 ) : ( ( ( Feature_35 <= 6.500000000000001 ) ? ( 474 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 1900 ) : ( 1901 ) ) ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_7
	

	namespace LGBM_Tree_7_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.02951671690199444 }} ,
				{ 8 ,  {0.003712148267060263 }} ,
				{ 19 ,  {0.041156427899946446 }} ,
				{ 20 ,  {0.08310521781896604 }} ,
				{ 21 ,  {-0.003531288441029316 }} ,
				{ 23 ,  {-0.013288775702874376 }} ,
				{ 25 ,  {-0.013414238039476042 }} ,
				{ 26 ,  {0.026622939361330436 }} ,
				{ 36 ,  {0.10470674804353852 }} ,
				{ 44 ,  {-0.027291376127741587 }} ,
				{ 45 ,  {-0.027895110387013745 }} ,
				{ 55 ,  {-0.027314233432243287 }} ,
				{ 75 ,  {0.08749457384301203 }} ,
				{ 96 ,  {-0.027456155927576487 }} ,
				{ 97 ,  {-0.027168508787749197 }} ,
				{ 109 ,  {-0.027080301933392354 }} ,
				{ 148 ,  {0.09669637433167427 }} ,
				{ 149 ,  {0.0921387768835706 }} ,
				{ 197 ,  {-0.027342682107761102 }} ,
				{ 216 ,  {-0.027110436636630014 }} ,
				{ 217 ,  {-0.02727358058787301 }} ,
				{ 396 ,  {-0.027082324030815837 }} ,
				{ 398 ,  {-0.027014954494296792 }} ,
				{ 399 ,  {-0.027095453685181244 }} ,
				{ 785 ,  {-0.027111379187197034 }} ,
				{ 786 ,  {-0.02708052001883778 }} ,
				{ 795 ,  {-0.027245170005541303 }} ,
				{ 1574 ,  {-0.027102123909724624 }} ,
				{ 1575 ,  {-0.027271954375642733 }} ,
				{ 1588 ,  {-0.027105448228518788 }} ,
				{ 3139 ,  {-0.027180777232567607 }} ,
				{ 3178 ,  {-0.027116335971090328 }} ,
				{ 3179 ,  {-0.02722335556461424 }} ,
				{ 6272 ,  {-0.027201807946787088 }} ,
				{ 6273 ,  {-0.02710154613306544 }} ,
				{ 6274 ,  {-0.027122276594964023 }} ,
				{ 6276 ,  {-0.02736811904022925 }} ,
				{ 6277 ,  {-0.027222711136596845 }} ,
				{ 12550 ,  {-0.027297528958486306 }} ,
				{ 12551 ,  {-0.027188184149162416 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 9.500000000000002 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 8 ) : ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_37 <= 15.500000000000002 ) ? ( ( ( Feature_14 <= 1.5000000000000002 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_61 <= 2.5000000000000004 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 6272 ) : ( 6273 ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 6274 ) : ( ( ( Feature_19 <= 15.500000000000002 ) ? ( 12550 ) : ( 12551 ) ) ) ) ) ) ) : ( ( ( Feature_45 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 12.500000000000002 ) ? ( 6276 ) : ( 6277 ) ) ) : ( 3139 ) ) ) ) ) : ( 785 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 786 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 1574 ) : ( 1575 ) ) ) ) ) ) ) : ( 197 ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 396 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( 1588 ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 3178 ) : ( 3179 ) ) ) ) ) : ( 795 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_7
	

	namespace LGBM_Tree_8_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.02947664050010858 }} ,
				{ 18 ,  {-0.009362723683636094 }} ,
				{ 20 ,  {-0.012218879178016171 }} ,
				{ 26 ,  {-0.02710801982691434 }} ,
				{ 29 ,  {-0.01151249367637562 }} ,
				{ 30 ,  {0.0691290673595991 }} ,
				{ 32 ,  {-0.027219092625652194 }} ,
				{ 33 ,  {-0.027030798731073488 }} ,
				{ 46 ,  {-0.027350487944663906 }} ,
				{ 47 ,  {0.00977461480644367 }} ,
				{ 48 ,  {-0.027113581683752882 }} ,
				{ 49 ,  {-0.02701091310757885 }} ,
				{ 50 ,  {-0.027225171412028584 }} ,
				{ 54 ,  {-0.027026555242866443 }} ,
				{ 55 ,  {-0.026962570379786072 }} ,
				{ 56 ,  {-0.027307752967415166 }} ,
				{ 62 ,  {-0.027038871294358387 }} ,
				{ 63 ,  {-0.027592485136414893 }} ,
				{ 76 ,  {-0.02702273809915902 }} ,
				{ 77 ,  {-0.027086734430804067 }} ,
				{ 78 ,  {-0.027094163653025256 }} ,
				{ 79 ,  {-0.02726931570675318 }} ,
				{ 84 ,  {-0.027188094591718493 }} ,
				{ 85 ,  {-0.027047013258851445 }} ,
				{ 86 ,  {-0.027686429520149044 }} ,
				{ 87 ,  {-0.02728614097572822 }} ,
				{ 88 ,  {-0.019730733863848188 }} ,
				{ 89 ,  {0.06959197789696504 }} ,
				{ 90 ,  {0.03369273374319711 }} ,
				{ 102 ,  {-0.027040027595691227 }} ,
				{ 114 ,  {-0.027130519298477214 }} ,
				{ 115 ,  {-0.027035747904967596 }} ,
				{ 207 ,  {-0.027054435561597014 }} ,
				{ 364 ,  {0.06485445339583654 }} ,
				{ 365 ,  {0.09520920290737972 }} ,
				{ 366 ,  {0.1065895369566414 }} ,
				{ 412 ,  {-0.027092317072448337 }} ,
				{ 413 ,  {-0.02722224548875605 }} ,
				{ 734 ,  {0.10100668054747142 }} ,
				{ 735 ,  {0.09378860356769686 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 8.500000000000002 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 6.500000000000001 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 90 ) : ( ( ( Feature_19 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 364 ) : ( 365 ) ) ) : ( ( ( Feature_35 <= 14.500000000000002 ) ? ( 366 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_28 <= 7.500000000000001 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_38 <= 8.500000000000002 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_34 <= 10.500000000000002 ) ? ( 30 ) : ( ( ( Feature_10 <= 2.5000000000000004 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_7
	

	namespace LGBM_Tree_9_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.0262656481995662 }} ,
				{ 10 ,  {-0.013873081442368956 }} ,
				{ 13 ,  {0.04670785197095574 }} ,
				{ 17 ,  {0.025751815162825865 }} ,
				{ 22 ,  {-0.019935934250848605 }} ,
				{ 24 ,  {0.013930987285822139 }} ,
				{ 29 ,  {0.03506381813930184 }} ,
				{ 47 ,  {0.04636571507241879 }} ,
				{ 50 ,  {-0.013327461680999972 }} ,
				{ 56 ,  {-0.027701935293570592 }} ,
				{ 57 ,  {-0.02723352707549816 }} ,
				{ 60 ,  {0.003155830525837773 }} ,
				{ 61 ,  {-0.02731464545976375 }} ,
				{ 64 ,  {-0.027741704115524814 }} ,
				{ 66 ,  {0.026538888735503276 }} ,
				{ 67 ,  {-0.027266507161461746 }} ,
				{ 92 ,  {0.06965498682634327 }} ,
				{ 102 ,  {-0.02781931869995102 }} ,
				{ 103 ,  {-0.02725253152790374 }} ,
				{ 126 ,  {-0.027401498988007474 }} ,
				{ 127 ,  {-0.0281808159708397 }} ,
				{ 131 ,  {-0.027249848489942743 }} ,
				{ 186 ,  {0.11943728742329976 }} ,
				{ 251 ,  {-0.027396349128349352 }} ,
				{ 260 ,  {-0.027618788438133698 }} ,
				{ 374 ,  {0.1038435002229614 }} ,
				{ 497 ,  {-0.027528389670412975 }} ,
				{ 499 ,  {-0.02771460465423385 }} ,
				{ 500 ,  {-0.027352591683488643 }} ,
				{ 501 ,  {-0.027206487791252183 }} ,
				{ 522 ,  {-0.027405275760734368 }} ,
				{ 523 ,  {-0.02719745989478344 }} ,
				{ 750 ,  {0.08001720629407191 }} ,
				{ 751 ,  {0.09593617613129851 }} ,
				{ 993 ,  {-0.027227661126247006 }} ,
				{ 996 ,  {-0.02751595894671527 }} ,
				{ 997 ,  {-0.027306248876628136 }} ,
				{ 1985 ,  {-0.027472076835736627 }} ,
				{ 3968 ,  {-0.027399976016511576 }} ,
				{ 3969 ,  {-0.027273063138732585 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 5.500000000000001 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 3.5000000000000004 ) ? ( 64 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( 260 ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 522 ) : ( 523 ) ) ) ) ) : ( 131 ) ) ) ) ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( ( ( Feature_11 <= 4.500000000000001 ) ? ( 92 ) : ( ( ( Feature_59 <= 10.500000000000002 ) ? ( 186 ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 374 ) : ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 750 ) : ( 751 ) ) ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 24 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( 50 ) : ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_19 <= 14.500000000000002 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_52 <= 8.500000000000002 ) ? ( 3968 ) : ( 3969 ) ) ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 500 ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_7
	

	namespace LGBM_Tree_0_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.01103939611614392 }} ,
				{ 10 ,  {0.027929773846700173 }} ,
				{ 13 ,  {0.023886931973980386 }} ,
				{ 16 ,  {-0.02912900598569041 }} ,
				{ 17 ,  {-0.027090863390911414 }} ,
				{ 22 ,  {0.07547871512117958 }} ,
				{ 24 ,  {-0.027078847920888407 }} ,
				{ 25 ,  {-0.027272503254540965 }} ,
				{ 30 ,  {-0.026886766713297174 }} ,
				{ 47 ,  {0.09066987756433313 }} ,
				{ 59 ,  {-0.026937893485245612 }} ,
				{ 92 ,  {0.08272630224041583 }} ,
				{ 115 ,  {-0.02705885503815968 }} ,
				{ 117 ,  {-0.026979805487626008 }} ,
				{ 124 ,  {-0.027009862786746854 }} ,
				{ 126 ,  {-0.02692537178055874 }} ,
				{ 187 ,  {0.08893564098523042 }} ,
				{ 225 ,  {-0.026897707416052255 }} ,
				{ 228 ,  {-0.027093268389093473 }} ,
				{ 250 ,  {-0.02716044970615976 }} ,
				{ 251 ,  {-0.027035077863462938 }} ,
				{ 254 ,  {-0.027088133764422186 }} ,
				{ 255 ,  {-0.026968402699299454 }} ,
				{ 372 ,  {0.08634291500419591 }} ,
				{ 373 ,  {0.08410103044083359 }} ,
				{ 448 ,  {-0.02699551308537942 }} ,
				{ 449 ,  {-0.027114585778770503 }} ,
				{ 452 ,  {-0.02716737083563759 }} ,
				{ 454 ,  {-0.027246228502075077 }} ,
				{ 455 ,  {-0.02704233105268369 }} ,
				{ 458 ,  {-0.027316754411269878 }} ,
				{ 459 ,  {-0.027191607027708755 }} ,
				{ 464 ,  {-0.027065877610353402 }} ,
				{ 465 ,  {-0.027190137742277083 }} ,
				{ 466 ,  {-0.027015018306588957 }} ,
				{ 906 ,  {-0.026964189276728407 }} ,
				{ 934 ,  {-0.02695444025659914 }} ,
				{ 935 ,  {-0.027198018658599873 }} ,
				{ 1814 ,  {-0.02699885673093097 }} ,
				{ 1815 ,  {-0.02710567407792111 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 22 ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 92 ) : ( ( ( Feature_58 <= 5.500000000000001 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( 372 ) : ( 373 ) ) ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 448 ) : ( 449 ) ) ) : ( 225 ) ) ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_4 <= 10.500000000000002 ) ? ( 452 ) : ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 906 ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 1814 ) : ( 1815 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_37 <= 4.500000000000001 ) ? ( 228 ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( 458 ) : ( 459 ) ) ) ) ) : ( 115 ) ) ) ) ) : ( ( ( Feature_30 <= 7.500000000000001 ) ? ( ( ( Feature_62 <= 8.500000000000002 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_44 <= 14.500000000000002 ) ? ( 466 ) : ( ( ( Feature_13 <= 11.500000000000002 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_51 <= 1.5000000000000002 ) ? ( 30 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_18 <= 14.500000000000002 ) ? ( 124 ) : ( ( ( Feature_35 <= 13.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 126 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 254 ) : ( 255 ) ) ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_8
	

	namespace LGBM_Tree_1_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03956829567124679 }} ,
				{ 10 ,  {-0.013822453944147425 }} ,
				{ 13 ,  {0.09341400396868443 }} ,
				{ 14 ,  {-0.017928945381499514 }} ,
				{ 25 ,  {0.025440196937110804 }} ,
				{ 31 ,  {0.018390495866867414 }} ,
				{ 61 ,  {0.058668291635254444 }} ,
				{ 92 ,  {-0.02715328691639521 }} ,
				{ 93 ,  {-0.027316649493791575 }} ,
				{ 94 ,  {-0.027140195025306325 }} ,
				{ 95 ,  {-0.027056849831794252 }} ,
				{ 96 ,  {0.020445733887518885 }} ,
				{ 97 ,  {-0.02769667652596723 }} ,
				{ 120 ,  {0.07691511831171735 }} ,
				{ 176 ,  {-0.02710942927795933 }} ,
				{ 178 ,  {-0.027249161974215036 }} ,
				{ 180 ,  {-0.02724717625102757 }} ,
				{ 181 ,  {-0.027093946341315612 }} ,
				{ 196 ,  {-0.027643847138659885 }} ,
				{ 197 ,  {-0.028865908993347646 }} ,
				{ 198 ,  {-0.027608575002220182 }} ,
				{ 243 ,  {0.10491580917688602 }} ,
				{ 354 ,  {-0.027234095003684747 }} ,
				{ 355 ,  {-0.027357460447759913 }} ,
				{ 358 ,  {-0.02749012055300706 }} ,
				{ 359 ,  {-0.02734256746338531 }} ,
				{ 367 ,  {-0.027109915991271036 }} ,
				{ 399 ,  {-0.027329225251533334 }} ,
				{ 484 ,  {0.09779502027615736 }} ,
				{ 485 ,  {0.088116549734219 }} ,
				{ 728 ,  {-0.02722062689513782 }} ,
				{ 729 ,  {-0.027115122001799927 }} ,
				{ 730 ,  {-0.027395991872169397 }} ,
				{ 732 ,  {-0.027163372875039955 }} ,
				{ 733 ,  {-0.027266525074925226 }} ,
				{ 796 ,  {-0.027094486888792 }} ,
				{ 797 ,  {-0.027193085013593812 }} ,
				{ 1462 ,  {-0.027183353425651022 }} ,
				{ 2926 ,  {-0.02723455087628165 }} ,
				{ 2927 ,  {-0.027374968670189292 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_3 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 176 ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 178 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 730 ) : ( ( ( Feature_44 <= 2.5000000000000004 ) ? ( 1462 ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 2926 ) : ( 2927 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_9 <= 7.500000000000001 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 13.500000000000002 ) ? ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 12.500000000000002 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 14.500000000000002 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 198 ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 796 ) : ( 797 ) ) ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 1.5000000000000002 ) ? ( 120 ) : ( ( ( Feature_37 <= 9.500000000000002 ) ? ( ( ( Feature_43 <= 15.500000000000002 ) ? ( 484 ) : ( 485 ) ) ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_8
	

	namespace LGBM_Tree_2_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.06947326588107858 }} ,
				{ 14 ,  {0.018943675929411492 }} ,
				{ 16 ,  {0.0009598205296687141 }} ,
				{ 20 ,  {0.012123776617587359 }} ,
				{ 21 ,  {-0.027448122542713855 }} ,
				{ 25 ,  {0.03998641590097712 }} ,
				{ 26 ,  {-0.027897006025018496 }} ,
				{ 27 ,  {0.04622670142732927 }} ,
				{ 31 ,  {-0.028051409172689185 }} ,
				{ 34 ,  {-0.02732262568897767 }} ,
				{ 46 ,  {-0.027266698260789424 }} ,
				{ 48 ,  {0.09970644282764006 }} ,
				{ 61 ,  {-0.02734853896889446 }} ,
				{ 71 ,  {-0.02714130766507593 }} ,
				{ 88 ,  {-0.02713999617042559 }} ,
				{ 91 ,  {-0.027366278232526055 }} ,
				{ 94 ,  {-0.027113069932069495 }} ,
				{ 99 ,  {0.06871630953686618 }} ,
				{ 121 ,  {-0.027153358413723197 }} ,
				{ 140 ,  {-0.02716038769059293 }} ,
				{ 141 ,  {-0.027305367287113236 }} ,
				{ 190 ,  {-0.02713888899108099 }} ,
				{ 191 ,  {-0.027207195189253405 }} ,
				{ 196 ,  {0.0825071224635791 }} ,
				{ 197 ,  {0.08856908708144894 }} ,
				{ 240 ,  {-0.027141953402353827 }} ,
				{ 241 ,  {-0.027344161370399928 }} ,
				{ 356 ,  {-0.027348834378497913 }} ,
				{ 357 ,  {-0.02710466888427105 }} ,
				{ 361 ,  {-0.027210023644874584 }} ,
				{ 362 ,  {-0.027108409189629312 }} ,
				{ 363 ,  {-0.027269873541303582 }} ,
				{ 716 ,  {-0.027179210496797664 }} ,
				{ 718 ,  {-0.027183335908720237 }} ,
				{ 719 ,  {-0.027278961440951807 }} ,
				{ 720 ,  {-0.027412224871583724 }} ,
				{ 1434 ,  {-0.027316823234821038 }} ,
				{ 1435 ,  {-0.02751441710197 }} ,
				{ 1442 ,  {-0.027183529973835736 }} ,
				{ 1443 ,  {-0.02735223737454555 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 140 ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 88 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 716 ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 1434 ) : ( 1435 ) ) ) ) ) : ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 718 ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_53 <= 5.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 720 ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 1442 ) : ( 1443 ) ) ) ) ) : ( 361 ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 94 ) : ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( 48 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 196 ) : ( 197 ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_52 <= 13.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_4 <= 5.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_45 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_8
	

	namespace LGBM_Tree_3_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.019998608648864685 }} ,
				{ 12 ,  {-0.027591939360331393 }} ,
				{ 13 ,  {0.03604967177658707 }} ,
				{ 16 ,  {0.01555036922552665 }} ,
				{ 20 ,  {0.05536248134387337 }} ,
				{ 21 ,  {-0.027884873401795962 }} ,
				{ 22 ,  {0.0172090426621163 }} ,
				{ 31 ,  {0.017476773967148074 }} ,
				{ 35 ,  {0.059593058738634644 }} ,
				{ 47 ,  {-0.027734015863938862 }} ,
				{ 57 ,  {-0.027054917603040296 }} ,
				{ 60 ,  {0.010658554114771243 }} ,
				{ 69 ,  {0.07568936058190824 }} ,
				{ 93 ,  {-0.027143820657071147 }} ,
				{ 112 ,  {-0.027108620232487435 }} ,
				{ 113 ,  {-0.027237693737864218 }} ,
				{ 137 ,  {0.09635501836495583 }} ,
				{ 234 ,  {-0.027264741782092372 }} ,
				{ 235 ,  {-0.027119247775784734 }} ,
				{ 236 ,  {-0.027183927492456874 }} ,
				{ 237 ,  {-0.027087508154428626 }} ,
				{ 238 ,  {-0.02728923977165683 }} ,
				{ 244 ,  {-0.027222375462734816 }} ,
				{ 245 ,  {-0.027088967193474034 }} ,
				{ 246 ,  {-0.027545915839728752 }} ,
				{ 247 ,  {-0.027259108886955593 }} ,
				{ 272 ,  {0.09209367325983592 }} ,
				{ 368 ,  {-0.02730549393985568 }} ,
				{ 369 ,  {-0.027097688416411626 }} ,
				{ 370 ,  {-0.027304976528168795 }} ,
				{ 371 ,  {-0.027461236065756386 }} ,
				{ 464 ,  {-0.02728345855867651 }} ,
				{ 465 ,  {-0.027152540237080015 }} ,
				{ 466 ,  {-0.027413393044076747 }} ,
				{ 478 ,  {-0.027099065102739697 }} ,
				{ 479 ,  {-0.027214264412277263 }} ,
				{ 546 ,  {0.08411900353165536 }} ,
				{ 547 ,  {0.08693694500002354 }} ,
				{ 934 ,  {-0.027359129171566167 }} ,
				{ 935 ,  {-0.02722757242010057 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 272 ) : ( ( ( Feature_51 <= 4.500000000000001 ) ? ( 546 ) : ( 547 ) ) ) ) ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 466 ) : ( ( ( Feature_60 <= 9.500000000000002 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 238 ) : ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 60 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 244 ) : ( 245 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 246 ) : ( 247 ) ) ) ) ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_8
	

	namespace LGBM_Tree_4_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.018934846766872435 }} ,
				{ 16 ,  {-0.011940919935392869 }} ,
				{ 18 ,  {-0.027840363723605835 }} ,
				{ 20 ,  {-0.007901023246958213 }} ,
				{ 22 ,  {0.0428852958695083 }} ,
				{ 23 ,  {-0.027717860241016225 }} ,
				{ 28 ,  {0.08421479500784806 }} ,
				{ 29 ,  {0.054421262024737065 }} ,
				{ 30 ,  {0.0933491972193877 }} ,
				{ 31 ,  {0.08256583791692278 }} ,
				{ 35 ,  {-0.027470220061045054 }} ,
				{ 39 ,  {-0.028088692190113142 }} ,
				{ 43 ,  {-0.01820860932009776 }} ,
				{ 76 ,  {0.030841314254872323 }} ,
				{ 136 ,  {-0.02741916828147621 }} ,
				{ 137 ,  {-0.027241698559021733 }} ,
				{ 138 ,  {-0.027140634447450115 }} ,
				{ 139 ,  {-0.027262146387768235 }} ,
				{ 154 ,  {0.08080460928283126 }} ,
				{ 155 ,  {0.09893104545901132 }} ,
				{ 337 ,  {-0.027182382998258942 }} ,
				{ 341 ,  {-0.027170780635741923 }} ,
				{ 342 ,  {-0.027226943590164667 }} ,
				{ 343 ,  {-0.02734642139056119 }} ,
				{ 676 ,  {-0.02731771285042052 }} ,
				{ 677 ,  {-0.02714679444801192 }} ,
				{ 680 ,  {-0.02719097332055123 }} ,
				{ 681 ,  {-0.0273091652739704 }} ,
				{ 1345 ,  {-0.027227777048565285 }} ,
				{ 1346 ,  {-0.027159609035762828 }} ,
				{ 1347 ,  {-0.02730331553722209 }} ,
				{ 1356 ,  {-0.027408726049711736 }} ,
				{ 1358 ,  {-0.02720214399472813 }} ,
				{ 1359 ,  {-0.02729655412964173 }} ,
				{ 2688 ,  {-0.027277744263770144 }} ,
				{ 2714 ,  {-0.027265568086279064 }} ,
				{ 2715 ,  {-0.027389356965708597 }} ,
				{ 5379 ,  {-0.027339105881563647 }} ,
				{ 10756 ,  {-0.027551703804234964 }} ,
				{ 10757 ,  {-0.027382973093809798 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 16 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 136 ) : ( 137 ) ) ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_6 <= 3.5000000000000004 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 1.0000000180025095e-35 ) ? ( 2688 ) : ( ( ( Feature_10 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 10756 ) : ( 10757 ) ) ) : ( 5379 ) ) ) ) ) : ( 1345 ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 1346 ) : ( 1347 ) ) ) ) ) : ( 337 ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 1356 ) : ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 2714 ) : ( 2715 ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 1358 ) : ( 1359 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_36 <= 5.500000000000001 ) ? ( 680 ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 4.500000000000001 ) ? ( 6 ) : ( ( ( Feature_21 <= 2.5000000000000004 ) ? ( ( ( Feature_3 <= 7.500000000000001 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_42 <= 14.500000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_8
	

	namespace LGBM_Tree_5_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.011208449447915866 }} ,
				{ 10 ,  {-0.012095873744880498 }} ,
				{ 15 ,  {0.04132752780382187 }} ,
				{ 19 ,  {-0.013494159300034482 }} ,
				{ 23 ,  {0.06464695020916804 }} ,
				{ 24 ,  {0.002113104121061226 }} ,
				{ 28 ,  {-0.02748721050416122 }} ,
				{ 36 ,  {-0.027483939993344232 }} ,
				{ 45 ,  {0.07476451424383931 }} ,
				{ 50 ,  {-0.027075455691279362 }} ,
				{ 55 ,  {-0.027340846313186173 }} ,
				{ 58 ,  {-0.0271052245130452 }} ,
				{ 59 ,  {-0.027191575994518997 }} ,
				{ 75 ,  {-0.027088593322354904 }} ,
				{ 89 ,  {0.10062039567817078 }} ,
				{ 102 ,  {-0.027339202677588766 }} ,
				{ 103 ,  {-0.027130921665892246 }} ,
				{ 107 ,  {-0.02703245718801503 }} ,
				{ 108 ,  {-0.02727757250632198 }} ,
				{ 109 ,  {-0.02714251858486369 }} ,
				{ 148 ,  {-0.027167623241337154 }} ,
				{ 149 ,  {-0.027347484887263896 }} ,
				{ 176 ,  {0.08977677339925588 }} ,
				{ 208 ,  {-0.02712237957380262 }} ,
				{ 209 ,  {-0.027372516627948602 }} ,
				{ 354 ,  {0.08518545345695236 }} ,
				{ 355 ,  {0.08295399621260646 }} ,
				{ 421 ,  {-0.027086721438717595 }} ,
				{ 423 ,  {-0.026998907968709726 }} ,
				{ 424 ,  {-0.027093653086816834 }} ,
				{ 425 ,  {-0.027246754321201352 }} ,
				{ 426 ,  {-0.027020479387757812 }} ,
				{ 427 ,  {-0.027111237081513404 }} ,
				{ 844 ,  {-0.027152779446756883 }} ,
				{ 845 ,  {-0.027051831513356106 }} ,
				{ 1681 ,  {-0.02715672207554807 }} ,
				{ 1682 ,  {-0.027114136239225664 }} ,
				{ 1683 ,  {-0.027269973654168247 }} ,
				{ 3360 ,  {-0.027188175487110472 }} ,
				{ 3361 ,  {-0.02736352510337624 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_13 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 176 ) : ( ( ( Feature_58 <= 12.500000000000002 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 50 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 3360 ) : ( 3361 ) ) ) : ( 1681 ) ) ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 1682 ) : ( 1683 ) ) ) ) ) : ( 421 ) ) ) : ( ( ( Feature_58 <= 9.500000000000002 ) ? ( ( ( Feature_27 <= 8.500000000000002 ) ? ( 844 ) : ( 845 ) ) ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_61 <= 12.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( 424 ) : ( 425 ) ) ) : ( ( ( Feature_51 <= 4.500000000000001 ) ? ( 426 ) : ( 427 ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 3.5000000000000004 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_8
	

	namespace LGBM_Tree_6_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.008951403229895696 }} ,
				{ 8 ,  {-0.010874102807545138 }} ,
				{ 10 ,  {-0.027450783185127538 }} ,
				{ 15 ,  {-0.011261802836534815 }} ,
				{ 19 ,  {-0.027021235164502545 }} ,
				{ 22 ,  {0.020297107394231097 }} ,
				{ 37 ,  {-0.027083212806623742 }} ,
				{ 47 ,  {0.054364330962168986 }} ,
				{ 57 ,  {-0.011204802972013383 }} ,
				{ 72 ,  {-0.027474980435260032 }} ,
				{ 73 ,  {-0.02725587820126001 }} ,
				{ 92 ,  {0.09877084564756378 }} ,
				{ 112 ,  {-0.027194820553114726 }} ,
				{ 113 ,  {-0.0273329371148834 }} ,
				{ 119 ,  {-0.026994266656406158 }} ,
				{ 186 ,  {0.09209550118868609 }} ,
				{ 374 ,  {0.0867279545218389 }} ,
				{ 464 ,  {-0.02701744199995945 }} ,
				{ 465 ,  {-0.027123551507318912 }} ,
				{ 471 ,  {-0.027082048219886135 }} ,
				{ 473 ,  {-0.027025524348340182 }} ,
				{ 474 ,  {-0.027068570665651 }} ,
				{ 750 ,  {0.08040667703699127 }} ,
				{ 751 ,  {0.08369004226805005 }} ,
				{ 932 ,  {-0.027140222898694468 }} ,
				{ 933 ,  {-0.02734133414939653 }} ,
				{ 935 ,  {-0.027036624922725707 }} ,
				{ 936 ,  {-0.027275803312428227 }} ,
				{ 938 ,  {-0.02740292068114901 }} ,
				{ 939 ,  {-0.027223103900670415 }} ,
				{ 940 ,  {-0.027132261163700724 }} ,
				{ 941 ,  {-0.02724488381347966 }} ,
				{ 944 ,  {-0.027054002198231432 }} ,
				{ 945 ,  {-0.02718844188302377 }} ,
				{ 950 ,  {-0.02707206371320325 }} ,
				{ 951 ,  {-0.027269299261005298 }} ,
				{ 1868 ,  {-0.0270966998400496 }} ,
				{ 1869 ,  {-0.02721854488981343 }} ,
				{ 1874 ,  {-0.02707500123141747 }} ,
				{ 1875 ,  {-0.02722589744422644 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_50 <= 5.500000000000001 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_41 <= 4.500000000000001 ) ? ( ( ( Feature_54 <= 7.500000000000001 ) ? ( 92 ) : ( ( ( Feature_10 <= 3.5000000000000004 ) ? ( 186 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 374 ) : ( ( ( Feature_46 <= 10.500000000000002 ) ? ( 750 ) : ( 751 ) ) ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 9.500000000000002 ) ? ( 1868 ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_43 <= 12.500000000000002 ) ? ( 944 ) : ( 945 ) ) ) : ( 473 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 474 ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 950 ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_8
	

	namespace LGBM_Tree_7_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.02807679934615039 }} ,
				{ 8 ,  {0.047495656735260294 }} ,
				{ 18 ,  {0.09566886072648016 }} ,
				{ 21 ,  {0.014241638536627722 }} ,
				{ 22 ,  {0.003952944188411363 }} ,
				{ 23 ,  {0.08497948879477568 }} ,
				{ 25 ,  {-0.013076380826964962 }} ,
				{ 26 ,  {0.025380960443448255 }} ,
				{ 38 ,  {0.07242684754151384 }} ,
				{ 40 ,  {-0.02724259586368047 }} ,
				{ 41 ,  {-0.028171324269433824 }} ,
				{ 55 ,  {-0.027241635159015017 }} ,
				{ 78 ,  {0.08402729614625154 }} ,
				{ 79 ,  {0.09406332360839015 }} ,
				{ 96 ,  {-0.02711857393096861 }} ,
				{ 97 ,  {-0.027387819415276623 }} ,
				{ 109 ,  {-0.026997129302019474 }} ,
				{ 197 ,  {-0.027270317279923118 }} ,
				{ 216 ,  {-0.02703574873356195 }} ,
				{ 217 ,  {-0.027203094291829977 }} ,
				{ 393 ,  {-0.027000649224108927 }} ,
				{ 396 ,  {-0.027006596640436323 }} ,
				{ 398 ,  {-0.026938254560553588 }} ,
				{ 795 ,  {-0.027188410954904842 }} ,
				{ 798 ,  {-0.027097151035816787 }} ,
				{ 799 ,  {-0.027001005941648382 }} ,
				{ 1570 ,  {-0.027019667057215493 }} ,
				{ 1571 ,  {-0.027117264818269905 }} ,
				{ 1588 ,  {-0.027030999161879572 }} ,
				{ 3136 ,  {-0.02705526284384905 }} ,
				{ 3138 ,  {-0.02705046494929062 }} ,
				{ 3139 ,  {-0.027132458638342762 }} ,
				{ 3178 ,  {-0.02705296941659645 }} ,
				{ 3179 ,  {-0.027164875627352866 }} ,
				{ 12549 ,  {-0.02704464488379481 }} ,
				{ 12550 ,  {-0.02715634177187419 }} ,
				{ 12551 ,  {-0.027269754199300292 }} ,
				{ 25096 ,  {-0.027091649378332944 }} ,
				{ 50194 ,  {-0.027258200098870464 }} ,
				{ 50195 ,  {-0.027132589881208202 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 18 ) : ( ( ( Feature_36 <= 15.500000000000002 ) ? ( 38 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_13 <= 12.500000000000002 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_6 <= 2.5000000000000004 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_34 <= 2.5000000000000004 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_3 <= 14.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 3136 ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 25096 ) : ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 50194 ) : ( 50195 ) ) ) ) ) : ( 12549 ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 12550 ) : ( 12551 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 5.500000000000001 ) ? ( 3138 ) : ( 3139 ) ) ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 1570 ) : ( 1571 ) ) ) ) ) : ( 393 ) ) ) : ( 197 ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 396 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( 1588 ) : ( ( ( Feature_18 <= 14.500000000000002 ) ? ( 3178 ) : ( 3179 ) ) ) ) ) : ( 795 ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 398 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 798 ) : ( 799 ) ) ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_8
	

	namespace LGBM_Tree_8_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.028283734485048773 }} ,
				{ 18 ,  {-0.008995266838074271 }} ,
				{ 21 ,  {-0.011803783998574006 }} ,
				{ 26 ,  {-0.027045523179088555 }} ,
				{ 29 ,  {0.04822846014244961 }} ,
				{ 31 ,  {-0.02749458767079914 }} ,
				{ 32 ,  {-0.027148486225296732 }} ,
				{ 33 ,  {-0.026948196539182453 }} ,
				{ 46 ,  {-0.027269735910302097 }} ,
				{ 47 ,  {0.009384421162797016 }} ,
				{ 49 ,  {-0.026918601104582676 }} ,
				{ 50 ,  {-0.027172434061679174 }} ,
				{ 54 ,  {-0.026951657939547142 }} ,
				{ 55 ,  {-0.026866424401013292 }} ,
				{ 56 ,  {-0.01052908559603593 }} ,
				{ 57 ,  {-0.027256569742214 }} ,
				{ 60 ,  {-0.02698383018069608 }} ,
				{ 61 ,  {-0.027144369985930096 }} ,
				{ 76 ,  {-0.02694887947639593 }} ,
				{ 78 ,  {-0.027023630363634584 }} ,
				{ 79 ,  {-0.027211612830779885 }} ,
				{ 80 ,  {-0.0271305489316875 }} ,
				{ 81 ,  {-0.026991141916137797 }} ,
				{ 82 ,  {-0.02724880533706385 }} ,
				{ 83 ,  {-0.027664502817277677 }} ,
				{ 88 ,  {-0.028006896069120144 }} ,
				{ 89 ,  {0.05916261217344335 }} ,
				{ 90 ,  {0.03175012747930792 }} ,
				{ 96 ,  {-0.02692355028564841 }} ,
				{ 97 ,  {-0.027092974320273924 }} ,
				{ 102 ,  {-0.026950284908494472 }} ,
				{ 154 ,  {-0.02709655792812457 }} ,
				{ 155 ,  {-0.02694199923361954 }} ,
				{ 183 ,  {0.0705523088487436 }} ,
				{ 207 ,  {-0.026992727949345555 }} ,
				{ 364 ,  {0.07890773409636097 }} ,
				{ 412 ,  {-0.026969166950475562 }} ,
				{ 413 ,  {-0.02715097977594278 }} ,
				{ 730 ,  {0.10020222051739945 }} ,
				{ 731 ,  {0.09059394780577407 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( 76 ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_5 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( Feature_50 <= 2.5000000000000004 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 90 ) : ( ( ( Feature_3 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( 364 ) : ( ( ( Feature_10 <= 9.500000000000002 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_21 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_8
	

	namespace LGBM_Tree_9_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.025171175823153837 }} ,
				{ 10 ,  {-0.013690579375611675 }} ,
				{ 13 ,  {0.04360798481253243 }} ,
				{ 17 ,  {0.024677154436076328 }} ,
				{ 22 ,  {-0.01975799309099311 }} ,
				{ 24 ,  {0.013391465758048999 }} ,
				{ 28 ,  {0.034626785058740756 }} ,
				{ 47 ,  {0.043407931889963614 }} ,
				{ 51 ,  {-0.012933176556644985 }} ,
				{ 58 ,  {-0.02778380336875279 }} ,
				{ 60 ,  {0.0031831387212878644 }} ,
				{ 61 ,  {-0.02724196951364846 }} ,
				{ 64 ,  {-0.027656604181680727 }} ,
				{ 66 ,  {0.02536357935046045 }} ,
				{ 67 ,  {-0.02718355029889726 }} ,
				{ 92 ,  {0.064426937852458 }} ,
				{ 100 ,  {-0.027704119308327932 }} ,
				{ 101 ,  {-0.027188061118175424 }} ,
				{ 118 ,  {-0.02718654844619684 }} ,
				{ 119 ,  {-0.027373266606166333 }} ,
				{ 126 ,  {-0.027332327145531316 }} ,
				{ 127 ,  {-0.028087670895441192 }} ,
				{ 131 ,  {-0.02716768964670312 }} ,
				{ 186 ,  {0.10506062550398731 }} ,
				{ 251 ,  {-0.02731995207164896 }} ,
				{ 260 ,  {-0.02752053578021978 }} ,
				{ 375 ,  {0.07573741286300759 }} ,
				{ 497 ,  {-0.027456147542063658 }} ,
				{ 499 ,  {-0.027652709447898157 }} ,
				{ 500 ,  {-0.027281147440511078 }} ,
				{ 501 ,  {-0.02712776458018696 }} ,
				{ 522 ,  {-0.027343590338911386 }} ,
				{ 523 ,  {-0.02711440136894222 }} ,
				{ 748 ,  {0.09342808234317765 }} ,
				{ 749 ,  {0.08529163295676656 }} ,
				{ 993 ,  {-0.027346577850240222 }} ,
				{ 996 ,  {-0.027457450684184755 }} ,
				{ 997 ,  {-0.027231603031255297 }} ,
				{ 1984 ,  {-0.027307589090767248 }} ,
				{ 1985 ,  {-0.027183009809821464 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 5.500000000000001 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 3.5000000000000004 ) ? ( 64 ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( 260 ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 522 ) : ( 523 ) ) ) ) ) : ( 131 ) ) ) ) ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( ( ( Feature_11 <= 4.500000000000001 ) ? ( 92 ) : ( ( ( Feature_3 <= 11.500000000000002 ) ? ( 186 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_61 <= 11.500000000000002 ) ? ( 748 ) : ( 749 ) ) ) : ( 375 ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 24 ) : ( ( ( Feature_9 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 28 ) : ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( 58 ) : ( ( ( Feature_3 <= 15.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_54 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 1984 ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 500 ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_8
	

	namespace LGBM_Tree_0_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.037937066051205864 }} ,
				{ 10 ,  {-0.027171960606676038 }} ,
				{ 11 ,  {-0.026946752521919665 }} ,
				{ 13 ,  {0.02364784583890363 }} ,
				{ 19 ,  {0.0640929867033325 }} ,
				{ 24 ,  {-0.027001560622361143 }} ,
				{ 25 ,  {-0.027432876870213098 }} ,
				{ 37 ,  {0.08897527641743849 }} ,
				{ 59 ,  {-0.0268628483508041 }} ,
				{ 60 ,  {-0.026814817659189513 }} ,
				{ 63 ,  {-0.027057242855459008 }} ,
				{ 73 ,  {0.08255586036142887 }} ,
				{ 114 ,  {-0.026993357811654607 }} ,
				{ 117 ,  {-0.02688508951967542 }} ,
				{ 123 ,  {-0.02688198710730602 }} ,
				{ 124 ,  {-0.02689133639136461 }} ,
				{ 125 ,  {-0.02699166909607887 }} ,
				{ 145 ,  {0.07953931375083664 }} ,
				{ 225 ,  {-0.026833015637308708 }} ,
				{ 230 ,  {-0.027256242856962237 }} ,
				{ 231 ,  {-0.027103342510200457 }} ,
				{ 245 ,  {-0.02689385933883209 }} ,
				{ 288 ,  {0.07873491669780452 }} ,
				{ 289 ,  {0.07732347021836095 }} ,
				{ 448 ,  {-0.026928708351980246 }} ,
				{ 449 ,  {-0.027044684183901265 }} ,
				{ 452 ,  {-0.02710335037057786 }} ,
				{ 454 ,  {-0.027189986646484296 }} ,
				{ 455 ,  {-0.0269907698783063 }} ,
				{ 465 ,  {-0.027135005589611016 }} ,
				{ 466 ,  {-0.026941409752633157 }} ,
				{ 488 ,  {-0.026899909440316797 }} ,
				{ 489 ,  {-0.02700025962899881 }} ,
				{ 906 ,  {-0.027050381378797058 }} ,
				{ 928 ,  {-0.026925990367261978 }} ,
				{ 929 ,  {-0.02704175931395568 }} ,
				{ 934 ,  {-0.026875019521708055 }} ,
				{ 935 ,  {-0.027134312530078305 }} ,
				{ 1814 ,  {-0.02697725336484873 }} ,
				{ 1815 ,  {-0.02688201300409205 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( 8 ) : ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 448 ) : ( 449 ) ) ) : ( 225 ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 452 ) : ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 906 ) : ( ( ( Feature_30 <= 9.500000000000002 ) ? ( 1814 ) : ( 1815 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 114 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 7.500000000000001 ) ? ( ( ( Feature_62 <= 13.500000000000002 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( ( ( Feature_44 <= 14.500000000000002 ) ? ( 466 ) : ( ( ( Feature_13 <= 11.500000000000002 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( ( ( Feature_51 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 10.500000000000002 ) ? ( 488 ) : ( 489 ) ) ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_9
	

	namespace LGBM_Tree_1_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03757479725877158 }} ,
				{ 10 ,  {-0.013608060735406083 }} ,
				{ 13 ,  {0.08326317222709902 }} ,
				{ 14 ,  {-0.01958383446156496 }} ,
				{ 25 ,  {-0.0016530260222453485 }} ,
				{ 31 ,  {0.02476983114246602 }} ,
				{ 47 ,  {-0.02704296301579332 }} ,
				{ 49 ,  {-0.014001541332073467 }} ,
				{ 61 ,  {0.05398196273771663 }} ,
				{ 92 ,  {-0.02707054521149643 }} ,
				{ 121 ,  {0.09179181555541405 }} ,
				{ 176 ,  {-0.027035311834142334 }} ,
				{ 178 ,  {-0.02718420765567961 }} ,
				{ 180 ,  {-0.02720824588081159 }} ,
				{ 186 ,  {-0.027105571172813477 }} ,
				{ 187 ,  {-0.027302241906649746 }} ,
				{ 193 ,  {-0.027422629628485757 }} ,
				{ 194 ,  {-0.028743367140619848 }} ,
				{ 195 ,  {-0.02721682159124038 }} ,
				{ 241 ,  {0.06914717483702594 }} ,
				{ 354 ,  {-0.027167850608639833 }} ,
				{ 355 ,  {-0.027304277998664323 }} ,
				{ 358 ,  {-0.027443227774944758 }} ,
				{ 359 ,  {-0.027289824454021328 }} ,
				{ 362 ,  {-0.026967692840578872 }} ,
				{ 363 ,  {-0.02704930897905743 }} ,
				{ 365 ,  {-0.02716075434752979 }} ,
				{ 385 ,  {-0.027345263735592065 }} ,
				{ 480 ,  {0.08722548478106591 }} ,
				{ 481 ,  {0.07680011265010561 }} ,
				{ 728 ,  {-0.027033790489096918 }} ,
				{ 729 ,  {-0.02712706464594373 }} ,
				{ 733 ,  {-0.02732305807147859 }} ,
				{ 734 ,  {-0.027134548810567517 }} ,
				{ 735 ,  {-0.027038052216952005 }} ,
				{ 768 ,  {-0.02702910856584206 }} ,
				{ 769 ,  {-0.027144054441922017 }} ,
				{ 1464 ,  {-0.027284934662427138 }} ,
				{ 2930 ,  {-0.027083871852304594 }} ,
				{ 2931 ,  {-0.027195454938479538 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_3 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 176 ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 178 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 180 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 1464 ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 2930 ) : ( 2931 ) ) ) ) ) : ( 733 ) ) ) : ( ( ( Feature_9 <= 7.500000000000001 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 12.500000000000002 ) ? ( ( ( Feature_63 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_54 <= 14.500000000000002 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 768 ) : ( 769 ) ) ) : ( 385 ) ) ) : ( 193 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_50 <= 11.500000000000002 ) ? ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_9
	

	namespace LGBM_Tree_2_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.06450058056170178 }} ,
				{ 13 ,  {-0.02795128078919978 }} ,
				{ 14 ,  {0.019873199950594278 }} ,
				{ 16 ,  {0.0009922180637863117 }} ,
				{ 20 ,  {0.012424165545048327 }} ,
				{ 25 ,  {0.01469437014927271 }} ,
				{ 31 ,  {-0.02761742540960066 }} ,
				{ 34 ,  {-0.027258054709269543 }} ,
				{ 42 ,  {-0.02747804627872868 }} ,
				{ 43 ,  {-0.02713164707684071 }} ,
				{ 46 ,  {-0.02720350751712469 }} ,
				{ 48 ,  {0.09335386084860157 }} ,
				{ 60 ,  {-0.027126048938226777 }} ,
				{ 61 ,  {-0.027251894182730853 }} ,
				{ 88 ,  {-0.027059074921255772 }} ,
				{ 90 ,  {-0.02709987398391943 }} ,
				{ 94 ,  {-0.027030507096084844 }} ,
				{ 99 ,  {0.051701099631217697 }} ,
				{ 140 ,  {-0.027084797898118452 }} ,
				{ 141 ,  {-0.027236808968070556 }} ,
				{ 142 ,  {-0.02711061431458982 }} ,
				{ 143 ,  {-0.0270079992510546 }} ,
				{ 190 ,  {-0.02708473024052943 }} ,
				{ 191 ,  {-0.02719298574536005 }} ,
				{ 196 ,  {0.08255127280009808 }} ,
				{ 356 ,  {-0.027288946060549837 }} ,
				{ 357 ,  {-0.027028330299595057 }} ,
				{ 364 ,  {-0.027291760153412427 }} ,
				{ 366 ,  {-0.02728678930026235 }} ,
				{ 367 ,  {-0.027411921076341397 }} ,
				{ 394 ,  {0.07555009757690664 }} ,
				{ 395 ,  {0.07865740644757041 }} ,
				{ 717 ,  {-0.027091752021934458 }} ,
				{ 718 ,  {-0.02710430878072643 }} ,
				{ 719 ,  {-0.027205984977393877 }} ,
				{ 731 ,  {-0.02708734673029415 }} ,
				{ 1432 ,  {-0.027254085587587573 }} ,
				{ 1433 ,  {-0.027458321090991167 }} ,
				{ 1460 ,  {-0.02715009008166426 }} ,
				{ 1461 ,  {-0.027308286210940398 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 88 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 1432 ) : ( 1433 ) ) ) : ( 717 ) ) ) : ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 718 ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 90 ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 364 ) : ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 1.5000000000000002 ) ? ( 46 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 94 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( 48 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( 196 ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 394 ) : ( 395 ) ) ) ) ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_9
	

	namespace LGBM_Tree_3_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.01979798944732533 }} ,
				{ 12 ,  {-0.016070288847338438 }} ,
				{ 15 ,  {0.03279257744103349 }} ,
				{ 17 ,  {0.02324634637309693 }} ,
				{ 20 ,  {-0.019486374097524198 }} ,
				{ 21 ,  {0.06314242159663858 }} ,
				{ 22 ,  {0.01667775495376754 }} ,
				{ 26 ,  {-0.027499730339306035 }} ,
				{ 28 ,  {0.015702701951218374 }} ,
				{ 32 ,  {0.05717332465240041 }} ,
				{ 47 ,  {-0.027674257798660718 }} ,
				{ 93 ,  {-0.02706773511083197 }} ,
				{ 109 ,  {-0.026976508247044756 }} ,
				{ 116 ,  {-0.027241939018432512 }} ,
				{ 118 ,  {-0.02748678148191613 }} ,
				{ 119 ,  {-0.027181449328724912 }} ,
				{ 132 ,  {0.08907679217348846 }} ,
				{ 133 ,  {0.08229589700270899 }} ,
				{ 134 ,  {0.08269733542346695 }} ,
				{ 135 ,  {0.07632517853787435 }} ,
				{ 216 ,  {-0.027036174798182988 }} ,
				{ 217 ,  {-0.02718981926230395 }} ,
				{ 220 ,  {-0.02702623593527145 }} ,
				{ 234 ,  {-0.027142366665740877 }} ,
				{ 235 ,  {-0.027008410946046175 }} ,
				{ 368 ,  {-0.0272333099800509 }} ,
				{ 369 ,  {-0.027021019301103778 }} ,
				{ 370 ,  {-0.02722815854091598 }} ,
				{ 371 ,  {-0.02740037132760123 }} ,
				{ 445 ,  {-0.02699773890646942 }} ,
				{ 446 ,  {-0.027239402629982506 }} ,
				{ 447 ,  {-0.02706938854648417 }} ,
				{ 884 ,  {-0.027239481276574107 }} ,
				{ 886 ,  {-0.02717771647475985 }} ,
				{ 888 ,  {-0.027137860751491334 }} ,
				{ 889 ,  {-0.027016073192094404 }} ,
				{ 1770 ,  {-0.027139761648611954 }} ,
				{ 1771 ,  {-0.02700030446005441 }} ,
				{ 1774 ,  {-0.027253055535703063 }} ,
				{ 1775 ,  {-0.027384078700087112 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 32 ) : ( ( ( Feature_37 <= 12.500000000000002 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 132 ) : ( 133 ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 134 ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 220 ) : ( ( ( Feature_5 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( 884 ) : ( ( ( Feature_19 <= 8.500000000000002 ) ? ( 1770 ) : ( 1771 ) ) ) ) ) : ( ( ( Feature_25 <= 2.5000000000000004 ) ? ( 886 ) : ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 1774 ) : ( 1775 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( 888 ) : ( 889 ) ) ) : ( 445 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 28 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_53 <= 6.500000000000001 ) ? ( 116 ) : ( ( ( Feature_42 <= 7.500000000000001 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_9
	

	namespace LGBM_Tree_4_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.028168071984073728 }} ,
				{ 12 ,  {0.07230333382959202 }} ,
				{ 16 ,  {-0.011337137741632357 }} ,
				{ 18 ,  {-0.027736812699826835 }} ,
				{ 20 ,  {-0.007574368254872773 }} ,
				{ 22 ,  {0.04084222474441589 }} ,
				{ 23 ,  {-0.02762376404393296 }} ,
				{ 26 ,  {0.08021988794181617 }} ,
				{ 27 ,  {0.07656828260239486 }} ,
				{ 35 ,  {-0.027429611193603196 }} ,
				{ 39 ,  {-0.02799539201302197 }} ,
				{ 43 ,  {-0.018008763707131902 }} ,
				{ 69 ,  {-0.027085490960813887 }} ,
				{ 76 ,  {0.029489064186080077 }} ,
				{ 136 ,  {-0.027317750112996187 }} ,
				{ 137 ,  {-0.02713492987155662 }} ,
				{ 154 ,  {0.07478472180022949 }} ,
				{ 155 ,  {0.0910787921814416 }} ,
				{ 337 ,  {-0.02709780348797415 }} ,
				{ 340 ,  {-0.027121161230494135 }} ,
				{ 341 ,  {-0.027046268265188318 }} ,
				{ 342 ,  {-0.027153949660976104 }} ,
				{ 343 ,  {-0.027279736328664952 }} ,
				{ 673 ,  {-0.02739890685857095 }} ,
				{ 677 ,  {-0.02701332929136377 }} ,
				{ 1344 ,  {-0.027121960540435593 }} ,
				{ 1352 ,  {-0.02722308816473043 }} ,
				{ 1353 ,  {-0.0271011439121858 }} ,
				{ 1357 ,  {-0.02712047646650241 }} ,
				{ 1358 ,  {-0.027349392289180298 }} ,
				{ 2690 ,  {-0.027339312887719472 }} ,
				{ 2713 ,  {-0.027151424120578013 }} ,
				{ 2719 ,  {-0.02729340799724453 }} ,
				{ 5382 ,  {-0.027312159192950776 }} ,
				{ 5424 ,  {-0.027181790954244014 }} ,
				{ 5425 ,  {-0.02734753511237288 }} ,
				{ 5436 ,  {-0.027108744927019198 }} ,
				{ 5437 ,  {-0.027221111826225493 }} ,
				{ 10766 ,  {-0.027295675860169195 }} ,
				{ 10767 ,  {-0.027146581702373135 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_6 <= 3.5000000000000004 ) ? ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_4 <= 10.500000000000002 ) ? ( 1344 ) : ( ( ( Feature_28 <= 11.500000000000002 ) ? ( 2690 ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 5382 ) : ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 10766 ) : ( 10767 ) ) ) ) ) ) ) ) ) : ( 673 ) ) ) : ( 337 ) ) ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 1352 ) : ( 1353 ) ) ) : ( 677 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_37 <= 9.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 5424 ) : ( 5425 ) ) ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( Feature_12 <= 7.500000000000001 ) ? ( 1358 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 5436 ) : ( 5437 ) ) ) : ( 2719 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_61 <= 15.500000000000002 ) ? ( 340 ) : ( 341 ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( ( ( Feature_33 <= 10.500000000000002 ) ? ( 12 ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_9
	

	namespace LGBM_Tree_5_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {-0.01802212612495375 }} ,
				{ 15 ,  {0.039237124101896156 }} ,
				{ 16 ,  {0.03467280818832979 }} ,
				{ 17 ,  {-0.027577323907507306 }} ,
				{ 19 ,  {-0.027358989741752073 }} ,
				{ 25 ,  {0.002627662354469776 }} ,
				{ 28 ,  {-0.027256512852249205 }} ,
				{ 36 ,  {-0.027192285226834468 }} ,
				{ 40 ,  {0.07717497509417307 }} ,
				{ 41 ,  {0.056645825637131345 }} ,
				{ 43 ,  {0.07387116012751105 }} ,
				{ 48 ,  {-0.027286890491048345 }} ,
				{ 55 ,  {-0.027285198372998677 }} ,
				{ 74 ,  {-0.02701467484914983 }} ,
				{ 75 ,  {-0.027119866536712757 }} ,
				{ 85 ,  {0.0870412587250832 }} ,
				{ 98 ,  {-0.02714329835564069 }} ,
				{ 99 ,  {-0.026999426711602065 }} ,
				{ 108 ,  {-0.02722018931182041 }} ,
				{ 109 ,  {-0.02707244085376294 }} ,
				{ 117 ,  {-0.026957849907510774 }} ,
				{ 118 ,  {-0.02721142268708961 }} ,
				{ 119 ,  {-0.02706419653122706 }} ,
				{ 168 ,  {0.08296729110523542 }} ,
				{ 169 ,  {0.07810662556151894 }} ,
				{ 209 ,  {-0.026905089365216874 }} ,
				{ 211 ,  {-0.027006972057752467 }} ,
				{ 214 ,  {-0.027003800955970932 }} ,
				{ 215 ,  {-0.027109436265177273 }} ,
				{ 232 ,  {-0.027010091972037593 }} ,
				{ 233 ,  {-0.027111373336757075 }} ,
				{ 416 ,  {-0.027085604064532642 }} ,
				{ 417 ,  {-0.02700826642772838 }} ,
				{ 420 ,  {-0.02726099298866659 }} ,
				{ 421 ,  {-0.02711279360377717 }} ,
				{ 424 ,  {-0.027119845760119162 }} ,
				{ 425 ,  {-0.027299522808506352 }} ,
				{ 426 ,  {-0.027008647625339707 }} ,
				{ 854 ,  {-0.02704499460540782 }} ,
				{ 855 ,  {-0.027214385562184914 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 11.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_58 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( Feature_53 <= 12.500000000000002 ) ? ( ( ( Feature_34 <= 11.500000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( 168 ) : ( 169 ) ) ) : ( 85 ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 48 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_19 <= 8.500000000000002 ) ? ( ( ( Feature_29 <= 2.5000000000000004 ) ? ( 416 ) : ( 417 ) ) ) : ( 209 ) ) ) : ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 420 ) : ( 421 ) ) ) : ( 211 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( 424 ) : ( 425 ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 426 ) : ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 854 ) : ( 855 ) ) ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 214 ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 3.5000000000000004 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_13 <= 4.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_9
	

	namespace LGBM_Tree_6_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.008726331371038063 }} ,
				{ 9 ,  {-0.010427717998982747 }} ,
				{ 10 ,  {-0.027369552252594898 }} ,
				{ 15 ,  {-0.010967787032568637 }} ,
				{ 16 ,  {-0.027373862510984642 }} ,
				{ 23 ,  {0.019275492884402015 }} ,
				{ 35 ,  {-0.02694770674143925 }} ,
				{ 44 ,  {0.06458760849997909 }} ,
				{ 57 ,  {-0.010682471069598708 }} ,
				{ 68 ,  {-0.02721482269188614 }} ,
				{ 69 ,  {-0.026957536158762476 }} ,
				{ 112 ,  {-0.027055609549051354 }} ,
				{ 113 ,  {-0.027257591888661545 }} ,
				{ 119 ,  {-0.026917295975812633 }} ,
				{ 180 ,  {0.08025449236562197 }} ,
				{ 181 ,  {0.09282587868965059 }} ,
				{ 182 ,  {0.07341822713229974 }} ,
				{ 232 ,  {-0.026967476807502375 }} ,
				{ 366 ,  {0.0810757935519275 }} ,
				{ 367 ,  {0.0772815814271782 }} ,
				{ 471 ,  {-0.027011824118240324 }} ,
				{ 473 ,  {-0.02695444654044926 }} ,
				{ 474 ,  {-0.027127413453350565 }} ,
				{ 475 ,  {-0.027015150272856732 }} ,
				{ 932 ,  {-0.027070436258624427 }} ,
				{ 933 ,  {-0.027291204883381378 }} ,
				{ 936 ,  {-0.02721634513120824 }} ,
				{ 938 ,  {-0.027362202273636612 }} ,
				{ 939 ,  {-0.027173433039894442 }} ,
				{ 940 ,  {-0.02707145796732245 }} ,
				{ 941 ,  {-0.02718161045287494 }} ,
				{ 944 ,  {-0.02713236713170797 }} ,
				{ 945 ,  {-0.026961188835686017 }} ,
				{ 1868 ,  {-0.026972557760091283 }} ,
				{ 1870 ,  {-0.027007379715746294 }} ,
				{ 1871 ,  {-0.027176962017519263 }} ,
				{ 1874 ,  {-0.02699410705020739 }} ,
				{ 1875 ,  {-0.027162509359378074 }} ,
				{ 3738 ,  {-0.026963735920507128 }} ,
				{ 3739 ,  {-0.02713545485458929 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_63 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_50 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 44 ) : ( ( ( Feature_26 <= 13.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 182 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 232 ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 1868 ) : ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 3738 ) : ( 3739 ) ) ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 944 ) : ( 945 ) ) ) : ( 473 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_9
	

	namespace LGBM_Tree_7_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.026751978837700082 }} ,
				{ 8 ,  {-0.004233507853724733 }} ,
				{ 11 ,  {0.025742246736550123 }} ,
				{ 19 ,  {0.00043998036364666765 }} ,
				{ 20 ,  {-0.027211580294776896 }} ,
				{ 21 ,  {-0.028081583289484836 }} ,
				{ 25 ,  {0.028748800106199093 }} ,
				{ 36 ,  {0.09126913345507479 }} ,
				{ 48 ,  {-0.02725121132678625 }} ,
				{ 49 ,  {-0.02700921158626737 }} ,
				{ 54 ,  {-0.0012567358817274835 }} ,
				{ 75 ,  {0.06629290714213024 }} ,
				{ 105 ,  {-0.02692465660971835 }} ,
				{ 110 ,  {-0.027046401438847723 }} ,
				{ 111 ,  {-0.027305506497280658 }} ,
				{ 148 ,  {0.09082719235494527 }} ,
				{ 212 ,  {-0.026953596285258313 }} ,
				{ 213 ,  {-0.027143223680649177 }} ,
				{ 215 ,  {-0.02686609098121938 }} ,
				{ 298 ,  {0.07720625997000007 }} ,
				{ 299 ,  {0.08446490503773438 }} ,
				{ 418 ,  {-0.02695352666780856 }} ,
				{ 419 ,  {-0.02705417716693766 }} ,
				{ 429 ,  {-0.02706663516272801 }} ,
				{ 832 ,  {-0.026973179714494047 }} ,
				{ 834 ,  {-0.02698464285738072 }} ,
				{ 1671 ,  {-0.027178644596980023 }} ,
				{ 1712 ,  {-0.027015511047730756 }} ,
				{ 1713 ,  {-0.026936523659311724 }} ,
				{ 1714 ,  {-0.026871325013271993 }} ,
				{ 3332 ,  {-0.027314707044775434 }} ,
				{ 3333 ,  {-0.027117001578831137 }} ,
				{ 3334 ,  {-0.027042453271704528 }} ,
				{ 3335 ,  {-0.027156779648664475 }} ,
				{ 3340 ,  {-0.027124951940703447 }} ,
				{ 3430 ,  {-0.027028818879832734 }} ,
				{ 3431 ,  {-0.026930653131858814 }} ,
				{ 6683 ,  {-0.02692365698474765 }} ,
				{ 13364 ,  {-0.026989404869549545 }} ,
				{ 13365 ,  {-0.027111451537631122 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( ( ( Feature_52 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 148 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 298 ) : ( 299 ) ) ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_37 <= 14.500000000000002 ) ? ( ( ( Feature_61 <= 3.5000000000000004 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_14 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 832 ) : ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 3332 ) : ( 3333 ) ) ) : ( ( ( Feature_36 <= 15.500000000000002 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 834 ) : ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 3340 ) : ( ( ( Feature_54 <= 7.500000000000001 ) ? ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 13364 ) : ( 13365 ) ) ) : ( 6683 ) ) ) ) ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( 105 ) ) ) : ( ( ( Feature_61 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 1712 ) : ( 1713 ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 1714 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 3430 ) : ( 3431 ) ) ) ) ) ) ) : ( 429 ) ) ) : ( 215 ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 54 ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 110 ) : ( 111 ) ) ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_9
	

	namespace LGBM_Tree_8_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.0014273126525824829 }} ,
				{ 20 ,  {-0.011382592286992824 }} ,
				{ 26 ,  {-0.026988408284917772 }} ,
				{ 29 ,  {-0.011110669574493222 }} ,
				{ 31 ,  {0.06320790901931492 }} ,
				{ 36 ,  {0.005779262453768001 }} ,
				{ 46 ,  {-0.027449281301017717 }} ,
				{ 47 ,  {0.008822095282469612 }} ,
				{ 49 ,  {-0.02684785777475153 }} ,
				{ 50 ,  {-0.0271207976712025 }} ,
				{ 54 ,  {-0.02688065007701746 }} ,
				{ 55 ,  {-0.02679249318460632 }} ,
				{ 56 ,  {-0.027260205933374165 }} ,
				{ 60 ,  {-0.027558383959374252 }} ,
				{ 61 ,  {-0.026864473166920873 }} ,
				{ 74 ,  {-0.027106704999680875 }} ,
				{ 75 ,  {-0.02692594001413459 }} ,
				{ 76 ,  {-0.02692542725114615 }} ,
				{ 77 ,  {-0.026856798871741968 }} ,
				{ 78 ,  {-0.02713882872825702 }} ,
				{ 79 ,  {-0.02696593744686476 }} ,
				{ 84 ,  {-0.027096174002851726 }} ,
				{ 85 ,  {-0.026905593794169947 }} ,
				{ 86 ,  {-0.027556296205539888 }} ,
				{ 87 ,  {-0.027169693566363253 }} ,
				{ 88 ,  {-0.027696011090325625 }} ,
				{ 89 ,  {0.057050206300014145 }} ,
				{ 90 ,  {0.027641111400668213 }} ,
				{ 96 ,  {-0.026852885494779263 }} ,
				{ 97 ,  {-0.027044883623376294 }} ,
				{ 102 ,  {-0.02688616417931532 }} ,
				{ 114 ,  {-0.027034858043120953 }} ,
				{ 115 ,  {-0.026900296007095665 }} ,
				{ 182 ,  {0.04401397986266791 }} ,
				{ 207 ,  {-0.02693143880785296 }} ,
				{ 367 ,  {0.07706548269969327 }} ,
				{ 412 ,  {-0.026904094489163144 }} ,
				{ 413 ,  {-0.027101797799222005 }} ,
				{ 732 ,  {0.09076989789620649 }} ,
				{ 733 ,  {0.08205084820977242 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 8 ) : ( ( ( Feature_36 <= 7.500000000000001 ) ? ( ( ( Feature_58 <= 9.500000000000002 ) ? ( 36 ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 4.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 90 ) : ( ( ( Feature_42 <= 6.500000000000001 ) ? ( 182 ) : ( ( ( Feature_18 <= 14.500000000000002 ) ? ( ( ( Feature_12 <= 11.500000000000002 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 10.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_21 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_9
	

	namespace LGBM_Tree_9_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.02408143078021362 }} ,
				{ 10 ,  {-0.013491206828868278 }} ,
				{ 13 ,  {0.040962781192090986 }} ,
				{ 17 ,  {0.02367598955738102 }} ,
				{ 22 ,  {-0.01956018214195667 }} ,
				{ 24 ,  {0.012961846722145476 }} ,
				{ 29 ,  {0.033484403194407646 }} ,
				{ 46 ,  {0.04152815697463125 }} ,
				{ 50 ,  {-0.012560798822831877 }} ,
				{ 56 ,  {-0.027575605630340696 }} ,
				{ 57 ,  {-0.027084980174800273 }} ,
				{ 60 ,  {0.0032204311583407617 }} ,
				{ 64 ,  {-0.027574536414572273 }} ,
				{ 67 ,  {0.025342119798215396 }} ,
				{ 95 ,  {0.06785899761156082 }} ,
				{ 102 ,  {-0.027610062473417164 }} ,
				{ 122 ,  {-0.027272343886517687 }} ,
				{ 123 ,  {-0.027084994021881914 }} ,
				{ 126 ,  {-0.02725891893915628 }} ,
				{ 127 ,  {-0.028007371918005647 }} ,
				{ 130 ,  {-0.02709376730167394 }} ,
				{ 132 ,  {-0.027328590575858985 }} ,
				{ 133 ,  {-0.027077000576066896 }} ,
				{ 188 ,  {0.09686945353907649 }} ,
				{ 206 ,  {-0.027001249249117367 }} ,
				{ 207 ,  {-0.027161081465907552 }} ,
				{ 251 ,  {-0.027243654235048043 }} ,
				{ 262 ,  {-0.02740489715787492 }} ,
				{ 263 ,  {-0.0271801320238427 }} ,
				{ 378 ,  {0.08445814555922572 }} ,
				{ 379 ,  {0.07656993281658729 }} ,
				{ 497 ,  {-0.02735391624818545 }} ,
				{ 499 ,  {-0.027593565438272794 }} ,
				{ 500 ,  {-0.02721628091977962 }} ,
				{ 992 ,  {-0.02712871974310338 }} ,
				{ 993 ,  {-0.02726394392417324 }} ,
				{ 996 ,  {-0.027406961908751182 }} ,
				{ 997 ,  {-0.02715812097108601 }} ,
				{ 1002 ,  {-0.026952040279728834 }} ,
				{ 1003 ,  {-0.027061731252849244 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 5.500000000000001 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_52 <= 3.5000000000000004 ) ? ( 64 ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 130 ) : ( ( ( Feature_36 <= 8.500000000000002 ) ? ( 262 ) : ( 263 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_10 <= 3.5000000000000004 ) ? ( 46 ) : ( ( ( Feature_36 <= 5.500000000000001 ) ? ( ( ( Feature_10 <= 11.500000000000002 ) ? ( 188 ) : ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 378 ) : ( 379 ) ) ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 24 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( 50 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 102 ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 206 ) : ( 207 ) ) ) ) ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 992 ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( 996 ) : ( 997 ) ) ) : ( 499 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 500 ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_9
	

	namespace LGBM_Tree_0_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.010526642327325387 }} ,
				{ 10 ,  {0.024406919939338845 }} ,
				{ 12 ,  {0.023166695903031588 }} ,
				{ 16 ,  {-0.029217320740302928 }} ,
				{ 17 ,  {-0.026963735519545135 }} ,
				{ 23 ,  {0.06509350440156095 }} ,
				{ 26 ,  {-0.026948634071361333 }} ,
				{ 27 ,  {-0.02732859543635144 }} ,
				{ 45 ,  {0.07874319746338712 }} ,
				{ 58 ,  {-0.02683946979723728 }} ,
				{ 60 ,  {-0.02673823746007996 }} ,
				{ 63 ,  {-0.027002187102384646 }} ,
				{ 89 ,  {0.07570357137584204 }} ,
				{ 114 ,  {-0.02694413091396862 }} ,
				{ 123 ,  {-0.026807965649686308 }} ,
				{ 124 ,  {-0.026817792434592702 }} ,
				{ 125 ,  {-0.02693188155239197 }} ,
				{ 176 ,  {0.07408157652893724 }} ,
				{ 224 ,  {-0.026918331736695347 }} ,
				{ 225 ,  {-0.026762593713441137 }} ,
				{ 230 ,  {-0.027234876929687825 }} ,
				{ 236 ,  {-0.026831033399793217 }} ,
				{ 237 ,  {-0.026982213599467786 }} ,
				{ 239 ,  {-0.027097910874847017 }} ,
				{ 244 ,  {-0.026906894929389844 }} ,
				{ 245 ,  {-0.02682041456169545 }} ,
				{ 354 ,  {0.07358798797109777 }} ,
				{ 355 ,  {0.07228942803437724 }} ,
				{ 452 ,  {-0.02681922356731388 }} ,
				{ 453 ,  {-0.0270142379170304 }} ,
				{ 454 ,  {-0.026885114447768595 }} ,
				{ 462 ,  {-0.027111705353453603 }} ,
				{ 463 ,  {-0.026956113538289042 }} ,
				{ 476 ,  {-0.027012654214665373 }} ,
				{ 477 ,  {-0.026874163231395378 }} ,
				{ 1821 ,  {-0.027212065460764413 }} ,
				{ 1822 ,  {-0.027024940752162798 }} ,
				{ 1823 ,  {-0.026860203184087317 }} ,
				{ 3640 ,  {-0.027080531894171686 }} ,
				{ 3641 ,  {-0.026923319090680572 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 176 ) : ( ( ( Feature_46 <= 6.500000000000001 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 12 ) : ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 454 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( Feature_18 <= 5.500000000000001 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 114 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 230 ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( ( ( Feature_51 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_10
	

	namespace LGBM_Tree_1_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03553989196058311 }} ,
				{ 10 ,  {-0.013410042688771799 }} ,
				{ 13 ,  {0.07737799271484411 }} ,
				{ 14 ,  {-0.01936475433837291 }} ,
				{ 25 ,  {-0.0015312571650662602 }} ,
				{ 31 ,  {0.026856177342655163 }} ,
				{ 49 ,  {-0.013755062953224926 }} ,
				{ 61 ,  {0.050885128754246084 }} ,
				{ 92 ,  {-0.027010355097162354 }} ,
				{ 93 ,  {-0.027168684403366068 }} ,
				{ 95 ,  {-0.0268990832186043 }} ,
				{ 121 ,  {0.09006376376563757 }} ,
				{ 176 ,  {-0.02695738824814535 }} ,
				{ 178 ,  {-0.027119811671182433 }} ,
				{ 180 ,  {-0.02712348034195739 }} ,
				{ 181 ,  {-0.026935953140319432 }} ,
				{ 188 ,  {-0.026980811259898957 }} ,
				{ 189 ,  {-0.027069072356182323 }} ,
				{ 193 ,  {-0.027344529358419536 }} ,
				{ 194 ,  {-0.02862010514078065 }} ,
				{ 195 ,  {-0.027132914507137763 }} ,
				{ 241 ,  {0.06674624679190598 }} ,
				{ 354 ,  {-0.02705176809813958 }} ,
				{ 358 ,  {-0.027400279326519807 }} ,
				{ 359 ,  {-0.027234015582021112 }} ,
				{ 365 ,  {-0.027097328306752246 }} ,
				{ 367 ,  {-0.02702627226611208 }} ,
				{ 385 ,  {-0.027272604990862717 }} ,
				{ 480 ,  {0.07485633828269332 }} ,
				{ 481 ,  {0.08366810396816989 }} ,
				{ 710 ,  {-0.027103632740639167 }} ,
				{ 711 ,  {-0.0273113621383881 }} ,
				{ 728 ,  {-0.02695602786750045 }} ,
				{ 729 ,  {-0.02705497539024836 }} ,
				{ 733 ,  {-0.02727330071740743 }} ,
				{ 768 ,  {-0.027057906961493957 }} ,
				{ 769 ,  {-0.02694212387658933 }} ,
				{ 1464 ,  {-0.027230396569242834 }} ,
				{ 2930 ,  {-0.02702080273235191 }} ,
				{ 2931 ,  {-0.027145950309842678 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_3 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 176 ) : ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 354 ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 710 ) : ( 711 ) ) ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 178 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 728 ) : ( 729 ) ) ) : ( 365 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 1464 ) : ( ( ( Feature_19 <= 5.500000000000001 ) ? ( 2930 ) : ( 2931 ) ) ) ) ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 12.500000000000002 ) ? ( ( ( Feature_63 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_54 <= 14.500000000000002 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 768 ) : ( 769 ) ) ) : ( 385 ) ) ) : ( 193 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_37 <= 8.500000000000002 ) ? ( ( ( Feature_50 <= 7.500000000000001 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( 480 ) : ( 481 ) ) ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_10
	

	namespace LGBM_Tree_2_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.06011825836870587 }} ,
				{ 13 ,  {-0.02780906510968062 }} ,
				{ 14 ,  {0.01175676976873267 }} ,
				{ 17 ,  {0.0009404924512403955 }} ,
				{ 21 ,  {0.012693794120426495 }} ,
				{ 24 ,  {0.00030460795168271807 }} ,
				{ 31 ,  {-0.02753587392833994 }} ,
				{ 32 ,  {-0.02777756184772119 }} ,
				{ 40 ,  {-0.027286758638644618 }} ,
				{ 41 ,  {-0.02707888125451893 }} ,
				{ 46 ,  {-0.027125367591542965 }} ,
				{ 51 ,  {0.020442010207033585 }} ,
				{ 61 ,  {-0.027019706072202596 }} ,
				{ 66 ,  {-0.027162876736683203 }} ,
				{ 88 ,  {-0.026979204072048513 }} ,
				{ 90 ,  {-0.027027471394184162 }} ,
				{ 95 ,  {-0.026958266767330926 }} ,
				{ 101 ,  {0.08369933961658496 }} ,
				{ 120 ,  {-0.027009529511027194 }} ,
				{ 121 ,  {-0.02725555484698062 }} ,
				{ 135 ,  {-0.026965000291107512 }} ,
				{ 188 ,  {-0.027004209459407548 }} ,
				{ 189 ,  {-0.02713695067033302 }} ,
				{ 200 ,  {0.0639181625670253 }} ,
				{ 268 ,  {-0.02715848419173705 }} ,
				{ 269 ,  {-0.027017834716342327 }} ,
				{ 356 ,  {-0.027234848282603186 }} ,
				{ 357 ,  {-0.026951202145119108 }} ,
				{ 359 ,  {-0.027052404283567325 }} ,
				{ 365 ,  {-0.027276247106695985 }} ,
				{ 366 ,  {-0.027225241696030845 }} ,
				{ 367 ,  {-0.027369193611582507 }} ,
				{ 402 ,  {0.07210369885752094 }} ,
				{ 403 ,  {0.07677553052112104 }} ,
				{ 716 ,  {-0.027027934124032926 }} ,
				{ 728 ,  {-0.027035375263060782 }} ,
				{ 1434 ,  {-0.02716018829903301 }} ,
				{ 1435 ,  {-0.02736281984468991 }} ,
				{ 1458 ,  {-0.027088283399260372 }} ,
				{ 1459 ,  {-0.027262013584633028 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 32 ) : ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 66 ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_34 <= 6.500000000000001 ) ? ( 268 ) : ( 269 ) ) ) : ( 135 ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 10.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 88 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 356 ) : ( 357 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 716 ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 1434 ) : ( 1435 ) ) ) ) ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 90 ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 728 ) : ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 1458 ) : ( 1459 ) ) ) ) ) : ( 365 ) ) ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 2.5000000000000004 ) ? ( 46 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 5.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 24 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_52 <= 15.500000000000002 ) ? ( ( ( Feature_59 <= 13.500000000000002 ) ? ( 200 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( 402 ) : ( 403 ) ) ) ) ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_10
	

	namespace LGBM_Tree_3_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.019583754530932897 }} ,
				{ 12 ,  {-0.027394530321478844 }} ,
				{ 13 ,  {0.036012633888352255 }} ,
				{ 16 ,  {0.013457440649824763 }} ,
				{ 20 ,  {0.050484399093338295 }} ,
				{ 21 ,  {-0.02785294360040676 }} ,
				{ 22 ,  {0.016130425760934746 }} ,
				{ 34 ,  {0.05425614529392711 }} ,
				{ 47 ,  {-0.027608599078853765 }} ,
				{ 57 ,  {-0.026900580813025328 }} ,
				{ 60 ,  {-0.010348356602637825 }} ,
				{ 62 ,  {0.04245505265522053 }} ,
				{ 63 ,  {-0.027618985235152518 }} ,
				{ 71 ,  {0.08185179079807627 }} ,
				{ 93 ,  {-0.026995314295757907 }} ,
				{ 112 ,  {-0.026966112626721578 }} ,
				{ 113 ,  {-0.02711696542987373 }} ,
				{ 118 ,  {-0.026947209446322562 }} ,
				{ 123 ,  {-0.027271539072282205 }} ,
				{ 140 ,  {0.07879581007099047 }} ,
				{ 233 ,  {-0.026938324619272903 }} ,
				{ 238 ,  {-0.027208756194477265 }} ,
				{ 244 ,  {-0.027161554360020535 }} ,
				{ 282 ,  {0.06951703104889083 }} ,
				{ 283 ,  {0.0747147500278178 }} ,
				{ 368 ,  {-0.027149320587060002 }} ,
				{ 369 ,  {-0.02694082145296378 }} ,
				{ 370 ,  {-0.027151534019704205 }} ,
				{ 371 ,  {-0.0273380448770296 }} ,
				{ 465 ,  {-0.027162337905191198 }} ,
				{ 468 ,  {-0.027336585186095594 }} ,
				{ 469 ,  {-0.02714968490952088 }} ,
				{ 470 ,  {-0.02716209147870313 }} ,
				{ 471 ,  {-0.02701451613837858 }} ,
				{ 478 ,  {-0.02696367481120949 }} ,
				{ 479 ,  {-0.027100161249000245 }} ,
				{ 490 ,  {-0.027112604021082842 }} ,
				{ 491 ,  {-0.026925045500495667 }} ,
				{ 928 ,  {-0.027124275301856515 }} ,
				{ 929 ,  {-0.026963063207618293 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_29 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 140 ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_10 <= 7.500000000000001 ) ? ( 12 ) : ( 13 ) ) ) : ( ( ( Feature_54 <= 6.500000000000001 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_19 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 928 ) : ( 929 ) ) ) : ( 465 ) ) ) : ( 233 ) ) ) : ( ( ( Feature_53 <= 12.500000000000002 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 468 ) : ( 469 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 470 ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 118 ) : ( ( ( Feature_12 <= 11.500000000000002 ) ? ( 238 ) : ( ( ( Feature_37 <= 10.500000000000002 ) ? ( 478 ) : ( 479 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 6.500000000000001 ) ? ( 244 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_29 <= 10.500000000000002 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_10
	

	namespace LGBM_Tree_4_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.031088257769667383 }} ,
				{ 12 ,  {0.07438519862751433 }} ,
				{ 16 ,  {-0.01107509308851397 }} ,
				{ 18 ,  {-0.027644934325413248 }} ,
				{ 20 ,  {-0.007298409674144474 }} ,
				{ 22 ,  {0.04015688489113709 }} ,
				{ 23 ,  {-0.02763424710559037 }} ,
				{ 26 ,  {0.07216057180690302 }} ,
				{ 27 ,  {0.07061404797895539 }} ,
				{ 35 ,  {-0.02737874435148177 }} ,
				{ 39 ,  {-0.02790713308495354 }} ,
				{ 43 ,  {-0.017783593609246424 }} ,
				{ 69 ,  {-0.02700048330605169 }} ,
				{ 76 ,  {0.02821958686474609 }} ,
				{ 136 ,  {-0.027250003811448705 }} ,
				{ 137 ,  {-0.02705833523533396 }} ,
				{ 154 ,  {0.06965111970908071 }} ,
				{ 155 ,  {0.08464828080017696 }} ,
				{ 337 ,  {-0.0270213622734817 }} ,
				{ 341 ,  {-0.02701183094854199 }} ,
				{ 342 ,  {-0.027083112071379596 }} ,
				{ 343 ,  {-0.027214585642731045 }} ,
				{ 676 ,  {-0.027131161601088746 }} ,
				{ 677 ,  {-0.026988545620808435 }} ,
				{ 680 ,  {-0.0270353079273231 }} ,
				{ 681 ,  {-0.02719271811005977 }} ,
				{ 1345 ,  {-0.027079290480053808 }} ,
				{ 1346 ,  {-0.02717593866172556 }} ,
				{ 1347 ,  {-0.027017481243189635 }} ,
				{ 1357 ,  {-0.027042251703227545 }} ,
				{ 1358 ,  {-0.027300169759397516 }} ,
				{ 2689 ,  {-0.02734593918194843 }} ,
				{ 2713 ,  {-0.027072768258611997 }} ,
				{ 2719 ,  {-0.02722966877193584 }} ,
				{ 5376 ,  {-0.02728357420969803 }} ,
				{ 5377 ,  {-0.02712192004610748 }} ,
				{ 5424 ,  {-0.027112447994783035 }} ,
				{ 5425 ,  {-0.027290028502793492 }} ,
				{ 5436 ,  {-0.02703266159680818 }} ,
				{ 5437 ,  {-0.027158859238339075 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_3 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 18 ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_6 <= 3.5000000000000004 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 5376 ) : ( 5377 ) ) ) : ( 2689 ) ) ) : ( 1345 ) ) ) : ( ( ( Feature_20 <= 9.500000000000002 ) ? ( 1346 ) : ( 1347 ) ) ) ) ) : ( 337 ) ) ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 676 ) : ( 677 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_37 <= 9.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 5424 ) : ( 5425 ) ) ) : ( 2713 ) ) ) : ( 1357 ) ) ) : ( ( ( Feature_12 <= 7.500000000000001 ) ? ( 1358 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 5436 ) : ( 5437 ) ) ) : ( 2719 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( ( ( Feature_28 <= 2.5000000000000004 ) ? ( 680 ) : ( 681 ) ) ) : ( 341 ) ) ) : ( ( ( Feature_21 <= 13.500000000000002 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 12 ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_10
	

	namespace LGBM_Tree_5_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {-0.012000781825646628 }} ,
				{ 15 ,  {0.03697807881928596 }} ,
				{ 16 ,  {0.0325489542861361 }} ,
				{ 17 ,  {-0.02747404712592294 }} ,
				{ 19 ,  {-0.02730212562322856 }} ,
				{ 23 ,  {0.056222833052301 }} ,
				{ 24 ,  {0.0030715502074730814 }} ,
				{ 28 ,  {-0.02738080094682372 }} ,
				{ 36 ,  {-0.02712185095775258 }} ,
				{ 45 ,  {0.06474087161932184 }} ,
				{ 50 ,  {-0.026927293963024186 }} ,
				{ 55 ,  {-0.027231477416331747 }} ,
				{ 58 ,  {-0.026953632560954167 }} ,
				{ 59 ,  {-0.02706599597843358 }} ,
				{ 74 ,  {-0.026938202764435044 }} ,
				{ 75 ,  {-0.027048591339301428 }} ,
				{ 89 ,  {0.08690397474509327 }} ,
				{ 102 ,  {-0.027208631869956958 }} ,
				{ 103 ,  {-0.02699797735992406 }} ,
				{ 106 ,  {-0.02685524959161553 }} ,
				{ 108 ,  {-0.027160697297130682 }} ,
				{ 176 ,  {0.0776858895229382 }} ,
				{ 208 ,  {-0.026995769205089382 }} ,
				{ 209 ,  {-0.02727541914697636 }} ,
				{ 218 ,  {-0.026964202141620344 }} ,
				{ 219 ,  {-0.027058673322034505 }} ,
				{ 354 ,  {0.0740735275369928 }} ,
				{ 355 ,  {0.07196851144596753 }} ,
				{ 421 ,  {-0.027140676583394165 }} ,
				{ 422 ,  {-0.02687524341528006 }} ,
				{ 423 ,  {-0.026976982397463985 }} ,
				{ 429 ,  {-0.02682287272801835 }} ,
				{ 430 ,  {-0.026950407181614695 }} ,
				{ 431 ,  {-0.027091512525322926 }} ,
				{ 856 ,  {-0.027055072600045284 }} ,
				{ 857 ,  {-0.026918679683945547 }} ,
				{ 1680 ,  {-0.026946276570578232 }} ,
				{ 1681 ,  {-0.02707796042816542 }} ,
				{ 1682 ,  {-0.02702005448772067 }} ,
				{ 1683 ,  {-0.02714541174391299 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 11.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 176 ) : ( ( ( Feature_58 <= 12.500000000000002 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 50 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( ( ( Feature_19 <= 5.500000000000001 ) ? ( 1680 ) : ( 1681 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 1682 ) : ( 1683 ) ) ) ) ) : ( 421 ) ) ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 2.5000000000000004 ) ? ( 106 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_61 <= 12.500000000000002 ) ? ( ( ( Feature_19 <= 7.500000000000001 ) ? ( 856 ) : ( 857 ) ) ) : ( 429 ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 3.5000000000000004 ) ? ( 108 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_10
	

	namespace LGBM_Tree_6_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.008512398941545587 }} ,
				{ 8 ,  {-0.010038798694312474 }} ,
				{ 10 ,  {-0.02729223841805564 }} ,
				{ 15 ,  {-0.010685195647045235 }} ,
				{ 19 ,  {-0.026871459113458902 }} ,
				{ 23 ,  {0.02069107370085739 }} ,
				{ 37 ,  {-0.0269314299209258 }} ,
				{ 44 ,  {0.056600864653499554 }} ,
				{ 56 ,  {-0.01036020437098769 }} ,
				{ 72 ,  {-0.02735296271519326 }} ,
				{ 73 ,  {-0.02714823402414231 }} ,
				{ 90 ,  {0.08240156953338751 }} ,
				{ 114 ,  {-0.027221274602797937 }} ,
				{ 115 ,  {-0.027079988119120553 }} ,
				{ 119 ,  {-0.026842810546329574 }} ,
				{ 182 ,  {0.07576900167917286 }} ,
				{ 236 ,  {-0.02689674084855443 }} ,
				{ 366 ,  {0.07435486524001923 }} ,
				{ 464 ,  {-0.026867985065512984 }} ,
				{ 465 ,  {-0.026987978095245158 }} ,
				{ 470 ,  {-0.027180058175213292 }} ,
				{ 474 ,  {-0.026932108142011163 }} ,
				{ 734 ,  {0.07289165413062695 }} ,
				{ 735 ,  {0.07136624436155174 }} ,
				{ 932 ,  {-0.027000122068875216 }} ,
				{ 933 ,  {-0.02724339731897297 }} ,
				{ 936 ,  {-0.026921913149107343 }} ,
				{ 938 ,  {-0.027053822182544002 }} ,
				{ 939 ,  {-0.027255674859283454 }} ,
				{ 942 ,  {-0.027041100671738167 }} ,
				{ 943 ,  {-0.02693051246313945 }} ,
				{ 950 ,  {-0.02693406699527977 }} ,
				{ 951 ,  {-0.02713890355018131 }} ,
				{ 1868 ,  {-0.02689869228067785 }} ,
				{ 1870 ,  {-0.026933970883681907 }} ,
				{ 1871 ,  {-0.027123178562129664 }} ,
				{ 1874 ,  {-0.027174073224632885 }} ,
				{ 1875 ,  {-0.027031193890071394 }} ,
				{ 3738 ,  {-0.026895603070383335 }} ,
				{ 3739 ,  {-0.02708355139506835 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 44 ) : ( ( ( Feature_54 <= 7.500000000000001 ) ? ( 90 ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 182 ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 366 ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( 734 ) : ( 735 ) ) ) ) ) ) ) ) ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 56 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_11 <= 11.500000000000002 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 1868 ) : ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 3738 ) : ( 3739 ) ) ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 936 ) : ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_60 <= 9.500000000000002 ) ? ( 470 ) : ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 236 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( 474 ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 950 ) : ( 951 ) ) ) ) ) ) ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_10
	

	namespace LGBM_Tree_7_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.017086157212632857 }} ,
				{ 8 ,  {-0.0041227641154943 }} ,
				{ 11 ,  {0.02542608224992167 }} ,
				{ 19 ,  {0.00047122934432589395 }} ,
				{ 20 ,  {-0.027126743667192612 }} ,
				{ 21 ,  {-0.02800045515840696 }} ,
				{ 25 ,  {0.028088830814066924 }} ,
				{ 27 ,  {-0.015360889608919476 }} ,
				{ 48 ,  {-0.027373765091023256 }} ,
				{ 49 ,  {-0.027008302828822345 }} ,
				{ 72 ,  {0.07742391834155608 }} ,
				{ 73 ,  {0.06263392976390186 }} ,
				{ 74 ,  {0.08659383489934983 }} ,
				{ 107 ,  {-0.027019092310194615 }} ,
				{ 150 ,  {0.07789430773702864 }} ,
				{ 151 ,  {0.07441166667115853 }} ,
				{ 210 ,  {-0.026847090076096338 }} ,
				{ 418 ,  {-0.027011885252805568 }} ,
				{ 419 ,  {-0.02687858683642857 }} ,
				{ 422 ,  {-0.02689949029959121 }} ,
				{ 423 ,  {-0.02712277129177572 }} ,
				{ 424 ,  {-0.0268684963630794 }} ,
				{ 427 ,  {-0.026753519673128015 }} ,
				{ 834 ,  {-0.027276726180399797 }} ,
				{ 851 ,  {-0.026840375911451504 }} ,
				{ 852 ,  {-0.026891601815636247 }} ,
				{ 853 ,  {-0.026846962059545277 }} ,
				{ 1664 ,  {-0.026872499909971426 }} ,
				{ 1666 ,  {-0.02686589695472337 }} ,
				{ 1670 ,  {-0.02685292714209043 }} ,
				{ 1700 ,  {-0.02694634174462864 }} ,
				{ 1701 ,  {-0.027118664717701746 }} ,
				{ 3334 ,  {-0.027090423230763813 }} ,
				{ 3335 ,  {-0.026904574277232442 }} ,
				{ 3342 ,  {-0.027147260556268857 }} ,
				{ 3343 ,  {-0.027029466104457108 }} ,
				{ 6660 ,  {-0.02710190189400377 }} ,
				{ 6661 ,  {-0.026931251323532468 }} ,
				{ 6662 ,  {-0.027240582289644377 }} ,
				{ 6663 ,  {-0.02702474345041383 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( 72 ) : ( 73 ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 74 ) : ( ( ( Feature_50 <= 1.5000000000000002 ) ? ( 150 ) : ( 151 ) ) ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_14 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_38 <= 4.500000000000001 ) ? ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 48 ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_6 <= 5.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 1664 ) : ( ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_3 <= 14.500000000000002 ) ? ( 6660 ) : ( 6661 ) ) ) : ( ( ( Feature_44 <= 8.500000000000002 ) ? ( 6662 ) : ( 6663 ) ) ) ) ) ) ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 1666 ) : ( ( ( Feature_13 <= 13.500000000000002 ) ? ( 3334 ) : ( 3335 ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 834 ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 1670 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 3342 ) : ( 3343 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 210 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 8.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 424 ) : ( ( ( Feature_62 <= 4.500000000000001 ) ? ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 1700 ) : ( 1701 ) ) ) : ( 851 ) ) ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 852 ) : ( 853 ) ) ) : ( 427 ) ) ) ) ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_10
	

	namespace LGBM_Tree_8_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.027944846145144166 }} ,
				{ 18 ,  {-0.007995047807115149 }} ,
				{ 21 ,  {-0.011129404818086941 }} ,
				{ 26 ,  {-0.02692907037182444 }} ,
				{ 27 ,  {-0.026801393621108845 }} ,
				{ 28 ,  {0.03765961442026516 }} ,
				{ 31 ,  {-0.027419878647462995 }} ,
				{ 32 ,  {-0.027058182474156457 }} ,
				{ 33 ,  {-0.026818190091615502 }} ,
				{ 41 ,  {-0.02747380748488923 }} ,
				{ 46 ,  {-0.02713985067250988 }} ,
				{ 47 ,  {0.008937242183477696 }} ,
				{ 49 ,  {-0.02677795725473547 }} ,
				{ 50 ,  {-0.027067217334149546 }} ,
				{ 58 ,  {-0.027489782241685086 }} ,
				{ 59 ,  {-0.02707084522131832 }} ,
				{ 60 ,  {-0.026856513627532847 }} ,
				{ 61 ,  {-0.02703340243111592 }} ,
				{ 76 ,  {-0.026805772303013127 }} ,
				{ 78 ,  {-0.026899095370336825 }} ,
				{ 79 ,  {-0.027101406769537314 }} ,
				{ 80 ,  {-0.02712896107918718 }} ,
				{ 88 ,  {-0.027631519231030917 }} ,
				{ 89 ,  {0.05289519743513053 }} ,
				{ 90 ,  {0.027655482114175896 }} ,
				{ 96 ,  {-0.02677874891440677 }} ,
				{ 97 ,  {-0.026996102313500414 }} ,
				{ 102 ,  {-0.026821425667019994 }} ,
				{ 154 ,  {-0.026823003356740496 }} ,
				{ 155 ,  {-0.026952303157020647 }} ,
				{ 162 ,  {-0.026979424182084596 }} ,
				{ 163 ,  {-0.026847794523588375 }} ,
				{ 183 ,  {0.05639884126822068 }} ,
				{ 207 ,  {-0.026869769717349654 }} ,
				{ 364 ,  {0.06809129258029627 }} ,
				{ 412 ,  {-0.02683703780179448 }} ,
				{ 413 ,  {-0.027051113403283474 }} ,
				{ 730 ,  {0.08492363685375512 }} ,
				{ 1462 ,  {0.07887830720418615 }} ,
				{ 1463 ,  {0.07521703623828406 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 76 ) : ( ( ( Feature_10 <= 12.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_25 <= 2.5000000000000004 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( 80 ) : ( ( ( Feature_37 <= 5.500000000000001 ) ? ( 162 ) : ( 163 ) ) ) ) ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 90 ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 364 ) : ( ( ( Feature_10 <= 9.500000000000002 ) ? ( 730 ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 1462 ) : ( 1463 ) ) ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_21 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 1.0000000180025095e-35 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_10
	

	namespace LGBM_Tree_9_10 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.032682124340866876 }} ,
				{ 10 ,  {-0.01954873043934821 }} ,
				{ 13 ,  {0.03856741382175501 }} ,
				{ 19 ,  {0.01655817355341211 }} ,
				{ 22 ,  {-0.019389302916729592 }} ,
				{ 24 ,  {0.00441422449676647 }} ,
				{ 28 ,  {0.03286848909244169 }} ,
				{ 47 ,  {0.03232586783129445 }} ,
				{ 50 ,  {-0.027285998291505322 }} ,
				{ 51 ,  {-0.027024139723931098 }} ,
				{ 58 ,  {-0.027678372686498587 }} ,
				{ 61 ,  {0.003412394552676813 }} ,
				{ 72 ,  {-0.027024831902956205 }} ,
				{ 74 ,  {-0.027356253008108608 }} ,
				{ 75 ,  {0.026099841158153093 }} ,
				{ 92 ,  {0.0555037309567907 }} ,
				{ 118 ,  {-0.027265406432385248 }} ,
				{ 119 ,  {-0.027020360906070535 }} ,
				{ 120 ,  {-0.027181959585857254 }} ,
				{ 121 ,  {-0.02702139816059006 }} ,
				{ 126 ,  {-0.027940472685149976 }} ,
				{ 127 ,  {-0.02720219890963989 }} ,
				{ 146 ,  {-0.027408623546805785 }} ,
				{ 186 ,  {0.09171500900394741 }} ,
				{ 251 ,  {-0.026944919339436497 }} ,
				{ 294 ,  {-0.02706370863224021 }} ,
				{ 295 ,  {-0.027229395351096343 }} ,
				{ 374 ,  {0.06840039150461528 }} ,
				{ 375 ,  {0.07907443265092295 }} ,
				{ 497 ,  {-0.027295817291144976 }} ,
				{ 498 ,  {-0.02717713784910384 }} ,
				{ 499 ,  {-0.02754243195911621 }} ,
				{ 501 ,  {-0.027285907994799297 }} ,
				{ 1000 ,  {-0.02697473884693289 }} ,
				{ 1984 ,  {-0.027249062799273794 }} ,
				{ 1985 ,  {-0.02705707151300038 }} ,
				{ 1986 ,  {-0.026934403345938787 }} ,
				{ 1987 ,  {-0.02708331249050824 }} ,
				{ 2002 ,  {-0.027235769238060717 }} ,
				{ 2003 ,  {-0.027018426598441888 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_45 <= 6.500000000000001 ) ? ( 8 ) : ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_61 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 72 ) : ( ( ( Feature_36 <= 4.500000000000001 ) ? ( 146 ) : ( ( ( Feature_54 <= 2.5000000000000004 ) ? ( 294 ) : ( 295 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( ( ( Feature_11 <= 4.500000000000001 ) ? ( 92 ) : ( ( ( Feature_59 <= 10.500000000000002 ) ? ( 186 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 374 ) : ( 375 ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_34 <= 5.500000000000001 ) ? ( 24 ) : ( ( ( Feature_50 <= 6.500000000000001 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 28 ) : ( ( ( Feature_29 <= 5.500000000000001 ) ? ( 58 ) : ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 1984 ) : ( 1985 ) ) ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 1986 ) : ( 1987 ) ) ) ) ) : ( 497 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( 1000 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( 2002 ) : ( 2003 ) ) ) ) ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_10
	

	namespace LGBM_Tree_0_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.028605129016308847 }} ,
				{ 11 ,  {-0.027239327985259583 }} ,
				{ 13 ,  {0.02255750146615515 }} ,
				{ 16 ,  {0.06131510562467635 }} ,
				{ 20 ,  {-0.02698359719784404 }} ,
				{ 21 ,  {-0.026800238604586926 }} ,
				{ 24 ,  {-0.026887604554010614 }} ,
				{ 25 ,  {-0.027332043495196613 }} ,
				{ 35 ,  {0.07478888248699243 }} ,
				{ 58 ,  {-0.026771437565584828 }} ,
				{ 60 ,  {-0.026666049055120367 }} ,
				{ 63 ,  {-0.026974155166192993 }} ,
				{ 68 ,  {0.06658418431750855 }} ,
				{ 114 ,  {-0.02688164236387059 }} ,
				{ 123 ,  {-0.026737675744559788 }} ,
				{ 124 ,  {-0.02691633023675862 }} ,
				{ 125 ,  {-0.026785187620665524 }} ,
				{ 138 ,  {0.06915444557039627 }} ,
				{ 139 ,  {0.07168338620617147 }} ,
				{ 224 ,  {-0.026849277016513174 }} ,
				{ 225 ,  {-0.026692204724983726 }} ,
				{ 230 ,  {-0.02719826888882312 }} ,
				{ 236 ,  {-0.02676112774974673 }} ,
				{ 237 ,  {-0.026923404543567828 }} ,
				{ 239 ,  {-0.027044233931472678 }} ,
				{ 245 ,  {-0.026749928788943157 }} ,
				{ 452 ,  {-0.02674788483891632 }} ,
				{ 453 ,  {-0.026957052368746667 }} ,
				{ 454 ,  {-0.026822241463739706 }} ,
				{ 462 ,  {-0.02706503112507909 }} ,
				{ 463 ,  {-0.026895325054032544 }} ,
				{ 476 ,  {-0.026958798104125933 }} ,
				{ 477 ,  {-0.02680786127279888 }} ,
				{ 488 ,  {-0.02675331560901742 }} ,
				{ 489 ,  {-0.02687175429364054 }} ,
				{ 1821 ,  {-0.02716758737528705 }} ,
				{ 1822 ,  {-0.02696935841832597 }} ,
				{ 1823 ,  {-0.026798148999875877 }} ,
				{ 3640 ,  {-0.027031375898690087 }} ,
				{ 3641 ,  {-0.026860709612365766 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_44 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( 16 ) : ( ( ( Feature_22 <= 5.500000000000001 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 68 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 454 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( Feature_18 <= 5.500000000000001 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 114 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 230 ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( ( ( Feature_51 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_4 <= 10.500000000000002 ) ? ( 488 ) : ( 489 ) ) ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_11
	

	namespace LGBM_Tree_1_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.033821019443647786 }} ,
				{ 10 ,  {-0.013127533189628346 }} ,
				{ 13 ,  {0.06846238560843468 }} ,
				{ 14 ,  {-0.01915771695543352 }} ,
				{ 25 ,  {-0.0013709439283892486 }} ,
				{ 31 ,  {0.0257896207793415 }} ,
				{ 47 ,  {-0.02704084574676463 }} ,
				{ 61 ,  {0.04787709246775128 }} ,
				{ 93 ,  {-0.027014565112529604 }} ,
				{ 97 ,  {-0.02728852852859987 }} ,
				{ 98 ,  {-0.02852378046298558 }} ,
				{ 99 ,  {-0.027155198184821552 }} ,
				{ 176 ,  {-0.026884909418022174 }} ,
				{ 178 ,  {-0.027048509189669806 }} ,
				{ 180 ,  {-0.02709023071910336 }} ,
				{ 185 ,  {-0.026806972973009286 }} ,
				{ 193 ,  {-0.027186274747822647 }} ,
				{ 240 ,  {0.08224179323761431 }} ,
				{ 241 ,  {0.07500335381281992 }} ,
				{ 242 ,  {0.07371360275436803 }} ,
				{ 243 ,  {0.06168910773220898 }} ,
				{ 355 ,  {-0.02722707810206551 }} ,
				{ 358 ,  {-0.02734510096250913 }} ,
				{ 359 ,  {-0.02718256547186086 }} ,
				{ 362 ,  {-0.026811022795886003 }} ,
				{ 363 ,  {-0.026903470289459705 }} ,
				{ 366 ,  {-0.02724601713714664 }} ,
				{ 367 ,  {-0.02696488077476902 }} ,
				{ 368 ,  {-0.02692270049527737 }} ,
				{ 369 ,  {-0.02684554344117593 }} ,
				{ 384 ,  {-0.02701401123703754 }} ,
				{ 385 ,  {-0.026873090985072158 }} ,
				{ 708 ,  {-0.027103317601810107 }} ,
				{ 709 ,  {-0.02696769192103158 }} ,
				{ 728 ,  {-0.02688711720937688 }} ,
				{ 729 ,  {-0.026985987741904655 }} ,
				{ 731 ,  {-0.02693617048784788 }} ,
				{ 1461 ,  {-0.026977767513081133 }} ,
				{ 2920 ,  {-0.027022646249039845 }} ,
				{ 2921 ,  {-0.027208565641566092 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_59 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 176 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 178 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 180 ) : ( ( ( Feature_45 <= 6.500000000000001 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_37 <= 13.500000000000002 ) ? ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_61 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 368 ) : ( 369 ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 12.500000000000002 ) ? ( ( ( Feature_63 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_5 <= 1.0000000180025095e-35 ) ? ( 384 ) : ( 385 ) ) ) : ( 193 ) ) ) : ( 97 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 14 ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_26 <= 14.500000000000002 ) ? ( 240 ) : ( 241 ) ) ) : ( ( ( Feature_10 <= 4.500000000000001 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_11
	

	namespace LGBM_Tree_2_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.05635221575548691 }} ,
				{ 13 ,  {-0.027709580387635147 }} ,
				{ 14 ,  {0.011497071165700194 }} ,
				{ 16 ,  {0.0016540873263031634 }} ,
				{ 20 ,  {0.012922560057203518 }} ,
				{ 21 ,  {-0.027294399278131595 }} ,
				{ 24 ,  {0.00033659137074730624 }} ,
				{ 31 ,  {-0.027462781115913017 }} ,
				{ 34 ,  {-0.027154874209490466 }} ,
				{ 46 ,  {-0.027064073490270252 }} ,
				{ 51 ,  {0.01604475520481247 }} ,
				{ 61 ,  {-0.02694221621571273 }} ,
				{ 88 ,  {-0.027188178202773708 }} ,
				{ 91 ,  {-0.0272608321707013 }} ,
				{ 95 ,  {-0.026880365392014896 }} ,
				{ 100 ,  {0.06101196354902007 }} ,
				{ 120 ,  {-0.02693313166344559 }} ,
				{ 121 ,  {-0.027202353452071455 }} ,
				{ 140 ,  {-0.026951686202823722 }} ,
				{ 141 ,  {-0.02712174338833774 }} ,
				{ 142 ,  {-0.02699177565013272 }} ,
				{ 143 ,  {-0.026867809505474086 }} ,
				{ 178 ,  {-0.026904465479745496 }} ,
				{ 188 ,  {-0.02693146968914847 }} ,
				{ 189 ,  {-0.027076970748630615 }} ,
				{ 202 ,  {0.08471117132397576 }} ,
				{ 361 ,  {-0.02721892414681648 }} ,
				{ 362 ,  {-0.02689033043976078 }} ,
				{ 363 ,  {-0.027079569214453737 }} ,
				{ 406 ,  {0.06732816987169614 }} ,
				{ 407 ,  {0.07373812203766676 }} ,
				{ 716 ,  {-0.02691140298593946 }} ,
				{ 719 ,  {-0.026950040245086807 }} ,
				{ 720 ,  {-0.02700242582048884 }} ,
				{ 1434 ,  {-0.026965639671626997 }} ,
				{ 1435 ,  {-0.027095308307332575 }} ,
				{ 1436 ,  {-0.02705796111676754 }} ,
				{ 1437 ,  {-0.027221489405530888 }} ,
				{ 1442 ,  {-0.027219548640359005 }} ,
				{ 1443 ,  {-0.02703499302580467 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 2.5000000000000004 ) ? ( ( ( Feature_54 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 88 ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 178 ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 716 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 1434 ) : ( 1435 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 1436 ) : ( 1437 ) ) ) : ( 719 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 2.5000000000000004 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 720 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 1442 ) : ( 1443 ) ) ) ) ) : ( 361 ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( 91 ) ) ) ) ) : ( ( ( Feature_12 <= 2.5000000000000004 ) ? ( 46 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 188 ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 5.500000000000001 ) ? ( ( ( Feature_26 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 24 ) : ( ( ( Feature_19 <= 14.500000000000002 ) ? ( ( ( Feature_59 <= 12.500000000000002 ) ? ( 100 ) : ( ( ( Feature_28 <= 10.500000000000002 ) ? ( 202 ) : ( ( ( Feature_54 <= 10.500000000000002 ) ? ( 406 ) : ( 407 ) ) ) ) ) ) ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_52 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 120 ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_11
	

	namespace LGBM_Tree_3_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.027803612153881566 }} ,
				{ 12 ,  {-0.015800094117605034 }} ,
				{ 15 ,  {0.02545801241214947 }} ,
				{ 17 ,  {0.017347238387919947 }} ,
				{ 20 ,  {-0.019385970371464042 }} ,
				{ 21 ,  {0.057247812195266236 }} ,
				{ 22 ,  {0.01562453082495456 }} ,
				{ 26 ,  {-0.027359067246452703 }} ,
				{ 28 ,  {0.011709079201733382 }} ,
				{ 32 ,  {0.049061862917075066 }} ,
				{ 47 ,  {-0.027546427769779825 }} ,
				{ 66 ,  {0.07687084935560184 }} ,
				{ 109 ,  {-0.02682901857499835 }} ,
				{ 116 ,  {-0.027073136901105924 }} ,
				{ 117 ,  {-0.026876199796321772 }} ,
				{ 118 ,  {-0.027475107921866623 }} ,
				{ 119 ,  {-0.027066699745659253 }} ,
				{ 134 ,  {0.07436942552281181 }} ,
				{ 186 ,  {-0.026994393305716315 }} ,
				{ 187 ,  {-0.02688992440366001 }} ,
				{ 216 ,  {-0.02689233699594508 }} ,
				{ 217 ,  {-0.027078643773970196 }} ,
				{ 270 ,  {0.07106532162452042 }} ,
				{ 271 ,  {0.06488033785787381 }} ,
				{ 368 ,  {-0.027062695753606165 }} ,
				{ 369 ,  {-0.026875785463391547 }} ,
				{ 370 ,  {-0.02707057774389925 }} ,
				{ 371 ,  {-0.027290080513628686 }} ,
				{ 442 ,  {-0.02686138942305229 }} ,
				{ 445 ,  {-0.026842600276694824 }} ,
				{ 446 ,  {-0.02712848655407051 }} ,
				{ 447 ,  {-0.02692741875945235 }} ,
				{ 880 ,  {-0.027114088603337118 }} ,
				{ 881 ,  {-0.02693284417011398 }} ,
				{ 882 ,  {-0.02725815375977883 }} ,
				{ 883 ,  {-0.027081670120692087 }} ,
				{ 886 ,  {-0.02709215261776376 }} ,
				{ 887 ,  {-0.026877367620220895 }} ,
				{ 888 ,  {-0.02700335486502929 }} ,
				{ 889 ,  {-0.026855760206402 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 3.5000000000000004 ) ? ( ( ( Feature_19 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 32 ) : ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 66 ) : ( ( ( Feature_37 <= 12.500000000000002 ) ? ( 134 ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 442 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 888 ) : ( 889 ) ) ) : ( 445 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_11
	

	namespace LGBM_Tree_4_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.026678250178684866 }} ,
				{ 12 ,  {0.02525970404187587 }} ,
				{ 14 ,  {-0.009513406713583385 }} ,
				{ 16 ,  {0.057549670281006604 }} ,
				{ 18 ,  {0.0006956553450995906 }} ,
				{ 27 ,  {-0.01382139018172347 }} ,
				{ 31 ,  {0.03435619944492659 }} ,
				{ 34 ,  {-0.01428437746239422 }} ,
				{ 61 ,  {0.09230619881725013 }} ,
				{ 71 ,  {-0.027853641037291522 }} ,
				{ 77 ,  {-0.02817841480468133 }} ,
				{ 79 ,  {-0.027542108137693196 }} ,
				{ 104 ,  {-0.02700271515623497 }} ,
				{ 105 ,  {-0.027179056401157232 }} ,
				{ 106 ,  {-0.027371021710064752 }} ,
				{ 107 ,  {-0.028659942701526428 }} ,
				{ 152 ,  {-0.027232604848903264 }} ,
				{ 153 ,  {-0.02697276914802479 }} ,
				{ 157 ,  {-0.027223920543236326 }} ,
				{ 240 ,  {0.07495934348156479 }} ,
				{ 241 ,  {0.06943416244892674 }} ,
				{ 242 ,  {0.0689980084608344 }} ,
				{ 243 ,  {0.06467293354719071 }} ,
				{ 280 ,  {-0.02714994546043005 }} ,
				{ 281 ,  {-0.02757635560254563 }} ,
				{ 282 ,  {-0.027077533467491168 }} ,
				{ 283 ,  {-0.0272890436517928 }} ,
				{ 313 ,  {-0.026959318972688818 }} ,
				{ 2498 ,  {-0.02730211541462157 }} ,
				{ 2500 ,  {-0.02695206659306438 }} ,
				{ 2501 ,  {-0.027106320007855053 }} ,
				{ 2502 ,  {-0.027212519580378337 }} ,
				{ 4992 ,  {-0.026930300419848542 }} ,
				{ 4993 ,  {-0.0270563174740728 }} ,
				{ 4994 ,  {-0.027269152172370678 }} ,
				{ 4995 ,  {-0.027019316438122994 }} ,
				{ 4998 ,  {-0.027197627345317277 }} ,
				{ 4999 ,  {-0.0269984462673542 }} ,
				{ 5006 ,  {-0.02712863881384524 }} ,
				{ 5007 ,  {-0.026971113553083282 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_41 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_52 <= 5.500000000000001 ) ? ( 34 ) : ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_22 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_4 <= 11.500000000000002 ) ? ( 4992 ) : ( 4993 ) ) ) : ( ( ( Feature_35 <= 15.500000000000002 ) ? ( 4994 ) : ( 4995 ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 2498 ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 4998 ) : ( 4999 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_14 <= 5.500000000000001 ) ? ( 2500 ) : ( 2501 ) ) ) : ( ( ( Feature_37 <= 8.500000000000002 ) ? ( 2502 ) : ( ( ( Feature_13 <= 4.500000000000001 ) ? ( 5006 ) : ( 5007 ) ) ) ) ) ) ) ) ) : ( 313 ) ) ) : ( 157 ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 9.500000000000002 ) ? ( 12 ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_10 <= 12.500000000000002 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( ( ( Feature_22 <= 1.5000000000000002 ) ? ( 240 ) : ( 241 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_11
	

	namespace LGBM_Tree_5_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {-0.017731172091660866 }} ,
				{ 15 ,  {0.03514016677103684 }} ,
				{ 16 ,  {0.031026762719079705 }} ,
				{ 17 ,  {-0.027377247714686845 }} ,
				{ 19 ,  {-0.027243679961809975 }} ,
				{ 25 ,  {0.003382357797615683 }} ,
				{ 28 ,  {-0.027151820053097103 }} ,
				{ 36 ,  {-0.02705744987597121 }} ,
				{ 40 ,  {0.06794811154956837 }} ,
				{ 41 ,  {0.04948931692892772 }} ,
				{ 42 ,  {0.0759183058444739 }} ,
				{ 48 ,  {-0.027186577756236452 }} ,
				{ 58 ,  {-0.026880352037184415 }} ,
				{ 74 ,  {-0.02686557106184881 }} ,
				{ 75 ,  {-0.02697541774889081 }} ,
				{ 87 ,  {0.0635282574107117 }} ,
				{ 98 ,  {-0.027011553308020228 }} ,
				{ 99 ,  {-0.026851576533725913 }} ,
				{ 106 ,  {-0.02693270564804802 }} ,
				{ 107 ,  {-0.02683237367372079 }} ,
				{ 109 ,  {-0.026965814102124605 }} ,
				{ 111 ,  {-0.026891869387236846 }} ,
				{ 118 ,  {-0.026933560102520696 }} ,
				{ 119 ,  {-0.027119283199894845 }} ,
				{ 172 ,  {0.06803909984215432 }} ,
				{ 173 ,  {0.07396852668931873 }} ,
				{ 208 ,  {-0.026867130479858725 }} ,
				{ 217 ,  {-0.027038674014589682 }} ,
				{ 220 ,  {-0.026861408762034633 }} ,
				{ 221 ,  {-0.027094255926700717 }} ,
				{ 418 ,  {-0.02713067020091673 }} ,
				{ 419 ,  {-0.02687470110717301 }} ,
				{ 422 ,  {-0.026979141893673286 }} ,
				{ 423 ,  {-0.02718297181380046 }} ,
				{ 432 ,  {-0.027277426006327606 }} ,
				{ 433 ,  {-0.027084078555302427 }} ,
				{ 840 ,  {-0.027110052677765117 }} ,
				{ 841 ,  {-0.026944735040825635 }} ,
				{ 842 ,  {-0.02679346974597227 }} ,
				{ 843 ,  {-0.026977808800691408 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( ( ( Feature_33 <= 7.500000000000001 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_58 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 42 ) : ( ( ( Feature_9 <= 6.500000000000001 ) ? ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 172 ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 48 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 12.500000000000002 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 208 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 418 ) : ( 419 ) ) ) ) ) : ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( ( ( Feature_50 <= 4.500000000000001 ) ? ( 840 ) : ( 841 ) ) ) : ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 842 ) : ( 843 ) ) ) ) ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( 422 ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 6.500000000000001 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( ( ( Feature_2 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_35 <= 10.500000000000002 ) ? ( ( ( Feature_35 <= 3.5000000000000004 ) ? ( 220 ) : ( 221 ) ) ) : ( 111 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 58 ) : ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_11
	

	namespace LGBM_Tree_6_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.008318949308564081 }} ,
				{ 9 ,  {-0.009678032474098089 }} ,
				{ 10 ,  {-0.027217411196694203 }} ,
				{ 15 ,  {-0.0103715055737209 }} ,
				{ 16 ,  {-0.027223827041659134 }} ,
				{ 22 ,  {0.01567555696485506 }} ,
				{ 35 ,  {-0.026803856236482806 }} ,
				{ 47 ,  {0.04454088990795723 }} ,
				{ 57 ,  {-0.009955245399484466 }} ,
				{ 68 ,  {-0.027101646048574457 }} ,
				{ 69 ,  {-0.02680838533687089 }} ,
				{ 93 ,  {0.08056011681282649 }} ,
				{ 112 ,  {-0.02701032073671962 }} ,
				{ 113 ,  {-0.027172951283018467 }} ,
				{ 184 ,  {0.07354839788187538 }} ,
				{ 238 ,  {-0.02701901377719175 }} ,
				{ 239 ,  {-0.026875633177010295 }} ,
				{ 371 ,  {0.06582895866253544 }} ,
				{ 464 ,  {-0.026787387691881617 }} ,
				{ 465 ,  {-0.026907702527728058 }} ,
				{ 470 ,  {-0.027124589020384268 }} ,
				{ 472 ,  {-0.02681609065947181 }} ,
				{ 473 ,  {-0.02671744692623736 }} ,
				{ 474 ,  {-0.026975676955769426 }} ,
				{ 475 ,  {-0.02682653871523463 }} ,
				{ 740 ,  {0.06772035454445478 }} ,
				{ 741 ,  {0.07114742345051045 }} ,
				{ 932 ,  {-0.026933248871797773 }} ,
				{ 933 ,  {-0.027196196049749533 }} ,
				{ 935 ,  {-0.026818765531538558 }} ,
				{ 936 ,  {-0.026851760270966182 }} ,
				{ 938 ,  {-0.027001550294476952 }} ,
				{ 939 ,  {-0.027209979108051088 }} ,
				{ 942 ,  {-0.026986032287831935 }} ,
				{ 943 ,  {-0.026861431635049445 }} ,
				{ 1869 ,  {-0.027071080057435172 }} ,
				{ 1874 ,  {-0.02712219215007787 }} ,
				{ 1875 ,  {-0.02696762900333632 }} ,
				{ 3736 ,  {-0.026848447641067176 }} ,
				{ 3737 ,  {-0.0269651363917201 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( ( ( Feature_2 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_63 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_41 <= 4.500000000000001 ) ? ( ( ( Feature_12 <= 11.500000000000002 ) ? ( ( ( Feature_36 <= 10.500000000000002 ) ? ( 184 ) : ( ( ( Feature_19 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 740 ) : ( 741 ) ) ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 9.500000000000002 ) ? ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( 3736 ) : ( 3737 ) ) ) : ( 1869 ) ) ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_27 <= 2.5000000000000004 ) ? ( 936 ) : ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_60 <= 9.500000000000002 ) ? ( 470 ) : ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( ( ( Feature_58 <= 7.500000000000001 ) ? ( 472 ) : ( 473 ) ) ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_11
	

	namespace LGBM_Tree_7_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.025198932443645395 }} ,
				{ 8 ,  {-0.003997034320753952 }} ,
				{ 11 ,  {0.02389804699078258 }} ,
				{ 19 ,  {0.0005353536488198331 }} ,
				{ 20 ,  {-0.027068380273543732 }} ,
				{ 21 ,  {-0.02803709088630082 }} ,
				{ 25 ,  {-0.011864380030479117 }} ,
				{ 26 ,  {0.025411140120546457 }} ,
				{ 36 ,  {0.07908342372940576 }} ,
				{ 55 ,  {-0.02718787457074799 }} ,
				{ 75 ,  {0.058119542062050666 }} ,
				{ 96 ,  {-0.02722855764800465 }} ,
				{ 97 ,  {-0.0268855761498869 }} ,
				{ 108 ,  {-0.026863636101990038 }} ,
				{ 109 ,  {-0.02703954622720919 }} ,
				{ 148 ,  {0.07839169063058478 }} ,
				{ 197 ,  {-0.0270898055562133 }} ,
				{ 199 ,  {-0.02695126876592895 }} ,
				{ 298 ,  {0.0675479874548647 }} ,
				{ 299 ,  {0.07331925482630432 }} ,
				{ 393 ,  {-0.026777999412725153 }} ,
				{ 792 ,  {-0.026927649426562585 }} ,
				{ 794 ,  {-0.026717045716100597 }} ,
				{ 1570 ,  {-0.02680153689972675 }} ,
				{ 1571 ,  {-0.02693433196706703 }} ,
				{ 1586 ,  {-0.02671502012270141 }} ,
				{ 1590 ,  {-0.02690285473363618 }} ,
				{ 1591 ,  {-0.026780760915195847 }} ,
				{ 3136 ,  {-0.02681978253519074 }} ,
				{ 3137 ,  {-0.02698639624547098 }} ,
				{ 3175 ,  {-0.026803503456937106 }} ,
				{ 6277 ,  {-0.026956513982709252 }} ,
				{ 6279 ,  {-0.026918169487809968 }} ,
				{ 6348 ,  {-0.026806654881183275 }} ,
				{ 6349 ,  {-0.026974153953176896 }} ,
				{ 12552 ,  {-0.026786227544633747 }} ,
				{ 12553 ,  {-0.0269136594802735 }} ,
				{ 12556 ,  {-0.026942905408436107 }} ,
				{ 25114 ,  {-0.027174907394874184 }} ,
				{ 25115 ,  {-0.027056033671776086 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_25 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( ( ( Feature_52 <= 1.0000000180025095e-35 ) ? ( 36 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 148 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 298 ) : ( 299 ) ) ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_36 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_6 <= 10.500000000000002 ) ? ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_38 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_61 <= 2.5000000000000004 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_14 <= 5.500000000000001 ) ? ( ( ( Feature_63 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 12.500000000000002 ) ? ( 3136 ) : ( 3137 ) ) ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_18 <= 9.500000000000002 ) ? ( 12552 ) : ( 12553 ) ) ) : ( 6277 ) ) ) : ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_37 <= 7.500000000000001 ) ? ( 12556 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 25114 ) : ( 25115 ) ) ) ) ) : ( 6279 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 1570 ) : ( 1571 ) ) ) ) ) : ( 393 ) ) ) : ( 197 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 792 ) : ( ( ( Feature_59 <= 3.5000000000000004 ) ? ( 1586 ) : ( ( ( Feature_21 <= 6.500000000000001 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 6348 ) : ( 6349 ) ) ) : ( 3175 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 794 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 1590 ) : ( 1591 ) ) ) ) ) ) ) : ( 199 ) ) ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_11
	

	namespace LGBM_Tree_8_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.026972432689825684 }} ,
				{ 18 ,  {-0.007676411299389008 }} ,
				{ 20 ,  {-0.010724802805774675 }} ,
				{ 26 ,  {-0.0268732802665479 }} ,
				{ 29 ,  {-0.010901170787580919 }} ,
				{ 31 ,  {0.058729060929818666 }} ,
				{ 32 ,  {-0.026991623406587714 }} ,
				{ 33 ,  {-0.026746651020546693 }} ,
				{ 46 ,  {-0.027344642361076067 }} ,
				{ 47 ,  {0.008589940652135199 }} ,
				{ 48 ,  {-0.02672579969718851 }} ,
				{ 49 ,  {-0.026865654890829867 }} ,
				{ 50 ,  {-0.02701600596912331 }} ,
				{ 54 ,  {-0.02674496463151281 }} ,
				{ 55 ,  {-0.026646714441131286 }} ,
				{ 56 ,  {-0.027158653078696256 }} ,
				{ 60 ,  {-0.02750866774362101 }} ,
				{ 61 ,  {-0.026862476937702152 }} ,
				{ 76 ,  {-0.02673950177040975 }} ,
				{ 78 ,  {-0.0268346247201058 }} ,
				{ 79 ,  {-0.027044641505989692 }} ,
				{ 84 ,  {-0.026969790380634396 }} ,
				{ 85 ,  {-0.02676695254827748 }} ,
				{ 86 ,  {-0.027443699586102634 }} ,
				{ 87 ,  {-0.027045787676737255 }} ,
				{ 88 ,  {-0.027726280245199325 }} ,
				{ 89 ,  {0.047225887561504774 }} ,
				{ 90 ,  {0.023886089753750492 }} ,
				{ 102 ,  {-0.02678980366160809 }} ,
				{ 114 ,  {-0.026941554737188594 }} ,
				{ 115 ,  {-0.02676527279359356 }} ,
				{ 154 ,  {-0.026884969886272897 }} ,
				{ 155 ,  {-0.026754638898209837 }} ,
				{ 182 ,  {0.054639628262352684 }} ,
				{ 207 ,  {-0.026812987460829024 }} ,
				{ 367 ,  {0.06495736639154535 }} ,
				{ 412 ,  {-0.027026589917735912 }} ,
				{ 413 ,  {-0.026874020950840974 }} ,
				{ 732 ,  {0.07887966388701154 }} ,
				{ 733 ,  {0.07093676455432463 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 76 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 154 ) : ( 155 ) ) ) ) ) : ( ( ( Feature_59 <= 15.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 6.500000000000001 ) ? ( 20 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 84 ) : ( 85 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 6.500000000000001 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 90 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 182 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 10.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( ( ( Feature_38 <= 9.500000000000002 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_10 <= 9.500000000000002 ) ? ( ( ( Feature_41 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_11
	

	namespace LGBM_Tree_9_11 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {-0.019333456611372302 }} ,
				{ 17 ,  {0.05480581331577233 }} ,
				{ 22 ,  {-0.019202507677227507 }} ,
				{ 24 ,  {0.003020125299048052 }} ,
				{ 26 ,  {-0.017263411785675576 }} ,
				{ 27 ,  {0.060515380770515895 }} ,
				{ 29 ,  {0.032139961923849464 }} ,
				{ 32 ,  {-0.027150083297479297 }} ,
				{ 33 ,  {-0.027958380177315202 }} ,
				{ 36 ,  {-0.02702248698749407 }} ,
				{ 37 ,  {0.04183909374406514 }} ,
				{ 39 ,  {-0.027621936780408682 }} ,
				{ 47 ,  {0.030578564199557748 }} ,
				{ 50 ,  {-0.02749923099235839 }} ,
				{ 51 ,  {-0.02695767889549927 }} ,
				{ 56 ,  {-0.027608575725726205 }} ,
				{ 60 ,  {0.0036436740771953894 }} ,
				{ 77 ,  {-0.02691150664162023 }} ,
				{ 93 ,  {0.05093779652928254 }} ,
				{ 114 ,  {-0.027174262793866966 }} ,
				{ 115 ,  {-0.026925291900463656 }} ,
				{ 122 ,  {-0.027167306932089352 }} ,
				{ 123 ,  {-0.026944771542739544 }} ,
				{ 126 ,  {-0.027832564695106168 }} ,
				{ 127 ,  {-0.02710395391715414 }} ,
				{ 152 ,  {-0.027047212988703148 }} ,
				{ 153 ,  {-0.02724657027427113 }} ,
				{ 184 ,  {0.08180797038542553 }} ,
				{ 251 ,  {-0.02687309937703001 }} ,
				{ 370 ,  {0.07458355379629167 }} ,
				{ 371 ,  {0.06500097514374331 }} ,
				{ 497 ,  {-0.027237933263106036 }} ,
				{ 498 ,  {-0.0271155170703538 }} ,
				{ 499 ,  {-0.02749374794577475 }} ,
				{ 501 ,  {-0.02722196542983148 }} ,
				{ 992 ,  {-0.027061272243041806 }} ,
				{ 993 ,  {-0.026949517386367756 }} ,
				{ 1000 ,  {-0.026899931543436697 }} ,
				{ 2002 ,  {-0.027182287118837845 }} ,
				{ 2003 ,  {-0.026953480708001576 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( ( ( Feature_29 <= 5.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_53 <= 12.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_34 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 5.500000000000001 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_21 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_36 <= 11.500000000000002 ) ? ( ( ( Feature_45 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 11.500000000000002 ) ? ( 184 ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 24 ) : ( ( ( Feature_34 <= 7.500000000000001 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_34 <= 6.500000000000001 ) ? ( 56 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 60 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( 992 ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 14.500000000000002 ) ? ( 1000 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( 2002 ) : ( 2003 ) ) ) ) ) : ( 501 ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_11
	

	namespace LGBM_Tree_0_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.028015617591252897 }} ,
				{ 11 ,  {-0.02719255931020086 }} ,
				{ 13 ,  {0.02268246103721783 }} ,
				{ 18 ,  {0.05381095039517331 }} ,
				{ 20 ,  {-0.026920992354381626 }} ,
				{ 21 ,  {-0.026728125187963293 }} ,
				{ 24 ,  {-0.026782350078606305 }} ,
				{ 25 ,  {-0.02717400262926832 }} ,
				{ 39 ,  {0.0732430122634517 }} ,
				{ 60 ,  {-0.026602079312497487 }} ,
				{ 63 ,  {-0.026920502571240554 }} ,
				{ 77 ,  {0.06803794601993224 }} ,
				{ 114 ,  {-0.026822712042121485 }} ,
				{ 116 ,  {-0.026679812847997704 }} ,
				{ 117 ,  {-0.026797444402688275 }} ,
				{ 123 ,  {-0.026670779874819556 }} ,
				{ 124 ,  {-0.02685974118987355 }} ,
				{ 125 ,  {-0.026717553179385435 }} ,
				{ 152 ,  {0.0653708756201871 }} ,
				{ 153 ,  {0.06141839726358295 }} ,
				{ 224 ,  {-0.02678241950913243 }} ,
				{ 225 ,  {-0.026625226570212737 }} ,
				{ 230 ,  {-0.02715971224888035 }} ,
				{ 236 ,  {-0.026694586279747908 }} ,
				{ 237 ,  {-0.02687014956684876 }} ,
				{ 239 ,  {-0.026992080457556064 }} ,
				{ 244 ,  {-0.026816722988629173 }} ,
				{ 245 ,  {-0.026717487449524457 }} ,
				{ 452 ,  {-0.02668012009199044 }} ,
				{ 453 ,  {-0.026901224432365423 }} ,
				{ 454 ,  {-0.026760462579421232 }} ,
				{ 462 ,  {-0.027017826750247206 }} ,
				{ 463 ,  {-0.02684267902259395 }} ,
				{ 476 ,  {-0.026902543034091665 }} ,
				{ 477 ,  {-0.026742491782312486 }} ,
				{ 1821 ,  {-0.027124177213177916 }} ,
				{ 1822 ,  {-0.026909448631625622 }} ,
				{ 1823 ,  {-0.02673606456527914 }} ,
				{ 3640 ,  {-0.026979943529468694 }} ,
				{ 3641 ,  {-0.02680112463041806 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 8 ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( 18 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 454 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( Feature_18 <= 5.500000000000001 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 114 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 230 ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( ( ( Feature_51 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 4.500000000000001 ) ? ( 244 ) : ( 245 ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 124 ) : ( 125 ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_12
	

	namespace LGBM_Tree_1_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03224612532542541 }} ,
				{ 10 ,  {-0.012857381468166116 }} ,
				{ 13 ,  {0.07002660805083973 }} ,
				{ 25 ,  {0.0032093742400797244 }} ,
				{ 29 ,  {0.03502278435785048 }} ,
				{ 31 ,  {0.061335108017999386 }} ,
				{ 47 ,  {-0.026970103335204283 }} ,
				{ 48 ,  {-0.012979754332107869 }} ,
				{ 57 ,  {0.04725179888050729 }} ,
				{ 60 ,  {-0.02765525783899599 }} ,
				{ 61 ,  {-0.02916227880749204 }} ,
				{ 93 ,  {-0.026947052854778098 }} ,
				{ 112 ,  {0.08169070570212073 }} ,
				{ 176 ,  {-0.02687984758840882 }} ,
				{ 179 ,  {-0.02721147358068006 }} ,
				{ 180 ,  {-0.02700342515517004 }} ,
				{ 181 ,  {-0.026788662053975815 }} ,
				{ 185 ,  {-0.02673688452424864 }} ,
				{ 196 ,  {-0.02743984865349024 }} ,
				{ 197 ,  {-0.028600857432597316 }} ,
				{ 198 ,  {-0.027247418956404097 }} ,
				{ 227 ,  {0.06050304553218286 }} ,
				{ 355 ,  {-0.027125111447955208 }} ,
				{ 356 ,  {-0.027147015205300537 }} ,
				{ 357 ,  {-0.02692870911920077 }} ,
				{ 365 ,  {-0.026846927983906393 }} ,
				{ 366 ,  {-0.027198468869939027 }} ,
				{ 367 ,  {-0.02689795772242612 }} ,
				{ 368 ,  {-0.026852517714115894 }} ,
				{ 369 ,  {-0.02677403099019219 }} ,
				{ 398 ,  {-0.026957102364002557 }} ,
				{ 399 ,  {-0.02681719634672319 }} ,
				{ 452 ,  {0.06685137732399486 }} ,
				{ 453 ,  {0.07514229525920785 }} ,
				{ 708 ,  {-0.026800750386228214 }} ,
				{ 709 ,  {-0.027016844942028148 }} ,
				{ 728 ,  {-0.026839395530969885 }} ,
				{ 1459 ,  {-0.027141164277136955 }} ,
				{ 2916 ,  {-0.02705147846958596 }} ,
				{ 2917 ,  {-0.02690514410213107 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_59 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 176 ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_59 <= 13.500000000000002 ) ? ( 356 ) : ( 357 ) ) ) : ( 179 ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 728 ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 2916 ) : ( 2917 ) ) ) : ( 1459 ) ) ) ) ) : ( 365 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_61 <= 15.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 368 ) : ( 369 ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_63 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_12 <= 4.500000000000001 ) ? ( 48 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 198 ) : ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 398 ) : ( 399 ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 112 ) : ( ( ( Feature_61 <= 7.500000000000001 ) ? ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 452 ) : ( 453 ) ) ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_13 <= 12.500000000000002 ) ? ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_12
	

	namespace LGBM_Tree_2_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.028796232707493864 }} ,
				{ 10 ,  {0.024337960021472007 }} ,
				{ 16 ,  {0.02773915522028518 }} ,
				{ 22 ,  {-0.02719515843960992 }} ,
				{ 26 ,  {0.01939680528566703 }} ,
				{ 27 ,  {-0.02804301987920865 }} ,
				{ 35 ,  {-0.029247771462342993 }} ,
				{ 36 ,  {-0.001236400718734647 }} ,
				{ 37 ,  {-0.02706636053940853 }} ,
				{ 39 ,  {0.0009315126441823233 }} ,
				{ 47 ,  {-0.027084437965570612 }} ,
				{ 49 ,  {-0.030951044755453957 }} ,
				{ 68 ,  {-0.027290416442985056 }} ,
				{ 69 ,  {-0.026825239359611383 }} ,
				{ 76 ,  {0.042305827338551975 }} ,
				{ 92 ,  {-0.026864910020940436 }} ,
				{ 96 ,  {-0.027533156665589364 }} ,
				{ 100 ,  {-0.02744362431082331 }} ,
				{ 103 ,  {-0.027817698712692074 }} ,
				{ 154 ,  {0.0851992716343557 }} ,
				{ 186 ,  {-0.026815083626803363 }} ,
				{ 187 ,  {-0.027113298633130417 }} ,
				{ 194 ,  {-0.026925699357018752 }} ,
				{ 195 ,  {-0.02720502398606527 }} ,
				{ 204 ,  {-0.02731700719554237 }} ,
				{ 205 ,  {-0.026962853366858764 }} ,
				{ 310 ,  {0.07654084840804323 }} ,
				{ 405 ,  {-0.026929881697997954 }} ,
				{ 622 ,  {0.0657973029596912 }} ,
				{ 623 ,  {0.06352160327904889 }} ,
				{ 809 ,  {-0.02694278251281966 }} ,
				{ 812 ,  {-0.026889106664479464 }} ,
				{ 813 ,  {-0.02718947826810954 }} ,
				{ 815 ,  {-0.026782478924540876 }} ,
				{ 1616 ,  {-0.02701361280176878 }} ,
				{ 1628 ,  {-0.026867866377003197 }} ,
				{ 3234 ,  {-0.02708540718436476 }} ,
				{ 3235 ,  {-0.027318148104552242 }} ,
				{ 3258 ,  {-0.026935395543425195 }} ,
				{ 3259 ,  {-0.027144769019307142 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 12.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_35 <= 14.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_45 <= 10.500000000000002 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 76 ) : ( ( ( Feature_62 <= 3.5000000000000004 ) ? ( 154 ) : ( ( ( Feature_4 <= 5.500000000000001 ) ? ( 310 ) : ( ( ( Feature_62 <= 14.500000000000002 ) ? ( 622 ) : ( 623 ) ) ) ) ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_28 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 92 ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_9 <= 7.500000000000001 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 96 ) : ( ( ( Feature_61 <= 2.5000000000000004 ) ? ( 194 ) : ( 195 ) ) ) ) ) : ( 49 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 6.500000000000001 ) ? ( ( ( Feature_20 <= 10.500000000000002 ) ? ( ( ( Feature_26 <= 12.500000000000002 ) ? ( 1616 ) : ( ( ( Feature_36 <= 12.500000000000002 ) ? ( 3234 ) : ( 3235 ) ) ) ) ) : ( 809 ) ) ) : ( 405 ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 7.500000000000001 ) ? ( 812 ) : ( 813 ) ) ) : ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 1628 ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( 3258 ) : ( 3259 ) ) ) ) ) : ( 815 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 8.500000000000002 ) ? ( ( ( Feature_46 <= 7.500000000000001 ) ? ( 204 ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_12
	

	namespace LGBM_Tree_3_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.02771316463143103 }} ,
				{ 12 ,  {-0.015539315319950198 }} ,
				{ 15 ,  {0.024394487814126155 }} ,
				{ 17 ,  {0.016725695526114272 }} ,
				{ 20 ,  {0.046221229741497026 }} ,
				{ 21 ,  {-0.02781933333376522 }} ,
				{ 22 ,  {0.015168616678190947 }} ,
				{ 26 ,  {-0.02728213441896639 }} ,
				{ 28 ,  {0.011458920100135037 }} ,
				{ 32 ,  {0.04661125513240131 }} ,
				{ 47 ,  {-0.027482300080170254 }} ,
				{ 66 ,  {0.07205479842779557 }} ,
				{ 93 ,  {-0.027110988083846523 }} ,
				{ 109 ,  {-0.02675836809674963 }} ,
				{ 116 ,  {-0.02701401306168899 }} ,
				{ 117 ,  {-0.026806399757710445 }} ,
				{ 118 ,  {-0.027406186097883922 }} ,
				{ 119 ,  {-0.026995395677038264 }} ,
				{ 134 ,  {0.06982047326586154 }} ,
				{ 185 ,  {-0.026830153521996115 }} ,
				{ 217 ,  {-0.027018821211529848 }} ,
				{ 270 ,  {0.06686976574875501 }} ,
				{ 271 ,  {0.06129453023447826 }} ,
				{ 432 ,  {-0.02690538901554367 }} ,
				{ 433 ,  {-0.026771157103175226 }} ,
				{ 442 ,  {-0.02700980387573549 }} ,
				{ 444 ,  {-0.02688228805007077 }} ,
				{ 445 ,  {-0.026775804687650975 }} ,
				{ 446 ,  {-0.027070093711607415 }} ,
				{ 447 ,  {-0.026864625582725205 }} ,
				{ 736 ,  {-0.02700657621954975 }} ,
				{ 737 ,  {-0.027169912776993127 }} ,
				{ 738 ,  {-0.02693643707861595 }} ,
				{ 739 ,  {-0.026796546078078083 }} ,
				{ 880 ,  {-0.027052876827468753 }} ,
				{ 881 ,  {-0.026863365096102737 }} ,
				{ 882 ,  {-0.027222155960668494 }} ,
				{ 883 ,  {-0.027036512453617347 }} ,
				{ 886 ,  {-0.026944310859802974 }} ,
				{ 887 ,  {-0.02679107219667864 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 3.5000000000000004 ) ? ( ( ( Feature_19 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 32 ) : ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 66 ) : ( ( ( Feature_37 <= 12.500000000000002 ) ? ( 134 ) : ( ( ( Feature_21 <= 9.500000000000002 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 736 ) : ( 737 ) ) ) : ( ( ( Feature_10 <= 6.500000000000001 ) ? ( 738 ) : ( 739 ) ) ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_36 <= 7.500000000000001 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( Feature_53 <= 2.5000000000000004 ) ? ( 442 ) : ( ( ( Feature_35 <= 7.500000000000001 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_12
	

	namespace LGBM_Tree_4_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.02565264110964155 }} ,
				{ 12 ,  {0.024210805658378465 }} ,
				{ 14 ,  {-0.009243057521958491 }} ,
				{ 16 ,  {0.05403812270901797 }} ,
				{ 18 ,  {0.0009133918683544103 }} ,
				{ 27 ,  {-0.013549493330112539 }} ,
				{ 31 ,  {0.03248107910087023 }} ,
				{ 34 ,  {-0.013907517383167756 }} ,
				{ 61 ,  {0.08479300686958614 }} ,
				{ 71 ,  {-0.027721719105796884 }} ,
				{ 77 ,  {-0.028054194154272467 }} ,
				{ 79 ,  {-0.027448368194016387 }} ,
				{ 104 ,  {-0.02695605807724727 }} ,
				{ 105 ,  {-0.02714847859954006 }} ,
				{ 106 ,  {-0.027288437704830137 }} ,
				{ 107 ,  {-0.028534781420915718 }} ,
				{ 120 ,  {0.06972135026585127 }} ,
				{ 141 ,  {-0.027418014922299196 }} ,
				{ 152 ,  {-0.02717695610704543 }} ,
				{ 153 ,  {-0.026902236211410746 }} ,
				{ 157 ,  {-0.02715640437307014 }} ,
				{ 243 ,  {0.060848909997010495 }} ,
				{ 281 ,  {-0.026986997129142938 }} ,
				{ 313 ,  {-0.02688739005428166 }} ,
				{ 484 ,  {0.06733183189395124 }} ,
				{ 485 ,  {0.06348566593381878 }} ,
				{ 560 ,  {-0.027015564355392454 }} ,
				{ 1122 ,  {-0.027093689533963367 }} ,
				{ 1123 ,  {-0.02732937048295066 }} ,
				{ 2496 ,  {-0.02692937934894818 }} ,
				{ 2498 ,  {-0.02725119562480326 }} ,
				{ 2500 ,  {-0.02687785642504767 }} ,
				{ 2501 ,  {-0.02704471020585937 }} ,
				{ 2502 ,  {-0.027155303935245536 }} ,
				{ 4994 ,  {-0.027217291223275472 }} ,
				{ 4995 ,  {-0.026952098216548016 }} ,
				{ 4998 ,  {-0.02713996570472252 }} ,
				{ 4999 ,  {-0.026931660707241057 }} ,
				{ 5006 ,  {-0.027070949309258893 }} ,
				{ 5007 ,  {-0.026897772929174446 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_41 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_45 <= 1.5000000000000002 ) ? ( 34 ) : ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_30 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_11 <= 9.500000000000002 ) ? ( 560 ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 1122 ) : ( 1123 ) ) ) ) ) : ( 281 ) ) ) : ( 141 ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_22 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 15.500000000000002 ) ? ( 2496 ) : ( ( ( Feature_35 <= 15.500000000000002 ) ? ( 4994 ) : ( 4995 ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 2498 ) : ( ( ( Feature_52 <= 7.500000000000001 ) ? ( 4998 ) : ( 4999 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_14 <= 5.500000000000001 ) ? ( 2500 ) : ( 2501 ) ) ) : ( ( ( Feature_37 <= 8.500000000000002 ) ? ( 2502 ) : ( ( ( Feature_13 <= 4.500000000000001 ) ? ( 5006 ) : ( 5007 ) ) ) ) ) ) ) ) ) : ( 313 ) ) ) : ( 157 ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 9.500000000000002 ) ? ( 12 ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( ( ( Feature_59 <= 2.5000000000000004 ) ? ( 120 ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 484 ) : ( 485 ) ) ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_12
	

	namespace LGBM_Tree_5_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 11 ,  {-0.017455491800920805 }} ,
				{ 12 ,  {0.037179562321713766 }} ,
				{ 16 ,  {0.03016654733498299 }} ,
				{ 17 ,  {-0.02736723537638365 }} ,
				{ 19 ,  {-0.027190540158021356 }} ,
				{ 21 ,  {0.05030218743151436 }} ,
				{ 26 ,  {-0.026933828388946975 }} ,
				{ 27 ,  {-0.026755351694335357 }} ,
				{ 30 ,  {0.026797519639767176 }} ,
				{ 36 ,  {-0.026988272853441526 }} ,
				{ 37 ,  {-0.026814313808883834 }} ,
				{ 59 ,  {-0.029080907939541035 }} ,
				{ 63 ,  {-0.009856071457367402 }} ,
				{ 81 ,  {0.0739637078423012 }} ,
				{ 82 ,  {0.05069116030288323 }} ,
				{ 83 ,  {0.06578407448520578 }} ,
				{ 113 ,  {-0.0267796771688114 }} ,
				{ 116 ,  {-0.027007986576645465 }} ,
				{ 124 ,  {-0.027530491250300878 }} ,
				{ 160 ,  {0.06457289448608852 }} ,
				{ 161 ,  {0.06797117777197763 }} ,
				{ 224 ,  {-0.026769562733415072 }} ,
				{ 229 ,  {-0.02686993507522536 }} ,
				{ 230 ,  {-0.0270822299491332 }} ,
				{ 234 ,  {-0.026768201182542636 }} ,
				{ 235 ,  {-0.02691586156939398 }} ,
				{ 251 ,  {-0.027147693861999934 }} ,
				{ 450 ,  {-0.027017602734549458 }} ,
				{ 451 ,  {-0.026817241495863203 }} ,
				{ 456 ,  {-0.02690101472972712 }} ,
				{ 457 ,  {-0.02719277905418846 }} ,
				{ 463 ,  {-0.026705105243528544 }} ,
				{ 924 ,  {-0.0269436357683503 }} ,
				{ 1000 ,  {-0.02704246860048473 }} ,
				{ 1001 ,  {-0.02679975567476065 }} ,
				{ 1002 ,  {-0.026764284521562542 }} ,
				{ 1003 ,  {-0.026949229487645318 }} ,
				{ 1851 ,  {-0.02691453870136523 }} ,
				{ 3700 ,  {-0.026924804277273087 }} ,
				{ 3701 ,  {-0.026778799922093297 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 11.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_38 <= 5.500000000000001 ) ? ( ( ( Feature_36 <= 13.500000000000002 ) ? ( ( ( Feature_33 <= 2.5000000000000004 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 160 ) : ( 161 ) ) ) : ( 81 ) ) ) : ( ( ( Feature_2 <= 8.500000000000002 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 12 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 224 ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 450 ) : ( 451 ) ) ) ) ) : ( 113 ) ) ) : ( ( ( Feature_34 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_37 <= 7.500000000000001 ) ? ( 456 ) : ( 457 ) ) ) : ( 229 ) ) ) : ( ( ( Feature_12 <= 2.5000000000000004 ) ? ( 230 ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 924 ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 3700 ) : ( 3701 ) ) ) : ( 1851 ) ) ) ) ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 116 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 30 ) : ( ( ( Feature_9 <= 4.500000000000001 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 124 ) : ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_5 <= 13.500000000000002 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( 1000 ) : ( 1001 ) ) ) : ( ( ( Feature_14 <= 10.500000000000002 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_12
	

	namespace LGBM_Tree_6_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.008059139943322968 }} ,
				{ 8 ,  {-0.00919996103942125 }} ,
				{ 15 ,  {-0.010075074464545428 }} ,
				{ 19 ,  {-0.02673443578040718 }} ,
				{ 20 ,  {-0.027389850799190704 }} ,
				{ 21 ,  {0.029003312046401677 }} ,
				{ 22 ,  {0.033689082417716086 }} ,
				{ 37 ,  {-0.026788085479745025 }} ,
				{ 47 ,  {0.07032377707676139 }} ,
				{ 56 ,  {-0.009531239336044236 }} ,
				{ 72 ,  {-0.027031629237825705 }} ,
				{ 73 ,  {-0.027218669869709052 }} ,
				{ 92 ,  {0.06771284006552723 }} ,
				{ 114 ,  {-0.02712190664494626 }} ,
				{ 115 ,  {-0.02695601804013602 }} ,
				{ 186 ,  {0.06604754371466269 }} ,
				{ 232 ,  {-0.02676563016272257 }} ,
				{ 236 ,  {-0.02672846629213408 }} ,
				{ 238 ,  {-0.026960740765196903 }} ,
				{ 239 ,  {-0.02681093095507449 }} ,
				{ 374 ,  {0.06513498297965381 }} ,
				{ 375 ,  {0.06349114465558718 }} ,
				{ 466 ,  {-0.026784100978771676 }} ,
				{ 474 ,  {-0.026917010379150442 }} ,
				{ 475 ,  {-0.026757822061877563 }} ,
				{ 934 ,  {-0.02676403227338276 }} ,
				{ 935 ,  {-0.027087264284769843 }} ,
				{ 937 ,  {-0.026789552149870728 }} ,
				{ 938 ,  {-0.026728021679061305 }} ,
				{ 939 ,  {-0.026883163223376638 }} ,
				{ 940 ,  {-0.027233443305031316 }} ,
				{ 943 ,  {-0.0267361816739244 }} ,
				{ 1882 ,  {-0.02693986177050959 }} ,
				{ 1883 ,  {-0.02709458836964658 }} ,
				{ 1884 ,  {-0.027012313752306012 }} ,
				{ 1885 ,  {-0.0268365766697247 }} ,
				{ 3744 ,  {-0.026930370506382684 }} ,
				{ 3745 ,  {-0.02680327067412991 }} ,
				{ 3746 ,  {-0.02711410490710124 }} ,
				{ 3747 ,  {-0.02693073502030123 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_54 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_26 <= 9.500000000000002 ) ? ( 22 ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 92 ) : ( ( ( Feature_4 <= 6.500000000000001 ) ? ( 186 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( 374 ) : ( 375 ) ) ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 56 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 232 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 466 ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 934 ) : ( 935 ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 3744 ) : ( 3745 ) ) ) : ( ( ( Feature_14 <= 2.5000000000000004 ) ? ( 3746 ) : ( 3747 ) ) ) ) ) : ( 937 ) ) ) : ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 940 ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 1882 ) : ( 1883 ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 1884 ) : ( 1885 ) ) ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( 236 ) : ( ( ( Feature_41 <= 1.5000000000000002 ) ? ( 474 ) : ( 475 ) ) ) ) ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_12
	

	namespace LGBM_Tree_7_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.016378395639414824 }} ,
				{ 8 ,  {0.040314391568211816 }} ,
				{ 18 ,  {0.07482154284771723 }} ,
				{ 20 ,  {-0.02803254790258829 }} ,
				{ 23 ,  {-0.013284127256567989 }} ,
				{ 24 ,  {0.03725676824157462 }} ,
				{ 27 ,  {-0.027267659130601113 }} ,
				{ 38 ,  {0.060155828237812396 }} ,
				{ 39 ,  {0.07101220521602357 }} ,
				{ 42 ,  {0.031660564621078274 }} ,
				{ 43 ,  {0.06982393044357231 }} ,
				{ 44 ,  {-0.027207647072503602 }} ,
				{ 45 ,  {-0.028140763254518798 }} ,
				{ 51 ,  {-0.02739891926315906 }} ,
				{ 100 ,  {-0.027040708139461328 }} ,
				{ 101 ,  {-0.02683061881030816 }} ,
				{ 107 ,  {-0.026914790843213993 }} ,
				{ 210 ,  {-0.02670575575806644 }} ,
				{ 418 ,  {-0.027134314145912216 }} ,
				{ 423 ,  {-0.027020237861009933 }} ,
				{ 425 ,  {-0.026660346479957953 }} ,
				{ 427 ,  {-0.026920189824450838 }} ,
				{ 832 ,  {-0.026905548252385954 }} ,
				{ 833 ,  {-0.02709159528377767 }} ,
				{ 839 ,  {-0.026846803812515203 }} ,
				{ 844 ,  {-0.026705742703497994 }} ,
				{ 845 ,  {-0.026848152656572567 }} ,
				{ 849 ,  {-0.02681182708080451 }} ,
				{ 852 ,  {-0.026802265036211848 }} ,
				{ 853 ,  {-0.02665747306774185 }} ,
				{ 1669 ,  {-0.026868999252299693 }} ,
				{ 1670 ,  {-0.027002473091410795 }} ,
				{ 1671 ,  {-0.02686405380116715 }} ,
				{ 1676 ,  {-0.026864893945370068 }} ,
				{ 1677 ,  {-0.02708795797838383 }} ,
				{ 1696 ,  {-0.026754352794102793 }} ,
				{ 1697 ,  {-0.02669850141422533 }} ,
				{ 3336 ,  {-0.026708843022856657 }} ,
				{ 6674 ,  {-0.02676093030780323 }} ,
				{ 6675 ,  {-0.026897345916732752 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 8.500000000000002 ) ? ( ( ( Feature_30 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_37 <= 9.500000000000002 ) ? ( 18 ) : ( ( ( Feature_52 <= 8.500000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 20 ) : ( ( ( Feature_44 <= 11.500000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_14 <= 10.500000000000002 ) ? ( ( ( Feature_61 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 3.5000000000000004 ) ? ( 24 ) : ( ( ( Feature_10 <= 13.500000000000002 ) ? ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_6 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_51 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 10.500000000000002 ) ? ( ( ( Feature_11 <= 9.500000000000002 ) ? ( 832 ) : ( 833 ) ) ) : ( ( ( Feature_38 <= 6.500000000000001 ) ? ( ( ( Feature_12 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 1.5000000000000002 ) ? ( 3336 ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 6674 ) : ( 6675 ) ) ) ) ) : ( 1669 ) ) ) : ( ( ( Feature_37 <= 9.500000000000002 ) ? ( 1670 ) : ( 1671 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 418 ) : ( ( ( Feature_4 <= 14.500000000000002 ) ? ( ( ( Feature_37 <= 4.500000000000001 ) ? ( 1676 ) : ( 1677 ) ) ) : ( 839 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 210 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 844 ) : ( 845 ) ) ) : ( 423 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 10.500000000000002 ) ? ( ( ( Feature_45 <= 15.500000000000002 ) ? ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 1.0000000180025095e-35 ) ? ( 1696 ) : ( 1697 ) ) ) : ( 849 ) ) ) : ( 425 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( 852 ) : ( 853 ) ) ) : ( 427 ) ) ) ) ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_12
	

	namespace LGBM_Tree_8_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {-0.00040946501236649094 }} ,
				{ 21 ,  {-0.010427479860935243 }} ,
				{ 26 ,  {-0.026668778664062167 }} ,
				{ 27 ,  {-0.026816330696793574 }} ,
				{ 28 ,  {0.03483644573349632 }} ,
				{ 31 ,  {-0.027339091636682817 }} ,
				{ 36 ,  {0.0075881107415654405 }} ,
				{ 38 ,  {-0.026709292225609672 }} ,
				{ 44 ,  {0.003893135902940573 }} ,
				{ 46 ,  {-0.027278683224890576 }} ,
				{ 47 ,  {0.008339014896411503 }} ,
				{ 49 ,  {-0.026811954915027737 }} ,
				{ 50 ,  {-0.026962633397559627 }} ,
				{ 58 ,  {-0.02744009238060337 }} ,
				{ 59 ,  {-0.026944196604453786 }} ,
				{ 61 ,  {-0.026925290367179878 }} ,
				{ 74 ,  {-0.026711301804094114 }} ,
				{ 75 ,  {-0.026948382089524277 }} ,
				{ 78 ,  {-0.026994395593218853 }} ,
				{ 79 ,  {-0.026786926016601865 }} ,
				{ 80 ,  {-0.026904821959156822 }} ,
				{ 81 ,  {-0.026710508537275853 }} ,
				{ 82 ,  {-0.027429935948668174 }} ,
				{ 83 ,  {-0.0270890919481062 }} ,
				{ 96 ,  {-0.026744816016558783 }} ,
				{ 97 ,  {-0.02662454872479744 }} ,
				{ 102 ,  {-0.026728153180377752 }} ,
				{ 120 ,  {-0.02664993574928457 }} ,
				{ 180 ,  {-0.028071121580095518 }} ,
				{ 181 ,  {0.05827218038015422 }} ,
				{ 182 ,  {0.03724446634660714 }} ,
				{ 207 ,  {-0.026756388108824015 }} ,
				{ 242 ,  {-0.026849714570745593 }} ,
				{ 243 ,  {-0.02667217464278932 }} ,
				{ 367 ,  {0.06008161604910489 }} ,
				{ 412 ,  {-0.026980967423402082 }} ,
				{ 413 ,  {-0.026820348303582504 }} ,
				{ 732 ,  {0.07563013890160027 }} ,
				{ 1466 ,  {0.0720387949045476 }} ,
				{ 1467 ,  {0.0671813304370896 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 8 ) : ( ( ( Feature_36 <= 7.500000000000001 ) ? ( ( ( Feature_18 <= 7.500000000000001 ) ? ( 36 ) : ( ( ( Feature_28 <= 1.5000000000000002 ) ? ( 74 ) : ( 75 ) ) ) ) ) : ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( 38 ) : ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 80 ) : ( 81 ) ) ) : ( ( ( Feature_61 <= 6.500000000000001 ) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 21 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 44 ) : ( ( ( Feature_50 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 182 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( ( ( Feature_35 <= 14.500000000000002 ) ? ( 732 ) : ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( 1466 ) : ( 1467 ) ) ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 10.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_59 <= 12.500000000000002 ) ? ( 120 ) : ( ( ( Feature_61 <= 10.500000000000002 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_12
	

	namespace LGBM_Tree_9_12 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.025976364729879176 }} ,
				{ 10 ,  {-0.02109375607841397 }} ,
				{ 22 ,  {-0.017698700303349947 }} ,
				{ 24 ,  {0.003147341441690746 }} ,
				{ 26 ,  {-0.017044902877200657 }} ,
				{ 27 ,  {0.05654442393234607 }} ,
				{ 28 ,  {0.03130767006907398 }} ,
				{ 32 ,  {-0.02761845214807973 }} ,
				{ 35 ,  {0.030089212136993795 }} ,
				{ 46 ,  {0.002688565761326115 }} ,
				{ 50 ,  {-0.027407962773995 }} ,
				{ 51 ,  {-0.026888412237976778 }} ,
				{ 58 ,  {-0.027590266927254577 }} ,
				{ 60 ,  {-0.026978040757838558 }} ,
				{ 61 ,  {0.003739403925379146 }} ,
				{ 66 ,  {-0.02689109435304074 }} ,
				{ 67 ,  {-0.027165790140225278 }} ,
				{ 68 ,  {-0.027240932602365677 }} ,
				{ 69 ,  {-0.026976954138789273 }} ,
				{ 118 ,  {-0.027130188300264348 }} ,
				{ 119 ,  {-0.026872323434367764 }} ,
				{ 126 ,  {-0.027758417411786557 }} ,
				{ 127 ,  {-0.02702958992079878 }} ,
				{ 189 ,  {0.08293442360985459 }} ,
				{ 191 ,  {0.031245005130619764 }} ,
				{ 251 ,  {-0.026803188302788262 }} ,
				{ 376 ,  {0.0608419358965612 }} ,
				{ 377 ,  {0.07556695090209439 }} ,
				{ 380 ,  {0.06228981531972734 }} ,
				{ 381 ,  {0.06777731422286719 }} ,
				{ 497 ,  {-0.027182717972247045 }} ,
				{ 498 ,  {-0.02705074397790272 }} ,
				{ 499 ,  {-0.027436465341569762 }} ,
				{ 993 ,  {-0.02687191017929552 }} ,
				{ 1000 ,  {-0.02692701777399946 }} ,
				{ 1001 ,  {-0.026802443968264505 }} ,
				{ 1002 ,  {-0.02692733930808519 }} ,
				{ 1003 ,  {-0.027186574346375142 }} ,
				{ 1984 ,  {-0.027162145136586324 }} ,
				{ 1985 ,  {-0.0269169482013199 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 32 ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( Feature_26 <= 4.500000000000001 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 22 ) : ( ( ( Feature_18 <= 4.500000000000001 ) ? ( 46 ) : ( ( ( Feature_45 <= 11.500000000000002 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 376 ) : ( 377 ) ) ) : ( 189 ) ) ) : ( ( ( Feature_5 <= 12.500000000000002 ) ? ( ( ( Feature_59 <= 13.500000000000002 ) ? ( 380 ) : ( 381 ) ) ) : ( 191 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 24 ) : ( ( ( Feature_34 <= 7.500000000000001 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_20 <= 1.5000000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 28 ) : ( ( ( Feature_29 <= 5.500000000000001 ) ? ( 58 ) : ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 60 ) : ( 61 ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 1984 ) : ( 1985 ) ) ) : ( 993 ) ) ) : ( 497 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 498 ) : ( 499 ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_41 <= 3.5000000000000004 ) ? ( 1000 ) : ( 1001 ) ) ) : ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 1002 ) : ( 1003 ) ) ) ) ) : ( 251 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_12
	

	namespace LGBM_Tree_0_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.00971558687432321 }} ,
				{ 10 ,  {0.02031009878447668 }} ,
				{ 12 ,  {0.022114734781817066 }} ,
				{ 16 ,  {-0.029548929169269107 }} ,
				{ 17 ,  {-0.026782695911944595 }} ,
				{ 23 ,  {0.05475585211931645 }} ,
				{ 26 ,  {-0.026765846503936944 }} ,
				{ 27 ,  {-0.027224586922373218 }} ,
				{ 30 ,  {-0.026630393289816614 }} ,
				{ 45 ,  {0.06595798178545423 }} ,
				{ 89 ,  {0.0639682472731228 }} ,
				{ 114 ,  {-0.02677286270459693 }} ,
				{ 116 ,  {-0.026613178339128154 }} ,
				{ 117 ,  {-0.02673714884466994 }} ,
				{ 124 ,  {-0.02680215921153603 }} ,
				{ 126 ,  {-0.02672172564567862 }} ,
				{ 127 ,  {-0.02691505500734577 }} ,
				{ 176 ,  {0.06258990659950067 }} ,
				{ 224 ,  {-0.02671838679018254 }} ,
				{ 225 ,  {-0.02655935651689927 }} ,
				{ 230 ,  {-0.027122760341610725 }} ,
				{ 236 ,  {-0.026627180553644866 }} ,
				{ 237 ,  {-0.026811261767833494 }} ,
				{ 239 ,  {-0.02693573145835572 }} ,
				{ 250 ,  {-0.026707140305811724 }} ,
				{ 251 ,  {-0.026584068079611212 }} ,
				{ 354 ,  {0.060833797812105184 }} ,
				{ 355 ,  {0.06192749656573383 }} ,
				{ 452 ,  {-0.0266182514038444 }} ,
				{ 453 ,  {-0.026841074393446875 }} ,
				{ 462 ,  {-0.026979511017699454 }} ,
				{ 463 ,  {-0.0267869272179038 }} ,
				{ 476 ,  {-0.026847208732923428 }} ,
				{ 477 ,  {-0.02668007065932132 }} ,
				{ 908 ,  {-0.02661739193341639 }} ,
				{ 909 ,  {-0.026759645132398854 }} ,
				{ 910 ,  {-0.02704458165839657 }} ,
				{ 1823 ,  {-0.02691812775601661 }} ,
				{ 3644 ,  {-0.026839403985250546 }} ,
				{ 3645 ,  {-0.026642028346357045 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( ( ( Feature_20 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 176 ) : ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_28 <= 6.500000000000001 ) ? ( 12 ) : ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( 908 ) : ( 909 ) ) ) : ( ( ( Feature_44 <= 8.500000000000002 ) ? ( 910 ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_27 <= 14.500000000000002 ) ? ( 3644 ) : ( 3645 ) ) ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 3.5000000000000004 ) ? ( 114 ) : ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 230 ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_43 <= 14.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 30 ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 124 ) : ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_13
	

	namespace LGBM_Tree_1_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03694361118540132 }} ,
				{ 10 ,  {-0.004775292078348135 }} ,
				{ 13 ,  {0.05929985189952758 }} ,
				{ 15 ,  {-0.02855501594356995 }} ,
				{ 25 ,  {-0.001144368872754213 }} ,
				{ 29 ,  {0.014214663572222275 }} ,
				{ 57 ,  {0.035684030577755134 }} ,
				{ 92 ,  {-0.02678191194765621 }} ,
				{ 93 ,  {-0.02696870960294411 }} ,
				{ 95 ,  {-0.026735487220100912 }} ,
				{ 97 ,  {-0.027173662888164724 }} ,
				{ 98 ,  {-0.028336679101385865 }} ,
				{ 99 ,  {-0.02701207658808052 }} ,
				{ 112 ,  {0.05885336819986245 }} ,
				{ 177 ,  {-0.027021652495747485 }} ,
				{ 178 ,  {-0.027341028683811875 }} ,
				{ 180 ,  {-0.02693663274032996 }} ,
				{ 189 ,  {-0.026747727158122597 }} ,
				{ 193 ,  {-0.027064521397673836 }} ,
				{ 226 ,  {0.07362738840986364 }} ,
				{ 352 ,  {-0.026929956593715346 }} ,
				{ 353 ,  {-0.02677096678032817 }} ,
				{ 358 ,  {-0.026914360867109854 }} ,
				{ 359 ,  {-0.027175805632708133 }} ,
				{ 362 ,  {-0.02666707270192253 }} ,
				{ 363 ,  {-0.026759411487236685 }} ,
				{ 366 ,  {-0.027161155706199938 }} ,
				{ 367 ,  {-0.02684566166040794 }} ,
				{ 376 ,  {-0.026778847982147524 }} ,
				{ 377 ,  {-0.02692572053396366 }} ,
				{ 384 ,  {-0.026897495980430675 }} ,
				{ 385 ,  {-0.026729086084580796 }} ,
				{ 454 ,  {0.06778667732746069 }} ,
				{ 455 ,  {0.0641891831109784 }} ,
				{ 728 ,  {-0.02674508008030793 }} ,
				{ 729 ,  {-0.026849671170638318 }} ,
				{ 731 ,  {-0.026807868780714172 }} ,
				{ 1461 ,  {-0.027075522875654824 }} ,
				{ 2920 ,  {-0.026996881320589135 }} ,
				{ 2921 ,  {-0.02685852843054904 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_3 <= 2.5000000000000004 ) ? ( 4 ) : ( ( ( Feature_10 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 3.5000000000000004 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 9.500000000000002 ) ? ( 352 ) : ( 353 ) ) ) : ( 177 ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( 178 ) : ( ( ( Feature_46 <= 3.5000000000000004 ) ? ( 358 ) : ( 359 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( 180 ) : ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 362 ) : ( 363 ) ) ) ) ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 728 ) : ( 729 ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 2920 ) : ( 2921 ) ) ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 366 ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_38 <= 4.500000000000001 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 14.500000000000002 ) ? ( 376 ) : ( 377 ) ) ) : ( 189 ) ) ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 11.500000000000002 ) ? ( ( ( Feature_63 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 12.500000000000002 ) ? ( ( ( Feature_5 <= 1.0000000180025095e-35 ) ? ( 384 ) : ( 385 ) ) ) : ( 193 ) ) ) : ( 97 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_9 <= 2.5000000000000004 ) ? ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( ( ( Feature_50 <= 11.500000000000002 ) ? ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( 112 ) : ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 226 ) : ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 454 ) : ( 455 ) ) ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_13
	

	namespace LGBM_Tree_2_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.02756150619415238 }} ,
				{ 10 ,  {0.023290861337157895 }} ,
				{ 16 ,  {0.027363880566844953 }} ,
				{ 26 ,  {0.018653953783540782 }} ,
				{ 27 ,  {-0.027979652102376296 }} ,
				{ 35 ,  {-0.02914887033503269 }} ,
				{ 36 ,  {-0.027046797222262678 }} ,
				{ 37 ,  {-0.0009320186537244892 }} ,
				{ 39 ,  {0.0009562821894371105 }} ,
				{ 45 ,  {-0.027011511647017733 }} ,
				{ 46 ,  {-0.026881665763484337 }} ,
				{ 47 ,  {-0.027301497173721635 }} ,
				{ 49 ,  {-0.03080626117545886 }} ,
				{ 68 ,  {-0.02719210198855699 }} ,
				{ 69 ,  {-0.026768053112200346 }} ,
				{ 76 ,  {0.04037436854939284 }} ,
				{ 88 ,  {-0.02678182857645203 }} ,
				{ 89 ,  {-0.026914424246394755 }} ,
				{ 97 ,  {-0.027464168454527788 }} ,
				{ 103 ,  {-0.027066805033647195 }} ,
				{ 154 ,  {0.0794265440339369 }} ,
				{ 192 ,  {-0.026831343676303333 }} ,
				{ 193 ,  {-0.02706154377050611 }} ,
				{ 203 ,  {-0.027637728809016535 }} ,
				{ 205 ,  {-0.026734339175524542 }} ,
				{ 310 ,  {0.07199753512635192 }} ,
				{ 400 ,  {-0.0268123523858465 }} ,
				{ 401 ,  {-0.02702998418632705 }} ,
				{ 403 ,  {-0.027263178835197494 }} ,
				{ 404 ,  {-0.027470360512523946 }} ,
				{ 409 ,  {-0.026803525579125093 }} ,
				{ 622 ,  {0.060437355036962494 }} ,
				{ 623 ,  {0.06265930502409504 }} ,
				{ 805 ,  {-0.026824677319649094 }} ,
				{ 810 ,  {-0.02709033018347694 }} ,
				{ 811 ,  {-0.026850333024684904 }} ,
				{ 816 ,  {-0.0268335397017993 }} ,
				{ 817 ,  {-0.02708277706607371 }} ,
				{ 1608 ,  {-0.026967485949351062 }} ,
				{ 1609 ,  {-0.0272477249649643 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 11.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_45 <= 10.500000000000002 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 76 ) : ( ( ( Feature_62 <= 3.5000000000000004 ) ? ( 154 ) : ( ( ( Feature_4 <= 5.500000000000001 ) ? ( 310 ) : ( ( ( Feature_4 <= 13.500000000000002 ) ? ( 622 ) : ( 623 ) ) ) ) ) ) ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_28 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( 45 ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_9 <= 7.500000000000001 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_46 <= 4.500000000000001 ) ? ( 1608 ) : ( 1609 ) ) ) : ( 805 ) ) ) : ( 403 ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 404 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_51 <= 9.500000000000002 ) ? ( 816 ) : ( 817 ) ) ) : ( 409 ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_13
	

	namespace LGBM_Tree_3_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.027638023694772626 }} ,
				{ 12 ,  {-0.015245558175199129 }} ,
				{ 16 ,  {0.008608735439424973 }} ,
				{ 20 ,  {-0.019281215393190148 }} ,
				{ 21 ,  {0.052200020961433 }} ,
				{ 22 ,  {0.014834775210768892 }} ,
				{ 26 ,  {-0.027197305801714835 }} ,
				{ 28 ,  {-0.010719910070457861 }} ,
				{ 30 ,  {0.05489718332533408 }} ,
				{ 31 ,  {-0.02749107311080149 }} ,
				{ 34 ,  {0.045147401137012044 }} ,
				{ 47 ,  {-0.027411481943000856 }} ,
				{ 59 ,  {-0.02712961951289814 }} ,
				{ 109 ,  {-0.02669076593000357 }} ,
				{ 116 ,  {-0.027030514655549856 }} ,
				{ 140 ,  {0.06581291430787921 }} ,
				{ 141 ,  {0.06937676393312316 }} ,
				{ 142 ,  {0.05942435265365035 }} ,
				{ 143 ,  {0.06499145011192958 }} ,
				{ 186 ,  {-0.02686339606497123 }} ,
				{ 187 ,  {-0.026744025113987747 }} ,
				{ 216 ,  {-0.02673736870874931 }} ,
				{ 217 ,  {-0.026922121750511625 }} ,
				{ 234 ,  {-0.02692045652620071 }} ,
				{ 235 ,  {-0.02671489296403819 }} ,
				{ 368 ,  {-0.026925624602439725 }} ,
				{ 369 ,  {-0.026740792199577063 }} ,
				{ 370 ,  {-0.026922084484431476 }} ,
				{ 371 ,  {-0.027169371645549237 }} ,
				{ 442 ,  {-0.02695036428079275 }} ,
				{ 444 ,  {-0.026820228617288146 }} ,
				{ 445 ,  {-0.026707931411030367 }} ,
				{ 446 ,  {-0.02701177093418243 }} ,
				{ 447 ,  {-0.026802132492585885 }} ,
				{ 880 ,  {-0.027003407773018767 }} ,
				{ 881 ,  {-0.02680331637671876 }} ,
				{ 882 ,  {-0.027200521542907315 }} ,
				{ 883 ,  {-0.026984981641874545 }} ,
				{ 886 ,  {-0.02687348571432976 }} ,
				{ 887 ,  {-0.02672473455065957 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 3.5000000000000004 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 140 ) : ( 141 ) ) ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_4 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_50 <= 8.500000000000002 ) ? ( ( ( Feature_60 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 368 ) : ( 369 ) ) ) : ( ( ( Feature_13 <= 8.500000000000002 ) ? ( 370 ) : ( 371 ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( Feature_53 <= 2.5000000000000004 ) ? ( 442 ) : ( ( ( Feature_35 <= 7.500000000000001 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( 28 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 6.500000000000001 ) ? ( 116 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_13
	

	namespace LGBM_Tree_4_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.024603768827116707 }} ,
				{ 12 ,  {0.02332658764155377 }} ,
				{ 14 ,  {-0.009023548456803069 }} ,
				{ 16 ,  {0.05087809112302635 }} ,
				{ 18 ,  {0.0011337504368239331 }} ,
				{ 26 ,  {-0.01351590494656941 }} ,
				{ 31 ,  {0.030739876805180113 }} ,
				{ 34 ,  {-0.013689214889027176 }} ,
				{ 55 ,  {-0.028208327831930724 }} ,
				{ 61 ,  {0.07493929687430366 }} ,
				{ 71 ,  {-0.027644733924859683 }} ,
				{ 77 ,  {-0.027939401708450218 }} ,
				{ 79 ,  {-0.027359614430573886 }} ,
				{ 121 ,  {0.06674015433530149 }} ,
				{ 152 ,  {-0.027120409802105352 }} ,
				{ 153 ,  {-0.02683619388360946 }} ,
				{ 216 ,  {-0.02682082400211729 }} ,
				{ 217 ,  {-0.027042717008525854 }} ,
				{ 218 ,  {-0.027849034275565083 }} ,
				{ 219 ,  {-0.027026481178238495 }} ,
				{ 240 ,  {0.0614111395025609 }} ,
				{ 241 ,  {0.05453872775519669 }} ,
				{ 280 ,  {-0.02701837436935238 }} ,
				{ 281 ,  {-0.027453542119726677 }} ,
				{ 282 ,  {-0.02694169481945525 }} ,
				{ 283 ,  {-0.027175611007302754 }} ,
				{ 626 ,  {-0.026834012402666103 }} ,
				{ 627 ,  {-0.02699676554599377 }} ,
				{ 628 ,  {-0.02680596059243691 }} ,
				{ 629 ,  {-0.026957148161648417 }} ,
				{ 630 ,  {-0.027131087521939313 }} ,
				{ 1248 ,  {-0.026901085619753573 }} ,
				{ 1250 ,  {-0.02701641228975526 }} ,
				{ 1251 ,  {-0.026819389160742942 }} ,
				{ 1262 ,  {-0.02703223072999312 }} ,
				{ 1263 ,  {-0.026843098907091564 }} ,
				{ 4996 ,  {-0.02711009074673137 }} ,
				{ 4997 ,  {-0.026903971008877967 }} ,
				{ 4998 ,  {-0.02709532961283911 }} ,
				{ 4999 ,  {-0.027274377734816516 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_41 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 1.0000000180025095e-35 ) ? ( 16 ) : ( ( ( Feature_52 <= 5.500000000000001 ) ? ( 34 ) : ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 280 ) : ( 281 ) ) ) : ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 152 ) : ( 153 ) ) ) : ( 77 ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_35 <= 1.0000000180025095e-35 ) ? ( 1248 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 10.500000000000002 ) ? ( 4996 ) : ( 4997 ) ) ) : ( ( ( Feature_43 <= 9.500000000000002 ) ? ( 4998 ) : ( 4999 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 6.500000000000001 ) ? ( 1250 ) : ( 1251 ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( 626 ) : ( 627 ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_14 <= 5.500000000000001 ) ? ( 628 ) : ( 629 ) ) ) : ( ( ( Feature_13 <= 2.5000000000000004 ) ? ( 630 ) : ( ( ( Feature_37 <= 8.500000000000002 ) ? ( 1262 ) : ( 1263 ) ) ) ) ) ) ) ) ) : ( 79 ) ) ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 9.500000000000002 ) ? ( 12 ) : ( ( ( Feature_12 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_44 <= 6.500000000000001 ) ? ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 15.500000000000002 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_13
	

	namespace LGBM_Tree_5_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {-0.012092506373415692 }} ,
				{ 15 ,  {0.03335397534630457 }} ,
				{ 16 ,  {0.029103522964476904 }} ,
				{ 17 ,  {-0.027313218075731806 }} ,
				{ 19 ,  {-0.027133852939723938 }} ,
				{ 23 ,  {0.047054734769465145 }} ,
				{ 24 ,  {0.004512777031299862 }} ,
				{ 28 ,  {-0.027230927691847137 }} ,
				{ 36 ,  {-0.026924690116349865 }} ,
				{ 37 ,  {-0.026745752864470052 }} ,
				{ 45 ,  {0.05403894684819478 }} ,
				{ 50 ,  {-0.026727924625339145 }} ,
				{ 59 ,  {-0.02688337103716817 }} ,
				{ 89 ,  {0.07320397364272829 }} ,
				{ 102 ,  {-0.02705479834392386 }} ,
				{ 103 ,  {-0.026831016614302733 }} ,
				{ 116 ,  {-0.026830728179177463 }} ,
				{ 117 ,  {-0.026707743884386466 }} ,
				{ 176 ,  {0.06525934040600007 }} ,
				{ 208 ,  {-0.02676317848883259 }} ,
				{ 209 ,  {-0.026665869897222652 }} ,
				{ 210 ,  {-0.026736728014657776 }} ,
				{ 211 ,  {-0.026893985346778494 }} ,
				{ 212 ,  {-0.026747092734412725 }} ,
				{ 213 ,  {-0.02709138766460452 }} ,
				{ 214 ,  {-0.026728989377751835 }} ,
				{ 217 ,  {-0.027018537114144488 }} ,
				{ 218 ,  {-0.0267402913688662 }} ,
				{ 219 ,  {-0.02688620296781279 }} ,
				{ 220 ,  {-0.027270925401203096 }} ,
				{ 221 ,  {-0.02697509951153885 }} ,
				{ 222 ,  {-0.026756743824826724 }} ,
				{ 354 ,  {0.06235358962419925 }} ,
				{ 355 ,  {0.06063413643473275 }} ,
				{ 430 ,  {-0.026919314634189236 }} ,
				{ 431 ,  {-0.026749742170093904 }} ,
				{ 432 ,  {-0.026953167324927488 }} ,
				{ 433 ,  {-0.026768841649161747 }} ,
				{ 446 ,  {-0.02713052503329651 }} ,
				{ 447 ,  {-0.02685663661816587 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_2 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 176 ) : ( ( ( Feature_58 <= 12.500000000000002 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_20 <= 6.500000000000001 ) ? ( 50 ) : ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 102 ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 214 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 10.500000000000002 ) ? ( 220 ) : ( 221 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 222 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_13
	

	namespace LGBM_Tree_6_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.007794742264887156 }} ,
				{ 8 ,  {-0.008871909112781566 }} ,
				{ 10 ,  {-0.027105379696709356 }} ,
				{ 15 ,  {-0.009791313679511667 }} ,
				{ 19 ,  {-0.026667100982330372 }} ,
				{ 23 ,  {0.015423636801934884 }} ,
				{ 37 ,  {-0.026722993215745186 }} ,
				{ 45 ,  {0.05151415943300637 }} ,
				{ 57 ,  {-0.00916446791805643 }} ,
				{ 72 ,  {-0.026980318233923835 }} ,
				{ 73 ,  {-0.027170836930161226 }} ,
				{ 88 ,  {0.07200745999814034 }} ,
				{ 112 ,  {-0.026885131278113435 }} ,
				{ 113 ,  {-0.027062542412476576 }} ,
				{ 179 ,  {0.0654649859509185 }} ,
				{ 237 ,  {-0.026665068933696735 }} ,
				{ 238 ,  {-0.026904947291854244 }} ,
				{ 239 ,  {-0.02674953740084155 }} ,
				{ 356 ,  {0.05593561795124761 }} ,
				{ 464 ,  {-0.026652909571974765 }} ,
				{ 465 ,  {-0.026787276823748027 }} ,
				{ 471 ,  {-0.02673938567197111 }} ,
				{ 473 ,  {-0.026895148179106244 }} ,
				{ 714 ,  {0.06231551594081777 }} ,
				{ 715 ,  {0.06029537459528357 }} ,
				{ 932 ,  {-0.026805873839289368 }} ,
				{ 933 ,  {-0.027098821648747873 }} ,
				{ 936 ,  {-0.026998553358404283 }} ,
				{ 938 ,  {-0.027185147607649025 }} ,
				{ 939 ,  {-0.026931158390288673 }} ,
				{ 940 ,  {-0.026808405396096593 }} ,
				{ 941 ,  {-0.026951172922757977 }} ,
				{ 944 ,  {-0.026776360651177097 }} ,
				{ 945 ,  {-0.02661899412258585 }} ,
				{ 1868 ,  {-0.02668771085397701 }} ,
				{ 1869 ,  {-0.02682369699351212 }} ,
				{ 1870 ,  {-0.02667461952399383 }} ,
				{ 1871 ,  {-0.026919899149713846 }} ,
				{ 1874 ,  {-0.026715100479975124 }} ,
				{ 1875 ,  {-0.026914611410912 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_61 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_49 <= 1.5000000000000002 ) ? ( ( ( Feature_50 <= 13.500000000000002 ) ? ( ( ( Feature_37 <= 4.500000000000001 ) ? ( 88 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_61 <= 12.500000000000002 ) ? ( 356 ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 714 ) : ( 715 ) ) ) ) ) : ( 179 ) ) ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 112 ) : ( 113 ) ) ) : ( 57 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 1868 ) : ( 1869 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( ( ( Feature_37 <= 11.500000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( 944 ) : ( 945 ) ) ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_13
	

	namespace LGBM_Tree_7_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.03842943821476266 }} ,
				{ 8 ,  {0.017749221831285137 }} ,
				{ 12 ,  {0.0017229893761474676 }} ,
				{ 18 ,  {-0.028085717237316135 }} ,
				{ 19 ,  {-0.026876318323047595 }} ,
				{ 21 ,  {0.03101408657878288 }} ,
				{ 22 ,  {0.047100181550845596 }} ,
				{ 40 ,  {0.07255486251949016 }} ,
				{ 46 ,  {-0.02792572568894648 }} ,
				{ 47 ,  {-0.026829998620884882 }} ,
				{ 52 ,  {-0.013341006799608736 }} ,
				{ 55 ,  {0.01876904223141057 }} ,
				{ 107 ,  {-0.028312001847254877 }} ,
				{ 108 ,  {-0.026777414051887327 }} ,
				{ 109 ,  {-0.027675319581796084 }} ,
				{ 164 ,  {0.06931243522530511 }} ,
				{ 165 ,  {0.06370948452066398 }} ,
				{ 166 ,  {0.05949843176466955 }} ,
				{ 167 ,  {0.06306664627023448 }} ,
				{ 212 ,  {-0.027884016160763938 }} ,
				{ 854 ,  {-0.026633926102719765 }} ,
				{ 1704 ,  {-0.027176877019630105 }} ,
				{ 1705 ,  {-0.026933742499907726 }} ,
				{ 1711 ,  {-0.026650130431512112 }} ,
				{ 3420 ,  {-0.026722196992800512 }} ,
				{ 3421 ,  {-0.027004554638837004 }} ,
				{ 6824 ,  {-0.026983637994701534 }} ,
				{ 6828 ,  {-0.026738723461420727 }} ,
				{ 6829 ,  {-0.02664615541444071 }} ,
				{ 6830 ,  {-0.026726527494178226 }} ,
				{ 6831 ,  {-0.026904586721394785 }} ,
				{ 13650 ,  {-0.02667514455457833 }} ,
				{ 13652 ,  {-0.026911252665900238 }} ,
				{ 13653 ,  {-0.027140641413147672 }} ,
				{ 13654 ,  {-0.02667386762468138 }} ,
				{ 13655 ,  {-0.02687658718502596 }} ,
				{ 27303 ,  {-0.02670511974832261 }} ,
				{ 54604 ,  {-0.026695207242597614 }} ,
				{ 109210 ,  {-0.02685115698485558 }} ,
				{ 109211 ,  {-0.02702155773208218 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 8 ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 40 ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( ( ( Feature_6 <= 4.500000000000001 ) ? ( 164 ) : ( 165 ) ) ) : ( ( ( Feature_14 <= 1.0000000180025095e-35 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 22 ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 12 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( 52 ) : ( ( ( Feature_6 <= 9.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 212 ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 9.500000000000002 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 1704 ) : ( 1705 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 10.500000000000002 ) ? ( 6824 ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 13650 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( 54604 ) : ( ( ( Feature_38 <= 4.500000000000001 ) ? ( 109210 ) : ( 109211 ) ) ) ) ) : ( 27303 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( 13652 ) : ( 13653 ) ) ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 13654 ) : ( 13655 ) ) ) ) ) ) ) : ( ( ( Feature_52 <= 14.500000000000002 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 6828 ) : ( 6829 ) ) ) : ( ( ( Feature_21 <= 12.500000000000002 ) ? ( 6830 ) : ( 6831 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 854 ) : ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 3420 ) : ( 3421 ) ) ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( Feature_35 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_13
	

	namespace LGBM_Tree_8_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.026231801423536174 }} ,
				{ 18 ,  {-0.006738489408452373 }} ,
				{ 21 ,  {-0.009893092757524249 }} ,
				{ 26 ,  {-0.026606038242631858 }} ,
				{ 27 ,  {-0.026758562701337786 }} ,
				{ 29 ,  {-0.01067447015362598 }} ,
				{ 31 ,  {0.05330489081066991 }} ,
				{ 32 ,  {-0.026789009882188804 }} ,
				{ 33 ,  {-0.027222471763150843 }} ,
				{ 38 ,  {-0.026866050968587657 }} ,
				{ 41 ,  {-0.02733008322177007 }} ,
				{ 44 ,  {-0.0024763784215045288 }} ,
				{ 48 ,  {-0.026603059399337665 }} ,
				{ 49 ,  {-0.02676337691973525 }} ,
				{ 56 ,  {-0.02706303452281681 }} ,
				{ 60 ,  {-0.027442138783153488 }} ,
				{ 61 ,  {-0.026766214789180415 }} ,
				{ 78 ,  {-0.026627828920730373 }} ,
				{ 80 ,  {-0.02695331919220073 }} ,
				{ 81 ,  {-0.026695026094062026 }} ,
				{ 90 ,  {0.0012691992958038976 }} ,
				{ 92 ,  {-0.02825444176359624 }} ,
				{ 93 ,  {-0.027001391837336953 }} ,
				{ 94 ,  {0.04466349896685391 }} ,
				{ 95 ,  {-0.013070424895004602 }} ,
				{ 100 ,  {-0.02693828247044976 }} ,
				{ 101 ,  {-0.026709013079384055 }} ,
				{ 102 ,  {-0.026641718009579575 }} ,
				{ 114 ,  {-0.026854976448617875 }} ,
				{ 115 ,  {-0.026635587439685193 }} ,
				{ 158 ,  {-0.026678863539623877 }} ,
				{ 159 ,  {-0.026827330084076617 }} ,
				{ 183 ,  {0.0495592893680009 }} ,
				{ 207 ,  {-0.02665932500029332 }} ,
				{ 364 ,  {0.053888742779125066 }} ,
				{ 412 ,  {-0.026864569981165307 }} ,
				{ 413 ,  {-0.0267048852769051 }} ,
				{ 731 ,  {0.06376760220964554 }} ,
				{ 1460 ,  {0.06932695020562629 }} ,
				{ 1461 ,  {0.0870273400974599 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_12 <= 9.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 38 ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 78 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 158 ) : ( 159 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_25 <= 2.5000000000000004 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( 80 ) : ( 81 ) ) ) : ( 41 ) ) ) : ( 21 ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 44 ) : ( ( ( Feature_60 <= 5.500000000000001 ) ? ( 90 ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( ( ( Feature_10 <= 6.500000000000001 ) ? ( 364 ) : ( ( ( Feature_42 <= 13.500000000000002 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 15.500000000000002 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( 48 ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 100 ) : ( 101 ) ) ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 102 ) : ( ( ( Feature_3 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_10 <= 9.500000000000002 ) ? ( ( ( Feature_41 <= 1.0000000180025095e-35 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_13
	

	namespace LGBM_Tree_9_13 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 13 ,  {0.030722446999786258 }} ,
				{ 18 ,  {0.04323009653802767 }} ,
				{ 19 ,  {-0.027329290144137458 }} ,
				{ 20 ,  {-0.014026875878525148 }} ,
				{ 22 ,  {-0.013134389862783154 }} ,
				{ 23 ,  {-0.027599669806900724 }} ,
				{ 24 ,  {-0.027553877113646104 }} ,
				{ 28 ,  {0.003999976019789463 }} ,
				{ 33 ,  {-0.026817280078832856 }} ,
				{ 35 ,  {0.023695804104374583 }} ,
				{ 42 ,  {-0.01659795297776957 }} ,
				{ 50 ,  {-0.02705110054533094 }} ,
				{ 51 ,  {-0.026795742209144775 }} ,
				{ 58 ,  {-0.027062641199661053 }} ,
				{ 59 ,  {-0.026816748753454578 }} ,
				{ 62 ,  {-0.027682946385429938 }} ,
				{ 63 ,  {-0.026960792237724948 }} ,
				{ 64 ,  {-0.02760233742502873 }} ,
				{ 65 ,  {-0.026921738207332364 }} ,
				{ 68 ,  {-0.00859096846760563 }} ,
				{ 86 ,  {0.025493330237298484 }} ,
				{ 123 ,  {-0.02673546339702798 }} ,
				{ 138 ,  {-0.02759158773046823 }} ,
				{ 139 ,  {-0.027004037416543114 }} ,
				{ 174 ,  {0.07775183940584415 }} ,
				{ 242 ,  {-0.0273387340526344 }} ,
				{ 243 ,  {-0.027036587350200383 }} ,
				{ 244 ,  {-0.02679436615303793 }} ,
				{ 351 ,  {0.04766981704717932 }} ,
				{ 481 ,  {-0.026796131719957286 }} ,
				{ 482 ,  {-0.026904664644138862 }} ,
				{ 483 ,  {-0.02725623401147291 }} ,
				{ 490 ,  {-0.026865317979957688 }} ,
				{ 491 ,  {-0.027119286195852174 }} ,
				{ 701 ,  {0.06045106494380921 }} ,
				{ 960 ,  {-0.02712119493331307 }} ,
				{ 1400 ,  {0.07402329944386353 }} ,
				{ 1401 ,  {0.06812360336577815 }} ,
				{ 1922 ,  {-0.026985429359532673 }} ,
				{ 1923 ,  {-0.02678662038005374 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_36 <= 10.500000000000002 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 42 ) : ( ( ( Feature_27 <= 5.500000000000001 ) ? ( 86 ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 174 ) : ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( ( ( Feature_37 <= 12.500000000000002 ) ? ( 1400 ) : ( 1401 ) ) ) : ( 701 ) ) ) : ( 351 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_34 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 28 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 7.500000000000001 ) ? ( 960 ) : ( ( ( Feature_36 <= 10.500000000000002 ) ? ( 1922 ) : ( 1923 ) ) ) ) ) : ( 481 ) ) ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 482 ) : ( 483 ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 244 ) : ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_13
	

	namespace LGBM_Tree_0_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.023744592921753 }} ,
				{ 11 ,  {-0.0272086555902086 }} ,
				{ 13 ,  {0.021905387413978693 }} ,
				{ 20 ,  {-0.02680259178599194 }} ,
				{ 21 ,  {-0.02661124940871771 }} ,
				{ 24 ,  {-0.02671600376852879 }} ,
				{ 25 ,  {-0.027254220924818325 }} ,
				{ 30 ,  {-0.026569083712371596 }} ,
				{ 32 ,  {0.04666535580747135 }} ,
				{ 33 ,  {0.05940158483757553 }} ,
				{ 35 ,  {0.06517197940187419 }} ,
				{ 58 ,  {-0.026577009363644113 }} ,
				{ 69 ,  {0.06133464288050949 }} ,
				{ 114 ,  {-0.0267159030286453 }} ,
				{ 124 ,  {-0.0267512188652326 }} ,
				{ 126 ,  {-0.02666714353828365 }} ,
				{ 127 ,  {-0.026858381987674314 }} ,
				{ 136 ,  {0.05893214204108256 }} ,
				{ 137 ,  {0.05795926392501061 }} ,
				{ 224 ,  {-0.026660228222366324 }} ,
				{ 225 ,  {-0.026502345435573754 }} ,
				{ 230 ,  {-0.02707391120216463 }} ,
				{ 236 ,  {-0.02656340565176433 }} ,
				{ 237 ,  {-0.026760638736559872 }} ,
				{ 250 ,  {-0.026648849971380197 }} ,
				{ 251 ,  {-0.026521719640564267 }} ,
				{ 452 ,  {-0.02655463085306356 }} ,
				{ 453 ,  {-0.02678117771728752 }} ,
				{ 454 ,  {-0.026641480151351954 }} ,
				{ 462 ,  {-0.02692876932794984 }} ,
				{ 463 ,  {-0.026732893988230658 }} ,
				{ 476 ,  {-0.026686546068661932 }} ,
				{ 477 ,  {-0.02691378202736971 }} ,
				{ 478 ,  {-0.02659198548141561 }} ,
				{ 910 ,  {-0.026949403486382112 }} ,
				{ 958 ,  {-0.026605294791664222 }} ,
				{ 959 ,  {-0.026795774953537244 }} ,
				{ 1822 ,  {-0.026577369443289447 }} ,
				{ 3646 ,  {-0.026879269457234834 }} ,
				{ 3647 ,  {-0.026725372867508968 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( ( ( Feature_44 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 14.500000000000002 ) ? ( ( ( Feature_38 <= 7.500000000000001 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_5 <= 4.500000000000001 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( ( ( Feature_30 <= 7.500000000000001 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 454 ) : ( ( ( Feature_44 <= 11.500000000000002 ) ? ( 910 ) : ( ( ( Feature_29 <= 2.5000000000000004 ) ? ( 1822 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 3646 ) : ( 3647 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_37 <= 3.5000000000000004 ) ? ( 114 ) : ( ( ( Feature_53 <= 9.500000000000002 ) ? ( 230 ) : ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 462 ) : ( 463 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 10.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( ( ( Feature_58 <= 10.500000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 478 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 958 ) : ( 959 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( 30 ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 124 ) : ( ( ( Feature_27 <= 11.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 126 ) : ( 127 ) ) ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_14
	

	namespace LGBM_Tree_1_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.029558721287080147 }} ,
				{ 10 ,  {-0.012369099564416841 }} ,
				{ 13 ,  {0.06302022774040827 }} ,
				{ 15 ,  {-0.013156344691764946 }} ,
				{ 25 ,  {0.002273374669008757 }} ,
				{ 29 ,  {0.07567265544855271 }} ,
				{ 47 ,  {-0.026849256205314573 }} ,
				{ 48 ,  {-0.012490266332653249 }} ,
				{ 57 ,  {-0.011080553873687539 }} ,
				{ 93 ,  {-0.02682023338139053 }} ,
				{ 112 ,  {0.030563489163388392 }} ,
				{ 176 ,  {-0.02674339774536081 }} ,
				{ 179 ,  {-0.027112219610581384 }} ,
				{ 180 ,  {-0.02682721589277014 }} ,
				{ 181 ,  {-0.02665162759345932 }} ,
				{ 185 ,  {-0.026600114210644128 }} ,
				{ 196 ,  {-0.027273370142484096 }} ,
				{ 197 ,  {-0.02846276004500958 }} ,
				{ 198 ,  {-0.027189258796131523 }} ,
				{ 226 ,  {0.06332751529666612 }} ,
				{ 227 ,  {0.055685125567885456 }} ,
				{ 355 ,  {-0.027039386199981936 }} ,
				{ 356 ,  {-0.027046017560206154 }} ,
				{ 357 ,  {-0.026808416432131606 }} ,
				{ 364 ,  {-0.02669065047185308 }} ,
				{ 367 ,  {-0.026743231234799214 }} ,
				{ 398 ,  {-0.026910317970808634 }} ,
				{ 708 ,  {-0.026660580468028845 }} ,
				{ 709 ,  {-0.026965939367298488 }} ,
				{ 731 ,  {-0.02673145742428773 }} ,
				{ 732 ,  {-0.02685706236529601 }} ,
				{ 733 ,  {-0.027080460669600806 }} ,
				{ 736 ,  {-0.02670947062988703 }} ,
				{ 737 ,  {-0.026628038195777266 }} ,
				{ 738 ,  {-0.026843543708091763 }} ,
				{ 739 ,  {-0.026685504619875722 }} ,
				{ 798 ,  {-0.026654372538266375 }} ,
				{ 799 ,  {-0.0267949882317793 }} ,
				{ 1460 ,  {-0.027013840818404068 }} ,
				{ 1461 ,  {-0.026829149872978065 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( 4 ) : ( ( ( Feature_59 <= 4.500000000000001 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 176 ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( 708 ) : ( 709 ) ) ) : ( 355 ) ) ) ) ) : ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_59 <= 13.500000000000002 ) ? ( 356 ) : ( 357 ) ) ) : ( 179 ) ) ) ) ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_5 <= 7.500000000000001 ) ? ( 180 ) : ( 181 ) ) ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( 364 ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( 1460 ) : ( 1461 ) ) ) : ( 731 ) ) ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( 732 ) : ( 733 ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_61 <= 15.500000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( 736 ) : ( 737 ) ) ) : ( ( ( Feature_3 <= 14.500000000000002 ) ? ( 738 ) : ( 739 ) ) ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_63 <= 1.5000000000000002 ) ? ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_12 <= 4.500000000000001 ) ? ( 48 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 196 ) : ( 197 ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 198 ) : ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( 398 ) : ( ( ( Feature_21 <= 3.5000000000000004 ) ? ( 798 ) : ( 799 ) ) ) ) ) ) ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_38 <= 5.500000000000001 ) ? ( ( ( Feature_6 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 112 ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 226 ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_14
	

	namespace LGBM_Tree_2_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.02642955296713896 }} ,
				{ 10 ,  {0.022279479127269436 }} ,
				{ 16 ,  {0.026832133877445593 }} ,
				{ 26 ,  {-0.027923042212401685 }} ,
				{ 27 ,  {0.018170657228573566 }} ,
				{ 35 ,  {-0.029016340918512597 }} ,
				{ 36 ,  {-0.000729446434117117 }} ,
				{ 37 ,  {-0.02695990450901525 }} ,
				{ 39 ,  {0.0009494091221047313 }} ,
				{ 45 ,  {-0.026951026543994935 }} ,
				{ 46 ,  {-0.026813592695630196 }} ,
				{ 47 ,  {-0.027260361820053387 }} ,
				{ 49 ,  {-0.030674395644908387 }} ,
				{ 68 ,  {-0.026733173381034148 }} ,
				{ 69 ,  {-0.02721723947266926 }} ,
				{ 77 ,  {0.03313900839049399 }} ,
				{ 88 ,  {-0.026711876916634087 }} ,
				{ 89 ,  {-0.026839967852006992 }} ,
				{ 97 ,  {-0.027387653541126808 }} ,
				{ 103 ,  {-0.02700201578914868 }} ,
				{ 152 ,  {0.07910442723154659 }} ,
				{ 192 ,  {-0.02677048403717155 }} ,
				{ 193 ,  {-0.026996429139257178 }} ,
				{ 203 ,  {-0.027534186998976612 }} ,
				{ 205 ,  {-0.02666677955624901 }} ,
				{ 307 ,  {0.07088417655010068 }} ,
				{ 400 ,  {-0.026747228552570092 }} ,
				{ 401 ,  {-0.026968244568288082 }} ,
				{ 404 ,  {-0.027408020932876184 }} ,
				{ 409 ,  {-0.026731313444075113 }} ,
				{ 612 ,  {0.05671131768625723 }} ,
				{ 613 ,  {0.05989800714914656 }} ,
				{ 804 ,  {-0.026993363965613137 }} ,
				{ 805 ,  {-0.027236948117921062 }} ,
				{ 806 ,  {-0.027062940116931358 }} ,
				{ 807 ,  {-0.026759239940957427 }} ,
				{ 810 ,  {-0.027030912884316072 }} ,
				{ 811 ,  {-0.02678731635916289 }} ,
				{ 816 ,  {-0.02677075150494018 }} ,
				{ 817 ,  {-0.0269803008103614 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_44 <= 3.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_35 <= 15.500000000000002 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_35 <= 14.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_45 <= 10.500000000000002 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 152 ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 612 ) : ( 613 ) ) ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_28 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( 45 ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_9 <= 7.500000000000001 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_61 <= 7.500000000000001 ) ? ( 804 ) : ( 805 ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 806 ) : ( 807 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 404 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 816 ) : ( 817 ) ) ) : ( 409 ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 6.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_14
	

	namespace LGBM_Tree_3_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.02756910575491897 }} ,
				{ 12 ,  {-0.01494936038854512 }} ,
				{ 15 ,  {0.022797420416579426 }} ,
				{ 17 ,  {0.014645013423811743 }} ,
				{ 20 ,  {0.04247538358295 }} ,
				{ 21 ,  {-0.027784829035956294 }} ,
				{ 22 ,  {0.014437718562366867 }} ,
				{ 26 ,  {-0.027124301373253876 }} ,
				{ 28 ,  {0.011745428032800776 }} ,
				{ 32 ,  {0.041801827981459545 }} ,
				{ 47 ,  {-0.02733862151967661 }} ,
				{ 59 ,  {-0.027250753980658765 }} ,
				{ 66 ,  {0.06480997499969758 }} ,
				{ 93 ,  {-0.026978103485327382 }} ,
				{ 109 ,  {-0.026625048637514012 }} ,
				{ 117 ,  {-0.026673908085119685 }} ,
				{ 134 ,  {0.06289435488379545 }} ,
				{ 185 ,  {-0.026686884052478623 }} ,
				{ 216 ,  {-0.026672280880330003 }} ,
				{ 217 ,  {-0.026866681714682462 }} ,
				{ 232 ,  {-0.027042398619620395 }} ,
				{ 233 ,  {-0.026740980486021578 }} ,
				{ 270 ,  {0.05565805914099947 }} ,
				{ 271 ,  {0.060690011814291935 }} ,
				{ 442 ,  {-0.026658323786784635 }} ,
				{ 444 ,  {-0.02675835886315931 }} ,
				{ 445 ,  {-0.02664278481212 }} ,
				{ 446 ,  {-0.026954061843737873 }} ,
				{ 447 ,  {-0.026743261818821557 }} ,
				{ 736 ,  {-0.026868087213993266 }} ,
				{ 737 ,  {-0.027037801387237204 }} ,
				{ 738 ,  {-0.026802926491684018 }} ,
				{ 739 ,  {-0.02665702719216946 }} ,
				{ 880 ,  {-0.02694497341428864 }} ,
				{ 881 ,  {-0.026730625486756688 }} ,
				{ 882 ,  {-0.027138609349672233 }} ,
				{ 886 ,  {-0.026915271873088193 }} ,
				{ 887 ,  {-0.02668466887850441 }} ,
				{ 1766 ,  {-0.02685823054330245 }} ,
				{ 1767 ,  {-0.026999095894138427 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 3.5000000000000004 ) ? ( ( ( Feature_19 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 8.500000000000002 ) ? ( 32 ) : ( ( ( Feature_27 <= 3.5000000000000004 ) ? ( 66 ) : ( ( ( Feature_37 <= 12.500000000000002 ) ? ( 134 ) : ( ( ( Feature_50 <= 7.500000000000001 ) ? ( 270 ) : ( 271 ) ) ) ) ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_11 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 10.500000000000002 ) ? ( 736 ) : ( 737 ) ) ) : ( ( ( Feature_10 <= 6.500000000000001 ) ? ( 738 ) : ( 739 ) ) ) ) ) : ( 185 ) ) ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 882 ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( 1766 ) : ( 1767 ) ) ) ) ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 442 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 1.5000000000000002 ) ? ( 444 ) : ( 445 ) ) ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_53 <= 4.500000000000001 ) ? ( 28 ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_2 <= 7.500000000000001 ) ? ( 232 ) : ( 233 ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_14
	

	namespace LGBM_Tree_4_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.05910571356484115 }} ,
				{ 12 ,  {0.0227745553328481 }} ,
				{ 14 ,  {-0.008734355477827117 }} ,
				{ 16 ,  {-0.02706264195779219 }} ,
				{ 17 ,  {0.03538965617323376 }} ,
				{ 19 ,  {-0.011890971743529 }} ,
				{ 22 ,  {0.02756495768945625 }} ,
				{ 27 ,  {-0.013684244901513869 }} ,
				{ 31 ,  {0.029083758488547575 }} ,
				{ 53 ,  {-0.02782197380325742 }} ,
				{ 61 ,  {0.07051236296550688 }} ,
				{ 73 ,  {-0.02757831477714149 }} ,
				{ 75 ,  {-0.02735411282917489 }} ,
				{ 92 ,  {-0.02696587720543793 }} ,
				{ 93 ,  {-0.02746064169349286 }} ,
				{ 94 ,  {-0.026802335500968527 }} ,
				{ 95 ,  {-0.02700190863866202 }} ,
				{ 105 ,  {-0.027364759407473144 }} ,
				{ 121 ,  {0.06340920958422562 }} ,
				{ 145 ,  {-0.027163329810107956 }} ,
				{ 149 ,  {-0.02719818280466868 }} ,
				{ 208 ,  {-0.026948510187625875 }} ,
				{ 209 ,  {-0.026752776666858054 }} ,
				{ 240 ,  {0.05864563734216456 }} ,
				{ 241 ,  {0.05200412015555375 }} ,
				{ 288 ,  {-0.027014028263663795 }} ,
				{ 289 ,  {-0.026821699653535605 }} ,
				{ 1185 ,  {-0.027017889733965506 }} ,
				{ 1186 ,  {-0.02675242846948292 }} ,
				{ 1187 ,  {-0.026880611187256476 }} ,
				{ 1189 ,  {-0.026735609301335412 }} ,
				{ 1191 ,  {-0.026800132323705535 }} ,
				{ 2368 ,  {-0.026813055296492513 }} ,
				{ 2369 ,  {-0.026945227560843277 }} ,
				{ 2376 ,  {-0.027096415113662526 }} ,
				{ 2377 ,  {-0.026758506961544377 }} ,
				{ 2381 ,  {-0.027193331332488354 }} ,
				{ 4761 ,  {-0.026792038984111522 }} ,
				{ 9520 ,  {-0.027088955537297267 }} ,
				{ 9521 ,  {-0.02685092456969103 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_34 <= 13.500000000000002 ) ? ( ( ( Feature_12 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_25 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 15.500000000000002 ) ? ( ( ( Feature_20 <= 15.500000000000002 ) ? ( 2368 ) : ( 2369 ) ) ) : ( 1185 ) ) ) : ( ( ( Feature_11 <= 15.500000000000002 ) ? ( 1186 ) : ( 1187 ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 2376 ) : ( 2377 ) ) ) : ( 1189 ) ) ) : ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 9520 ) : ( 9521 ) ) ) : ( 4761 ) ) ) : ( 2381 ) ) ) : ( 1191 ) ) ) ) ) ) ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( ( ( Feature_25 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_30 <= 4.500000000000001 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 12 ) : ( ( ( Feature_49 <= 2.5000000000000004 ) ? ( ( ( Feature_27 <= 11.500000000000002 ) ? ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 2.5000000000000004 ) ? ( 208 ) : ( 209 ) ) ) : ( 105 ) ) ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 14 ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_19 <= 15.500000000000002 ) ? ( ( ( Feature_10 <= 2.5000000000000004 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_14
	

	namespace LGBM_Tree_5_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {-0.018323955781772153 }} ,
				{ 15 ,  {0.0317525981279518 }} ,
				{ 16 ,  {0.028007856242448833 }} ,
				{ 17 ,  {-0.027264159015259987 }} ,
				{ 19 ,  {-0.027074783746456055 }} ,
				{ 23 ,  {0.04209749743137313 }} ,
				{ 25 ,  {0.004629156822889027 }} ,
				{ 28 ,  {-0.027006067049214752 }} ,
				{ 36 ,  {-0.02686182911386197 }} ,
				{ 37 ,  {-0.026681123586073493 }} ,
				{ 45 ,  {0.051323337175737 }} ,
				{ 48 ,  {-0.027038662986676783 }} ,
				{ 89 ,  {0.06917628768105659 }} ,
				{ 98 ,  {-0.02681268665454813 }} ,
				{ 99 ,  {-0.026648149545081337 }} ,
				{ 104 ,  {-0.02663995190314916 }} ,
				{ 116 ,  {-0.026768597407912043 }} ,
				{ 117 ,  {-0.026639639803148388 }} ,
				{ 118 ,  {-0.02674003003536554 }} ,
				{ 119 ,  {-0.026952165842016804 }} ,
				{ 176 ,  {0.06222836670080431 }} ,
				{ 210 ,  {-0.0266688567283867 }} ,
				{ 211 ,  {-0.026833320882975565 }} ,
				{ 212 ,  {-0.02669095898620429 }} ,
				{ 213 ,  {-0.027043079669648702 }} ,
				{ 214 ,  {-0.026663772950574455 }} ,
				{ 217 ,  {-0.026969577605394247 }} ,
				{ 218 ,  {-0.026679651354448122 }} ,
				{ 219 ,  {-0.026827621954074593 }} ,
				{ 220 ,  {-0.027217127847784253 }} ,
				{ 221 ,  {-0.026925010653380224 }} ,
				{ 222 ,  {-0.026691868746812078 }} ,
				{ 354 ,  {0.059394879374440906 }} ,
				{ 355 ,  {0.05778543070644228 }} ,
				{ 430 ,  {-0.026861540986146987 }} ,
				{ 431 ,  {-0.02668241738665321 }} ,
				{ 432 ,  {-0.026867391115172556 }} ,
				{ 433 ,  {-0.02667906284237393 }} ,
				{ 446 ,  {-0.027078349998326107 }} ,
				{ 447 ,  {-0.026797228580401813 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_62 <= 11.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_10 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( 176 ) : ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 48 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( 104 ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 214 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 10.500000000000002 ) ? ( 220 ) : ( 221 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 222 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_58 <= 7.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 118 ) : ( 119 ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_14
	

	namespace LGBM_Tree_6_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.007543464023663531 }} ,
				{ 9 ,  {-0.008441237179065716 }} ,
				{ 11 ,  {-0.028957873241971268 }} ,
				{ 15 ,  {-0.00944478176018011 }} ,
				{ 20 ,  {-0.0012352209805006572 }} ,
				{ 32 ,  {-0.027079777887610353 }} ,
				{ 34 ,  {-0.02679141840974906 }} ,
				{ 35 ,  {-0.02658195594996743 }} ,
				{ 43 ,  {0.06511505261820758 }} ,
				{ 56 ,  {-0.008633040385407601 }} ,
				{ 66 ,  {-0.02680893795203191 }} ,
				{ 67 ,  {-0.026601031537687076 }} ,
				{ 84 ,  {0.06107641990743978 }} ,
				{ 114 ,  {-0.02702827027724359 }} ,
				{ 115 ,  {-0.026827427043357274 }} ,
				{ 171 ,  {0.05626245389395236 }} ,
				{ 237 ,  {-0.026601428668104832 }} ,
				{ 238 ,  {-0.026850671005230475 }} ,
				{ 239 ,  {-0.026691218299467186 }} ,
				{ 340 ,  {0.060488407996999505 }} ,
				{ 341 ,  {0.058084787120002604 }} ,
				{ 464 ,  {-0.026588156518492303 }} ,
				{ 465 ,  {-0.026733891421918506 }} ,
				{ 472 ,  {-0.026637535222181874 }} ,
				{ 473 ,  {-0.026838620926510764 }} ,
				{ 932 ,  {-0.02673889272831545 }} ,
				{ 933 ,  {-0.027047062330314783 }} ,
				{ 936 ,  {-0.026945135393107545 }} ,
				{ 938 ,  {-0.02713622438435569 }} ,
				{ 939 ,  {-0.026877917055495127 }} ,
				{ 940 ,  {-0.026746889000297494 }} ,
				{ 941 ,  {-0.026899326277171128 }} ,
				{ 942 ,  {-0.026751644754705296 }} ,
				{ 943 ,  {-0.02662975339310731 }} ,
				{ 1868 ,  {-0.026621788341711056 }} ,
				{ 1869 ,  {-0.02676351068911663 }} ,
				{ 1870 ,  {-0.02661615599961012 }} ,
				{ 1871 ,  {-0.02686356995134074 }} ,
				{ 1874 ,  {-0.02665067875469887 }} ,
				{ 1875 ,  {-0.02685725914096675 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( 32 ) : ( ( ( Feature_62 <= 14.500000000000002 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_9 <= 1.5000000000000002 ) ? ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 84 ) : ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 340 ) : ( 341 ) ) ) : ( 171 ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 56 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 1868 ) : ( 1869 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 940 ) : ( 941 ) ) ) : ( ( ( Feature_52 <= 4.500000000000001 ) ? ( 942 ) : ( 943 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 13.500000000000002 ) ? ( 472 ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_14
	

	namespace LGBM_Tree_7_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.036466666186077155 }} ,
				{ 8 ,  {0.017046143143057354 }} ,
				{ 12 ,  {0.0015214123023808126 }} ,
				{ 18 ,  {-0.028015294768715806 }} ,
				{ 19 ,  {-0.02681160255453098 }} ,
				{ 21 ,  {0.02932083927974635 }} ,
				{ 22 ,  {0.04415049300990898 }} ,
				{ 40 ,  {0.06855209563658532 }} ,
				{ 46 ,  {-0.027844978926817893 }} ,
				{ 47 ,  {-0.02676782849009057 }} ,
				{ 52 ,  {-0.013043587512121084 }} ,
				{ 55 ,  {0.018217080320389926 }} ,
				{ 107 ,  {-0.028209535493827317 }} ,
				{ 108 ,  {-0.026721256391403332 }} ,
				{ 109 ,  {-0.02758693480449298 }} ,
				{ 164 ,  {0.06550275726695685 }} ,
				{ 165 ,  {0.06058206642820842 }} ,
				{ 166 ,  {0.05661835607891234 }} ,
				{ 167 ,  {0.05989567232628532 }} ,
				{ 212 ,  {-0.02778139351485502 }} ,
				{ 1706 ,  {-0.026575874124145995 }} ,
				{ 1708 ,  {-0.026692969844606812 }} ,
				{ 1709 ,  {-0.02690056571284429 }} ,
				{ 1711 ,  {-0.026773716591639452 }} ,
				{ 3409 ,  {-0.027090342963481773 }} ,
				{ 3414 ,  {-0.0266427543816556 }} ,
				{ 3415 ,  {-0.026909156042647365 }} ,
				{ 3420 ,  {-0.02660205725006148 }} ,
				{ 6816 ,  {-0.026662291888428655 }} ,
				{ 6817 ,  {-0.02690887415738081 }} ,
				{ 6823 ,  {-0.027067235274042974 }} ,
				{ 6842 ,  {-0.0267435658063991 }} ,
				{ 6843 ,  {-0.02659368186329123 }} ,
				{ 13640 ,  {-0.02663820793532622 }} ,
				{ 13641 ,  {-0.026784680575558786 }} ,
				{ 13643 ,  {-0.02664114408127173 }} ,
				{ 13644 ,  {-0.026733484423486744 }} ,
				{ 13645 ,  {-0.026909834529993765 }} ,
				{ 27284 ,  {-0.026752924322647555 }} ,
				{ 27285 ,  {-0.027006565914344572 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 8 ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 40 ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( ( ( Feature_6 <= 4.500000000000001 ) ? ( 164 ) : ( 165 ) ) ) : ( ( ( Feature_14 <= 1.0000000180025095e-35 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 22 ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 12 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( 52 ) : ( ( ( Feature_6 <= 9.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 212 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 6.500000000000001 ) ? ( 6816 ) : ( 6817 ) ) ) : ( 3409 ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_38 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 15.500000000000002 ) ? ( 13640 ) : ( 13641 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 27284 ) : ( 27285 ) ) ) : ( 13643 ) ) ) ) ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 13644 ) : ( 13645 ) ) ) : ( 6823 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1706 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 3414 ) : ( 3415 ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 11.500000000000002 ) ? ( ( ( Feature_44 <= 7.500000000000001 ) ? ( 1708 ) : ( 1709 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_52 <= 14.500000000000002 ) ? ( 3420 ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( 6842 ) : ( 6843 ) ) ) ) ) : ( 1711 ) ) ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( Feature_35 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_14
	

	namespace LGBM_Tree_8_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.04188519897762485 }} ,
				{ 19 ,  {-0.011823120625380294 }} ,
				{ 26 ,  {-0.02654621875721417 }} ,
				{ 27 ,  {-0.02670418525302734 }} ,
				{ 29 ,  {0.03262013083497369 }} ,
				{ 31 ,  {-0.02725075898048736 }} ,
				{ 32 ,  {-0.026727230392633413 }} ,
				{ 33 ,  {-0.02735874045460969 }} ,
				{ 41 ,  {0.03668341790263479 }} ,
				{ 43 ,  {0.035201578936530545 }} ,
				{ 44 ,  {0.03589301365593901 }} ,
				{ 46 ,  {-0.026760699302458127 }} ,
				{ 49 ,  {-0.026719343692973394 }} ,
				{ 50 ,  {-0.026869684578754733 }} ,
				{ 56 ,  {-0.02672553133614939 }} ,
				{ 57 ,  {-0.027181257996109327 }} ,
				{ 60 ,  {-0.026605651166998368 }} ,
				{ 61 ,  {-0.026778751147585107 }} ,
				{ 72 ,  {-0.026976127394726376 }} ,
				{ 75 ,  {-0.028310631101671698 }} ,
				{ 80 ,  {-0.028054102924048502 }} ,
				{ 81 ,  {-0.012689647658568136 }} ,
				{ 85 ,  {0.04601314488201556 }} ,
				{ 90 ,  {-0.027275547558917715 }} ,
				{ 91 ,  {-0.0265482026057365 }} ,
				{ 94 ,  {-0.02693089341406048 }} ,
				{ 95 ,  {-0.02741340735971383 }} ,
				{ 96 ,  {-0.0266328115424629 }} ,
				{ 97 ,  {-0.026503067584215625 }} ,
				{ 102 ,  {-0.026608235762663298 }} ,
				{ 146 ,  {-0.026547538273079915 }} ,
				{ 147 ,  {-0.026696017391693878 }} ,
				{ 148 ,  {-0.026879003901338246 }} ,
				{ 149 ,  {-0.026570513688670496 }} ,
				{ 168 ,  {0.07502374310278076 }} ,
				{ 207 ,  {-0.026643127269546513 }} ,
				{ 338 ,  {0.06480355120289281 }} ,
				{ 339 ,  {0.05706257754086366 }} ,
				{ 412 ,  {-0.026892086017001594 }} ,
				{ 413 ,  {-0.026716494893084933 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_58 <= 1.5000000000000002 ) ? ( ( ( Feature_45 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_43 <= 13.500000000000002 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( ( ( Feature_52 <= 8.500000000000002 ) ? ( 72 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( 146 ) : ( 147 ) ) ) ) ) : ( ( ( Feature_35 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 15.500000000000002 ) ? ( 148 ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_51 <= 13.500000000000002 ) ? ( ( ( Feature_27 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 80 ) : ( 81 ) ) ) : ( 41 ) ) ) : ( ( ( Feature_58 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 2.5000000000000004 ) ? ( 168 ) : ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 338 ) : ( 339 ) ) ) ) ) : ( 85 ) ) ) : ( 43 ) ) ) ) ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 44 ) : ( ( ( Feature_26 <= 6.500000000000001 ) ? ( 90 ) : ( 91 ) ) ) ) ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( 46 ) : ( ( ( Feature_18 <= 8.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 50 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( 102 ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 12.500000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 56 ) : ( 57 ) ) ) : ( 29 ) ) ) : ( ( ( Feature_51 <= 11.500000000000002 ) ? ( ( ( Feature_51 <= 6.500000000000001 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_14
	

	namespace LGBM_Tree_9_14 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 12 ,  {0.02974866195467305 }} ,
				{ 18 ,  {0.04068425671905267 }} ,
				{ 19 ,  {-0.027236591139460548 }} ,
				{ 20 ,  {-0.013774547161716525 }} ,
				{ 22 ,  {-0.012778768417380468 }} ,
				{ 23 ,  {-0.027512986061949914 }} ,
				{ 26 ,  {-0.02750259227907553 }} ,
				{ 28 ,  {0.004072351589106198 }} ,
				{ 33 ,  {-0.02674868374040488 }} ,
				{ 35 ,  {0.022705323331283087 }} ,
				{ 42 ,  {-0.016399452002359757 }} ,
				{ 54 ,  {-0.027003848427132528 }} ,
				{ 55 ,  {-0.026743036480081014 }} ,
				{ 58 ,  {-0.027101865313479048 }} ,
				{ 59 ,  {-0.02680994459330779 }} ,
				{ 62 ,  {-0.027601374163317434 }} ,
				{ 63 ,  {-0.026897841848306826 }} ,
				{ 64 ,  {-0.027527874626196963 }} ,
				{ 65 ,  {-0.026853863971236652 }} ,
				{ 68 ,  {-0.008308082034196465 }} ,
				{ 86 ,  {0.02605664796812763 }} ,
				{ 123 ,  {-0.02667106189640224 }} ,
				{ 138 ,  {-0.027516803505628976 }} ,
				{ 139 ,  {-0.02693134326560689 }} ,
				{ 175 ,  {0.04854333892955007 }} ,
				{ 241 ,  {-0.026729563780041567 }} ,
				{ 242 ,  {-0.027283209930385362 }} ,
				{ 243 ,  {-0.026969711350511252 }} ,
				{ 348 ,  {0.07825771316742086 }} ,
				{ 481 ,  {-0.027089652905354807 }} ,
				{ 489 ,  {-0.02664949653632842 }} ,
				{ 490 ,  {-0.026780945573560075 }} ,
				{ 491 ,  {-0.027031295923924906 }} ,
				{ 698 ,  {0.0662851954811916 }} ,
				{ 699 ,  {0.056132418297379055 }} ,
				{ 960 ,  {-0.0270333577348255 }} ,
				{ 976 ,  {-0.026885163709796562 }} ,
				{ 977 ,  {-0.026695167780647386 }} ,
				{ 1922 ,  {-0.026837187042172153 }} ,
				{ 1923 ,  {-0.026659007890375737 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_29 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( ( ( Feature_28 <= 14.500000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_36 <= 10.500000000000002 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 68 ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_42 <= 2.5000000000000004 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( 20 ) : ( ( ( Feature_21 <= 5.500000000000001 ) ? ( 42 ) : ( ( ( Feature_28 <= 8.500000000000002 ) ? ( 86 ) : ( ( ( Feature_53 <= 15.500000000000002 ) ? ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 348 ) : ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 698 ) : ( 699 ) ) ) ) ) : ( 175 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 5.500000000000001 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_35 <= 12.500000000000002 ) ? ( 12 ) : ( ( ( Feature_29 <= 5.500000000000001 ) ? ( 26 ) : ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 54 ) : ( 55 ) ) ) ) ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_52 <= 9.500000000000002 ) ? ( 28 ) : ( ( ( Feature_44 <= 13.500000000000002 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( Feature_21 <= 15.500000000000002 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_62 <= 1.5000000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_27 <= 6.500000000000001 ) ? ( 960 ) : ( ( ( Feature_52 <= 15.500000000000002 ) ? ( 1922 ) : ( 1923 ) ) ) ) ) : ( 481 ) ) ) : ( 241 ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 242 ) : ( 243 ) ) ) ) ) : ( ( ( Feature_61 <= 9.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 976 ) : ( 977 ) ) ) : ( 489 ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 490 ) : ( 491 ) ) ) ) ) : ( 123 ) ) ) ) ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_14
	

	namespace LGBM_Tree_0_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.009197205484087262 }} ,
				{ 10 ,  {0.022479072160965743 }} ,
				{ 13 ,  {0.021752023268312517 }} ,
				{ 16 ,  {-0.029623703941307963 }} ,
				{ 17 ,  {-0.026671042881970704 }} ,
				{ 22 ,  {0.04828487337626811 }} ,
				{ 24 ,  {-0.026653472015029135 }} ,
				{ 25 ,  {-0.02708712871254086 }} ,
				{ 47 ,  {0.06375745709429795 }} ,
				{ 58 ,  {-0.026515467005979128 }} ,
				{ 61 ,  {-0.026485910707893447 }} ,
				{ 63 ,  {-0.026726323954241318 }} ,
				{ 92 ,  {0.05457261050247811 }} ,
				{ 121 ,  {-0.02647667961072403 }} ,
				{ 124 ,  {-0.026494348232264753 }} ,
				{ 186 ,  {0.05659866202870804 }} ,
				{ 187 ,  {0.06016647376861445 }} ,
				{ 224 ,  {-0.026605257129734678 }} ,
				{ 225 ,  {-0.026442910813049017 }} ,
				{ 228 ,  {-0.026802024051741116 }} ,
				{ 229 ,  {-0.02660157738395082 }} ,
				{ 230 ,  {-0.027086473074662488 }} ,
				{ 231 ,  {-0.026782456697925158 }} ,
				{ 236 ,  {-0.026504507955687037 }} ,
				{ 237 ,  {-0.026686381820170392 }} ,
				{ 239 ,  {-0.026843315627118555 }} ,
				{ 240 ,  {-0.026525493804747297 }} ,
				{ 241 ,  {-0.026658509430494394 }} ,
				{ 250 ,  {-0.026530208510157662 }} ,
				{ 251 ,  {-0.0266952113075809 }} ,
				{ 452 ,  {-0.02649479526924734 }} ,
				{ 453 ,  {-0.026724997888851066 }} ,
				{ 454 ,  {-0.026585941532949322 }} ,
				{ 476 ,  {-0.026746127930769994 }} ,
				{ 477 ,  {-0.026558287807646602 }} ,
				{ 1821 ,  {-0.026977016030992115 }} ,
				{ 1822 ,  {-0.026731544725734614 }} ,
				{ 1823 ,  {-0.026547056435439954 }} ,
				{ 3640 ,  {-0.026797684566102473 }} ,
				{ 3641 ,  {-0.026621279419131356 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_29 <= 15.500000000000002 ) ? ( ( ( Feature_28 <= 9.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_22 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_22 <= 6.500000000000001 ) ? ( ( ( Feature_37 <= 6.500000000000001 ) ? ( 92 ) : ( ( ( Feature_44 <= 1.5000000000000002 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( 24 ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_10 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_53 <= 13.500000000000002 ) ? ( 224 ) : ( 225 ) ) ) : ( ( ( Feature_19 <= 1.5000000000000002 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( 454 ) : ( ( ( Feature_19 <= 13.500000000000002 ) ? ( ( ( Feature_28 <= 10.500000000000002 ) ? ( ( ( Feature_14 <= 5.500000000000001 ) ? ( 3640 ) : ( 3641 ) ) ) : ( 1821 ) ) ) : ( ( ( Feature_18 <= 6.500000000000001 ) ? ( 1822 ) : ( 1823 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_13 <= 10.500000000000002 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 228 ) : ( 229 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( 230 ) : ( 231 ) ) ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 58 ) : ( ( ( Feature_45 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 236 ) : ( 237 ) ) ) : ( ( ( Feature_43 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 1.5000000000000002 ) ? ( 476 ) : ( 477 ) ) ) : ( 239 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_59 <= 13.500000000000002 ) ? ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 240 ) : ( 241 ) ) ) : ( 121 ) ) ) : ( 61 ) ) ) : ( ( ( Feature_37 <= 11.500000000000002 ) ? ( ( ( Feature_43 <= 11.500000000000002 ) ? ( 124 ) : ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0_15
	

	namespace LGBM_Tree_1_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.03417858874903043 }} ,
				{ 10 ,  {-0.0048100430237056424 }} ,
				{ 15 ,  {0.05762307911748681 }} ,
				{ 24 ,  {-0.027320679105798537 }} ,
				{ 26 ,  {-0.0286037822868776 }} ,
				{ 27 ,  {-0.027720205840646706 }} ,
				{ 29 ,  {-0.02901164186326488 }} ,
				{ 47 ,  {-0.026624983059370208 }} ,
				{ 51 ,  {0.010192175504997823 }} ,
				{ 57 ,  {-0.027809977244077924 }} ,
				{ 88 ,  {-0.027209206219053178 }} ,
				{ 89 ,  {-0.026883927930023678 }} ,
				{ 92 ,  {-0.026656519518056455 }} ,
				{ 100 ,  {0.02355424681733771 }} ,
				{ 112 ,  {-0.027241403692362748 }} ,
				{ 182 ,  {-0.02663566638192687 }} ,
				{ 186 ,  {-0.02669858200285377 }} ,
				{ 187 ,  {-0.026928527203676573 }} ,
				{ 227 ,  {-0.026662938478480492 }} ,
				{ 360 ,  {-0.02662321940263574 }} ,
				{ 363 ,  {-0.02707078189688113 }} ,
				{ 367 ,  {-0.026634712765928905 }} ,
				{ 404 ,  {0.019577566451096956 }} ,
				{ 406 ,  {0.07226458002696357 }} ,
				{ 407 ,  {0.06160006891494549 }} ,
				{ 452 ,  {-0.026778219768036966 }} ,
				{ 453 ,  {-0.027094915704778573 }} ,
				{ 723 ,  {-0.026956858199838264 }} ,
				{ 724 ,  {-0.026669793966705598 }} ,
				{ 725 ,  {-0.026923113927465776 }} ,
				{ 810 ,  {0.054243739286513964 }} ,
				{ 1444 ,  {-0.026642722193389937 }} ,
				{ 1445 ,  {-0.02680146294836111 }} ,
				{ 1464 ,  {-0.026813613206855647 }} ,
				{ 1465 ,  {-0.026603974547139864 }} ,
				{ 1466 ,  {-0.02697233053518293 }} ,
				{ 1622 ,  {0.05753795599472708 }} ,
				{ 1623 ,  {0.06327463515626981 }} ,
				{ 2934 ,  {-0.026708568638756786 }} ,
				{ 2935 ,  {-0.026885822229169323 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_19 <= 11.500000000000002 ) ? ( ( ( Feature_3 <= 2.5000000000000004 ) ? ( 4 ) : ( ( ( Feature_10 <= 2.5000000000000004 ) ? ( 10 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_59 <= 10.500000000000002 ) ? ( 88 ) : ( 89 ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 360 ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 1444 ) : ( 1445 ) ) ) : ( 723 ) ) ) ) ) : ( ( ( Feature_36 <= 13.500000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( 724 ) : ( 725 ) ) ) : ( 363 ) ) ) ) ) : ( ( ( Feature_19 <= 1.0000000180025095e-35 ) ? ( 182 ) : ( ( ( Feature_51 <= 13.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 8.500000000000002 ) ? ( 1464 ) : ( 1465 ) ) ) : ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 1466 ) : ( ( ( Feature_26 <= 7.500000000000001 ) ? ( 2934 ) : ( 2935 ) ) ) ) ) ) ) : ( 367 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_17 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( ( ( Feature_20 <= 5.500000000000001 ) ? ( 186 ) : ( 187 ) ) ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_9 <= 2.5000000000000004 ) ? ( ( ( Feature_28 <= 4.500000000000001 ) ? ( 24 ) : ( ( ( Feature_49 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_52 <= 8.500000000000002 ) ? ( 100 ) : ( ( ( Feature_61 <= 10.500000000000002 ) ? ( ( ( Feature_20 <= 15.500000000000002 ) ? ( 404 ) : ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( 810 ) : ( ( ( Feature_34 <= 5.500000000000001 ) ? ( 1622 ) : ( 1623 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 8.500000000000002 ) ? ( 406 ) : ( 407 ) ) ) ) ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_5 <= 4.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_13 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_20 <= 9.500000000000002 ) ? ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 112 ) : ( ( ( Feature_4 <= 13.500000000000002 ) ? ( ( ( Feature_3 <= 11.500000000000002 ) ? ( 452 ) : ( 453 ) ) ) : ( 227 ) ) ) ) ) : ( 57 ) ) ) : ( 29 ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1_15
	

	namespace LGBM_Tree_2_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.025354216579300204 }} ,
				{ 10 ,  {0.02139167110191932 }} ,
				{ 16 ,  {0.02657365760300078 }} ,
				{ 26 ,  {0.01787818829995726 }} ,
				{ 27 ,  {-0.027886455811682854 }} ,
				{ 35 ,  {-0.02894225128018559 }} ,
				{ 36 ,  {-0.026961346304251694 }} ,
				{ 37 ,  {-0.0003978687397341271 }} ,
				{ 39 ,  {0.0009533689026997475 }} ,
				{ 44 ,  {-0.02670971959274251 }} ,
				{ 45 ,  {-0.026894118246789136 }} ,
				{ 46 ,  {-0.02675295920034576 }} ,
				{ 47 ,  {-0.027219616790429804 }} ,
				{ 49 ,  {-0.03052098718137581 }} ,
				{ 68 ,  {-0.027125479773258566 }} ,
				{ 69 ,  {-0.02663882589868633 }} ,
				{ 77 ,  {0.0316049814419066 }} ,
				{ 97 ,  {-0.027322952372072763 }} ,
				{ 103 ,  {-0.026938395763644277 }} ,
				{ 152 ,  {0.0742628287074129 }} ,
				{ 192 ,  {-0.026993993529952433 }} ,
				{ 193 ,  {-0.026740970812171683 }} ,
				{ 203 ,  {-0.02742232454841398 }} ,
				{ 205 ,  {-0.02660096154593324 }} ,
				{ 307 ,  {0.06703671524279754 }} ,
				{ 400 ,  {-0.026681263892924936 }} ,
				{ 401 ,  {-0.026908685785165115 }} ,
				{ 404 ,  {-0.027343071252085394 }} ,
				{ 612 ,  {0.05422801519570369 }} ,
				{ 613 ,  {0.05718961001655129 }} ,
				{ 804 ,  {-0.02693540144078658 }} ,
				{ 805 ,  {-0.027188483927797324 }} ,
				{ 806 ,  {-0.026996259580992873 }} ,
				{ 807 ,  {-0.026688558948215525 }} ,
				{ 810 ,  {-0.02697743206632705 }} ,
				{ 811 ,  {-0.026728279999406013 }} ,
				{ 816 ,  {-0.026709901755539073 }} ,
				{ 817 ,  {-0.02692129142645974 }} ,
				{ 818 ,  {-0.0266414432671592 }} ,
				{ 819 ,  {-0.02679755737397801 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 6.500000000000001 ) ? ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_51 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 16 ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( ( ( Feature_53 <= 12.500000000000002 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_45 <= 10.500000000000002 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( 152 ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( ( ( Feature_42 <= 4.500000000000001 ) ? ( 612 ) : ( 613 ) ) ) : ( 307 ) ) ) ) ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_28 <= 5.500000000000001 ) ? ( 10 ) : ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_63 <= 2.5000000000000004 ) ? ( ( ( Feature_9 <= 7.500000000000001 ) ? ( ( ( Feature_37 <= 1.5000000000000002 ) ? ( ( ( Feature_53 <= 9.500000000000002 ) ? ( ( ( Feature_53 <= 3.5000000000000004 ) ? ( ( ( Feature_11 <= 13.500000000000002 ) ? ( 192 ) : ( 193 ) ) ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_33 <= 3.5000000000000004 ) ? ( ( ( Feature_44 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_13 <= 12.500000000000002 ) ? ( 400 ) : ( 401 ) ) ) : ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 804 ) : ( 805 ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 806 ) : ( 807 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 404 ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 810 ) : ( 811 ) ) ) ) ) : ( 203 ) ) ) ) ) : ( ( ( Feature_51 <= 15.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( 816 ) : ( 817 ) ) ) : ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 818 ) : ( 819 ) ) ) ) ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_45 <= 3.5000000000000004 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2_15
	

	namespace LGBM_Tree_3_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {-0.018845550014650707 }} ,
				{ 12 ,  {-0.014649267899488888 }} ,
				{ 16 ,  {0.00894993063719028 }} ,
				{ 22 ,  {0.07662943659416173 }} ,
				{ 26 ,  {-0.027055408332511684 }} ,
				{ 28 ,  {-0.010122773203384927 }} ,
				{ 30 ,  {0.05143606572122275 }} ,
				{ 31 ,  {-0.02759144377873854 }} ,
				{ 34 ,  {0.04071317709588904 }} ,
				{ 40 ,  {0.004862899198463322 }} ,
				{ 41 ,  {-0.027328553991206934 }} ,
				{ 42 ,  {-0.02781058999903035 }} ,
				{ 47 ,  {-0.026782752726847398 }} ,
				{ 59 ,  {-0.027024827665016134 }} ,
				{ 71 ,  {0.06305407774408643 }} ,
				{ 87 ,  {-0.027060151734315 }} ,
				{ 92 ,  {-0.027031279377465203 }} ,
				{ 93 ,  {-0.02744113512911142 }} ,
				{ 109 ,  {-0.02656101884040611 }} ,
				{ 116 ,  {-0.02692096812515231 }} ,
				{ 140 ,  {0.059693259430895866 }} ,
				{ 173 ,  {-0.026645861943650397 }} ,
				{ 216 ,  {-0.026608823204617063 }} ,
				{ 217 ,  {-0.026811958231996072 }} ,
				{ 222 ,  {-0.026605758644588418 }} ,
				{ 234 ,  {-0.026811197261484777 }} ,
				{ 235 ,  {-0.02658251258922323 }} ,
				{ 282 ,  {0.053336187026131035 }} ,
				{ 283 ,  {0.05710306681214298 }} ,
				{ 344 ,  {-0.026922822495729772 }} ,
				{ 345 ,  {-0.026734220573351904 }} ,
				{ 442 ,  {-0.026594018493382023 }} ,
				{ 446 ,  {-0.026905166788140894 }} ,
				{ 447 ,  {-0.026680224764403362 }} ,
				{ 880 ,  {-0.026891671343119834 }} ,
				{ 881 ,  {-0.026668504284856065 }} ,
				{ 882 ,  {-0.027092961849572036 }} ,
				{ 883 ,  {-0.02687293407204069 }} ,
				{ 886 ,  {-0.026861774561087615 }} ,
				{ 887 ,  {-0.026621721627817115 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_30 <= 1.5000000000000002 ) ? ( ( ( Feature_4 <= 9.500000000000002 ) ? ( 16 ) : ( ( ( Feature_46 <= 1.0000000180025095e-35 ) ? ( 34 ) : ( ( ( Feature_29 <= 8.500000000000002 ) ? ( ( ( Feature_28 <= 15.500000000000002 ) ? ( 140 ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( 282 ) : ( 283 ) ) ) ) ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_4 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 42 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 344 ) : ( 345 ) ) ) : ( 173 ) ) ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 7.500000000000001 ) ? ( 22 ) : ( ( ( Feature_26 <= 1.5000000000000002 ) ? ( ( ( Feature_27 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_54 <= 5.500000000000001 ) ? ( ( ( Feature_18 <= 1.0000000180025095e-35 ) ? ( 12 ) : ( ( ( Feature_18 <= 2.5000000000000004 ) ? ( 26 ) : ( ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 6.500000000000001 ) ? ( ( ( Feature_10 <= 8.500000000000002 ) ? ( 216 ) : ( 217 ) ) ) : ( 109 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_19 <= 10.500000000000002 ) ? ( ( ( Feature_36 <= 8.500000000000002 ) ? ( ( ( Feature_11 <= 8.500000000000002 ) ? ( 880 ) : ( 881 ) ) ) : ( ( ( Feature_35 <= 9.500000000000002 ) ? ( 882 ) : ( 883 ) ) ) ) ) : ( ( ( Feature_13 <= 7.500000000000001 ) ? ( 442 ) : ( ( ( Feature_53 <= 14.500000000000002 ) ? ( 886 ) : ( 887 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 12.500000000000002 ) ? ( 222 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 7.500000000000001 ) ? ( ( ( Feature_35 <= 1.5000000000000002 ) ? ( 28 ) : ( ( ( Feature_20 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 6.500000000000001 ) ? ( 116 ) : ( ( ( Feature_34 <= 12.500000000000002 ) ? ( 234 ) : ( 235 ) ) ) ) ) : ( 59 ) ) ) ) ) : ( ( ( Feature_29 <= 10.500000000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3_15
	

	namespace LGBM_Tree_4_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 10 ,  {0.055810065485888606 }} ,
				{ 12 ,  {0.022496737730018472 }} ,
				{ 15 ,  {-0.0095065041893833 }} ,
				{ 16 ,  {-0.02699776341201715 }} ,
				{ 17 ,  {0.03394132905647264 }} ,
				{ 19 ,  {-0.01167817088938248 }} ,
				{ 22 ,  {0.026188994372977815 }} ,
				{ 27 ,  {-0.012622086575820288 }} ,
				{ 28 ,  {0.022562200846691638 }} ,
				{ 59 ,  {0.04881108837741651 }} ,
				{ 73 ,  {-0.027485171400515568 }} ,
				{ 75 ,  {-0.027271987293540346 }} ,
				{ 92 ,  {-0.026896896450774494 }} ,
				{ 93 ,  {-0.027378748677597 }} ,
				{ 94 ,  {-0.026733814328475287 }} ,
				{ 95 ,  {-0.02693034172127591 }} ,
				{ 104 ,  {-0.02674639266653124 }} ,
				{ 105 ,  {-0.026954748077895625 }} ,
				{ 106 ,  {-0.027062845556427517 }} ,
				{ 107 ,  {-0.02822794269332309 }} ,
				{ 117 ,  {0.07300214719045267 }} ,
				{ 145 ,  {-0.027107854590450994 }} ,
				{ 149 ,  {-0.02712621149585602 }} ,
				{ 232 ,  {0.06165882818831642 }} ,
				{ 288 ,  {-0.026954115321485634 }} ,
				{ 289 ,  {-0.02675695895224342 }} ,
				{ 466 ,  {0.055235666270787735 }} ,
				{ 467 ,  {0.05158711694641871 }} ,
				{ 1184 ,  {-0.02677755105452407 }} ,
				{ 1185 ,  {-0.026954314544444764 }} ,
				{ 1186 ,  {-0.02668645670294664 }} ,
				{ 1187 ,  {-0.026819776321204955 }} ,
				{ 1189 ,  {-0.026674777904921516 }} ,
				{ 1191 ,  {-0.02675703928260407 }} ,
				{ 2376 ,  {-0.027074985565866364 }} ,
				{ 2377 ,  {-0.026683121023582515 }} ,
				{ 2381 ,  {-0.027168047150630283 }} ,
				{ 4761 ,  {-0.02672841410543362 }} ,
				{ 9520 ,  {-0.02707789982515483 }} ,
				{ 9521 ,  {-0.02679483992686665 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_34 <= 13.500000000000002 ) ? ( ( ( Feature_12 <= 3.5000000000000004 ) ? ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_25 <= 9.500000000000002 ) ? ( ( ( Feature_58 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_33 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( 288 ) : ( 289 ) ) ) : ( 145 ) ) ) : ( 73 ) ) ) : ( ( ( Feature_30 <= 8.500000000000002 ) ? ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_52 <= 15.500000000000002 ) ? ( 1184 ) : ( 1185 ) ) ) : ( ( ( Feature_11 <= 15.500000000000002 ) ? ( 1186 ) : ( 1187 ) ) ) ) ) : ( ( ( Feature_20 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_42 <= 9.500000000000002 ) ? ( 2376 ) : ( 2377 ) ) ) : ( 1189 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_46 <= 4.500000000000001 ) ? ( ( ( Feature_11 <= 15.500000000000002 ) ? ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 9520 ) : ( 9521 ) ) ) : ( 4761 ) ) ) : ( 2381 ) ) ) : ( 1191 ) ) ) ) ) ) ) : ( 149 ) ) ) : ( 75 ) ) ) ) ) : ( 19 ) ) ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 10 ) : ( ( ( Feature_50 <= 1.0000000180025095e-35 ) ? ( 22 ) : ( ( ( Feature_3 <= 10.500000000000002 ) ? ( ( ( Feature_25 <= 1.0000000180025095e-35 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_30 <= 4.500000000000001 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_44 <= 10.500000000000002 ) ? ( ( ( Feature_3 <= 9.500000000000002 ) ? ( 12 ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_33 <= 7.500000000000001 ) ? ( ( ( Feature_52 <= 12.500000000000002 ) ? ( 104 ) : ( 105 ) ) ) : ( ( ( Feature_4 <= 12.500000000000002 ) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 27 ) ) ) ) ) : ( ( ( Feature_5 <= 11.500000000000002 ) ? ( ( ( Feature_37 <= 7.500000000000001 ) ? ( 28 ) : ( ( ( Feature_12 <= 14.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( ( ( Feature_33 <= 8.500000000000002 ) ? ( 232 ) : ( ( ( Feature_18 <= 13.500000000000002 ) ? ( 466 ) : ( 467 ) ) ) ) ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4_15
	

	namespace LGBM_Tree_5_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 8 ,  {0.004698576057256713 }} ,
				{ 10 ,  {-0.0199300191833128 }} ,
				{ 15 ,  {0.03022983910052475 }} ,
				{ 18 ,  {-0.027177016615149763 }} ,
				{ 23 ,  {0.03796155282893327 }} ,
				{ 24 ,  {0.005421175908937551 }} ,
				{ 28 ,  {-0.027126741891927254 }} ,
				{ 39 ,  {-0.026604423770877857 }} ,
				{ 45 ,  {0.04894112727104227 }} ,
				{ 51 ,  {-0.026947413338536393 }} ,
				{ 59 ,  {-0.026764707023966217 }} ,
				{ 76 ,  {-0.026684303444508912 }} ,
				{ 77 ,  {-0.027008952315452462 }} ,
				{ 89 ,  {0.06582447376864851 }} ,
				{ 100 ,  {-0.02675956807309542 }} ,
				{ 101 ,  {-0.02658472605095666 }} ,
				{ 116 ,  {-0.026705900822580637 }} ,
				{ 117 ,  {-0.026575427378165012 }} ,
				{ 176 ,  {0.06095965017821569 }} ,
				{ 208 ,  {-0.02663633197426576 }} ,
				{ 209 ,  {-0.026530682214010268 }} ,
				{ 210 ,  {-0.026605726321051588 }} ,
				{ 211 ,  {-0.026773287445813417 }} ,
				{ 212 ,  {-0.02663356841904123 }} ,
				{ 213 ,  {-0.02699537504469699 }} ,
				{ 214 ,  {-0.026598659616027018 }} ,
				{ 217 ,  {-0.026920499140265272 }} ,
				{ 218 ,  {-0.026618365445201325 }} ,
				{ 219 ,  {-0.02677327979221868 }} ,
				{ 220 ,  {-0.027170632872800544 }} ,
				{ 221 ,  {-0.0268762015352847 }} ,
				{ 222 ,  {-0.026630217845060145 }} ,
				{ 354 ,  {0.05740926919939859 }} ,
				{ 355 ,  {0.05566158003476264 }} ,
				{ 430 ,  {-0.02680213334422954 }} ,
				{ 431 ,  {-0.02661978575479105 }} ,
				{ 432 ,  {-0.026813832551085416 }} ,
				{ 433 ,  {-0.02662401151771603 }} ,
				{ 446 ,  {-0.027031113357592756 }} ,
				{ 447 ,  {-0.026732222806955405 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.5000000000000002 ) ? ( ( ( Feature_5 <= 2.5000000000000004 ) ? ( ( ( Feature_43 <= 1.0000000180025095e-35 ) ? ( 8 ) : ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 18 ) : ( ( ( Feature_42 <= 9.500000000000002 ) ? ( ( ( Feature_45 <= 4.500000000000001 ) ? ( 76 ) : ( 77 ) ) ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 1.0000000180025095e-35 ) ? ( 10 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_33 <= 4.500000000000001 ) ? ( ( ( Feature_5 <= 11.500000000000002 ) ? ( 176 ) : ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 354 ) : ( 355 ) ) ) ) ) : ( 89 ) ) ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_26 <= 15.500000000000002 ) ? ( ( ( Feature_36 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_13 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_5 <= 8.500000000000002 ) ? ( ( ( Feature_42 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_26 <= 5.500000000000001 ) ? ( ( ( Feature_52 <= 10.500000000000002 ) ? ( ( ( Feature_46 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 1.5000000000000002 ) ? ( 208 ) : ( 209 ) ) ) : ( ( ( Feature_26 <= 1.0000000180025095e-35 ) ? ( 210 ) : ( 211 ) ) ) ) ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( ( ( Feature_43 <= 4.500000000000001 ) ? ( 212 ) : ( 213 ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 214 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 430 ) : ( 431 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_34 <= 9.500000000000002 ) ? ( ( ( Feature_5 <= 9.500000000000002 ) ? ( ( ( Feature_44 <= 12.500000000000002 ) ? ( 432 ) : ( 433 ) ) ) : ( 217 ) ) ) : ( ( ( Feature_18 <= 12.500000000000002 ) ? ( 218 ) : ( 219 ) ) ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 12.500000000000002 ) ? ( 220 ) : ( 221 ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 222 ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 446 ) : ( 447 ) ) ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 6.500000000000001 ) ? ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 28 ) : ( ( ( Feature_17 <= 2.5000000000000004 ) ? ( ( ( Feature_60 <= 12.500000000000002 ) ? ( 116 ) : ( 117 ) ) ) : ( 59 ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5_15
	

	namespace LGBM_Tree_6_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {-0.0072833031665869965 }} ,
				{ 8 ,  {-0.00803795877284357 }} ,
				{ 11 ,  {-0.028846744258597748 }} ,
				{ 15 ,  {-0.009159388158420765 }} ,
				{ 20 ,  {-0.001112253532638601 }} ,
				{ 37 ,  {-0.026605420595136847 }} ,
				{ 38 ,  {-0.02648757053302427 }} ,
				{ 39 ,  {-0.02659981329351187 }} ,
				{ 43 ,  {0.0619145473115471 }} ,
				{ 56 ,  {-0.008244021931136868 }} ,
				{ 72 ,  {-0.026875850896069697 }} ,
				{ 73 ,  {-0.027081774425285306 }} ,
				{ 84 ,  {0.05821805888768672 }} ,
				{ 114 ,  {-0.02697783151058202 }} ,
				{ 115 ,  {-0.026761356015539667 }} ,
				{ 170 ,  {0.053131618373195834 }} ,
				{ 237 ,  {-0.02654072317568004 }} ,
				{ 238 ,  {-0.026802221713915914 }} ,
				{ 239 ,  {-0.026629261204997957 }} ,
				{ 342 ,  {0.05703559577794762 }} ,
				{ 343 ,  {0.055343971741087364 }} ,
				{ 464 ,  {-0.026534874304966434 }} ,
				{ 465 ,  {-0.026708065794055116 }} ,
				{ 471 ,  {-0.02661224977467192 }} ,
				{ 473 ,  {-0.0267860311100454 }} ,
				{ 932 ,  {-0.026956880059440132 }} ,
				{ 933 ,  {-0.026637741141782578 }} ,
				{ 936 ,  {-0.026898124105356927 }} ,
				{ 938 ,  {-0.02709241154054298 }} ,
				{ 939 ,  {-0.026822703514449975 }} ,
				{ 940 ,  {-0.026687714721375506 }} ,
				{ 941 ,  {-0.026846867734167692 }} ,
				{ 944 ,  {-0.026632145474381447 }} ,
				{ 945 ,  {-0.02652975889361754 }} ,
				{ 1868 ,  {-0.02655886813639546 }} ,
				{ 1869 ,  {-0.026699719030638516 }} ,
				{ 1870 ,  {-0.026555371619884402 }} ,
				{ 1871 ,  {-0.026810207245406982 }} ,
				{ 1874 ,  {-0.02658854410191896 }} ,
				{ 1875 ,  {-0.026802444782096303 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_42 <= 7.500000000000001 ) ? ( ( ( Feature_3 <= 8.500000000000002 ) ? ( 8 ) : ( ( ( Feature_5 <= 5.500000000000001 ) ? ( ( ( Feature_62 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 13.500000000000002 ) ? ( 72 ) : ( 73 ) ) ) : ( 37 ) ) ) : ( ( ( Feature_53 <= 8.500000000000002 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_9 <= 1.5000000000000002 ) ? ( ( ( Feature_54 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( ( ( Feature_35 <= 11.500000000000002 ) ? ( 84 ) : ( ( ( Feature_43 <= 6.500000000000001 ) ? ( 170 ) : ( ( ( Feature_25 <= 1.0000000180025095e-35 ) ? ( 342 ) : ( 343 ) ) ) ) ) ) ) : ( 43 ) ) ) ) ) : ( 11 ) ) ) ) ) : ( ( ( Feature_4 <= 3.5000000000000004 ) ? ( 6 ) : ( ( ( Feature_46 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_58 <= 5.500000000000001 ) ? ( 56 ) : ( ( ( Feature_42 <= 8.500000000000002 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 11.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_26 <= 10.500000000000002 ) ? ( 464 ) : ( 465 ) ) ) : ( ( ( Feature_53 <= 7.500000000000001 ) ? ( ( ( Feature_12 <= 14.500000000000002 ) ? ( 932 ) : ( 933 ) ) ) : ( ( ( Feature_34 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_11 <= 11.500000000000002 ) ? ( 1868 ) : ( 1869 ) ) ) : ( ( ( Feature_10 <= 1.5000000000000002 ) ? ( 1870 ) : ( 1871 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_3 <= 12.500000000000002 ) ? ( ( ( Feature_17 <= 3.5000000000000004 ) ? ( ( ( Feature_45 <= 5.500000000000001 ) ? ( 936 ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1874 ) : ( 1875 ) ) ) ) ) : ( ( ( Feature_20 <= 8.500000000000002 ) ? ( 938 ) : ( 939 ) ) ) ) ) : ( ( ( Feature_61 <= 8.500000000000002 ) ? ( ( ( Feature_20 <= 7.500000000000001 ) ? ( 940 ) : ( 941 ) ) ) : ( 471 ) ) ) ) ) ) ) : ( ( ( Feature_51 <= 14.500000000000002 ) ? ( ( ( Feature_41 <= 2.5000000000000004 ) ? ( ( ( Feature_34 <= 13.500000000000002 ) ? ( ( ( Feature_36 <= 9.500000000000002 ) ? ( 944 ) : ( 945 ) ) ) : ( 473 ) ) ) : ( 237 ) ) ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( 238 ) : ( 239 ) ) ) ) ) ) ) ) ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6_15
	

	namespace LGBM_Tree_7_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.03470719425024605 }} ,
				{ 8 ,  {0.01646318226680214 }} ,
				{ 12 ,  {0.001369100593201207 }} ,
				{ 18 ,  {-0.027938591626614308 }} ,
				{ 19 ,  {-0.026747875352989215 }} ,
				{ 21 ,  {0.027743284378196488 }} ,
				{ 22 ,  {0.04143865770133592 }} ,
				{ 40 ,  {0.06496211619175345 }} ,
				{ 46 ,  {-0.02776174542242575 }} ,
				{ 47 ,  {-0.02671011271765253 }} ,
				{ 52 ,  {-0.012741347430735427 }} ,
				{ 55 ,  {0.017674185222301277 }} ,
				{ 107 ,  {-0.028109454870322476 }} ,
				{ 108 ,  {-0.026658765540385716 }} ,
				{ 109 ,  {-0.027499303599550058 }} ,
				{ 164 ,  {0.06221213158254518 }} ,
				{ 165 ,  {0.057818725010443876 }} ,
				{ 166 ,  {0.05405670457369191 }} ,
				{ 167 ,  {0.05709263271744097 }} ,
				{ 212 ,  {-0.02768385893505611 }} ,
				{ 855 ,  {-0.026532254277117195 }} ,
				{ 1706 ,  {-0.026515956037250023 }} ,
				{ 1708 ,  {-0.026825747827458415 }} ,
				{ 3409 ,  {-0.02703674877502876 }} ,
				{ 3414 ,  {-0.026582443525190704 }} ,
				{ 3415 ,  {-0.026856692097324754 }} ,
				{ 3418 ,  {-0.026539352253652854 }} ,
				{ 6816 ,  {-0.02660462176713803 }} ,
				{ 6817 ,  {-0.026846206673903777 }} ,
				{ 6822 ,  {-0.026753850434112755 }} ,
				{ 6823 ,  {-0.027025730796097353 }} ,
				{ 6838 ,  {-0.026823466856127992 }} ,
				{ 13640 ,  {-0.02657797062335317 }} ,
				{ 13641 ,  {-0.026731806114742154 }} ,
				{ 13643 ,  {-0.02658009934325993 }} ,
				{ 13679 ,  {-0.026518067732241465 }} ,
				{ 27284 ,  {-0.026694099720749292 }} ,
				{ 27285 ,  {-0.02695155747926018 }} ,
				{ 27356 ,  {-0.026795986952494185 }} ,
				{ 27357 ,  {-0.026573310023866644 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_53 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_37 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_44 <= 6.500000000000001 ) ? ( 8 ) : ( ( ( Feature_60 <= 6.500000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_26 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( ( ( Feature_59 <= 7.500000000000001 ) ? ( 40 ) : ( ( ( Feature_58 <= 4.500000000000001 ) ? ( ( ( Feature_6 <= 4.500000000000001 ) ? ( 164 ) : ( 165 ) ) ) : ( ( ( Feature_14 <= 1.0000000180025095e-35 ) ? ( 166 ) : ( 167 ) ) ) ) ) ) ) : ( 21 ) ) ) : ( ( ( Feature_42 <= 1.5000000000000002 ) ? ( 22 ) : ( ( ( Feature_60 <= 8.500000000000002 ) ? ( 46 ) : ( 47 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_30 <= 12.500000000000002 ) ? ( ( ( Feature_60 <= 4.500000000000001 ) ? ( 12 ) : ( ( ( Feature_22 <= 7.500000000000001 ) ? ( ( ( Feature_53 <= 1.5000000000000002 ) ? ( 52 ) : ( ( ( Feature_6 <= 9.500000000000002 ) ? ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 212 ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 2.5000000000000004 ) ? ( ( ( Feature_53 <= 10.500000000000002 ) ? ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_10 <= 6.500000000000001 ) ? ( 6816 ) : ( 6817 ) ) ) : ( 3409 ) ) ) : ( ( ( Feature_43 <= 2.5000000000000004 ) ? ( ( ( Feature_38 <= 5.500000000000001 ) ? ( ( ( Feature_12 <= 15.500000000000002 ) ? ( 13640 ) : ( 13641 ) ) ) : ( ( ( Feature_29 <= 14.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( 27284 ) : ( 27285 ) ) ) : ( 13643 ) ) ) ) ) : ( ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( 6822 ) : ( 6823 ) ) ) ) ) ) ) : ( ( ( Feature_46 <= 1.5000000000000002 ) ? ( 1706 ) : ( ( ( Feature_51 <= 7.500000000000001 ) ? ( 3414 ) : ( 3415 ) ) ) ) ) ) ) : ( ( ( Feature_62 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_60 <= 11.500000000000002 ) ? ( 1708 ) : ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 3418 ) : ( ( ( Feature_36 <= 6.500000000000001 ) ? ( 6838 ) : ( ( ( Feature_37 <= 7.500000000000001 ) ? ( ( ( Feature_27 <= 12.500000000000002 ) ? ( 27356 ) : ( 27357 ) ) ) : ( 13679 ) ) ) ) ) ) ) ) ) : ( 855 ) ) ) ) ) ) ) : ( 107 ) ) ) ) ) : ( ( ( Feature_35 <= 12.500000000000002 ) ? ( ( ( Feature_29 <= 14.500000000000002 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7_15
	

	namespace LGBM_Tree_8_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 17 ,  {0.02636654952855587 }} ,
				{ 18 ,  {-0.006470312950028857 }} ,
				{ 20 ,  {-0.009333296017421198 }} ,
				{ 26 ,  {-0.02664652839267321 }} ,
				{ 27 ,  {-0.0264866943094487 }} ,
				{ 29 ,  {-0.010274495251090629 }} ,
				{ 30 ,  {0.049002320041225365 }} ,
				{ 32 ,  {-0.02683081797529372 }} ,
				{ 33 ,  {-0.02653586127975413 }} ,
				{ 42 ,  {-0.026565415464988276 }} ,
				{ 44 ,  {-0.0022045474454653264 }} ,
				{ 49 ,  {-0.026674632414679867 }} ,
				{ 56 ,  {-0.027009692858860426 }} ,
				{ 62 ,  {-0.026586621422337323 }} ,
				{ 63 ,  {-0.027425861748363492 }} ,
				{ 76 ,  {-0.0265044377122271 }} ,
				{ 77 ,  {-0.026635301152296034 }} ,
				{ 78 ,  {-0.026613868297066298 }} ,
				{ 79 ,  {-0.02678869560453925 }} ,
				{ 86 ,  {-0.027311150948272273 }} ,
				{ 87 ,  {-0.02683446488530839 }} ,
				{ 90 ,  {0.000693088163637941 }} ,
				{ 92 ,  {-0.02818643676187957 }} ,
				{ 93 ,  {-0.02687041154037644 }} ,
				{ 94 ,  {0.04065209113265713 }} ,
				{ 95 ,  {-0.012530855726974093 }} ,
				{ 96 ,  {-0.02657937604510322 }} ,
				{ 97 ,  {-0.026444227695463597 }} ,
				{ 100 ,  {-0.026845160584132933 }} ,
				{ 101 ,  {-0.026599632993825874 }} ,
				{ 102 ,  {-0.02652610947008209 }} ,
				{ 114 ,  {-0.026771555910879093 }} ,
				{ 115 ,  {-0.026511847741643908 }} ,
				{ 183 ,  {0.04483452232042331 }} ,
				{ 207 ,  {-0.02654309924663922 }} ,
				{ 364 ,  {0.05199715719484737 }} ,
				{ 412 ,  {-0.02676197309202276 }} ,
				{ 413 ,  {-0.026599875174759514 }} ,
				{ 730 ,  {0.06098574338609358 }} ,
				{ 731 ,  {0.0744225141624657 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_38 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_21 <= 4.500000000000001 ) ? ( ( ( Feature_52 <= 7.500000000000001 ) ? ( ( ( Feature_28 <= 8.500000000000002 ) ? ( ( ( Feature_51 <= 13.500000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_36 <= 3.5000000000000004 ) ? ( 18 ) : ( ( ( Feature_42 <= 3.5000000000000004 ) ? ( ( ( Feature_21 <= 1.0000000180025095e-35 ) ? ( 76 ) : ( 77 ) ) ) : ( ( ( Feature_59 <= 14.500000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_35 <= 8.500000000000002 ) ? ( ( ( Feature_45 <= 1.0000000180025095e-35 ) ? ( 20 ) : ( ( ( Feature_26 <= 3.5000000000000004 ) ? ( 42 ) : ( ( ( Feature_12 <= 13.500000000000002 ) ? ( 86 ) : ( 87 ) ) ) ) ) ) ) : ( ( ( Feature_20 <= 14.500000000000002 ) ? ( ( ( Feature_27 <= 4.500000000000001 ) ? ( 44 ) : ( ( ( Feature_60 <= 5.500000000000001 ) ? ( 90 ) : ( ( ( Feature_12 <= 12.500000000000002 ) ? ( ( ( Feature_36 <= 11.500000000000002 ) ? ( 364 ) : ( ( ( Feature_51 <= 10.500000000000002 ) ? ( 730 ) : ( 731 ) ) ) ) ) : ( 183 ) ) ) ) ) ) ) : ( ( ( Feature_50 <= 10.500000000000002 ) ? ( ( ( Feature_43 <= 15.500000000000002 ) ? ( 92 ) : ( 93 ) ) ) : ( ( ( Feature_43 <= 15.500000000000002 ) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_27 <= 12.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_18 <= 6.500000000000001 ) ? ( ( ( Feature_52 <= 11.500000000000002 ) ? ( ( ( Feature_29 <= 6.500000000000001 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( ( ( Feature_45 <= 8.500000000000002 ) ? ( ( ( Feature_2 <= 5.500000000000001 ) ? ( 100 ) : ( 101 ) ) ) : ( ( ( Feature_13 <= 9.500000000000002 ) ? ( 102 ) : ( ( ( Feature_3 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 12.500000000000002 ) ? ( 412 ) : ( 413 ) ) ) : ( 207 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 7.500000000000001 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_43 <= 7.500000000000001 ) ? ( ( ( Feature_43 <= 1.5000000000000002 ) ? ( ( ( Feature_38 <= 3.5000000000000004 ) ? ( 56 ) : ( ( ( Feature_13 <= 5.500000000000001 ) ? ( 114 ) : ( 115 ) ) ) ) ) : ( 29 ) ) ) : ( ( ( Feature_34 <= 10.500000000000002 ) ? ( 30 ) : ( ( ( Feature_10 <= 2.5000000000000004 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8_15
	

	namespace LGBM_Tree_9_15 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 9 ,  {0.026942382302826803 }} ,
				{ 13 ,  {0.029854777942491306 }} ,
				{ 23 ,  {-0.02748706356770509 }} ,
				{ 24 ,  {-0.02750979851519585 }} ,
				{ 28 ,  {0.0045721769328183875 }} ,
				{ 33 ,  {-0.029029898234485926 }} ,
				{ 34 ,  {-0.02701444562724354 }} ,
				{ 35 ,  {0.011447012614247205 }} ,
				{ 40 ,  {-0.0017652706850705914 }} ,
				{ 41 ,  {-0.028069315753227908 }} ,
				{ 42 ,  {-0.005969731306120589 }} ,
				{ 44 ,  {-0.026690600668179666 }} ,
				{ 45 ,  {-0.02717726084320738 }} ,
				{ 50 ,  {-0.026670654339721763 }} ,
				{ 51 ,  {-0.026950130058229833 }} ,
				{ 58 ,  {-0.026960718559256937 }} ,
				{ 59 ,  {-0.026705391284697552 }} ,
				{ 63 ,  {-0.02757617014399258 }} ,
				{ 65 ,  {-0.027556652276602308 }} ,
				{ 120 ,  {-0.026714067263239882 }} ,
				{ 122 ,  {-0.026680938558097795 }} ,
				{ 123 ,  {-0.02657064393467731 }} ,
				{ 128 ,  {-0.02672549855398684 }} ,
				{ 172 ,  {0.08597906794619056 }} ,
				{ 174 ,  {0.03070567096826749 }} ,
				{ 243 ,  {-0.026726451343116315 }} ,
				{ 249 ,  {-0.026689761375313082 }} ,
				{ 250 ,  {-0.02724059572164796 }} ,
				{ 251 ,  {-0.026826994430196982 }} ,
				{ 258 ,  {-0.02724275186977873 }} ,
				{ 346 ,  {0.0684889158752939 }} ,
				{ 347 ,  {0.05621002030823751 }} ,
				{ 350 ,  {0.0664427811943341 }} ,
				{ 351 ,  {0.053840333123318346 }} ,
				{ 484 ,  {-0.02707558467512246 }} ,
				{ 485 ,  {-0.026773832469367993 }} ,
				{ 496 ,  {-0.027028310702598504 }} ,
				{ 497 ,  {-0.026723833375666833 }} ,
				{ 518 ,  {-0.026787007145055605 }} ,
				{ 519 ,  {-0.027181019880888158 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			int lNodeIndex = ( ( Feature_43 <= 3.5000000000000004 ) ? ( ( ( Feature_21 <= 10.500000000000002 ) ? ( ( ( Feature_62 <= 5.500000000000001 ) ? ( ( ( Feature_21 <= 8.500000000000002 ) ? ( ( ( Feature_29 <= 13.500000000000002 ) ? ( ( ( Feature_29 <= 9.500000000000002 ) ? ( ( ( Feature_28 <= 10.500000000000002 ) ? ( 128 ) : ( ( ( Feature_36 <= 7.500000000000001 ) ? ( 258 ) : ( ( ( Feature_19 <= 8.500000000000002 ) ? ( 518 ) : ( 519 ) ) ) ) ) ) ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_42 <= 10.500000000000002 ) ? ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( ( ( Feature_14 <= 1.5000000000000002 ) ? ( 40 ) : ( 41 ) ) ) : ( ( ( Feature_27 <= 1.5000000000000002 ) ? ( 42 ) : ( ( ( Feature_53 <= 13.500000000000002 ) ? ( ( ( Feature_38 <= 1.5000000000000002 ) ? ( 172 ) : ( ( ( Feature_35 <= 2.5000000000000004 ) ? ( 346 ) : ( 347 ) ) ) ) ) : ( ( ( Feature_50 <= 3.5000000000000004 ) ? ( 174 ) : ( ( ( Feature_28 <= 13.500000000000002 ) ? ( 350 ) : ( 351 ) ) ) ) ) ) ) ) ) ) ) : ( ( ( Feature_29 <= 11.500000000000002 ) ? ( ( ( Feature_21 <= 14.500000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_60 <= 1.5000000000000002 ) ? ( ( ( Feature_17 <= 4.500000000000001 ) ? ( ( ( Feature_34 <= 6.500000000000001 ) ? ( 24 ) : ( ( ( Feature_18 <= 3.5000000000000004 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_43 <= 5.500000000000001 ) ? ( ( ( Feature_19 <= 2.5000000000000004 ) ? ( 28 ) : ( ( ( Feature_61 <= 5.500000000000001 ) ? ( 58 ) : ( 59 ) ) ) ) ) : ( ( ( Feature_21 <= 11.500000000000002 ) ? ( ( ( Feature_42 <= 11.500000000000002 ) ? ( ( ( Feature_45 <= 2.5000000000000004 ) ? ( 120 ) : ( ( ( Feature_34 <= 11.500000000000002 ) ? ( ( ( Feature_20 <= 14.500000000000002 ) ? ( 484 ) : ( 485 ) ) ) : ( 243 ) ) ) ) ) : ( ( ( Feature_45 <= 13.500000000000002 ) ? ( 122 ) : ( 123 ) ) ) ) ) : ( ( ( Feature_17 <= 6.500000000000001 ) ? ( ( ( Feature_17 <= 1.5000000000000002 ) ? ( ( ( Feature_42 <= 8.500000000000002 ) ? ( ( ( Feature_6 <= 1.5000000000000002 ) ? ( 496 ) : ( 497 ) ) ) : ( 249 ) ) ) : ( ( ( Feature_50 <= 9.500000000000002 ) ? ( 250 ) : ( 251 ) ) ) ) ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		std::vector<tTable> lTreeScores = { 
			LGBM_Tree_0_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_10::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_11::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_12::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_13::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_14::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_0_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_1_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_2_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_3_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_4_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_5_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_6_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_7_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_8_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63),
			LGBM_Tree_9_15::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63)
		};

		tTable lAggregatedTable = aggregate_lgb_scores(lTreeScores, {"Score"});

		tTable lSoftMaxTable = soft_max(lAggregatedTable);


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
