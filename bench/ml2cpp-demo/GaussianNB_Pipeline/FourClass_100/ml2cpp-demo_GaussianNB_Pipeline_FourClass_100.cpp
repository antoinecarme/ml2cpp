// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB_Pipeline
// Dataset : FourClass_100

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_Pipeline_FourClass_100.exe ml2cpp-demo_GaussianNB_Pipeline_FourClass_100.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( -0.0014807007689716506 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.08599214990681354 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( -0.006358164676411468 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( -0.024301807422776375 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 0.015786548044298444 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( -0.13959329445651672 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( -0.06476745048019888 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.025579810774090658 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( -0.03173937260977112 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( -0.1518141420862488 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( -0.13244576558492482 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 0.044172679762224144 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 0.010165946719810038 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( -0.03645872019103299 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 0.06491512811593925 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( -0.11930146867074032 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.007738863934852773 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( -0.1226774060147726 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 0.019160881669086405 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( -0.26340351121131067 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 0.035692361937735194 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( -0.010021324964069293 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( -0.1258614387723542 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.09372773898231128 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( -0.1687929597880227 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 0.10006283199629364 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( -0.10297858086822659 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 0.19240514535870412 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( -0.052866434246092435 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 0.26246121463661504 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 0.002677575140361194 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.09707041941284063 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( -0.032793219857333473 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( -0.003130273745908922 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 0.053446276216279974 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( -0.18668146437412367 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( -0.029335964960866243 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 0.07219772199502426 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( -0.0007762839781489412 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.08270823712098274 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.10432022852347983 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 0.07058566385022276 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 0.05096693098357383 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 0.0660758203367818 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( -0.07075895636353369 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 0.08422536561649958 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 0.21367580667795616 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( -0.055897457335624984 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( -0.17453036726139812 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( -0.054944001818473996 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( -0.5961651261710368 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 0.5020404526565605 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( -0.052340545201383926 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 0.052943076116746535 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 0.03835884479069335 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( -0.13571979014964694 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( -0.2190306843141183 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( -0.1191752362029383 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 0.38058346912807667 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( -0.12720928974168508 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( -0.09072936496613782 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( -0.03915125937954538 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 0.07075412393313481 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.10124894587016948 ) : ( Feature_63)) };
			lTable["impter_66"] = { ((Feature_64 == std::any()) ?  ( -0.1945661449475579 ) : ( Feature_64)) };
			lTable["impter_67"] = { ((Feature_65 == std::any()) ?  ( -0.1759482981261233 ) : ( Feature_65)) };
			lTable["impter_68"] = { ((Feature_66 == std::any()) ?  ( 0.07473228971855511 ) : ( Feature_66)) };
			lTable["impter_69"] = { ((Feature_67 == std::any()) ?  ( 0.0377705562115906 ) : ( Feature_67)) };
			lTable["impter_70"] = { ((Feature_68 == std::any()) ?  ( 0.0139470898598917 ) : ( Feature_68)) };
			lTable["impter_71"] = { ((Feature_69 == std::any()) ?  ( 0.2582685725145942 ) : ( Feature_69)) };
			lTable["impter_72"] = { ((Feature_70 == std::any()) ?  ( 0.022975786233048922 ) : ( Feature_70)) };
			lTable["impter_73"] = { ((Feature_71 == std::any()) ?  ( 0.17445434061949525 ) : ( Feature_71)) };
			lTable["impter_74"] = { ((Feature_72 == std::any()) ?  ( -0.011413879692078346 ) : ( Feature_72)) };
			lTable["impter_75"] = { ((Feature_73 == std::any()) ?  ( 0.07898984156871978 ) : ( Feature_73)) };
			lTable["impter_76"] = { ((Feature_74 == std::any()) ?  ( 0.0952547273770713 ) : ( Feature_74)) };
			lTable["impter_77"] = { ((Feature_75 == std::any()) ?  ( -0.03997776839639901 ) : ( Feature_75)) };
			lTable["impter_78"] = { ((Feature_76 == std::any()) ?  ( -0.020839895874293496 ) : ( Feature_76)) };
			lTable["impter_79"] = { ((Feature_77 == std::any()) ?  ( -0.07284631986613152 ) : ( Feature_77)) };
			lTable["impter_80"] = { ((Feature_78 == std::any()) ?  ( -0.27389951764434384 ) : ( Feature_78)) };
			lTable["impter_81"] = { ((Feature_79 == std::any()) ?  ( 0.08057287885287609 ) : ( Feature_79)) };
			lTable["impter_82"] = { ((Feature_80 == std::any()) ?  ( -0.06244274245437891 ) : ( Feature_80)) };
			lTable["impter_83"] = { ((Feature_81 == std::any()) ?  ( -0.12290855334066887 ) : ( Feature_81)) };
			lTable["impter_84"] = { ((Feature_82 == std::any()) ?  ( 0.11639531793890918 ) : ( Feature_82)) };
			lTable["impter_85"] = { ((Feature_83 == std::any()) ?  ( -0.03350462786128603 ) : ( Feature_83)) };
			lTable["impter_86"] = { ((Feature_84 == std::any()) ?  ( -0.03914049968144583 ) : ( Feature_84)) };
			lTable["impter_87"] = { ((Feature_85 == std::any()) ?  ( 0.24193903072305167 ) : ( Feature_85)) };
			lTable["impter_88"] = { ((Feature_86 == std::any()) ?  ( -0.07389719862221904 ) : ( Feature_86)) };
			lTable["impter_89"] = { ((Feature_87 == std::any()) ?  ( 0.1400756228320113 ) : ( Feature_87)) };
			lTable["impter_90"] = { ((Feature_88 == std::any()) ?  ( 0.2765301935136145 ) : ( Feature_88)) };
			lTable["impter_91"] = { ((Feature_89 == std::any()) ?  ( -0.07957147169250885 ) : ( Feature_89)) };
			lTable["impter_92"] = { ((Feature_90 == std::any()) ?  ( 0.16295767680642717 ) : ( Feature_90)) };
			lTable["impter_93"] = { ((Feature_91 == std::any()) ?  ( 0.07062813888509549 ) : ( Feature_91)) };
			lTable["impter_94"] = { ((Feature_92 == std::any()) ?  ( 0.012995630151896219 ) : ( Feature_92)) };
			lTable["impter_95"] = { ((Feature_93 == std::any()) ?  ( 0.1055212408190415 ) : ( Feature_93)) };
			lTable["impter_96"] = { ((Feature_94 == std::any()) ?  ( -0.1408434425354362 ) : ( Feature_94)) };
			lTable["impter_97"] = { ((Feature_95 == std::any()) ?  ( -0.1574012366732725 ) : ( Feature_95)) };
			lTable["impter_98"] = { ((Feature_96 == std::any()) ?  ( 0.05477536676313335 ) : ( Feature_96)) };
			lTable["impter_99"] = { ((Feature_97 == std::any()) ?  ( 0.05673272205919614 ) : ( Feature_97)) };
			lTable["impter_100"] = { ((Feature_98 == std::any()) ?  ( -0.14226649213619527 ) : ( Feature_98)) };
			lTable["impter_101"] = { ((Feature_99 == std::any()) ?  ( -0.04042675289131947 ) : ( Feature_99)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65, std::any impter_66, std::any impter_67, std::any impter_68, std::any impter_69, std::any impter_70, std::any impter_71, std::any impter_72, std::any impter_73, std::any impter_74, std::any impter_75, std::any impter_76, std::any impter_77, std::any impter_78, std::any impter_79, std::any impter_80, std::any impter_81, std::any impter_82, std::any impter_83, std::any impter_84, std::any impter_85, std::any impter_86, std::any impter_87, std::any impter_88, std::any impter_89, std::any impter_90, std::any impter_91, std::any impter_92, std::any impter_93, std::any impter_94, std::any impter_95, std::any impter_96, std::any impter_97, std::any impter_98, std::any impter_99, std::any impter_100, std::any impter_101) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - -0.0014807007689716506 ) / 0.9211229790312512 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.08599214990681354 ) / 0.9627516809237073 ) };
			lTable["scaler_4"] = { ( ( impter_4 - -0.006358164676411468 ) / 0.7890687835102894 ) };
			lTable["scaler_5"] = { ( ( impter_5 - -0.024301807422776375 ) / 1.0265272189083172 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 0.015786548044298444 ) / 1.0198090908026474 ) };
			lTable["scaler_7"] = { ( ( impter_7 - -0.13959329445651672 ) / 0.9185551763293686 ) };
			lTable["scaler_8"] = { ( ( impter_8 - -0.06476745048019888 ) / 1.0393547249617474 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.025579810774090658 ) / 0.8722131294644917 ) };
			lTable["scaler_10"] = { ( ( impter_10 - -0.03173937260977112 ) / 1.0164588299091024 ) };
			lTable["scaler_11"] = { ( ( impter_11 - -0.1518141420862488 ) / 1.0075402114297496 ) };
			lTable["scaler_12"] = { ( ( impter_12 - -0.13244576558492482 ) / 0.9215325459816371 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 0.044172679762224144 ) / 0.9053279964066308 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 0.010165946719810038 ) / 1.2190371046063362 ) };
			lTable["scaler_15"] = { ( ( impter_15 - -0.03645872019103299 ) / 1.0879005786584215 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 0.06491512811593925 ) / 1.0274670201407186 ) };
			lTable["scaler_17"] = { ( ( impter_17 - -0.11930146867074032 ) / 0.9506312349761404 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.007738863934852773 ) / 1.0928477585203984 ) };
			lTable["scaler_19"] = { ( ( impter_19 - -0.1226774060147726 ) / 0.9830561715965196 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 0.019160881669086405 ) / 1.2117417920836373 ) };
			lTable["scaler_21"] = { ( ( impter_21 - -0.26340351121131067 ) / 0.9807419262255984 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 0.035692361937735194 ) / 1.115824498468156 ) };
			lTable["scaler_23"] = { ( ( impter_23 - -0.010021324964069293 ) / 1.0790959803413318 ) };
			lTable["scaler_24"] = { ( ( impter_24 - -0.1258614387723542 ) / 1.0279672611547366 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.09372773898231128 ) / 0.9690760299303989 ) };
			lTable["scaler_26"] = { ( ( impter_26 - -0.1687929597880227 ) / 0.8845858581996813 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 0.10006283199629364 ) / 0.9149346104000894 ) };
			lTable["scaler_28"] = { ( ( impter_28 - -0.10297858086822659 ) / 1.0761397500557328 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 0.19240514535870412 ) / 2.089882492597775 ) };
			lTable["scaler_30"] = { ( ( impter_30 - -0.052866434246092435 ) / 1.0030777529896888 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 0.26246121463661504 ) / 1.9778491038473627 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 0.002677575140361194 ) / 0.8833924915211555 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.09707041941284063 ) / 0.8720005351713555 ) };
			lTable["scaler_34"] = { ( ( impter_34 - -0.032793219857333473 ) / 0.8745989090443193 ) };
			lTable["scaler_35"] = { ( ( impter_35 - -0.003130273745908922 ) / 0.9967699097535561 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 0.053446276216279974 ) / 0.9997289112199433 ) };
			lTable["scaler_37"] = { ( ( impter_37 - -0.18668146437412367 ) / 1.0272287171310865 ) };
			lTable["scaler_38"] = { ( ( impter_38 - -0.029335964960866243 ) / 1.0427555960451658 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 0.07219772199502426 ) / 0.8328229890456742 ) };
			lTable["scaler_40"] = { ( ( impter_40 - -0.0007762839781489412 ) / 0.9666524356457794 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.08270823712098274 ) / 1.083670494683493 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.10432022852347983 ) / 1.075472547982714 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 0.07058566385022276 ) / 0.9993462791463713 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 0.05096693098357383 ) / 0.8876971252794036 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 0.0660758203367818 ) / 1.041246125313479 ) };
			lTable["scaler_46"] = { ( ( impter_46 - -0.07075895636353369 ) / 2.238310207242139 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 0.08422536561649958 ) / 0.9520959686676432 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 0.21367580667795616 ) / 0.9907230316111766 ) };
			lTable["scaler_49"] = { ( ( impter_49 - -0.055897457335624984 ) / 1.0392400714320487 ) };
			lTable["scaler_50"] = { ( ( impter_50 - -0.17453036726139812 ) / 2.001507098381001 ) };
			lTable["scaler_51"] = { ( ( impter_51 - -0.054944001818473996 ) / 1.0041645540091246 ) };
			lTable["scaler_52"] = { ( ( impter_52 - -0.5961651261710368 ) / 2.467511153399545 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 0.5020404526565605 ) / 2.1929325118287792 ) };
			lTable["scaler_54"] = { ( ( impter_54 - -0.052340545201383926 ) / 0.98465558791252 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 0.052943076116746535 ) / 1.8137042567337183 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 0.03835884479069335 ) / 0.9241326354411343 ) };
			lTable["scaler_57"] = { ( ( impter_57 - -0.13571979014964694 ) / 0.8679095755948701 ) };
			lTable["scaler_58"] = { ( ( impter_58 - -0.2190306843141183 ) / 4.150428869748412 ) };
			lTable["scaler_59"] = { ( ( impter_59 - -0.1191752362029383 ) / 0.9123333408128436 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 0.38058346912807667 ) / 3.5635011086986927 ) };
			lTable["scaler_61"] = { ( ( impter_61 - -0.12720928974168508 ) / 0.9301024475991629 ) };
			lTable["scaler_62"] = { ( ( impter_62 - -0.09072936496613782 ) / 0.9490501277306023 ) };
			lTable["scaler_63"] = { ( ( impter_63 - -0.03915125937954538 ) / 0.9029504608473613 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 0.07075412393313481 ) / 0.9726561682528103 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.10124894587016948 ) / 0.9403075920249493 ) };
			lTable["scaler_66"] = { ( ( impter_66 - -0.1945661449475579 ) / 0.9400903625732654 ) };
			lTable["scaler_67"] = { ( ( impter_67 - -0.1759482981261233 ) / 0.9435422049943787 ) };
			lTable["scaler_68"] = { ( ( impter_68 - 0.07473228971855511 ) / 0.8871003964319768 ) };
			lTable["scaler_69"] = { ( ( impter_69 - 0.0377705562115906 ) / 1.0228978549196588 ) };
			lTable["scaler_70"] = { ( ( impter_70 - 0.0139470898598917 ) / 0.9465728329079491 ) };
			lTable["scaler_71"] = { ( ( impter_71 - 0.2582685725145942 ) / 1.1027232016521478 ) };
			lTable["scaler_72"] = { ( ( impter_72 - 0.022975786233048922 ) / 0.9200436904809381 ) };
			lTable["scaler_73"] = { ( ( impter_73 - 0.17445434061949525 ) / 0.9009964742482128 ) };
			lTable["scaler_74"] = { ( ( impter_74 - -0.011413879692078346 ) / 0.9483377025565977 ) };
			lTable["scaler_75"] = { ( ( impter_75 - 0.07898984156871978 ) / 0.9726668138861088 ) };
			lTable["scaler_76"] = { ( ( impter_76 - 0.0952547273770713 ) / 0.9607867245873394 ) };
			lTable["scaler_77"] = { ( ( impter_77 - -0.03997776839639901 ) / 1.0318828686080972 ) };
			lTable["scaler_78"] = { ( ( impter_78 - -0.020839895874293496 ) / 0.945141993694461 ) };
			lTable["scaler_79"] = { ( ( impter_79 - -0.07284631986613152 ) / 0.9103416784348913 ) };
			lTable["scaler_80"] = { ( ( impter_80 - -0.27389951764434384 ) / 2.0362603862996735 ) };
			lTable["scaler_81"] = { ( ( impter_81 - 0.08057287885287609 ) / 0.9919292944224015 ) };
			lTable["scaler_82"] = { ( ( impter_82 - -0.06244274245437891 ) / 0.8113039293824552 ) };
			lTable["scaler_83"] = { ( ( impter_83 - -0.12290855334066887 ) / 1.0307302654711112 ) };
			lTable["scaler_84"] = { ( ( impter_84 - 0.11639531793890918 ) / 0.9993591951135242 ) };
			lTable["scaler_85"] = { ( ( impter_85 - -0.03350462786128603 ) / 1.0197598648594488 ) };
			lTable["scaler_86"] = { ( ( impter_86 - -0.03914049968144583 ) / 0.9022051622058084 ) };
			lTable["scaler_87"] = { ( ( impter_87 - 0.24193903072305167 ) / 0.9625742678392476 ) };
			lTable["scaler_88"] = { ( ( impter_88 - -0.07389719862221904 ) / 1.0080070985430696 ) };
			lTable["scaler_89"] = { ( ( impter_89 - 0.1400756228320113 ) / 0.9315791274848828 ) };
			lTable["scaler_90"] = { ( ( impter_90 - 0.2765301935136145 ) / 1.9455982323178656 ) };
			lTable["scaler_91"] = { ( ( impter_91 - -0.07957147169250885 ) / 0.9688848077884671 ) };
			lTable["scaler_92"] = { ( ( impter_92 - 0.16295767680642717 ) / 0.8952741904110189 ) };
			lTable["scaler_93"] = { ( ( impter_93 - 0.07062813888509549 ) / 0.8331748322730601 ) };
			lTable["scaler_94"] = { ( ( impter_94 - 0.012995630151896219 ) / 1.059167248118017 ) };
			lTable["scaler_95"] = { ( ( impter_95 - 0.1055212408190415 ) / 1.0525988978000902 ) };
			lTable["scaler_96"] = { ( ( impter_96 - -0.1408434425354362 ) / 0.9172372033996682 ) };
			lTable["scaler_97"] = { ( ( impter_97 - -0.1574012366732725 ) / 0.9930125433643069 ) };
			lTable["scaler_98"] = { ( ( impter_98 - 0.05477536676313335 ) / 0.9803136353653645 ) };
			lTable["scaler_99"] = { ( ( impter_99 - 0.05673272205919614 ) / 0.9296338032188498 ) };
			lTable["scaler_100"] = { ( ( impter_100 - -0.14226649213619527 ) / 1.174442941822933 ) };
			lTable["scaler_101"] = { ( ( impter_101 - -0.04042675289131947 ) / 1.983747550989713 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0], iTable.at("impter_66")[0], iTable.at("impter_67")[0], iTable.at("impter_68")[0], iTable.at("impter_69")[0], iTable.at("impter_70")[0], iTable.at("impter_71")[0], iTable.at("impter_72")[0], iTable.at("impter_73")[0], iTable.at("impter_74")[0], iTable.at("impter_75")[0], iTable.at("impter_76")[0], iTable.at("impter_77")[0], iTable.at("impter_78")[0], iTable.at("impter_79")[0], iTable.at("impter_80")[0], iTable.at("impter_81")[0], iTable.at("impter_82")[0], iTable.at("impter_83")[0], iTable.at("impter_84")[0], iTable.at("impter_85")[0], iTable.at("impter_86")[0], iTable.at("impter_87")[0], iTable.at("impter_88")[0], iTable.at("impter_89")[0], iTable.at("impter_90")[0], iTable.at("impter_91")[0], iTable.at("impter_92")[0], iTable.at("impter_93")[0], iTable.at("impter_94")[0], iTable.at("impter_95")[0], iTable.at("impter_96")[0], iTable.at("impter_97")[0], iTable.at("impter_98")[0], iTable.at("impter_99")[0], iTable.at("impter_100")[0], iTable.at("impter_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65, std::any scaler_66, std::any scaler_67, std::any scaler_68, std::any scaler_69, std::any scaler_70, std::any scaler_71, std::any scaler_72, std::any scaler_73, std::any scaler_74, std::any scaler_75, std::any scaler_76, std::any scaler_77, std::any scaler_78, std::any scaler_79, std::any scaler_80, std::any scaler_81, std::any scaler_82, std::any scaler_83, std::any scaler_84, std::any scaler_85, std::any scaler_86, std::any scaler_87, std::any scaler_88, std::any scaler_89, std::any scaler_90, std::any scaler_91, std::any scaler_92, std::any scaler_93, std::any scaler_94, std::any scaler_95, std::any scaler_96, std::any scaler_97, std::any scaler_98, std::any scaler_99, std::any scaler_100, std::any scaler_101) {
			auto lClasses = get_classes();
	
			tTable lLogLikelihoodTable = tTable();
	
			lLogLikelihoodTable["Score"] = {
				-1.3862943611198906 + log_normal_cdf( scaler_2 , -0.07735245366406623 , 1.0588359502201072 ) + log_normal_cdf( scaler_3 , -0.20508363437229868 , 1.2268297444343228 ) + log_normal_cdf( scaler_4 , -0.1579833400589616 , 0.6547589320992179 ) + log_normal_cdf( scaler_5 , -0.009293555483426119 , 1.1343681249810764 ) + log_normal_cdf( scaler_6 , 0.021174013732721982 , 0.5324128145522724 ) + log_normal_cdf( scaler_7 , 0.09424363445264823 , 0.9926007064183734 ) + log_normal_cdf( scaler_8 , 0.1907441529199901 , 1.2720208815195047 ) + log_normal_cdf( scaler_9 , 0.020724133425202584 , 1.032267106553822 ) + log_normal_cdf( scaler_10 , -0.07460248351792499 , 0.6732307802757298 ) + log_normal_cdf( scaler_11 , -0.33712036015700936 , 1.0615936012837468 ) + log_normal_cdf( scaler_12 , 0.12510780938298963 , 0.6631497518996354 ) + log_normal_cdf( scaler_13 , -0.34534043537459164 , 0.9377219522025186 ) + log_normal_cdf( scaler_14 , -0.0064251288528683614 , 0.8078011134673841 ) + log_normal_cdf( scaler_15 , 0.21945231394860112 , 0.975031582649851 ) + log_normal_cdf( scaler_16 , 0.2227563751130742 , 0.6096084157871764 ) + log_normal_cdf( scaler_17 , 0.16243640836191617 , 1.1093565521874396 ) + log_normal_cdf( scaler_18 , -0.03356882706525812 , 0.701521880298121 ) + log_normal_cdf( scaler_19 , -0.19354232664189605 , 0.9657296839268932 ) + log_normal_cdf( scaler_20 , 0.05531640278571152 , 0.8263657215932837 ) + log_normal_cdf( scaler_21 , 0.2946984221643482 , 1.401136095735766 ) + log_normal_cdf( scaler_22 , -0.5284071447499723 , 0.6762287165210836 ) + log_normal_cdf( scaler_23 , 0.19670882231821837 , 0.964766142835348 ) + log_normal_cdf( scaler_24 , 0.2783131597987523 , 0.872364661665843 ) + log_normal_cdf( scaler_25 , -0.0040937734417411525 , 0.6181026590324274 ) + log_normal_cdf( scaler_26 , 0.31327472780683 , 1.288319378171469 ) + log_normal_cdf( scaler_27 , -0.03465472250607391 , 1.081994778867403 ) + log_normal_cdf( scaler_28 , 0.036187357593845317 , 1.2265227886766075 ) + log_normal_cdf( scaler_29 , -0.016093621999819386 , 0.7593313761294018 ) + log_normal_cdf( scaler_30 , -0.03204602798515747 , 1.007132931252925 ) + log_normal_cdf( scaler_31 , -0.4982549417216801 , 0.7570113195021155 ) + log_normal_cdf( scaler_32 , 0.14974903672836123 , 0.9500694697524883 ) + log_normal_cdf( scaler_33 , -0.04188291193740282 , 1.0762118814857928 ) + log_normal_cdf( scaler_34 , 0.006455536537763096 , 0.8326028863341848 ) + log_normal_cdf( scaler_35 , -0.3170952415529729 , 0.6924095822957965 ) + log_normal_cdf( scaler_36 , -0.13148954147215175 , 0.7594391256783241 ) + log_normal_cdf( scaler_37 , 0.05318796383090549 , 1.0012869828722268 ) + log_normal_cdf( scaler_38 , -0.10618477296132023 , 0.8280532589670717 ) + log_normal_cdf( scaler_39 , 0.2081169951826518 , 1.468050409485379 ) + log_normal_cdf( scaler_40 , -0.3490236353095814 , 0.8327130112950843 ) + log_normal_cdf( scaler_41 , -0.18155143691106487 , 0.9486500583573285 ) + log_normal_cdf( scaler_42 , -0.03858112462627889 , 1.2094168913423713 ) + log_normal_cdf( scaler_43 , -0.2818419882625127 , 0.6889676666772317 ) + log_normal_cdf( scaler_44 , -0.028711217612159307 , 0.8585481117279106 ) + log_normal_cdf( scaler_45 , 0.38226236566814764 , 1.0357564469674327 ) + log_normal_cdf( scaler_46 , -0.09512631502717755 , 0.35998712002160727 ) + log_normal_cdf( scaler_47 , 0.11828359475331697 , 0.7040475208978972 ) + log_normal_cdf( scaler_48 , -0.010710603045795566 , 0.9309526014265601 ) + log_normal_cdf( scaler_49 , -0.07457196516531772 , 0.8574270513505317 ) + log_normal_cdf( scaler_50 , -0.30945477508127056 , 1.31186477919495 ) + log_normal_cdf( scaler_51 , 0.04633257381566266 , 0.9870904822372613 ) + log_normal_cdf( scaler_52 , 0.34872992235491274 , 0.9261990722860086 ) + log_normal_cdf( scaler_53 , -0.32681955203840585 , 0.8504749050046809 ) + log_normal_cdf( scaler_54 , 0.1344621631603333 , 1.0461646868293728 ) + log_normal_cdf( scaler_55 , -0.3094645974975528 , 1.1244229383595195 ) + log_normal_cdf( scaler_56 , 0.06656333211189001 , 0.856949575582087 ) + log_normal_cdf( scaler_57 , -0.038875416545212045 , 0.965192335469125 ) + log_normal_cdf( scaler_58 , 0.2098613499875671 , 1.019034260827082 ) + log_normal_cdf( scaler_59 , 0.030817790036814185 , 0.7199511413375059 ) + log_normal_cdf( scaler_60 , -0.04783280163421915 , 0.8603698660475851 ) + log_normal_cdf( scaler_61 , 0.09363466726085022 , 0.7116734856297096 ) + log_normal_cdf( scaler_62 , -0.09938338321035274 , 0.8405243929576223 ) + log_normal_cdf( scaler_63 , 0.2744248635020964 , 0.6282984343886213 ) + log_normal_cdf( scaler_64 , 0.14513083183639616 , 1.1516078437233552 ) + log_normal_cdf( scaler_65 , 0.1351314686186417 , 0.5849257013058756 ) + log_normal_cdf( scaler_66 , -0.07085272498318422 , 1.0250832318872785 ) + log_normal_cdf( scaler_67 , -0.20816914178351095 , 0.9160894246824838 ) + log_normal_cdf( scaler_68 , -0.07078966697529833 , 1.1618986491314478 ) + log_normal_cdf( scaler_69 , 0.20590250483741843 , 0.7602906413575016 ) + log_normal_cdf( scaler_70 , 0.2712458863749532 , 0.7125007958416781 ) + log_normal_cdf( scaler_71 , 0.12271809236415122 , 0.8964635269994068 ) + log_normal_cdf( scaler_72 , -0.22905152733979525 , 1.1089958917745644 ) + log_normal_cdf( scaler_73 , 0.10728920950458827 , 1.138496453475833 ) + log_normal_cdf( scaler_74 , 0.06521625519287623 , 1.0853148313458072 ) + log_normal_cdf( scaler_75 , 0.15671995812989015 , 0.6300310780970273 ) + log_normal_cdf( scaler_76 , -0.09648734028193855 , 0.9633029562357063 ) + log_normal_cdf( scaler_77 , 0.2948616646115956 , 0.861050683656165 ) + log_normal_cdf( scaler_78 , -0.40745251792211884 , 1.2084287659193553 ) + log_normal_cdf( scaler_79 , 0.1428416224186894 , 1.0641920052804952 ) + log_normal_cdf( scaler_80 , 0.575772002899993 , 0.5627738861764351 ) + log_normal_cdf( scaler_81 , -0.20160405787591296 , 1.087957806020406 ) + log_normal_cdf( scaler_82 , 0.05571945822874128 , 1.383144346354302 ) + log_normal_cdf( scaler_83 , 0.06324286295374716 , 1.0769069078464 ) + log_normal_cdf( scaler_84 , -0.14443917556928243 , 1.0342738951336892 ) + log_normal_cdf( scaler_85 , 0.04556011081315767 , 1.0476166740273205 ) + log_normal_cdf( scaler_86 , -0.024807796693845818 , 1.0481258964387041 ) + log_normal_cdf( scaler_87 , 0.054627643187249025 , 1.2918543039023245 ) + log_normal_cdf( scaler_88 , 0.10745896797239579 , 0.9888543427735542 ) + log_normal_cdf( scaler_89 , 0.07206156080432678 , 0.6690171019319504 ) + log_normal_cdf( scaler_90 , 0.024941347147963092 , 0.6176815576829514 ) + log_normal_cdf( scaler_91 , -0.10568883977273279 , 1.255259421817024 ) + log_normal_cdf( scaler_92 , 0.06838327754998609 , 1.118600035151195 ) + log_normal_cdf( scaler_93 , -0.3427317349983649 , 0.9769068002471408 ) + log_normal_cdf( scaler_94 , -0.4318093343225608 , 0.975779483919374 ) + log_normal_cdf( scaler_95 , 0.15249881989096825 , 1.1404609000082633 ) + log_normal_cdf( scaler_96 , -0.14576583722910053 , 0.7085674339807618 ) + log_normal_cdf( scaler_97 , 0.13685076638776053 , 0.7406828249529694 ) + log_normal_cdf( scaler_98 , -0.008495684776469952 , 0.5170913042202877 ) + log_normal_cdf( scaler_99 , 0.03148163788046797 , 1.1345819515455482 ) + log_normal_cdf( scaler_100 , -0.08454841754315696 , 0.9951327541339361 ) + log_normal_cdf( scaler_101 , 0.3860784115965484 , 0.8560413806550327 ),
				-1.3454723665996353 + log_normal_cdf( scaler_2 , -0.09085342173480919 , 0.8819119929690233 ) + log_normal_cdf( scaler_3 , 0.017155483832792348 , 0.708063520340927 ) + log_normal_cdf( scaler_4 , 0.2567405478203853 , 0.6149096973793764 ) + log_normal_cdf( scaler_5 , 0.22348765713560975 , 0.6158835335816188 ) + log_normal_cdf( scaler_6 , -0.06613943647463252 , 1.0441415967868692 ) + log_normal_cdf( scaler_7 , -0.09548502882424904 , 0.7581194034943606 ) + log_normal_cdf( scaler_8 , 0.040096317474865896 , 1.070430911524947 ) + log_normal_cdf( scaler_9 , 0.16213480891340923 , 1.071739365167322 ) + log_normal_cdf( scaler_10 , -0.22105171894310963 , 1.1599676194850606 ) + log_normal_cdf( scaler_11 , 0.31519235096827963 , 0.6340543560560931 ) + log_normal_cdf( scaler_12 , -0.0548500524503875 , 1.4418388651885248 ) + log_normal_cdf( scaler_13 , 0.017380514587103518 , 1.03767464028954 ) + log_normal_cdf( scaler_14 , -0.2298617764503696 , 0.9096434722169099 ) + log_normal_cdf( scaler_15 , -0.03402300090456628 , 0.7360469205106475 ) + log_normal_cdf( scaler_16 , -0.2787368454163508 , 0.9149574418096402 ) + log_normal_cdf( scaler_17 , -0.08448594259433741 , 0.8693829071948981 ) + log_normal_cdf( scaler_18 , 0.2906013697163703 , 1.361568705502922 ) + log_normal_cdf( scaler_19 , -0.06138488004203971 , 0.8358517130563674 ) + log_normal_cdf( scaler_20 , -0.37661462041905763 , 1.0879328599639724 ) + log_normal_cdf( scaler_21 , -0.34963107030267027 , 0.8108129611243182 ) + log_normal_cdf( scaler_22 , -0.0718842558981887 , 0.6577828145910911 ) + log_normal_cdf( scaler_23 , -0.02084978727101317 , 0.9876446004001797 ) + log_normal_cdf( scaler_24 , 0.03920910995027518 , 0.8733049080795272 ) + log_normal_cdf( scaler_25 , -0.2817181098539562 , 1.0271164451183847 ) + log_normal_cdf( scaler_26 , -0.36028496516243363 , 0.9751514363065517 ) + log_normal_cdf( scaler_27 , -0.24536709751779998 , 0.9123739279516924 ) + log_normal_cdf( scaler_28 , 0.10020974167581716 , 0.9899894449831821 ) + log_normal_cdf( scaler_29 , 0.1791954423563439 , 1.3007698785205444 ) + log_normal_cdf( scaler_30 , -0.2854239849424982 , 0.9119991979100007 ) + log_normal_cdf( scaler_31 , -0.17637109715082833 , 0.5139168851938434 ) + log_normal_cdf( scaler_32 , -0.08269307086370814 , 1.3571875509971902 ) + log_normal_cdf( scaler_33 , -0.0656501832896199 , 0.8205490087245304 ) + log_normal_cdf( scaler_34 , -0.08163884956677257 , 1.095171786816299 ) + log_normal_cdf( scaler_35 , -0.025142929000281037 , 1.2066287489344325 ) + log_normal_cdf( scaler_36 , -0.21865036071289812 , 1.0861999562488747 ) + log_normal_cdf( scaler_37 , 0.1089887316416855 , 0.5497807968455818 ) + log_normal_cdf( scaler_38 , -0.16400102239013348 , 0.8908454637849237 ) + log_normal_cdf( scaler_39 , 0.16603166156100316 , 0.7305765624036361 ) + log_normal_cdf( scaler_40 , -0.25409066955861526 , 1.0848906057166439 ) + log_normal_cdf( scaler_41 , 0.03934795415794217 , 0.9233323835940729 ) + log_normal_cdf( scaler_42 , -0.11999930349119146 , 1.150727231405405 ) + log_normal_cdf( scaler_43 , 0.1323199731488807 , 0.9465738928418337 ) + log_normal_cdf( scaler_44 , -0.01723004532877672 , 1.0136143478547879 ) + log_normal_cdf( scaler_45 , -0.15683778553778627 , 1.2268584501681763 ) + log_normal_cdf( scaler_46 , 0.3172848183136293 , 0.7085586342471191 ) + log_normal_cdf( scaler_47 , 0.25198315435623775 , 1.0915513603510991 ) + log_normal_cdf( scaler_48 , 0.14376340998591922 , 0.8774863967105323 ) + log_normal_cdf( scaler_49 , 0.21379587669742034 , 0.5872182374010827 ) + log_normal_cdf( scaler_50 , 0.09486790183641172 , 0.7249028687574683 ) + log_normal_cdf( scaler_51 , -0.09750726432509563 , 0.7623013975675969 ) + log_normal_cdf( scaler_52 , -0.23037364888928358 , 0.7793202091068085 ) + log_normal_cdf( scaler_53 , -0.16704932989186513 , 0.8895682641344803 ) + log_normal_cdf( scaler_54 , -0.06746146336850485 , 1.0767727673764396 ) + log_normal_cdf( scaler_55 , -0.06141592797843599 , 0.8981945943791247 ) + log_normal_cdf( scaler_56 , -0.08361717691110866 , 1.001316283685337 ) + log_normal_cdf( scaler_57 , 0.12506889376309796 , 1.1623599954695438 ) + log_normal_cdf( scaler_58 , 0.18704899967203623 , 1.271583233323389 ) + log_normal_cdf( scaler_59 , 0.12438087614726843 , 1.2571412572189289 ) + log_normal_cdf( scaler_60 , -0.08839476651597705 , 0.782850769843337 ) + log_normal_cdf( scaler_61 , -0.1519718668829727 , 1.3208178970269844 ) + log_normal_cdf( scaler_62 , 0.2511969255066998 , 0.9709298942657627 ) + log_normal_cdf( scaler_63 , 0.05856593711264651 , 1.0344188211891263 ) + log_normal_cdf( scaler_64 , -0.14047607756287536 , 1.3192341576365958 ) + log_normal_cdf( scaler_65 , -0.14932531940370172 , 1.0238653678054621 ) + log_normal_cdf( scaler_66 , 0.1567557269128665 , 0.7728198716327614 ) + log_normal_cdf( scaler_67 , 0.30767980800939315 , 1.032499376408642 ) + log_normal_cdf( scaler_68 , 0.060794363953162324 , 0.9432494083767783 ) + log_normal_cdf( scaler_69 , -0.2947636855403053 , 1.7022882362434624 ) + log_normal_cdf( scaler_70 , 0.3088982504535457 , 0.7820298228518854 ) + log_normal_cdf( scaler_71 , 0.01064772629986653 , 0.8159517099127334 ) + log_normal_cdf( scaler_72 , -0.019192153088467077 , 1.1957209320960622 ) + log_normal_cdf( scaler_73 , -0.3217027013388406 , 0.7196138756348164 ) + log_normal_cdf( scaler_74 , -0.08699168337270917 , 0.9785783085349194 ) + log_normal_cdf( scaler_75 , -0.10390610238026522 , 1.6234477581794398 ) + log_normal_cdf( scaler_76 , 0.06855824987821077 , 0.9720234414517829 ) + log_normal_cdf( scaler_77 , 0.13538776467677077 , 1.1067291442167795 ) + log_normal_cdf( scaler_78 , 0.029740806714385008 , 0.7278164963165216 ) + log_normal_cdf( scaler_79 , -0.03672081662893395 , 0.4957540496960005 ) + log_normal_cdf( scaler_80 , 0.33991177701730957 , 1.2740101383664248 ) + log_normal_cdf( scaler_81 , 0.15462005877356597 , 0.8979590567993424 ) + log_normal_cdf( scaler_82 , -0.21479445983468012 , 0.6428537688183353 ) + log_normal_cdf( scaler_83 , 0.05963788387212473 , 1.0436980160936036 ) + log_normal_cdf( scaler_84 , -0.031117453656244277 , 1.0459227080358924 ) + log_normal_cdf( scaler_85 , 0.11230410031717662 , 0.9361575816691756 ) + log_normal_cdf( scaler_86 , 0.044765477872834206 , 0.9379832694003175 ) + log_normal_cdf( scaler_87 , 0.07997202749864685 , 0.6734386251592984 ) + log_normal_cdf( scaler_88 , -0.011710071195330393 , 1.038185029841615 ) + log_normal_cdf( scaler_89 , 0.05916370321306775 , 1.1315204429491115 ) + log_normal_cdf( scaler_90 , 0.3439222086458767 , 0.6401493368506076 ) + log_normal_cdf( scaler_91 , -0.25047971578921313 , 0.758733436236524 ) + log_normal_cdf( scaler_92 , 0.14691154741911874 , 1.01294946322581 ) + log_normal_cdf( scaler_93 , 0.289148625045771 , 0.7726541537628607 ) + log_normal_cdf( scaler_94 , 0.25559293892042423 , 1.330759355755568 ) + log_normal_cdf( scaler_95 , 0.2897131210185526 , 1.02699554152781 ) + log_normal_cdf( scaler_96 , 0.4573615075318756 , 0.9762148037750136 ) + log_normal_cdf( scaler_97 , -0.0688633174890089 , 0.6372295408631964 ) + log_normal_cdf( scaler_98 , -0.13941491812001142 , 1.3994468205021533 ) + log_normal_cdf( scaler_99 , 0.10151637737673268 , 1.0233245031080231 ) + log_normal_cdf( scaler_100 , -0.01609180876379688 , 1.1839888477590508 ) + log_normal_cdf( scaler_101 , -0.18762724256291385 , 1.3614288409208164 ),
				-1.4288539755386864 + log_normal_cdf( scaler_2 , 0.0565323201747287 , 0.879202954473784 ) + log_normal_cdf( scaler_3 , -0.0885619586506611 , 0.9539248937572812 ) + log_normal_cdf( scaler_4 , -0.34337394720360176 , 1.4483961374759284 ) + log_normal_cdf( scaler_5 , -0.12552382311065863 , 1.3074328042847554 ) + log_normal_cdf( scaler_6 , 0.11541304059069807 , 0.9001592171395508 ) + log_normal_cdf( scaler_7 , 0.13070829550112104 , 1.4051799827177875 ) + log_normal_cdf( scaler_8 , -0.04579749774141649 , 0.5965405763179045 ) + log_normal_cdf( scaler_9 , 0.019615946539844133 , 0.923573247209335 ) + log_normal_cdf( scaler_10 , -0.015524294927677184 , 1.0942227368891009 ) + log_normal_cdf( scaler_11 , 0.1811601938390257 , 1.1029682743758114 ) + log_normal_cdf( scaler_12 , -0.30857001054844707 , 0.5096863232182596 ) + log_normal_cdf( scaler_13 , 0.10294189278804682 , 0.717248375202037 ) + log_normal_cdf( scaler_14 , 0.08392799750831183 , 1.1902984174252145 ) + log_normal_cdf( scaler_15 , -0.38993355536852237 , 1.2974284787982175 ) + log_normal_cdf( scaler_16 , -0.26881856031917967 , 1.0653038431010544 ) + log_normal_cdf( scaler_17 , -0.12628900907050425 , 0.9071618001025862 ) + log_normal_cdf( scaler_18 , -0.16581374628915685 , 0.8683175477432034 ) + log_normal_cdf( scaler_19 , -0.12158550373155425 , 1.2204931991524546 ) + log_normal_cdf( scaler_20 , 0.10596901615423997 , 0.8586265369710201 ) + log_normal_cdf( scaler_21 , -0.27018531308342014 , 0.7098233908394638 ) + log_normal_cdf( scaler_22 , 0.0944389185568222 , 1.0895326723265324 ) + log_normal_cdf( scaler_23 , -0.21659725548176195 , 0.9189793336046107 ) + log_normal_cdf( scaler_24 , -0.26132104417016255 , 0.8760808704374035 ) + log_normal_cdf( scaler_25 , 0.12982600257392737 , 1.158008361529033 ) + log_normal_cdf( scaler_26 , 0.04006118552537573 , 0.79001497489207 ) + log_normal_cdf( scaler_27 , 0.21905426269880293 , 0.9203658668802077 ) + log_normal_cdf( scaler_28 , -0.025077583917138296 , 0.7279055150736454 ) + log_normal_cdf( scaler_29 , -0.14430462823266324 , 0.7892165255912847 ) + log_normal_cdf( scaler_30 , 0.3995200573775768 , 1.214835008503572 ) + log_normal_cdf( scaler_31 , 0.1967082914953008 , 1.0096963775229704 ) + log_normal_cdf( scaler_32 , 0.29506709786049384 , 0.5663319275228068 ) + log_normal_cdf( scaler_33 , 0.3400443140926395 , 0.7926378008427108 ) + log_normal_cdf( scaler_34 , 0.15430916505854164 , 1.2341829767527128 ) + log_normal_cdf( scaler_35 , 0.01868316188882483 , 1.0158663719255427 ) + log_normal_cdf( scaler_36 , 0.04149729784100494 , 1.3145365501398445 ) + log_normal_cdf( scaler_37 , -0.24992458076733315 , 1.007771721022463 ) + log_normal_cdf( scaler_38 , 0.22345959904659637 , 1.2553581346210492 ) + log_normal_cdf( scaler_39 , -0.040612687505850335 , 0.8065743370396312 ) + log_normal_cdf( scaler_40 , 0.46721429292586963 , 0.731248511587883 ) + log_normal_cdf( scaler_41 , -0.16592101049583677 , 1.1139020280578873 ) + log_normal_cdf( scaler_42 , 0.08319824153911475 , 0.582902834244649 ) + log_normal_cdf( scaler_43 , -0.07529960078184648 , 0.9211123081218398 ) + log_normal_cdf( scaler_44 , -0.3315449872508946 , 0.681332707147338 ) + log_normal_cdf( scaler_45 , -0.18264412423653137 , 0.9867924032840251 ) + log_normal_cdf( scaler_46 , -0.9028372438465028 , 0.9623952547171964 ) + log_normal_cdf( scaler_47 , -0.36188307434194633 , 1.0581265257050585 ) + log_normal_cdf( scaler_48 , -0.005912552944961832 , 1.221437838253188 ) + log_normal_cdf( scaler_49 , 0.09316208019339835 , 0.9150772467862683 ) + log_normal_cdf( scaler_50 , 0.11133050777735147 , 0.5160818373485043 ) + log_normal_cdf( scaler_51 , 0.03756654720446608 , 0.7290522876797648 ) + log_normal_cdf( scaler_52 , -0.2551556657056245 , 1.2250811516667925 ) + log_normal_cdf( scaler_53 , 0.1066172608113214 , 0.49587245768256055 ) + log_normal_cdf( scaler_54 , 0.03943817457385178 , 0.9332889569675811 ) + log_normal_cdf( scaler_55 , -0.006790205914945381 , 0.9536588267365332 ) + log_normal_cdf( scaler_56 , -0.332781431594656 , 1.1156158726867584 ) + log_normal_cdf( scaler_57 , 0.008559363116962326 , 1.2427695664139153 ) + log_normal_cdf( scaler_58 , -0.7249620379185645 , 0.3828542156261585 ) + log_normal_cdf( scaler_59 , 0.12742280323373767 , 1.2863966406699454 ) + log_normal_cdf( scaler_60 , 0.5304790904594336 , 0.7177544903125125 ) + log_normal_cdf( scaler_61 , -0.23293503607802962 , 0.9463417638699501 ) + log_normal_cdf( scaler_62 , -0.13810027071322156 , 1.0989298656023252 ) + log_normal_cdf( scaler_63 , -0.26154053431532576 , 1.358028669138465 ) + log_normal_cdf( scaler_64 , 0.09948997718874582 , 0.8185892510136562 ) + log_normal_cdf( scaler_65 , 0.38125164819031665 , 0.7624915474111646 ) + log_normal_cdf( scaler_66 , 0.2248780770561982 , 1.0110587772531334 ) + log_normal_cdf( scaler_67 , 0.002215942118498351 , 1.0579910656314881 ) + log_normal_cdf( scaler_68 , 0.13727639667826946 , 0.8286131345634526 ) + log_normal_cdf( scaler_69 , -0.01106044942982735 , 0.8665118243714185 ) + log_normal_cdf( scaler_70 , -0.46763086582536906 , 0.8972959807985664 ) + log_normal_cdf( scaler_71 , -0.2112464791077946 , 0.6479860316483109 ) + log_normal_cdf( scaler_72 , 0.23910050846310485 , 0.9787613721670168 ) + log_normal_cdf( scaler_73 , 0.47747803645325826 , 0.726839258162138 ) + log_normal_cdf( scaler_74 , 0.11311135940810253 , 0.9341155746587249 ) + log_normal_cdf( scaler_75 , -0.1266717874365484 , 0.9211778817130103 ) + log_normal_cdf( scaler_76 , -0.0027172649670840813 , 1.2769435788509649 ) + log_normal_cdf( scaler_77 , -0.37241959186731477 , 0.6757429494373995 ) + log_normal_cdf( scaler_78 , 0.2616370582925521 , 0.9051525099856168 ) + log_normal_cdf( scaler_79 , -0.11004215869011613 , 1.3889604640611815 ) + log_normal_cdf( scaler_80 , -0.567289538057567 , 0.6459406719373197 ) + log_normal_cdf( scaler_81 , 0.09663503299403377 , 0.8570061790100328 ) + log_normal_cdf( scaler_82 , 0.022197826467447244 , 1.2857850407669795 ) + log_normal_cdf( scaler_83 , 0.21326462123258932 , 0.7252651062918138 ) + log_normal_cdf( scaler_84 , -0.1078023884139804 , 0.9835134219705143 ) + log_normal_cdf( scaler_85 , -0.06726739699243243 , 1.2407093646547533 ) + log_normal_cdf( scaler_86 , 0.05188031615795884 , 1.0862606376840032 ) + log_normal_cdf( scaler_87 , 0.1396952422373977 , 0.976594200364953 ) + log_normal_cdf( scaler_88 , 0.002481887680299965 , 0.8591078203986752 ) + log_normal_cdf( scaler_89 , -0.19336109444141197 , 0.9086843828024546 ) + log_normal_cdf( scaler_90 , 0.07629439038524893 , 0.8896495304158307 ) + log_normal_cdf( scaler_91 , 0.02654029892937965 , 0.9893515251735706 ) + log_normal_cdf( scaler_92 , -0.19970593293663952 , 0.92623584862393 ) + log_normal_cdf( scaler_93 , 0.11557920013149851 , 0.6683492426862593 ) + log_normal_cdf( scaler_94 , 0.11268076275405844 , 0.48879847009350297 ) + log_normal_cdf( scaler_95 , -0.11958188308077643 , 0.8465943446245107 ) + log_normal_cdf( scaler_96 , -0.05875706347421359 , 0.5529848752393617 ) + log_normal_cdf( scaler_97 , -0.16700820420996265 , 1.1537942690320588 ) + log_normal_cdf( scaler_98 , 0.023892802078409957 , 1.2789716243631681 ) + log_normal_cdf( scaler_99 , -0.04337902125578642 , 0.9535231364503007 ) + log_normal_cdf( scaler_100 , 0.12410546033302285 , 1.2025804570146874 ) + log_normal_cdf( scaler_101 , 0.4068542160342243 , 0.3639170541718453 ),
				-1.3862943611198906 + log_normal_cdf( scaler_2 , 0.11781462780371081 , 1.1484115252797882 ) + log_normal_cdf( scaler_3 , 0.2720852157533567 , 0.9975134144076091 ) + log_normal_cdf( scaler_4 , 0.21961196881617862 , 1.0618205578994984 ) + log_normal_cdf( scaler_5 , -0.10321242355178613 , 0.8932633522091232 ) + log_normal_cdf( scaler_6 , -0.06288293130439879 , 1.4955626521701602 ) + log_normal_cdf( scaler_7 , -0.12004217928262949 , 0.8218987016439468 ) + log_normal_cdf( scaler_8 , -0.1886218816207845 , 0.9656159364354484 ) + log_normal_cdf( scaler_9 , -0.20841317481068766 , 0.8946293861060515 ) + log_normal_cdf( scaler_10 , 0.31974214005602164 , 0.9109081119401446 ) + log_normal_cdf( scaler_11 , -0.16481685786401512 , 0.9451699176435272 ) + log_normal_cdf( scaler_12 , 0.2277405886950921 , 1.1845856102048444 ) + log_normal_cdf( scaler_13 , 0.22858308542448047 , 1.112023539394085 ) + log_normal_cdf( scaler_14 , 0.16543348170987124 , 1.0147530707712706 ) + log_normal_cdf( scaler_15 , 0.1896746358884895 , 0.7838295013890435 ) + log_normal_cdf( scaler_16 , 0.32521229250150513 , 1.110827367701077 ) + log_normal_cdf( scaler_17 , 0.04659674886641887 , 1.0643963596165587 ) + log_normal_cdf( scaler_18 , -0.1102360928621857 , 0.920444398788625 ) + log_normal_cdf( scaler_19 , 0.3740043510950935 , 0.798522066863664 ) + log_normal_cdf( scaler_20 , 0.23543685300299375 , 1.0005199869827963 ) + log_normal_cdf( scaler_21 , 0.32842820110587795 , 0.6820136845906832 ) + log_normal_cdf( scaler_22 , 0.5127826143602975 , 1.0383555089652239 ) + log_normal_cdf( scaler_23 , 0.03258207592577534 , 1.0405804896096567 ) + log_normal_cdf( scaler_24 , -0.06872331533388308 , 1.229139383074513 ) + log_normal_cdf( scaler_25 , 0.17313355207293202 , 1.07340990203573 ) + log_normal_cdf( scaler_26 , 0.02363014144222002 , 0.7033489204654715 ) + log_normal_cdf( scaler_27 , 0.08031844733409617 , 0.9692474656586847 ) + log_normal_cdf( scaler_28 , -0.11653982058556377 , 1.0187079465504225 ) + log_normal_cdf( scaler_29 , -0.03227636173173666 , 1.0746616010323577 ) + log_normal_cdf( scaler_30 , -0.053510709353251286 , 0.6369337798001231 ) + log_normal_cdf( scaler_31 , 0.4934627219041297 , 1.1787846810838574 ) + log_normal_cdf( scaler_32 , -0.3463830566949719 , 0.860492774585597 ) + log_normal_cdf( scaler_33 , -0.21560728147468944 , 1.145895926909465 ) + log_normal_cdf( scaler_34 , -0.06929468475347735 , 0.8092292735717014 ) + log_normal_cdf( scaler_35 , 0.3253810957848086 , 0.8697315952447995 ) + log_normal_cdf( scaler_36 , 0.3194820901171241 , 0.6785298371836087 ) + log_normal_cdf( scaler_37 , 0.07279316394436669 , 1.3798824708756188 ) + log_normal_cdf( scaler_38 , 0.06287038886472125 , 0.9498326657334153 ) + log_normal_cdf( scaler_39 , -0.34214615044892344 , 0.8072928139425637 ) + log_normal_cdf( scaler_40 , 0.1659543853791805 , 0.9106084652076551 ) + log_normal_cdf( scaler_41 , 0.29957161972171903 , 0.8713563763786407 ) + log_normal_cdf( scaler_42 , 0.0838487509546184 , 1.0031412221180955 ) + log_normal_cdf( scaler_43 , 0.21617080031503175 , 1.2924486378414513 ) + log_normal_cdf( scaler_44 , 0.36438979427840895 , 1.1934042765207717 ) + log_normal_cdf( scaler_45 , -0.04385572000627771 , 0.5349501768672622 ) + log_normal_cdf( scaler_46 , 0.6298403213033791 , 0.6878714896141422 ) + log_normal_cdf( scaler_47 , -0.03396143429669945 , 0.9380936319462672 ) + log_normal_cdf( scaler_48 , -0.13337675245061512 , 0.9449878195719948 ) + log_normal_cdf( scaler_49 , -0.23741239991316845 , 1.536081888832121 ) + log_normal_cdf( scaler_50 , 0.10394230738171299 , 1.310630420676927 ) + log_normal_cdf( scaler_51 , 0.019236218785365272 , 1.506397454481841 ) + log_normal_cdf( scaler_52 , 0.13576680820598144 , 0.830252676565008 ) + log_normal_cdf( scaler_53 , 0.3986543957315824 , 1.4419822262287552 ) + log_normal_cdf( scaler_54 , -0.10198472278474874 , 0.9030829050933751 ) + log_normal_cdf( scaler_55 , 0.37994680314357954 , 0.7819334787225033 ) + log_normal_cdf( scaler_56 , 0.33945343244872705 , 0.7978091168215282 ) + log_normal_cdf( scaler_57 , -0.09960740411177055 , 0.6052313746918005 ) + log_normal_cdf( scaler_58 , 0.2900512283593529 , 0.6212100753326293 ) + log_normal_cdf( scaler_59 , -0.28249472245588386 , 0.6253016769021585 ) + log_normal_cdf( scaler_60 , -0.36846511160192835 , 1.2204360852185014 ) + log_normal_cdf( scaler_61 , 0.2878987703170247 , 0.83785482315167 ) + log_normal_cdf( scaler_62 , -0.029933988092289202 , 1.0001699938812443 ) + log_normal_cdf( scaler_63 , -0.08478803594224953 , 0.8411136145422641 ) + log_normal_cdf( scaler_64 , -0.09414614584761559 , 0.6297405050942172 ) + log_normal_cdf( scaler_65 , -0.3449504237555059 , 1.3180519147144514 ) + log_normal_cdf( scaler_66 , -0.30794264772990815 , 1.0270566952229399 ) + log_normal_cdf( scaler_67 , -0.11445426942316746 , 0.8394320968813743 ) + log_normal_cdf( scaler_68 , -0.12409434229258738 , 1.0191421562730116 ) + log_normal_cdf( scaler_69 , 0.11174259830398402 , 0.49057993387185417 ) + log_normal_cdf( scaler_70 , -0.14486865084808445 , 1.2094540024733975 ) + log_normal_cdf( scaler_71 , 0.06863506855179066 , 1.5699458678749665 ) + log_normal_cdf( scaler_72 , 0.019905366196472856 , 0.5994503050646829 ) + log_normal_cdf( scaler_73 , -0.2297653472110017 , 1.0247576753687135 ) + log_normal_cdf( scaler_74 , -0.08299830444573568 , 0.9688528405740877 ) + log_normal_cdf( scaler_75 , 0.07290936147624494 , 0.7395816203639417 ) + log_normal_cdf( scaler_76 , 0.02767654225225789 , 0.7854560827847965 ) + log_normal_cdf( scaler_77 , -0.07898847727705516 , 1.0933259596089233 ) + log_normal_cdf( scaler_78 , 0.12573699673093836 , 0.917640812896057 ) + log_normal_cdf( scaler_79 , 0.0008662969811447768 , 1.0548966133619386 ) + log_normal_cdf( scaler_80 , -0.38619429665452204 , 0.5816837680084639 ) + log_normal_cdf( scaler_81 , -0.05206707663250077 , 1.078162680423785 ) + log_normal_cdf( scaler_82 , 0.14675185373441357 , 0.6418336531297428 ) + log_normal_cdf( scaler_83 , -0.3297442540017754 , 0.9808394072973069 ) + log_normal_cdf( scaler_84 , 0.2801638120246013 , 0.8221893815228183 ) + log_normal_cdf( scaler_85 , -0.09807895985913571 , 0.7590367503855222 ) + log_normal_cdf( scaler_86 , -0.07154154574173378 , 0.9234079401975199 ) + log_normal_cdf( scaler_87 , -0.2718064456425123 , 0.9685177825080376 ) + log_normal_cdf( scaler_88 , -0.09763945283754742 , 1.0851616255940286 ) + log_normal_cdf( scaler_89 , 0.05161396385508097 , 1.2341595210895904 ) + log_normal_cdf( scaler_90 , -0.4563091052732815 , 1.5252861283423707 ) + log_normal_cdf( scaler_91 , 0.34117075724584073 , 0.8126677950141706 ) + log_normal_cdf( scaler_92 , -0.030031287047288368 , 0.8723204538288271 ) + log_normal_cdf( scaler_93 , -0.06922814955033292 , 1.3555936959472137 ) + log_normal_cdf( scaler_94 , 0.057580958641146325 , 0.8995884680965631 ) + log_normal_cdf( scaler_95 , -0.3396840163328831 , 0.7386564499581003 ) + log_normal_cdf( scaler_96 , -0.2743435472871487 , 1.4268823434920828 ) + log_normal_cdf( scaler_97 , 0.09493138503117131 , 1.4304074685890074 ) + log_normal_cdf( scaler_98 , 0.13082228915967226 , 0.7614903527970993 ) + log_normal_cdf( scaler_99 , -0.09565630227776922 , 0.862982493427549 ) + log_normal_cdf( scaler_100 , -0.017623681147035008 , 0.5965834222952906 ) + log_normal_cdf( scaler_101 , -0.580535324292978 , 0.6956678646846903 ) 
			};
	
			tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0], iTable.at("scaler_66")[0], iTable.at("scaler_67")[0], iTable.at("scaler_68")[0], iTable.at("scaler_69")[0], iTable.at("scaler_70")[0], iTable.at("scaler_71")[0], iTable.at("scaler_72")[0], iTable.at("scaler_73")[0], iTable.at("scaler_74")[0], iTable.at("scaler_75")[0], iTable.at("scaler_76")[0], iTable.at("scaler_77")[0], iTable.at("scaler_78")[0], iTable.at("scaler_79")[0], iTable.at("scaler_80")[0], iTable.at("scaler_81")[0], iTable.at("scaler_82")[0], iTable.at("scaler_83")[0], iTable.at("scaler_84")[0], iTable.at("scaler_85")[0], iTable.at("scaler_86")[0], iTable.at("scaler_87")[0], iTable.at("scaler_88")[0], iTable.at("scaler_89")[0], iTable.at("scaler_90")[0], iTable.at("scaler_91")[0], iTable.at("scaler_92")[0], iTable.at("scaler_93")[0], iTable.at("scaler_94")[0], iTable.at("scaler_95")[0], iTable.at("scaler_96")[0], iTable.at("scaler_97")[0], iTable.at("scaler_98")[0], iTable.at("scaler_99")[0], iTable.at("scaler_100")[0], iTable.at("scaler_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63, Feature_64, Feature_65, Feature_66, Feature_67, Feature_68, Feature_69, Feature_70, Feature_71, Feature_72, Feature_73, Feature_74, Feature_75, Feature_76, Feature_77, Feature_78, Feature_79, Feature_80, Feature_81, Feature_82, Feature_83, Feature_84, Feature_85, Feature_86, Feature_87, Feature_88, Feature_89, Feature_90, Feature_91, Feature_92, Feature_93, Feature_94, Feature_95, Feature_96, Feature_97, Feature_98, Feature_99);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_100.csv");
	return 0;
}
