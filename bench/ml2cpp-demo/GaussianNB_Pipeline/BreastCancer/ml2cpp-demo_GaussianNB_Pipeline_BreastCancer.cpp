// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB_Pipeline
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_Pipeline_BreastCancer.exe ml2cpp-demo_GaussianNB_Pipeline_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 14.077712087912083 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 19.03905494505495 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 91.66178021978023 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 650.9676923076925 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.09642184615384615 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.10441613186813191 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.08826232681318694 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.048516399999999966 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.1815885714285715 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.06294030769230768 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 0.4099173626373627 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 1.2170694505494501 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 2.90524901098901 ) : ( Feature_12)) };
			lTable["imputer_output_15"] = { ((Feature_13 == std::any()) ?  ( 40.87988571428572 ) : ( Feature_13)) };
			lTable["imputer_output_16"] = { ((Feature_14 == std::any()) ?  ( 0.007055971428571433 ) : ( Feature_14)) };
			lTable["imputer_output_17"] = { ((Feature_15 == std::any()) ?  ( 0.025567830769230776 ) : ( Feature_15)) };
			lTable["imputer_output_18"] = { ((Feature_16 == std::any()) ?  ( 0.03199925626373623 ) : ( Feature_16)) };
			lTable["imputer_output_19"] = { ((Feature_17 == std::any()) ?  ( 0.011972369230769237 ) : ( Feature_17)) };
			lTable["imputer_output_20"] = { ((Feature_18 == std::any()) ?  ( 0.020896200000000014 ) : ( Feature_18)) };
			lTable["imputer_output_21"] = { ((Feature_19 == std::any()) ?  ( 0.0038465518681318647 ) : ( Feature_19)) };
			lTable["imputer_output_22"] = { ((Feature_20 == std::any()) ?  ( 16.17776483516484 ) : ( Feature_20)) };
			lTable["imputer_output_23"] = { ((Feature_21 == std::any()) ?  ( 25.26505494505494 ) : ( Feature_21)) };
			lTable["imputer_output_24"] = { ((Feature_22 == std::any()) ?  ( 106.68156043956041 ) : ( Feature_22)) };
			lTable["imputer_output_25"] = { ((Feature_23 == std::any()) ?  ( 870.8639560439567 ) : ( Feature_23)) };
			lTable["imputer_output_26"] = { ((Feature_24 == std::any()) ?  ( 0.1318275604395605 ) : ( Feature_24)) };
			lTable["imputer_output_27"] = { ((Feature_25 == std::any()) ?  ( 0.24991806593406582 ) : ( Feature_25)) };
			lTable["imputer_output_28"] = { ((Feature_26 == std::any()) ?  ( 0.2654615934065932 ) : ( Feature_26)) };
			lTable["imputer_output_29"] = { ((Feature_27 == std::any()) ?  ( 0.11348798021978022 ) : ( Feature_27)) };
			lTable["imputer_output_30"] = { ((Feature_28 == std::any()) ?  ( 0.2897881318681319 ) : ( Feature_28)) };
			lTable["imputer_output_31"] = { ((Feature_29 == std::any()) ?  ( 0.08364145054945049 ) : ( Feature_29)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14, std::any imputer_output_15, std::any imputer_output_16, std::any imputer_output_17, std::any imputer_output_18, std::any imputer_output_19, std::any imputer_output_20, std::any imputer_output_21, std::any imputer_output_22, std::any imputer_output_23, std::any imputer_output_24, std::any imputer_output_25, std::any imputer_output_26, std::any imputer_output_27, std::any imputer_output_28, std::any imputer_output_29, std::any imputer_output_30, std::any imputer_output_31) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 14.077712087912083 ) / 3.5451492987000814 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 19.03905494505495 ) / 4.1622971504218205 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 91.66178021978023 ) / 24.503971943475648 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 650.9676923076925 ) / 355.702823163891 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.09642184615384615 ) / 0.014197819663072304 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.10441613186813191 ) / 0.05340369466973436 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.08826232681318694 ) / 0.08191200162631372 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.048516399999999966 ) / 0.039373117396730245 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.1815885714285715 ) / 0.02779005832874822 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.06294030769230768 ) / 0.007019354586172742 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 0.4099173626373627 ) / 0.29120400836827026 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 1.2170694505494501 ) / 0.5363896396336265 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 2.90524901098901 ) / 2.1424944299808626 ) };
			lTable["scaler_output_15"] = { ( ( imputer_output_15 - 40.87988571428572 ) / 48.224754479577314 ) };
			lTable["scaler_output_16"] = { ( ( imputer_output_16 - 0.007055971428571433 ) / 0.002863651656569403 ) };
			lTable["scaler_output_17"] = { ( ( imputer_output_17 - 0.025567830769230776 ) / 0.017947013631032318 ) };
			lTable["scaler_output_18"] = { ( ( imputer_output_18 - 0.03199925626373623 ) / 0.03166493672136351 ) };
			lTable["scaler_output_19"] = { ( ( imputer_output_19 - 0.011972369230769237 ) / 0.006392005589396607 ) };
			lTable["scaler_output_20"] = { ( ( imputer_output_20 - 0.020896200000000014 ) / 0.008582910079869234 ) };
			lTable["scaler_output_21"] = { ( ( imputer_output_21 - 0.0038465518681318647 ) / 0.0027436075866190575 ) };
			lTable["scaler_output_22"] = { ( ( imputer_output_22 - 16.17776483516484 ) / 4.817458816201383 ) };
			lTable["scaler_output_23"] = { ( ( imputer_output_23 - 25.26505494505494 ) / 5.92332412866667 ) };
			lTable["scaler_output_24"] = { ( ( imputer_output_24 - 106.68156043956041 ) / 33.70385837605481 ) };
			lTable["scaler_output_25"] = { ( ( imputer_output_25 - 870.8639560439567 ) / 566.9950559872813 ) };
			lTable["scaler_output_26"] = { ( ( imputer_output_26 - 0.1318275604395605 ) / 0.02274820752228878 ) };
			lTable["scaler_output_27"] = { ( ( imputer_output_27 - 0.24991806593406582 ) / 0.15246893644279044 ) };
			lTable["scaler_output_28"] = { ( ( imputer_output_28 - 0.2654615934065932 ) / 0.20692568678204093 ) };
			lTable["scaler_output_29"] = { ( ( imputer_output_29 - 0.11348798021978022 ) / 0.06638141278520703 ) };
			lTable["scaler_output_30"] = { ( ( imputer_output_30 - 0.2897881318681319 ) / 0.06220470665051894 ) };
			lTable["scaler_output_31"] = { ( ( imputer_output_31 - 0.08364145054945049 ) / 0.01706514580694785 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0], iTable.at("imputer_output_15")[0], iTable.at("imputer_output_16")[0], iTable.at("imputer_output_17")[0], iTable.at("imputer_output_18")[0], iTable.at("imputer_output_19")[0], iTable.at("imputer_output_20")[0], iTable.at("imputer_output_21")[0], iTable.at("imputer_output_22")[0], iTable.at("imputer_output_23")[0], iTable.at("imputer_output_24")[0], iTable.at("imputer_output_25")[0], iTable.at("imputer_output_26")[0], iTable.at("imputer_output_27")[0], iTable.at("imputer_output_28")[0], iTable.at("imputer_output_29")[0], iTable.at("imputer_output_30")[0], iTable.at("imputer_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14, std::any scaler_output_15, std::any scaler_output_16, std::any scaler_output_17, std::any scaler_output_18, std::any scaler_output_19, std::any scaler_output_20, std::any scaler_output_21, std::any scaler_output_22, std::any scaler_output_23, std::any scaler_output_24, std::any scaler_output_25, std::any scaler_output_26, std::any scaler_output_27, std::any scaler_output_28, std::any scaler_output_29, std::any scaler_output_30, std::any scaler_output_31) {
			auto lClasses = get_classes();
	
			tTable lLogLikelihoodTable = tTable();
	
			lLogLikelihoodTable["Score"] = {
				-1.0451236037171234 + log_normal_cdf( scaler_output_2 , 1.0049577921568156 , 0.8216025263534548 ) + log_normal_cdf( scaler_output_3 , 0.5272347157440817 , 0.7885089841711349 ) + log_normal_cdf( scaler_output_4 , 1.0224656573233908 , 0.8023789120346488 ) + log_normal_cdf( scaler_output_5 , 0.9755487167792978 , 1.1155002084103536 ) + log_normal_cdf( scaler_output_6 , 0.5109783768435309 , 0.8400613977236742 ) + log_normal_cdf( scaler_output_7 , 0.8454996589862851 , 1.0478172891533695 ) + log_normal_cdf( scaler_output_8 , 0.9501566820680749 , 0.9024111052966277 ) + log_normal_cdf( scaler_output_9 , 1.079373194450925 , 0.7576010961261351 ) + log_normal_cdf( scaler_output_10 , 0.4804840066713879 , 1.0169259634142678 ) + log_normal_cdf( scaler_output_11 , 0.008254648911233958 , 1.2299942208769348 ) + log_normal_cdf( scaler_output_12 , 0.7963129136236985 , 1.5718172412846338 ) + log_normal_cdf( scaler_output_13 , 0.025859092767011576 , 0.9308652815835974 ) + log_normal_cdf( scaler_output_14 , 0.7829342356917925 , 1.6459269587736156 ) + log_normal_cdf( scaler_output_15 , 0.7527459637163599 , 1.9049190264874656 ) + log_normal_cdf( scaler_output_16 , -0.07879019714350678 , 0.7777840883052269 ) + log_normal_cdf( scaler_output_17 , 0.41895691591652995 , 0.9615262762876591 ) + log_normal_cdf( scaler_output_18 , 0.32372735579628725 , 0.43460465185656355 ) + log_normal_cdf( scaler_output_19 , 0.5778838844193583 , 0.7594557305760921 ) + log_normal_cdf( scaler_output_20 , 0.05466531696521439 , 1.5719898059720017 ) + log_normal_cdf( scaler_output_21 , 0.10668595002277066 , 0.5157893865531157 ) + log_normal_cdf( scaler_output_22 , 1.0714383582224667 , 0.7586424759069336 ) + log_normal_cdf( scaler_output_23 , 0.5811783181481854 , 0.7891004164445184 ) + log_normal_cdf( scaler_output_24 , 1.0800043767778378 , 0.7438229585143238 ) + log_normal_cdf( scaler_output_25 , 1.0129008849222247 , 1.107410547683219 ) + log_normal_cdf( scaler_output_26 , 0.5815788803349367 , 0.968914993795163 ) + log_normal_cdf( scaler_output_27 , 0.8321432517733914 , 1.1620718056611916 ) + log_normal_cdf( scaler_output_28 , 0.8907311579327978 , 0.7659187563985722 ) + log_normal_cdf( scaler_output_29 , 1.097339665184901 , 0.4692269962353365 ) + log_normal_cdf( scaler_output_30 , 0.5790457036351542 , 1.5135866494918322 ) + log_normal_cdf( scaler_output_31 , 0.44698120583557815 , 1.3938138488468852 ),
				-0.43332206261113054 + log_normal_cdf( scaler_output_2 , -0.5450618533731864 , 0.2519013725932329 ) + log_normal_cdf( scaler_output_3 , -0.2859578119289954 , 0.8821682372879674 ) + log_normal_cdf( scaler_output_4 , -0.5545576446499755 , 0.2326339925383573 ) + log_normal_cdf( scaler_output_5 , -0.5291111684226707 , 0.14122347077170522 ) + log_normal_cdf( scaler_output_6 , -0.2771408145592028 , 0.86832636742393 ) + log_normal_cdf( scaler_output_7 , -0.45857608622985074 , 0.37604724925714067 ) + log_normal_cdf( scaler_output_8 , -0.5153392173928566 , 0.2977020616303447 ) + log_normal_cdf( scaler_output_9 , -0.5854227495327037 , 0.15686117453617088 ) + log_normal_cdf( scaler_output_10 , -0.26060149514380665 , 0.7976918281932132 ) + log_normal_cdf( scaler_output_11 , -0.004477097714565806 , 0.8752003719964173 ) + log_normal_cdf( scaler_output_12 , -0.4318985294230235 , 0.15939912070541715 ) + log_normal_cdf( scaler_output_13 , -0.014025270653293244 , 1.036937408979804 ) + log_normal_cdf( scaler_output_14 , -0.4246422973243612 , 0.13687866259188483 ) + log_normal_cdf( scaler_output_15 , -0.40826899726989013 , 0.03519004781536206 ) + log_normal_cdf( scaler_output_16 , 0.04273366624732332 , 1.1153307256321723 ) + log_normal_cdf( scaler_output_17 , -0.22723086964964412 , 0.8740332934575474 ) + log_normal_cdf( scaler_output_18 , -0.17558093873696776 , 1.2189860865468665 ) + log_normal_cdf( scaler_output_19 , -0.31342854748168736 , 0.8511019291603588 ) + log_normal_cdf( scaler_output_20 , -0.029648985472661257 , 0.6872684088429996 ) + log_normal_cdf( scaler_output_21 , -0.057863566114043155 , 1.2531012853346675 ) + log_normal_cdf( scaler_output_22 , -0.5811191095443907 , 0.17057305318205368 ) + log_normal_cdf( scaler_output_23 , -0.3152153589956243 , 0.8318291616098307 ) + log_normal_cdf( scaler_output_24 , -0.5857650857100123 , 0.16319388970287865 ) + log_normal_cdf( scaler_output_25 , -0.5493699714832421 , 0.08347873747483647 ) + log_normal_cdf( scaler_output_26 , -0.315432613063021 , 0.7339129866145799 ) + log_normal_cdf( scaler_output_27 , -0.45133193316522807 , 0.3328233129314058 ) + log_normal_cdf( scaler_output_28 , -0.4831084246415161 , 0.4632458436582229 ) + log_normal_cdf( scaler_output_29 , -0.5951672760324885 , 0.28055213906972365 ) + log_normal_cdf( scaler_output_30 , -0.31405868671737264 , 0.44095733869591497 ) + log_normal_cdf( scaler_output_31 , -0.2424304845209864 , 0.6192716394978423 ) 
			};
	
			tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0], iTable.at("scaler_output_15")[0], iTable.at("scaler_output_16")[0], iTable.at("scaler_output_17")[0], iTable.at("scaler_output_18")[0], iTable.at("scaler_output_19")[0], iTable.at("scaler_output_20")[0], iTable.at("scaler_output_21")[0], iTable.at("scaler_output_22")[0], iTable.at("scaler_output_23")[0], iTable.at("scaler_output_24")[0], iTable.at("scaler_output_25")[0], iTable.at("scaler_output_26")[0], iTable.at("scaler_output_27")[0], iTable.at("scaler_output_28")[0], iTable.at("scaler_output_29")[0], iTable.at("scaler_output_30")[0], iTable.at("scaler_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
