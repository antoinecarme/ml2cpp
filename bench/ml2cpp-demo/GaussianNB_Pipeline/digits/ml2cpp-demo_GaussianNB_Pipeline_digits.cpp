// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GaussianNB_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GaussianNB_Pipeline_digits.exe ml2cpp-demo_GaussianNB_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			tTable lLogLikelihoodTable = tTable();
	
			lLogLikelihoodTable["Score"] = {
				-2.3430592009218203 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.300195018947715 , 0.07272336699701065 ) + log_normal_cdf( scaler_4 , -0.2081202069460461 , 0.37716910652056534 ) + log_normal_cdf( scaler_5 , 0.32744009662426277 , 0.2691025342975631 ) + log_normal_cdf( scaler_6 , -0.14845507052769677 , 0.6646772652984224 ) + log_normal_cdf( scaler_7 , -0.5304333315866591 , 0.3018741356294219 ) + log_normal_cdf( scaler_8 , -0.40339702377315767 , 0.0030797248906073364 ) + log_normal_cdf( scaler_9 , -0.12507121414759426 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_10 , -0.061034923875429796 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , -0.32354338256935844 , 0.3466012891483107 ) + log_normal_cdf( scaler_12 , 0.4071710524815234 , 0.3615590963663105 ) + log_normal_cdf( scaler_13 , 0.27473881790252824 , 0.67926541942776 ) + log_normal_cdf( scaler_14 , 0.24943095575890664 , 0.6882844942476736 ) + log_normal_cdf( scaler_15 , 0.5411011533977483 , 0.31597755339855893 ) + log_normal_cdf( scaler_16 , -0.2533443358380223 , 0.30471463548441835 ) + log_normal_cdf( scaler_17 , -0.13350472270266542 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , 0.33628592385794304 , 0.5755664334556302 ) + log_normal_cdf( scaler_20 , 0.7802000146726482 , 0.19803044758835422 ) + log_normal_cdf( scaler_21 , -0.32289101069329007 , 0.7361098371694654 ) + log_normal_cdf( scaler_22 , -0.796259836684663 , 0.2834011501457341 ) + log_normal_cdf( scaler_23 , 0.7164115250727424 , 0.27902623982462205 ) + log_normal_cdf( scaler_24 , 0.50019876217195 , 0.6143350218611796 ) + log_normal_cdf( scaler_25 , -0.12274266163825458 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , 0.8894977417889877 , 0.6324574804487377 ) + log_normal_cdf( scaler_28 , 0.6138934348131069 , 0.23697617923783654 ) + log_normal_cdf( scaler_29 , -1.1827742971318849 , 0.34543721060355254 ) + log_normal_cdf( scaler_30 , -1.6133814447348946 , 0.00830850151761349 ) + log_normal_cdf( scaler_31 , 0.28439974080288016 , 0.3683047609749545 ) + log_normal_cdf( scaler_32 , 1.0813538508340155 , 0.3982245017032813 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , 0.9863777077744705 , 0.39159570742588035 ) + log_normal_cdf( scaler_36 , 0.6368546744893357 , 0.2377272805187294 ) + log_normal_cdf( scaler_37 , -1.312416898629055 , 0.12045889143149867 ) + log_normal_cdf( scaler_38 , -1.7254933380159931 , 0.004041696764527419 ) + log_normal_cdf( scaler_39 , 0.04288773623162557 , 0.4030295188298945 ) + log_normal_cdf( scaler_40 , 1.1588888971282278 , 0.5806644594406943 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758756 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , 0.6119064708826351 , 0.5737259339968275 ) + log_normal_cdf( scaler_44 , 1.0040648987553213 , 0.1279572133909095 ) + log_normal_cdf( scaler_45 , -0.8916856684844544 , 0.1854736373664377 ) + log_normal_cdf( scaler_46 , -0.97654759683825 , 0.22652338074929448 ) + log_normal_cdf( scaler_47 , 0.5874948423532584 , 0.3693758227806629 ) + log_normal_cdf( scaler_48 , 0.49134879787601127 , 0.6836708379140319 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , 0.07084944432198488 , 0.5295696008085417 ) + log_normal_cdf( scaler_52 , 0.9909270085351296 , 0.22280677728907514 ) + log_normal_cdf( scaler_53 , 0.059456450035873035 , 0.5118046356844002 ) + log_normal_cdf( scaler_54 , 0.1894345732310452 , 0.5628972150079278 ) + log_normal_cdf( scaler_55 , 0.743206811631179 , 0.26369948545130195 ) + log_normal_cdf( scaler_56 , -0.3014551289467195 , 0.36485812191909 ) + log_normal_cdf( scaler_57 , -0.21370440296160076 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.28709266490463015 , 0.009012395605696931 ) + log_normal_cdf( scaler_60 , -0.2667297909146508 , 0.28762246612786213 ) + log_normal_cdf( scaler_61 , 0.3366522659384972 , 0.1966669383107042 ) + log_normal_cdf( scaler_62 , 0.2676547842857476 , 0.31197766894212203 ) + log_normal_cdf( scaler_63 , -0.27506272896738587 , 0.43927151835329364 ) + log_normal_cdf( scaler_64 , -0.4581431916870837 , 0.035596094393044835 ) + log_normal_cdf( scaler_65 , -0.20166597311542825 , 1.0000000000000565e-09 ),
				-2.2798802993002885 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.3175474288281758 , 0.017083096857120575 ) + log_normal_cdf( scaler_4 , -0.5444766413528922 , 0.5473933896639224 ) + log_normal_cdf( scaler_5 , -0.5698670696996417 , 1.7861973115169416 ) + log_normal_cdf( scaler_6 , -0.33818791724801617 , 1.2285653650722101 ) + log_normal_cdf( scaler_7 , 0.028804762676533764 , 0.9800663887492806 ) + log_normal_cdf( scaler_8 , -0.08687530862065462 , 0.45086058415203445 ) + log_normal_cdf( scaler_9 , -0.12507121414759437 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_10 , -0.06103492387542985 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , -0.5923980487765943 , 0.01393267939938265 ) + log_normal_cdf( scaler_12 , -1.1271695602902794 , 0.7129392896856468 ) + log_normal_cdf( scaler_13 , 0.2505058654336984 , 1.4473181196456946 ) + log_normal_cdf( scaler_14 , 0.7546858736486444 , 0.9522338214595137 ) + log_normal_cdf( scaler_15 , 0.025947284941479878 , 1.081394088468911 ) + log_normal_cdf( scaler_16 , -0.16678965744164695 , 0.5320977034846526 ) + log_normal_cdf( scaler_17 , -0.13350472270266533 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , -0.4401667765429909 , 0.48966885274972066 ) + log_normal_cdf( scaler_20 , -0.4825326558314504 , 0.9954216574159234 ) + log_normal_cdf( scaler_21 , 1.3565504224950584 , 0.1027095533367997 ) + log_normal_cdf( scaler_22 , 1.1316903713683069 , 0.38138733667721203 ) + log_normal_cdf( scaler_23 , -0.097818440536647 , 0.9169672572832209 ) + log_normal_cdf( scaler_24 , -0.34868879395653424 , 0.3023251668340808 ) + log_normal_cdf( scaler_25 , -0.12274266163825466 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.11995811173557906 , 1.1046992348610494 ) + log_normal_cdf( scaler_28 , 0.022918981423781782 , 0.8237581140545773 ) + log_normal_cdf( scaler_29 , 0.9346353652396499 , 0.3685521781388929 ) + log_normal_cdf( scaler_30 , 0.6264144536237708 , 0.33691830304279796 ) + log_normal_cdf( scaler_31 , -0.2930883009212334 , 0.9887774086811302 ) + log_normal_cdf( scaler_32 , -0.5282275557390936 , 0.11074536056021285 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.3493677188620813 , 0.3729735141712 ) + log_normal_cdf( scaler_36 , -0.12828377548324196 , 0.8898906740973613 ) + log_normal_cdf( scaler_37 , 0.49242454017795756 , 0.7434240605296298 ) + log_normal_cdf( scaler_38 , 0.5923130831877964 , 0.33241818752594343 ) + log_normal_cdf( scaler_39 , -0.5982461610229398 , 0.9292572062665708 ) + log_normal_cdf( scaler_40 , -0.7180063214080992 , 0.13675636599976582 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.0651902856675875 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.40074009213786776 , 0.1303519838609794 ) + log_normal_cdf( scaler_44 , -0.2383619452382957 , 0.8692169972707123 ) + log_normal_cdf( scaler_45 , 0.5176733396336285 , 0.9453065206469197 ) + log_normal_cdf( scaler_46 , 0.9313583780527596 , 0.30955614772353085 ) + log_normal_cdf( scaler_47 , -0.4647553057556327 , 1.0362752240835387 ) + log_normal_cdf( scaler_48 , -0.7225303771949264 , 0.06440698040989475 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , -0.34779098494071137 , 0.08024382614654696 ) + log_normal_cdf( scaler_52 , -0.4524480358092065 , 0.7575705536437003 ) + log_normal_cdf( scaler_53 , 0.34873622994321213 , 1.2186709022931097 ) + log_normal_cdf( scaler_54 , 0.7971896019028036 , 0.36484540077328975 ) + log_normal_cdf( scaler_55 , -0.1858847280005684 , 1.1758651871839394 ) + log_normal_cdf( scaler_56 , -0.33471101712517315 , 0.5885100565740242 ) + log_normal_cdf( scaler_57 , 0.42296441892283415 , 3.7842960210614085 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.2875892400639271 , 0.008464397343085706 ) + log_normal_cdf( scaler_60 , -0.6146251073289576 , 0.390055332609533 ) + log_normal_cdf( scaler_61 , -0.6261697193699052 , 1.704916974093423 ) + log_normal_cdf( scaler_62 , 0.2613936413252027 , 0.4192610531691287 ) + log_normal_cdf( scaler_63 , 0.2996001885846213 , 1.089768235580424 ) + log_normal_cdf( scaler_64 , 0.2689491223129379 , 1.8087110732462406 ) + log_normal_cdf( scaler_65 , 0.636617838793396 , 4.661095080494009 ),
				-2.27310061231491 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , 0.6581242848273074 , 2.0969809878608836 ) + log_normal_cdf( scaler_4 , 0.9223164500340759 , 1.012481159042214 ) + log_normal_cdf( scaler_5 , 0.5299950902626651 , 0.6155055969109566 ) + log_normal_cdf( scaler_6 , -0.5022802602749215 , 1.4786379493480724 ) + log_normal_cdf( scaler_7 , -0.5819536075504799 , 0.5195577750865236 ) + log_normal_cdf( scaler_8 , -0.3760315499583478 , 0.03251377702709039 ) + log_normal_cdf( scaler_9 , -0.12507121414759437 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_10 , 0.0871191058694901 , 3.2265936308598175 ) + log_normal_cdf( scaler_11 , 0.9899294646756044 , 1.5734490879606657 ) + log_normal_cdf( scaler_12 , 0.6104360729088286 , 0.5308724725529305 ) + log_normal_cdf( scaler_13 , 0.028356886783342014 , 0.6775359296821198 ) + log_normal_cdf( scaler_14 , 0.46478391812158054 , 0.6138537641902312 ) + log_normal_cdf( scaler_15 , -0.39612128949635783 , 0.9171220564018254 ) + log_normal_cdf( scaler_16 , -0.3828916340957561 , 0.24278400745610618 ) + log_normal_cdf( scaler_17 , -0.13350472270266533 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_18 , 0.10229451087164959 , 3.2213434785100317 ) + log_normal_cdf( scaler_19 , 0.5382299783304378 , 1.6777600008791125 ) + log_normal_cdf( scaler_20 , -0.3803605963160489 , 0.7638050834025419 ) + log_normal_cdf( scaler_21 , -0.41003024197358523 , 0.61975911550667 ) + log_normal_cdf( scaler_22 , 0.692021043618423 , 0.5870812570687651 ) + log_normal_cdf( scaler_23 , -0.2670338747774231 , 0.8192150032939325 ) + log_normal_cdf( scaler_24 , -0.3883064055050746 , 0.334150322083671 ) + log_normal_cdf( scaler_25 , -0.12274266163825467 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.5331192550163193 , 0.37936046780248106 ) + log_normal_cdf( scaler_28 , -1.1946297377995168 , 0.20308431764854207 ) + log_normal_cdf( scaler_29 , -0.7123554660819836 , 0.6848875438818202 ) + log_normal_cdf( scaler_30 , 0.3212872269705702 , 0.4470156779156037 ) + log_normal_cdf( scaler_31 , -0.505416136714117 , 0.7880931998948646 ) + log_normal_cdf( scaler_32 , -0.5450563885295309 , 0.10947073387510867 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.6489799791618663 , 0.01017848000241961 ) + log_normal_cdf( scaler_36 , -1.0023232712363908 , 0.15750742329520726 ) + log_normal_cdf( scaler_37 , -0.047767047849323424 , 0.8780826503501544 ) + log_normal_cdf( scaler_38 , 0.04342781572931709 , 0.5615213402052702 ) + log_normal_cdf( scaler_39 , -1.093029638361651 , 0.48234098613218745 ) + log_normal_cdf( scaler_40 , -0.7954194899470155 , 0.01971369376183785 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.0651902856675875 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.30967484434569864 , 0.35238191998370794 ) + log_normal_cdf( scaler_44 , -0.19426092447931753 , 0.7356345264756995 ) + log_normal_cdf( scaler_45 , 0.7137695405435749 , 0.45228983689010127 ) + log_normal_cdf( scaler_46 , -0.0742530023175712 , 0.8270563095673469 ) + log_normal_cdf( scaler_47 , -1.0769174740523728 , 0.35739185865760253 ) + log_normal_cdf( scaler_48 , -0.5590284652190822 , 0.2468901475629269 ) + log_normal_cdf( scaler_49 , -0.03314278290716415 , 0.17881943004948067 ) + log_normal_cdf( scaler_50 , 0.04916685845768326 , 1.159080133727171 ) + log_normal_cdf( scaler_51 , 0.37616131797346225 , 1.9575319364000061 ) + log_normal_cdf( scaler_52 , 0.6668740334127757 , 0.6616973201056259 ) + log_normal_cdf( scaler_53 , 0.9179312409585363 , 0.23726098183789512 ) + log_normal_cdf( scaler_54 , 0.4951839846846654 , 0.5463502856251191 ) + log_normal_cdf( scaler_55 , 0.3340734220627994 , 0.47208972875630084 ) + log_normal_cdf( scaler_56 , 0.7208709569362515 , 0.9525639016959897 ) + log_normal_cdf( scaler_57 , 0.5372314160938171 , 2.5699401291836774 ) + log_normal_cdf( scaler_58 , 0.2298338446643163 , 9.650570781117317 ) + log_normal_cdf( scaler_59 , 0.6576974962835055 , 2.7826274948799568 ) + log_normal_cdf( scaler_60 , 0.8651785760175357 , 1.014951876033578 ) + log_normal_cdf( scaler_61 , 0.3898820257334213 , 0.652567912877624 ) + log_normal_cdf( scaler_62 , 0.24876794313299286 , 0.38954880608894976 ) + log_normal_cdf( scaler_63 , 0.8455704563193739 , 0.49334670253916335 ) + log_normal_cdf( scaler_64 , 1.4094115735802069 , 1.9350133751518839 ) + log_normal_cdf( scaler_65 , 0.7932440457481881 , 3.5271694757062124 ),
				-2.2935791436584503 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , 0.445199150307234 , 1.5541506482139416 ) + log_normal_cdf( scaler_4 , 0.6990289874733472 , 0.6338332947375237 ) + log_normal_cdf( scaler_5 , 0.5545754090220003 , 0.2704740083831741 ) + log_normal_cdf( scaler_6 , 0.5775682523184891 , 0.3075825619102529 ) + log_normal_cdf( scaler_7 , 0.3307364870256108 , 0.7349061214074645 ) + log_normal_cdf( scaler_8 , -0.17657476068496322 , 0.4338020927428928 ) + log_normal_cdf( scaler_9 , -0.11864894026050855 , 0.005939367670826974 ) + log_normal_cdf( scaler_10 , 0.09018436165731576 , 1.635009971667936 ) + log_normal_cdf( scaler_11 , 0.732364917725871 , 1.4425450272550377 ) + log_normal_cdf( scaler_12 , 0.44655288027904755 , 0.39949673541612923 ) + log_normal_cdf( scaler_13 , -0.8039637639252587 , 0.7989338283676665 ) + log_normal_cdf( scaler_14 , 0.16786261263346788 , 0.6749359775270107 ) + log_normal_cdf( scaler_15 , 0.6552249707747064 , 0.564525995087947 ) + log_normal_cdf( scaler_16 , 0.06380944241120039 , 0.981715581109586 ) + log_normal_cdf( scaler_17 , -0.110018133860748 , 0.04388442505415183 ) + log_normal_cdf( scaler_18 , 0.10535727182846968 , 3.287529192687493 ) + log_normal_cdf( scaler_19 , -0.11450040380166934 , 0.9163368960632243 ) + log_normal_cdf( scaler_20 , -1.1177154535286544 , 0.6295296210184346 ) + log_normal_cdf( scaler_21 , -0.6666221800972103 , 0.4263289940994542 ) + log_normal_cdf( scaler_22 , 0.7918146599490683 , 0.43705369975815683 ) + log_normal_cdf( scaler_23 , 0.23102879321288447 , 0.6331526103824844 ) + log_normal_cdf( scaler_24 , -0.29247928814521224 , 0.3389102909579791 ) + log_normal_cdf( scaler_25 , -0.12274266163825465 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.7004212259369053 , 0.15110980581075706 ) + log_normal_cdf( scaler_28 , -1.2266407957793874 , 0.2531396763005292 ) + log_normal_cdf( scaler_29 , 0.01967272078042143 , 0.8347486233855576 ) + log_normal_cdf( scaler_30 , 0.697003281408162 , 0.26033635062784877 ) + log_normal_cdf( scaler_31 , -0.30863101835196055 , 0.5115030938364283 ) + log_normal_cdf( scaler_32 , -0.6003835133728977 , 0.008316063840545217 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.6447839136502723 , 0.019166287002360775 ) + log_normal_cdf( scaler_36 , -1.0504552043861604 , 0.14229298950906508 ) + log_normal_cdf( scaler_37 , -0.5734490272480981 , 0.7098795848943752 ) + log_normal_cdf( scaler_38 , 0.2690053580889185 , 0.4857866134555588 ) + log_normal_cdf( scaler_39 , 0.43532225063106694 , 0.6985754324013903 ) + log_normal_cdf( scaler_40 , -0.19571716020233362 , 0.6117102130685967 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758751 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.36245858926439356 , 0.29759500901847474 ) + log_normal_cdf( scaler_44 , -0.8259535544129766 , 0.2578053209283847 ) + log_normal_cdf( scaler_45 , -0.972750772475376 , 0.1927535345047882 ) + log_normal_cdf( scaler_46 , -0.5392237041474254 , 0.7031314100963273 ) + log_normal_cdf( scaler_47 , 0.638840445250271 , 0.4426952336030492 ) + log_normal_cdf( scaler_48 , 0.7098804527328882 , 1.098021832362268 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , 0.11061795673470348 , 1.4213766836872925 ) + log_normal_cdf( scaler_52 , -0.06008543620308909 , 0.839653540982355 ) + log_normal_cdf( scaler_53 , -0.6457631355980658 , 0.4765531413477198 ) + log_normal_cdf( scaler_54 , -0.27775524443404503 , 0.897491552388627 ) + log_normal_cdf( scaler_55 , 0.6670065655827782 , 0.45661995997240545 ) + log_normal_cdf( scaler_56 , 0.477148121415674 , 0.9064401493154448 ) + log_normal_cdf( scaler_57 , -0.1330230953607288 , 0.2556776505057732 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , 0.29145392534298836 , 1.470216731446513 ) + log_normal_cdf( scaler_60 , 0.7802059229684367 , 0.735448628523394 ) + log_normal_cdf( scaler_61 , 0.6119525872998586 , 0.19882379231974537 ) + log_normal_cdf( scaler_62 , 0.4536131291192796 , 0.3704843652378913 ) + log_normal_cdf( scaler_63 , 0.3441703004595775 , 0.6255325126808899 ) + log_normal_cdf( scaler_64 , -0.14469328044362617 , 0.45979654222646277 ) + log_normal_cdf( scaler_65 , -0.1584534469843013 , 0.13727413350908554 ),
				-2.2530330492641006 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.33289763756858326 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_4 , -0.9913794833096293 , 0.0908800142759494 ) + log_normal_cdf( scaler_5 , -1.0951108003767003 , 1.3181331075560965 ) + log_normal_cdf( scaler_6 , -0.1049046764576502 , 0.8716845543734835 ) + log_normal_cdf( scaler_7 , -0.6878627069557817 , 0.2902787097862548 ) + log_normal_cdf( scaler_8 , -0.3394209289842799 , 0.17080627149137134 ) + log_normal_cdf( scaler_9 , 0.01677172236519239 , 1.478796287398665 ) + log_normal_cdf( scaler_10 , -0.06103492387542987 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , -0.5994466487351163 , 0.023757309944982808 ) + log_normal_cdf( scaler_12 , -1.2857691022684925 , 0.5111728795181361 ) + log_normal_cdf( scaler_13 , 0.29260635556529563 , 0.7019886233299742 ) + log_normal_cdf( scaler_14 , -0.3777018908004461 , 1.254885413194895 ) + log_normal_cdf( scaler_15 , -0.9999692611153328 , 0.3733358476516476 ) + log_normal_cdf( scaler_16 , -0.15976406638847304 , 0.7706767869549822 ) + log_normal_cdf( scaler_17 , 0.27245552151855745 , 3.163485397783132 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , -0.5206002316812933 , 0.250850786241911 ) + log_normal_cdf( scaler_20 , 0.06742742652859711 , 0.764900022634999 ) + log_normal_cdf( scaler_21 , 0.7600467145506791 , 0.46420662969254695 ) + log_normal_cdf( scaler_22 , -0.32023395825424683 , 0.7616829130001597 ) + log_normal_cdf( scaler_23 , -0.3046694825566983 , 0.7115502413672006 ) + log_normal_cdf( scaler_24 , 0.6368165758718334 , 2.760617223507898 ) + log_normal_cdf( scaler_25 , 0.6653645327568328 , 6.436916732620606 ) + log_normal_cdf( scaler_26 , 0.22474332475644723 , 9.460115980861746 ) + log_normal_cdf( scaler_27 , 0.6614010530138448 , 0.9542770297840716 ) + log_normal_cdf( scaler_28 , 0.8607834245180713 , 0.14963107423259428 ) + log_normal_cdf( scaler_29 , -0.376669205302268 , 0.6472369838595653 ) + log_normal_cdf( scaler_30 , -0.38514286967069516 , 0.9772346572920672 ) + log_normal_cdf( scaler_31 , 0.5033651268019409 , 0.7067001598448461 ) + log_normal_cdf( scaler_32 , 1.0175516176990818 , 1.8820517143413238 ) + log_normal_cdf( scaler_33 , 0.4499569059443893 , 9.290322412820734 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , 1.7906739771197544 , 1.0596536691221075 ) + log_normal_cdf( scaler_36 , 1.1004266985578761 , 0.1429135896250443 ) + log_normal_cdf( scaler_37 , 0.15106603141895747 , 0.6948975600960878 ) + log_normal_cdf( scaler_38 , 0.5071560920366923 , 0.4533672537309215 ) + log_normal_cdf( scaler_39 , 0.8723212292358734 , 0.33047021630107953 ) + log_normal_cdf( scaler_40 , 0.7010932553285281 , 1.044586546719482 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , 0.5551967375398508 , 9.172119441094088 ) + log_normal_cdf( scaler_43 , 1.5840068116257515 , 3.0896410417575377 ) + log_normal_cdf( scaler_44 , 0.6411055411821106 , 0.7522310801142805 ) + log_normal_cdf( scaler_45 , 0.7651141568057754 , 0.5162493945610155 ) + log_normal_cdf( scaler_46 , 1.0762866242174347 , 0.18591567344902157 ) + log_normal_cdf( scaler_47 , 0.38546877657096684 , 0.7587265954968926 ) + log_normal_cdf( scaler_48 , -0.41673665371782515 , 0.2318166071222126 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , 0.2504791558771784 , 8.303558793478071 ) + log_normal_cdf( scaler_51 , 0.20669964984431638 , 2.224660368685262 ) + log_normal_cdf( scaler_52 , -0.8465506770152725 , 0.6022237025270992 ) + log_normal_cdf( scaler_53 , -0.35572089958304104 , 1.1055074747754017 ) + log_normal_cdf( scaler_54 , 0.7203765806797465 , 0.45266964523491576 ) + log_normal_cdf( scaler_55 , -0.752760047836442 , 0.6302176273291836 ) + log_normal_cdf( scaler_56 , -0.7509068345624725 , 0.0007934995347178293 ) + log_normal_cdf( scaler_57 , -0.2137044029616007 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.26555358034608256 , 0.08208702434707286 ) + log_normal_cdf( scaler_60 , -0.9694256790222864 , 0.12464503415930607 ) + log_normal_cdf( scaler_61 , -0.970162656097294 , 1.4810985200584996 ) + log_normal_cdf( scaler_62 , 0.012781576250203883 , 0.7521720385055506 ) + log_normal_cdf( scaler_63 , -0.7907837647755953 , 0.2804015461213861 ) + log_normal_cdf( scaler_64 , -0.5055365567864584 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_65 , -0.20166597311542825 , 1.0000000000000565e-09 ),
				-2.300499586503024 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , 0.5994676454034481 , 3.2411860611688437 ) + log_normal_cdf( scaler_4 , 0.9603351932136328 , 0.7090609490893452 ) + log_normal_cdf( scaler_5 , 0.27164668983811535 , 0.43577207531429457 ) + log_normal_cdf( scaler_6 , 0.5102516172224885 , 0.34566200972665423 ) + log_normal_cdf( scaler_7 , 1.1432394274775128 , 0.49183769570419433 ) + log_normal_cdf( scaler_8 , 0.7985027289285191 , 1.719207235712225 ) + log_normal_cdf( scaler_9 , -0.09273684909108632 , 0.05315378855780617 ) + log_normal_cdf( scaler_10 , 0.015099785854598516 , 0.828898646671619 ) + log_normal_cdf( scaler_11 , 0.531903282635479 , 1.2635478634214317 ) + log_normal_cdf( scaler_12 , 0.8070990998402444 , 0.17197530439519257 ) + log_normal_cdf( scaler_13 , -0.006033352547138274 , 0.8348017403298778 ) + log_normal_cdf( scaler_14 , -0.4561338975059399 , 0.5793787683052735 ) + log_normal_cdf( scaler_15 , -0.3561088870554733 , 0.445924780452152 ) + log_normal_cdf( scaler_16 , 0.03539666162488561 , 0.7159812168814619 ) + log_normal_cdf( scaler_17 , -0.10197180249823928 , 0.07059708001992909 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , 0.8265075162295348 , 1.4206889645195335 ) + log_normal_cdf( scaler_20 , 0.7812110261245222 , 0.1491457690971926 ) + log_normal_cdf( scaler_21 , -0.3018089837694105 , 0.6344851330099556 ) + log_normal_cdf( scaler_22 , -0.8766390775889024 , 0.22999609164730211 ) + log_normal_cdf( scaler_23 , -1.1960514435303584 , 0.04907836844693449 ) + log_normal_cdf( scaler_24 , -0.5390585866093445 , 0.015314019373277834 ) + log_normal_cdf( scaler_25 , -0.12274266163825463 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , 0.9956250069611001 , 1.41480446286856 ) + log_normal_cdf( scaler_28 , 0.8523206280957071 , 0.19320950096708736 ) + log_normal_cdf( scaler_29 , 0.5412609993314234 , 0.47789222214950916 ) + log_normal_cdf( scaler_30 , -0.15212627525582267 , 0.8515208831920631 ) + log_normal_cdf( scaler_31 , -0.5851106948926579 , 0.7276838250342887 ) + log_normal_cdf( scaler_32 , -0.5225669483459465 , 0.09539814242294083 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.07259272752785607 , 0.597427502085312 ) + log_normal_cdf( scaler_36 , 0.04198747355873566 , 0.71717331795851 ) + log_normal_cdf( scaler_37 , -0.1055849721971978 , 0.8968486891293989 ) + log_normal_cdf( scaler_38 , -0.23453625061097394 , 0.9082366981117649 ) + log_normal_cdf( scaler_39 , -0.15060629401717576 , 1.0878996833154284 ) + log_normal_cdf( scaler_40 , -0.29394918369806183 , 0.6939930881987334 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758751 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.4350566324423839 , 0.11305665344073679 ) + log_normal_cdf( scaler_44 , -0.863683787061094 , 0.19011815841219012 ) + log_normal_cdf( scaler_45 , -0.5790972724324641 , 0.6411725546249536 ) + log_normal_cdf( scaler_46 , -0.08090407412947415 , 0.8805287182705184 ) + log_normal_cdf( scaler_47 , 0.0006267743177450337 , 1.0410370425132078 ) + log_normal_cdf( scaler_48 , -0.22508191875432226 , 0.7871513618831109 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , 0.04721651686360692 , 0.9734920996209014 ) + log_normal_cdf( scaler_52 , -0.3303479912647161 , 0.6365925540623912 ) + log_normal_cdf( scaler_53 , -0.2804692022064457 , 0.9361498322909094 ) + log_normal_cdf( scaler_54 , 0.23542968706806405 , 0.78786485484618 ) + log_normal_cdf( scaler_55 , -0.23088398719588998 , 0.925559939620978 ) + log_normal_cdf( scaler_56 , -0.46894360347563535 , 0.3602325616027763 ) + log_normal_cdf( scaler_57 , -0.21370440296160073 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , 0.6142119398506296 , 2.8704302090654537 ) + log_normal_cdf( scaler_60 , 0.9466386765814803 , 0.6764276776705386 ) + log_normal_cdf( scaler_61 , 0.6068007835024898 , 0.17370632087688806 ) + log_normal_cdf( scaler_62 , -0.5305829696377952 , 1.1515558156782804 ) + log_normal_cdf( scaler_63 , -0.7180467509944379 , 0.44864010638197593 ) + log_normal_cdf( scaler_64 , -0.46516443096106497 , 0.028523400514075422 ) + log_normal_cdf( scaler_65 , -0.20166597311542825 , 1.0000000000000565e-09 ),
				-2.314485828477764 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.33289763756858315 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_4 , -0.8392076233795799 , 0.13683789940252694 ) + log_normal_cdf( scaler_5 , -0.12358200045829548 , 0.5359113243626997 ) + log_normal_cdf( scaler_6 , -0.48731449931021686 , 1.5017352045113939 ) + log_normal_cdf( scaler_7 , -0.7707372621035323 , 0.20222411526833414 ) + log_normal_cdf( scaler_8 , -0.40997430563569853 , 0.001224700814630066 ) + log_normal_cdf( scaler_9 , -0.1250712141475943 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_10 , -0.061034923875429824 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , -0.6135116888031124 , 0.0027129641922417867 ) + log_normal_cdf( scaler_12 , -0.585810817273825 , 0.5214616949961215 ) + log_normal_cdf( scaler_13 , 0.6490424678262485 , 0.25092643501850614 ) + log_normal_cdf( scaler_14 , -0.8263680930314103 , 0.9358796804080691 ) + log_normal_cdf( scaler_15 , -1.2039474283018674 , 0.12327465017329908 ) + log_normal_cdf( scaler_16 , -0.502979032134018 , 0.02153768683901974 ) + log_normal_cdf( scaler_17 , -0.13350472270266536 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , -0.5159838897411589 , 0.1074302423779299 ) + log_normal_cdf( scaler_20 , 0.4867443852465117 , 0.429132678504781 ) + log_normal_cdf( scaler_21 , 0.43115057658030237 , 0.735317267059279 ) + log_normal_cdf( scaler_22 , -1.015494386997617 , 0.09928861324275909 ) + log_normal_cdf( scaler_23 , -1.2347691443329136 , 0.016689677874696458 ) + log_normal_cdf( scaler_24 , -0.5473082199331459 , 0.0006211281681768672 ) + log_normal_cdf( scaler_25 , -0.12274266163825462 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.08091025640144694 , 0.5725428631212188 ) + log_normal_cdf( scaler_28 , 0.7456060510066422 , 0.22757195051570836 ) + log_normal_cdf( scaler_29 , -0.10237193146587506 , 0.8970064716365175 ) + log_normal_cdf( scaler_30 , -0.9984008494150948 , 0.6427475882637611 ) + log_normal_cdf( scaler_31 , -0.9570273203552645 , 0.3403790264108937 ) + log_normal_cdf( scaler_32 , -0.5830413697522833 , 0.03190325023927529 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , 0.3117963495535084 , 0.6698470632277319 ) + log_normal_cdf( scaler_36 , 1.1395915605056886 , 0.11150756850950386 ) + log_normal_cdf( scaler_37 , 0.6033644477630986 , 0.3744251072333605 ) + log_normal_cdf( scaler_38 , 0.2875514771972536 , 0.5199039988972612 ) + log_normal_cdf( scaler_39 , 0.24681931817266714 , 0.7279889315155454 ) + log_normal_cdf( scaler_40 , -0.004622963721042832 , 0.8536021092459528 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758753 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , 0.10342901028853324 , 0.3658587673999346 ) + log_normal_cdf( scaler_44 , 1.1938292104668329 , 0.09994677642855933 ) + log_normal_cdf( scaler_45 , 0.550324855335064 , 0.5478995650817391 ) + log_normal_cdf( scaler_46 , -0.3210563693945128 , 0.729182573348589 ) + log_normal_cdf( scaler_47 , 0.3365972155090997 , 0.6491865518372961 ) + log_normal_cdf( scaler_48 , 1.3617919787172184 , 0.9386980139347132 ) + log_normal_cdf( scaler_49 , 0.709039622064142 , 8.359456331207813 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , -0.2779858792890031 , 0.10927177773398936 ) + log_normal_cdf( scaler_52 , 0.5038859416052683 , 0.31455626893796174 ) + log_normal_cdf( scaler_53 , 0.6001844016816796 , 0.3426887743189294 ) + log_normal_cdf( scaler_54 , -0.7574946915273648 , 0.5946919930556779 ) + log_normal_cdf( scaler_55 , 0.42349275513292084 , 0.458420430838547 ) + log_normal_cdf( scaler_56 , 1.4456827783047768 , 0.7635043489639275 ) + log_normal_cdf( scaler_57 , 0.32180357178362545 , 2.1093814828435518 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.2952033925064774 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_60 , -0.7942013792475439 , 0.1056610635557701 ) + log_normal_cdf( scaler_61 , -0.2937004523717826 , 0.46427964344493944 ) + log_normal_cdf( scaler_62 , 0.6685541023306535 , 0.07886905150067855 ) + log_normal_cdf( scaler_63 , 1.0687313613128808 , 0.2579039453164168 ) + log_normal_cdf( scaler_64 , 0.5981577562711454 , 0.8979392831640962 ) + log_normal_cdf( scaler_65 , -0.1501862618207171 , 0.08567050118732865 ),
				-2.3286704634697206 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.1233672882620225 , 0.8471454229041705 ) + log_normal_cdf( scaler_4 , -0.05395710257419697 , 0.6343125614644615 ) + log_normal_cdf( scaler_5 , 0.24096844925541144 , 0.5718760392513872 ) + log_normal_cdf( scaler_6 , 0.5204985670675738 , 0.49826410428538104 ) + log_normal_cdf( scaler_7 , 0.9543217462053623 , 0.8983118335937238 ) + log_normal_cdf( scaler_8 , 1.2043725469402229 , 3.10994430583705 ) + log_normal_cdf( scaler_9 , 0.8394167035379527 , 6.385119833637396 ) + log_normal_cdf( scaler_10 , -0.06103492387542981 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , -0.29183482617909906 , 0.5653403373153383 ) + log_normal_cdf( scaler_12 , 0.04374777416951101 , 0.5348181441737827 ) + log_normal_cdf( scaler_13 , -0.046029344380445134 , 0.7505009841986999 ) + log_normal_cdf( scaler_14 , 0.18040777422054144 , 0.558674980783962 ) + log_normal_cdf( scaler_15 , 0.7277043171639515 , 0.4949055236161232 ) + log_normal_cdf( scaler_16 , 1.0257003410042034 , 2.454690464164653 ) + log_normal_cdf( scaler_17 , 0.5962571448854868 , 5.119077602285724 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , -0.5110617387002556 , 0.23378722094328255 ) + log_normal_cdf( scaler_20 , -0.8420765625945513 , 1.0011033358509365 ) + log_normal_cdf( scaler_21 , -0.7939799650066601 , 0.3500039594909156 ) + log_normal_cdf( scaler_22 , -0.054008243164576614 , 0.8745815410126927 ) + log_normal_cdf( scaler_23 , 0.5554362621068468 , 0.5504804166470543 ) + log_normal_cdf( scaler_24 , 0.48946205351811317 , 1.7415979098776706 ) + log_normal_cdf( scaler_25 , 0.18083944640679192 , 2.1012957972116943 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.5639294962654094 , 0.26314781143025245 ) + log_normal_cdf( scaler_28 , -0.7302984585347787 , 0.5975001299790483 ) + log_normal_cdf( scaler_29 , -0.4408524053009924 , 0.782234304057383 ) + log_normal_cdf( scaler_30 , 0.314360184454967 , 0.518129747905096 ) + log_normal_cdf( scaler_31 , 0.8228313610571493 , 0.5127410995968346 ) + log_normal_cdf( scaler_32 , 0.7945431798915021 , 1.7525725085672517 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.2566128708571277 , 0.5730712162275475 ) + log_normal_cdf( scaler_36 , 0.19245412342136312 , 0.784639670515977 ) + log_normal_cdf( scaler_37 , 0.693121924698665 , 0.5079077862077382 ) + log_normal_cdf( scaler_38 , 0.7280036350438409 , 0.1876401444516908 ) + log_normal_cdf( scaler_39 , 0.425322996017492 , 0.6586920559837675 ) + log_normal_cdf( scaler_40 , 0.38424442674722575 , 0.8850931061626294 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758754 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.20510760702653363 , 0.5671956320528757 ) + log_normal_cdf( scaler_44 , -0.22624804050791003 , 0.6143011442204095 ) + log_normal_cdf( scaler_45 , 0.6533941177153861 , 0.5348834284015593 ) + log_normal_cdf( scaler_46 , 0.5181926040799834 , 0.5887201338042609 ) + log_normal_cdf( scaler_47 , -0.708070680577004 , 0.7053206462153313 ) + log_normal_cdf( scaler_48 , -0.6496525074241722 , 0.07285941373925224 ) + log_normal_cdf( scaler_49 , -0.09396804349157672 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , -0.3450900789454681 , 0.08869860735971478 ) + log_normal_cdf( scaler_52 , -0.7703027478007471 , 0.5738076264537977 ) + log_normal_cdf( scaler_53 , 0.4750162401986969 , 0.6145236182378256 ) + log_normal_cdf( scaler_54 , -0.6335494279241842 , 0.9322810124281891 ) + log_normal_cdf( scaler_55 , -1.4116870950828027 , 0.024563344501848414 ) + log_normal_cdf( scaler_56 , -0.7549173743961849 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_57 , -0.21370440296160073 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.1193164710835643 , 1.0249856406088291 ) + log_normal_cdf( scaler_60 , 0.11779683870545796 , 0.9553219767533941 ) + log_normal_cdf( scaler_61 , -0.13374865074758188 , 0.8894036623785699 ) + log_normal_cdf( scaler_62 , -1.9271540964057063 , 0.43817505091905823 ) + log_normal_cdf( scaler_63 , -1.141323007934892 , 0.000408318891682421 ) + log_normal_cdf( scaler_64 , -0.5055365567864588 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_65 , -0.20166597311542825 , 1.0000000000000565e-09 ),
				-2.3650381076405953 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.16575092017303603 , 0.3303671482344607 ) + log_normal_cdf( scaler_4 , -0.04256607669450022 , 0.7697470986093387 ) + log_normal_cdf( scaler_5 , -0.0714258298489512 , 0.6220935713892005 ) + log_normal_cdf( scaler_6 , 0.150746767252113 , 0.7775994110573077 ) + log_normal_cdf( scaler_7 , 0.11098219418114083 , 0.6551457239657347 ) + log_normal_cdf( scaler_8 , -0.24916936228055242 , 0.11193255293978024 ) + log_normal_cdf( scaler_9 , -0.12507121414759423 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_10 , 0.18259614726066112 , 4.392351313896012 ) + log_normal_cdf( scaler_11 , -0.02541705142449051 , 0.7726622886910557 ) + log_normal_cdf( scaler_12 , 0.3549228368633136 , 0.5989171944119931 ) + log_normal_cdf( scaler_13 , -0.05688371384553137 , 1.0443970141191343 ) + log_normal_cdf( scaler_14 , -0.21770046806285365 , 0.9536690422419859 ) + log_normal_cdf( scaler_15 , 0.569474164068523 , 0.562964620187904 ) + log_normal_cdf( scaler_16 , 0.16616746214394174 , 0.7675296009999932 ) + log_normal_cdf( scaler_17 , -0.13350472270266545 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_18 , 0.1165495834731439 , 3.529233489873908 ) + log_normal_cdf( scaler_19 , 0.08740375445091765 , 1.0137154776515696 ) + log_normal_cdf( scaler_20 , 0.2777166808653646 , 0.6050113857454226 ) + log_normal_cdf( scaler_21 , 0.10111154357724748 , 0.9119346971069255 ) + log_normal_cdf( scaler_22 , 0.09860618717872911 , 0.7267495999786794 ) + log_normal_cdf( scaler_23 , 0.6580376838528861 , 0.36369874293563387 ) + log_normal_cdf( scaler_24 , 0.13055705695932973 , 0.6206630248923831 ) + log_normal_cdf( scaler_25 , -0.12274266163825455 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.4032534541958235 , 0.4413489628751636 ) + log_normal_cdf( scaler_28 , -0.12444501870381888 , 0.7029707902518251 ) + log_normal_cdf( scaler_29 , 0.7345662889639037 , 0.3064794911672104 ) + log_normal_cdf( scaler_30 , 0.5726887250296916 , 0.26551225915321364 ) + log_normal_cdf( scaler_31 , -0.07973191861734573 , 0.7903689803893269 ) + log_normal_cdf( scaler_32 , -0.49815840926669597 , 0.08592315798535598 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.5403739984574675 , 0.1476834611487426 ) + log_normal_cdf( scaler_36 , -0.134652734207586 , 0.6412636738212381 ) + log_normal_cdf( scaler_37 , 0.8042217231258093 , 0.19678480236548898 ) + log_normal_cdf( scaler_38 , 0.43249082652380877 , 0.4802870231596038 ) + log_normal_cdf( scaler_39 , -0.7428034345587861 , 0.6770613128826705 ) + log_normal_cdf( scaler_40 , -0.7828698522124256 , 0.017981177404002017 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.06519028566758757 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.15895107683430443 , 0.40891253982523 ) + log_normal_cdf( scaler_44 , 0.5628079256475931 , 0.638539731157721 ) + log_normal_cdf( scaler_45 , 0.23856946927210437 , 0.5666479916514222 ) + log_normal_cdf( scaler_46 , 0.25199747986390436 , 0.6131924359161592 ) + log_normal_cdf( scaler_47 , 0.02210035003244688 , 1.0526329301458635 ) + log_normal_cdf( scaler_48 , -0.4970920381030405 , 0.2696084594492733 ) + log_normal_cdf( scaler_49 , -0.09396804349157671 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , 0.1233670608961581 , 0.9704981820159421 ) + log_normal_cdf( scaler_52 , 0.61152977104579 , 0.639656791239896 ) + log_normal_cdf( scaler_53 , -0.25701477473809303 , 0.7765454625553433 ) + log_normal_cdf( scaler_54 , -0.17362019198915654 , 1.0059999623605624 ) + log_normal_cdf( scaler_55 , 0.11190577669242219 , 0.8362943829041661 ) + log_normal_cdf( scaler_56 , -0.3138075055252712 , 0.40760188738335573 ) + log_normal_cdf( scaler_57 , -0.21370440296160076 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_58 , -0.026388990698463097 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.137675038639491 , 0.24430237716298844 ) + log_normal_cdf( scaler_60 , -0.10390644146599427 , 0.6961872735551978 ) + log_normal_cdf( scaler_61 , 0.16114229338936065 , 0.5469448341843441 ) + log_normal_cdf( scaler_62 , 0.2381114652793246 , 0.4700560094819892 ) + log_normal_cdf( scaler_63 , -0.03754322424449293 , 0.8152841897198685 ) + log_normal_cdf( scaler_64 , -0.24536063480058593 , 0.5047323711527015 ) + log_normal_cdf( scaler_65 , -0.19393039744997959 , 0.008018444537368117 ),
				-2.2798802993002885 + log_normal_cdf( scaler_2 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_3 , -0.15637023705389824 , 0.30655321079467424 ) + log_normal_cdf( scaler_4 , 0.10050713224345093 , 0.7148993143378378 ) + log_normal_cdf( scaler_5 , -0.003869564872404735 , 1.0451654438026234 ) + log_normal_cdf( scaler_6 , -0.14195289318768944 , 0.7446485158083348 ) + log_normal_cdf( scaler_7 , 0.049222344716489716 , 0.8964139006955353 ) + log_normal_cdf( scaler_8 , 0.06262377815319353 , 1.2546108142587045 ) + log_normal_cdf( scaler_9 , -0.004708189937246756 , 1.3482379683984838 ) + log_normal_cdf( scaler_10 , -0.06103492387542985 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_11 , 0.1657022775469754 , 0.8324202086745057 ) + log_normal_cdf( scaler_12 , 0.418260832975532 , 0.5796849832158575 ) + log_normal_cdf( scaler_13 , -0.5694950363031616 , 1.1689433243489973 ) + log_normal_cdf( scaler_14 , 0.038806916495686336 , 0.7655425304561345 ) + log_normal_cdf( scaler_15 , 0.5415651459789605 , 0.48551723263106394 ) + log_normal_cdf( scaler_16 , 0.21302593788981575 , 1.6038405935955833 ) + log_normal_cdf( scaler_17 , 0.005497537790316257 , 1.015101109030815 ) + log_normal_cdf( scaler_18 , -0.04573893537463464 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_19 , 0.32553729234687184 , 1.0747057249549614 ) + log_normal_cdf( scaler_20 , 0.477769676003309 , 0.36079108759521994 ) + log_normal_cdf( scaler_21 , -0.22130657207938395 , 0.8910956010165316 ) + log_normal_cdf( scaler_22 , 0.2675782946936537 , 0.5877726085907768 ) + log_normal_cdf( scaler_23 , 1.010298727650664 , 0.19637861742443 ) + log_normal_cdf( scaler_24 , 0.37511346184522953 , 1.1779780211148116 ) + log_normal_cdf( scaler_25 , -0.02154862562323934 , 0.5734530448004631 ) + log_normal_cdf( scaler_26 , -0.026388990698463125 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_27 , -0.15657874995492468 , 0.5402335737923964 ) + log_normal_cdf( scaler_28 , 0.18391202202561135 , 0.6566085654296326 ) + log_normal_cdf( scaler_29 , 0.5743720195784224 , 0.39228229538092696 ) + log_normal_cdf( scaler_30 , 0.5609524024914704 , 0.26070900908969347 ) + log_normal_cdf( scaler_31 , 1.1095442569563672 , 0.2861436172741581 ) + log_normal_cdf( scaler_32 , 0.3847152046276582 , 0.6989111040220981 ) + log_normal_cdf( scaler_33 , -0.052833198131883904 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_34 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_35 , -0.6160379068763231 , 0.0307842628548225 ) + log_normal_cdf( scaler_36 , -0.7562344811699698 , 0.4491970681574033 ) + log_normal_cdf( scaler_37 , -0.6798961345081586 , 0.6303061902350279 ) + log_normal_cdf( scaler_38 , -0.9410303829364145 , 0.7381812461795199 ) + log_normal_cdf( scaler_39 , 0.5191975508350531 , 0.37502329384674987 ) + log_normal_cdf( scaler_40 , 0.5492150084024385 , 0.9877520284696574 ) + log_normal_cdf( scaler_41 , 0.0 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_42 , -0.0651902856675875 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_43 , -0.46392013346563393 , 0.11481279740321365 ) + log_normal_cdf( scaler_44 , -0.9610369484673039 , 0.05721847781311564 ) + log_normal_cdf( scaler_45 , -1.0313251932222576 , 0.0875344032057424 ) + log_normal_cdf( scaler_46 , -0.8490812601815741 , 0.45938050938944364 ) + log_normal_cdf( scaler_47 , 0.29966099292467235 , 0.591242235699024 ) + log_normal_cdf( scaler_48 , 0.53219540656043 , 1.0127263264840485 ) + log_normal_cdf( scaler_49 , -0.012315993001843937 , 0.9733903739799669 ) + log_normal_cdf( scaler_50 , -0.039630094542347095 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_51 , 0.01876054298515178 , 0.9764437864752765 ) + log_normal_cdf( scaler_52 , -0.21149462411658126 , 1.0149216252348057 ) + log_normal_cdf( scaler_53 , -0.8477376056391376 , 0.7515162040951556 ) + log_normal_cdf( scaler_54 , -0.6756490372219456 , 0.8236112655979076 ) + log_normal_cdf( scaler_55 , 0.325923130237658 , 0.7105756626754413 ) + log_normal_cdf( scaler_56 , 0.26264115742675426 , 1.0649504366672038 ) + log_normal_cdf( scaler_57 , -0.11422489954215806 , 0.2939822720145335 ) + log_normal_cdf( scaler_58 , -0.0263889906984631 , 1.0000000000000565e-09 ) + log_normal_cdf( scaler_59 , -0.1962194107533223 , 0.13508249058486146 ) + log_normal_cdf( scaler_60 , 0.043279115506722754 , 0.6501114495799935 ) + log_normal_cdf( scaler_61 , -0.02078513563903887 , 1.0703653064006167 ) + log_normal_cdf( scaler_62 , 0.26695910173457577 , 0.7108961697357694 ) + log_normal_cdf( scaler_63 , 0.3725788535743549 , 0.8049319865034116 ) + log_normal_cdf( scaler_64 , -0.01118399565918424 , 0.7638969294796772 ) + log_normal_cdf( scaler_65 , -0.16969752266127822 , 0.030508051018451568 ) 
			};
	
			tTable lSoftMaxTable = soft_max(lLogLikelihoodTable);
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
