// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVR_poly_Pipeline
// Dataset : diabetes

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVR_poly_Pipeline_diabetes.exe ml2cpp-demo_SVR_poly_Pipeline_diabetes.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.004293298838942205 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( -0.0007936290934574536 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.0002824745489547694 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( -0.002204787388070217 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.0018434032681274757 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.004385424578350862 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.0029764625631508506 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.0012897359179628153 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -8.887371853471437e-05 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( -0.0023203295749167937 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.004293298838942205 ) / 0.05047660201166468 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - -0.0007936290934574536 ) / 0.04750811800730214 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.0002824745489547694 ) / 0.0468170053213414 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - -0.002204787388070217 ) / 0.05153711023029127 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.0018434032681274757 ) / 0.04910069218274836 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.004385424578350862 ) / 0.047477809652101154 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.0029764625631508506 ) / 0.042295529345104395 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.0012897359179628153 ) / 0.04318277829795974 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -8.887371853471437e-05 ) / 0.0444460047545711 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - -0.0023203295749167937 ) / 0.046930272417797694 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> lProblem_data_dual = { 
		 0.1 , 0.1 , 0.1 , 0.1 , -0.1 , 0.1 , 0.1 , 0.1 , -0.1 , 0.1 , -0.1 , -0.1 , -0.1 , -0.1 , -0.1 , -0.1 , -0.1 , -0.1 , 0.1 , -0.1 , -0.1 , -0.1 , -0.1 , 0.1 , 0.1 , 0.1 , 0.1 , 0.1 , -0.1 , 0.1 , -0.1 , -0.1 , 0.1 , 0.1 , 0.1 , -0.1 , -0.1 , -0.1 , -0.1 , 0.1 , -0.1 , -0.1 , 0.1 , 0.1 , -0.1 , 0.1 , 0.1 , -0.1 , 0.1 , 0.1 ,};
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv = { 
		 { 1.3169557974266162, -0.9229582069908973, 0.2527794439217936, 0.8680030049327582, 1.4157262414468494, 1.0342026973947738, 1.3074242283667856, -0.08989690031891831, 0.5733250665542304, -0.061782612608162014 },
		 { -0.12234015604509564, 1.0834726777719228, 1.5189788442586414, 1.9368625287522194, 1.7520032584175984, 1.4959003301602989, -0.43348686133599196, 1.619169645668123, 1.608983909667523, 0.5560435134734569 },
		 { 0.16551903464924736, -0.9229582069908973, 0.7132155894988292, 0.6898597487360592, 0.5750336990199784, 0.4801655380761449, 0.0017409110897029956, 0.17500841430907257, 0.7038172405838073, 0.6443043886279736 },
		 { 0.4533782253435895, -0.9229582069908973, 1.9794149898356772, -0.9802332552277383, 0.1266643430589816, 0.7439927567993019, -0.6075779703062686, 0.45700439439693474, -1.0861010196735965, 0.4677826383189402 },
		 { 0.8132022137115182, 1.0834726777719228, -0.18463489437639113, -0.6016788403190012, -0.18158958916420415, -0.06727594077440481, -0.8687146337616847, 0.7646363726746026, 0.6755280318413616, 0.6443043886279736 },
		 { 1.2449909997530315, 1.0834726777719228, -0.13859127981868755, 1.2688253263650566, -0.910189792600825, -2.11193688587887, 1.3074242283667856, -1.7989634463059587, 1.3389881608471945, 1.1738696395550736 },
		 { 0.5253430230171761, 1.0834726777719228, 1.265738964191272, 1.1352178858876245, -0.4898435213873905, -0.06727594077440481, -0.694623524791408, -0.08989690031891831, -0.5557825467177778, -0.32656523807171206 },
		 { 0.2374838323228319, -0.9229582069908973, 1.565022458816347, -0.7575541873199928, -0.12554341966907942, -0.37727292277411445, -0.2593957523657131, -0.05571556939917758, 0.9671186836347224, 0.9973478892460401 },
		 { -1.4896713118432232, 1.0834726777719228, -1.611986945665203, -0.7352862807964334, -1.0783283010861995, -0.4102513251145077, -0.8687146337616847, -0.08989690031891831, -2.1676717559937857, -0.679608738689781 },
		 { 1.1730262020794469, 1.0834726777719228, -0.0925476652609842, -0.20085651888670283, 2.060257190640794, 0.9352674903735897, 1.3944697828519228, -0.08989690031891831, 1.903076697174647, -0.32656523807171206 },
		 { -1.84949530021115, -0.9229582069908973, -1.3127034510401296, -0.4680713998415671, -1.1623975553288868, -1.241307064092452, 1.0462875649113672, -1.7989634463059587, -2.11147823765933, -1.1209131144623643 },
		 { -1.2737769188224655, 1.0834726777719228, -0.23067850893409597, -0.24539233260185858, -1.0503052163386377, -0.5883346977526391, -1.3039424061873797, 0.3373697361778413, -0.2211691174246448, -0.679608738689781 },
		 { 0.021589439302075675, 1.0834726777719228, -0.6220492326745762, -0.13405279864798594, -0.686005114620327, -0.7004612657099817, 0.26287757454511906, -0.9444301733124383, -0.4056471147163736, 0.20300001285538866 },
		 { -1.7055657048639792, -0.9229582069908973, -1.7501177893383135, -0.7352862807964334, 0.014572004068732158, -0.4828038102633767, 1.742652000792478, -0.9444301733124383, -0.24334160491062018, -1.9152609908530167 },
		 { -0.7700233351073659, -0.9229582069908973, -0.8062236909053905, -1.1361086022287297, 0.378872105787042, 0.8231409224162491, -0.2593957523657131, -0.08989690031891831, -0.6898783437417529, -1.473956615080431 },
		 { -0.12234015604509564, 1.0834726777719228, -0.529962003559169, 1.0684141656489075, 0.5189875295248548, 0.5395266622888554, 0.7851509014559512, -0.08989690031891831, -0.47934133426546444, 0.820826138937007 },
		 { -0.05037535837150988, -0.9229582069908973, -0.852267305463094, -1.9154853385697654, -0.6299589451252013, -0.7268439875822967, 1.1333331193965066, -1.1922448224805584, -1.5353656708338554, -2.7096088672436602 },
		 { -2.065389693231908, -0.9229582069908973, -1.4508342947132404, -2.071360685570757, -1.5547207417947593, -1.6238565312410298, 0.43696868351539564, -0.9444301733124383, -1.1200015455062078, -0.15004348776267867 },
		 { -1.9934248955583231, -0.9229582069908973, -0.7832018836265386, -1.4033234831835961, -0.8261205383581377, -0.6740785438376645, 0.43696868351539564, -0.9444301733124383, -1.6649414988281948, 0.02647826254635487 },
		 { -0.9859177281281234, -0.9229582069908973, -0.8292454981842423, -0.4680713998415671, -0.34972809764957774, -0.07387162124248377, -0.694623524791408, -0.08989690031891831, 0.02773412604471449, -0.7678696138442977 },
		 { 0.021589439302075675, -0.9229582069908973, -1.0364417636939083, -0.20085651888670283, -0.013451080678830205, -0.2321679524763778, 1.5685608918222016, -0.9444301733124383, -1.1544718546782449, -1.209173989616881 },
		 { -0.12234015604509564, -0.9229582069908973, 1.4499134224220882, -0.06724907840926969, 2.396534207611531, 2.6501444120741104, -0.5205324158211291, 1.978073620325401, 1.0399405978823293, 0.02647826254635487 },
		 { 0.7412374160379317, -0.9229582069908973, -0.967376341857353, 0.7121276599358779, 0.8552645464956019, -0.42344268605066626, 0.9592420104262301, -0.3633475476768441, 2.0246491781007796, 0.20300001285538866 },
		 { -0.9139529304545368, 1.0834726777719228, 0.09162679296983049, -1.0025011617512976, -0.9382128773483889, -0.6674828633695863, -1.826215733098212, 1.619169645668123, 0.8265010930629372, 0.4677826383189402 },
		 { 0.021589439302075675, -0.9229582069908973, -0.06952585798213198, 1.0016104454101904, 1.471772410941975, 1.3969651231391147, 1.1333331193965066, -0.08989690031891831, -0.03171743128638289, -0.15004348776267867 },
		 { -1.3457417164960501, 1.0834726777719228, 2.0484804116722324, 2.070469969229649, -0.0975203349215173, -0.19259386966790415, -0.08530464339543577, -0.08989690031891831, 0.512552172261024, 1.615174015327659 },
		 { 2.1085685718360563, 1.0834726777719228, 0.13767040752753384, 0.6007881239778939, -0.6019358603776396, -0.24535931341253575, -1.0428057427319612, 0.7646363726746026, 0.04717441488692785, 1.7034348904821757 },
		 { 1.3169557974266162, 1.0834726777719228, 0.2527794439217936, 1.1352178858876245, 0.6591029532626657, 0.9484588513097483, -0.8687146337616847, 0.7646363726746026, 0.6177513909913335, 0.02647826254635487 },
		 { 1.2449909997530315, 1.0834726777719228, -0.3227657380495031, 1.1797537016068913, -1.2464668095715743, -0.8191835141354005, -1.3909879606725168, 0.26900707433836024, -0.11376577691627866, 1.0856087644005568 },
		 { 0.4533782253435895, -0.9229582069908973, 1.058542698681606, -1.024769068274857, -0.0975203349215173, 0.7637797982035387, -1.3039424061873797, 1.1919030091713618, -1.1895314283614709, -0.061782612608162014 },
		 { 0.6692726183643474, 1.0834726777719228, 0.18371402208523738, 0.8680030049327582, -0.910189792600825, -0.535569254008009, -0.8687146337616847, -0.08989690031891831, -0.4056471147163736, 0.20300001285538866 },
		 { -1.057882525801708, -0.9229582069908973, -1.2206162219247225, -0.8020900010351485, -0.9662359620959505, -1.0038625672416122, 0.08878646557484171, -0.9444301733124383, -0.2657564194621697, 0.3795217631644214 },
		 { -0.9139529304545368, -0.9229582069908973, 1.0124990841239023, 1.2020216061263396, 2.564672716096909, 2.603974648797552, -0.5205324158211291, 2.473702918661632, 1.4395443349448371, 0.9090870140915236 },
		 { 0.16551903464924736, -0.9229582069908973, 0.13767040752753384, -1.0470369754664555, -1.5827438265423213, -1.4919429218794524, -0.43348686133599196, -0.9017035096627636, -0.4056471147163736, -1.9152609908530167 },
		 { 0.5253430230171761, 1.0834726777719228, 0.9894772768450506, -0.26766023912541786, 0.378872105787042, 0.9748415731820654, -1.3039424061873797, 1.619169645668123, 0.1417042852291998, 0.20300001285538866 },
		 { -0.41019934673943903, -0.9229582069908973, -0.23067850893409597, 0.06635836206816284, -0.7980974536105759, -0.8455662360077176, 0.3499231290302585, -0.9444301733124383, -0.47934133426546444, -0.679608738689781 },
		 { 0.2374838323228319, 1.0834726777719228, 1.542000651537493, 1.5360402073199209, -0.20961267391176652, 0.025063585778700003, -0.08530464339543577, -0.08989690031891831, -0.5299842805595879, 1.350391389864107 },
		 { -1.2018121211488793, -0.9229582069908973, -1.5889651383863512, -0.9356974415125825, -0.545889690882514, -1.0830107328585574, 2.26492532770331, -1.7989634463059587, -1.3744254790306467, -0.9443913641533309 },
		 { 0.8851670113851029, 1.0834726777719228, 0.06860498569097828, 1.4024327668424887, -0.20961267391176652, 0.189955597480673, -1.21689685170224, 0.7646363726746026, 0.3015983484113671, 0.820826138937007 },
		 { -0.2662697513922667, -0.9229582069908973, 0.22975763664294177, -1.0693048819900146, -0.545889690882514, -0.9972668867735319, 0.7851509014559512, -0.9444301733124383, 0.38532161052233543, -0.061782612608162014 },
		 { 0.3094486299964185, -0.9229582069908973, 0.09162679296983049, -0.4680713998415671, 0.4349182752821676, 0.12399879279988431, 1.6556064463073386, -0.9444301733124383, -0.5299842805595879, -0.9443913641533309 },
		 { 0.16551903464924736, 1.0834726777719228, -0.43787477444376194, -0.0004453581705534258, 0.7431722075053528, 1.0276070169266955, -0.08530464339543577, 0.7646363726746026, -0.11376577691627866, -0.15004348776267867 },
		 { -0.6260937397601947, -0.9229582069908973, 1.8873277607202699, -0.4458034933180077, 0.4068951905346058, 0.8033538810120123, -0.694623524791408, 0.7646363726746026, 0.06643216311070517, 1.7034348904821757 },
		 { -0.33823454906585254, -0.9229582069908973, 1.2887607714701237, 1.0684141656489075, 0.9393338007382892, 0.5263353013526968, -0.3464413068508525, 0.7646363726746026, 1.5816983393679458, 0.20300001285538866 },
		 { 0.7412374160379317, -0.9229582069908973, -0.6911146545111315, -1.158376508752291, 1.5838647499322238, 0.9814372536501437, 1.3944697828519228, -0.2608035549176224, 1.015952779201199, -1.209173989616881 },
		 { 2.1085685718360563, 1.0834726777719228, -0.7141364617899834, -0.401267679602852, -0.12554341966907942, 0.335060567778409, -1.3909879606725168, 1.619169645668123, 0.35224129470549065, 0.9973478892460401 },
		 { 1.2449909997530315, 1.0834726777719228, -0.6680928472322798, 0.13316208230687912, 0.4629413600297293, 0.6582489107142764, -0.6075779703062686, 0.7646363726746026, 0.5279150539608931, 1.7916957656366925 },
		 { -0.05037535837150988, -0.9229582069908973, -0.9903981491362047, -0.6016788403190012, -1.5266976570471957, -1.8085355843472395, 1.1333331193965066, -1.6366021244371907, -1.3744254790306467, -1.6504783653894666 },
		 { 0.7412374160379317, 1.0834726777719228, 0.41393209487375604, 1.2020216061263396, -0.1535665044166418, -0.1464241063913521, -0.6075779703062686, -0.08989690031891831, 0.7038172405838073, 0.20300001285538866 },
		 { 0.021589439302075675, 1.0834726777719228, -0.046504050703280626, 0.19996580254559557, -0.12554341966907942, -0.42344268605066626, 0.0017409110897029956, -0.08989690031891831, 0.8658173471997993, -0.23830436291719537 },
		};
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11 };
	
			std::any lDotProduct = poly_kernel( lProblem_data_dual, lProblem_data_sv, inputs, 0.1, 0.0, 3 ) + 135.35885150256848;
	
	
			tTable lTable;
	
			std::any  lEstimator = lDotProduct;
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/diabetes.csv");
	return 0;
}
