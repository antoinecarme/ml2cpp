// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVR_poly_Pipeline
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVR_poly_Pipeline_freidman3.exe ml2cpp-demo_SVR_poly_Pipeline_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> lProblem_data_dual = { 
		 -0.1 , 0.025028939824072272 , 0.00417572562142796 , 0.1 , -0.06607047855828602 , -0.1 , -0.1 , -0.1 , 0.028293482445529625 , -0.1 , 0.057058955753624595 , 0.060060898096635035 , 0.1 , -0.006014126301534967 , 0.1 , 0.1 , -0.1 , 0.1 , -0.1 , 0.1 , 0.023217743956217694 , -0.0713005589967144 , 0.1 , -0.1 , -0.1 , 0.03595873821274353 , 0.1 , -0.0253996492500659 , 0.018417719884697314 , 0.016572609311653212 ,};
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv = { 
		 { -0.12862954071664834, -0.855762437264239, -1.6966276928077146, -0.5082762490187378 },
		 { 0.1883228378676173, 1.5565712024611758, -0.7565916122656656, -0.4905250260509675 },
		 { 0.7152231158680631, 0.1838248936695358, 0.6265331259707688, 1.3879167794348906 },
		 { -0.061839864587314934, 0.3798332127452269, 0.8082514748524611, 0.3041129230705171 },
		 { -0.21286186615867886, -1.7554500325668299, 0.40296624747161036, -1.2888423126888915 },
		 { 0.26229505103186884, -1.156436226701534, -1.469826707772466, -1.0591196409203139 },
		 { 0.7344011353085581, -1.0612795690667527, -1.6427206707260704, 1.2838987122205305 },
		 { -0.18528042847112391, 0.4699482106570824, -1.7832778948365522, 0.2085342932233457 },
		 { -1.072806128611992, -0.011274498105027463, 0.15871010003956737, 1.3663000362383564 },
		 { -1.1306530181901988, 1.693815859594952, -1.8098491932723488, -0.8531150536577624 },
		 { -1.468587753657723, 0.7062658577112757, -0.9158552800517019, -1.2834679369913997 },
		 { 0.645167022605794, 1.135268744400895, 0.2686215691113733, -1.2376422787275594 },
		 { -0.8839139388095921, -0.21046333550084623, 0.46521912268682564, 0.7304618228853951 },
		 { -1.3038701382176308, 1.5082277717144996, 0.6083460261972142, -0.0497929633220157 },
		 { -0.7108886199867888, -0.9144078676440471, 0.4058045686346802, -0.7553415501998626 },
		 { -0.5937704322674143, 0.0020387784582886763, 0.4128585674748309, 1.0111214968580546 },
		 { -0.17541648253457842, 1.157357979471062, 1.5460776435053638, 1.5614840452774303 },
		 { 0.6164412059817497, 0.5135313271464818, 0.1901494810656995, -1.1516753084142997 },
		 { 0.21542040586608754, -1.521343805623405, -0.40406152244102767, -0.03926368695421065 },
		 { -0.5031732278135369, 0.679095067810605, -0.9279147679691655, -0.08886958441441088 },
		 { -1.2241246362115, 1.512795119938024, -1.676492473707462, -1.3541232354999226 },
		 { 0.965886790803339, -0.8011962199051502, -1.0029751799208821, 0.5359440051467831 },
		 { -0.6434216904322567, 0.45815375284895515, 0.045617052824859526, -0.4284187571613101 },
		 { 1.2560974505775302, -1.5734959921280032, 0.806979259164098, 0.18593850041668145 },
		 { -0.08482514143628933, -1.1068716787463535, -1.4854147384149081, -1.1904103710707925 },
		 { -1.6242802893869952, -1.775508653244122, -0.6568131609880984, 1.1953045443253554 },
		 { -1.3142788612334164, 0.2280521766091662, 0.3057005634138972, 0.7101816208601218 },
		 { 0.983310970922164, -1.515041962798084, 1.3939188366118407, -0.16244622652803076 },
		 { -0.923065553671842, -1.460057588221313, -0.28039707608225506, -1.3915237626329608 },
		 { -0.3379611642294123, -0.5730815375077578, 0.28324125434683584, 1.5770952885864475 },
		};
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5 };
	
			std::any lDotProduct = poly_kernel( lProblem_data_dual, lProblem_data_sv, inputs, 0.2499999999999999, 0.0, 3 ) + 1.3856904617607786;
	
	
			tTable lTable;
	
			std::any  lEstimator = lDotProduct;
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
