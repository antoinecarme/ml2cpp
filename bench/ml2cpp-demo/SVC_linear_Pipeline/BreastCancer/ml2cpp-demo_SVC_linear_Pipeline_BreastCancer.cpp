// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_linear_Pipeline
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_linear_Pipeline_BreastCancer.exe ml2cpp-demo_SVC_linear_Pipeline_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 13.450740000000003 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 19.4476 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 87.29319999999998 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 583.3380000000001 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.09348100000000001 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.0959074 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.07945570000000003 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.04142684 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.178872 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.0630418 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 0.3765220000000001 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 1.2955559999999997 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 2.7619079999999996 ) : ( Feature_12)) };
			lTable["imputer_output_15"] = { ((Feature_13 == std::any()) ?  ( 33.839960000000005 ) : ( Feature_13)) };
			lTable["imputer_output_16"] = { ((Feature_14 == std::any()) ?  ( 0.006920639999999998 ) : ( Feature_14)) };
			lTable["imputer_output_17"] = { ((Feature_15 == std::any()) ?  ( 0.02546753999999999 ) : ( Feature_15)) };
			lTable["imputer_output_18"] = { ((Feature_16 == std::any()) ?  ( 0.033411 ) : ( Feature_16)) };
			lTable["imputer_output_19"] = { ((Feature_17 == std::any()) ?  ( 0.011515259999999998 ) : ( Feature_17)) };
			lTable["imputer_output_20"] = { ((Feature_18 == std::any()) ?  ( 0.02063639999999999 ) : ( Feature_18)) };
			lTable["imputer_output_21"] = { ((Feature_19 == std::any()) ?  ( 0.0038469800000000003 ) : ( Feature_19)) };
			lTable["imputer_output_22"] = { ((Feature_20 == std::any()) ?  ( 15.393479999999997 ) : ( Feature_20)) };
			lTable["imputer_output_23"] = { ((Feature_21 == std::any()) ?  ( 26.079600000000006 ) : ( Feature_21)) };
			lTable["imputer_output_24"] = { ((Feature_22 == std::any()) ?  ( 101.605 ) : ( Feature_22)) };
			lTable["imputer_output_25"] = { ((Feature_23 == std::any()) ?  ( 769.482 ) : ( Feature_23)) };
			lTable["imputer_output_26"] = { ((Feature_24 == std::any()) ?  ( 0.12837400000000002 ) : ( Feature_24)) };
			lTable["imputer_output_27"] = { ((Feature_25 == std::any()) ?  ( 0.23153520000000005 ) : ( Feature_25)) };
			lTable["imputer_output_28"] = { ((Feature_26 == std::any()) ?  ( 0.2537764 ) : ( Feature_26)) };
			lTable["imputer_output_29"] = { ((Feature_27 == std::any()) ?  ( 0.10431359999999998 ) : ( Feature_27)) };
			lTable["imputer_output_30"] = { ((Feature_28 == std::any()) ?  ( 0.284744 ) : ( Feature_28)) };
			lTable["imputer_output_31"] = { ((Feature_29 == std::any()) ?  ( 0.08354739999999998 ) : ( Feature_29)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14, std::any imputer_output_15, std::any imputer_output_16, std::any imputer_output_17, std::any imputer_output_18, std::any imputer_output_19, std::any imputer_output_20, std::any imputer_output_21, std::any imputer_output_22, std::any imputer_output_23, std::any imputer_output_24, std::any imputer_output_25, std::any imputer_output_26, std::any imputer_output_27, std::any imputer_output_28, std::any imputer_output_29, std::any imputer_output_30, std::any imputer_output_31) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 13.450740000000003 ) / 2.842552647252114 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 19.4476 ) / 4.456612417520733 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 87.29319999999998 ) / 19.783373366541916 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 583.3380000000001 ) / 254.63059980293016 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.09348100000000001 ) / 0.012981839045374118 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.0959074 ) / 0.04794022510627167 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.07945570000000003 ) / 0.072003293484465 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.04142684 ) / 0.03286028997155077 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.178872 ) / 0.023767574886807447 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.0630418 ) / 0.006170491614126058 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 0.3765220000000001 ) / 0.22931747451077505 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 1.2955559999999997 ) / 0.4864979388075555 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 2.7619079999999996 ) / 1.8449532326690556 ) };
			lTable["scaler_output_15"] = { ( ( imputer_output_15 - 33.839960000000005 ) / 28.135330141983403 ) };
			lTable["scaler_output_16"] = { ( ( imputer_output_16 - 0.006920639999999998 ) / 0.002156646106898394 ) };
			lTable["scaler_output_17"] = { ( ( imputer_output_17 - 0.02546753999999999 ) / 0.019603893631837527 ) };
			lTable["scaler_output_18"] = { ( ( imputer_output_18 - 0.033411 ) / 0.029953011615528748 ) };
			lTable["scaler_output_19"] = { ( ( imputer_output_19 - 0.011515259999999998 ) / 0.006801917382062208 ) };
			lTable["scaler_output_20"] = { ( ( imputer_output_20 - 0.02063639999999999 ) / 0.008194260127674737 ) };
			lTable["scaler_output_21"] = { ( ( imputer_output_21 - 0.0038469800000000003 ) / 0.0021774517444940085 ) };
			lTable["scaler_output_22"] = { ( ( imputer_output_22 - 15.393479999999997 ) / 3.899252873256619 ) };
			lTable["scaler_output_23"] = { ( ( imputer_output_23 - 26.079600000000006 ) / 5.855341137798891 ) };
			lTable["scaler_output_24"] = { ( ( imputer_output_24 - 101.605 ) / 28.256795094277766 ) };
			lTable["scaler_output_25"] = { ( ( imputer_output_25 - 769.482 ) / 402.52477721998673 ) };
			lTable["scaler_output_26"] = { ( ( imputer_output_26 - 0.12837400000000002 ) / 0.022491495459395314 ) };
			lTable["scaler_output_27"] = { ( ( imputer_output_27 - 0.23153520000000005 ) / 0.13583353927863323 ) };
			lTable["scaler_output_28"] = { ( ( imputer_output_28 - 0.2537764 ) / 0.19191074193759974 ) };
			lTable["scaler_output_29"] = { ( ( imputer_output_29 - 0.10431359999999998 ) / 0.06250764832434509 ) };
			lTable["scaler_output_30"] = { ( ( imputer_output_30 - 0.284744 ) / 0.05511358511292836 ) };
			lTable["scaler_output_31"] = { ( ( imputer_output_31 - 0.08354739999999998 ) / 0.015270954103788016 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0], iTable.at("imputer_output_15")[0], iTable.at("imputer_output_16")[0], iTable.at("imputer_output_17")[0], iTable.at("imputer_output_18")[0], iTable.at("imputer_output_19")[0], iTable.at("imputer_output_20")[0], iTable.at("imputer_output_21")[0], iTable.at("imputer_output_22")[0], iTable.at("imputer_output_23")[0], iTable.at("imputer_output_24")[0], iTable.at("imputer_output_25")[0], iTable.at("imputer_output_26")[0], iTable.at("imputer_output_27")[0], iTable.at("imputer_output_28")[0], iTable.at("imputer_output_29")[0], iTable.at("imputer_output_30")[0], iTable.at("imputer_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual = { 
		 -0.037862739155381825 , -0.1269996401726062 , -0.15330325770321127 , -0.10064627943285931 , 0.024407560658559372 , 0.10154379313240665 , 0.11883290622698837 , 0.17402765644610424 ,};
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv = { 
		 { 0.9882877640685742, 0.545795723773792, 1.0214031563582684, 0.9561380297121628, 1.7731694191819818, 0.6756872736453277, 1.3949959111477481, 1.1680712505346342, 0.3377711036247148, 0.3692088317216966, 0.8463288740382525, 0.3318492990858548, 0.10791167845050359, 0.8487563458289161, 1.6875091320541182, 0.6168397067999473, 0.8339395156862944, 0.05068276790734625, 2.389916806992701, 1.0746598660186466, 0.5992224859344821, -0.14851397715947615, 0.4280386349423377, 0.5110691605639264, 0.632505740922505, -0.14676198607405255, 0.42010988642946795, 0.006181643532564801, -0.20220060039944426, -0.26307459067036587 },
		 { 0.05602710653537139, 1.176319479654551, 0.02359557146050143, -0.042170893868649986, -0.06940465036200481, -0.3606032295776272, -0.3695067088249278, -0.32187299653037266, -0.11662948421122415, -0.28227896720781626, -0.6345874875451865, -0.597239940444918, -0.5473894850651507, -0.4979490174559712, -1.313446833460216, -0.7002455868106682, -0.5158412849541191, -0.6814637314213714, -0.9038521946583215, -1.0939300978876663, 0.38379660120635484, 1.632765670693935, 0.4103437761187603, 0.19680279198491693, 0.8325813654235086, 0.4186359296974075, 0.6556360458494389, 0.4573264355054349, 1.1295944524827541, -0.2977810010490425 },
		 { 0.1861918021154792, 0.03868409093019308, 0.1934351603792703, 0.06347233997998829, 0.9643471896580743, 0.3627976289524066, 0.46031644381865655, 0.7061154974617828, -0.5037114664418393, 0.3886562287046663, -0.6790673075927456, -0.7035096609841676, -0.6286923589504676, -0.5327806684461847, -0.7449715532190888, -0.3855121917069697, -0.38597120544654523, -0.2864280599964186, -1.0258888379206788, -0.4597024951442062, 0.42226550919352007, 0.8061699376536177, 0.43511657847176877, 0.2479797658404708, 1.4639311138488966, 0.9221934484313643, 0.7978896775345097, 1.2540289404788016, 0.6015939614899484, 1.4375395178847792 },
		 { 1.6285573477328854, 0.536820296643817, 1.5218233737082127, 1.7305932607512515, -1.5229737428492542, -0.19790061433730816, 0.42837346053697867, 0.4976572030909637, -0.07876276855822992, -1.562565935253375, 1.1323951676774562, 0.01941220968612573, 0.8401795625775915, 1.5112685646631812, -0.6448160389188576, 1.402397937690864, 0.9244145582224192, 0.4299875808125853, 0.09318718079513724, 0.5460603216611357, 1.1198350406941238, -0.2356139407649644, 0.9730402867085218, 1.1391050338981048, -1.7852970280473983, -0.2593998521066482, -0.0014402528863646524, -0.2000331213089351, -0.8680981268405439, -1.176573505354397 },
		 { -0.7847664676172141, 3.2227168652888993, -0.8341954475726855, -0.7718553863993938, -1.2079182267775614, -1.2550504272064575, -1.0345179559886557, -1.0648974805242288, 0.23679319521672784, -0.7717051246125747, -0.6655489309116247, 0.7223956608355157, -0.689940523944073, -0.6532697468715151, -1.1877887576483517, -0.9515732104210284, -1.0078452339780561, -1.1902908467178956, -0.1801749001125429, -0.6029892526068852, -0.7779644200060468, 2.681380918807065, -0.819802809296342, -0.7417729712494686, -1.2642111793470074, -1.1976806381101976, -1.20158151478034, -1.1885521530821144, 0.11532546806702036, -0.6860998945312151 },
		 { 0.34801818040426113, -0.9575883204970556, 0.3374955259800115, 0.22291900519391838, 0.4790538519437302, 0.1291733609150254, 0.07519517147042899, 0.4227948083242171, -0.27230375967353687, -0.36168917155494545, -0.5927241275004249, -1.1431826440276018, -0.3479264344665065, -0.4492557910716931, -0.5632078420816322, -0.1274002015570969, -0.0758187533577636, 0.5020260917907122, -0.7439841919846334, -0.6057447671734751, 0.11707883916200637, -1.0639175162289185, 0.24755107494184772, -0.006414511965778659, 0.14343199214227395, 0.3089428444761218, 0.2945306731104129, 0.8892735767560553, -0.28385016086224946, -0.4398808322221143 },
		 { 0.4007876515853859, 0.7253042663732964, 0.45982046799888676, 0.28968238718004674, -0.6740955552917824, 0.7737260289824431, 0.3256003838915809, -0.12376153720861631, -1.4083052292633838, -0.25472848814860855, -0.6590077809046307, -0.3855227022332593, -0.29155644190602004, -0.5082563427489936, -1.2420396612276436, 1.067260432693895, 1.0806592811261329, 0.6681557191484334, -0.5194367683818962, 0.2567312921691882, 0.022188866126998073, 0.20330156210974965, 0.15199883729453006, -0.08939077054711389, -1.1459442546419703, 0.6299239529088776, 0.5858119189417486, 0.09897028869010549, -1.0695003759821298, -0.22967785615503594 },
		 { -0.34502087444117546, -0.19018930088417468, -0.31355623154193574, -0.39837317305346426, 0.4752023175174263, 0.20635280660594615, 0.008253789114913012, -0.09789444958595983, 0.5733862232433494, 0.11153082169733591, 0.08537508989128523, -0.5170751609278821, -0.1435852114347434, -0.1261744568869577, 0.015004779827572649, -0.324299862027158, -0.21370138275783557, -0.16837311241389655, -0.34370400208410173, -0.11985569859810878, -0.10860542102936493, -0.2458609953067863, -0.19658988152994533, -0.22751891357472598, 0.632505740922505, 0.04612115706673204, 0.0694260251692018, -0.04501209172676791, 0.30221223979299605, 0.2588312408731264 },
		};
		
	
		double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
			return linear_kernel( lProblem_data_dual, lProblem_data_sv, inputs ) + 0.6932483317395821;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14, std::any scaler_output_15, std::any scaler_output_16, std::any scaler_output_17, std::any scaler_output_18, std::any scaler_output_19, std::any scaler_output_20, std::any scaler_output_21, std::any scaler_output_22, std::any scaler_output_23, std::any scaler_output_24, std::any scaler_output_25, std::any scaler_output_26, std::any scaler_output_27, std::any scaler_output_28, std::any scaler_output_29, std::any scaler_output_30, std::any scaler_output_31) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14, scaler_output_15, scaler_output_16, scaler_output_17, scaler_output_18, scaler_output_19, scaler_output_20, scaler_output_21, scaler_output_22, scaler_output_23, scaler_output_24, scaler_output_25, scaler_output_26, scaler_output_27, scaler_output_28, scaler_output_29, scaler_output_30, scaler_output_31 };
	
			std::any lDotProduct_0_1 = linear_kernel( lProblem_data_dual, lProblem_data_sv, inputs ) + 0.6932483317395821;
	
			std::any lLogistic_0_1 = logistic(-1.6834132178945358 * lDotProduct_0_1 + 0.026342373930418564);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_1,
				lDotProduct_0_1 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_1,
				1.0 - lLogistic_0_1 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0], iTable.at("scaler_output_15")[0], iTable.at("scaler_output_16")[0], iTable.at("scaler_output_17")[0], iTable.at("scaler_output_18")[0], iTable.at("scaler_output_19")[0], iTable.at("scaler_output_20")[0], iTable.at("scaler_output_21")[0], iTable.at("scaler_output_22")[0], iTable.at("scaler_output_23")[0], iTable.at("scaler_output_24")[0], iTable.at("scaler_output_25")[0], iTable.at("scaler_output_26")[0], iTable.at("scaler_output_27")[0], iTable.at("scaler_output_28")[0], iTable.at("scaler_output_29")[0], iTable.at("scaler_output_30")[0], iTable.at("scaler_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
