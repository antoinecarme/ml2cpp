// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_digits.exe ml2cpp-demo_MLPClassifier_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace InputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["input_0"] = { Feature_0 };
			lTable["input_1"] = { Feature_1 };
			lTable["input_2"] = { Feature_2 };
			lTable["input_3"] = { Feature_3 };
			lTable["input_4"] = { Feature_4 };
			lTable["input_5"] = { Feature_5 };
			lTable["input_6"] = { Feature_6 };
			lTable["input_7"] = { Feature_7 };
			lTable["input_8"] = { Feature_8 };
			lTable["input_9"] = { Feature_9 };
			lTable["input_10"] = { Feature_10 };
			lTable["input_11"] = { Feature_11 };
			lTable["input_12"] = { Feature_12 };
			lTable["input_13"] = { Feature_13 };
			lTable["input_14"] = { Feature_14 };
			lTable["input_15"] = { Feature_15 };
			lTable["input_16"] = { Feature_16 };
			lTable["input_17"] = { Feature_17 };
			lTable["input_18"] = { Feature_18 };
			lTable["input_19"] = { Feature_19 };
			lTable["input_20"] = { Feature_20 };
			lTable["input_21"] = { Feature_21 };
			lTable["input_22"] = { Feature_22 };
			lTable["input_23"] = { Feature_23 };
			lTable["input_24"] = { Feature_24 };
			lTable["input_25"] = { Feature_25 };
			lTable["input_26"] = { Feature_26 };
			lTable["input_27"] = { Feature_27 };
			lTable["input_28"] = { Feature_28 };
			lTable["input_29"] = { Feature_29 };
			lTable["input_30"] = { Feature_30 };
			lTable["input_31"] = { Feature_31 };
			lTable["input_32"] = { Feature_32 };
			lTable["input_33"] = { Feature_33 };
			lTable["input_34"] = { Feature_34 };
			lTable["input_35"] = { Feature_35 };
			lTable["input_36"] = { Feature_36 };
			lTable["input_37"] = { Feature_37 };
			lTable["input_38"] = { Feature_38 };
			lTable["input_39"] = { Feature_39 };
			lTable["input_40"] = { Feature_40 };
			lTable["input_41"] = { Feature_41 };
			lTable["input_42"] = { Feature_42 };
			lTable["input_43"] = { Feature_43 };
			lTable["input_44"] = { Feature_44 };
			lTable["input_45"] = { Feature_45 };
			lTable["input_46"] = { Feature_46 };
			lTable["input_47"] = { Feature_47 };
			lTable["input_48"] = { Feature_48 };
			lTable["input_49"] = { Feature_49 };
			lTable["input_50"] = { Feature_50 };
			lTable["input_51"] = { Feature_51 };
			lTable["input_52"] = { Feature_52 };
			lTable["input_53"] = { Feature_53 };
			lTable["input_54"] = { Feature_54 };
			lTable["input_55"] = { Feature_55 };
			lTable["input_56"] = { Feature_56 };
			lTable["input_57"] = { Feature_57 };
			lTable["input_58"] = { Feature_58 };
			lTable["input_59"] = { Feature_59 };
			lTable["input_60"] = { Feature_60 };
			lTable["input_61"] = { Feature_61 };
			lTable["input_62"] = { Feature_62 };
			lTable["input_63"] = { Feature_63 };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace InputLayer
	

	namespace HiddenLayer_1 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9, std::any input_10, std::any input_11, std::any input_12, std::any input_13, std::any input_14, std::any input_15, std::any input_16, std::any input_17, std::any input_18, std::any input_19, std::any input_20, std::any input_21, std::any input_22, std::any input_23, std::any input_24, std::any input_25, std::any input_26, std::any input_27, std::any input_28, std::any input_29, std::any input_30, std::any input_31, std::any input_32, std::any input_33, std::any input_34, std::any input_35, std::any input_36, std::any input_37, std::any input_38, std::any input_39, std::any input_40, std::any input_41, std::any input_42, std::any input_43, std::any input_44, std::any input_45, std::any input_46, std::any input_47, std::any input_48, std::any input_49, std::any input_50, std::any input_51, std::any input_52, std::any input_53, std::any input_54, std::any input_55, std::any input_56, std::any input_57, std::any input_58, std::any input_59, std::any input_60, std::any input_61, std::any input_62, std::any input_63) {
	
			tTable lTable;
	
			double output_1_0_BA = -0.043499802775371826 * input_0 + 0.20017402852007746 * input_1 + 1.5866957167683204 * input_2 + -0.09631542605479186 * input_3 + 1.8750544710222308 * input_4 + 2.0040892089222786 * input_5 + -1.2853595381399852 * input_6 + -0.029292948840699617 * input_7 + -0.10546812683604487 * input_8 + 1.025402299360597 * input_9 + 0.5124742877328426 * input_10 + 0.28142224046691044 * input_11 + 1.1255969314914136 * input_12 + 2.8574862101425413 * input_13 + 0.8265428820502906 * input_14 + 0.1299698508286017 * input_15 + -0.07019450225908223 * input_16 + -0.8328818348823833 * input_17 + -2.619090354048477 * input_18 + -1.9953481098865813 * input_19 + 3.5784187193730306 * input_20 + 0.5573013719711938 * input_21 + 0.6561499530408651 * input_22 + -0.2505175384211351 * input_23 + 0.17425491678904842 * input_24 + -1.5734029607021465 * input_25 + -2.8213044682956876 * input_26 + -0.7301204598294075 * input_27 + 1.969698190051801 * input_28 + -2.4270799948161503 * input_29 + -1.9320036010366672 * input_30 + 0.19245704306403288 * input_31 + -0.2910152142465881 * input_32 + -1.468358362014915 * input_33 + -2.8967653782623226 * input_34 + 0.1266664512867918 * input_35 + 2.250833345465868 * input_36 + -2.1891976938410784 * input_37 + -3.5804121696515816 * input_38 + 0.11352873989947893 * input_39 + 0.02272212196527673 * input_40 + 0.2615700981251136 * input_41 + -1.685679468001114 * input_42 + 0.4890677626107051 * input_43 + -0.3927479372396865 * input_44 + -1.8140859228250508 * input_45 + -0.24996463333640948 * input_46 + 0.1252055934263575 * input_47 + 0.06747300627691742 * input_48 + 1.0275182343745222 * input_49 + 0.49667456054113474 * input_50 + 0.9361642713767528 * input_51 + 3.182241799471148 * input_52 + 3.196963283914347 * input_53 + 1.3317700763145635 * input_54 + -0.5230296587426093 * input_55 + -0.11808822705513577 * input_56 + 0.19649092164401222 * input_57 + 2.369302361245048 * input_58 + 0.7879769275626264 * input_59 + 2.357375466508059 * input_60 + 1.7322587181023068 * input_61 + -0.3034137105986565 * input_62 + -0.9046962712740878 * input_63 + -0.2648157505745865;
	
			double output_1_1_BA = 0.057959113852830986 * input_0 + -0.0005858419731500819 * input_1 + -0.21246775483417302 * input_2 + 0.14480739005640564 * input_3 + -0.01509127078719201 * input_4 + 0.07979455396176172 * input_5 + -0.15206292240307168 * input_6 + -0.2859395228928458 * input_7 + 0.25224997491353496 * input_8 + -0.05929638553612593 * input_9 + -0.13947282328161884 * input_10 + -0.10019335441442383 * input_11 + -0.2450279353006906 * input_12 + -0.0213283698569778 * input_13 + -0.019991242601264805 * input_14 + -0.1405339999116418 * input_15 + 0.08662720994706953 * input_16 + -0.20025108752176893 * input_17 + 0.1290657690095767 * input_18 + 0.06733388315056157 * input_19 + -0.39042182581542745 * input_20 + -0.19227100231282507 * input_21 + -0.2560271577961522 * input_22 + -0.0013668067207625002 * input_23 + 0.13658210762203013 * input_24 + -0.028875253698595248 * input_25 + 0.15053705822322602 * input_26 + 0.049264741135331525 * input_27 + -0.18135516537439952 * input_28 + -0.3090761039813833 * input_29 + -0.06248660907702881 * input_30 + -0.2113754045072711 * input_31 + -0.24008805026831154 * input_32 + 0.10732122814456542 * input_33 + -0.08615068848917443 * input_34 + 0.06088065695361814 * input_35 + 0.18888724133328552 * input_36 + -0.19532304821713894 * input_37 + 0.22754071346833252 * input_38 + 0.14785062329979093 * input_39 + 0.25766560296107033 * input_40 + -0.015327463902730529 * input_41 + 0.24826151812309863 * input_42 + 0.02422692104800987 * input_43 + 0.11820469727757686 * input_44 + -0.11359307210364625 * input_45 + 0.17369814776029238 * input_46 + 0.21264168277907053 * input_47 + -0.045733111477095516 * input_48 + -0.13936503141784964 * input_49 + 0.13291535839952015 * input_50 + -0.07385042812118223 * input_51 + -0.27357683629559293 * input_52 + -0.008320687529373495 * input_53 + 0.38274914591204934 * input_54 + -0.07309383578730203 * input_55 + 0.08182126226560336 * input_56 + 0.06680317000886392 * input_57 + 0.11039333063688701 * input_58 + -0.1696336260945663 * input_59 + -0.12130871675227603 * input_60 + 0.25153466610834624 * input_61 + -0.19814571891777585 * input_62 + 0.06902007167693044 * input_63 + 0.2819548211060525;
	
			double output_1_2_BA = 0.2835761654809569 * input_0 + -0.20023352694742458 * input_1 + 0.04650382530363974 * input_2 + -0.12959888673075282 * input_3 + -0.31877928234914066 * input_4 + -0.17089922157784734 * input_5 + 0.1676102887231288 * input_6 + -0.17947936231935002 * input_7 + -0.22374996846076134 * input_8 + 0.20180723178890125 * input_9 + -0.18330627501401478 * input_10 + -0.1487869826297436 * input_11 + 0.05414119281032537 * input_12 + -0.2459175989123533 * input_13 + -0.27446929508593587 * input_14 + -0.22775721841308613 * input_15 + 0.059943764479598774 * input_16 + -0.07670107100078524 * input_17 + 0.04928230847958032 * input_18 + -0.11705352345911647 * input_19 + -0.19106161510744044 * input_20 + 0.045724470027689125 * input_21 + -0.3053824975045229 * input_22 + 0.16476165779577195 * input_23 + 0.2910835684618156 * input_24 + 0.01974003953037585 * input_25 + -0.022845575372394872 * input_26 + 0.13282741230324513 * input_27 + -0.07541504691461687 * input_28 + -0.010191663587137313 * input_29 + -0.26868353694632807 * input_30 + 0.10994105846580748 * input_31 + -0.21833347130256453 * input_32 + -0.14941763945375872 * input_33 + -0.12049125849929995 * input_34 + -0.29203606462114784 * input_35 + 0.07047069116479664 * input_36 + -0.06152159975867909 * input_37 + -0.04990776106405205 * input_38 + -0.261471051987399 * input_39 + 0.040189865479959605 * input_40 + -0.08508303723519722 * input_41 + -0.15325925000718432 * input_42 + -0.11414697219320687 * input_43 + -0.1479427815219902 * input_44 + -0.3870139085091437 * input_45 + 0.2078767804738598 * input_46 + 0.20040091022413534 * input_47 + -0.05153466183747755 * input_48 + -0.13702221593946343 * input_49 + 0.06880775670948919 * input_50 + -0.07964726883756733 * input_51 + 0.12815935012855229 * input_52 + 0.07682495656984833 * input_53 + -0.08307125796773798 * input_54 + -0.17792560309319225 * input_55 + 0.05006190945353897 * input_56 + -0.049067880952846026 * input_57 + -0.2373188106442704 * input_58 + -0.1857284786794301 * input_59 + -0.2854695777476801 * input_60 + -0.2825476092957137 * input_61 + -0.15223892988382168 * input_62 + 0.18885575968671625 * input_63 + -0.3088821699597919;
	
			lTable["output_1_0"] = { relu(output_1_0_BA) };
			lTable["output_1_1"] = { relu(output_1_1_BA) };
			lTable["output_1_2"] = { relu(output_1_2_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0], iTable.at("input_10")[0], iTable.at("input_11")[0], iTable.at("input_12")[0], iTable.at("input_13")[0], iTable.at("input_14")[0], iTable.at("input_15")[0], iTable.at("input_16")[0], iTable.at("input_17")[0], iTable.at("input_18")[0], iTable.at("input_19")[0], iTable.at("input_20")[0], iTable.at("input_21")[0], iTable.at("input_22")[0], iTable.at("input_23")[0], iTable.at("input_24")[0], iTable.at("input_25")[0], iTable.at("input_26")[0], iTable.at("input_27")[0], iTable.at("input_28")[0], iTable.at("input_29")[0], iTable.at("input_30")[0], iTable.at("input_31")[0], iTable.at("input_32")[0], iTable.at("input_33")[0], iTable.at("input_34")[0], iTable.at("input_35")[0], iTable.at("input_36")[0], iTable.at("input_37")[0], iTable.at("input_38")[0], iTable.at("input_39")[0], iTable.at("input_40")[0], iTable.at("input_41")[0], iTable.at("input_42")[0], iTable.at("input_43")[0], iTable.at("input_44")[0], iTable.at("input_45")[0], iTable.at("input_46")[0], iTable.at("input_47")[0], iTable.at("input_48")[0], iTable.at("input_49")[0], iTable.at("input_50")[0], iTable.at("input_51")[0], iTable.at("input_52")[0], iTable.at("input_53")[0], iTable.at("input_54")[0], iTable.at("input_55")[0], iTable.at("input_56")[0], iTable.at("input_57")[0], iTable.at("input_58")[0], iTable.at("input_59")[0], iTable.at("input_60")[0], iTable.at("input_61")[0], iTable.at("input_62")[0], iTable.at("input_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_1
	

	namespace HiddenLayer_2 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
	
			tTable lTable;
	
			double output_2_0_BA = -0.42830249558353845 * output_1_0 + -0.856966457966148 * output_1_1 + -0.2766643691257962 * output_1_2 + 2.7840493442361693;
	
			double output_2_1_BA = 0.008959155724411671 * output_1_0 + -0.3966127795894761 * output_1_1 + 0.16815112478626307 * output_1_2 + -0.6745818760741756;
	
			double output_2_2_BA = -0.014616511912339654 * output_1_0 + 0.8917553105816498 * output_1_1 + 0.8177373994519778 * output_1_2 + -0.2739144354269072;
	
			double output_2_3_BA = 0.02197580542297789 * output_1_0 + 0.019153091382110264 * output_1_1 + -0.2830651768521292 * output_1_2 + -0.5646149080082173;
	
			double output_2_4_BA = 0.04962065148240291 * output_1_0 + -0.2520403601839554 * output_1_1 + 0.10866573872380562 * output_1_2 + -4.014946911810393;
	
			lTable["output_2_0"] = { relu(output_2_0_BA) };
			lTable["output_2_1"] = { relu(output_2_1_BA) };
			lTable["output_2_2"] = { relu(output_2_2_BA) };
			lTable["output_2_3"] = { relu(output_2_3_BA) };
			lTable["output_2_4"] = { relu(output_2_4_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_2
	

	namespace OutputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
	
			tTable lTable;
	
			double output_3_0_BA = 1.6966133227134508 * output_2_0 + 0.10507839293227123 * output_2_1 + -0.3295006427296286 * output_2_2 + -1.5815252646222626 * output_2_3 + -2.1016354334833514 * output_2_4 + 2.224638040615184;
	
			double output_3_1_BA = -1.39599359090682 * output_2_0 + 0.37819910737634804 * output_2_1 + -0.5671562918256289 * output_2_2 + -0.029592906216149614 * output_2_3 + 0.6788742864407212 * output_2_4 + -0.13753617103282748;
	
			double output_3_2_BA = -2.5094786757089844 * output_2_0 + 0.008960773884890598 * output_2_1 + -0.30434427300942835 * output_2_2 + 0.3448622246184188 * output_2_3 + 1.2496978759468855 * output_2_4 + -5.800690141363334;
	
			double output_3_3_BA = -2.4366449368175687 * output_2_0 + 1.1595864522412387 * output_2_1 + 0.36853916595939523 * output_2_2 + 1.5760590506663719 * output_2_3 + 0.2767970839644846 * output_2_4 + -5.147168823440208;
	
			double output_3_4_BA = 2.176593570690493 * output_2_0 + -0.3684098177662195 * output_2_1 + -0.07552196057023389 * output_2_2 + -0.7058444584300301 * output_2_3 + -1.5704596784646176 * output_2_4 + 0.7392332989111059;
	
			double output_3_5_BA = 0.8208072632917591 * output_2_0 + 0.5828647501426717 * output_2_1 + -0.5488839849079926 * output_2_2 + 0.2872822394430787 * output_2_3 + -0.1122527308913917 * output_2_4 + 1.4284928401310646;
	
			double output_3_6_BA = 1.219886773308855 * output_2_0 + -0.1447942454101313 * output_2_1 + 0.593904430542747 * output_2_2 + -0.7012386960423498 * output_2_3 + -0.18976332220213948 * output_2_4 + 1.6835508013496863;
	
			double output_3_7_BA = 0.7941216062439759 * output_2_0 + -0.11808878023662704 * output_2_1 + -0.3769654522981181 * output_2_2 + 0.2580561041451958 * output_2_3 + 0.10282588527191217 * output_2_4 + 1.2699420446789877;
	
			double output_3_8_BA = -1.2977184682917555 * output_2_0 + 0.6844050063675703 * output_2_1 + 0.2537604003566165 * output_2_2 + 0.10571013182218174 * output_2_3 + 0.39334653061282493 * output_2_4 + 0.1284302111360201;
	
			double output_3_9_BA = 0.6097186428824445 * output_2_0 + -0.6264724746821947 * output_2_1 + -0.4089282513263729 * output_2_2 + 0.41359697341852925 * output_2_3 + 0.15094560247977826 * output_2_4 + 1.0039112169154227;
	
			lTable["Score_0"] = { output_3_0_BA };
			lTable["Score_1"] = { output_3_1_BA };
			lTable["Score_2"] = { output_3_2_BA };
			lTable["Score_3"] = { output_3_3_BA };
			lTable["Score_4"] = { output_3_4_BA };
			lTable["Score_5"] = { output_3_5_BA };
			lTable["Score_6"] = { output_3_6_BA };
			lTable["Score_7"] = { output_3_7_BA };
			lTable["Score_8"] = { output_3_8_BA };
			lTable["Score_9"] = { output_3_9_BA };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
	
			return lTable;
		}
	
	} // eof namespace OutputLayer
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_InputLayer = InputLayer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );

		tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );

		tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );

		tTable lScores = tTable();

		lScores["Score"] = { lTable_OutputLayer[ "Score_0" ][0], lTable_OutputLayer[ "Score_1" ][0], lTable_OutputLayer[ "Score_2" ][0], lTable_OutputLayer[ "Score_3" ][0], lTable_OutputLayer[ "Score_4" ][0], lTable_OutputLayer[ "Score_5" ][0], lTable_OutputLayer[ "Score_6" ][0], lTable_OutputLayer[ "Score_7" ][0], lTable_OutputLayer[ "Score_8" ][0], lTable_OutputLayer[ "Score_9" ][0] };

		tTable lSoftMaxTable = soft_max( lScores );


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
