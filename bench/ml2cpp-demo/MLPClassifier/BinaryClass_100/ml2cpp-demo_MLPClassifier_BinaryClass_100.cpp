// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier
// Dataset : BinaryClass_100

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_BinaryClass_100.exe ml2cpp-demo_MLPClassifier_BinaryClass_100.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace InputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63", "input_64", "input_65", "input_66", "input_67", "input_68", "input_69", "input_70", "input_71", "input_72", "input_73", "input_74", "input_75", "input_76", "input_77", "input_78", "input_79", "input_80", "input_81", "input_82", "input_83", "input_84", "input_85", "input_86", "input_87", "input_88", "input_89", "input_90", "input_91", "input_92", "input_93", "input_94", "input_95", "input_96", "input_97", "input_98", "input_99" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
	
			tTable lTable;
	
			lTable["input_0"] = { Feature_0 };
			lTable["input_1"] = { Feature_1 };
			lTable["input_2"] = { Feature_2 };
			lTable["input_3"] = { Feature_3 };
			lTable["input_4"] = { Feature_4 };
			lTable["input_5"] = { Feature_5 };
			lTable["input_6"] = { Feature_6 };
			lTable["input_7"] = { Feature_7 };
			lTable["input_8"] = { Feature_8 };
			lTable["input_9"] = { Feature_9 };
			lTable["input_10"] = { Feature_10 };
			lTable["input_11"] = { Feature_11 };
			lTable["input_12"] = { Feature_12 };
			lTable["input_13"] = { Feature_13 };
			lTable["input_14"] = { Feature_14 };
			lTable["input_15"] = { Feature_15 };
			lTable["input_16"] = { Feature_16 };
			lTable["input_17"] = { Feature_17 };
			lTable["input_18"] = { Feature_18 };
			lTable["input_19"] = { Feature_19 };
			lTable["input_20"] = { Feature_20 };
			lTable["input_21"] = { Feature_21 };
			lTable["input_22"] = { Feature_22 };
			lTable["input_23"] = { Feature_23 };
			lTable["input_24"] = { Feature_24 };
			lTable["input_25"] = { Feature_25 };
			lTable["input_26"] = { Feature_26 };
			lTable["input_27"] = { Feature_27 };
			lTable["input_28"] = { Feature_28 };
			lTable["input_29"] = { Feature_29 };
			lTable["input_30"] = { Feature_30 };
			lTable["input_31"] = { Feature_31 };
			lTable["input_32"] = { Feature_32 };
			lTable["input_33"] = { Feature_33 };
			lTable["input_34"] = { Feature_34 };
			lTable["input_35"] = { Feature_35 };
			lTable["input_36"] = { Feature_36 };
			lTable["input_37"] = { Feature_37 };
			lTable["input_38"] = { Feature_38 };
			lTable["input_39"] = { Feature_39 };
			lTable["input_40"] = { Feature_40 };
			lTable["input_41"] = { Feature_41 };
			lTable["input_42"] = { Feature_42 };
			lTable["input_43"] = { Feature_43 };
			lTable["input_44"] = { Feature_44 };
			lTable["input_45"] = { Feature_45 };
			lTable["input_46"] = { Feature_46 };
			lTable["input_47"] = { Feature_47 };
			lTable["input_48"] = { Feature_48 };
			lTable["input_49"] = { Feature_49 };
			lTable["input_50"] = { Feature_50 };
			lTable["input_51"] = { Feature_51 };
			lTable["input_52"] = { Feature_52 };
			lTable["input_53"] = { Feature_53 };
			lTable["input_54"] = { Feature_54 };
			lTable["input_55"] = { Feature_55 };
			lTable["input_56"] = { Feature_56 };
			lTable["input_57"] = { Feature_57 };
			lTable["input_58"] = { Feature_58 };
			lTable["input_59"] = { Feature_59 };
			lTable["input_60"] = { Feature_60 };
			lTable["input_61"] = { Feature_61 };
			lTable["input_62"] = { Feature_62 };
			lTable["input_63"] = { Feature_63 };
			lTable["input_64"] = { Feature_64 };
			lTable["input_65"] = { Feature_65 };
			lTable["input_66"] = { Feature_66 };
			lTable["input_67"] = { Feature_67 };
			lTable["input_68"] = { Feature_68 };
			lTable["input_69"] = { Feature_69 };
			lTable["input_70"] = { Feature_70 };
			lTable["input_71"] = { Feature_71 };
			lTable["input_72"] = { Feature_72 };
			lTable["input_73"] = { Feature_73 };
			lTable["input_74"] = { Feature_74 };
			lTable["input_75"] = { Feature_75 };
			lTable["input_76"] = { Feature_76 };
			lTable["input_77"] = { Feature_77 };
			lTable["input_78"] = { Feature_78 };
			lTable["input_79"] = { Feature_79 };
			lTable["input_80"] = { Feature_80 };
			lTable["input_81"] = { Feature_81 };
			lTable["input_82"] = { Feature_82 };
			lTable["input_83"] = { Feature_83 };
			lTable["input_84"] = { Feature_84 };
			lTable["input_85"] = { Feature_85 };
			lTable["input_86"] = { Feature_86 };
			lTable["input_87"] = { Feature_87 };
			lTable["input_88"] = { Feature_88 };
			lTable["input_89"] = { Feature_89 };
			lTable["input_90"] = { Feature_90 };
			lTable["input_91"] = { Feature_91 };
			lTable["input_92"] = { Feature_92 };
			lTable["input_93"] = { Feature_93 };
			lTable["input_94"] = { Feature_94 };
			lTable["input_95"] = { Feature_95 };
			lTable["input_96"] = { Feature_96 };
			lTable["input_97"] = { Feature_97 };
			lTable["input_98"] = { Feature_98 };
			lTable["input_99"] = { Feature_99 };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);
	
			return lTable;
		}
	
	} // eof namespace InputLayer
	

	namespace HiddenLayer_1 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63", "input_64", "input_65", "input_66", "input_67", "input_68", "input_69", "input_70", "input_71", "input_72", "input_73", "input_74", "input_75", "input_76", "input_77", "input_78", "input_79", "input_80", "input_81", "input_82", "input_83", "input_84", "input_85", "input_86", "input_87", "input_88", "input_89", "input_90", "input_91", "input_92", "input_93", "input_94", "input_95", "input_96", "input_97", "input_98", "input_99" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9, std::any input_10, std::any input_11, std::any input_12, std::any input_13, std::any input_14, std::any input_15, std::any input_16, std::any input_17, std::any input_18, std::any input_19, std::any input_20, std::any input_21, std::any input_22, std::any input_23, std::any input_24, std::any input_25, std::any input_26, std::any input_27, std::any input_28, std::any input_29, std::any input_30, std::any input_31, std::any input_32, std::any input_33, std::any input_34, std::any input_35, std::any input_36, std::any input_37, std::any input_38, std::any input_39, std::any input_40, std::any input_41, std::any input_42, std::any input_43, std::any input_44, std::any input_45, std::any input_46, std::any input_47, std::any input_48, std::any input_49, std::any input_50, std::any input_51, std::any input_52, std::any input_53, std::any input_54, std::any input_55, std::any input_56, std::any input_57, std::any input_58, std::any input_59, std::any input_60, std::any input_61, std::any input_62, std::any input_63, std::any input_64, std::any input_65, std::any input_66, std::any input_67, std::any input_68, std::any input_69, std::any input_70, std::any input_71, std::any input_72, std::any input_73, std::any input_74, std::any input_75, std::any input_76, std::any input_77, std::any input_78, std::any input_79, std::any input_80, std::any input_81, std::any input_82, std::any input_83, std::any input_84, std::any input_85, std::any input_86, std::any input_87, std::any input_88, std::any input_89, std::any input_90, std::any input_91, std::any input_92, std::any input_93, std::any input_94, std::any input_95, std::any input_96, std::any input_97, std::any input_98, std::any input_99) {
	
			tTable lTable;
	
			double output_1_0_BA = 0.5438105257201123 * input_0 + -0.04852096813602748 * input_1 + -0.14262030878345122 * input_2 + -0.09163054867621323 * input_3 + -0.9978439983020858 * input_4 + -0.14946096957268712 * input_5 + 0.2106106041872253 * input_6 + 0.07345820559207053 * input_7 + 0.03517296477630311 * input_8 + -0.06881778141688116 * input_9 + -0.22549395013626045 * input_10 + 0.2651805108586926 * input_11 + 0.20234323868195045 * input_12 + 0.03594125427767884 * input_13 + 0.2736694510081797 * input_14 + -0.43291778983015844 * input_15 + 0.1952836578345655 * input_16 + -0.2490765318402483 * input_17 + -0.0004050219111810874 * input_18 + 0.4222626129910645 * input_19 + -0.4865142492040198 * input_20 + 0.007786536524936117 * input_21 + -0.16973952606118972 * input_22 + -0.8881016352132673 * input_23 + 0.5333213551922957 * input_24 + -0.1122154347974233 * input_25 + 0.11198230476391421 * input_26 + 0.015461520251421293 * input_27 + -0.33215861025175397 * input_28 + 0.1898177262314868 * input_29 + 0.15815784332889132 * input_30 + -0.014968095482280628 * input_31 + -0.43433054013522693 * input_32 + -0.5657044219973372 * input_33 + -1.1123386953603769 * input_34 + 0.11457459283624666 * input_35 + -0.7404728655386849 * input_36 + 0.3744659430875187 * input_37 + -0.8255021693337888 * input_38 + 0.6066402621660826 * input_39 + 0.1510389188135231 * input_40 + -0.9989115760580599 * input_41 + -0.3327273037233989 * input_42 + 0.09426111267033689 * input_43 + -0.241730468912149 * input_44 + -0.43104680231698256 * input_45 + 0.7436812663571766 * input_46 + 0.07321964151318669 * input_47 + -0.40844726970111545 * input_48 + -0.32210815446437224 * input_49 + -0.21149722257209527 * input_50 + 0.49568661026459626 * input_51 + -0.2862821600476307 * input_52 + -0.14984419763563844 * input_53 + -0.16238564865796104 * input_54 + -0.35668178058529504 * input_55 + 0.45227440591625834 * input_56 + 0.9108017948386904 * input_57 + -0.1835769710949422 * input_58 + 0.4442244451136738 * input_59 + -0.10579897520249369 * input_60 + -0.2180909331428003 * input_61 + 0.2311176498361656 * input_62 + 0.38421689755376914 * input_63 + -0.3529940098092639 * input_64 + -0.014589809149506548 * input_65 + -0.2981639784459134 * input_66 + 0.9698382112762302 * input_67 + -0.21340355216417284 * input_68 + -0.5846150759285624 * input_69 + -0.23022223242512108 * input_70 + -0.47857587000186097 * input_71 + -0.058317050506220935 * input_72 + -0.30537026407878604 * input_73 + 0.7311241967669854 * input_74 + -0.5718132990780626 * input_75 + 0.9235303460472915 * input_76 + -0.6525206369510363 * input_77 + -0.060209593522084943 * input_78 + 0.21798567457264248 * input_79 + 0.28544494479885174 * input_80 + -0.11831011742734979 * input_81 + -0.5753648700947005 * input_82 + 0.1896485426841388 * input_83 + -0.11689014746558983 * input_84 + 0.04455756820197083 * input_85 + -0.6626056100121359 * input_86 + 0.1530030735889838 * input_87 + 0.08995311000097635 * input_88 + -0.04158373296321166 * input_89 + -0.7608349845432079 * input_90 + -0.674798154739282 * input_91 + 0.8340078853045482 * input_92 + -0.46809491485476573 * input_93 + -0.5146419108816316 * input_94 + -0.15985878908259016 * input_95 + -0.4035854893060242 * input_96 + -0.7956484212034964 * input_97 + 0.5215457856154486 * input_98 + -0.05123866781964545 * input_99 + -1.3044503067716609;
	
			double output_1_1_BA = 0.08992955421889433 * input_0 + 0.05093083045747163 * input_1 + -0.10004078177230022 * input_2 + 0.15672910007431054 * input_3 + -0.6625129589801161 * input_4 + 0.12477296738580458 * input_5 + -0.1430003687773763 * input_6 + -0.35538394701114034 * input_7 + 0.34602107907898066 * input_8 + -0.20058052691261563 * input_9 + -0.2667356537875828 * input_10 + -0.10760701011883342 * input_11 + -0.33052177996152543 * input_12 + 0.37773503437858635 * input_13 + 0.034713302447322236 * input_14 + -0.24210471194559807 * input_15 + 0.16322491515311033 * input_16 + -0.11586045751327295 * input_17 + -0.11497783066352468 * input_18 + 0.3119783025627914 * input_19 + -0.08020802536088277 * input_20 + -0.14477287998496968 * input_21 + -0.3119263212046833 * input_22 + -0.23609196088792456 * input_23 + -0.049948421763287155 * input_24 + -0.16254816179518006 * input_25 + 0.026457096449567542 * input_26 + 0.1724522812464922 * input_27 + -0.07259861778563981 * input_28 + -0.28734939612948246 * input_29 + -0.24481582186496934 * input_30 + -0.3607261159940481 * input_31 + -0.0026020574197057997 * input_32 + -0.21786593860514375 * input_33 + -0.346252548473449 * input_34 + 0.06444833070704485 * input_35 + 0.21058239991608035 * input_36 + -0.20375379342186092 * input_37 + 0.28460714961276884 * input_38 + -0.027432872901487607 * input_39 + 0.32258756722878057 * input_40 + -0.045114433880963374 * input_41 + 0.11424134016779583 * input_42 + 0.03269119200601516 * input_43 + 0.03834909793837557 * input_44 + -0.15237718466412783 * input_45 + 0.349964318516878 * input_46 + 0.09398336803150202 * input_47 + -0.20205332814670926 * input_48 + -0.23347979544743497 * input_49 + -0.11008405544024888 * input_50 + -0.2788660981872409 * input_51 + -0.15856836611403138 * input_52 + -0.01808348324856497 * input_53 + 0.11581279605576048 * input_54 + -0.18022415380112933 * input_55 + -0.011067659346852358 * input_56 + 0.8441462379562058 * input_57 + 0.1250777588955717 * input_58 + -0.1185969235987513 * input_59 + -0.5894880050467157 * input_60 + 0.2766724678128072 * input_61 + 0.0028317163152813164 * input_62 + 0.1779154557674484 * input_63 + 0.4278962662758786 * input_64 + 0.22991115574304236 * input_65 + 0.5454087315956466 * input_66 + 0.5144680104251784 * input_67 + 0.028586709837736358 * input_68 + -0.3041460105054548 * input_69 + -0.23554955359281296 * input_70 + 0.4496746146997977 * input_71 + -0.10151038211164531 * input_72 + -0.00481106490488025 * input_73 + 0.03024633439169093 * input_74 + 0.32157278766248076 * input_75 + 0.12099874973058623 * input_76 + -0.20294917338969035 * input_77 + 0.06799501670757038 * input_78 + 0.23459986618547013 * input_79 + 0.10131288533725732 * input_80 + 0.12518218640147097 * input_81 + -0.025444665725704297 * input_82 + 0.12736415944158946 * input_83 + -0.05986677981202263 * input_84 + 0.0006390012740745935 * input_85 + -0.04821315856975446 * input_86 + -0.2937875916765012 * input_87 + -0.2390234360451253 * input_88 + -0.11092433819700422 * input_89 + -0.1863232657838931 * input_90 + -0.39765918099623115 * input_91 + 0.45681367481722884 * input_92 + 0.3235590227184317 * input_93 + -0.33910665372812804 * input_94 + 0.0009555221330790503 * input_95 + 0.002346457892023804 * input_96 + -0.07998250325771537 * input_97 + 0.28892349533727674 * input_98 + -0.23627131145008268 * input_99 + -0.11555282654824253;
	
			double output_1_2_BA = 0.41936444929139616 * input_0 + -0.06484336437946275 * input_1 + 0.02222125197889754 * input_2 + -0.1350235239218748 * input_3 + -1.198484846307146 * input_4 + 0.5717129184398703 * input_5 + -0.07108811754453861 * input_6 + -0.2509854486652052 * input_7 + -0.15604722732366344 * input_8 + 0.4902994119013118 * input_9 + 0.008412074638303332 * input_10 + -0.033946013105126065 * input_11 + 0.32949748625072856 * input_12 + 0.0342659045046938 * input_13 + -0.3234436408878681 * input_14 + -0.4100476104225089 * input_15 + -0.298367137917853 * input_16 + 0.07162411921939768 * input_17 + -0.32319621711347524 * input_18 + -0.36569399022590077 * input_19 + 0.06614820586356106 * input_20 + 0.08448025284815745 * input_21 + -0.2940273225997228 * input_22 + 0.09925489345019956 * input_23 + -0.0686865674389167 * input_24 + 0.032906366925131346 * input_25 + -0.027595425467033086 * input_26 + 0.4569946504618169 * input_27 + -0.13420960069144572 * input_28 + 0.08504952625277264 * input_29 + -0.23494201817893828 * input_30 + -0.20808559091872186 * input_31 + 0.02041069685280442 * input_32 + -0.16456540959677346 * input_33 + -0.07366010148495666 * input_34 + -0.21133827759731438 * input_35 + -0.14114880597875334 * input_36 + 0.436501988344295 * input_37 + -0.10849772540485093 * input_38 + -0.4796648799230618 * input_39 + 0.04251026376739966 * input_40 + -0.2002365011324379 * input_41 + -0.45294832143480307 * input_42 + 0.06286055563084192 * input_43 + -0.6082817775506988 * input_44 + -0.4177858949882798 * input_45 + 0.36253134938888815 * input_46 + 0.07060789308126889 * input_47 + -0.6070585329739638 * input_48 + -0.21914874540223217 * input_49 + 0.2329990978375608 * input_50 + 0.015165254649098923 * input_51 + 0.07794153873623548 * input_52 + 0.08341895173993577 * input_53 + -0.016334239320839626 * input_54 + -0.1806804404029601 * input_55 + 0.005690846637209137 * input_56 + 1.1530397398922856 * input_57 + -0.19849507345223316 * input_58 + 0.17584745856455827 * input_59 + -0.3553647905026048 * input_60 + 0.12553252834410042 * input_61 + -0.3040375929176348 * input_62 + 0.36225006330654613 * input_63 + -0.008517267614778334 * input_64 + 0.11205126315750706 * input_65 + -0.24076922609030985 * input_66 + 0.1221144604475135 * input_67 + -0.6531832035166121 * input_68 + 0.023396867588991156 * input_69 + -0.023607609152372793 * input_70 + -0.4212539622658451 * input_71 + -0.09748051649009491 * input_72 + -0.4036527624847928 * input_73 + 0.3965798315465755 * input_74 + -0.018973644466931238 * input_75 + 0.5574683122802141 * input_76 + -0.2295601408853926 * input_77 + -0.17211181763769548 * input_78 + -0.1302393275635886 * input_79 + 0.004613096676727884 * input_80 + 0.3089640960542127 * input_81 + 0.6762277551939185 * input_82 + -0.00497159817607522 * input_83 + 0.15264643828621632 * input_84 + -0.1827358105782376 * input_85 + -0.306293450816861 * input_86 + 0.024381396284206047 * input_87 + 0.12597893543643818 * input_88 + -0.38860428108993234 * input_89 + -0.2275777054364618 * input_90 + -0.013858592895844624 * input_91 + 0.08841882457126725 * input_92 + -0.5756336592931746 * input_93 + -0.1093066535091937 * input_94 + -0.3106982704551491 * input_95 + -0.25220869569485627 * input_96 + 0.049731188978735526 * input_97 + 0.1539782348680815 * input_98 + 0.005408193625376142 * input_99 + 0.5944271114661994;
	
			lTable["output_1_0"] = { relu(output_1_0_BA) };
			lTable["output_1_1"] = { relu(output_1_1_BA) };
			lTable["output_1_2"] = { relu(output_1_2_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0], iTable.at("input_10")[0], iTable.at("input_11")[0], iTable.at("input_12")[0], iTable.at("input_13")[0], iTable.at("input_14")[0], iTable.at("input_15")[0], iTable.at("input_16")[0], iTable.at("input_17")[0], iTable.at("input_18")[0], iTable.at("input_19")[0], iTable.at("input_20")[0], iTable.at("input_21")[0], iTable.at("input_22")[0], iTable.at("input_23")[0], iTable.at("input_24")[0], iTable.at("input_25")[0], iTable.at("input_26")[0], iTable.at("input_27")[0], iTable.at("input_28")[0], iTable.at("input_29")[0], iTable.at("input_30")[0], iTable.at("input_31")[0], iTable.at("input_32")[0], iTable.at("input_33")[0], iTable.at("input_34")[0], iTable.at("input_35")[0], iTable.at("input_36")[0], iTable.at("input_37")[0], iTable.at("input_38")[0], iTable.at("input_39")[0], iTable.at("input_40")[0], iTable.at("input_41")[0], iTable.at("input_42")[0], iTable.at("input_43")[0], iTable.at("input_44")[0], iTable.at("input_45")[0], iTable.at("input_46")[0], iTable.at("input_47")[0], iTable.at("input_48")[0], iTable.at("input_49")[0], iTable.at("input_50")[0], iTable.at("input_51")[0], iTable.at("input_52")[0], iTable.at("input_53")[0], iTable.at("input_54")[0], iTable.at("input_55")[0], iTable.at("input_56")[0], iTable.at("input_57")[0], iTable.at("input_58")[0], iTable.at("input_59")[0], iTable.at("input_60")[0], iTable.at("input_61")[0], iTable.at("input_62")[0], iTable.at("input_63")[0], iTable.at("input_64")[0], iTable.at("input_65")[0], iTable.at("input_66")[0], iTable.at("input_67")[0], iTable.at("input_68")[0], iTable.at("input_69")[0], iTable.at("input_70")[0], iTable.at("input_71")[0], iTable.at("input_72")[0], iTable.at("input_73")[0], iTable.at("input_74")[0], iTable.at("input_75")[0], iTable.at("input_76")[0], iTable.at("input_77")[0], iTable.at("input_78")[0], iTable.at("input_79")[0], iTable.at("input_80")[0], iTable.at("input_81")[0], iTable.at("input_82")[0], iTable.at("input_83")[0], iTable.at("input_84")[0], iTable.at("input_85")[0], iTable.at("input_86")[0], iTable.at("input_87")[0], iTable.at("input_88")[0], iTable.at("input_89")[0], iTable.at("input_90")[0], iTable.at("input_91")[0], iTable.at("input_92")[0], iTable.at("input_93")[0], iTable.at("input_94")[0], iTable.at("input_95")[0], iTable.at("input_96")[0], iTable.at("input_97")[0], iTable.at("input_98")[0], iTable.at("input_99")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_1
	

	namespace HiddenLayer_2 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
	
			tTable lTable;
	
			double output_2_0_BA = 0.5148409413510785 * output_1_0 + 0.7209597750564063 * output_1_1 + 1.39692683451513 * output_1_2 + -0.41953977565711764;
	
			double output_2_1_BA = -0.1939191505117363 * output_1_0 + -0.09655908854947678 * output_1_1 + 0.192592267900718 * output_1_2 + 2.784532277273207;
	
			double output_2_2_BA = -0.3797843939919539 * output_1_0 + 1.3297100023531538 * output_1_1 + 1.0662644521929492 * output_1_2 + -0.20899679703829357;
	
			double output_2_3_BA = -0.4674165224109332 * output_1_0 + 0.22611398803993674 * output_1_1 + -0.601927047568977 * output_1_2 + 0.8638999714879785;
	
			double output_2_4_BA = -0.6091648739080905 * output_1_0 + -0.377555733501898 * output_1_1 + -0.6728007362307988 * output_1_2 + -0.01807831622698608;
	
			lTable["output_2_0"] = { relu(output_2_0_BA) };
			lTable["output_2_1"] = { relu(output_2_1_BA) };
			lTable["output_2_2"] = { relu(output_2_2_BA) };
			lTable["output_2_3"] = { relu(output_2_3_BA) };
			lTable["output_2_4"] = { relu(output_2_4_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_2
	

	namespace OutputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_3_0" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
	
			tTable lTable;
	
			double output_3_0_BA = 1.5273833418639555 * output_2_0 + -1.0548107535078548 * output_2_1 + 1.4796920177759898 * output_2_2 + -0.06512358762297799 * output_2_3 + -0.2733934821682171 * output_2_4 + -0.7434028060964185;
	
			lTable["output_3_0"] = { logistic(output_3_0_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
	
			return lTable;
		}
	
	} // eof namespace OutputLayer
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		auto lClasses = get_classes();

		tTable lTable_InputLayer = InputLayer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63, Feature_64, Feature_65, Feature_66, Feature_67, Feature_68, Feature_69, Feature_70, Feature_71, Feature_72, Feature_73, Feature_74, Feature_75, Feature_76, Feature_77, Feature_78, Feature_79, Feature_80, Feature_81, Feature_82, Feature_83, Feature_84, Feature_85, Feature_86, Feature_87, Feature_88, Feature_89, Feature_90, Feature_91, Feature_92, Feature_93, Feature_94, Feature_95, Feature_96, Feature_97, Feature_98, Feature_99);

		tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );

		tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );

		tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );


		tTable lTable;

		lTable["Score"] = { 
			std::any(),
			std::any() 
		} ;
		lTable["Proba"] = { 
			1.0 - lTable_OutputLayer[ "output_3_0" ][0],
			lTable_OutputLayer[ "output_3_0" ][0] 
		} ;
		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_100.csv");
	return 0;
}
