// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_FourClass_10.exe ml2cpp-demo_MLPClassifier_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace InputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["input_0"] = { Feature_0 };
			lTable["input_1"] = { Feature_1 };
			lTable["input_2"] = { Feature_2 };
			lTable["input_3"] = { Feature_3 };
			lTable["input_4"] = { Feature_4 };
			lTable["input_5"] = { Feature_5 };
			lTable["input_6"] = { Feature_6 };
			lTable["input_7"] = { Feature_7 };
			lTable["input_8"] = { Feature_8 };
			lTable["input_9"] = { Feature_9 };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace InputLayer
	

	namespace HiddenLayer_1 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9) {
	
			tTable lTable;
	
			double output_1_0_BA = -5.974715596617639 * input_0 + -3.9057141447871975 * input_1 + -6.110068063987786 * input_2 + -5.95286560901928 * input_3 + -1.7994771699712366 * input_4 + -4.791610147312287 * input_5 + 1.328608259539312 * input_6 + 3.9317797601262714 * input_7 + 0.18917189382794697 * input_8 + 1.96822816881122 * input_9 + -1.4824260259273967;
	
			double output_1_1_BA = -6.477977932938888 * input_0 + 2.5265812081733547 * input_1 + 0.47509273336572433 * input_2 + 2.690834469039286 * input_3 + -0.7952456089065028 * input_4 + 0.7245328513073197 * input_5 + -0.9841535432720707 * input_6 + -2.310320141487956 * input_7 + 2.653405914212289 * input_8 + 1.1127710877993837 * input_9 + -1.6434033732167828;
	
			double output_1_2_BA = -2.0846499901737205 * input_0 + 0.7782308398024276 * input_1 + -3.486027880544682 * input_2 + -2.16534698707086 * input_3 + -6.4016183170494125 * input_4 + 0.23312622213922007 * input_5 + 1.3720024253725498 * input_6 + -2.8273233696989477 * input_7 + -1.8757474549486475 * input_8 + -0.2897332346613092 * input_9 + -1.7481934776848391;
	
			lTable["output_1_0"] = { relu(output_1_0_BA) };
			lTable["output_1_1"] = { relu(output_1_1_BA) };
			lTable["output_1_2"] = { relu(output_1_2_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_1
	

	namespace HiddenLayer_2 {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
	
			tTable lTable;
	
			double output_2_0_BA = 1.1889081871433471 * output_1_0 + 0.9058459856174662 * output_1_1 + 2.686269472586784 * output_1_2 + -6.589910689146043;
	
			double output_2_1_BA = -2.4821657692204555 * output_1_0 + 2.2220212236161934 * output_1_1 + -2.481667319984134 * output_1_2 + 0.48919740191005207;
	
			double output_2_2_BA = 8.187545097097878 * output_1_0 + -2.413965444702459 * output_1_1 + 1.6893239409499106 * output_1_2 + -3.2371933507209714;
	
			double output_2_3_BA = -0.008295110118701704 * output_1_0 + -0.5046798434840525 * output_1_1 + -0.40658107909554564 * output_1_2 + -0.812200266587047;
	
			double output_2_4_BA = -4.884214759268689 * output_1_0 + 2.9520042884209454 * output_1_1 + -1.5788505211615782 * output_1_2 + 1.1169405101136067;
	
			lTable["output_2_0"] = { relu(output_2_0_BA) };
			lTable["output_2_1"] = { relu(output_2_1_BA) };
			lTable["output_2_2"] = { relu(output_2_2_BA) };
			lTable["output_2_3"] = { relu(output_2_3_BA) };
			lTable["output_2_4"] = { relu(output_2_4_BA) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
	
			return lTable;
		}
	
	} // eof namespace HiddenLayer_2
	

	namespace OutputLayer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Score_0", "Score_1", "Score_2", "Score_3" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
	
			tTable lTable;
	
			double output_3_0_BA = -3.6817528401903723 * output_2_0 + -2.6597857276981993 * output_2_1 + 2.8862664060701313 * output_2_2 + 0.3751518902313965 * output_2_3 + -2.6932138994210124 * output_2_4 + 8.13328297325332;
	
			double output_3_1_BA = 3.7295515575813187 * output_2_0 + 2.1855373161774 * output_2_1 + -5.068011527433817 * output_2_2 + 0.410605994222834 * output_2_3 + -0.3253378812576398 * output_2_4 + 1.8204935267879077;
	
			double output_3_2_BA = -3.536420846654927 * output_2_0 + 1.1705300657405846 * output_2_1 + 2.9486094669295033 * output_2_2 + -0.6015897292373661 * output_2_3 + 0.8614365856804924 * output_2_4 + -5.4015087453173845;
	
			double output_3_3_BA = 3.4604213382454057 * output_2_0 + -1.2804795499905632 * output_2_1 + -1.2355349966451543 * output_2_2 + -0.8139954619384472 * output_2_3 + 2.400634880447001 * output_2_4 + -3.527518626483805;
	
			lTable["Score_0"] = { output_3_0_BA };
			lTable["Score_1"] = { output_3_1_BA };
			lTable["Score_2"] = { output_3_2_BA };
			lTable["Score_3"] = { output_3_3_BA };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
	
			return lTable;
		}
	
	} // eof namespace OutputLayer
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_InputLayer = InputLayer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );

		tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );

		tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );

		tTable lScores = tTable();

		lScores["Score"] = { lTable_OutputLayer[ "Score_0" ][0], lTable_OutputLayer[ "Score_1" ][0], lTable_OutputLayer[ "Score_2" ][0], lTable_OutputLayer[ "Score_3" ][0] };

		tTable lSoftMaxTable = soft_max( lScores );


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
