// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : CalibratedClassifierCV_isotonic_Pipeline
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_CalibratedClassifierCV_isotonic_Pipeline_digits.exe ml2cpp-demo_CalibratedClassifierCV_isotonic_Pipeline_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( 0.0 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.2950591510090466 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( 5.104384133611691 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( 11.791927627000696 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 11.84829505915101 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( 5.823242867084203 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( 1.394572025052192 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.13430758524704245 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( 0.0055671537926235215 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( 1.977035490605428 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( 10.362560890744607 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 12.03061934585943 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 10.271398747390396 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( 8.121781489213639 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 1.8921363952679193 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( 0.11760612386917188 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.0020876826722338203 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( 2.5427974947807934 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 9.935281837160751 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( 7.099512874043145 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 7.132915796798887 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( 7.81419624217119 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( 1.8434237995824634 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.05775922059846903 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 2.4808629088378567 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( 9.143354210160055 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 8.960334029227557 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( 10.03688239387613 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 7.5949895615866385 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 2.337508698677801 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.0027835768963117608 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( 0.0 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( 2.3319415448851775 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 7.608907446068198 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( 9.028531663187195 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( 10.270006958942242 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 8.806541405706332 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( 2.8754349338900487 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.0 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.010438413361169102 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 1.5755045233124565 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 6.858733472512178 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 7.258872651356993 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( 7.710508002783577 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 8.281141266527488 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 3.432150313152401 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( 0.031315240083507306 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( 0.009046624913013222 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( 0.708420320111343 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( 7.492693110647181 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 9.529575504523313 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( 9.541405706332638 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 8.754349338900488 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 3.7397355601948505 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( 0.21920668058455114 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( 0.0006958942240779402 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( 0.26374391092553934 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 5.474599860821155 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( 12.097425191370911 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( 11.8580375782881 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( 6.716771050800278 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 2.0869867780097424 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.3862212943632568 ) : ( Feature_63)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - 0.0 ) / 1.0 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.2950591510090466 ) / 0.886335971513945 ) };
			lTable["scaler_4"] = { ( ( impter_4 - 5.104384133611691 ) / 4.714562522364591 ) };
			lTable["scaler_5"] = { ( ( impter_5 - 11.791927627000696 ) / 4.242705177561994 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 11.84829505915101 ) / 4.298607850485783 ) };
			lTable["scaler_7"] = { ( ( impter_7 - 5.823242867084203 ) / 5.664052593352563 ) };
			lTable["scaler_8"] = { ( ( impter_8 - 1.394572025052192 ) / 3.3672537498889787 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.13430758524704245 ) / 1.0738488961060884 ) };
			lTable["scaler_10"] = { ( ( impter_10 - 0.0055671537926235215 ) / 0.09121259500521199 ) };
			lTable["scaler_11"] = { ( ( impter_11 - 1.977035490605428 ) / 3.1765759513448373 ) };
			lTable["scaler_12"] = { ( ( impter_12 - 10.362560890744607 ) / 5.427455768043861 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 12.03061934585943 ) / 3.9240043126958595 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 10.271398747390396 ) / 4.751306782008032 ) };
			lTable["scaler_15"] = { ( ( impter_15 - 8.121781489213639 ) / 6.055742470420089 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 1.8921363952679193 ) / 3.6358496015605493 ) };
			lTable["scaler_17"] = { ( ( impter_17 - 0.11760612386917188 ) / 0.8809135848407257 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.0020876826722338203 ) / 0.04564344699180706 ) };
			lTable["scaler_19"] = { ( ( impter_19 - 2.5427974947807934 ) / 3.535939148296097 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 9.935281837160751 ) / 5.674233427535142 ) };
			lTable["scaler_21"] = { ( ( impter_21 - 7.099512874043145 ) / 5.828968622118506 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 7.132915796798887 ) / 6.164166380758013 ) };
			lTable["scaler_23"] = { ( ( impter_23 - 7.81419624217119 ) / 6.237214641441282 ) };
			lTable["scaler_24"] = { ( ( impter_24 - 1.8434237995824634 ) / 3.3552968495259408 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.05775922059846903 ) / 0.47057168084472595 ) };
			lTable["scaler_26"] = { ( ( impter_26 - 0.0006958942240779402 ) / 0.0263706267522565 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 2.4808629088378567 ) / 3.1579531140532993 ) };
			lTable["scaler_28"] = { ( ( impter_28 - 9.143354210160055 ) / 6.211448620771221 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 8.960334029227557 ) / 5.872499336895779 ) };
			lTable["scaler_30"] = { ( ( impter_30 - 10.03688239387613 ) / 6.131194138822921 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 7.5949895615866385 ) / 5.883009512311774 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 2.337508698677801 ) / 3.7555163121005397 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.0027835768963117608 ) / 0.05268613286220741 ) };
			lTable["scaler_34"] = { ( ( impter_34 - 0.0 ) / 1.0 ) };
			lTable["scaler_35"] = { ( ( impter_35 - 2.3319415448851775 ) / 3.520361676701363 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 7.608907446068198 ) / 6.337427127154217 ) };
			lTable["scaler_37"] = { ( ( impter_37 - 9.028531663187195 ) / 6.255398792908601 ) };
			lTable["scaler_38"] = { ( ( impter_38 - 10.270006958942242 ) / 5.918328236602452 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 8.806541405706332 ) / 5.862505948752236 ) };
			lTable["scaler_40"] = { ( ( impter_40 - 2.8754349338900487 ) / 3.521551388880749 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.0 ) / 1.0 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.010438413361169102 ) / 0.16012222149778146 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 1.5755045233124565 ) / 3.0148158575591246 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 6.858733472512178 ) / 6.5422093407655435 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 7.258872651356993 ) / 6.490917554434448 ) };
			lTable["scaler_46"] = { ( ( impter_46 - 7.710508002783577 ) / 6.292873620677289 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 8.281141266527488 ) / 5.713309549149251 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 3.432150313152401 ) / 4.326500259143386 ) };
			lTable["scaler_49"] = { ( ( impter_49 - 0.031315240083507306 ) / 0.33325414598330405 ) };
			lTable["scaler_50"] = { ( ( impter_50 - 0.009046624913013222 ) / 0.22827664222063312 ) };
			lTable["scaler_51"] = { ( ( impter_51 - 0.708420320111343 ) / 1.7630768232183456 ) };
			lTable["scaler_52"] = { ( ( impter_52 - 7.492693110647181 ) / 5.6747357473393345 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 9.529575504523313 ) / 5.230790022511772 ) };
			lTable["scaler_54"] = { ( ( impter_54 - 9.541405706332638 ) / 5.2515555146947035 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 8.754349338900488 ) / 6.0343648977583975 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 3.7397355601948505 ) / 4.953834269857758 ) };
			lTable["scaler_57"] = { ( ( impter_57 - 0.21920668058455114 ) / 1.0257471420649142 ) };
			lTable["scaler_58"] = { ( ( impter_58 - 0.0006958942240779402 ) / 0.02637062675225659 ) };
			lTable["scaler_59"] = { ( ( impter_59 - 0.26374391092553934 ) / 0.893431165157604 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 5.474599860821155 ) / 5.06659361292149 ) };
			lTable["scaler_61"] = { ( ( impter_61 - 12.097425191370911 ) / 4.359965306758356 ) };
			lTable["scaler_62"] = { ( ( impter_62 - 11.8580375782881 ) / 4.889242282258171 ) };
			lTable["scaler_63"] = { ( ( impter_63 - 6.716771050800278 ) / 5.87255780345831 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 2.0869867780097424 ) / 4.12826085471658 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.3862212943632568 ) / 1.915153500596726 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	
			return lClasses;
		}
	
		namespace BestEstimator_0 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.3333333333333333, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 11 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 17 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.6774193548387096, 0.06451612903225806, 0.03225806451612903, 0.16129032258064516, 0.0, 0.06451612903225806, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.02631578947368421, 0.5789473684210527, 0.18421052631578946, 0.0, 0.02631578947368421, 0.0, 0.07894736842105263, 0.07894736842105263, 0.02631578947368421 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 0.0, 0.011111111111111112, 0.0, 0.9888888888888889, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 37 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.7, 0.0, 0.0, 0.0, 0.1, 0.2, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.01020408163265306, 0.9897959183673469, 0.0, 0.0, 0.0 }} ,
					{ 41 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 45 ,  {0.0, 0.018691588785046728, 0.0, 0.018691588785046728, 0.04672897196261682, 0.0, 0.0, 0.794392523364486, 0.037383177570093455, 0.08411214953271028 }} ,
					{ 46 ,  {0.0, 0.1875, 0.25, 0.25, 0.0, 0.0625, 0.0, 0.0, 0.125, 0.125 }} ,
					{ 48 ,  {0.0, 0.05917159763313609, 0.011834319526627219, 0.4970414201183432, 0.011834319526627219, 0.023668639053254437, 0.0, 0.0, 0.0650887573964497, 0.33136094674556216 }} ,
					{ 49 ,  {0.01195219123505976, 0.24701195219123506, 0.2868525896414343, 0.0398406374501992, 0.035856573705179286, 0.0, 0.00398406374501992, 0.03187250996015936, 0.3147410358565737, 0.027888446215139442 }} ,
					{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 53 ,  {0.0, 0.014084507042253521, 0.0, 0.0, 0.971830985915493, 0.0, 0.014084507042253521, 0.0, 0.0, 0.0 }} ,
					{ 54 ,  {0.125, 0.375, 0.0, 0.0, 0.125, 0.0, 0.125, 0.25, 0.0, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_30 <= -1.2292682528495789) ? ( (scaler_23 <= -1.172670304775238) ? ( (scaler_7 <= 0.7374149858951569) ? ( (scaler_43 <= 1.3017364144325256) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_64 <= 1.3112090826034546) ? ( (scaler_52 <= -0.8798106759786606) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (scaler_23 <= 0.2702815104275942) ? ( (scaler_7 <= -0.5867252796888351) ? ( (scaler_44 <= -0.20768722891807556) ? ( 16 ) : ( 17 ) ) : ( (scaler_30 <= -0.5768668055534363) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_35 <= -0.23632274568080902) ? ( 22 ) : ( (scaler_61 <= 0.3216940313577652) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.250873439013958) ? ( (scaler_7 <= -0.5867252945899963) ? ( (scaler_11 <= -0.4649772346019745) ? ( 30 ) : ( 31 ) ) : ( (scaler_4 <= -0.9766302406787872) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_56 <= -0.653985470533371) ? ( (scaler_61 <= -0.13702521286904812) ? ( 37 ) : ( 38 ) ) : ( (scaler_11 <= 0.32203370332717896) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_35 <= 0.8999241292476654) ? ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_55 <= -0.7050202339887619) ? ( 45 ) : ( 46 ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_28 <= -0.023079030215740204) ? ( 51 ) : ( (scaler_15 <= 0.8881187438964844) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			typedef std::vector<tAnyVector> tIsotonicData;
			std::map<std::any, tIsotonicData> lIsotonicData_0 = {
						 // {xmin, xmax, ymin, ymax, coeff}
				{ 0 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.3333333333333333, 0.0, 0.0, 0.0 },
						{ 0.3333333333333333, 1.0, 0.0, 0.9722222222222222, 1.4583333333333333 },
						{ 1.0, 1.79769313486231e+308, 0.9722222222222222, 0.9722222222222222, 0.0 },
					} },
				{ 1 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.014084507042253521, 0.0, 0.046875, 3.328125 },
						{ 0.014084507042253521, 0.05917159763313609, 0.046875, 0.046875, 0.0 },
						{ 0.05917159763313609, 0.1875, 0.046875, 0.25287356321839083, 1.605245288018815 },
						{ 0.1875, 0.24701195219123506, 0.25287356321839083, 0.25287356321839083, 0.0 },
						{ 0.24701195219123506, 0.375, 0.25287356321839083, 0.4, 1.1495326266827677 },
						{ 0.375, 0.6774193548387096, 0.4, 0.6363636363636364, 0.7815757575757576 },
						{ 0.6774193548387096, 0.7, 0.6363636363636364, 0.6363636363636364, 0.0 },
						{ 0.7, 1.79769313486231e+308, 0.6363636363636364, 0.6363636363636364, 0.0 },
					} },
				{ 2 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.011834319526627219, 0.0, 0.029411764705882353, 2.485294117647059 },
						{ 0.011834319526627219, 0.25, 0.029411764705882353, 0.029411764705882353, 0.0 },
						{ 0.25, 0.2868525896414343, 0.029411764705882353, 0.32558139534883723, 8.036602950419635 },
						{ 0.2868525896414343, 0.3333333333333333, 0.32558139534883723, 0.32558139534883723, 0.0 },
						{ 0.3333333333333333, 0.5789473684210527, 0.32558139534883723, 0.7142857142857143, 1.582581869957285 },
						{ 0.5789473684210527, 1.0, 0.7142857142857143, 1.0, 0.6785714285714286 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 3 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.006134969325153374, 0.006134969325153374, 0.0 },
						{ 0.0, 0.011111111111111112, 0.006134969325153374, 0.006134969325153374, 0.0 },
						{ 0.011111111111111112, 0.018691588785046728, 0.006134969325153374, 0.022900763358778626, 2.2117068019700166 },
						{ 0.018691588785046728, 0.0398406374501992, 0.022900763358778626, 0.022900763358778626, 0.0 },
						{ 0.0398406374501992, 0.18421052631578946, 0.022900763358778626, 0.2222222222222222, 1.38063041005049 },
						{ 0.18421052631578946, 0.25, 0.2222222222222222, 0.2222222222222222, 0.0 },
						{ 0.25, 0.4970414201183432, 0.2222222222222222, 0.5263157894736842, 1.230941625520888 },
						{ 0.4970414201183432, 1.79769313486231e+308, 0.5263157894736842, 0.5263157894736842, 0.0 },
					} },
				{ 4 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.007518796992481203, 0.007518796992481203, 0.0 },
						{ 0.0, 0.011834319526627219, 0.007518796992481203, 0.017543859649122806, 0.8471177944862155 },
						{ 0.011834319526627219, 0.035856573705179286, 0.017543859649122806, 0.05737704918032787, 1.6581786719570042 },
						{ 0.035856573705179286, 0.04672897196261682, 0.05737704918032787, 0.05737704918032787, 0.0 },
						{ 0.04672897196261682, 0.125, 0.05737704918032787, 0.06666666666666667, 0.11868526221352253 },
						{ 0.125, 0.6666666666666666, 0.06666666666666667, 0.06666666666666667, 0.0 },
						{ 0.6666666666666666, 0.971830985915493, 0.06666666666666667, 0.8484848484848485, 2.5619580419580417 },
						{ 0.971830985915493, 1.0, 0.8484848484848485, 0.8484848484848485, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.8484848484848485, 0.8484848484848485, 0.0 },
					} },
				{ 5 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.015197568389057751, 0.015197568389057751, 0.0 },
						{ 0.0, 0.1, 0.015197568389057751, 0.015197568389057751, 0.0 },
						{ 0.1, 0.9888888888888889, 0.015197568389057751, 1.0, 1.10790273556231 },
						{ 0.9888888888888889, 1.0, 1.0, 1.0, 0.0 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 6 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.00641025641025641, 0.00641025641025641, 0.0 },
						{ 0.0, 0.014084507042253521, 0.00641025641025641, 0.00641025641025641, 0.0 },
						{ 0.014084507042253521, 0.06451612903225806, 0.00641025641025641, 0.0625, 1.1121939246939248 },
						{ 0.06451612903225806, 0.2, 0.0625, 0.0625, 0.0 },
						{ 0.2, 0.3333333333333333, 0.0625, 1.0, 7.031250000000002 },
						{ 0.3333333333333333, 0.9897959183673469, 1.0, 1.0, 0.0 },
						{ 0.9897959183673469, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 7 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004524886877828055, 0.004524886877828055, 0.0 },
						{ 0.0, 0.03187250996015936, 0.004524886877828055, 0.01020408163265306, 0.17818473543263455 },
						{ 0.03187250996015936, 0.3333333333333333, 0.01020408163265306, 0.01020408163265306, 0.0 },
						{ 0.3333333333333333, 0.794392523364486, 0.01020408163265306, 0.7837837837837838, 1.6778316512872498 },
						{ 0.794392523364486, 1.0, 0.7837837837837838, 1.0, 1.0515970515970516 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 8 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.01744186046511628, 0.01744186046511628, 0.0 },
						{ 0.0, 0.037383177570093455, 0.01744186046511628, 0.038834951456310676, 0.5722651840144501 },
						{ 0.037383177570093455, 0.125, 0.038834951456310676, 0.038834951456310676, 0.0 },
						{ 0.125, 0.3147410358565737, 0.038834951456310676, 0.3176470588235294, 1.4694349385652894 },
						{ 0.3147410358565737, 1.79769313486231e+308, 0.3176470588235294, 0.3176470588235294, 0.0 },
					} },
				{ 9 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.027888446215139442, 0.0, 0.0, 0.0 },
						{ 0.027888446215139442, 0.08411214953271028, 0.0, 0.05405405405405406, 0.9614104170395563 },
						{ 0.08411214953271028, 0.125, 0.05405405405405406, 0.3559322033898305, 7.383077023754989 },
						{ 0.125, 0.33136094674556216, 0.3559322033898305, 0.3559322033898305, 0.0 },
						{ 0.33136094674556216, 1.0, 0.3559322033898305, 0.8235294117647058, 0.699326798365964 },
						{ 1.0, 1.79769313486231e+308, 0.8235294117647058, 0.8235294117647058, 0.0 },
					} },
			};
			
			std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
				std::any lResult = iData[iData.size() - 1][3];
				for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
					if(iX <= iData[lIndex][1]) {
						return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
					}
				}
				return(lResult);
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					interpolate_isotonic( lIsotonicData_0 [ 0 ] , coalesce( std::any() , lNodeValue [ 0 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 2 ] , coalesce( std::any() , lNodeValue [ 2 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 3 ] , coalesce( std::any() , lNodeValue [ 3 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 4 ] , coalesce( std::any() , lNodeValue [ 4 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 5 ] , coalesce( std::any() , lNodeValue [ 5 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 6 ] , coalesce( std::any() , lNodeValue [ 6 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 7 ] , coalesce( std::any() , lNodeValue [ 7 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 8 ] , coalesce( std::any() , lNodeValue [ 8 ] )),
					interpolate_isotonic( lIsotonicData_0 [ 9 ] , coalesce( std::any() , lNodeValue [ 9 ] )) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_0
		
	
		namespace BestEstimator_1 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 5 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 16 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 20 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 23 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 28 ,  {0.0, 0.0, 0.5641025641025641, 0.20512820512820512, 0.0, 0.05128205128205128, 0.0, 0.10256410256410256, 0.05128205128205128, 0.02564102564102564 }} ,
					{ 29 ,  {0.0, 0.7142857142857143, 0.07142857142857142, 0.07142857142857142, 0.07142857142857142, 0.0, 0.07142857142857142, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.3333333333333333, 0.0, 0.0 }} ,
					{ 32 ,  {0.0, 0.0, 0.0, 0.0, 0.011627906976744186, 0.9883720930232558, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 35 ,  {0.0, 0.7777777777777778, 0.2222222222222222, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.0, 0.0, 0.0, 0.5882352941176471, 0.11764705882352941, 0.29411764705882354, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 39 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 0.0, 0.013333333333333334, 0.05333333333333334, 0.013333333333333334, 0.0, 0.0, 0.88, 0.04, 0.0 }} ,
					{ 44 ,  {0.0, 0.05263157894736842, 0.0, 0.0, 0.15789473684210525, 0.05263157894736842, 0.0, 0.2631578947368421, 0.0, 0.47368421052631576 }} ,
					{ 46 ,  {0.0, 0.07017543859649122, 0.023391812865497075, 0.4853801169590643, 0.0, 0.017543859649122806, 0.0, 0.011695906432748537, 0.06432748538011696, 0.32748538011695905 }} ,
					{ 47 ,  {0.008333333333333333, 0.23333333333333334, 0.30416666666666664, 0.041666666666666664, 0.0125, 0.0, 0.004166666666666667, 0.05, 0.3333333333333333, 0.0125 }} ,
					{ 50 ,  {0.0, 0.03571428571428571, 0.0, 0.0, 0.9642857142857143, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 51 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.25, 0.5, 0.0, 0.0 }} ,
					{ 53 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 54 ,  {0.0, 0.5238095238095238, 0.047619047619047616, 0.0, 0.23809523809523808, 0.0, 0.0, 0.047619047619047616, 0.14285714285714285, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_44 <= -0.1312604621052742) ? ( (scaler_23 <= -0.13053843192756176) ? ( (scaler_24 <= 0.6427378356456757) ? ( 4 ) : ( 5 ) ) : ( (scaler_15 <= -1.0934714376926422) ? ( 7 ) : ( (scaler_11 <= 2.3682621121406555) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_15 <= -1.0934714078903198) ? ( (scaler_56 <= -0.25025779008865356) ? ( 13 ) : ( (scaler_59 <= 1.9433573782444) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_39 <= -1.3316048383712769) ? ( (scaler_30 <= -1.2292682528495789) ? ( 19 ) : ( 20 ) ) : ( (scaler_28 <= -1.1500303447246552) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.250873439013958) ? ( (scaler_7 <= -0.6750012934207916) ? ( (scaler_21 <= 0.9264910221099854) ? ( 28 ) : ( 29 ) ) : ( (scaler_20 <= -0.9578883051872253) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_56 <= 0.05253797024488449) ? ( (scaler_47 <= -1.1869024634361267) ? ( 35 ) : ( 36 ) ) : ( (scaler_60 <= 0.6958126723766327) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( (scaler_62 <= -1.3004136681556702) ? ( (scaler_28 <= 0.5403966009616852) ? ( 43 ) : ( 44 ) ) : ( (scaler_45 <= -0.8872201144695282) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_15 <= 0.2275886908173561) ? ( (scaler_4 <= -0.022140786051750183) ? ( 50 ) : ( 51 ) ) : ( (scaler_21 <= -0.703299880027771) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			typedef std::vector<tAnyVector> tIsotonicData;
			std::map<std::any, tIsotonicData> lIsotonicData_1 = {
						 // {xmin, xmax, ymin, ymax, coeff}
				{ 0 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.009230769230769232, 0.009230769230769232, 0.0 },
						{ 0.0, 0.008333333333333333, 0.009230769230769232, 0.009230769230769232, 0.0 },
						{ 0.008333333333333333, 1.0, 0.009230769230769232, 0.9411764705882353, 0.9397771778394615 },
						{ 1.0, 1.79769313486231e+308, 0.9411764705882353, 0.9411764705882353, 0.0 },
					} },
				{ 1 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.016216216216216217, 0.016216216216216217, 0.0 },
						{ 0.0, 0.03571428571428571, 0.016216216216216217, 0.016216216216216217, 0.0 },
						{ 0.03571428571428571, 0.05263157894736842, 0.016216216216216217, 0.031746031746031744, 0.9179846513179846 },
						{ 0.05263157894736842, 0.07017543859649122, 0.031746031746031744, 0.031746031746031744, 0.0 },
						{ 0.07017543859649122, 0.23333333333333334, 0.031746031746031744, 0.21348314606741572, 1.113872636163321 },
						{ 0.23333333333333334, 0.5238095238095238, 0.21348314606741572, 0.45454545454545453, 0.829886635744068 },
						{ 0.5238095238095238, 0.7142857142857143, 0.45454545454545453, 0.7, 1.2886363636363636 },
						{ 0.7142857142857143, 0.7777777777777778, 0.7, 1.0, 4.7250000000000005 },
						{ 0.7777777777777778, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 2 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004016064257028112, 0.004016064257028112, 0.0 },
						{ 0.0, 0.047619047619047616, 0.004016064257028112, 0.004016064257028112, 0.0 },
						{ 0.047619047619047616, 0.07142857142857142, 0.004016064257028112, 0.09090909090909091, 3.649507119386638 },
						{ 0.07142857142857142, 0.2222222222222222, 0.09090909090909091, 0.09090909090909091, 0.0 },
						{ 0.2222222222222222, 0.30416666666666664, 0.09090909090909091, 0.3258426966292135, 2.866986374889632 },
						{ 0.30416666666666664, 0.5641025641025641, 0.3258426966292135, 0.5, 0.6700009698111637 },
						{ 0.5641025641025641, 1.0, 0.5, 1.0, 1.1470588235294117 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 3 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.006024096385542169, 0.006024096385542169, 0.0 },
						{ 0.0, 0.041666666666666664, 0.006024096385542169, 0.02962962962962963, 0.5665327978580992 },
						{ 0.041666666666666664, 0.20512820512820512, 0.02962962962962963, 0.02962962962962963, 0.0 },
						{ 0.20512820512820512, 0.4853801169590643, 0.02962962962962963, 0.5344827586206896, 1.8014261729488383 },
						{ 0.4853801169590643, 1.0, 0.5344827586206896, 0.5344827586206896, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.5344827586206896, 0.5344827586206896, 0.0 },
					} },
				{ 4 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.010101010101010102, 0.010101010101010102, 0.0 },
						{ 0.0, 0.013333333333333334, 0.010101010101010102, 0.010101010101010102, 0.0 },
						{ 0.013333333333333334, 0.07142857142857142, 0.010101010101010102, 0.1, 1.547441629408843 },
						{ 0.07142857142857142, 0.15789473684210525, 0.1, 0.16666666666666666, 0.7710144927536231 },
						{ 0.15789473684210525, 0.23809523809523808, 0.16666666666666666, 0.2727272727272727, 1.3224431818181817 },
						{ 0.23809523809523808, 0.5882352941176471, 0.2727272727272727, 0.75, 1.3630909090909091 },
						{ 0.5882352941176471, 0.9642857142857143, 0.75, 0.9130434782608695, 0.43356813213504963 },
						{ 0.9642857142857143, 1.79769313486231e+308, 0.9130434782608695, 0.9130434782608695, 0.0 },
					} },
				{ 5 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004166666666666667, 0.004166666666666667, 0.0 },
						{ 0.0, 0.017543859649122806, 0.004166666666666667, 0.012048192771084338, 0.44924698795180734 },
						{ 0.017543859649122806, 0.11764705882352941, 0.012048192771084338, 0.012048192771084338, 0.0 },
						{ 0.11764705882352941, 0.9883720930232558, 0.012048192771084338, 0.9444444444444444, 1.0708274312226649 },
						{ 0.9883720930232558, 1.0, 0.9444444444444444, 0.9444444444444444, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.9444444444444444, 0.9444444444444444, 0.0 },
					} },
				{ 6 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.003257328990228013, 0.003257328990228013, 0.0 },
						{ 0.0, 0.004166666666666667, 0.003257328990228013, 0.003257328990228013, 0.0 },
						{ 0.004166666666666667, 0.07142857142857142, 0.003257328990228013, 0.1, 1.4382981176674066 },
						{ 0.07142857142857142, 0.29411764705882354, 0.1, 0.25, 0.6735849056603773 },
						{ 0.29411764705882354, 1.0, 0.25, 1.0, 1.0625 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 7 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004484304932735426, 0.004484304932735426, 0.0 },
						{ 0.0, 0.047619047619047616, 0.004484304932735426, 0.004484304932735426, 0.0 },
						{ 0.047619047619047616, 0.05, 0.004484304932735426, 0.041237113402061855, 15.436179557117065 },
						{ 0.05, 0.10256410256410256, 0.041237113402061855, 0.041237113402061855, 0.0 },
						{ 0.10256410256410256, 0.2631578947368421, 0.041237113402061855, 0.3333333333333333, 1.8188512518409425 },
						{ 0.2631578947368421, 0.88, 0.3333333333333333, 0.8484848484848485, 0.835143241286586 },
						{ 0.88, 1.0, 0.8484848484848485, 0.8484848484848485, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.8484848484848485, 0.8484848484848485, 0.0 },
					} },
				{ 8 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.04, 0.0, 0.0, 0.0 },
						{ 0.04, 0.05128205128205128, 0.0, 0.06578947368421052, 5.831339712918662 },
						{ 0.05128205128205128, 0.14285714285714285, 0.06578947368421052, 0.06578947368421052, 0.0 },
						{ 0.14285714285714285, 0.3333333333333333, 0.06578947368421052, 0.3146067415730337, 1.306290656416322 },
						{ 0.3333333333333333, 1.0, 0.3146067415730337, 0.5, 0.2780898876404494 },
						{ 1.0, 1.79769313486231e+308, 0.5, 0.5, 0.0 },
					} },
				{ 9 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.02564102564102564, 0.02564102564102564, 0.0 },
						{ 0.0, 0.0125, 0.02564102564102564, 0.05154639175257732, 2.072429288924134 },
						{ 0.0125, 0.02564102564102564, 0.05154639175257732, 0.05154639175257732, 0.0 },
						{ 0.02564102564102564, 0.32748538011695905, 0.05154639175257732, 0.3492063492063492, 0.986137236094985 },
						{ 0.32748538011695905, 0.47368421052631576, 0.3492063492063492, 0.3492063492063492, 0.0 },
						{ 0.47368421052631576, 1.0, 0.3492063492063492, 1.0, 1.2365079365079363 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
			};
			
			std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
				std::any lResult = iData[iData.size() - 1][3];
				for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
					if(iX <= iData[lIndex][1]) {
						return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
					}
				}
				return(lResult);
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					interpolate_isotonic( lIsotonicData_1 [ 0 ] , coalesce( std::any() , lNodeValue [ 0 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 2 ] , coalesce( std::any() , lNodeValue [ 2 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 3 ] , coalesce( std::any() , lNodeValue [ 3 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 4 ] , coalesce( std::any() , lNodeValue [ 4 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 5 ] , coalesce( std::any() , lNodeValue [ 5 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 6 ] , coalesce( std::any() , lNodeValue [ 6 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 7 ] , coalesce( std::any() , lNodeValue [ 7 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 8 ] , coalesce( std::any() , lNodeValue [ 8 ] )),
					interpolate_isotonic( lIsotonicData_1 [ 9 ] , coalesce( std::any() , lNodeValue [ 9 ] )) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_1
		
	
		namespace BestEstimator_2 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.0, 0.8636363636363636, 0.09090909090909091, 0.0, 0.0, 0.0, 0.0, 0.0, 0.045454545454545456, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.1, 0.4, 0.2, 0.2, 0.1, 0.0, 0.0 }} ,
					{ 8 ,  {0.0, 0.0, 0.16666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333, 0.16666666666666666 }} ,
					{ 9 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 12 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 13 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 18 ,  {0.2, 0.0, 0.0, 0.0, 0.0, 0.2, 0.6, 0.0, 0.0, 0.0 }} ,
					{ 19 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 31 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 33 ,  {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 36 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.0, 0.3333333333333333, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3333333333333333 }} ,
					{ 39 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0 }} ,
					{ 43 ,  {0.0, 0.0, 0.013888888888888888, 0.9861111111111112, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 44 ,  {0.0, 0.0, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.75 }} ,
					{ 46 ,  {0.0, 0.044444444444444446, 0.0, 0.35555555555555557, 0.13333333333333333, 0.24444444444444444, 0.022222222222222223, 0.044444444444444446, 0.06666666666666667, 0.08888888888888889 }} ,
					{ 47 ,  {0.03731343283582089, 0.1044776119402985, 0.0, 0.03731343283582089, 0.007462686567164179, 0.007462686567164179, 0.0, 0.007462686567164179, 0.08955223880597014, 0.7089552238805971 }} ,
					{ 50 ,  {0.0, 0.01904761904761905, 0.02857142857142857, 0.0380952380952381, 0.009523809523809525, 0.0, 0.0, 0.8666666666666667, 0.02857142857142857, 0.009523809523809525 }} ,
					{ 51 ,  {0.0, 0.09523809523809523, 0.0, 0.0, 0.5238095238095238, 0.047619047619047616, 0.0, 0.19047619047619047, 0.047619047619047616, 0.09523809523809523 }} ,
					{ 53 ,  {0.0, 0.23853211009174313, 0.3486238532110092, 0.03669724770642202, 0.0, 0.0, 0.0, 0.013761467889908258, 0.3486238532110092, 0.013761467889908258 }} ,
					{ 54 ,  {0.013157894736842105, 0.15789473684210525, 0.0, 0.0, 0.7631578947368421, 0.0, 0.013157894736842105, 0.0, 0.05263157894736842, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.4037269949913025) ? ( (scaler_7 <= -0.5867252945899963) ? ( (scaler_11 <= 0.32203370332717896) ? ( (scaler_39 <= -0.13757621496915817) ? ( 5 ) : ( 6 ) ) : ( (scaler_54 <= -0.2935141250491142) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_20 <= -0.9578883051872253) ? ( (scaler_31 <= -0.10113698244094849) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_56 <= -0.653985470533371) ? ( (scaler_39 <= -0.6493027955293655) ? ( (scaler_30 <= -0.49531662091612816) ? ( 18 ) : ( 19 ) ) : ( (scaler_7 <= 1.443623125553131) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_60 <= 0.6958126723766327) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_30 <= -1.5554689764976501) ? ( (scaler_38 <= -1.1439052820205688) ? ( (scaler_64 <= 0.3422780856490135) ? ( (scaler_61 <= -1.742542564868927) ? ( 30 ) : ( 31 ) ) : ( (scaler_5 <= -0.8937523066997528) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_12 <= -1.0801673829555511) ? ( 36 ) : ( (scaler_8 <= -0.2656681351363659) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_45 <= -0.7331587076187134) ? ( (scaler_28 <= -1.3915199041366577) ? ( (scaler_21 <= 0.5833771526813507) ? ( 43 ) : ( 44 ) ) : ( (scaler_23 <= 0.27028150111436844) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_27 <= 0.3227207735180855) ? ( 50 ) : ( 51 ) ) : ( (scaler_35 <= -0.23632274195551872) ? ( 53 ) : ( 54 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			typedef std::vector<tAnyVector> tIsotonicData;
			std::map<std::any, tIsotonicData> lIsotonicData_2 = {
						 // {xmin, xmax, ymin, ymax, coeff}
				{ 0 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004016064257028112, 0.004016064257028112, 0.0 },
						{ 0.0, 0.013157894736842105, 0.004016064257028112, 0.03125, 2.0697791164658637 },
						{ 0.013157894736842105, 0.03731343283582089, 0.03125, 0.08, 2.0181707317073174 },
						{ 0.03731343283582089, 0.2, 0.08, 0.08, 0.0 },
						{ 0.2, 1.0, 0.08, 1.0, 1.15 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 1 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.01904761904761905, 0.0, 0.018867924528301886, 0.990566037735849 },
						{ 0.01904761904761905, 0.09523809523809523, 0.018867924528301886, 0.018867924528301886, 0.0 },
						{ 0.09523809523809523, 0.1044776119402985, 0.018867924528301886, 0.0851063829787234, 7.169039310749467 },
						{ 0.1044776119402985, 0.15789473684210525, 0.0851063829787234, 0.21212121212121213, 2.3777923161527674 },
						{ 0.15789473684210525, 0.23853211009174313, 0.21212121212121213, 0.21212121212121213, 0.0 },
						{ 0.23853211009174313, 0.8636363636363636, 0.21212121212121213, 0.6875, 0.7604792083611296 },
						{ 0.8636363636363636, 1.0, 0.6875, 0.6875, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.6875, 0.6875, 0.0 },
					} },
				{ 2 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.004694835680751174, 0.004694835680751174, 0.0 },
						{ 0.0, 0.013888888888888888, 0.004694835680751174, 0.041666666666666664, 2.6619718309859155 },
						{ 0.013888888888888888, 0.02857142857142857, 0.041666666666666664, 0.041666666666666664, 0.0 },
						{ 0.02857142857142857, 0.09090909090909091, 0.041666666666666664, 0.21428571428571427, 2.769097222222222 },
						{ 0.09090909090909091, 0.16666666666666666, 0.21428571428571427, 0.3, 1.1314285714285717 },
						{ 0.16666666666666666, 0.25, 0.3, 0.3, 0.0 },
						{ 0.25, 0.3486238532110092, 0.3, 0.3283582089552239, 0.2875390489413399 },
						{ 0.3486238532110092, 1.0, 0.3283582089552239, 0.8571428571428571, 0.8117961500345356 },
						{ 1.0, 1.79769313486231e+308, 0.8571428571428571, 0.8571428571428571, 0.0 },
					} },
				{ 3 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.005847953216374269, 0.005847953216374269, 0.0 },
						{ 0.0, 0.03669724770642202, 0.005847953216374269, 0.02857142857142857, 0.6192147034252297 },
						{ 0.03669724770642202, 0.0380952380952381, 0.02857142857142857, 0.02857142857142857, 0.0 },
						{ 0.0380952380952381, 0.1, 0.02857142857142857, 0.38461538461538464, 5.7514792899408285 },
						{ 0.1, 0.35555555555555557, 0.38461538461538464, 0.38461538461538464, 0.0 },
						{ 0.35555555555555557, 0.9861111111111112, 0.38461538461538464, 0.9545454545454546, 0.9038538553957057 },
						{ 0.9861111111111112, 1.79769313486231e+308, 0.9545454545454546, 0.9545454545454546, 0.0 },
					} },
				{ 4 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.011320754716981131, 0.011320754716981131, 0.0 },
						{ 0.0, 0.007462686567164179, 0.011320754716981131, 0.011320754716981131, 0.0 },
						{ 0.007462686567164179, 0.009523809523809525, 0.011320754716981131, 0.038461538461538464, 13.1679595615835 },
						{ 0.009523809523809525, 0.13333333333333333, 0.038461538461538464, 0.16666666666666666, 1.0355029585798816 },
						{ 0.13333333333333333, 0.4, 0.16666666666666666, 0.16666666666666666, 0.0 },
						{ 0.4, 0.5238095238095238, 0.16666666666666666, 0.5625, 3.197115384615385 },
						{ 0.5238095238095238, 0.7631578947368421, 0.5625, 0.625, 0.26112565445026176 },
						{ 0.7631578947368421, 1.0, 0.625, 1.0, 1.5833333333333337 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 5 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.006514657980456026, 0.006514657980456026, 0.0 },
						{ 0.0, 0.047619047619047616, 0.006514657980456026, 0.006514657980456026, 0.0 },
						{ 0.047619047619047616, 0.2, 0.006514657980456026, 0.1, 0.6134975570032573 },
						{ 0.2, 0.24444444444444444, 0.1, 0.2727272727272727, 3.8863636363636376 },
						{ 0.24444444444444444, 1.0, 0.2727272727272727, 0.967741935483871, 0.919872347766086 },
						{ 1.0, 1.79769313486231e+308, 0.967741935483871, 0.967741935483871, 0.0 },
					} },
				{ 6 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0072992700729927005, 0.0072992700729927005, 0.0 },
						{ 0.0, 0.013157894736842105, 0.0072992700729927005, 0.023255813953488372, 1.2126973349176713 },
						{ 0.013157894736842105, 0.022222222222222223, 0.023255813953488372, 0.023255813953488372, 0.0 },
						{ 0.022222222222222223, 0.2, 0.023255813953488372, 0.14285714285714285, 0.6727574750830564 },
						{ 0.2, 0.6, 0.14285714285714285, 0.3333333333333333, 0.4761904761904762 },
						{ 0.6, 1.0, 0.3333333333333333, 0.96875, 1.5885416666666667 },
						{ 1.0, 1.79769313486231e+308, 0.96875, 0.96875, 0.0 },
					} },
				{ 7 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.01639344262295082, 0.01639344262295082, 0.0 },
						{ 0.0, 0.007462686567164179, 0.01639344262295082, 0.048, 4.235278688524589 },
						{ 0.007462686567164179, 0.044444444444444446, 0.048, 0.048, 0.0 },
						{ 0.044444444444444446, 0.1, 0.048, 0.14285714285714285, 1.707428571428571 },
						{ 0.1, 0.19047619047619047, 0.14285714285714285, 0.25, 1.1842105263157898 },
						{ 0.19047619047619047, 0.8666666666666667, 0.25, 0.75, 0.7394366197183098 },
						{ 0.8666666666666667, 1.0, 0.75, 0.75, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.75, 0.75, 0.0 },
					} },
				{ 8 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.007246376811594203, 0.007246376811594203, 0.0 },
						{ 0.0, 0.02857142857142857, 0.007246376811594203, 0.025, 0.6213768115942029 },
						{ 0.02857142857142857, 0.045454545454545456, 0.025, 0.025, 0.0 },
						{ 0.045454545454545456, 0.047619047619047616, 0.025, 0.041666666666666664, 7.700000000000013 },
						{ 0.047619047619047616, 0.05263157894736842, 0.041666666666666664, 0.041666666666666664, 0.0 },
						{ 0.05263157894736842, 0.06666666666666667, 0.041666666666666664, 0.0606060606060606, 1.3494318181818177 },
						{ 0.06666666666666667, 0.3333333333333333, 0.0606060606060606, 0.0606060606060606, 0.0 },
						{ 0.3333333333333333, 0.3486238532110092, 0.0606060606060606, 0.373134328358209, 20.43934871099045 },
						{ 0.3486238532110092, 1.79769313486231e+308, 0.373134328358209, 0.373134328358209, 0.0 },
					} },
				{ 9 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0, 0.0, 0.0 },
						{ 0.0, 0.009523809523809525, 0.0, 0.021505376344086023, 2.258064516129032 },
						{ 0.009523809523809525, 0.013761467889908258, 0.021505376344086023, 0.021505376344086023, 0.0 },
						{ 0.013761467889908258, 0.08888888888888889, 0.021505376344086023, 0.08571428571428572, 0.8546667583740284 },
						{ 0.08888888888888889, 0.16666666666666666, 0.08571428571428572, 0.08571428571428572, 0.0 },
						{ 0.16666666666666666, 0.7089552238805971, 0.08571428571428572, 0.6530612244897959, 1.0462085751731882 },
						{ 0.7089552238805971, 0.75, 0.6530612244897959, 0.6530612244897959, 0.0 },
						{ 0.75, 1.79769313486231e+308, 0.6530612244897959, 0.6530612244897959, 0.0 },
					} },
			};
			
			std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
				std::any lResult = iData[iData.size() - 1][3];
				for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
					if(iX <= iData[lIndex][1]) {
						return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
					}
				}
				return(lResult);
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					interpolate_isotonic( lIsotonicData_2 [ 0 ] , coalesce( std::any() , lNodeValue [ 0 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 2 ] , coalesce( std::any() , lNodeValue [ 2 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 3 ] , coalesce( std::any() , lNodeValue [ 3 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 4 ] , coalesce( std::any() , lNodeValue [ 4 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 5 ] , coalesce( std::any() , lNodeValue [ 5 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 6 ] , coalesce( std::any() , lNodeValue [ 6 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 7 ] , coalesce( std::any() , lNodeValue [ 7 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 8 ] , coalesce( std::any() , lNodeValue [ 8 ] )),
					interpolate_isotonic( lIsotonicData_2 [ 9 ] , coalesce( std::any() , lNodeValue [ 9 ] )) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_2
		
	
		namespace BestEstimator_3 {
		
			std::vector<std::any> get_classes(){
				std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
		
				return lClasses;
			}
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0 }} ,
					{ 6 ,  {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 7 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 9 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 10 ,  {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 14 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0 }} ,
					{ 15 ,  {0.0, 0.0, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6666666666666666 }} ,
					{ 17 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 18 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 21 ,  {0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 22 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 }} ,
					{ 24 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 25 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 }} ,
					{ 30 ,  {0.0, 0.7058823529411765, 0.0, 0.029411764705882353, 0.11764705882352941, 0.029411764705882353, 0.08823529411764706, 0.029411764705882353, 0.0, 0.0 }} ,
					{ 31 ,  {0.0, 0.0, 0.6176470588235294, 0.23529411764705882, 0.0, 0.029411764705882353, 0.0, 0.08823529411764706, 0.029411764705882353, 0.0 }} ,
					{ 33 ,  {0.0, 0.0, 0.0, 0.0, 0.6666666666666666, 0.3333333333333333, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 34 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 37 ,  {0.0, 0.0, 0.0, 0.0, 0.9375, 0.0, 0.0625, 0.0, 0.0, 0.0 }} ,
					{ 38 ,  {0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0 }} ,
					{ 40 ,  {0.0, 0.0, 0.0, 0.0, 0.0, 0.010416666666666666, 0.9895833333333334, 0.0, 0.0, 0.0 }} ,
					{ 41 ,  {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 45 ,  {0.0, 0.010416666666666666, 0.0, 0.03125, 0.020833333333333332, 0.0, 0.0, 0.8854166666666666, 0.041666666666666664, 0.010416666666666666 }} ,
					{ 46 ,  {0.0, 0.5, 0.25, 0.25, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 48 ,  {0.0, 0.08695652173913043, 0.0, 0.0, 0.08695652173913043, 0.08695652173913043, 0.0, 0.34782608695652173, 0.0, 0.391304347826087 }} ,
					{ 49 ,  {0.0, 0.125, 0.0, 0.0, 0.875, 0.0, 0.0, 0.0, 0.0, 0.0 }} ,
					{ 52 ,  {0.0, 0.009900990099009901, 0.0297029702970297, 0.8415841584158416, 0.0, 0.0, 0.0, 0.0, 0.039603960396039604, 0.07920792079207921 }} ,
					{ 53 ,  {0.0, 0.0963855421686747, 0.0, 0.03614457831325301, 0.08433734939759036, 0.03614457831325301, 0.0, 0.024096385542168676, 0.08433734939759036, 0.6385542168674698 }} ,
					{ 55 ,  {0.0, 0.22807017543859648, 0.34210526315789475, 0.021929824561403508, 0.013157894736842105, 0.0, 0.0043859649122807015, 0.02631578947368421, 0.3508771929824561, 0.013157894736842105 }} ,
					{ 56 ,  {0.024096385542168676, 0.1686746987951807, 0.012048192771084338, 0.0, 0.7590361445783133, 0.0, 0.012048192771084338, 0.0, 0.024096385542168676, 0.0 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				int lNodeIndex = (scaler_38 <= -1.6508051753044128) ? ( (scaler_30 <= -0.9030675292015076) ? ( (scaler_23 <= -1.172670304775238) ? ( (scaler_8 <= -0.11717917770147324) ? ( (scaler_51 <= 1.58335679769516) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_5 <= -1.3651496767997742) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_23 <= 0.19011751003563404) ? ( (scaler_7 <= -0.7632773220539093) ? ( (scaler_14 <= -0.6885261256247759) ? ( 14 ) : ( 15 ) ) : ( (scaler_62 <= -1.504944384098053) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_37 <= -0.7239397168159485) ? ( (scaler_20 <= -1.398476481437683) ? ( 21 ) : ( 22 ) ) : ( (scaler_37 <= -0.08449207246303558) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (scaler_23 <= -1.172670304775238) ? ( (scaler_44 <= 0.250873439013958) ? ( (scaler_7 <= -0.5867252945899963) ? ( (scaler_11 <= -0.4649772346019745) ? ( 30 ) : ( 31 ) ) : ( (scaler_4 <= -0.9766302406787872) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_56 <= -0.653985470533371) ? ( (scaler_37 <= 1.0345413088798523) ? ( 37 ) : ( 38 ) ) : ( (scaler_60 <= 0.7944982945919037) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_62 <= -0.8913523256778717) ? ( (scaler_28 <= 0.5403966009616852) ? ( (scaler_55 <= -0.20786768198013306) ? ( 45 ) : ( 46 ) ) : ( (scaler_44 <= -0.513394370675087) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_45 <= -0.7331587076187134) ? ( (scaler_28 <= -0.5865546762943268) ? ( 52 ) : ( 53 ) ) : ( (scaler_35 <= 0.3318006992340088) ? ( 55 ) : ( 56 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			typedef std::vector<tAnyVector> tIsotonicData;
			std::map<std::any, tIsotonicData> lIsotonicData_3 = {
						 // {xmin, xmax, ymin, ymax, coeff}
				{ 0 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.006153846153846154, 0.006153846153846154, 0.0 },
						{ 0.0, 0.5, 0.006153846153846154, 0.006153846153846154, 0.0 },
						{ 0.5, 1.0, 0.006153846153846154, 0.9411764705882353, 1.8700452488687782 },
						{ 1.0, 1.79769313486231e+308, 0.9411764705882353, 0.9411764705882353, 0.0 },
					} },
				{ 1 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.007194244604316547, 0.007194244604316547, 0.0 },
						{ 0.0, 0.009900990099009901, 0.007194244604316547, 0.013513513513513514, 0.6382461598288937 },
						{ 0.009900990099009901, 0.08695652173913043, 0.013513513513513514, 0.013513513513513514, 0.0 },
						{ 0.08695652173913043, 0.0963855421686747, 0.013513513513513514, 0.1206896551724138, 11.366625245935582 },
						{ 0.0963855421686747, 0.1686746987951807, 0.1206896551724138, 0.1206896551724138, 0.0 },
						{ 0.1686746987951807, 0.22807017543859648, 0.1206896551724138, 0.25333333333333335, 2.233228617008222 },
						{ 0.22807017543859648, 0.5, 0.25333333333333335, 0.25333333333333335, 0.0 },
						{ 0.5, 0.6, 0.25333333333333335, 0.6153846153846154, 3.6205128205128214 },
						{ 0.6, 0.7058823529411765, 0.6153846153846154, 0.6153846153846154, 0.0 },
						{ 0.7058823529411765, 1.79769313486231e+308, 0.6153846153846154, 0.6153846153846154, 0.0 },
					} },
				{ 2 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.01680672268907563, 0.01680672268907563, 0.0 },
						{ 0.0, 0.012048192771084338, 0.01680672268907563, 0.01680672268907563, 0.0 },
						{ 0.012048192771084338, 0.0297029702970297, 0.01680672268907563, 0.0625, 2.5881536736316155 },
						{ 0.0297029702970297, 0.25, 0.0625, 0.29333333333333333, 1.0478277153558053 },
						{ 0.25, 0.34210526315789475, 0.29333333333333333, 0.29333333333333333, 0.0 },
						{ 0.34210526315789475, 0.6176470588235294, 0.29333333333333333, 0.5454545454545454, 0.9150017024174325 },
						{ 0.6176470588235294, 1.0, 0.5454545454545454, 1.0, 1.188811188811189 },
						{ 1.0, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 3 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0058823529411764705, 0.0058823529411764705, 0.0 },
						{ 0.0, 0.021929824561403508, 0.0058823529411764705, 0.06293706293706294, 2.6016947758124234 },
						{ 0.021929824561403508, 0.03614457831325301, 0.06293706293706294, 0.06293706293706294, 0.0 },
						{ 0.03614457831325301, 0.23529411764705882, 0.06293706293706294, 0.09090909090909091, 0.14045740736132195 },
						{ 0.23529411764705882, 0.25, 0.09090909090909091, 0.3333333333333333, 16.48484848484848 },
						{ 0.25, 0.8415841584158416, 0.3333333333333333, 0.78125, 0.7571478382147839 },
						{ 0.8415841584158416, 1.79769313486231e+308, 0.78125, 0.78125, 0.0 },
					} },
				{ 4 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.021505376344086023, 0.021505376344086023, 0.0 },
						{ 0.0, 0.020833333333333332, 0.021505376344086023, 0.021505376344086023, 0.0 },
						{ 0.020833333333333332, 0.08433734939759036, 0.021505376344086023, 0.0625, 0.6455437970164478 },
						{ 0.08433734939759036, 0.08695652173913043, 0.0625, 0.1111111111111111, 18.559722222222195 },
						{ 0.08695652173913043, 0.11764705882352941, 0.1111111111111111, 0.14285714285714285, 1.0343915343915344 },
						{ 0.11764705882352941, 0.6666666666666666, 0.14285714285714285, 0.14285714285714285, 0.0 },
						{ 0.6666666666666666, 0.7590361445783133, 0.14285714285714285, 0.84375, 7.587927018633538 },
						{ 0.7590361445783133, 1.0, 0.84375, 0.84375, 0.0 },
						{ 1.0, 1.79769313486231e+308, 0.84375, 0.84375, 0.0 },
					} },
				{ 5 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0035460992907801418, 0.0035460992907801418, 0.0 },
						{ 0.0, 0.029411764705882353, 0.0035460992907801418, 0.0035460992907801418, 0.0 },
						{ 0.029411764705882353, 0.03614457831325301, 0.0035460992907801418, 0.023809523809523808, 3.009651789047086 },
						{ 0.03614457831325301, 0.3333333333333333, 0.023809523809523808, 0.023809523809523808, 0.0 },
						{ 0.3333333333333333, 1.0, 0.023809523809523808, 0.9714285714285714, 1.4214285714285713 },
						{ 1.0, 1.79769313486231e+308, 0.9714285714285714, 0.9714285714285714, 0.0 },
					} },
				{ 6 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.0032679738562091504, 0.0032679738562091504, 0.0 },
						{ 0.0, 0.012048192771084338, 0.0032679738562091504, 0.0032679738562091504, 0.0 },
						{ 0.012048192771084338, 0.0625, 0.0032679738562091504, 0.058823529411764705, 1.101160862354892 },
						{ 0.0625, 0.4, 0.058823529411764705, 0.058823529411764705, 0.0 },
						{ 0.4, 0.5, 0.058823529411764705, 0.3333333333333333, 2.7450980392156867 },
						{ 0.5, 0.9895833333333334, 0.3333333333333333, 1.0, 1.3617021276595744 },
						{ 0.9895833333333334, 1.79769313486231e+308, 1.0, 1.0, 0.0 },
					} },
				{ 7 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.008771929824561403, 0.008771929824561403, 0.0 },
						{ 0.0, 0.024096385542168676, 0.008771929824561403, 0.008771929824561403, 0.0 },
						{ 0.024096385542168676, 0.02631578947368421, 0.008771929824561403, 0.011235955056179775, 1.1102193686463364 },
						{ 0.02631578947368421, 0.08823529411764706, 0.011235955056179775, 0.011235955056179775, 0.0 },
						{ 0.08823529411764706, 0.34782608695652173, 0.011235955056179775, 0.4444444444444444, 1.6688129985301625 },
						{ 0.34782608695652173, 0.8854166666666666, 0.4444444444444444, 0.8484848484848485, 0.7515764213321081 },
						{ 0.8854166666666666, 1.79769313486231e+308, 0.8484848484848485, 0.8484848484848485, 0.0 },
					} },
				{ 8 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.00558659217877095, 0.00558659217877095, 0.0 },
						{ 0.0, 0.024096385542168676, 0.00558659217877095, 0.00558659217877095, 0.0 },
						{ 0.024096385542168676, 0.029411764705882353, 0.00558659217877095, 0.06976744186046512, 12.074557186782734 },
						{ 0.029411764705882353, 0.039603960396039604, 0.06976744186046512, 0.06976744186046512, 0.0 },
						{ 0.039603960396039604, 0.041666666666666664, 0.06976744186046512, 0.09090909090909091, 10.2494714587738 },
						{ 0.041666666666666664, 0.08433734939759036, 0.09090909090909091, 0.09375, 0.06657754010695181 },
						{ 0.08433734939759036, 0.3508771929824561, 0.09375, 0.3333333333333333, 0.8988649881046789 },
						{ 0.3508771929824561, 1.79769313486231e+308, 0.3333333333333333, 0.3333333333333333, 0.0 },
					} },
				{ 9 ,	{ 
						{ -1.79769313486231e+308, 0.0, 0.007326007326007326, 0.007326007326007326, 0.0 },
						{ 0.0, 0.013157894736842105, 0.007326007326007326, 0.007326007326007326, 0.0 },
						{ 0.013157894736842105, 0.07920792079207921, 0.007326007326007326, 0.09375, 1.3084626583147292 },
						{ 0.07920792079207921, 0.391304347826087, 0.09375, 0.4444444444444444, 1.1236733716475096 },
						{ 0.391304347826087, 0.6385542168674698, 0.4444444444444444, 0.5, 0.22469397363465177 },
						{ 0.6385542168674698, 1.0, 0.5, 0.9230769230769231, 1.1705128205128206 },
						{ 1.0, 1.79769313486231e+308, 0.9230769230769231, 0.9230769230769231, 0.0 },
					} },
			};
			
			std::any interpolate_isotonic(tIsotonicData const & iData, std::any iX) {
				std::any lResult = iData[iData.size() - 1][3];
				for(uint lIndex = 0 ; lIndex < iData.size(); ++lIndex) {
					if(iX <= iData[lIndex][1]) {
						return((iX - iData[lIndex][0]) * iData[lIndex][4] + iData[lIndex][2]);
					}
				}
				return(lResult);
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
					"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
					"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
					"Decision", "DecisionProba" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
				auto lClasses = get_classes();
		
				int lNodeIndex = get_decision_tree_node_index(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any(),
					std::any() 
				} ;
				lTable["Proba"] = { 
					interpolate_isotonic( lIsotonicData_3 [ 0 ] , coalesce( std::any() , lNodeValue [ 0 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 1 ] , coalesce( std::any() , lNodeValue [ 1 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 2 ] , coalesce( std::any() , lNodeValue [ 2 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 3 ] , coalesce( std::any() , lNodeValue [ 3 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 4 ] , coalesce( std::any() , lNodeValue [ 4 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 5 ] , coalesce( std::any() , lNodeValue [ 5 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 6 ] , coalesce( std::any() , lNodeValue [ 6 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 7 ] , coalesce( std::any() , lNodeValue [ 7 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 8 ] , coalesce( std::any() , lNodeValue [ 8 ] )),
					interpolate_isotonic( lIsotonicData_3 [ 9 ] , coalesce( std::any() , lNodeValue [ 9 ] )) 
				} ;
				int lBestClass = get_arg_max( lTable["Proba"] );
				auto lDecision = lClasses[lBestClass];
				lTable["Decision"] = { lDecision } ;
				lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
		
				return lTable;
			}
		
		} // eof namespace BestEstimator_3
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65) {
			auto lClasses = get_classes();
	
			std::vector<tTable> lBaseScores = { 
				BestEstimator_0::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				BestEstimator_1::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				BestEstimator_2::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65),
				BestEstimator_3::compute_classification_scores(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65)
			};
	
			tTable lAggregatedTable = aggregate_calibrated_scores(lBaseScores, {"Proba", "Score"});
	
	
			tTable lTable = lAggregatedTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
