// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : AdaBoostRegressor
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_AdaBoostRegressor_freidman3.exe ml2cpp-demo_AdaBoostRegressor_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.70507147 }} ,
				{ 4 ,  {0.43001724 }} ,
				{ 6 ,  {0.61001684 }} ,
				{ 7 ,  {1.24432976 }} ,
				{ 10 ,  {1.47335551 }} ,
				{ 11 ,  {1.15522662 }} ,
				{ 13 ,  {1.53546361 }} ,
				{ 14 ,  {1.46488263 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.20348544418811798) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_3 <= 3.731728196144104) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.025156566640362144) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 450.96368408203125) ? ( (Feature_2 <= 0.5044680088758469) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 42.91398620605469) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.48486692 }} ,
				{ 6 ,  {0.59153924 }} ,
				{ 7 ,  {1.2541519 }} ,
				{ 9 ,  {1.52873117 }} ,
				{ 10 ,  {1.3679828 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 39.70485877990723) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 516.2426300048828) ? ( 6 ) : ( 7 ) ) : ( (Feature_0 <= 46.51478958129883) ? ( 9 ) : ( 10 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38342473 }} ,
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 8 ,  {0.37516757 }} ,
				{ 9 ,  {1.21896782 }} ,
				{ 11 ,  {1.37764177 }} ,
				{ 12 ,  {1.51450942 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_1 <= 1445.2074584960938) ? ( (Feature_0 <= 39.70485877990723) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_1 <= 766.9922180175781) ? ( (Feature_2 <= 0.056316668167710304) ? ( 8 ) : ( 9 ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 11 ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.48486692 }} ,
				{ 4 ,  {0.3817733 }} ,
				{ 6 ,  {0.7736311 }} ,
				{ 7 ,  {1.21685003 }} ,
				{ 10 ,  {1.42867484 }} ,
				{ 11 ,  {1.50974239 }} ,
				{ 13 ,  {1.14262289 }} ,
				{ 14 ,  {1.39831453 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.056316668167710304) ? ( (Feature_3 <= 5.679425954818726) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 516.9712219238281) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_0 <= 49.2326774597168) ? ( (Feature_3 <= 2.0892207622528076) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 850.1044006347656) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.44559679 }} ,
				{ 4 ,  {1.32840942 }} ,
				{ 6 ,  {0.80791092 }} ,
				{ 7 ,  {1.14841216 }} ,
				{ 10 ,  {1.2250183 }} ,
				{ 11 ,  {1.44847799 }} ,
				{ 13 ,  {1.56082504 }} ,
				{ 14 ,  {1.50384018 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4144279509782791) ? ( (Feature_0 <= 29.8048152923584) ? ( (Feature_0 <= 13.965950965881348) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.11351156234741211) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 360.9476013183594) ? ( (Feature_3 <= 7.732187747955322) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 22.922844886779785) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.61001684 }} ,
				{ 6 ,  {1.36898325 }} ,
				{ 7 ,  {1.49365054 }} ,
				{ 9 ,  {0.71864712 }} ,
				{ 10 ,  {1.25658342 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.02901188051328063) ? ( (Feature_1 <= 1445.2074584960938) ? ( 2 ) : ( 3 ) ) : ( (Feature_0 <= 40.930686950683594) ? ( (Feature_2 <= 0.1367680188268423) ? ( 6 ) : ( 7 ) ) : ( (Feature_2 <= 0.1157732792198658) ? ( 9 ) : ( 10 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 4 ,  {1.36839144 }} ,
				{ 6 ,  {0.73935129 }} ,
				{ 7 ,  {0.41356894 }} ,
				{ 10 ,  {1.45186094 }} ,
				{ 11 ,  {1.09766898 }} ,
				{ 13 ,  {1.47282448 }} ,
				{ 14 ,  {1.27705659 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_2 <= 0.025156566640362144) ? ( 3 ) : ( 4 ) ) : ( (Feature_3 <= 3.731728196144104) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 254.32003784179688) ? ( (Feature_0 <= 26.78800344467163) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 61.13295364379883) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 4 ,  {0.38342473 }} ,
				{ 5 ,  {0.48486692 }} ,
				{ 8 ,  {1.06732485 }} ,
				{ 9 ,  {1.32606232 }} ,
				{ 11 ,  {1.37814048 }} ,
				{ 12 ,  {1.51304827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 26.660706520080566) ? ( 2 ) : ( (Feature_0 <= 39.70485877990723) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_1 <= 1011.3523254394531) ? ( (Feature_3 <= 4.703881502151489) ? ( 8 ) : ( 9 ) ) : ( (Feature_2 <= 0.25638625025749207) ? ( 11 ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.39449741 }} ,
				{ 4 ,  {0.61001684 }} ,
				{ 6 ,  {0.48486692 }} ,
				{ 7 ,  {0.37591822 }} ,
				{ 10 ,  {0.80791092 }} ,
				{ 11 ,  {1.13167298 }} ,
				{ 13 ,  {1.17822282 }} ,
				{ 14 ,  {1.45910735 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_0 <= 28.417759895324707) ? ( (Feature_1 <= 1685.821044921875) ? ( 3 ) : ( 4 ) ) : ( (Feature_3 <= 5.679425954818726) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.25084197521209717) ? ( (Feature_1 <= 505.7232666015625) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 329.4079284667969) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 4 ,  {1.39449741 }} ,
				{ 6 ,  {0.37516757 }} ,
				{ 7 ,  {0.48486692 }} ,
				{ 10 ,  {1.55660633 }} ,
				{ 11 ,  {1.45186094 }} ,
				{ 13 ,  {1.32148052 }} ,
				{ 14 ,  {1.10098141 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_0 <= 29.15523052215576) ? ( (Feature_2 <= 0.025156566640362144) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 503.65269470214844) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_0 <= 15.669092655181885) ? ( (Feature_0 <= 12.17395305633545) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 78.13961791992188) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38735638 }} ,
				{ 4 ,  {0.72221138 }} ,
				{ 6 ,  {1.14091625 }} ,
				{ 7 ,  {1.36489254 }} ,
				{ 10 ,  {1.51341198 }} ,
				{ 11 ,  {1.36070446 }} ,
				{ 13 ,  {1.07921954 }} ,
				{ 14 ,  {1.02748435 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_2 <= 0.07712984457612038) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1042.3444213867188) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_0 <= 90.57643127441406) ? ( (Feature_0 <= 41.68732452392578) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.6747548580169678) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 4 ,  {0.39264675 }} ,
				{ 6 ,  {1.33205838 }} ,
				{ 7 ,  {0.7026953 }} ,
				{ 10 ,  {1.5485994 }} ,
				{ 11 ,  {1.46758309 }} ,
				{ 13 ,  {1.12763421 }} ,
				{ 14 ,  {1.44744463 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_2 <= 0.009662731783464551) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 29.8048152923584) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_0 <= 36.620771408081055) ? ( (Feature_2 <= 0.680612713098526) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1056.0466613769531) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.40929984 }} ,
				{ 4 ,  {0.73491702 }} ,
				{ 5 ,  {0.37516757 }} ,
				{ 8 ,  {1.53618672 }} ,
				{ 9 ,  {1.33320621 }} ,
				{ 11 ,  {1.02748435 }} ,
				{ 12 ,  {1.09275937 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_3 <= 2.2303965091705322) ? ( 2 ) : ( (Feature_3 <= 8.441878318786621) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_0 <= 84.98217010498047) ? ( (Feature_0 <= 33.22229480743408) ? ( 8 ) : ( 9 ) ) : ( (Feature_1 <= 256.30464935302734) ? ( 11 ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.61001684 }} ,
				{ 4 ,  {1.25919367 }} ,
				{ 6 ,  {0.376819 }} ,
				{ 7 ,  {0.75991918 }} ,
				{ 10 ,  {1.45082046 }} ,
				{ 11 ,  {1.14815229 }} ,
				{ 13 ,  {1.56953534 }} ,
				{ 14 ,  {1.48819596 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.14811982586979866) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_2 <= 0.02970158471725881) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.07712984457612038) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.6493715345859528) ? ( (Feature_0 <= 48.77195930480957) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 8.543474853038788) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.36982669 }} ,
				{ 4 ,  {1.14091625 }} ,
				{ 6 ,  {0.74914552 }} ,
				{ 7 ,  {0.39482699 }} ,
				{ 10 ,  {1.51463702 }} ,
				{ 11 ,  {1.13095057 }} ,
				{ 13 ,  {1.36937328 }} ,
				{ 14 ,  {1.49508798 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_0 <= 28.417759895324707) ? ( (Feature_2 <= 0.05596162937581539) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 445.71485900878906) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 736.0386047363281) ? ( (Feature_0 <= 29.003992080688477) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.3094656765460968) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.61001684 }} ,
				{ 6 ,  {1.21935645 }} ,
				{ 7 ,  {1.45100728 }} ,
				{ 9 ,  {0.54011952 }} ,
				{ 10 ,  {1.14156246 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.0335568985901773) ? ( (Feature_1 <= 1445.2074584960938) ? ( 2 ) : ( 3 ) ) : ( (Feature_0 <= 48.903419494628906) ? ( (Feature_2 <= 0.08024388365447521) ? ( 6 ) : ( 7 ) ) : ( (Feature_2 <= 0.14378926530480385) ? ( 9 ) : ( 10 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		std::vector<double> lScoreWeights = { 
			0.05195427584881373,
			0.0372441445409521,
			0.052726684745953385,
			0.08432362694693879,
			0.07947676307318344,
			0.07262877233372338,
			0.0251137696754658,
			0.07281837272682976,
			0.06087939831616389,
			0.06415244332040132,
			0.08460083708429005,
			0.04306452615665169,
			0.06175983498493968,
			0.069337374607447,
			0.08464747052777623,
			0.055271705110469735
		};

		tTable lAggregatedTable = aggregate_ada_reg_scores(lTreeScores, lScoreWeights);


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
