// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : AdaBoostRegressor
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_AdaBoostRegressor_freidman2.exe ml2cpp-demo_AdaBoostRegressor_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {64.45369065 }} ,
				{ 4 ,  {202.2820904 }} ,
				{ 6 ,  {299.27431242 }} ,
				{ 7 ,  {623.50525801 }} ,
				{ 10 ,  {154.48498448 }} ,
				{ 11 ,  {587.52787291 }} ,
				{ 13 ,  {672.63473801 }} ,
				{ 14 ,  {1069.68012453 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5740115642547607) ? ( (Feature_2 <= 0.20348544418811798) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1435.0574340820312) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 989.6936645507812) ? ( (Feature_3 <= 7.547978401184082) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.6275076270103455) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {216.82967879 }} ,
				{ 4 ,  {81.0003676 }} ,
				{ 6 ,  {264.5753461 }} ,
				{ 7 ,  {546.18904964 }} ,
				{ 10 ,  {229.15913714 }} ,
				{ 11 ,  {520.61172947 }} ,
				{ 13 ,  {852.04407958 }} ,
				{ 14 ,  {1375.10169422 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 882.4659118652344) ? ( (Feature_2 <= 0.5629530251026154) ? ( (Feature_3 <= 5.282727479934692) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 602.7623901367188) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.3650708496570587) ? ( (Feature_1 <= 1654.1549072265625) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.9767304956912994) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {87.95940899 }} ,
				{ 4 ,  {217.97307208 }} ,
				{ 6 ,  {456.84183869 }} ,
				{ 7 ,  {262.27001216 }} ,
				{ 10 ,  {254.19291277 }} ,
				{ 11 ,  {17.5126316 }} ,
				{ 13 ,  {749.32545924 }} ,
				{ 14 ,  {1106.96155876 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 733.7292175292969) ? ( (Feature_2 <= 0.7902979552745819) ? ( (Feature_0 <= 67.72291946411133) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 44.58634376525879) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.3474539518356323) ? ( (Feature_1 <= 1505.2271118164062) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.7847770750522614) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {51.02105151 }} ,
				{ 4 ,  {219.73160143 }} ,
				{ 6 ,  {257.19499013 }} ,
				{ 7 ,  {709.52252606 }} ,
				{ 10 ,  {451.98991151 }} ,
				{ 11 ,  {891.91161379 }} ,
				{ 13 ,  {1450.4501203 }} ,
				{ 14 ,  {1310.35974869 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.7971992194652557) ? ( (Feature_2 <= 0.3094656765460968) ? ( (Feature_2 <= 0.11461476236581802) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 781.071533203125) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1257.4737548828125) ? ( (Feature_1 <= 691.4309997558594) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 42.05487632751465) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {155.86413425 }} ,
				{ 4 ,  {425.57841834 }} ,
				{ 6 ,  {520.61172947 }} ,
				{ 7 ,  {707.74797907 }} ,
				{ 10 ,  {499.16441678 }} ,
				{ 11 ,  {734.99468249 }} ,
				{ 13 ,  {831.19735408 }} ,
				{ 14 ,  {1088.34033722 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 1562.533935546875) ? ( (Feature_3 <= 9.405878067016602) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.37056201696395874) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_2 <= 0.792053759098053) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.6275076270103455) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {34.6716097 }} ,
				{ 4 ,  {190.92031563 }} ,
				{ 6 ,  {128.34121885 }} ,
				{ 7 ,  {408.73723071 }} ,
				{ 10 ,  {287.33549154 }} ,
				{ 11 ,  {710.48159533 }} ,
				{ 13 ,  {922.43154985 }} ,
				{ 14 ,  {1216.61164925 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.49402187764644623) ? ( (Feature_2 <= 0.23534639179706573) ? ( (Feature_2 <= 0.1250449325889349) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 795.8204956054688) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1204.87109375) ? ( (Feature_1 <= 699.738037109375) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 4.895366311073303) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {103.08496893 }} ,
				{ 4 ,  {206.43398131 }} ,
				{ 6 ,  {141.719651 }} ,
				{ 7 ,  {451.24535835 }} ,
				{ 10 ,  {45.82339983 }} ,
				{ 11 ,  {392.02840732 }} ,
				{ 13 ,  {733.65789445 }} ,
				{ 14 ,  {1039.27782754 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 821.2744140625) ? ( (Feature_1 <= 490.12159729003906) ? ( (Feature_2 <= 0.7377969324588776) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.45806238055229187) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_2 <= 0.15311922132968903) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.6275076270103455) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {101.98811436 }} ,
				{ 4 ,  {304.30169985 }} ,
				{ 6 ,  {482.08342748 }} ,
				{ 7 ,  {174.68142017 }} ,
				{ 10 ,  {308.17855768 }} ,
				{ 11 ,  {585.83612639 }} ,
				{ 13 ,  {865.29860532 }} ,
				{ 14 ,  {1412.77590726 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 759.8154907226562) ? ( (Feature_1 <= 508.06446838378906) ? ( (Feature_2 <= 0.8158445060253143) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 56.61892127990723) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.4603971689939499) ? ( (Feature_2 <= 0.379633828997612) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.9767304956912994) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {337.38826236 }} ,
				{ 4 ,  {469.13995216 }} ,
				{ 6 ,  {50.25592995 }} ,
				{ 7 ,  {218.19541099 }} ,
				{ 10 ,  {226.17766893 }} ,
				{ 11 ,  {687.79382197 }} ,
				{ 13 ,  {1038.61717678 }} ,
				{ 14 ,  {1403.53111689 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4695979952812195) ? ( (Feature_0 <= 9.954854011535645) ? ( (Feature_3 <= 6.127349019050598) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 41.031734466552734) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1217.648193359375) ? ( (Feature_1 <= 541.9518432617188) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.7863079011440277) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {102.86187295 }} ,
				{ 4 ,  {367.2164339 }} ,
				{ 6 ,  {548.72658506 }} ,
				{ 7 ,  {168.83377965 }} ,
				{ 10 ,  {465.40868963 }} ,
				{ 11 ,  {816.43404432 }} ,
				{ 13 ,  {988.54860549 }} ,
				{ 14 ,  {1325.02368802 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 882.4659118652344) ? ( (Feature_1 <= 640.1313781738281) ? ( (Feature_2 <= 0.8934462666511536) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 61.53804397583008) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.7480506300926208) ? ( (Feature_2 <= 0.4603971689939499) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1355.5012817382812) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {146.54121637 }} ,
				{ 4 ,  {577.77480088 }} ,
				{ 6 ,  {495.2617662 }} ,
				{ 7 ,  {1061.8958792 }} ,
				{ 10 ,  {659.7758612 }} ,
				{ 11 ,  {325.18474621 }} ,
				{ 13 ,  {992.94107276 }} ,
				{ 14 ,  {1354.55771562 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.7971992194652557) ? ( (Feature_2 <= 0.5180632621049881) ? ( (Feature_0 <= 43.33730888366699) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1209.0945434570312) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 905.7357177734375) ? ( (Feature_0 <= 21.019400775432587) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 5.701060771942139) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {43.13717196 }} ,
				{ 4 ,  {112.58681243 }} ,
				{ 6 ,  {557.42418185 }} ,
				{ 7 ,  {326.88210229 }} ,
				{ 10 ,  {146.31092095 }} ,
				{ 11 ,  {603.21085225 }} ,
				{ 13 ,  {809.292208 }} ,
				{ 14 ,  {1185.39065699 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 766.9922180175781) ? ( (Feature_1 <= 213.69110107421875) ? ( (Feature_2 <= 0.4941694736480713) ? ( 3 ) : ( 4 ) ) : ( (Feature_0 <= 4.569775339215994) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.5930038094520569) ? ( (Feature_2 <= 0.288340300321579) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1121.5556030273438) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {53.0542805 }} ,
				{ 4 ,  {304.17006859 }} ,
				{ 6 ,  {484.79296939 }} ,
				{ 7 ,  {851.97831732 }} ,
				{ 10 ,  {150.5697519 }} ,
				{ 11 ,  {823.62010751 }} ,
				{ 13 ,  {1130.40561005 }} ,
				{ 14 ,  {1379.67385765 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6791707277297974) ? ( (Feature_2 <= 0.37775541841983795) ? ( (Feature_2 <= 0.1157732792198658) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 1313.6138916015625) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1121.5556030273438) ? ( (Feature_1 <= 384.6835403442383) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 8.24548888206482) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {103.39331111 }} ,
				{ 4 ,  {335.89186437 }} ,
				{ 6 ,  {210.09469329 }} ,
				{ 7 ,  {499.42834446 }} ,
				{ 10 ,  {81.61991679 }} ,
				{ 11 ,  {677.86624312 }} ,
				{ 13 ,  {927.03244067 }} ,
				{ 14 ,  {1294.9406591 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 943.0731811523438) ? ( (Feature_1 <= 490.12159729003906) ? ( (Feature_2 <= 0.8033285439014435) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.44081856310367584) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.6275076270103455) ? ( (Feature_2 <= 0.18252205848693848) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1283.81982421875) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {100.2067159 }} ,
				{ 4 ,  {250.27451931 }} ,
				{ 6 ,  {281.88082897 }} ,
				{ 7 ,  {715.14544697 }} ,
				{ 10 ,  {462.32030788 }} ,
				{ 11 ,  {758.41968882 }} ,
				{ 13 ,  {1137.29825265 }} ,
				{ 14 ,  {1397.36792331 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.792053759098053) ? ( (Feature_1 <= 576.3799133300781) ? ( (Feature_1 <= 273.5360412597656) ? ( 3 ) : ( 4 ) ) : ( (Feature_2 <= 0.3869176059961319) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_1 <= 1023.0302429199219) ? ( (Feature_3 <= 8.592648983001709) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 9.706490516662598) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50.91436776 }} ,
				{ 4 ,  {246.00200704 }} ,
				{ 6 ,  {238.91298805 }} ,
				{ 7 ,  {573.86223541 }} ,
				{ 10 ,  {199.96028593 }} ,
				{ 11 ,  {651.09317052 }} ,
				{ 13 ,  {1038.35619597 }} ,
				{ 14 ,  {1432.75605463 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_2 <= 0.4498526155948639) ? ( 3 ) : ( 4 ) ) : ( (Feature_3 <= 4.368488848209381) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.5975654423236847) ? ( (Feature_2 <= 0.2865905463695526) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 9.706490516662598) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		std::vector<double> lScoreWeights = { 
			0.09863580901774902,
			0.0651975686996047,
			0.059817484971670054,
			0.059124358840727746,
			0.050833936678549796,
			0.062481945448974306,
			0.05215399646667793,
			0.04390254973069685,
			0.06306650077091593,
			0.05342661437742472,
			0.07802190731194611,
			0.05239000953713652,
			0.05875405071191933,
			0.06482667808508517,
			0.05085826988825819,
			0.08650831946266384
		};

		tTable lAggregatedTable = aggregate_ada_reg_scores(lTreeScores, lScoreWeights);


		tTable lTable = lAggregatedTable;


		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
