// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor_Pipeline
// Dataset : diabetes

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_Pipeline_diabetes.exe ml2cpp-demo_RandomForestRegressor_Pipeline_diabetes.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.0002686932066652995 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.0007239580580639441 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.0007280719825586765 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.001013565221084393 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.0009763580732882109 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.0017643808242337245 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( -0.0016512815450565026 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.0013905501983388136 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.0012726482548090939 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.001034425005681627 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.0002686932066652995 ) / 0.04724209583653783 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.0007239580580639441 ) / 0.047605576685038974 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.0007280719825586765 ) / 0.04693591143936869 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.001013565221084393 ) / 0.0483352719489719 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.0009763580732882109 ) / 0.048050762009702486 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.0017643808242337245 ) / 0.04806080873154401 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - -0.0016512815450565026 ) / 0.04620240378043046 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.0013905501983388136 ) / 0.047363093040531656 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.0012726482548090939 ) / 0.04589286131364784 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.001034425005681627 ) / 0.04776158519570627 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace EXT_SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {150. }} ,
					{ 7 ,  {200. }} ,
					{ 9 ,  {77. }} ,
					{ 11 ,  {101. }} ,
					{ 12 ,  {113. }} ,
					{ 20 ,  {48. }} ,
					{ 21 ,  {45. }} ,
					{ 22 ,  {37. }} ,
					{ 24 ,  {61. }} ,
					{ 25 ,  {60. }} ,
					{ 29 ,  {63. }} ,
					{ 30 ,  {70. }} ,
					{ 34 ,  {96. }} ,
					{ 35 ,  {104. }} ,
					{ 38 ,  {142. }} ,
					{ 39 ,  {160. }} ,
					{ 41 ,  {101. }} ,
					{ 42 ,  {125. }} ,
					{ 43 ,  {51. }} ,
					{ 48 ,  {90. }} ,
					{ 49 ,  {83. }} ,
					{ 52 ,  {74. }} ,
					{ 53 ,  {77. }} ,
					{ 55 ,  {68. }} ,
					{ 56 ,  {67. }} ,
					{ 60 ,  {60. }} ,
					{ 62 ,  {55. }} ,
					{ 63 ,  {53. }} ,
					{ 64 ,  {39. }} ,
					{ 67 ,  {72. }} ,
					{ 68 ,  {71. }} ,
					{ 69 ,  {59. }} ,
					{ 71 ,  {128. }} ,
					{ 72 ,  {113. }} ,
					{ 76 ,  {88. }} ,
					{ 77 ,  {96. }} ,
					{ 78 ,  {64. }} ,
					{ 81 ,  {31. }} ,
					{ 82 ,  {25. }} ,
					{ 84 ,  {75. }} ,
					{ 87 ,  {49. }} ,
					{ 88 ,  {48. }} ,
					{ 90 ,  {54. }} ,
					{ 92 ,  {52. }} ,
					{ 93 ,  {51. }} ,
					{ 94 ,  {135. }} ,
					{ 101 ,  {129. }} ,
					{ 103 ,  {78. }} ,
					{ 104 ,  {83. }} ,
					{ 106 ,  {160. }} ,
					{ 107 ,  {132. }} ,
					{ 110 ,  {55. }} ,
					{ 111 ,  {49. }} ,
					{ 114 ,  {127. }} ,
					{ 119 ,  {89. }} ,
					{ 120 ,  {88. }} ,
					{ 121 ,  {91. }} ,
					{ 122 ,  {97. }} ,
					{ 123 ,  {107. }} ,
					{ 124 ,  {53. }} ,
					{ 125 ,  {146. }} ,
					{ 126 ,  {179. }} ,
					{ 128 ,  {72. }} ,
					{ 132 ,  {97. }} ,
					{ 133 ,  {98. }} ,
					{ 134 ,  {92. }} ,
					{ 136 ,  {84. }} ,
					{ 137 ,  {87. }} ,
					{ 142 ,  {201. }} ,
					{ 143 ,  {210. }} ,
					{ 145 ,  {182. }} ,
					{ 146 ,  {184. }} ,
					{ 148 ,  {145. }} ,
					{ 149 ,  {121. }} ,
					{ 154 ,  {147. }} ,
					{ 155 ,  {144. }} ,
					{ 157 ,  {140. }} ,
					{ 158 ,  {141. }} ,
					{ 159 ,  {110. }} ,
					{ 161 ,  {95. }} ,
					{ 162 ,  {103. }} ,
					{ 169 ,  {178. }} ,
					{ 171 ,  {151. }} ,
					{ 172 ,  {162. }} ,
					{ 173 ,  {131. }} ,
					{ 176 ,  {126. }} ,
					{ 181 ,  {94. }} ,
					{ 183 ,  {91. }} ,
					{ 184 ,  {90. }} ,
					{ 186 ,  {85. }} ,
					{ 187 ,  {88. }} ,
					{ 189 ,  {102. }} ,
					{ 190 ,  {95. }} ,
					{ 192 ,  {78. }} ,
					{ 193 ,  {68. }} ,
					{ 196 ,  {200. }} ,
					{ 198 ,  {164. }} ,
					{ 199 ,  {180. }} ,
					{ 200 ,  {115. }} ,
					{ 202 ,  {220. }} ,
					{ 203 ,  {192. }} ,
					{ 209 ,  {272. }} ,
					{ 210 ,  {252. }} ,
					{ 214 ,  {190. }} ,
					{ 215 ,  {185. }} ,
					{ 217 ,  {200. }} ,
					{ 218 ,  {198. }} ,
					{ 219 ,  {161. }} ,
					{ 223 ,  {52. }} ,
					{ 224 ,  {58. }} ,
					{ 227 ,  {92. }} ,
					{ 229 ,  {93. }} ,
					{ 230 ,  {94. }} ,
					{ 231 ,  {101. }} ,
					{ 232 ,  {150. }} ,
					{ 235 ,  {258. }} ,
					{ 237 ,  {242. }} ,
					{ 238 ,  {225. }} ,
					{ 241 ,  {302. }} ,
					{ 245 ,  {153. }} ,
					{ 249 ,  {88. }} ,
					{ 250 ,  {84. }} ,
					{ 251 ,  {109. }} ,
					{ 253 ,  {134. }} ,
					{ 254 ,  {128. }} ,
					{ 257 ,  {173. }} ,
					{ 258 ,  {170. }} ,
					{ 259 ,  {142. }} ,
					{ 262 ,  {168. }} ,
					{ 264 ,  {178. }} ,
					{ 266 ,  {262. }} ,
					{ 268 ,  {245. }} ,
					{ 269 ,  {242. }} ,
					{ 273 ,  {151. }} ,
					{ 275 ,  {174. }} ,
					{ 276 ,  {172. }} ,
					{ 279 ,  {111. }} ,
					{ 280 ,  {122. }} ,
					{ 282 ,  {137. }} ,
					{ 283 ,  {150. }} ,
					{ 284 ,  {230. }} ,
					{ 288 ,  {233. }} ,
					{ 289 ,  {229. }} ,
					{ 290 ,  {220. }} ,
					{ 291 ,  {268. }} ,
					{ 293 ,  {69. }} ,
					{ 295 ,  {121. }} ,
					{ 296 ,  {131. }} ,
					{ 298 ,  {317. }} ,
					{ 299 ,  {306. }} ,
					{ 304 ,  {252. }} ,
					{ 306 ,  {107. }} ,
					{ 308 ,  {179. }} ,
					{ 309 ,  {163. }} ,
					{ 313 ,  {44. }} ,
					{ 314 ,  {48. }} ,
					{ 315 ,  {66. }} ,
					{ 318 ,  {135. }} ,
					{ 319 ,  {141. }} ,
					{ 321 ,  {100. }} ,
					{ 322 ,  {91. }} ,
					{ 326 ,  {71. }} ,
					{ 327 ,  {63. }} ,
					{ 328 ,  {80. }} ,
					{ 333 ,  {235. }} ,
					{ 334 ,  {219. }} ,
					{ 336 ,  {191. }} ,
					{ 337 ,  {190. }} ,
					{ 340 ,  {164. }} ,
					{ 341 ,  {120. }} ,
					{ 343 ,  {53. }} ,
					{ 344 ,  {67. }} ,
					{ 349 ,  {257. }} ,
					{ 350 ,  {253. }} ,
					{ 353 ,  {196. }} ,
					{ 354 ,  {197. }} ,
					{ 356 ,  {214. }} ,
					{ 357 ,  {217. }} ,
					{ 359 ,  {235. }} ,
					{ 361 ,  {127. }} ,
					{ 364 ,  {138. }} ,
					{ 365 ,  {143. }} ,
					{ 366 ,  {150. }} ,
					{ 368 ,  {185. }} ,
					{ 371 ,  {311. }} ,
					{ 374 ,  {281. }} ,
					{ 375 ,  {283. }} ,
					{ 376 ,  {277. }} ,
					{ 378 ,  {241. }} ,
					{ 379 ,  {248. }} ,
					{ 383 ,  {170. }} ,
					{ 384 ,  {175. }} ,
					{ 385 ,  {202. }} ,
					{ 389 ,  {297. }} ,
					{ 393 ,  {281. }} ,
					{ 396 ,  {232. }} ,
					{ 397 ,  {221. }} ,
					{ 399 ,  {246. }} ,
					{ 400 ,  {243. }} ,
					{ 402 ,  {242. }} ,
					{ 405 ,  {281. }} ,
					{ 406 ,  {277. }} ,
					{ 407 ,  {288. }} ,
					{ 411 ,  {263. }} ,
					{ 412 ,  {265. }} ,
					{ 413 ,  {244. }} ,
					{ 417 ,  {173. }} ,
					{ 418 ,  {178. }} ,
					{ 419 ,  {195. }} ,
					{ 422 ,  {215. }} ,
					{ 423 ,  {217. }} ,
					{ 428 ,  {232. }} ,
					{ 429 ,  {230. }} ,
					{ 430 ,  {236. }} ,
					{ 432 ,  {212. }} ,
					{ 433 ,  {222. }} ,
					{ 435 ,  {248. }} ,
					{ 436 ,  {252. }} ,
					{ 437 ,  {131. }} ,
					{ 443 ,  {257. }} ,
					{ 444 ,  {258. }} ,
					{ 445 ,  {261. }} ,
					{ 446 ,  {270. }} ,
					{ 448 ,  {275. }} ,
					{ 451 ,  {321. }} ,
					{ 452 ,  {332. }} ,
					{ 454 ,  {308. }} ,
					{ 455 ,  {310. }} ,
					{ 458 ,  {237. }} ,
					{ 459 ,  {264. }} ,
					{ 460 ,  {180. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.3484434187412262) ? ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_4 <= 0.15079138055443764) ? ( (scaler_output_2 <= -1.890932857990265) ? ( (scaler_output_5 <= -0.9574206471443176) ? ( (scaler_output_2 <= -2.083162784576416) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_11 <= -0.9548310339450836) ? ( 9 ) : ( (scaler_output_4 <= -1.307389885187149) ? ( 11 ) : ( 12 ) ) ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_11 <= 0.8663866519927979) ? ( (scaler_output_2 <= -0.39153920114040375) ? ( (scaler_output_9 <= -1.3813113570213318) ? ( (scaler_output_10 <= -1.1995700597763062) ? ( (scaler_output_10 <= -1.3060796856880188) ? ( (scaler_output_4 <= -1.4681342840194702) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (scaler_output_2 <= -1.160459041595459) ? ( 24 ) : ( 25 ) ) ) : ( (scaler_output_11 <= -1.0415557026863098) ? ( (scaler_output_10 <= -1.4223854541778564) ? ( (scaler_output_10 <= -1.8502122163772583) ? ( 29 ) : ( 30 ) ) : ( (scaler_output_6 <= 0.0042993659153580666) ? ( (scaler_output_5 <= -1.4204089045524597) ? ( (scaler_output_9 <= -0.5554534122347832) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_5 <= -0.9218062162399292) ? ( (scaler_output_8 <= -0.10677337646484375) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_4 <= -1.238499402999878) ? ( 41 ) : ( 42 ) ) ) ) : ( 43 ) ) ) : ( (scaler_output_8 <= 1.0088164508342743) ? ( (scaler_output_7 <= -0.6178813576698303) ? ( (scaler_output_10 <= -1.3735718727111816) ? ( (scaler_output_11 <= -0.8247440755367279) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_5 <= -1.4916377663612366) ? ( (scaler_output_11 <= -0.607932448387146) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_2 <= -0.8913370966911316) ? ( 55 ) : ( 56 ) ) ) ) : ( (scaler_output_6 <= 0.16179406642913818) ? ( (scaler_output_11 <= 0.38940105587244034) ? ( (scaler_output_2 <= -1.544918954372406) ? ( 60 ) : ( (scaler_output_7 <= -0.200878344476223) ? ( 62 ) : ( 63 ) ) ) : ( 64 ) ) : ( (scaler_output_5 <= -0.24513117223978043) ? ( (scaler_output_4 <= -0.7562662363052368) ? ( 67 ) : ( 68 ) ) : ( 69 ) ) ) ) : ( (scaler_output_5 <= -0.6725048720836639) ? ( 71 ) : ( 72 ) ) ) ) ) : ( (scaler_output_8 <= 0.05259660352021456) ? ( (scaler_output_4 <= -0.8825654089450836) ? ( (scaler_output_8 <= -1.0629931567236781) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) : ( (scaler_output_8 <= 0.3314940482378006) ? ( (scaler_output_10 <= -0.9655314236879349) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_7 <= -0.40937985479831696) ? ( 84 ) : ( (scaler_output_4 <= -1.1351637244224548) ? ( (scaler_output_6 <= -0.038653736002743244) ? ( 87 ) : ( 88 ) ) : ( (scaler_output_8 <= 0.7299190014600754) ? ( 90 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 92 ) : ( 93 ) ) ) ) ) ) ) ) : ( 94 ) ) : ( (scaler_output_8 <= 1.0885013937950134) ? ( (scaler_output_8 <= 0.8892889022827148) ? ( (scaler_output_11 <= 1.2132852673530579) ? ( (scaler_output_6 <= -0.6972679495811462) ? ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_5 <= -0.6725048720836639) ? ( 101 ) : ( (scaler_output_7 <= -0.6113656759262085) ? ( 103 ) : ( 104 ) ) ) : ( (scaler_output_5 <= -0.25700265169143677) ? ( 106 ) : ( 107 ) ) ) : ( (scaler_output_10 <= -0.927100658416748) ? ( (scaler_output_11 <= -0.04422220587730408) ? ( 110 ) : ( 111 ) ) : ( (scaler_output_10 <= -0.2761912941932678) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 114 ) : ( (scaler_output_6 <= 0.5340542942285538) ? ( (scaler_output_10 <= -0.3547855466604233) ? ( (scaler_output_6 <= 0.2477002777159214) ? ( (scaler_output_10 <= -0.6296394318342209) ? ( 119 ) : ( 120 ) ) : ( 121 ) ) : ( 122 ) ) : ( 123 ) ) ) : ( 124 ) ) ) ) : ( 125 ) ) : ( 126 ) ) : ( (scaler_output_8 <= 1.2080289125442505) ? ( 128 ) : ( (scaler_output_5 <= -0.7081193327903748) ? ( (scaler_output_8 <= 2.1642487049102783) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( 132 ) : ( 133 ) ) : ( 134 ) ) : ( (scaler_output_10 <= -0.45821118354797363) ? ( 136 ) : ( 137 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 0.7937689423561096) ? ( (scaler_output_2 <= -0.4684312008321285) ? ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_5 <= -1.2779509723186493) ? ( 142 ) : ( 143 ) ) : ( (scaler_output_10 <= -0.759138822555542) ? ( 145 ) : ( 146 ) ) ) : ( (scaler_output_10 <= -0.8499825596809387) ? ( 148 ) : ( 149 ) ) ) : ( (scaler_output_8 <= 0.45102153718471527) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 1.2760021090507507) ? ( (scaler_output_7 <= 0.37575861625373363) ? ( 154 ) : ( 155 ) ) : ( (scaler_output_2 <= 0.7618405520915985) ? ( 157 ) : ( 158 ) ) ) : ( 159 ) ) : ( (scaler_output_10 <= -0.9898112416267395) ? ( 161 ) : ( 162 ) ) ) ) ) : ( (scaler_output_9 <= 2.486976146697998) ? ( (scaler_output_5 <= -0.814962774515152) ? ( (scaler_output_9 <= 1.481922686100006) ? ( (scaler_output_6 <= -0.6972679793834686) ? ( (scaler_output_8 <= -0.3856708034873009) ? ( (scaler_output_11 <= -0.17430918663740158) ? ( 169 ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 171 ) : ( 172 ) ) ) : ( 173 ) ) : ( (scaler_output_7 <= 1.1837019324302673) ? ( (scaler_output_8 <= -1.3020480871200562) ? ( 176 ) : ( (scaler_output_10 <= 0.9365731477737427) ? ( (scaler_output_11 <= 0.17258943058550358) ? ( (scaler_output_8 <= 0.012754112482070923) ? ( (scaler_output_7 <= -0.2888399325311184) ? ( 181 ) : ( (scaler_output_8 <= -0.5848832726478577) ? ( 183 ) : ( 184 ) ) ) : ( (scaler_output_7 <= -0.30187126994132996) ? ( 186 ) : ( 187 ) ) ) : ( (scaler_output_8 <= -0.18645834922790527) ? ( 189 ) : ( 190 ) ) ) : ( (scaler_output_10 <= 1.1304457187652588) ? ( 192 ) : ( 193 ) ) ) ) : ( (scaler_output_8 <= -0.027088381350040436) ? ( (scaler_output_4 <= 0.288572296500206) ? ( 196 ) : ( (scaler_output_11 <= 0.43276339769363403) ? ( 198 ) : ( 199 ) ) ) : ( 200 ) ) ) ) : ( (scaler_output_2 <= -0.4299852102994919) ? ( 202 ) : ( 203 ) ) ) : ( (scaler_output_6 <= 1.8656004667282104) ? ( (scaler_output_6 <= -0.2820546478033066) ? ( (scaler_output_7 <= -0.80032017827034) ? ( (scaler_output_8 <= -0.9434656798839569) ? ( (scaler_output_2 <= -0.007079288363456726) ? ( 209 ) : ( 210 ) ) : ( (scaler_output_9 <= -0.3295110985636711) ? ( (scaler_output_10 <= 0.2829002895159647) ? ( (scaler_output_11 <= -1.2583673298358917) ? ( 214 ) : ( 215 ) ) : ( (scaler_output_4 <= -0.5610766150057316) ? ( 217 ) : ( 218 ) ) ) : ( 219 ) ) ) : ( (scaler_output_7 <= 0.09884255845099688) ? ( (scaler_output_7 <= -0.5885608494281769) ? ( (scaler_output_5 <= -0.2926171291619539) ? ( 223 ) : ( 224 ) ) : ( (scaler_output_10 <= 0.8256188631057739) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 227 ) : ( (scaler_output_4 <= -0.5495948940515518) ? ( 229 ) : ( 230 ) ) ) : ( 231 ) ) ) : ( 232 ) ) ) : ( (scaler_output_5 <= -0.518175482749939) ? ( (scaler_output_2 <= -0.5068771839141846) ? ( 235 ) : ( (scaler_output_5 <= -0.6250188946723938) ? ( 237 ) : ( 238 ) ) ) : ( (scaler_output_10 <= 1.2313350439071655) ? ( (scaler_output_2 <= -1.8524868488311768) ? ( 241 ) : ( (scaler_output_9 <= 0.6015268862247467) ? ( (scaler_output_7 <= 0.8742075264453888) ? ( (scaler_output_4 <= -1.0662733018398285) ? ( 245 ) : ( (scaler_output_10 <= 0.36755647510290146) ? ( (scaler_output_4 <= -0.07884346321225166) ? ( (scaler_output_11 <= 0.12922710180282593) ? ( 249 ) : ( 250 ) ) : ( 251 ) ) : ( (scaler_output_9 <= -0.17758440971374512) ? ( 253 ) : ( 254 ) ) ) ) : ( (scaler_output_7 <= 1.1967332661151886) ? ( (scaler_output_5 <= 0.03978463262319565) ? ( 257 ) : ( 258 ) ) : ( 259 ) ) ) : ( (scaler_output_7 <= 0.6852530539035797) ? ( (scaler_output_5 <= -0.4588180333375931) ? ( 262 ) : ( (scaler_output_2 <= -0.4299852028489113) ? ( 264 ) : ( (scaler_output_4 <= -0.055879976600408554) ? ( 266 ) : ( (scaler_output_4 <= 1.8271257542073727) ? ( 268 ) : ( 269 ) ) ) ) ) : ( (scaler_output_8 <= 0.09243909269571304) ? ( (scaler_output_7 <= 1.0436149835586548) ? ( (scaler_output_2 <= 0.06981268525123596) ? ( 273 ) : ( (scaler_output_2 <= 1.030962496995926) ? ( 275 ) : ( 276 ) ) ) : ( (scaler_output_10 <= 0.7121583521366119) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 279 ) : ( 280 ) ) : ( (scaler_output_8 <= -0.903623178601265) ? ( 282 ) : ( 283 ) ) ) ) : ( 284 ) ) ) ) ) : ( (scaler_output_7 <= 1.1348343789577484) ? ( (scaler_output_2 <= 0.3004886358976364) ? ( (scaler_output_7 <= 0.8090507984161377) ? ( 288 ) : ( 289 ) ) : ( 290 ) ) : ( 291 ) ) ) ) ) : ( (scaler_output_11 <= -0.43448315374553204) ? ( 293 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 295 ) : ( 296 ) ) ) ) ) : ( (scaler_output_9 <= 2.8765318393707275) ? ( 298 ) : ( 299 ) ) ) ) : ( (scaler_output_4 <= 0.2656088024377823) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_2 <= -0.46843118965625763) ? ( (scaler_output_4 <= -0.549594908952713) ? ( 304 ) : ( (scaler_output_6 <= -0.08160683885216713) ? ( 306 ) : ( (scaler_output_10 <= 0.6581843942403793) ? ( 308 ) : ( 309 ) ) ) ) : ( (scaler_output_7 <= 0.09232688322663307) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_11 <= -0.04422219842672348) ? ( 313 ) : ( 314 ) ) : ( 315 ) ) : ( (scaler_output_10 <= 0.09270798414945602) ? ( (scaler_output_5 <= 0.716459646821022) ? ( 318 ) : ( 319 ) ) : ( (scaler_output_5 <= 0.5027728229761124) ? ( 321 ) : ( 322 ) ) ) ) ) : ( (scaler_output_10 <= -0.6866148114204407) ? ( (scaler_output_8 <= 0.690076470375061) ? ( (scaler_output_8 <= 0.1322816014289856) ? ( 326 ) : ( 327 ) ) : ( 328 ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_2 <= 0.5311646014451981) ? ( (scaler_output_11 <= 0.47612571716308594) ? ( (scaler_output_8 <= -0.5848832502961159) ? ( 333 ) : ( 334 ) ) : ( (scaler_output_6 <= 0.4911011755466461) ? ( 336 ) : ( 337 ) ) ) : ( (scaler_output_8 <= -0.42551329731941223) ? ( (scaler_output_5 <= 0.7283311784267426) ? ( 340 ) : ( 341 ) ) : ( (scaler_output_7 <= 0.7145735500380397) ? ( 343 ) : ( 344 ) ) ) ) : ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_4 <= 0.058937442023307085) ? ( (scaler_output_2 <= 0.9156244993209839) ? ( (scaler_output_7 <= 1.0957404151558876) ? ( 349 ) : ( 350 ) ) : ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_10 <= 2.1930859684944153) ? ( 353 ) : ( 354 ) ) : ( (scaler_output_11 <= 0.04250246286392212) ? ( 356 ) : ( 357 ) ) ) ) : ( (scaler_output_5 <= 0.8233030736446381) ? ( 359 ) : ( (scaler_output_2 <= 0.8771785199642181) ? ( 361 ) : ( (scaler_output_10 <= 0.9112048149108887) ? ( (scaler_output_2 <= 1.223192423582077) ? ( 364 ) : ( 365 ) ) : ( 366 ) ) ) ) ) : ( (scaler_output_4 <= -0.6184853464365005) ? ( 368 ) : ( (scaler_output_10 <= 1.9930121898651123) ? ( (scaler_output_2 <= 1.0309624671936035) ? ( 371 ) : ( (scaler_output_2 <= 1.8767743110656738) ? ( (scaler_output_4 <= -0.30847830325365067) ? ( 374 ) : ( 375 ) ) : ( 376 ) ) ) : ( (scaler_output_10 <= 2.5366514921188354) ? ( 378 ) : ( 379 ) ) ) ) ) ) ) ) : ( (scaler_output_9 <= -0.5788267105817795) ? ( (scaler_output_2 <= -0.19930924847722054) ? ( (scaler_output_5 <= 1.6424360275268555) ? ( 383 ) : ( 384 ) ) : ( 385 ) ) : ( (scaler_output_4 <= 1.5515639185905457) ? ( (scaler_output_4 <= 1.5171186923980713) ? ( (scaler_output_4 <= 0.3115357756614685) ? ( 389 ) : ( (scaler_output_7 <= -0.200878344476223) ? ( (scaler_output_4 <= 1.2874838709831238) ? ( (scaler_output_10 <= 0.6141639351844788) ? ( 393 ) : ( (scaler_output_6 <= -0.12455993518233299) ? ( (scaler_output_4 <= 1.0004402995109558) ? ( 396 ) : ( 397 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 399 ) : ( 400 ) ) ) ) : ( (scaler_output_8 <= -1.461418092250824) ? ( 402 ) : ( (scaler_output_4 <= 1.4711917638778687) ? ( (scaler_output_7 <= -0.7872887849807739) ? ( 405 ) : ( 406 ) ) : ( 407 ) ) ) ) : ( (scaler_output_10 <= 0.36681170761585236) ? ( (scaler_output_9 <= 0.6950202658772469) ? ( (scaler_output_6 <= -0.06728914380073547) ? ( 411 ) : ( 412 ) ) : ( 413 ) ) : ( (scaler_output_6 <= 0.29065337777137756) ? ( (scaler_output_10 <= 0.7734600603580475) ? ( (scaler_output_8 <= -0.6645682454109192) ? ( 417 ) : ( 418 ) ) : ( 419 ) ) : ( (scaler_output_2 <= -0.1608632504940033) ? ( (scaler_output_7 <= 1.6365411877632141) ? ( 422 ) : ( 423 ) ) : ( (scaler_output_7 <= 1.3237888813018799) ? ( (scaler_output_7 <= 0.8123086392879486) ? ( (scaler_output_5 <= 1.7730224132537842) ? ( (scaler_output_7 <= 0.466978020966053) ? ( 428 ) : ( 429 ) ) : ( 430 ) ) : ( (scaler_output_5 <= 0.7520741373300552) ? ( 432 ) : ( 433 ) ) ) : ( (scaler_output_4 <= 1.1267394423484802) ? ( 435 ) : ( 436 ) ) ) ) ) ) ) ) : ( 437 ) ) : ( (scaler_output_7 <= 0.4474309980869293) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_9 <= 0.5508846640586853) ? ( (scaler_output_2 <= 1.0309624820947647) ? ( (scaler_output_9 <= 0.22365791350603104) ? ( 443 ) : ( 444 ) ) : ( 445 ) ) : ( 446 ) ) : ( (scaler_output_4 <= 1.597490906715393) ? ( 448 ) : ( (scaler_output_10 <= 0.6782595813274384) ? ( (scaler_output_11 <= 0.8663866519927979) ? ( 451 ) : ( 452 ) ) : ( (scaler_output_11 <= 1.3867346290498972) ? ( 454 ) : ( 455 ) ) ) ) ) : ( (scaler_output_7 <= 1.0208101272583008) ? ( (scaler_output_9 <= 0.6950202658772469) ? ( 458 ) : ( 459 ) ) : ( 460 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_0
		
	
		namespace EXT_SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {55. }} ,
					{ 9 ,  {99. }} ,
					{ 10 ,  {71. }} ,
					{ 12 ,  {200. }} ,
					{ 15 ,  {101. }} ,
					{ 17 ,  {137. }} ,
					{ 18 ,  {142. }} ,
					{ 21 ,  {185. }} ,
					{ 22 ,  {168. }} ,
					{ 25 ,  {158. }} ,
					{ 26 ,  {152. }} ,
					{ 28 ,  {150. }} ,
					{ 29 ,  {144. }} ,
					{ 31 ,  {68. }} ,
					{ 32 ,  {51. }} ,
					{ 38 ,  {45. }} ,
					{ 40 ,  {37. }} ,
					{ 42 ,  {40. }} ,
					{ 43 ,  {39. }} ,
					{ 44 ,  {92. }} ,
					{ 49 ,  {83. }} ,
					{ 51 ,  {55. }} ,
					{ 54 ,  {70. }} ,
					{ 55 ,  {67. }} ,
					{ 56 ,  {63. }} ,
					{ 57 ,  {125. }} ,
					{ 59 ,  {138. }} ,
					{ 60 ,  {104. }} ,
					{ 64 ,  {31. }} ,
					{ 66 ,  {44. }} ,
					{ 67 ,  {42. }} ,
					{ 70 ,  {65. }} ,
					{ 71 ,  {64. }} ,
					{ 72 ,  {55. }} ,
					{ 77 ,  {72. }} ,
					{ 79 ,  {81. }} ,
					{ 80 ,  {89. }} ,
					{ 81 ,  {96. }} ,
					{ 82 ,  {118. }} ,
					{ 84 ,  {60. }} ,
					{ 85 ,  {49. }} ,
					{ 89 ,  {129. }} ,
					{ 90 ,  {190. }} ,
					{ 93 ,  {25. }} ,
					{ 96 ,  {104. }} ,
					{ 97 ,  {88. }} ,
					{ 99 ,  {61. }} ,
					{ 100 ,  {53. }} ,
					{ 104 ,  {150. }} ,
					{ 106 ,  {72. }} ,
					{ 109 ,  {93. }} ,
					{ 110 ,  {92. }} ,
					{ 111 ,  {88. }} ,
					{ 115 ,  {96. }} ,
					{ 116 ,  {79. }} ,
					{ 117 ,  {153. }} ,
					{ 120 ,  {179. }} ,
					{ 121 ,  {160. }} ,
					{ 122 ,  {97. }} ,
					{ 125 ,  {111. }} ,
					{ 126 ,  {107. }} ,
					{ 131 ,  {54. }} ,
					{ 132 ,  {53. }} ,
					{ 135 ,  {71. }} ,
					{ 136 ,  {72. }} ,
					{ 138 ,  {59. }} ,
					{ 139 ,  {64. }} ,
					{ 140 ,  {91. }} ,
					{ 142 ,  {59. }} ,
					{ 145 ,  {94. }} ,
					{ 146 ,  {97. }} ,
					{ 148 ,  {87. }} ,
					{ 149 ,  {84. }} ,
					{ 152 ,  {177. }} ,
					{ 154 ,  {158. }} ,
					{ 155 ,  {146. }} ,
					{ 156 ,  {104. }} ,
					{ 157 ,  {230. }} ,
					{ 161 ,  {201. }} ,
					{ 164 ,  {182. }} ,
					{ 165 ,  {184. }} ,
					{ 166 ,  {191. }} ,
					{ 167 ,  {121. }} ,
					{ 171 ,  {167. }} ,
					{ 172 ,  {147. }} ,
					{ 176 ,  {140. }} ,
					{ 177 ,  {141. }} ,
					{ 178 ,  {187. }} ,
					{ 181 ,  {110. }} ,
					{ 182 ,  {103. }} ,
					{ 183 ,  {78. }} ,
					{ 184 ,  {70. }} ,
					{ 190 ,  {170. }} ,
					{ 191 ,  {175. }} ,
					{ 192 ,  {216. }} ,
					{ 194 ,  {219. }} ,
					{ 197 ,  {52. }} ,
					{ 198 ,  {77. }} ,
					{ 203 ,  {118. }} ,
					{ 204 ,  {124. }} ,
					{ 205 ,  {141. }} ,
					{ 207 ,  {104. }} ,
					{ 208 ,  {103. }} ,
					{ 209 ,  {73. }} ,
					{ 210 ,  {253. }} ,
					{ 212 ,  {288. }} ,
					{ 214 ,  {263. }} ,
					{ 215 ,  {237. }} ,
					{ 223 ,  {156. }} ,
					{ 224 ,  {163. }} ,
					{ 225 ,  {178. }} ,
					{ 228 ,  {66. }} ,
					{ 230 ,  {94. }} ,
					{ 232 ,  {86. }} ,
					{ 233 ,  {88. }} ,
					{ 234 ,  {154. }} ,
					{ 237 ,  {185. }} ,
					{ 239 ,  {168. }} ,
					{ 240 ,  {172. }} ,
					{ 242 ,  {200. }} ,
					{ 243 ,  {206. }} ,
					{ 247 ,  {84. }} ,
					{ 249 ,  {91. }} ,
					{ 250 ,  {90. }} ,
					{ 252 ,  {69. }} ,
					{ 253 ,  {78. }} ,
					{ 254 ,  {120. }} ,
					{ 264 ,  {151. }} ,
					{ 266 ,  {206. }} ,
					{ 267 ,  {200. }} ,
					{ 269 ,  {258. }} ,
					{ 270 ,  {249. }} ,
					{ 272 ,  {115. }} ,
					{ 273 ,  {134. }} ,
					{ 277 ,  {109. }} ,
					{ 278 ,  {101. }} ,
					{ 279 ,  {137. }} ,
					{ 283 ,  {174. }} ,
					{ 287 ,  {151. }} ,
					{ 288 ,  {144. }} ,
					{ 289 ,  {161. }} ,
					{ 290 ,  {131. }} ,
					{ 292 ,  {111. }} ,
					{ 294 ,  {122. }} ,
					{ 295 ,  {131. }} ,
					{ 297 ,  {185. }} ,
					{ 298 ,  {196. }} ,
					{ 300 ,  {202. }} ,
					{ 301 ,  {229. }} ,
					{ 303 ,  {259. }} ,
					{ 304 ,  {220. }} ,
					{ 307 ,  {84. }} ,
					{ 308 ,  {94. }} ,
					{ 310 ,  {123. }} ,
					{ 312 ,  {142. }} ,
					{ 313 ,  {150. }} ,
					{ 314 ,  {262. }} ,
					{ 316 ,  {48. }} ,
					{ 321 ,  {257. }} ,
					{ 323 ,  {236. }} ,
					{ 324 ,  {235. }} ,
					{ 325 ,  {283. }} ,
					{ 329 ,  {292. }} ,
					{ 330 ,  {232. }} ,
					{ 333 ,  {129. }} ,
					{ 337 ,  {173. }} ,
					{ 338 ,  {166. }} ,
					{ 340 ,  {195. }} ,
					{ 341 ,  {202. }} ,
					{ 342 ,  {232. }} ,
					{ 347 ,  {214. }} ,
					{ 348 ,  {212. }} ,
					{ 349 ,  {217. }} ,
					{ 350 ,  {198. }} ,
					{ 351 ,  {241. }} ,
					{ 354 ,  {144. }} ,
					{ 355 ,  {143. }} ,
					{ 356 ,  {67. }} ,
					{ 361 ,  {283. }} ,
					{ 362 ,  {277. }} ,
					{ 364 ,  {297. }} ,
					{ 365 ,  {311. }} ,
					{ 366 ,  {248. }} ,
					{ 367 ,  {191. }} ,
					{ 372 ,  {178. }} ,
					{ 373 ,  {151. }} ,
					{ 374 ,  {121. }} ,
					{ 376 ,  {308. }} ,
					{ 378 ,  {233. }} ,
					{ 380 ,  {221. }} ,
					{ 381 ,  {215. }} ,
					{ 384 ,  {192. }} ,
					{ 385 ,  {164. }} ,
					{ 389 ,  {272. }} ,
					{ 390 ,  {275. }} ,
					{ 392 ,  {306. }} ,
					{ 393 ,  {317. }} ,
					{ 397 ,  {321. }} ,
					{ 398 ,  {303. }} ,
					{ 400 ,  {242. }} ,
					{ 405 ,  {275. }} ,
					{ 406 ,  {277. }} ,
					{ 407 ,  {270. }} ,
					{ 409 ,  {261. }} ,
					{ 410 ,  {264. }} ,
					{ 411 ,  {310. }} ,
					{ 414 ,  {186. }} ,
					{ 415 ,  {180. }} ,
					{ 419 ,  {258. }} ,
					{ 420 ,  {252. }} ,
					{ 421 ,  {268. }} ,
					{ 423 ,  {230. }} ,
					{ 424 ,  {217. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.006606053444556892) ? ( (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_2 <= -1.544918954372406) ? ( (scaler_output_5 <= -1.990240454673767) ? ( 5 ) : ( (scaler_output_6 <= -0.25341925024986267) ? ( (scaler_output_10 <= -1.6862652897834778) ? ( (scaler_output_9 <= -1.252757966518402) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_10 <= -1.5203575491905212) ? ( 12 ) : ( (scaler_output_4 <= -1.5370246767997742) ? ( (scaler_output_4 <= -1.732214331626892) ? ( 15 ) : ( (scaler_output_6 <= -1.8283663392066956) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_8 <= 0.2518090605735779) ? ( (scaler_output_7 <= -1.4030197858810425) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_5 <= -1.3847943544387817) ? ( (scaler_output_2 <= -1.8524869084358215) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_5 <= -0.7437338009476662) ? ( 28 ) : ( 29 ) ) ) ) ) ) ) : ( (scaler_output_8 <= 1.0486589074134827) ? ( 31 ) : ( 32 ) ) ) ) : ( (scaler_output_7 <= 2.0144500732421875) ? ( (scaler_output_10 <= -0.7661082744598389) ? ( (scaler_output_9 <= -1.3657290935516357) ? ( (scaler_output_10 <= -1.0023006200790405) ? ( (scaler_output_2 <= -0.8528911173343658) ? ( 38 ) : ( (scaler_output_11 <= -0.9114687591791153) ? ( 40 ) : ( (scaler_output_4 <= -0.5151496678590775) ? ( 42 ) : ( 43 ) ) ) ) : ( 44 ) ) : ( (scaler_output_6 <= -0.8404449820518494) ? ( (scaler_output_6 <= -1.0695281624794006) ? ( (scaler_output_8 <= 0.5705489963293076) ? ( (scaler_output_7 <= -1.5203019380569458) ? ( 49 ) : ( (scaler_output_8 <= -0.5450407564640045) ? ( 51 ) : ( (scaler_output_8 <= 0.17212408035993576) ? ( (scaler_output_6 <= -1.6995070576667786) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) ) : ( 57 ) ) : ( (scaler_output_4 <= -0.8596019148826599) ? ( 59 ) : ( 60 ) ) ) : ( (scaler_output_6 <= -0.19614843744784594) ? ( (scaler_output_6 <= -0.6543148756027222) ? ( (scaler_output_11 <= -0.7380194067955017) ? ( 64 ) : ( (scaler_output_10 <= -0.8375878632068634) ? ( 66 ) : ( 67 ) ) ) : ( (scaler_output_5 <= -0.4944324865937233) ? ( (scaler_output_5 <= -1.479766309261322) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) ) : ( (scaler_output_4 <= -0.09032520605251193) ? ( (scaler_output_5 <= -0.1739022247493267) ? ( (scaler_output_5 <= -0.4232035428285599) ? ( (scaler_output_6 <= 0.04725246783345938) ? ( 77 ) : ( (scaler_output_10 <= -0.9591401219367981) ? ( 79 ) : ( 80 ) ) ) : ( 81 ) ) : ( 82 ) ) : ( (scaler_output_2 <= -0.1608632653951645) ? ( 84 ) : ( 85 ) ) ) ) ) ) : ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_7 <= -0.9045709371566772) ? ( (scaler_output_10 <= -0.4496985152363777) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_6 <= -0.568408653140068) ? ( (scaler_output_10 <= -0.45821118354797363) ? ( 93 ) : ( (scaler_output_10 <= -0.2871652990579605) ? ( (scaler_output_4 <= -1.2729446291923523) ? ( 96 ) : ( 97 ) ) : ( (scaler_output_8 <= -0.7442532181739807) ? ( 99 ) : ( 100 ) ) ) ) : ( (scaler_output_6 <= 0.03293476696126163) ? ( (scaler_output_6 <= -0.1818307414650917) ? ( (scaler_output_5 <= -0.6368903815746307) ? ( 104 ) : ( (scaler_output_4 <= -0.8596019446849823) ? ( 106 ) : ( (scaler_output_6 <= -0.2677369490265846) ? ( (scaler_output_5 <= -0.4232035428285599) ? ( 109 ) : ( 110 ) ) : ( 111 ) ) ) ) : ( (scaler_output_4 <= -1.0088645815849304) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( (scaler_output_10 <= -0.5838081538677216) ? ( 115 ) : ( 116 ) ) : ( 117 ) ) : ( (scaler_output_11 <= -0.43448314629495144) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 120 ) : ( 121 ) ) : ( 122 ) ) ) ) : ( (scaler_output_8 <= 0.21196657605469227) ? ( (scaler_output_8 <= -0.027088379487395287) ? ( 125 ) : ( 126 ) ) : ( (scaler_output_8 <= 1.0885014235973358) ? ( (scaler_output_2 <= 1.1078544855117798) ? ( (scaler_output_6 <= 0.20474717020988464) ? ( (scaler_output_11 <= -0.6946571096777916) ? ( 131 ) : ( 132 ) ) : ( (scaler_output_7 <= 0.8057929575443268) ? ( (scaler_output_6 <= 0.4624657928943634) ? ( 135 ) : ( 136 ) ) : ( (scaler_output_6 <= 0.8633613884449005) ? ( 138 ) : ( 139 ) ) ) ) : ( 140 ) ) : ( (scaler_output_11 <= -0.9114687442779541) ? ( 142 ) : ( (scaler_output_8 <= 1.4072413444519043) ? ( (scaler_output_11 <= -0.43448315374553204) ? ( 145 ) : ( 146 ) ) : ( (scaler_output_9 <= -0.8632023259997368) ? ( 148 ) : ( 149 ) ) ) ) ) ) ) ) ) : ( (scaler_output_7 <= 1.297726184129715) ? ( (scaler_output_7 <= 0.6103228032588959) ? ( 152 ) : ( (scaler_output_9 <= 0.10679122805595398) ? ( 154 ) : ( 155 ) ) ) : ( 156 ) ) ) ) : ( 157 ) ) ) : ( (scaler_output_4 <= 0.7593237161636353) ? ( (scaler_output_10 <= -0.39942847192287445) ? ( (scaler_output_8 <= -0.505198284983635) ? ( 161 ) : ( (scaler_output_6 <= 0.7631375193595886) ? ( (scaler_output_4 <= 0.6330245435237885) ? ( 164 ) : ( 165 ) ) : ( 166 ) ) ) : ( 167 ) ) : ( (scaler_output_2 <= 1.453868418931961) ? ( (scaler_output_4 <= 0.8741411566734314) ? ( (scaler_output_7 <= -0.08685409091413021) ? ( 171 ) : ( 172 ) ) : ( (scaler_output_10 <= -0.7719537019729614) ? ( (scaler_output_8 <= 0.45102153718471527) ? ( (scaler_output_8 <= -0.10677336156368256) ? ( 176 ) : ( 177 ) ) : ( 178 ) ) : ( (scaler_output_4 <= 1.3563743233680725) ? ( (scaler_output_8 <= 0.4111790359020233) ? ( 181 ) : ( 182 ) ) : ( 183 ) ) ) ) : ( 184 ) ) ) ) : ( (scaler_output_4 <= 1.103775978088379) ? ( (scaler_output_6 <= 1.5506110191345215) ? ( (scaler_output_2 <= -0.2762012258172035) ? ( (scaler_output_7 <= -0.4452160485088825) ? ( (scaler_output_5 <= 1.6424360275268555) ? ( 190 ) : ( 191 ) ) : ( 192 ) ) : ( (scaler_output_6 <= -1.312929093837738) ? ( 194 ) : ( (scaler_output_11 <= -0.261033833026886) ? ( (scaler_output_5 <= 1.2744197845458984) ? ( 197 ) : ( 198 ) ) : ( (scaler_output_10 <= -0.05069565773010254) ? ( (scaler_output_5 <= 1.3100342750549316) ? ( (scaler_output_10 <= -0.10011569410562515) ? ( (scaler_output_9 <= 0.07952231913805008) ? ( 203 ) : ( 204 ) ) : ( 205 ) ) : ( (scaler_output_5 <= 1.7848939299583435) ? ( 207 ) : ( 208 ) ) ) : ( 209 ) ) ) ) ) : ( 210 ) ) : ( (scaler_output_2 <= 0.5696105808019638) ? ( 212 ) : ( (scaler_output_11 <= -0.2610338404774666) ? ( 214 ) : ( 215 ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_4 <= -0.46922270953655243) ? ( (scaler_output_6 <= 0.5626896768808365) ? ( (scaler_output_11 <= 0.5194880366325378) ? ( (scaler_output_8 <= -0.465355783700943) ? ( (scaler_output_8 <= -0.9036231935024261) ? ( (scaler_output_9 <= 0.6950202658772469) ? ( 223 ) : ( 224 ) ) : ( 225 ) ) : ( (scaler_output_7 <= 0.020654495805501938) ? ( (scaler_output_8 <= -0.22630083560943604) ? ( 228 ) : ( (scaler_output_2 <= -1.698702871799469) ? ( 230 ) : ( (scaler_output_8 <= -0.027088381350040436) ? ( 232 ) : ( 233 ) ) ) ) : ( 234 ) ) ) : ( (scaler_output_10 <= 0.5251061916351318) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 237 ) : ( (scaler_output_10 <= 0.3965364992618561) ? ( 239 ) : ( 240 ) ) ) : ( (scaler_output_4 <= -0.9284923672676086) ? ( 242 ) : ( 243 ) ) ) ) : ( (scaler_output_5 <= 0.7876886129379272) ? ( (scaler_output_4 <= -0.7103392779827118) ? ( (scaler_output_2 <= 0.06981269270181656) ? ( 247 ) : ( (scaler_output_10 <= 1.1213099360466003) ? ( 249 ) : ( 250 ) ) ) : ( (scaler_output_10 <= 0.7253138273954391) ? ( 252 ) : ( 253 ) ) ) : ( 254 ) ) ) : ( (scaler_output_5 <= 0.3247004300355911) ? ( (scaler_output_11 <= 1.863720178604126) ? ( (scaler_output_11 <= 1.1265605986118317) ? ( (scaler_output_11 <= 0.6062126755714417) ? ( (scaler_output_10 <= 1.7632037997245789) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_2 <= 0.8002865314483643) ? ( (scaler_output_10 <= 0.5661222785711288) ? ( (scaler_output_4 <= -0.30847831070423126) ? ( 264 ) : ( (scaler_output_6 <= 0.6199604868888855) ? ( 266 ) : ( 267 ) ) ) : ( (scaler_output_6 <= 0.7201844304800034) ? ( 269 ) : ( 270 ) ) ) : ( (scaler_output_5 <= -0.7793483138084412) ? ( 272 ) : ( 273 ) ) ) : ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_6 <= 0.7917729020118713) ? ( (scaler_output_9 <= -0.08409103751182556) ? ( 277 ) : ( 278 ) ) : ( 279 ) ) : ( (scaler_output_8 <= -0.5450407713651657) ? ( (scaler_output_11 <= 0.43276339769363403) ? ( (scaler_output_10 <= 0.22553782165050507) ? ( 283 ) : ( (scaler_output_7 <= 0.8970123827457428) ? ( (scaler_output_6 <= -0.8261272609233856) ? ( (scaler_output_10 <= 0.5571414977312088) ? ( 287 ) : ( 288 ) ) : ( 289 ) ) : ( 290 ) ) ) : ( (scaler_output_7 <= -0.06404924020171165) ? ( 292 ) : ( (scaler_output_10 <= 0.3838014677166939) ? ( 294 ) : ( 295 ) ) ) ) : ( (scaler_output_6 <= 0.1904294677078724) ? ( 297 ) : ( 298 ) ) ) ) ) : ( (scaler_output_4 <= -0.04439823655411601) ? ( 300 ) : ( 301 ) ) ) : ( (scaler_output_2 <= 0.3004886358976364) ? ( 303 ) : ( 304 ) ) ) : ( (scaler_output_10 <= 0.4329192340373993) ? ( (scaler_output_5 <= 0.0872705951333046) ? ( 307 ) : ( 308 ) ) : ( (scaler_output_8 <= -0.4255133122205734) ? ( 310 ) : ( (scaler_output_5 <= 0.03978462889790535) ? ( 312 ) : ( 313 ) ) ) ) ) : ( 314 ) ) : ( (scaler_output_2 <= -0.2762012295424938) ? ( 316 ) : ( (scaler_output_11 <= 0.9097489714622498) ? ( (scaler_output_11 <= -0.434483140707016) ? ( (scaler_output_7 <= 1.3824299275875092) ? ( (scaler_output_8 <= -1.461418092250824) ? ( 321 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 323 ) : ( 324 ) ) ) : ( 325 ) ) : ( (scaler_output_7 <= 0.9458799064159393) ? ( (scaler_output_6 <= -0.29637234658002853) ? ( (scaler_output_11 <= 0.34603873640298843) ? ( 329 ) : ( 330 ) ) : ( (scaler_output_6 <= 0.51973657310009) ? ( (scaler_output_4 <= 0.20820008777081966) ? ( 333 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.8971046209335327) ? ( (scaler_output_5 <= 0.716459646821022) ? ( 337 ) : ( 338 ) ) : ( (scaler_output_8 <= 0.17212408781051636) ? ( 340 ) : ( 341 ) ) ) : ( 342 ) ) ) : ( (scaler_output_11 <= 0.6495750248432159) ? ( (scaler_output_4 <= 0.5182071477174759) ? ( (scaler_output_11 <= 0.34603874385356903) ? ( (scaler_output_11 <= -0.000859871506690979) ? ( 347 ) : ( 348 ) ) : ( 349 ) ) : ( 350 ) ) : ( 351 ) ) ) ) : ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_8 <= 0.17212411761283875) ? ( 354 ) : ( 355 ) ) : ( 356 ) ) ) ) : ( (scaler_output_8 <= 1.287713885307312) ? ( (scaler_output_9 <= 1.4741314947605133) ? ( (scaler_output_6 <= -0.23910154029726982) ? ( (scaler_output_2 <= 1.8767743110656738) ? ( 361 ) : ( 362 ) ) : ( (scaler_output_8 <= -0.7442532479763031) ? ( 364 ) : ( 365 ) ) ) : ( 366 ) ) : ( 367 ) ) ) ) ) ) : ( (scaler_output_11 <= 0.25931409001350403) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( (scaler_output_4 <= 1.3678560256958008) ? ( (scaler_output_2 <= 0.06981268525123596) ? ( 372 ) : ( 373 ) ) : ( 374 ) ) : ( (scaler_output_8 <= -0.38567081093788147) ? ( 376 ) : ( (scaler_output_2 <= -1.4680269956588745) ? ( 378 ) : ( (scaler_output_2 <= -0.7759991139173508) ? ( 380 ) : ( 381 ) ) ) ) ) : ( (scaler_output_5 <= -1.0642640888690948) ? ( (scaler_output_2 <= 0.4542726129293442) ? ( 384 ) : ( 385 ) ) : ( (scaler_output_5 <= -0.4588180258870125) ? ( (scaler_output_6 <= 0.29065338149666786) ? ( (scaler_output_4 <= 1.3678560853004456) ? ( 389 ) : ( 390 ) ) : ( (scaler_output_11 <= 1.9070825576782227) ? ( 392 ) : ( 393 ) ) ) : ( (scaler_output_6 <= 0.8060905933380127) ? ( (scaler_output_6 <= -0.2820546478033066) ? ( (scaler_output_6 <= -0.5397732555866241) ? ( 397 ) : ( 398 ) ) : ( (scaler_output_8 <= -1.5809455513954163) ? ( 400 ) : ( (scaler_output_6 <= 0.5626896917819977) ? ( (scaler_output_2 <= 1.1847464442253113) ? ( (scaler_output_5 <= 1.4999781250953674) ? ( (scaler_output_11 <= 1.1699229180812836) ? ( 405 ) : ( 406 ) ) : ( 407 ) ) : ( (scaler_output_7 <= 0.4897828847169876) ? ( 409 ) : ( 410 ) ) ) : ( 411 ) ) ) ) : ( (scaler_output_10 <= 1.0803674161434174) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 414 ) : ( 415 ) ) : ( (scaler_output_10 <= 1.5755862593650818) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( 419 ) : ( 420 ) ) : ( 421 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 423 ) : ( 424 ) ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_1
		
	
		namespace EXT_SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {101. }} ,
					{ 11 ,  {104. }} ,
					{ 12 ,  {90. }} ,
					{ 15 ,  {70. }} ,
					{ 17 ,  {37. }} ,
					{ 19 ,  {55. }} ,
					{ 20 ,  {48. }} ,
					{ 23 ,  {72. }} ,
					{ 25 ,  {79. }} ,
					{ 26 ,  {77. }} ,
					{ 27 ,  {96. }} ,
					{ 32 ,  {74. }} ,
					{ 33 ,  {71. }} ,
					{ 35 ,  {64. }} ,
					{ 36 ,  {61. }} ,
					{ 38 ,  {132. }} ,
					{ 43 ,  {88. }} ,
					{ 44 ,  {89. }} ,
					{ 46 ,  {97. }} ,
					{ 47 ,  {104. }} ,
					{ 49 ,  {83. }} ,
					{ 51 ,  {77. }} ,
					{ 52 ,  {71. }} ,
					{ 53 ,  {53. }} ,
					{ 58 ,  {78. }} ,
					{ 60 ,  {47. }} ,
					{ 61 ,  {53. }} ,
					{ 64 ,  {83. }} ,
					{ 65 ,  {113. }} ,
					{ 67 ,  {127. }} ,
					{ 68 ,  {138. }} ,
					{ 73 ,  {150. }} ,
					{ 74 ,  {144. }} ,
					{ 76 ,  {168. }} ,
					{ 77 ,  {160. }} ,
					{ 79 ,  {219. }} ,
					{ 80 ,  {200. }} ,
					{ 82 ,  {88. }} ,
					{ 84 ,  {104. }} ,
					{ 85 ,  {107. }} ,
					{ 90 ,  {143. }} ,
					{ 92 ,  {114. }} ,
					{ 93 ,  {104. }} ,
					{ 96 ,  {65. }} ,
					{ 98 ,  {77. }} ,
					{ 99 ,  {75. }} ,
					{ 101 ,  {128. }} ,
					{ 103 ,  {80. }} ,
					{ 105 ,  {96. }} ,
					{ 107 ,  {90. }} ,
					{ 108 ,  {92. }} ,
					{ 111 ,  {118. }} ,
					{ 113 ,  {179. }} ,
					{ 114 ,  {158. }} ,
					{ 116 ,  {91. }} ,
					{ 117 ,  {102. }} ,
					{ 121 ,  {60. }} ,
					{ 123 ,  {65. }} ,
					{ 124 ,  {66. }} ,
					{ 125 ,  {71. }} ,
					{ 127 ,  {103. }} ,
					{ 129 ,  {87. }} ,
					{ 130 ,  {84. }} ,
					{ 134 ,  {31. }} ,
					{ 135 ,  {39. }} ,
					{ 139 ,  {61. }} ,
					{ 140 ,  {60. }} ,
					{ 141 ,  {59. }} ,
					{ 145 ,  {51. }} ,
					{ 146 ,  {49. }} ,
					{ 147 ,  {44. }} ,
					{ 148 ,  {59. }} ,
					{ 149 ,  {88. }} ,
					{ 150 ,  {230. }} ,
					{ 151 ,  {216. }} ,
					{ 158 ,  {95. }} ,
					{ 159 ,  {90. }} ,
					{ 161 ,  {52. }} ,
					{ 162 ,  {70. }} ,
					{ 164 ,  {103. }} ,
					{ 165 ,  {118. }} ,
					{ 167 ,  {182. }} ,
					{ 169 ,  {127. }} ,
					{ 170 ,  {147. }} ,
					{ 172 ,  {170. }} ,
					{ 173 ,  {175. }} ,
					{ 176 ,  {113. }} ,
					{ 178 ,  {182. }} ,
					{ 179 ,  {191. }} ,
					{ 180 ,  {263. }} ,
					{ 191 ,  {162. }} ,
					{ 193 ,  {140. }} ,
					{ 194 ,  {131. }} ,
					{ 196 ,  {94. }} ,
					{ 197 ,  {88. }} ,
					{ 199 ,  {151. }} ,
					{ 201 ,  {202. }} ,
					{ 203 ,  {178. }} ,
					{ 204 ,  {190. }} ,
					{ 208 ,  {93. }} ,
					{ 209 ,  {92. }} ,
					{ 210 ,  {107. }} ,
					{ 211 ,  {52. }} ,
					{ 215 ,  {214. }} ,
					{ 216 ,  {206. }} ,
					{ 218 ,  {302. }} ,
					{ 219 ,  {258. }} ,
					{ 223 ,  {178. }} ,
					{ 224 ,  {153. }} ,
					{ 225 ,  {109. }} ,
					{ 227 ,  {235. }} ,
					{ 228 ,  {214. }} ,
					{ 231 ,  {86. }} ,
					{ 232 ,  {58. }} ,
					{ 236 ,  {154. }} ,
					{ 237 ,  {167. }} ,
					{ 239 ,  {111. }} ,
					{ 240 ,  {131. }} ,
					{ 242 ,  {102. }} ,
					{ 244 ,  {73. }} ,
					{ 245 ,  {84. }} ,
					{ 248 ,  {252. }} ,
					{ 249 ,  {257. }} ,
					{ 252 ,  {202. }} ,
					{ 253 ,  {217. }} ,
					{ 254 ,  {178. }} ,
					{ 257 ,  {126. }} ,
					{ 260 ,  {252. }} ,
					{ 261 ,  {242. }} ,
					{ 265 ,  {198. }} ,
					{ 266 ,  {195. }} ,
					{ 267 ,  {185. }} ,
					{ 270 ,  {221. }} ,
					{ 271 ,  {236. }} ,
					{ 274 ,  {209. }} ,
					{ 276 ,  {215. }} ,
					{ 277 ,  {212. }} ,
					{ 278 ,  {197. }} ,
					{ 281 ,  {90. }} ,
					{ 282 ,  {134. }} ,
					{ 284 ,  {202. }} ,
					{ 285 ,  {170. }} ,
					{ 289 ,  {137. }} ,
					{ 290 ,  {200. }} ,
					{ 297 ,  {91. }} ,
					{ 298 ,  {95. }} ,
					{ 299 ,  {68. }} ,
					{ 301 ,  {78. }} ,
					{ 303 ,  {69. }} ,
					{ 304 ,  {67. }} ,
					{ 305 ,  {141. }} ,
					{ 307 ,  {122. }} ,
					{ 308 ,  {121. }} ,
					{ 310 ,  {115. }} ,
					{ 313 ,  {143. }} ,
					{ 314 ,  {138. }} ,
					{ 315 ,  {131. }} ,
					{ 317 ,  {219. }} ,
					{ 318 ,  {196. }} ,
					{ 322 ,  {124. }} ,
					{ 324 ,  {102. }} ,
					{ 325 ,  {100. }} ,
					{ 327 ,  {241. }} ,
					{ 330 ,  {190. }} ,
					{ 332 ,  {179. }} ,
					{ 334 ,  {168. }} ,
					{ 335 ,  {172. }} ,
					{ 336 ,  {120. }} ,
					{ 340 ,  {272. }} ,
					{ 341 ,  {303. }} ,
					{ 345 ,  {277. }} ,
					{ 347 ,  {262. }} ,
					{ 348 ,  {259. }} ,
					{ 349 ,  {311. }} ,
					{ 352 ,  {164. }} ,
					{ 355 ,  {220. }} ,
					{ 356 ,  {225. }} ,
					{ 357 ,  {192. }} ,
					{ 361 ,  {242. }} ,
					{ 362 ,  {248. }} ,
					{ 363 ,  {230. }} ,
					{ 365 ,  {268. }} ,
					{ 366 ,  {258. }} ,
					{ 370 ,  {191. }} ,
					{ 371 ,  {202. }} ,
					{ 374 ,  {281. }} ,
					{ 375 ,  {270. }} ,
					{ 376 ,  {243. }} ,
					{ 379 ,  {142. }} ,
					{ 380 ,  {150. }} ,
					{ 381 ,  {186. }} ,
					{ 384 ,  {140. }} ,
					{ 385 ,  {131. }} ,
					{ 390 ,  {321. }} ,
					{ 392 ,  {288. }} ,
					{ 393 ,  {274. }} ,
					{ 395 ,  {332. }} ,
					{ 396 ,  {336. }} ,
					{ 400 ,  {258. }} ,
					{ 401 ,  {263. }} ,
					{ 404 ,  {277. }} ,
					{ 405 ,  {275. }} ,
					{ 406 ,  {270. }} ,
					{ 408 ,  {308. }} ,
					{ 409 ,  {310. }} ,
					{ 411 ,  {180. }} ,
					{ 415 ,  {264. }} ,
					{ 416 ,  {279. }} ,
					{ 418 ,  {252. }} ,
					{ 419 ,  {242. }} ,
					{ 422 ,  {233. }} ,
					{ 423 ,  {237. }} ,
					{ 424 ,  {220. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 1.4482282400131226) ? ( (scaler_output_10 <= -0.2121104747056961) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_5 <= 2.4259544610977173) ? ( (scaler_output_7 <= 2.0144500732421875) ? ( (scaler_output_4 <= -0.22810611873865128) ? ( (scaler_output_4 <= -1.2729446291923523) ? ( (scaler_output_4 <= -1.6977691054344177) ? ( (scaler_output_6 <= -0.8404449820518494) ? ( (scaler_output_6 <= -1.5420123040676117) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) : ( (scaler_output_10 <= -1.0979430079460144) ? ( (scaler_output_8 <= 0.05259661376476288) ? ( 15 ) : ( (scaler_output_6 <= -1.7281424403190613) ? ( 17 ) : ( (scaler_output_7 <= -1.2824798822402954) ? ( 19 ) : ( 20 ) ) ) ) : ( (scaler_output_4 <= -1.4107255339622498) ? ( (scaler_output_4 <= -1.4566525220870972) ? ( 23 ) : ( (scaler_output_11 <= -0.3911208212375641) ? ( 25 ) : ( 26 ) ) ) : ( 27 ) ) ) ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( (scaler_output_2 <= -0.19930924102663994) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_4 <= -0.7562662363052368) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_4 <= -0.3773687556385994) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_9 <= -0.1736888512969017) ? ( 38 ) : ( (scaler_output_10 <= -0.2761912941932678) ? ( (scaler_output_5 <= -0.363846093416214) ? ( (scaler_output_8 <= -1.0231506526470184) ? ( (scaler_output_9 <= 1.1858603656291962) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_11 <= 0.4761257115751505) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_7 <= -0.4387003779411316) ? ( 49 ) : ( (scaler_output_7 <= -0.04124438762664795) ? ( 51 ) : ( 52 ) ) ) ) : ( 53 ) ) ) ) : ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_4 <= -0.7103392779827118) ? ( (scaler_output_11 <= -0.8681064248085022) ? ( (scaler_output_5 <= 0.03978463262319565) ? ( 58 ) : ( (scaler_output_10 <= -0.6698991060256958) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_10 <= -1.4576122164726257) ? ( (scaler_output_7 <= -0.5755294859409332) ? ( 64 ) : ( 65 ) ) : ( (scaler_output_7 <= -0.5690138339996338) ? ( 67 ) : ( 68 ) ) ) ) : ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_5 <= -0.03144431486725807) ? ( (scaler_output_11 <= -0.34775848500430584) ? ( (scaler_output_7 <= -0.8100936412811279) ? ( 73 ) : ( 74 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 76 ) : ( 77 ) ) ) : ( (scaler_output_6 <= -0.9549866020679474) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_4 <= -0.5495948940515518) ? ( 82 ) : ( (scaler_output_6 <= 0.4624657928943634) ? ( 84 ) : ( 85 ) ) ) ) ) : ( (scaler_output_10 <= -0.5693611055612564) ? ( (scaler_output_10 <= -0.8099988996982574) ? ( (scaler_output_7 <= -0.7677417993545532) ? ( (scaler_output_7 <= -1.7385769486427307) ? ( 90 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 92 ) : ( 93 ) ) ) : ( (scaler_output_6 <= -0.1818307414650917) ? ( (scaler_output_6 <= -0.582726389169693) ? ( 96 ) : ( (scaler_output_2 <= -1.1220130771398544) ? ( 98 ) : ( 99 ) ) ) : ( (scaler_output_7 <= -0.41263769567012787) ? ( 101 ) : ( (scaler_output_10 <= -1.3526629209518433) ? ( 103 ) : ( (scaler_output_4 <= -0.7792297303676605) ? ( 105 ) : ( (scaler_output_6 <= 0.190429481677711) ? ( 107 ) : ( 108 ) ) ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_5 <= -0.24513117223978043) ? ( 111 ) : ( (scaler_output_6 <= 0.47678351774811745) ? ( 113 ) : ( 114 ) ) ) : ( (scaler_output_5 <= 0.716459646821022) ? ( 116 ) : ( 117 ) ) ) ) : ( (scaler_output_6 <= 0.6342781782150269) ? ( (scaler_output_10 <= -0.30948394536972046) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( 121 ) : ( (scaler_output_2 <= 0.7233945280313492) ? ( 123 ) : ( 124 ) ) ) : ( 125 ) ) : ( (scaler_output_6 <= 0.7917729020118713) ? ( 127 ) : ( (scaler_output_9 <= -0.8632023259997368) ? ( 129 ) : ( 130 ) ) ) ) ) ) ) ) : ( (scaler_output_10 <= -0.32257284969091415) ? ( (scaler_output_10 <= -1.2924543023109436) ? ( (scaler_output_8 <= 1.7259812578558922) ? ( 134 ) : ( 135 ) ) : ( (scaler_output_2 <= -0.39153921231627464) ? ( (scaler_output_6 <= 0.5913250893354416) ? ( (scaler_output_10 <= -1.036394476890564) ? ( 139 ) : ( 140 ) ) : ( 141 ) ) : ( (scaler_output_10 <= -0.7190600633621216) ? ( (scaler_output_5 <= 0.2890859544277191) ? ( (scaler_output_2 <= 0.1082586832344532) ? ( 145 ) : ( 146 ) ) : ( 147 ) ) : ( 148 ) ) ) ) : ( 149 ) ) ) : ( 150 ) ) : ( 151 ) ) : ( (scaler_output_7 <= -0.02169737219810486) ? ( (scaler_output_5 <= 1.3100342750549316) ? ( (scaler_output_10 <= -0.47039707005023956) ? ( (scaler_output_7 <= -0.2236832045018673) ? ( (scaler_output_11 <= -0.6946571171283722) ? ( (scaler_output_11 <= -1.0849180817604065) ? ( 158 ) : ( 159 ) ) : ( (scaler_output_11 <= -0.521207794547081) ? ( 161 ) : ( 162 ) ) ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 164 ) : ( 165 ) ) ) : ( (scaler_output_5 <= -0.7318623214960098) ? ( 167 ) : ( (scaler_output_10 <= -0.3547855466604233) ? ( 169 ) : ( 170 ) ) ) ) : ( (scaler_output_9 <= -0.9528001546859741) ? ( 172 ) : ( 173 ) ) ) : ( (scaler_output_10 <= -0.6600729525089264) ? ( (scaler_output_7 <= 0.23892950266599655) ? ( 176 ) : ( (scaler_output_5 <= 0.2178570032119751) ? ( 178 ) : ( 179 ) ) ) : ( 180 ) ) ) ) : ( (scaler_output_11 <= 0.6062126755714417) ? ( (scaler_output_7 <= 1.00126314163208) ? ( (scaler_output_10 <= 0.7317838072776794) ? ( (scaler_output_5 <= 0.7876885831356049) ? ( (scaler_output_11 <= 0.17258942872285843) ? ( (scaler_output_6 <= -0.2104661464691162) ? ( (scaler_output_5 <= -0.6368903815746307) ? ( (scaler_output_5 <= -1.0642641186714172) ? ( (scaler_output_10 <= 0.025169917265884578) ? ( (scaler_output_4 <= -0.9973828494548798) ? ( 191 ) : ( (scaler_output_6 <= -1.0981636047363281) ? ( 193 ) : ( 194 ) ) ) : ( (scaler_output_8 <= 0.012754112482070923) ? ( 196 ) : ( 197 ) ) ) : ( (scaler_output_6 <= -1.8570017218589783) ? ( 199 ) : ( (scaler_output_2 <= -1.314242959022522) ? ( 201 ) : ( (scaler_output_6 <= -1.3415645360946655) ? ( 203 ) : ( 204 ) ) ) ) ) : ( (scaler_output_10 <= 0.5165996253490448) ? ( (scaler_output_10 <= 0.16237224719952792) ? ( (scaler_output_4 <= -0.4807044416666031) ? ( 208 ) : ( 209 ) ) : ( 210 ) ) : ( 211 ) ) ) : ( (scaler_output_5 <= -0.31636013090610504) ? ( (scaler_output_5 <= -0.7081193625926971) ? ( (scaler_output_7 <= 0.37250077724456787) ? ( 215 ) : ( 216 ) ) : ( (scaler_output_2 <= -1.6218109130859375) ? ( 218 ) : ( 219 ) ) ) : ( (scaler_output_5 <= 0.18224253063090146) ? ( (scaler_output_8 <= 1.3275563418865204) ? ( (scaler_output_8 <= 0.012754112482070923) ? ( 223 ) : ( 224 ) ) : ( 225 ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( 227 ) : ( 228 ) ) ) ) ) : ( (scaler_output_6 <= -0.7688564956188202) ? ( (scaler_output_7 <= -0.8459298610687256) ? ( 231 ) : ( 232 ) ) : ( (scaler_output_6 <= 0.39087727665901184) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.0589374303817749) ? ( 236 ) : ( 237 ) ) : ( (scaler_output_8 <= -0.9036231935024261) ? ( 239 ) : ( 240 ) ) ) : ( (scaler_output_9 <= -1.0112335085868835) ? ( 242 ) : ( (scaler_output_11 <= 0.47612571716308594) ? ( 244 ) : ( 245 ) ) ) ) ) ) : ( (scaler_output_4 <= -0.147733923047781) ? ( (scaler_output_6 <= -0.9549866020679474) ? ( 248 ) : ( 249 ) ) : ( (scaler_output_10 <= 0.6173531115055084) ? ( (scaler_output_7 <= -0.29535557329654694) ? ( 252 ) : ( 253 ) ) : ( 254 ) ) ) ) : ( (scaler_output_8 <= 0.6103914976119995) ? ( (scaler_output_5 <= -0.8505772352218628) ? ( 257 ) : ( (scaler_output_11 <= -1.345091998577118) ? ( (scaler_output_7 <= -0.4126376807689667) ? ( 260 ) : ( 261 ) ) : ( (scaler_output_10 <= 0.975840836763382) ? ( (scaler_output_8 <= -0.14661585073918104) ? ( (scaler_output_4 <= 0.40338971838355064) ? ( 265 ) : ( 266 ) ) : ( 267 ) ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_6 <= 0.4051949828863144) ? ( 270 ) : ( 271 ) ) : ( (scaler_output_10 <= 2.0374627709388733) ? ( (scaler_output_5 <= 0.2890859544277191) ? ( 274 ) : ( (scaler_output_2 <= 0.26204265654087067) ? ( 276 ) : ( 277 ) ) ) : ( 278 ) ) ) ) ) ) : ( (scaler_output_7 <= 0.6363855004310608) ? ( (scaler_output_4 <= -0.5610766336321831) ? ( 281 ) : ( 282 ) ) : ( (scaler_output_11 <= -0.000859871506690979) ? ( 284 ) : ( 285 ) ) ) ) ) : ( (scaler_output_6 <= 2.524214744567871) ? ( (scaler_output_2 <= -1.6602569222450256) ? ( (scaler_output_7 <= 1.2325695157051086) ? ( 289 ) : ( 290 ) ) : ( (scaler_output_2 <= 0.9156244993209839) ? ( (scaler_output_7 <= 1.8254956007003784) ? ( (scaler_output_5 <= 0.8589175343513489) ? ( (scaler_output_6 <= 1.5935641527175903) ? ( (scaler_output_10 <= 1.1127632856369019) ? ( (scaler_output_2 <= 0.3773806318640709) ? ( 297 ) : ( 298 ) ) : ( 299 ) ) : ( (scaler_output_4 <= -0.6758940517902374) ? ( 301 ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( 303 ) : ( 304 ) ) ) ) : ( 305 ) ) : ( (scaler_output_10 <= 0.834924042224884) ? ( 307 ) : ( 308 ) ) ) : ( (scaler_output_4 <= 0.03597395680844784) ? ( 310 ) : ( (scaler_output_11 <= -0.0008598789572715759) ? ( (scaler_output_9 <= 0.6950202658772469) ? ( 313 ) : ( 314 ) ) : ( 315 ) ) ) ) ) : ( (scaler_output_5 <= 0.1822425127029419) ? ( 317 ) : ( 318 ) ) ) ) : ( (scaler_output_4 <= -0.18217914551496506) ? ( (scaler_output_10 <= 0.27863484621047974) ? ( (scaler_output_7 <= -0.19110482931137085) ? ( 322 ) : ( (scaler_output_4 <= -0.49218617379665375) ? ( 324 ) : ( 325 ) ) ) : ( (scaler_output_11 <= 0.823024332523346) ? ( 327 ) : ( (scaler_output_10 <= 0.6280058026313782) ? ( (scaler_output_9 <= 0.6794380247592926) ? ( 330 ) : ( (scaler_output_2 <= 0.10825872421264648) ? ( 332 ) : ( (scaler_output_10 <= 0.3965364992618561) ? ( 334 ) : ( 335 ) ) ) ) : ( 336 ) ) ) ) : ( (scaler_output_8 <= -0.4255133122205734) ? ( (scaler_output_7 <= -0.8198671936988831) ? ( (scaler_output_10 <= 1.3506872653961182) ? ( 340 ) : ( 341 ) ) : ( (scaler_output_10 <= 0.5535468608140945) ? ( (scaler_output_8 <= -0.6645682454109192) ? ( (scaler_output_10 <= 0.15563700627535582) ? ( 345 ) : ( (scaler_output_5 <= -0.3401031047105789) ? ( 347 ) : ( 348 ) ) ) : ( 349 ) ) : ( (scaler_output_9 <= 2.0078227519989014) ? ( (scaler_output_6 <= -0.18183073704130948) ? ( 352 ) : ( (scaler_output_7 <= 0.7438940554857254) ? ( (scaler_output_9 <= 1.1780692636966705) ? ( 355 ) : ( 356 ) ) : ( 357 ) ) ) : ( (scaler_output_6 <= 1.2499393224716187) ? ( (scaler_output_2 <= 1.7614363431930542) ? ( (scaler_output_8 <= -1.7004730105400085) ? ( 361 ) : ( 362 ) ) : ( 363 ) ) : ( (scaler_output_7 <= 1.952551245689392) ? ( 365 ) : ( 366 ) ) ) ) ) ) : ( (scaler_output_7 <= 0.8253399729728699) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_10 <= 0.7871350049972534) ? ( 370 ) : ( 371 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_6 <= 0.09020556509494781) ? ( 374 ) : ( 375 ) ) : ( 376 ) ) ) : ( (scaler_output_6 <= 1.6937880516052246) ? ( (scaler_output_4 <= 0.357462749350816) ? ( 379 ) : ( 380 ) ) : ( 381 ) ) ) ) ) ) ) : ( (scaler_output_10 <= -0.49448759853839874) ? ( (scaler_output_11 <= 0.823024332523346) ? ( 384 ) : ( 385 ) ) : ( (scaler_output_7 <= 0.4474309980869293) ? ( (scaler_output_10 <= 0.6651052534580231) ? ( (scaler_output_2 <= 0.6080565899610519) ? ( (scaler_output_6 <= -0.7545387744903564) ? ( 390 ) : ( (scaler_output_11 <= 0.6495749950408936) ? ( 392 ) : ( 393 ) ) ) : ( (scaler_output_8 <= -0.7840957194566727) ? ( 395 ) : ( 396 ) ) ) : ( (scaler_output_7 <= 0.12164740636944771) ? ( (scaler_output_7 <= -0.6178813576698303) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 400 ) : ( 401 ) ) : ( (scaler_output_4 <= 2.13713276386261) ? ( (scaler_output_8 <= -0.9434657096862793) ? ( 404 ) : ( 405 ) ) : ( 406 ) ) ) : ( (scaler_output_2 <= 0.33893463015556335) ? ( 408 ) : ( 409 ) ) ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( 411 ) : ( (scaler_output_8 <= -0.18645834736526012) ? ( (scaler_output_8 <= -0.5450407713651657) ? ( (scaler_output_11 <= 1.5601838827133179) ? ( 415 ) : ( 416 ) ) : ( (scaler_output_4 <= 2.5619572401046753) ? ( 418 ) : ( 419 ) ) ) : ( (scaler_output_6 <= 2.3953554034233093) ? ( (scaler_output_4 <= 2.0337971448898315) ? ( 422 ) : ( 423 ) ) : ( 424 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_2
		
	
		namespace EXT_SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {55. }} ,
					{ 10 ,  {74. }} ,
					{ 11 ,  {77. }} ,
					{ 13 ,  {40. }} ,
					{ 18 ,  {158. }} ,
					{ 19 ,  {178. }} ,
					{ 22 ,  {150. }} ,
					{ 23 ,  {160. }} ,
					{ 25 ,  {137. }} ,
					{ 27 ,  {142. }} ,
					{ 29 ,  {144. }} ,
					{ 30 ,  {146. }} ,
					{ 32 ,  {128. }} ,
					{ 33 ,  {113. }} ,
					{ 35 ,  {135. }} ,
					{ 36 ,  {79. }} ,
					{ 41 ,  {70. }} ,
					{ 42 ,  {78. }} ,
					{ 44 ,  {55. }} ,
					{ 45 ,  {54. }} ,
					{ 46 ,  {101. }} ,
					{ 51 ,  {129. }} ,
					{ 53 ,  {116. }} ,
					{ 54 ,  {118. }} ,
					{ 55 ,  {160. }} ,
					{ 57 ,  {132. }} ,
					{ 60 ,  {83. }} ,
					{ 62 ,  {88. }} ,
					{ 63 ,  {89. }} ,
					{ 65 ,  {97. }} ,
					{ 66 ,  {107. }} ,
					{ 67 ,  {53. }} ,
					{ 72 ,  {85. }} ,
					{ 73 ,  {77. }} ,
					{ 76 ,  {37. }} ,
					{ 78 ,  {51. }} ,
					{ 80 ,  {48. }} ,
					{ 81 ,  {45. }} ,
					{ 85 ,  {65. }} ,
					{ 86 ,  {72. }} ,
					{ 88 ,  {53. }} ,
					{ 89 ,  {52. }} ,
					{ 90 ,  {90. }} ,
					{ 91 ,  {94. }} ,
					{ 94 ,  {96. }} ,
					{ 95 ,  {179. }} ,
					{ 100 ,  {98. }} ,
					{ 101 ,  {97. }} ,
					{ 102 ,  {104. }} ,
					{ 104 ,  {87. }} ,
					{ 105 ,  {92. }} ,
					{ 106 ,  {66. }} ,
					{ 111 ,  {25. }} ,
					{ 112 ,  {31. }} ,
					{ 113 ,  {44. }} ,
					{ 116 ,  {68. }} ,
					{ 117 ,  {81. }} ,
					{ 119 ,  {51. }} ,
					{ 122 ,  {60. }} ,
					{ 123 ,  {61. }} ,
					{ 124 ,  {59. }} ,
					{ 127 ,  {168. }} ,
					{ 128 ,  {113. }} ,
					{ 130 ,  {67. }} ,
					{ 131 ,  {60. }} ,
					{ 134 ,  {182. }} ,
					{ 136 ,  {210. }} ,
					{ 137 ,  {201. }} ,
					{ 141 ,  {96. }} ,
					{ 142 ,  {121. }} ,
					{ 146 ,  {184. }} ,
					{ 147 ,  {182. }} ,
					{ 150 ,  {145. }} ,
					{ 151 ,  {147. }} ,
					{ 152 ,  {140. }} ,
					{ 153 ,  {103. }} ,
					{ 155 ,  {110. }} ,
					{ 157 ,  {70. }} ,
					{ 158 ,  {90. }} ,
					{ 165 ,  {178. }} ,
					{ 167 ,  {140. }} ,
					{ 168 ,  {151. }} ,
					{ 171 ,  {185. }} ,
					{ 172 ,  {190. }} ,
					{ 174 ,  {198. }} ,
					{ 175 ,  {200. }} ,
					{ 182 ,  {168. }} ,
					{ 183 ,  {162. }} ,
					{ 184 ,  {131. }} ,
					{ 189 ,  {92. }} ,
					{ 190 ,  {93. }} ,
					{ 191 ,  {88. }} ,
					{ 192 ,  {109. }} ,
					{ 193 ,  {153. }} ,
					{ 197 ,  {58. }} ,
					{ 198 ,  {52. }} ,
					{ 200 ,  {94. }} ,
					{ 204 ,  {85. }} ,
					{ 205 ,  {84. }} ,
					{ 206 ,  {78. }} ,
					{ 208 ,  {74. }} ,
					{ 209 ,  {69. }} ,
					{ 211 ,  {102. }} ,
					{ 212 ,  {134. }} ,
					{ 214 ,  {173. }} ,
					{ 215 ,  {142. }} ,
					{ 217 ,  {214. }} ,
					{ 218 ,  {154. }} ,
					{ 222 ,  {111. }} ,
					{ 225 ,  {245. }} ,
					{ 226 ,  {259. }} ,
					{ 229 ,  {200. }} ,
					{ 230 ,  {206. }} ,
					{ 232 ,  {214. }} ,
					{ 233 ,  {219. }} ,
					{ 239 ,  {168. }} ,
					{ 240 ,  {150. }} ,
					{ 244 ,  {102. }} ,
					{ 245 ,  {111. }} ,
					{ 246 ,  {122. }} ,
					{ 247 ,  {173. }} ,
					{ 250 ,  {196. }} ,
					{ 252 ,  {174. }} ,
					{ 254 ,  {180. }} ,
					{ 255 ,  {178. }} ,
					{ 256 ,  {164. }} ,
					{ 259 ,  {122. }} ,
					{ 260 ,  {115. }} ,
					{ 261 ,  {84. }} ,
					{ 262 ,  {262. }} ,
					{ 264 ,  {209. }} ,
					{ 267 ,  {121. }} ,
					{ 269 ,  {137. }} ,
					{ 270 ,  {131. }} ,
					{ 273 ,  {126. }} ,
					{ 274 ,  {101. }} ,
					{ 275 ,  {68. }} ,
					{ 277 ,  {161. }} ,
					{ 281 ,  {229. }} ,
					{ 282 ,  {225. }} ,
					{ 283 ,  {202. }} ,
					{ 284 ,  {268. }} ,
					{ 287 ,  {346. }} ,
					{ 289 ,  {275. }} ,
					{ 290 ,  {279. }} ,
					{ 294 ,  {242. }} ,
					{ 295 ,  {233. }} ,
					{ 296 ,  {220. }} ,
					{ 297 ,  {180. }} ,
					{ 302 ,  {219. }} ,
					{ 305 ,  {53. }} ,
					{ 307 ,  {71. }} ,
					{ 308 ,  {65. }} ,
					{ 310 ,  {73. }} ,
					{ 314 ,  {113. }} ,
					{ 315 ,  {118. }} ,
					{ 316 ,  {104. }} ,
					{ 317 ,  {141. }} ,
					{ 319 ,  {244. }} ,
					{ 322 ,  {170. }} ,
					{ 323 ,  {175. }} ,
					{ 324 ,  {155. }} ,
					{ 329 ,  {252. }} ,
					{ 330 ,  {292. }} ,
					{ 331 ,  {202. }} ,
					{ 335 ,  {107. }} ,
					{ 337 ,  {129. }} ,
					{ 338 ,  {138. }} ,
					{ 339 ,  {66. }} ,
					{ 344 ,  {171. }} ,
					{ 346 ,  {164. }} ,
					{ 347 ,  {163. }} ,
					{ 349 ,  {150. }} ,
					{ 350 ,  {144. }} ,
					{ 352 ,  {143. }} ,
					{ 355 ,  {235. }} ,
					{ 356 ,  {217. }} ,
					{ 357 ,  {196. }} ,
					{ 360 ,  {273. }} ,
					{ 361 ,  {248. }} ,
					{ 364 ,  {195. }} ,
					{ 366 ,  {178. }} ,
					{ 367 ,  {166. }} ,
					{ 370 ,  {232. }} ,
					{ 371 ,  {222. }} ,
					{ 372 ,  {198. }} ,
					{ 376 ,  {311. }} ,
					{ 379 ,  {281. }} ,
					{ 380 ,  {270. }} ,
					{ 382 ,  {283. }} ,
					{ 383 ,  {297. }} ,
					{ 385 ,  {232. }} ,
					{ 386 ,  {246. }} ,
					{ 387 ,  {120. }} ,
					{ 392 ,  {321. }} ,
					{ 396 ,  {293. }} ,
					{ 397 ,  {308. }} ,
					{ 399 ,  {263. }} ,
					{ 401 ,  {288. }} ,
					{ 404 ,  {281. }} ,
					{ 405 ,  {280. }} ,
					{ 406 ,  {275. }} ,
					{ 408 ,  {270. }} ,
					{ 410 ,  {258. }} ,
					{ 411 ,  {257. }} ,
					{ 413 ,  {131. }} ,
					{ 417 ,  {277. }} ,
					{ 418 ,  {274. }} ,
					{ 419 ,  {263. }} ,
					{ 421 ,  {220. }} ,
					{ 422 ,  {242. }} ,
					{ 423 ,  {310. }} ,
					{ 427 ,  {233. }} ,
					{ 428 ,  {230. }} ,
					{ 429 ,  {252. }} ,
					{ 431 ,  {217. }} ,
					{ 432 ,  {186. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_4 <= -0.26255134493112564) ? ( (scaler_output_8 <= 0.6502339839935303) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_5 <= -1.7409390807151794) ? ( (scaler_output_2 <= -1.3526889383792877) ? ( 8 ) : ( (scaler_output_10 <= -0.9779577553272247) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_7 <= -2.240283727645874) ? ( 13 ) : ( (scaler_output_5 <= -0.007701336173340678) ? ( (scaler_output_6 <= 0.018617066321894526) ? ( (scaler_output_10 <= -1.0023006200790405) ? ( (scaler_output_5 <= -0.7793482914566994) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_5 <= -1.2423365116119385) ? ( (scaler_output_6 <= -0.6256794603541493) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 25 ) : ( (scaler_output_4 <= -1.1810906827449799) ? ( 27 ) : ( (scaler_output_10 <= -0.8089841902256012) ? ( 29 ) : ( 30 ) ) ) ) ) ) : ( (scaler_output_5 <= -0.9218062162399292) ? ( 32 ) : ( 33 ) ) ) : ( (scaler_output_10 <= -0.5973204374313354) ? ( 35 ) : ( 36 ) ) ) ) ) : ( (scaler_output_11 <= -0.5645701140165329) ? ( (scaler_output_10 <= -0.5336756557226181) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_6 <= -1.4417884349822998) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_2 <= -0.8144451044499874) ? ( 44 ) : ( 45 ) ) ) : ( 46 ) ) : ( (scaler_output_10 <= -0.2761912941932678) ? ( (scaler_output_4 <= -0.6414488255977631) ? ( (scaler_output_10 <= -0.5033947080373764) ? ( (scaler_output_7 <= -1.161939948797226) ? ( 51 ) : ( (scaler_output_11 <= 0.47612570226192474) ? ( 53 ) : ( 54 ) ) ) : ( 55 ) ) : ( (scaler_output_6 <= -0.7831741571426392) ? ( 57 ) : ( (scaler_output_10 <= -0.36575955152511597) ? ( (scaler_output_6 <= -0.7259033620357513) ? ( 60 ) : ( (scaler_output_7 <= 0.21286681294441223) ? ( 62 ) : ( 63 ) ) ) : ( (scaler_output_7 <= 0.5484239161014557) ? ( 65 ) : ( 66 ) ) ) ) ) : ( 67 ) ) ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_7 <= 0.77321457862854) ? ( (scaler_output_2 <= -1.8524868488311768) ? ( (scaler_output_7 <= -1.0023060142993927) ? ( 72 ) : ( 73 ) ) : ( (scaler_output_4 <= -1.1696089804172516) ? ( (scaler_output_7 <= -1.611521303653717) ? ( 76 ) : ( (scaler_output_2 <= -1.4680269360542297) ? ( 78 ) : ( (scaler_output_4 <= -1.4222072958946228) ? ( 80 ) : ( 81 ) ) ) ) : ( (scaler_output_5 <= -0.4232035428285599) ? ( (scaler_output_4 <= -0.8136749565601349) ? ( (scaler_output_5 <= -1.408537358045578) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_7 <= 0.13467875868082047) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) ) ) : ( 91 ) ) : ( (scaler_output_11 <= -0.8681064248085022) ? ( (scaler_output_10 <= -0.9227692186832428) ? ( 94 ) : ( 95 ) ) : ( (scaler_output_2 <= 1.184746414422989) ? ( (scaler_output_8 <= 2.1642487049102783) ? ( (scaler_output_11 <= 0.25931408256292343) ? ( (scaler_output_9 <= -1.252757966518402) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) : ( (scaler_output_11 <= 0.7796619776636362) ? ( 104 ) : ( 105 ) ) ) : ( 106 ) ) ) ) ) : ( (scaler_output_11 <= -0.17430917732417583) ? ( (scaler_output_7 <= -0.536435455083847) ? ( (scaler_output_11 <= -0.5212077796459198) ? ( (scaler_output_4 <= -0.21662437170743942) ? ( 111 ) : ( 112 ) ) : ( 113 ) ) : ( (scaler_output_10 <= -1.0032868385314941) ? ( (scaler_output_6 <= 0.20474717020988464) ? ( 116 ) : ( 117 ) ) : ( (scaler_output_5 <= -1.171107530593872) ? ( 119 ) : ( (scaler_output_7 <= 0.1411944255232811) ? ( (scaler_output_9 <= -0.2788688689470291) ? ( 122 ) : ( 123 ) ) : ( 124 ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= 0.17258943803608418) ? ( 127 ) : ( 128 ) ) : ( (scaler_output_7 <= -0.9143444299697876) ? ( 130 ) : ( 131 ) ) ) ) ) : ( (scaler_output_6 <= -1.0122573673725128) ? ( (scaler_output_7 <= -1.2792220711708069) ? ( 134 ) : ( (scaler_output_4 <= 0.25412706285715103) ? ( 136 ) : ( 137 ) ) ) : ( (scaler_output_2 <= 0.8002865314483643) ? ( (scaler_output_4 <= 0.5067253857851028) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( 141 ) : ( 142 ) ) : ( (scaler_output_8 <= 1.287713885307312) ? ( (scaler_output_2 <= -0.775999128818512) ? ( (scaler_output_6 <= -0.12455993890762329) ? ( 146 ) : ( 147 ) ) : ( (scaler_output_11 <= -0.04422219097614288) ? ( (scaler_output_7 <= -0.1487529743462801) ? ( 150 ) : ( 151 ) ) : ( 152 ) ) ) : ( 153 ) ) ) : ( (scaler_output_2 <= 1.1463004648685455) ? ( 155 ) : ( (scaler_output_6 <= -0.5254555642604828) ? ( 157 ) : ( 158 ) ) ) ) ) ) : ( (scaler_output_4 <= 1.4711917042732239) ? ( (scaler_output_10 <= 1.4572433829307556) ? ( (scaler_output_9 <= 0.632691353559494) ? ( (scaler_output_7 <= -0.8752503991127014) ? ( (scaler_output_5 <= -0.814962774515152) ? ( (scaler_output_4 <= -0.8251567184925079) ? ( 165 ) : ( (scaler_output_11 <= -0.781381756067276) ? ( 167 ) : ( 168 ) ) ) : ( (scaler_output_2 <= -0.4299851804971695) ? ( (scaler_output_2 <= -1.544918954372406) ? ( 171 ) : ( 172 ) ) : ( (scaler_output_6 <= -0.7115856856107712) ? ( 174 ) : ( 175 ) ) ) ) : ( (scaler_output_5 <= 0.3247004300355911) ? ( (scaler_output_11 <= 1.5601838827133179) ? ( (scaler_output_10 <= 0.13326948881149292) ? ( (scaler_output_5 <= -0.7081193327903748) ? ( (scaler_output_2 <= 0.26204267144203186) ? ( (scaler_output_11 <= -0.6512947604060173) ? ( 182 ) : ( 183 ) ) : ( 184 ) ) : ( (scaler_output_11 <= -0.08758452534675598) ? ( (scaler_output_4 <= -0.07884346321225166) ? ( (scaler_output_5 <= -0.20951669663190842) ? ( (scaler_output_11 <= -1.1282804012298584) ? ( 189 ) : ( 190 ) ) : ( 191 ) ) : ( 192 ) ) : ( 193 ) ) ) : ( (scaler_output_2 <= 0.9156244993209839) ? ( (scaler_output_6 <= -0.6113617718219757) ? ( (scaler_output_4 <= 0.162273108959198) ? ( 197 ) : ( 198 ) ) : ( (scaler_output_6 <= -0.3106900528073311) ? ( 200 ) : ( (scaler_output_5 <= -0.38758906722068787) ? ( (scaler_output_2 <= 0.41582660377025604) ? ( (scaler_output_11 <= 0.3026764038950205) ? ( 204 ) : ( 205 ) ) : ( 206 ) ) : ( (scaler_output_10 <= 0.3958131670951843) ? ( 208 ) : ( 209 ) ) ) ) ) : ( (scaler_output_10 <= 0.671795517206192) ? ( 211 ) : ( 212 ) ) ) ) : ( (scaler_output_5 <= -0.10267326608300209) ? ( 214 ) : ( 215 ) ) ) : ( (scaler_output_7 <= -0.08685409277677536) ? ( 217 ) : ( 218 ) ) ) ) : ( (scaler_output_10 <= 0.8805187046527863) ? ( (scaler_output_11 <= -0.04422220401465893) ? ( (scaler_output_10 <= -0.007231429219245911) ? ( 222 ) : ( (scaler_output_8 <= -0.9833081960678101) ? ( (scaler_output_2 <= 0.6465025693178177) ? ( 225 ) : ( 226 ) ) : ( (scaler_output_2 <= -1.3911350071430206) ? ( (scaler_output_11 <= -0.434483140707016) ? ( 229 ) : ( 230 ) ) : ( (scaler_output_2 <= 0.031366705894470215) ? ( 232 ) : ( 233 ) ) ) ) ) : ( (scaler_output_11 <= 1.7769954800605774) ? ( (scaler_output_7 <= 1.4638758301734924) ? ( (scaler_output_4 <= 0.5296888649463654) ? ( (scaler_output_8 <= -1.2223631143569946) ? ( (scaler_output_4 <= -0.5610766261816025) ? ( 239 ) : ( 240 ) ) : ( (scaler_output_8 <= -0.7840957045555115) ? ( (scaler_output_8 <= -0.9036231935024261) ? ( (scaler_output_5 <= -1.0998785942792892) ? ( 244 ) : ( 245 ) ) : ( 246 ) ) : ( 247 ) ) ) : ( (scaler_output_7 <= 1.2684056758880615) ? ( (scaler_output_4 <= 0.6904332637786865) ? ( 250 ) : ( (scaler_output_10 <= 0.1766851246356964) ? ( 252 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 254 ) : ( 255 ) ) ) ) : ( 256 ) ) ) : ( (scaler_output_11 <= 1.0398359298706055) ? ( (scaler_output_8 <= -0.10677336901426315) ? ( 259 ) : ( 260 ) ) : ( 261 ) ) ) : ( 262 ) ) ) : ( (scaler_output_4 <= -0.5036679357290268) ? ( 264 ) : ( (scaler_output_10 <= 1.2356672883033752) ? ( (scaler_output_9 <= 1.8558961153030396) ? ( 267 ) : ( (scaler_output_11 <= -0.3477585017681122) ? ( 269 ) : ( 270 ) ) ) : ( (scaler_output_7 <= 0.30408623814582825) ? ( (scaler_output_11 <= -0.6079324632883072) ? ( 273 ) : ( 274 ) ) : ( 275 ) ) ) ) ) ) : ( (scaler_output_7 <= -0.5071149319410324) ? ( 277 ) : ( (scaler_output_5 <= -0.10267326608300209) ? ( (scaler_output_8 <= 0.1322816014289856) ? ( (scaler_output_11 <= 0.3460387233644724) ? ( 281 ) : ( 282 ) ) : ( 283 ) ) : ( 284 ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= 0.5194880440831184) ? ( 287 ) : ( (scaler_output_11 <= 1.2132852971553802) ? ( 289 ) : ( 290 ) ) ) : ( (scaler_output_5 <= 0.36031490564346313) ? ( (scaler_output_6 <= 2.008777469396591) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 294 ) : ( 295 ) ) : ( 296 ) ) : ( 297 ) ) ) ) ) : ( (scaler_output_4 <= 1.0004402995109558) ? ( (scaler_output_10 <= -0.02190703817177564) ? ( (scaler_output_4 <= 0.48376190662384033) ? ( (scaler_output_6 <= -0.9979397058486938) ? ( 302 ) : ( (scaler_output_4 <= -0.4462592303752899) ? ( (scaler_output_7 <= 0.14771010261029005) ? ( 305 ) : ( (scaler_output_6 <= 0.2190648652613163) ? ( 307 ) : ( 308 ) ) ) : ( (scaler_output_5 <= 0.7876885831356049) ? ( 310 ) : ( (scaler_output_6 <= 0.8776791095733643) ? ( (scaler_output_6 <= 0.14747637510299683) ? ( (scaler_output_2 <= 0.22359664738178253) ? ( 314 ) : ( 315 ) ) : ( 316 ) ) : ( 317 ) ) ) ) ) : ( (scaler_output_5 <= 1.1438333690166473) ? ( 319 ) : ( (scaler_output_11 <= 1.386734589934349) ? ( (scaler_output_6 <= -1.5276946127414703) ? ( 322 ) : ( 323 ) ) : ( 324 ) ) ) ) : ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_6 <= -0.38227854669094086) ? ( (scaler_output_8 <= -0.02708837389945984) ? ( (scaler_output_9 <= -0.08409103751182556) ? ( 329 ) : ( 330 ) ) : ( 331 ) ) : ( (scaler_output_10 <= 0.42656734585762024) ? ( (scaler_output_8 <= -0.5450407564640045) ? ( (scaler_output_2 <= 0.06981268525123596) ? ( 335 ) : ( (scaler_output_4 <= 0.08190092630684376) ? ( 337 ) : ( 338 ) ) ) : ( 339 ) ) : ( (scaler_output_4 <= 0.3115357756614685) ? ( (scaler_output_8 <= -0.3458283022046089) ? ( (scaler_output_4 <= 0.02449221909046173) ? ( (scaler_output_11 <= -0.3043961673974991) ? ( 344 ) : ( (scaler_output_7 <= 0.10210039466619492) ? ( 346 ) : ( 347 ) ) ) : ( (scaler_output_8 <= -0.8637807071208954) ? ( 349 ) : ( 350 ) ) ) : ( (scaler_output_10 <= 0.5541640222072601) ? ( 352 ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_5 <= 1.4999781250953674) ? ( 355 ) : ( 356 ) ) : ( 357 ) ) ) ) : ( (scaler_output_4 <= 0.3919079750776291) ? ( (scaler_output_2 <= 1.1463004648685455) ? ( 360 ) : ( 361 ) ) : ( (scaler_output_7 <= 0.1607414446771145) ? ( (scaler_output_11 <= -0.13094685971736908) ? ( 364 ) : ( (scaler_output_10 <= 0.8817024230957031) ? ( 366 ) : ( 367 ) ) ) : ( (scaler_output_4 <= 0.6674697995185852) ? ( (scaler_output_5 <= 1.0369899272918701) ? ( 370 ) : ( 371 ) ) : ( 372 ) ) ) ) ) ) ) : ( (scaler_output_6 <= 1.0494914948940277) ? ( (scaler_output_4 <= 0.7593237161636353) ? ( (scaler_output_10 <= 0.4248119443655014) ? ( 376 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.11634616553783417) ? ( 379 ) : ( 380 ) ) : ( (scaler_output_6 <= -0.3106900602579117) ? ( 382 ) : ( 383 ) ) ) ) : ( (scaler_output_5 <= 0.7639456391334534) ? ( 385 ) : ( 386 ) ) ) : ( 387 ) ) ) ) : ( (scaler_output_6 <= 0.9206322133541107) ? ( (scaler_output_6 <= 0.605642780661583) ? ( (scaler_output_11 <= 1.0398359596729279) ? ( (scaler_output_6 <= -0.7545387744903564) ? ( 392 ) : ( (scaler_output_11 <= 0.43276339769363403) ? ( (scaler_output_2 <= -0.12241725996136665) ? ( (scaler_output_7 <= -0.14549514651298523) ? ( 396 ) : ( 397 ) ) : ( (scaler_output_10 <= -0.5069800764322281) ? ( 399 ) : ( (scaler_output_10 <= -0.051263004541397095) ? ( 401 ) : ( (scaler_output_2 <= 0.7618405371904373) ? ( (scaler_output_5 <= 1.5355926156044006) ? ( 404 ) : ( 405 ) ) : ( 406 ) ) ) ) ) : ( (scaler_output_6 <= -0.16751304268836975) ? ( 408 ) : ( (scaler_output_11 <= 0.606212705373764) ? ( 410 ) : ( 411 ) ) ) ) ) : ( (scaler_output_11 <= 1.3867345452308655) ? ( 413 ) : ( (scaler_output_9 <= 0.7456624805927277) ? ( (scaler_output_2 <= 0.3773806318640709) ? ( (scaler_output_4 <= 1.7467535138130188) ? ( 417 ) : ( 418 ) ) : ( 419 ) ) : ( (scaler_output_5 <= 1.0132469832897186) ? ( 421 ) : ( 422 ) ) ) ) ) : ( 423 ) ) : ( (scaler_output_7 <= 1.6463146209716797) ? ( (scaler_output_6 <= 1.7081058025360107) ? ( (scaler_output_10 <= 1.4901374876499176) ? ( 427 ) : ( 428 ) ) : ( 429 ) ) : ( (scaler_output_2 <= -0.7759990990161896) ? ( 431 ) : ( 432 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_3
		
	
		namespace EXT_SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {101. }} ,
					{ 8 ,  {137. }} ,
					{ 9 ,  {158. }} ,
					{ 13 ,  {51. }} ,
					{ 15 ,  {48. }} ,
					{ 16 ,  {49. }} ,
					{ 18 ,  {37. }} ,
					{ 22 ,  {65. }} ,
					{ 23 ,  {53. }} ,
					{ 25 ,  {72. }} ,
					{ 26 ,  {77. }} ,
					{ 28 ,  {96. }} ,
					{ 30 ,  {68. }} ,
					{ 32 ,  {86. }} ,
					{ 33 ,  {79. }} ,
					{ 37 ,  {94. }} ,
					{ 38 ,  {101. }} ,
					{ 39 ,  {116. }} ,
					{ 40 ,  {70. }} ,
					{ 45 ,  {143. }} ,
					{ 46 ,  {140. }} ,
					{ 48 ,  {71. }} ,
					{ 49 ,  {90. }} ,
					{ 51 ,  {200. }} ,
					{ 55 ,  {185. }} ,
					{ 56 ,  {168. }} ,
					{ 59 ,  {144. }} ,
					{ 61 ,  {152. }} ,
					{ 62 ,  {150. }} ,
					{ 63 ,  {160. }} ,
					{ 64 ,  {113. }} ,
					{ 71 ,  {74. }} ,
					{ 72 ,  {65. }} ,
					{ 74 ,  {92. }} ,
					{ 75 ,  {88. }} ,
					{ 80 ,  {75. }} ,
					{ 81 ,  {83. }} ,
					{ 82 ,  {104. }} ,
					{ 86 ,  {114. }} ,
					{ 87 ,  {102. }} ,
					{ 88 ,  {87. }} ,
					{ 96 ,  {129. }} ,
					{ 97 ,  {128. }} ,
					{ 99 ,  {125. }} ,
					{ 100 ,  {127. }} ,
					{ 101 ,  {138. }} ,
					{ 103 ,  {178. }} ,
					{ 104 ,  {135. }} ,
					{ 105 ,  {160. }} ,
					{ 106 ,  {88. }} ,
					{ 108 ,  {168. }} ,
					{ 109 ,  {179. }} ,
					{ 112 ,  {47. }} ,
					{ 113 ,  {58. }} ,
					{ 114 ,  {94. }} ,
					{ 117 ,  {67. }} ,
					{ 118 ,  {92. }} ,
					{ 120 ,  {25. }} ,
					{ 122 ,  {39. }} ,
					{ 123 ,  {51. }} ,
					{ 126 ,  {156. }} ,
					{ 129 ,  {216. }} ,
					{ 130 ,  {214. }} ,
					{ 131 ,  {219. }} ,
					{ 133 ,  {66. }} ,
					{ 136 ,  {132. }} ,
					{ 138 ,  {127. }} ,
					{ 139 ,  {124. }} ,
					{ 140 ,  {103. }} ,
					{ 147 ,  {64. }} ,
					{ 148 ,  {60. }} ,
					{ 149 ,  {53. }} ,
					{ 150 ,  {74. }} ,
					{ 154 ,  {128. }} ,
					{ 155 ,  {154. }} ,
					{ 157 ,  {107. }} ,
					{ 158 ,  {104. }} ,
					{ 162 ,  {71. }} ,
					{ 163 ,  {72. }} ,
					{ 164 ,  {65. }} ,
					{ 166 ,  {94. }} ,
					{ 167 ,  {84. }} ,
					{ 170 ,  {59. }} ,
					{ 172 ,  {55. }} ,
					{ 173 ,  {53. }} ,
					{ 176 ,  {80. }} ,
					{ 177 ,  {97. }} ,
					{ 180 ,  {64. }} ,
					{ 181 ,  {63. }} ,
					{ 182 ,  {69. }} ,
					{ 183 ,  {177. }} ,
					{ 187 ,  {102. }} ,
					{ 188 ,  {104. }} ,
					{ 190 ,  {88. }} ,
					{ 191 ,  {89. }} ,
					{ 196 ,  {214. }} ,
					{ 197 ,  {202. }} ,
					{ 200 ,  {245. }} ,
					{ 201 ,  {262. }} ,
					{ 202 ,  {230. }} ,
					{ 203 ,  {150. }} ,
					{ 208 ,  {107. }} ,
					{ 209 ,  {111. }} ,
					{ 211 ,  {100. }} ,
					{ 212 ,  {91. }} ,
					{ 213 ,  {129. }} ,
					{ 214 ,  {253. }} ,
					{ 217 ,  {252. }} ,
					{ 218 ,  {283. }} ,
					{ 223 ,  {144. }} ,
					{ 225 ,  {126. }} ,
					{ 226 ,  {131. }} ,
					{ 228 ,  {198. }} ,
					{ 231 ,  {164. }} ,
					{ 232 ,  {163. }} ,
					{ 233 ,  {150. }} ,
					{ 236 ,  {281. }} ,
					{ 237 ,  {249. }} ,
					{ 242 ,  {206. }} ,
					{ 243 ,  {209. }} ,
					{ 244 ,  {217. }} ,
					{ 245 ,  {197. }} ,
					{ 248 ,  {190. }} ,
					{ 251 ,  {170. }} ,
					{ 252 ,  {171. }} ,
					{ 253 ,  {196. }} ,
					{ 254 ,  {131. }} ,
					{ 257 ,  {191. }} ,
					{ 258 ,  {200. }} ,
					{ 261 ,  {95. }} ,
					{ 262 ,  {90. }} ,
					{ 264 ,  {142. }} ,
					{ 265 ,  {134. }} ,
					{ 270 ,  {276. }} ,
					{ 272 ,  {90. }} ,
					{ 274 ,  {201. }} ,
					{ 277 ,  {172. }} ,
					{ 278 ,  {180. }} ,
					{ 279 ,  {164. }} ,
					{ 282 ,  {90. }} ,
					{ 283 ,  {52. }} ,
					{ 290 ,  {196. }} ,
					{ 291 ,  {184. }} ,
					{ 293 ,  {167. }} ,
					{ 295 ,  {178. }} ,
					{ 296 ,  {174. }} ,
					{ 297 ,  {147. }} ,
					{ 299 ,  {140. }} ,
					{ 300 ,  {110. }} ,
					{ 303 ,  {128. }} ,
					{ 304 ,  {122. }} ,
					{ 305 ,  {111. }} ,
					{ 307 ,  {141. }} ,
					{ 309 ,  {85. }} ,
					{ 311 ,  {103. }} ,
					{ 312 ,  {96. }} ,
					{ 317 ,  {170. }} ,
					{ 319 ,  {118. }} ,
					{ 320 ,  {113. }} ,
					{ 323 ,  {182. }} ,
					{ 324 ,  {175. }} ,
					{ 325 ,  {191. }} ,
					{ 329 ,  {202. }} ,
					{ 330 ,  {151. }} ,
					{ 335 ,  {288. }} ,
					{ 336 ,  {293. }} ,
					{ 337 ,  {281. }} ,
					{ 339 ,  {263. }} ,
					{ 340 ,  {259. }} ,
					{ 343 ,  {178. }} ,
					{ 344 ,  {173. }} ,
					{ 348 ,  {257. }} ,
					{ 349 ,  {244. }} ,
					{ 350 ,  {275. }} ,
					{ 352 ,  {195. }} ,
					{ 354 ,  {233. }} ,
					{ 355 ,  {222. }} ,
					{ 359 ,  {180. }} ,
					{ 360 ,  {186. }} ,
					{ 362 ,  {131. }} ,
					{ 363 ,  {155. }} ,
					{ 364 ,  {270. }} ,
					{ 367 ,  {261. }} ,
					{ 368 ,  {242. }} ,
					{ 371 ,  {321. }} ,
					{ 372 ,  {308. }} ,
					{ 373 ,  {274. }} ,
					{ 376 ,  {68. }} ,
					{ 377 ,  {137. }} ,
					{ 384 ,  {220. }} ,
					{ 385 ,  {225. }} ,
					{ 387 ,  {208. }} ,
					{ 388 ,  {212. }} ,
					{ 391 ,  {297. }} ,
					{ 392 ,  {273. }} ,
					{ 394 ,  {258. }} ,
					{ 395 ,  {230. }} ,
					{ 398 ,  {233. }} ,
					{ 399 ,  {217. }} ,
					{ 405 ,  {272. }} ,
					{ 407 ,  {270. }} ,
					{ 408 ,  {268. }} ,
					{ 409 ,  {281. }} ,
					{ 412 ,  {306. }} ,
					{ 413 ,  {303. }} ,
					{ 414 ,  {277. }} ,
					{ 416 ,  {275. }} ,
					{ 418 ,  {258. }} ,
					{ 419 ,  {252. }} ,
					{ 420 ,  {220. }} ,
					{ 425 ,  {221. }} ,
					{ 426 ,  {220. }} ,
					{ 427 ,  {215. }} ,
					{ 429 ,  {166. }} ,
					{ 430 ,  {173. }} ,
					{ 432 ,  {248. }} ,
					{ 434 ,  {246. }} ,
					{ 436 ,  {235. }} ,
					{ 437 ,  {236. }} ,
					{ 439 ,  {317. }} ,
					{ 440 ,  {310. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.2082000896334648) ? ( (scaler_output_10 <= 0.5037015527486801) ? ( (scaler_output_9 <= 0.632691353559494) ? ( (scaler_output_4 <= -1.2155359387397766) ? ( (scaler_output_2 <= -2.0062708258628845) ? ( (scaler_output_10 <= -1.2239128947257996) ? ( 6 ) : ( (scaler_output_4 <= -1.5829516649246216) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= -1.4910977482795715) ? ( (scaler_output_5 <= -0.6725048720836639) ? ( 13 ) : ( (scaler_output_2 <= -0.007079290226101875) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_6 <= -1.5563300251960754) ? ( 18 ) : ( (scaler_output_10 <= -0.780195564031601) ? ( (scaler_output_11 <= -0.607932448387146) ? ( (scaler_output_10 <= -1.065903514623642) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_10 <= -0.9448501169681549) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_9 <= -0.9450090527534485) ? ( 28 ) : ( (scaler_output_5 <= -0.4588180303107947) ? ( 30 ) : ( (scaler_output_2 <= -0.7375531047582626) ? ( 32 ) : ( 33 ) ) ) ) ) ) ) : ( (scaler_output_2 <= -1.2757970094680786) ? ( (scaler_output_8 <= 0.012754112482070923) ? ( (scaler_output_2 <= -1.6602569222450256) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( 40 ) ) ) ) : ( (scaler_output_2 <= -1.0835670828819275) ? ( (scaler_output_11 <= -1.301729679107666) ? ( (scaler_output_7 <= -1.474692165851593) ? ( (scaler_output_9 <= -1.252757966518402) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_2 <= -1.9293789267539978) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_10 <= -1.2987452745437622) ? ( 51 ) : ( (scaler_output_6 <= 0.09020556788891554) ? ( (scaler_output_8 <= 0.2518090605735779) ? ( (scaler_output_7 <= -1.4030197858810425) ? ( 55 ) : ( 56 ) ) : ( (scaler_output_2 <= -1.3526890277862549) ? ( (scaler_output_10 <= -0.6677853167057037) ? ( 59 ) : ( (scaler_output_6 <= -1.670871615409851) ? ( 61 ) : ( 62 ) ) ) : ( 63 ) ) ) : ( 64 ) ) ) ) : ( (scaler_output_7 <= -0.10640110820531845) ? ( (scaler_output_5 <= 0.2772144675254822) ? ( (scaler_output_4 <= -0.2510695978999138) ? ( (scaler_output_5 <= -1.2660794854164124) ? ( (scaler_output_5 <= -1.8121680617332458) ? ( (scaler_output_4 <= -0.9284923672676086) ? ( 71 ) : ( 72 ) ) : ( (scaler_output_2 <= 0.6080565750598907) ? ( 74 ) : ( 75 ) ) ) : ( (scaler_output_5 <= -0.04331581108272076) ? ( (scaler_output_10 <= -1.4965637922286987) ? ( (scaler_output_11 <= -0.17430917918682098) ? ( (scaler_output_11 <= -1.3017296493053436) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( (scaler_output_9 <= -1.0112335085868835) ? ( (scaler_output_8 <= 3.2001534700393677) ? ( (scaler_output_4 <= -0.8366384506225586) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) : ( (scaler_output_6 <= -0.13887764140963554) ? ( (scaler_output_4 <= -0.6414488255977631) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_11 <= 0.25931409001350403) ? ( (scaler_output_5 <= -0.4588180184364319) ? ( (scaler_output_5 <= -0.7081193625926971) ? ( (scaler_output_6 <= -1.0408927947282791) ? ( 96 ) : ( 97 ) ) : ( (scaler_output_10 <= -0.8666098713874817) ? ( 99 ) : ( 100 ) ) ) : ( 101 ) ) : ( (scaler_output_10 <= -0.773518294095993) ? ( 103 ) : ( 104 ) ) ) : ( 105 ) ) : ( 106 ) ) : ( (scaler_output_2 <= -0.12241725623607635) ? ( 108 ) : ( 109 ) ) ) ) ) : ( (scaler_output_4 <= -0.4003322571516037) ? ( (scaler_output_4 <= -0.7677479982376099) ? ( 112 ) : ( 113 ) ) : ( 114 ) ) ) ) : ( (scaler_output_8 <= 0.2518090605735779) ? ( (scaler_output_7 <= -0.8328985422849655) ? ( 117 ) : ( 118 ) ) : ( (scaler_output_2 <= -0.23775523528456688) ? ( 120 ) : ( (scaler_output_7 <= -0.536435455083847) ? ( 122 ) : ( 123 ) ) ) ) ) : ( (scaler_output_11 <= -0.17430917732417583) ? ( (scaler_output_8 <= -0.5848832502961159) ? ( 126 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.4778454601764679) ? ( 129 ) : ( 130 ) ) : ( 131 ) ) ) : ( (scaler_output_7 <= -0.8850238919258118) ? ( 133 ) : ( (scaler_output_6 <= -0.03865373134613037) ? ( (scaler_output_4 <= -0.3429235368967056) ? ( 136 ) : ( (scaler_output_11 <= 0.5628503561019897) ? ( 138 ) : ( 139 ) ) ) : ( 140 ) ) ) ) ) : ( (scaler_output_11 <= 1.0831982791423798) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_7 <= 0.12490524351596832) ? ( (scaler_output_11 <= 0.5194880440831184) ? ( (scaler_output_10 <= -0.7043466567993164) ? ( (scaler_output_4 <= -0.20514262095093727) ? ( 147 ) : ( 148 ) ) : ( 149 ) ) : ( 150 ) ) : ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_11 <= 0.34603873640298843) ? ( (scaler_output_5 <= -0.42320357263088226) ? ( 154 ) : ( 155 ) ) : ( (scaler_output_8 <= 0.21196657605469227) ? ( 157 ) : ( 158 ) ) ) : ( (scaler_output_6 <= 0.8060906231403351) ? ( (scaler_output_11 <= 0.47612572461366653) ? ( (scaler_output_2 <= -0.5453231632709503) ? ( 162 ) : ( 163 ) ) : ( 164 ) ) : ( (scaler_output_11 <= -0.3477585017681122) ? ( 166 ) : ( 167 ) ) ) ) ) : ( (scaler_output_2 <= 0.6465025842189789) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 170 ) : ( (scaler_output_10 <= -0.9978746175765991) ? ( 172 ) : ( 173 ) ) ) : ( (scaler_output_6 <= 0.906314492225647) ? ( (scaler_output_11 <= -0.17430918477475643) ? ( 176 ) : ( 177 ) ) : ( (scaler_output_6 <= 1.8942358493804932) ? ( (scaler_output_6 <= 1.3931163251399994) ? ( 180 ) : ( 181 ) ) : ( 182 ) ) ) ) ) : ( 183 ) ) ) ) ) : ( (scaler_output_5 <= -0.8743202388286591) ? ( (scaler_output_5 <= -1.171107530593872) ? ( (scaler_output_7 <= 0.991489589214325) ? ( 187 ) : ( 188 ) ) : ( (scaler_output_7 <= 0.02391231060028076) ? ( 190 ) : ( 191 ) ) ) : ( (scaler_output_5 <= -0.10267326608300209) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_5 <= -0.6368903964757919) ? ( (scaler_output_4 <= -0.8481202125549316) ? ( 196 ) : ( 197 ) ) : ( (scaler_output_6 <= 0.8347260281443596) ? ( (scaler_output_11 <= 0.6062126755714417) ? ( 200 ) : ( 201 ) ) : ( 202 ) ) ) : ( 203 ) ) : ( (scaler_output_6 <= 1.350163221359253) ? ( (scaler_output_2 <= 0.6465025544166565) ? ( (scaler_output_7 <= 1.2781791687011719) ? ( (scaler_output_6 <= 0.26201798021793365) ? ( 208 ) : ( 209 ) ) : ( (scaler_output_2 <= 0.14670467749238014) ? ( 211 ) : ( 212 ) ) ) : ( 213 ) ) : ( 214 ) ) ) ) ) : ( (scaler_output_7 <= -1.354152262210846) ? ( (scaler_output_6 <= -1.1697520911693573) ? ( 217 ) : ( 218 ) ) : ( (scaler_output_8 <= 0.7299189567565918) ? ( (scaler_output_6 <= 0.13315867260098457) ? ( (scaler_output_5 <= -0.6843763589859009) ? ( (scaler_output_6 <= -0.6972679644823074) ? ( 223 ) : ( (scaler_output_7 <= -0.23671454936265945) ? ( 225 ) : ( 226 ) ) ) : ( (scaler_output_9 <= 0.060044556856155396) ? ( 228 ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( (scaler_output_10 <= 0.752840518951416) ? ( 231 ) : ( 232 ) ) : ( 233 ) ) ) ) : ( (scaler_output_8 <= -0.8637807071208954) ? ( (scaler_output_7 <= 1.1022560596466064) ? ( 236 ) : ( 237 ) ) : ( (scaler_output_6 <= 1.178350806236267) ? ( (scaler_output_10 <= 1.9921061396598816) ? ( (scaler_output_8 <= 0.2518090680241585) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 242 ) : ( 243 ) ) : ( 244 ) ) : ( 245 ) ) : ( (scaler_output_4 <= 0.07041918532922864) ? ( (scaler_output_10 <= 0.6344757676124573) ? ( 248 ) : ( (scaler_output_2 <= 1.530760407447815) ? ( (scaler_output_6 <= 1.579246461391449) ? ( 251 ) : ( 252 ) ) : ( 253 ) ) ) : ( 254 ) ) ) ) ) : ( (scaler_output_6 <= 0.2477002739906311) ? ( (scaler_output_7 <= -1.0511735379695892) ? ( 257 ) : ( 258 ) ) : ( (scaler_output_4 <= -0.15921565890312195) ? ( (scaler_output_5 <= -0.18577370047569275) ? ( 261 ) : ( 262 ) ) : ( (scaler_output_5 <= 0.07539910450577736) ? ( 264 ) : ( 265 ) ) ) ) ) ) ) : ( (scaler_output_10 <= 0.9246074855327606) ? ( (scaler_output_5 <= 0.07539910380728543) ? ( (scaler_output_5 <= -1.1236215829849243) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 270 ) : ( (scaler_output_4 <= 0.30005402863025665) ? ( 272 ) : ( (scaler_output_4 <= 0.4722801744937897) ? ( 274 ) : ( (scaler_output_7 <= 1.2684056758880615) ? ( (scaler_output_6 <= 0.20474717020988464) ? ( 277 ) : ( 278 ) ) : ( 279 ) ) ) ) ) : ( (scaler_output_7 <= -0.5494668036699295) ? ( (scaler_output_9 <= -0.4152133446186781) ? ( 282 ) : ( 283 ) ) : ( (scaler_output_8 <= 0.13228158373385668) ? ( (scaler_output_10 <= 0.3958131670951843) ? ( (scaler_output_4 <= 1.2760021090507507) ? ( (scaler_output_8 <= -0.06693087052553892) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_8 <= -0.2661433294415474) ? ( 290 ) : ( 291 ) ) : ( (scaler_output_10 <= -0.016138553619384766) ? ( 293 ) : ( (scaler_output_6 <= 0.31928879022598267) ? ( 295 ) : ( 296 ) ) ) ) : ( 297 ) ) : ( (scaler_output_10 <= -0.7175788879394531) ? ( 299 ) : ( 300 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_9 <= 0.9910825490951538) ? ( 303 ) : ( 304 ) ) : ( 305 ) ) ) : ( (scaler_output_10 <= -0.8114213049411774) ? ( 307 ) : ( (scaler_output_8 <= 0.37133653461933136) ? ( 309 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 311 ) : ( 312 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.7582352757453918) ? ( (scaler_output_10 <= -0.6844651401042938) ? ( (scaler_output_8 <= 1.008816421031952) ? ( (scaler_output_7 <= -1.161939974874258) ? ( 317 ) : ( (scaler_output_8 <= -0.027088403701782227) ? ( 319 ) : ( 320 ) ) ) : ( (scaler_output_2 <= -0.1608632579445839) ? ( (scaler_output_2 <= -0.775999128818512) ? ( 323 ) : ( 324 ) ) : ( 325 ) ) ) : ( (scaler_output_11 <= 0.9097489714622498) ? ( (scaler_output_6 <= -0.7688564658164978) ? ( (scaler_output_7 <= -0.8915395438671112) ? ( 329 ) : ( 330 ) ) : ( (scaler_output_6 <= -0.22478384524583817) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_7 <= -0.32467611134052277) ? ( (scaler_output_5 <= 0.9657610058784485) ? ( 335 ) : ( 336 ) ) : ( 337 ) ) : ( (scaler_output_9 <= 0.6950202658772469) ? ( 339 ) : ( 340 ) ) ) : ( (scaler_output_4 <= 0.5182071477174759) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 343 ) : ( 344 ) ) : ( (scaler_output_10 <= 0.4886586666107178) ? ( (scaler_output_6 <= 0.09020556509494781) ? ( (scaler_output_10 <= -0.6070385873317719) ? ( 348 ) : ( 349 ) ) : ( 350 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 352 ) : ( (scaler_output_11 <= 0.17258942127227783) ? ( 354 ) : ( 355 ) ) ) ) ) ) ) : ( (scaler_output_5 <= 2.069809675216675) ? ( (scaler_output_11 <= 1.1265605986118317) ? ( (scaler_output_10 <= 0.7376137375831604) ? ( 359 ) : ( 360 ) ) : ( (scaler_output_6 <= 0.07588786631822586) ? ( 362 ) : ( 363 ) ) ) : ( 364 ) ) ) ) : ( (scaler_output_5 <= 1.3575202226638794) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 367 ) : ( 368 ) ) : ( (scaler_output_8 <= -0.2661433294415474) ? ( (scaler_output_10 <= 0.39255162328481674) ? ( 371 ) : ( 372 ) ) : ( 373 ) ) ) ) ) : ( (scaler_output_2 <= -1.4295809864997864) ? ( (scaler_output_5 <= -0.6368903964757919) ? ( 376 ) : ( 377 ) ) : ( (scaler_output_11 <= 2.6876044273376465) ? ( (scaler_output_8 <= -0.38567081093788147) ? ( (scaler_output_4 <= 1.1382212042808533) ? ( (scaler_output_5 <= 1.0726044178009033) ? ( (scaler_output_5 <= 0.21785700623877347) ? ( (scaler_output_7 <= -0.06730708479881287) ? ( 384 ) : ( 385 ) ) : ( (scaler_output_2 <= 0.7233945429325104) ? ( 387 ) : ( 388 ) ) ) : ( (scaler_output_9 <= 1.8636871576309204) ? ( (scaler_output_10 <= 1.8978560268878937) ? ( 391 ) : ( 392 ) ) : ( (scaler_output_2 <= 0.5696106255054474) ? ( 394 ) : ( 395 ) ) ) ) : ( (scaler_output_2 <= -0.6991071254014969) ? ( (scaler_output_6 <= 1.7940119206905365) ? ( 398 ) : ( 399 ) ) : ( (scaler_output_2 <= 1.4538683891296387) ? ( (scaler_output_8 <= -0.5450407862663269) ? ( (scaler_output_10 <= 1.5489827990531921) ? ( (scaler_output_8 <= -0.9036231935024261) ? ( (scaler_output_8 <= -1.3817331194877625) ? ( 405 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 407 ) : ( 408 ) ) ) : ( 409 ) ) : ( (scaler_output_11 <= 1.3000099062919617) ? ( (scaler_output_2 <= 0.4927186220884323) ? ( 412 ) : ( 413 ) ) : ( 414 ) ) ) : ( (scaler_output_6 <= 0.06157016009092331) ? ( 416 ) : ( (scaler_output_9 <= 0.9404403269290924) ? ( 418 ) : ( 419 ) ) ) ) : ( 420 ) ) ) ) : ( (scaler_output_2 <= 0.5311645790934563) ? ( (scaler_output_2 <= -0.19930924102663994) ? ( (scaler_output_5 <= 0.7164596617221832) ? ( (scaler_output_11 <= 0.08586478233337402) ? ( 425 ) : ( 426 ) ) : ( 427 ) ) : ( (scaler_output_4 <= 1.0234037637710571) ? ( 429 ) : ( 430 ) ) ) : ( (scaler_output_11 <= -0.8681063801050186) ? ( 432 ) : ( (scaler_output_6 <= 0.619960505515337) ? ( 434 ) : ( (scaler_output_5 <= 1.3575202226638794) ? ( 436 ) : ( 437 ) ) ) ) ) ) : ( (scaler_output_10 <= 1.182853639125824) ? ( 439 ) : ( 440 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_4
		
	
		namespace EXT_SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {55. }} ,
					{ 7 ,  {77. }} ,
					{ 13 ,  {142. }} ,
					{ 14 ,  {146. }} ,
					{ 15 ,  {200. }} ,
					{ 17 ,  {101. }} ,
					{ 18 ,  {96. }} ,
					{ 24 ,  {70. }} ,
					{ 25 ,  {71. }} ,
					{ 26 ,  {67. }} ,
					{ 27 ,  {88. }} ,
					{ 30 ,  {61. }} ,
					{ 31 ,  {60. }} ,
					{ 33 ,  {47. }} ,
					{ 35 ,  {55. }} ,
					{ 36 ,  {53. }} ,
					{ 38 ,  {160. }} ,
					{ 41 ,  {83. }} ,
					{ 42 ,  {89. }} ,
					{ 43 ,  {97. }} ,
					{ 47 ,  {200. }} ,
					{ 50 ,  {116. }} ,
					{ 51 ,  {113. }} ,
					{ 53 ,  {158. }} ,
					{ 55 ,  {150. }} ,
					{ 56 ,  {144. }} ,
					{ 61 ,  {65. }} ,
					{ 62 ,  {68. }} ,
					{ 63 ,  {78. }} ,
					{ 64 ,  {25. }} ,
					{ 67 ,  {127. }} ,
					{ 69 ,  {135. }} ,
					{ 70 ,  {138. }} ,
					{ 72 ,  {54. }} ,
					{ 74 ,  {88. }} ,
					{ 75 ,  {118. }} ,
					{ 77 ,  {135. }} ,
					{ 80 ,  {219. }} ,
					{ 81 ,  {200. }} ,
					{ 82 ,  {177. }} ,
					{ 87 ,  {152. }} ,
					{ 88 ,  {137. }} ,
					{ 91 ,  {90. }} ,
					{ 92 ,  {99. }} ,
					{ 94 ,  {77. }} ,
					{ 95 ,  {51. }} ,
					{ 99 ,  {65. }} ,
					{ 100 ,  {51. }} ,
					{ 101 ,  {114. }} ,
					{ 103 ,  {90. }} ,
					{ 106 ,  {60. }} ,
					{ 109 ,  {48. }} ,
					{ 110 ,  {49. }} ,
					{ 113 ,  {37. }} ,
					{ 114 ,  {39. }} ,
					{ 116 ,  {40. }} ,
					{ 117 ,  {42. }} ,
					{ 120 ,  {59. }} ,
					{ 121 ,  {60. }} ,
					{ 122 ,  {72. }} ,
					{ 125 ,  {179. }} ,
					{ 129 ,  {92. }} ,
					{ 130 ,  {87. }} ,
					{ 131 ,  {72. }} ,
					{ 134 ,  {96. }} ,
					{ 136 ,  {102. }} ,
					{ 137 ,  {103. }} ,
					{ 139 ,  {118. }} ,
					{ 140 ,  {108. }} ,
					{ 143 ,  {81. }} ,
					{ 144 ,  {91. }} ,
					{ 147 ,  {63. }} ,
					{ 148 ,  {64. }} ,
					{ 149 ,  {84. }} ,
					{ 155 ,  {190. }} ,
					{ 156 ,  {168. }} ,
					{ 157 ,  {230. }} ,
					{ 162 ,  {156. }} ,
					{ 163 ,  {185. }} ,
					{ 164 ,  {124. }} ,
					{ 165 ,  {252. }} ,
					{ 167 ,  {162. }} ,
					{ 170 ,  {92. }} ,
					{ 173 ,  {153. }} ,
					{ 174 ,  {150. }} ,
					{ 176 ,  {131. }} ,
					{ 177 ,  {141. }} ,
					{ 180 ,  {86. }} ,
					{ 181 ,  {93. }} ,
					{ 183 ,  {109. }} ,
					{ 184 ,  {102. }} ,
					{ 185 ,  {214. }} ,
					{ 188 ,  {48. }} ,
					{ 190 ,  {84. }} ,
					{ 192 ,  {100. }} ,
					{ 193 ,  {94. }} ,
					{ 195 ,  {129. }} ,
					{ 196 ,  {151. }} ,
					{ 203 ,  {201. }} ,
					{ 204 ,  {191. }} ,
					{ 207 ,  {172. }} ,
					{ 208 ,  {170. }} ,
					{ 209 ,  {182. }} ,
					{ 211 ,  {113. }} ,
					{ 212 ,  {175. }} ,
					{ 214 ,  {244. }} ,
					{ 215 ,  {257. }} ,
					{ 219 ,  {52. }} ,
					{ 220 ,  {70. }} ,
					{ 221 ,  {90. }} ,
					{ 224 ,  {144. }} ,
					{ 225 ,  {145. }} ,
					{ 226 ,  {131. }} ,
					{ 230 ,  {210. }} ,
					{ 232 ,  {182. }} ,
					{ 233 ,  {167. }} ,
					{ 235 ,  {110. }} ,
					{ 237 ,  {91. }} ,
					{ 238 ,  {78. }} ,
					{ 241 ,  {127. }} ,
					{ 242 ,  {202. }} ,
					{ 245 ,  {288. }} ,
					{ 246 ,  {321. }} ,
					{ 249 ,  {196. }} ,
					{ 252 ,  {237. }} ,
					{ 253 ,  {235. }} ,
					{ 254 ,  {261. }} ,
					{ 255 ,  {302. }} ,
					{ 264 ,  {198. }} ,
					{ 265 ,  {191. }} ,
					{ 266 ,  {258. }} ,
					{ 269 ,  {144. }} ,
					{ 271 ,  {101. }} ,
					{ 272 ,  {99. }} ,
					{ 274 ,  {197. }} ,
					{ 276 ,  {161. }} ,
					{ 277 ,  {166. }} ,
					{ 279 ,  {273. }} ,
					{ 280 ,  {283. }} ,
					{ 283 ,  {185. }} ,
					{ 286 ,  {90. }} ,
					{ 288 ,  {66. }} ,
					{ 289 ,  {74. }} ,
					{ 291 ,  {111. }} ,
					{ 293 ,  {131. }} ,
					{ 294 ,  {123. }} ,
					{ 296 ,  {178. }} ,
					{ 297 ,  {185. }} ,
					{ 300 ,  {262. }} ,
					{ 301 ,  {311. }} ,
					{ 307 ,  {202. }} ,
					{ 309 ,  {206. }} ,
					{ 310 ,  {209. }} ,
					{ 311 ,  {195. }} ,
					{ 312 ,  {163. }} ,
					{ 318 ,  {242. }} ,
					{ 319 ,  {245. }} ,
					{ 321 ,  {233. }} ,
					{ 322 ,  {235. }} ,
					{ 325 ,  {206. }} ,
					{ 328 ,  {212. }} ,
					{ 329 ,  {217. }} ,
					{ 331 ,  {225. }} ,
					{ 332 ,  {222. }} ,
					{ 333 ,  {198. }} ,
					{ 334 ,  {281. }} ,
					{ 335 ,  {270. }} ,
					{ 338 ,  {168. }} ,
					{ 340 ,  {173. }} ,
					{ 341 ,  {172. }} ,
					{ 342 ,  {144. }} ,
					{ 347 ,  {69. }} ,
					{ 348 ,  {84. }} ,
					{ 350 ,  {95. }} ,
					{ 352 ,  {122. }} ,
					{ 353 ,  {131. }} ,
					{ 356 ,  {134. }} ,
					{ 357 ,  {120. }} ,
					{ 359 ,  {190. }} ,
					{ 360 ,  {170. }} ,
					{ 363 ,  {283. }} ,
					{ 364 ,  {249. }} ,
					{ 366 ,  {202. }} ,
					{ 367 ,  {196. }} ,
					{ 372 ,  {259. }} ,
					{ 373 ,  {221. }} ,
					{ 374 ,  {151. }} ,
					{ 380 ,  {258. }} ,
					{ 381 ,  {263. }} ,
					{ 383 ,  {270. }} ,
					{ 385 ,  {280. }} ,
					{ 387 ,  {275. }} ,
					{ 388 ,  {277. }} ,
					{ 389 ,  {243. }} ,
					{ 390 ,  {308. }} ,
					{ 393 ,  {336. }} ,
					{ 394 ,  {332. }} ,
					{ 396 ,  {275. }} ,
					{ 398 ,  {303. }} ,
					{ 399 ,  {310. }} ,
					{ 403 ,  {317. }} ,
					{ 404 ,  {306. }} ,
					{ 406 ,  {264. }} ,
					{ 407 ,  {230. }} ,
					{ 412 ,  {128. }} ,
					{ 413 ,  {121. }} ,
					{ 414 ,  {178. }} ,
					{ 416 ,  {233. }} ,
					{ 418 ,  {173. }} ,
					{ 420 ,  {192. }} ,
					{ 421 ,  {186. }} ,
					{ 423 ,  {258. }} ,
					{ 426 ,  {217. }} ,
					{ 427 ,  {215. }} ,
					{ 429 ,  {233. }} ,
					{ 430 ,  {252. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.28708024322986603) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_5 <= -1.9190115332603455) ? ( (scaler_output_7 <= -1.2238388359546661) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.30598582327365875) ? ( (scaler_output_5 <= 0.09914208762347698) ? ( (scaler_output_5 <= -0.6131474245339632) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( (scaler_output_2 <= -1.1604590266942978) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_6 <= -1.312929093837738) ? ( (scaler_output_7 <= -1.1782291531562805) ? ( (scaler_output_6 <= -1.6851893067359924) ? ( (scaler_output_7 <= -1.4779500365257263) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( 27 ) ) : ( (scaler_output_7 <= -0.42892685532569885) ? ( (scaler_output_4 <= -0.22810611873865128) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_7 <= -0.36051230132579803) ? ( 33 ) : ( (scaler_output_2 <= -0.46843117475509644) ? ( 35 ) : ( 36 ) ) ) ) ) : ( (scaler_output_4 <= -0.595521867275238) ? ( 38 ) : ( (scaler_output_10 <= -0.44013822078704834) ? ( (scaler_output_6 <= -0.32500774785876274) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) ) : ( (scaler_output_5 <= 0.03978463192470372) ? ( (scaler_output_2 <= -1.3142430186271667) ? ( (scaler_output_5 <= -1.4916378259658813) ? ( 47 ) : ( (scaler_output_10 <= -1.2829285860061646) ? ( (scaler_output_10 <= -1.5580146312713623) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_4 <= -1.008864551782608) ? ( 53 ) : ( (scaler_output_5 <= -0.7437338009476662) ? ( 55 ) : ( 56 ) ) ) ) ) : ( (scaler_output_7 <= -0.68629589676857) ? ( (scaler_output_5 <= -0.06705879117362201) ? ( (scaler_output_4 <= -1.0433097779750824) ? ( (scaler_output_7 <= -0.9957903027534485) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) : ( 64 ) ) : ( (scaler_output_4 <= -0.7792297303676605) ? ( (scaler_output_5 <= -0.4588180184364319) ? ( 67 ) : ( (scaler_output_4 <= -1.1122002601623535) ? ( 69 ) : ( 70 ) ) ) : ( (scaler_output_11 <= -0.7380194365978241) ? ( 72 ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 74 ) : ( 75 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.3004886470735073) ? ( 77 ) : ( (scaler_output_11 <= 0.43276339769363403) ? ( (scaler_output_10 <= -0.4847811460494995) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_2 <= -1.4295809864997864) ? ( (scaler_output_6 <= -1.5276946425437927) ? ( (scaler_output_7 <= -2.2109631299972534) ? ( 87 ) : ( 88 ) ) : ( (scaler_output_10 <= -0.9101118743419647) ? ( (scaler_output_11 <= -1.5619035959243774) ? ( 91 ) : ( 92 ) ) : ( (scaler_output_10 <= -0.5802572071552277) ? ( 94 ) : ( 95 ) ) ) ) : ( (scaler_output_11 <= -1.5619036555290222) ? ( (scaler_output_11 <= -1.7787152528762817) ? ( (scaler_output_11 <= -2.299063205718994) ? ( 99 ) : ( 100 ) ) : ( 101 ) ) : ( (scaler_output_10 <= -1.6107050776481628) ? ( 103 ) : ( (scaler_output_7 <= 0.023912331089377403) ? ( (scaler_output_5 <= -1.5272522568702698) ? ( 106 ) : ( (scaler_output_4 <= -1.433688998222351) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( 109 ) : ( 110 ) ) : ( (scaler_output_10 <= -1.1154629588127136) ? ( (scaler_output_11 <= -0.4344831705093384) ? ( 113 ) : ( 114 ) ) : ( (scaler_output_11 <= 0.9531112909317017) ? ( 116 ) : ( 117 ) ) ) ) ) : ( (scaler_output_11 <= -0.04422219842672348) ? ( (scaler_output_8 <= 1.1283438801765442) ? ( 120 ) : ( 121 ) ) : ( 122 ) ) ) ) ) ) : ( (scaler_output_7 <= 0.131420923396945) ? ( (scaler_output_8 <= 1.0885013937950134) ? ( 125 ) : ( (scaler_output_5 <= -0.31636013090610504) ? ( (scaler_output_5 <= -0.4588180184364319) ? ( (scaler_output_6 <= 0.6342782080173492) ? ( 129 ) : ( 130 ) ) : ( 131 ) ) : ( (scaler_output_4 <= -0.7792297303676605) ? ( (scaler_output_6 <= 0.104523268295452) ? ( 134 ) : ( (scaler_output_5 <= 1.713664948940277) ? ( 136 ) : ( 137 ) ) ) : ( (scaler_output_2 <= 1.1847464740276337) ? ( 139 ) : ( 140 ) ) ) ) ) : ( (scaler_output_7 <= 0.7048000693321228) ? ( (scaler_output_10 <= -0.8763306736946106) ? ( 143 ) : ( 144 ) ) : ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_10 <= -0.7007021009922028) ? ( 147 ) : ( 148 ) ) : ( 149 ) ) ) ) ) ) : ( (scaler_output_10 <= 0.16023416072130203) ? ( (scaler_output_10 <= 0.09841897338628769) ? ( (scaler_output_10 <= -0.18090986460447311) ? ( (scaler_output_2 <= 0.454272598028183) ? ( (scaler_output_11 <= -1.5185412764549255) ? ( 155 ) : ( 156 ) ) : ( 157 ) ) : ( (scaler_output_6 <= -1.1124812960624695) ? ( (scaler_output_6 <= -1.1983875036239624) ? ( (scaler_output_7 <= -0.8654768764972687) ? ( (scaler_output_8 <= -0.5450407564640045) ? ( 162 ) : ( 163 ) ) : ( 164 ) ) : ( 165 ) ) : ( (scaler_output_2 <= -1.4680269360542297) ? ( 167 ) : ( (scaler_output_10 <= -0.012311428901739419) ? ( (scaler_output_10 <= -0.1299685537815094) ? ( 170 ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_4 <= -0.9055289179086685) ? ( 173 ) : ( 174 ) ) : ( (scaler_output_11 <= -0.6946570873260498) ? ( 176 ) : ( 177 ) ) ) ) : ( (scaler_output_4 <= -0.8136749565601349) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 180 ) : ( 181 ) ) : ( (scaler_output_7 <= 0.3106018975377083) ? ( 183 ) : ( 184 ) ) ) ) ) ) ) : ( 185 ) ) : ( (scaler_output_10 <= 0.2541116774082184) ? ( (scaler_output_2 <= -0.2762012295424938) ? ( 188 ) : ( (scaler_output_11 <= 0.9964736104011536) ? ( 190 ) : ( (scaler_output_8 <= -0.4653557986021042) ? ( 192 ) : ( 193 ) ) ) ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( 195 ) : ( 196 ) ) ) ) ) : ( (scaler_output_10 <= -0.4821503311395645) ? ( (scaler_output_2 <= 0.26204264909029007) ? ( (scaler_output_9 <= -0.021762147545814514) ? ( (scaler_output_5 <= 1.6424360275268555) ? ( (scaler_output_11 <= -0.6512947510927916) ? ( (scaler_output_10 <= -1.5270229578018188) ? ( 203 ) : ( 204 ) ) : ( (scaler_output_8 <= 0.5705490233376622) ? ( (scaler_output_2 <= -0.891337126493454) ? ( 207 ) : ( 208 ) ) : ( 209 ) ) ) : ( (scaler_output_8 <= 1.2080288529396057) ? ( 211 ) : ( 212 ) ) ) : ( (scaler_output_11 <= 0.519488051533699) ? ( 214 ) : ( 215 ) ) ) : ( (scaler_output_9 <= -0.41521333903074265) ? ( (scaler_output_6 <= -0.5254555642604828) ? ( (scaler_output_10 <= -0.8330053985118866) ? ( 219 ) : ( 220 ) ) : ( 221 ) ) : ( (scaler_output_11 <= 0.5628503635525703) ? ( (scaler_output_5 <= -0.9336777031421661) ? ( 224 ) : ( 225 ) ) : ( 226 ) ) ) ) : ( (scaler_output_5 <= -0.6012759208679199) ? ( (scaler_output_4 <= 1.0234037935733795) ? ( (scaler_output_9 <= -0.8437245488166809) ? ( 230 ) : ( (scaler_output_7 <= -0.7677418179810047) ? ( 232 ) : ( 233 ) ) ) : ( (scaler_output_10 <= -0.23665587976574898) ? ( 235 ) : ( (scaler_output_8 <= -0.5450407862663269) ? ( 237 ) : ( 238 ) ) ) ) : ( (scaler_output_6 <= -0.7831741571426392) ? ( (scaler_output_5 <= 1.2862912714481354) ? ( 241 ) : ( 242 ) ) : ( (scaler_output_6 <= -0.22478385269641876) ? ( (scaler_output_5 <= 0.9657610058784485) ? ( 245 ) : ( 246 ) ) : ( (scaler_output_8 <= 0.8494464606046677) ? ( (scaler_output_2 <= 0.22359666042029858) ? ( 249 ) : ( (scaler_output_5 <= 0.9301465153694153) ? ( (scaler_output_10 <= 0.06844047456979752) ? ( 252 ) : ( 253 ) ) : ( 254 ) ) ) : ( 255 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_6 <= 1.1497154235839844) ? ( (scaler_output_7 <= 0.023912331089377403) ? ( (scaler_output_7 <= -0.3996063470840454) ? ( (scaler_output_5 <= 1.0726044178009033) ? ( (scaler_output_10 <= 0.7643486261367798) ? ( (scaler_output_9 <= -0.3295110985636711) ? ( (scaler_output_7 <= -1.2108075022697449) ? ( 264 ) : ( 265 ) ) : ( 266 ) ) : ( (scaler_output_2 <= -0.39153921231627464) ? ( (scaler_output_8 <= -1.5411030650138855) ? ( 269 ) : ( (scaler_output_4 <= 0.288572296500206) ? ( 271 ) : ( 272 ) ) ) : ( (scaler_output_11 <= -0.13094685971736908) ? ( 274 ) : ( (scaler_output_7 <= -0.946922779083252) ? ( 276 ) : ( 277 ) ) ) ) ) : ( (scaler_output_8 <= -0.14661580324172974) ? ( 279 ) : ( 280 ) ) ) : ( (scaler_output_5 <= 0.9657609462738037) ? ( (scaler_output_11 <= -0.08758452534675598) ? ( 283 ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_11 <= 0.21595175564289093) ? ( 286 ) : ( (scaler_output_6 <= -0.0816068381536752) ? ( 288 ) : ( 289 ) ) ) : ( (scaler_output_6 <= -0.26773694157600403) ? ( 291 ) : ( (scaler_output_11 <= 1.126560628414154) ? ( 293 ) : ( 294 ) ) ) ) ) : ( (scaler_output_6 <= -0.12455994263291359) ? ( 296 ) : ( 297 ) ) ) ) : ( (scaler_output_10 <= 0.30336154997348785) ? ( (scaler_output_7 <= 0.19657763093709946) ? ( 300 ) : ( 301 ) ) : ( (scaler_output_2 <= 1.300084412097931) ? ( (scaler_output_2 <= -0.08397127315402031) ? ( (scaler_output_11 <= 0.042502447962760925) ? ( (scaler_output_4 <= 0.32301752269268036) ? ( (scaler_output_5 <= -0.814962774515152) ? ( 307 ) : ( (scaler_output_5 <= -0.31636013090610504) ? ( 309 ) : ( 310 ) ) ) : ( 311 ) ) : ( 312 ) ) : ( (scaler_output_5 <= 2.390339970588684) ? ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_11 <= 0.12922710366547108) ? ( (scaler_output_10 <= 0.960080474615097) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 318 ) : ( 319 ) ) : ( (scaler_output_4 <= -0.10180695354938507) ? ( 321 ) : ( 322 ) ) ) : ( (scaler_output_4 <= 0.6674697995185852) ? ( (scaler_output_4 <= -0.4577409587800503) ? ( 325 ) : ( (scaler_output_4 <= 0.44931669533252716) ? ( (scaler_output_11 <= 0.34603874385356903) ? ( 328 ) : ( 329 ) ) : ( (scaler_output_8 <= -1.0629931390285492) ? ( 331 ) : ( 332 ) ) ) ) : ( 333 ) ) ) : ( 334 ) ) : ( 335 ) ) ) : ( (scaler_output_10 <= 0.5251061916351318) ? ( (scaler_output_5 <= -0.20951670035719872) ? ( 338 ) : ( (scaler_output_7 <= 0.5581974387168884) ? ( 340 ) : ( 341 ) ) ) : ( 342 ) ) ) ) ) : ( (scaler_output_10 <= 1.1957367658615112) ? ( (scaler_output_5 <= 0.14662805572152138) ? ( (scaler_output_10 <= 0.5943665057420731) ? ( (scaler_output_7 <= 2.936417579650879) ? ( 347 ) : ( 348 ) ) : ( (scaler_output_4 <= -0.021434754133224487) ? ( 350 ) : ( (scaler_output_6 <= 1.9801421165466309) ? ( 352 ) : ( 353 ) ) ) ) : ( (scaler_output_6 <= 1.3072101473808289) ? ( (scaler_output_9 <= 0.16132903099060059) ? ( 356 ) : ( 357 ) ) : ( (scaler_output_8 <= 0.29165155440568924) ? ( 359 ) : ( 360 ) ) ) ) : ( (scaler_output_10 <= 1.612431526184082) ? ( (scaler_output_9 <= 1.0845758393406868) ? ( 363 ) : ( 364 ) ) : ( (scaler_output_6 <= 2.3667200803756714) ? ( 366 ) : ( 367 ) ) ) ) ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_5 <= 0.39592938125133514) ? ( (scaler_output_5 <= 0.2534714788198471) ? ( 372 ) : ( 373 ) ) : ( 374 ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_4 <= 2.5160303115844727) ? ( (scaler_output_8 <= -0.06693087052553892) ? ( (scaler_output_7 <= -0.6178813576698303) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 380 ) : ( 381 ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( 383 ) : ( (scaler_output_11 <= 0.25931409001350403) ? ( 385 ) : ( (scaler_output_5 <= 0.5383872613310814) ? ( 387 ) : ( 388 ) ) ) ) ) : ( 389 ) ) : ( 390 ) ) : ( (scaler_output_10 <= 0.6651052534580231) ? ( (scaler_output_6 <= -0.33932544593699276) ? ( 393 ) : ( 394 ) ) : ( (scaler_output_11 <= 0.5628503859043121) ? ( 396 ) : ( (scaler_output_7 <= -0.22042536735534668) ? ( 398 ) : ( 399 ) ) ) ) ) ) : ( (scaler_output_8 <= -0.9833081960678101) ? ( (scaler_output_2 <= 0.4542726129293442) ? ( (scaler_output_7 <= 1.489938497543335) ? ( 403 ) : ( 404 ) ) : ( (scaler_output_9 <= 2.214287281036377) ? ( 406 ) : ( 407 ) ) ) : ( (scaler_output_5 <= 1.0369899272918701) ? ( (scaler_output_11 <= 0.9097489714622498) ? ( (scaler_output_5 <= -0.06705879117362201) ? ( (scaler_output_2 <= -0.622215136885643) ? ( 412 ) : ( 413 ) ) : ( 414 ) ) : ( (scaler_output_7 <= 0.7601832747459412) ? ( 416 ) : ( (scaler_output_9 <= 0.5781535655260086) ? ( 418 ) : ( (scaler_output_7 <= 1.4508444666862488) ? ( 420 ) : ( 421 ) ) ) ) ) : ( (scaler_output_4 <= 1.138221263885498) ? ( 423 ) : ( (scaler_output_4 <= 1.4252647757530212) ? ( (scaler_output_8 <= -0.5848832577466965) ? ( 426 ) : ( 427 ) ) : ( (scaler_output_5 <= 1.5355926156044006) ? ( 429 ) : ( 430 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_5
		
	
		namespace EXT_SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {55. }} ,
					{ 10 ,  {200. }} ,
					{ 13 ,  {152. }} ,
					{ 14 ,  {150. }} ,
					{ 15 ,  {158. }} ,
					{ 16 ,  {104. }} ,
					{ 19 ,  {137. }} ,
					{ 21 ,  {143. }} ,
					{ 22 ,  {142. }} ,
					{ 27 ,  {85. }} ,
					{ 28 ,  {61. }} ,
					{ 31 ,  {99. }} ,
					{ 32 ,  {101. }} ,
					{ 33 ,  {116. }} ,
					{ 34 ,  {168. }} ,
					{ 38 ,  {77. }} ,
					{ 39 ,  {68. }} ,
					{ 40 ,  {90. }} ,
					{ 42 ,  {60. }} ,
					{ 43 ,  {51. }} ,
					{ 52 ,  {77. }} ,
					{ 54 ,  {68. }} ,
					{ 55 ,  {70. }} ,
					{ 57 ,  {63. }} ,
					{ 58 ,  {53. }} ,
					{ 60 ,  {79. }} ,
					{ 61 ,  {88. }} ,
					{ 64 ,  {90. }} ,
					{ 65 ,  {75. }} ,
					{ 68 ,  {48. }} ,
					{ 69 ,  {49. }} ,
					{ 71 ,  {37. }} ,
					{ 72 ,  {39. }} ,
					{ 76 ,  {128. }} ,
					{ 77 ,  {138. }} ,
					{ 78 ,  {114. }} ,
					{ 79 ,  {74. }} ,
					{ 83 ,  {40. }} ,
					{ 84 ,  {42. }} ,
					{ 86 ,  {25. }} ,
					{ 87 ,  {31. }} ,
					{ 89 ,  {64. }} ,
					{ 90 ,  {53. }} ,
					{ 92 ,  {160. }} ,
					{ 97 ,  {113. }} ,
					{ 99 ,  {96. }} ,
					{ 100 ,  {94. }} ,
					{ 101 ,  {52. }} ,
					{ 104 ,  {54. }} ,
					{ 105 ,  {59. }} ,
					{ 107 ,  {72. }} ,
					{ 108 ,  {65. }} ,
					{ 110 ,  {104. }} ,
					{ 111 ,  {118. }} ,
					{ 114 ,  {129. }} ,
					{ 115 ,  {219. }} ,
					{ 120 ,  {65. }} ,
					{ 121 ,  {66. }} ,
					{ 123 ,  {88. }} ,
					{ 124 ,  {98. }} ,
					{ 128 ,  {127. }} ,
					{ 129 ,  {132. }} ,
					{ 131 ,  {179. }} ,
					{ 132 ,  {200. }} ,
					{ 136 ,  {96. }} ,
					{ 137 ,  {102. }} ,
					{ 139 ,  {108. }} ,
					{ 140 ,  {118. }} ,
					{ 143 ,  {87. }} ,
					{ 145 ,  {91. }} ,
					{ 146 ,  {92. }} ,
					{ 147 ,  {97. }} ,
					{ 151 ,  {135. }} ,
					{ 152 ,  {146. }} ,
					{ 154 ,  {64. }} ,
					{ 155 ,  {84. }} ,
					{ 158 ,  {47. }} ,
					{ 160 ,  {53. }} ,
					{ 161 ,  {55. }} ,
					{ 164 ,  {80. }} ,
					{ 165 ,  {89. }} ,
					{ 168 ,  {71. }} ,
					{ 169 ,  {77. }} ,
					{ 170 ,  {63. }} ,
					{ 171 ,  {216. }} ,
					{ 172 ,  {253. }} ,
					{ 178 ,  {162. }} ,
					{ 179 ,  {214. }} ,
					{ 182 ,  {252. }} ,
					{ 183 ,  {233. }} ,
					{ 184 ,  {292. }} ,
					{ 186 ,  {202. }} ,
					{ 189 ,  {126. }} ,
					{ 191 ,  {150. }} ,
					{ 192 ,  {163. }} ,
					{ 194 ,  {102. }} ,
					{ 195 ,  {91. }} ,
					{ 199 ,  {140. }} ,
					{ 201 ,  {178. }} ,
					{ 203 ,  {190. }} ,
					{ 204 ,  {198. }} ,
					{ 211 ,  {92. }} ,
					{ 212 ,  {88. }} ,
					{ 214 ,  {153. }} ,
					{ 215 ,  {141. }} ,
					{ 219 ,  {93. }} ,
					{ 221 ,  {88. }} ,
					{ 222 ,  {84. }} ,
					{ 226 ,  {74. }} ,
					{ 227 ,  {78. }} ,
					{ 229 ,  {66. }} ,
					{ 230 ,  {69. }} ,
					{ 231 ,  {90. }} ,
					{ 234 ,  {94. }} ,
					{ 235 ,  {95. }} ,
					{ 236 ,  {109. }} ,
					{ 239 ,  {209. }} ,
					{ 240 ,  {200. }} ,
					{ 242 ,  {100. }} ,
					{ 243 ,  {120. }} ,
					{ 244 ,  {206. }} ,
					{ 249 ,  {131. }} ,
					{ 250 ,  {134. }} ,
					{ 251 ,  {115. }} ,
					{ 253 ,  {170. }} ,
					{ 254 ,  {172. }} ,
					{ 256 ,  {214. }} ,
					{ 257 ,  {197. }} ,
					{ 258 ,  {230. }} ,
					{ 261 ,  {185. }} ,
					{ 262 ,  {171. }} ,
					{ 264 ,  {283. }} ,
					{ 265 ,  {281. }} ,
					{ 270 ,  {51. }} ,
					{ 272 ,  {67. }} ,
					{ 273 ,  {60. }} ,
					{ 276 ,  {103. }} ,
					{ 280 ,  {201. }} ,
					{ 281 ,  {191. }} ,
					{ 284 ,  {187. }} ,
					{ 286 ,  {182. }} ,
					{ 287 ,  {184. }} ,
					{ 289 ,  {170. }} ,
					{ 290 ,  {175. }} ,
					{ 291 ,  {96. }} ,
					{ 294 ,  {52. }} ,
					{ 295 ,  {90. }} ,
					{ 298 ,  {144. }} ,
					{ 299 ,  {145. }} ,
					{ 301 ,  {141. }} ,
					{ 302 ,  {140. }} ,
					{ 306 ,  {259. }} ,
					{ 307 ,  {273. }} ,
					{ 309 ,  {245. }} ,
					{ 310 ,  {244. }} ,
					{ 315 ,  {68. }} ,
					{ 316 ,  {91. }} ,
					{ 318 ,  {151. }} ,
					{ 319 ,  {144. }} ,
					{ 328 ,  {221. }} ,
					{ 329 ,  {210. }} ,
					{ 330 ,  {195. }} ,
					{ 331 ,  {258. }} ,
					{ 335 ,  {288. }} ,
					{ 337 ,  {280. }} ,
					{ 338 ,  {281. }} ,
					{ 340 ,  {265. }} ,
					{ 341 ,  {263. }} ,
					{ 344 ,  {237. }} ,
					{ 345 ,  {242. }} ,
					{ 346 ,  {248. }} ,
					{ 348 ,  {276. }} ,
					{ 350 ,  {121. }} ,
					{ 351 ,  {143. }} ,
					{ 353 ,  {302. }} ,
					{ 354 ,  {283. }} ,
					{ 355 ,  {59. }} ,
					{ 357 ,  {99. }} ,
					{ 359 ,  {236. }} ,
					{ 360 ,  {196. }} ,
					{ 364 ,  {48. }} ,
					{ 366 ,  {90. }} ,
					{ 367 ,  {78. }} ,
					{ 371 ,  {127. }} ,
					{ 373 ,  {151. }} ,
					{ 374 ,  {150. }} ,
					{ 376 ,  {111. }} ,
					{ 377 ,  {110. }} ,
					{ 379 ,  {178. }} ,
					{ 380 ,  {202. }} ,
					{ 384 ,  {249. }} ,
					{ 385 ,  {259. }} ,
					{ 390 ,  {166. }} ,
					{ 391 ,  {173. }} ,
					{ 393 ,  {198. }} ,
					{ 394 ,  {180. }} ,
					{ 395 ,  {215. }} ,
					{ 398 ,  {212. }} ,
					{ 400 ,  {232. }} ,
					{ 401 ,  {222. }} ,
					{ 402 ,  {275. }} ,
					{ 404 ,  {67. }} ,
					{ 405 ,  {131. }} ,
					{ 412 ,  {272. }} ,
					{ 413 ,  {275. }} ,
					{ 414 ,  {281. }} ,
					{ 418 ,  {220. }} ,
					{ 419 ,  {232. }} ,
					{ 421 ,  {246. }} ,
					{ 422 ,  {242. }} ,
					{ 424 ,  {270. }} ,
					{ 425 ,  {261. }} ,
					{ 426 ,  {336. }} ,
					{ 430 ,  {332. }} ,
					{ 432 ,  {311. }} ,
					{ 433 ,  {317. }} ,
					{ 434 ,  {297. }} ,
					{ 437 ,  {279. }} ,
					{ 439 ,  {257. }} ,
					{ 440 ,  {264. }} ,
					{ 441 ,  {310. }} ,
					{ 445 ,  {142. }} ,
					{ 446 ,  {84. }} ,
					{ 449 ,  {173. }} ,
					{ 450 ,  {186. }} ,
					{ 451 ,  {220. }} ,
					{ 453 ,  {306. }} ,
					{ 455 ,  {258. }} ,
					{ 458 ,  {233. }} ,
					{ 459 ,  {230. }} ,
					{ 460 ,  {217. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.021434754598885775) ? ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_5 <= 2.0698097348213196) ? ( (scaler_output_2 <= -1.2757970094680786) ? ( (scaler_output_5 <= -1.990240454673767) ? ( 6 ) : ( (scaler_output_5 <= -1.277950942516327) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_10 <= -1.34567391872406) ? ( 10 ) : ( (scaler_output_7 <= -0.7742574512958527) ? ( (scaler_output_6 <= -1.670871615409851) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) : ( 16 ) ) : ( (scaler_output_6 <= -1.5563300251960754) ? ( (scaler_output_4 <= -1.617396891117096) ? ( 19 ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_6 <= -0.8977157771587372) ? ( (scaler_output_11 <= -0.21767151169478893) ? ( (scaler_output_7 <= -1.4355981945991516) ? ( (scaler_output_8 <= 1.128343939781189) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_7 <= -0.943664938211441) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) : ( 34 ) ) : ( (scaler_output_10 <= -0.8236975967884064) ? ( (scaler_output_2 <= -1.737148940563202) ? ( (scaler_output_4 <= -0.5495948828756809) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) : ( (scaler_output_10 <= -0.5087776184082031) ? ( 42 ) : ( 43 ) ) ) ) ) ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_7 <= 0.08581121452152729) ? ( (scaler_output_4 <= -0.9399741291999817) ? ( (scaler_output_4 <= -1.0892367959022522) ? ( (scaler_output_8 <= 0.5307065099477768) ? ( (scaler_output_2 <= -0.12241726368665695) ? ( (scaler_output_2 <= -0.5453231632709503) ? ( (scaler_output_4 <= -1.3647985458374023) ? ( 52 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 54 ) : ( 55 ) ) ) : ( (scaler_output_7 <= -0.6993272751569748) ? ( 57 ) : ( 58 ) ) ) : ( (scaler_output_4 <= -1.341835081577301) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_10 <= -1.4576122164726257) ? ( (scaler_output_2 <= -0.23775523900985718) ? ( 64 ) : ( 65 ) ) : ( (scaler_output_4 <= -1.433688998222351) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( 68 ) : ( 69 ) ) : ( (scaler_output_5 <= -0.7081193327903748) ? ( 71 ) : ( 72 ) ) ) ) ) : ( (scaler_output_10 <= -1.254252016544342) ? ( (scaler_output_4 <= -1.008864551782608) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) : ( 79 ) ) ) : ( (scaler_output_6 <= -0.5254555493593216) ? ( (scaler_output_7 <= -0.7938044965267181) ? ( (scaler_output_6 <= -1.484741449356079) ? ( 83 ) : ( 84 ) ) : ( (scaler_output_4 <= -0.21662437170743942) ? ( 86 ) : ( 87 ) ) ) : ( (scaler_output_8 <= 0.29165156185626984) ? ( 89 ) : ( 90 ) ) ) ) : ( (scaler_output_6 <= -0.010018334025517106) ? ( 92 ) : ( (scaler_output_11 <= 0.823024332523346) ? ( (scaler_output_9 <= -0.13083773106336594) ? ( (scaler_output_8 <= 1.7259812355041504) ? ( (scaler_output_7 <= 0.21286681666970253) ? ( 97 ) : ( (scaler_output_4 <= -1.0662733018398285) ? ( 99 ) : ( 100 ) ) ) : ( 101 ) ) : ( (scaler_output_11 <= -0.04422219842672348) ? ( (scaler_output_6 <= 0.47678348422050476) ? ( 104 ) : ( 105 ) ) : ( (scaler_output_5 <= 0.18224254250526428) ? ( 107 ) : ( 108 ) ) ) ) : ( (scaler_output_11 <= 1.1699229180812836) ? ( 110 ) : ( 111 ) ) ) ) ) : ( (scaler_output_7 <= -1.181486964225769) ? ( (scaler_output_6 <= -1.627918541431427) ? ( 114 ) : ( 115 ) ) : ( (scaler_output_9 <= -0.1736888512969017) ? ( (scaler_output_7 <= -0.6113656759262085) ? ( (scaler_output_7 <= -0.9957903325557709) ? ( (scaler_output_2 <= 0.9156244844198227) ? ( 120 ) : ( 121 ) ) : ( (scaler_output_4 <= -0.595521867275238) ? ( 123 ) : ( 124 ) ) ) : ( (scaler_output_6 <= -0.06728913728147745) ? ( (scaler_output_6 <= -0.6256794631481171) ? ( (scaler_output_11 <= 0.17258943058550358) ? ( 128 ) : ( 129 ) ) : ( (scaler_output_10 <= -0.5370636284351349) ? ( 131 ) : ( 132 ) ) ) : ( (scaler_output_6 <= 0.36224187910556793) ? ( (scaler_output_4 <= -0.8136749565601349) ? ( (scaler_output_10 <= -0.9227692186832428) ? ( 136 ) : ( 137 ) ) : ( (scaler_output_8 <= 1.7259812355041504) ? ( 139 ) : ( 140 ) ) ) : ( (scaler_output_4 <= -0.4807044416666031) ? ( (scaler_output_7 <= -0.24974588304758072) ? ( 143 ) : ( (scaler_output_4 <= -0.595521867275238) ? ( 145 ) : ( 146 ) ) ) : ( 147 ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_6 <= 0.4911011755466461) ? ( (scaler_output_2 <= 0.3004886470735073) ? ( 151 ) : ( 152 ) ) : ( (scaler_output_6 <= 1.4790225327014923) ? ( 154 ) : ( 155 ) ) ) : ( (scaler_output_2 <= 0.6465025693178177) ? ( (scaler_output_6 <= -0.6972679495811462) ? ( 158 ) : ( (scaler_output_4 <= -0.6873758137226105) ? ( 160 ) : ( 161 ) ) ) : ( (scaler_output_5 <= 0.8589175492525101) ? ( (scaler_output_11 <= 0.38940106332302094) ? ( 164 ) : ( 165 ) ) : ( (scaler_output_6 <= 0.8776791132986546) ? ( (scaler_output_10 <= -0.5335219502449036) ? ( 168 ) : ( 169 ) ) : ( 170 ) ) ) ) ) ) ) ) ) : ( 171 ) ) : ( 172 ) ) : ( (scaler_output_5 <= 1.2506767511367798) ? ( (scaler_output_8 <= -0.8637807071208954) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= 0.3034939020872116) ? ( (scaler_output_5 <= -1.277950942516327) ? ( 178 ) : ( 179 ) ) : ( (scaler_output_8 <= -1.0629931688308716) ? ( (scaler_output_11 <= -1.1282803565263748) ? ( 182 ) : ( 183 ) ) : ( 184 ) ) ) : ( (scaler_output_2 <= -1.2373510003089905) ? ( 186 ) : ( (scaler_output_7 <= 0.32363323867321014) ? ( (scaler_output_2 <= -1.0066750645637512) ? ( 189 ) : ( (scaler_output_10 <= 0.43657208885997534) ? ( 191 ) : ( 192 ) ) ) : ( (scaler_output_5 <= -0.6012759208679199) ? ( 194 ) : ( 195 ) ) ) ) ) : ( (scaler_output_2 <= 1.4538683891296387) ? ( (scaler_output_7 <= -0.9241179525852203) ? ( (scaler_output_5 <= -1.171107530593872) ? ( 199 ) : ( (scaler_output_4 <= -0.5840401202440262) ? ( 201 ) : ( (scaler_output_4 <= -0.18217914178967476) ? ( 203 ) : ( 204 ) ) ) ) : ( (scaler_output_2 <= 0.9156244993209839) ? ( (scaler_output_11 <= 1.9938071370124817) ? ( (scaler_output_9 <= 0.5430935472249985) ? ( (scaler_output_10 <= -0.03159626491833478) ? ( (scaler_output_10 <= -0.1299685537815094) ? ( (scaler_output_6 <= -0.2677369490265846) ? ( 211 ) : ( 212 ) ) : ( (scaler_output_10 <= -0.08005162328481674) ? ( 214 ) : ( 215 ) ) ) : ( (scaler_output_4 <= -0.4003322571516037) ? ( (scaler_output_10 <= 0.24516946822404861) ? ( (scaler_output_8 <= -0.465355783700943) ? ( 219 ) : ( (scaler_output_7 <= 0.27802354097366333) ? ( 221 ) : ( 222 ) ) ) : ( (scaler_output_10 <= 1.4427033066749573) ? ( (scaler_output_5 <= -0.15015923604369164) ? ( (scaler_output_8 <= 0.7299189865589142) ? ( 226 ) : ( 227 ) ) : ( (scaler_output_7 <= 0.8351134993135929) ? ( 229 ) : ( 230 ) ) ) : ( 231 ) ) ) : ( (scaler_output_4 <= -0.11328869313001633) ? ( (scaler_output_10 <= 0.5655125379562378) ? ( 234 ) : ( 235 ) ) : ( 236 ) ) ) ) : ( (scaler_output_7 <= 1.3498516082763672) ? ( (scaler_output_8 <= -0.42551329731941223) ? ( 239 ) : ( 240 ) ) : ( (scaler_output_10 <= 0.49539071321487427) ? ( 242 ) : ( 243 ) ) ) ) : ( 244 ) ) : ( (scaler_output_5 <= 0.3247004300355911) ? ( (scaler_output_2 <= 1.300084412097931) ? ( (scaler_output_7 <= 0.958911269903183) ? ( (scaler_output_5 <= -0.24513116478919983) ? ( 249 ) : ( 250 ) ) : ( 251 ) ) : ( (scaler_output_11 <= 1.0398359894752502) ? ( 253 ) : ( 254 ) ) ) : ( (scaler_output_9 <= -0.08409103751182556) ? ( 256 ) : ( 257 ) ) ) ) ) : ( 258 ) ) ) : ( (scaler_output_10 <= 1.0125135779380798) ? ( (scaler_output_7 <= 1.0664198771119118) ? ( 261 ) : ( 262 ) ) : ( (scaler_output_5 <= 1.5355925559997559) ? ( 264 ) : ( 265 ) ) ) ) ) : ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_10 <= -0.5805794894695282) ? ( (scaler_output_4 <= 0.19671834632754326) ? ( (scaler_output_5 <= -0.9930351600050926) ? ( 270 ) : ( (scaler_output_2 <= -0.6991071403026581) ? ( 272 ) : ( 273 ) ) ) : ( (scaler_output_2 <= 0.26204264909029007) ? ( (scaler_output_2 <= -1.4680269956588745) ? ( 276 ) : ( (scaler_output_7 <= 0.9556534290313721) ? ( (scaler_output_4 <= 0.4148714542388916) ? ( (scaler_output_10 <= -1.5270229578018188) ? ( 280 ) : ( 281 ) ) : ( (scaler_output_2 <= -0.8528911173343658) ? ( (scaler_output_10 <= -0.9556070566177368) ? ( 284 ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 286 ) : ( 287 ) ) ) : ( (scaler_output_8 <= 0.21196657419204712) ? ( 289 ) : ( 290 ) ) ) ) : ( 291 ) ) ) : ( (scaler_output_7 <= -0.49734140932559967) ? ( (scaler_output_8 <= 0.4111790657043457) ? ( 294 ) : ( 295 ) ) : ( (scaler_output_4 <= 1.2760021090507507) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 298 ) : ( 299 ) ) : ( (scaler_output_4 <= 1.7352718114852905) ? ( 301 ) : ( 302 ) ) ) ) ) ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( (scaler_output_8 <= -1.4215755462646484) ? ( (scaler_output_11 <= -0.13094685971736908) ? ( 306 ) : ( 307 ) ) : ( (scaler_output_6 <= -0.11024224013090134) ? ( 309 ) : ( 310 ) ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_8 <= -0.7442532181739807) ? ( (scaler_output_5 <= -0.20951668918132782) ? ( (scaler_output_11 <= -0.6946570873260498) ? ( 315 ) : ( 316 ) ) : ( (scaler_output_11 <= -0.21767151169478893) ? ( 318 ) : ( 319 ) ) ) : ( (scaler_output_10 <= 1.2959505319595337) ? ( (scaler_output_8 <= 1.447083830833435) ? ( (scaler_output_8 <= 1.2080289125442505) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_2 <= -0.007079288363456726) ? ( (scaler_output_8 <= 0.052596598863601685) ? ( (scaler_output_7 <= -0.27580858394503593) ? ( (scaler_output_11 <= -1.0849180221557617) ? ( 328 ) : ( 329 ) ) : ( 330 ) ) : ( 331 ) ) : ( (scaler_output_6 <= 0.41951267421245575) ? ( (scaler_output_7 <= -0.17481566220521927) ? ( (scaler_output_10 <= -0.051263004541397095) ? ( 335 ) : ( (scaler_output_10 <= 0.7541024833917618) ? ( 337 ) : ( 338 ) ) ) : ( (scaler_output_5 <= 0.9657610058784485) ? ( 340 ) : ( 341 ) ) ) : ( (scaler_output_10 <= 1.0955952405929565) ? ( (scaler_output_6 <= 0.6629136055707932) ? ( 344 ) : ( 345 ) ) : ( 346 ) ) ) ) : ( (scaler_output_5 <= -0.5300469845533371) ? ( 348 ) : ( (scaler_output_11 <= -0.21767150610685349) ? ( 350 ) : ( 351 ) ) ) ) : ( (scaler_output_8 <= 1.3275563716888428) ? ( 353 ) : ( 354 ) ) ) : ( 355 ) ) : ( (scaler_output_5 <= 0.50277279317379) ? ( 357 ) : ( (scaler_output_7 <= 1.121803030371666) ? ( 359 ) : ( 360 ) ) ) ) ) : ( (scaler_output_6 <= 0.11884097382426262) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 364 ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( 366 ) : ( 367 ) ) ) : ( (scaler_output_5 <= 1.1082188487052917) ? ( (scaler_output_7 <= -0.2041361816227436) ? ( (scaler_output_10 <= -0.039509743452072144) ? ( 371 ) : ( (scaler_output_6 <= -1.0695281587541103) ? ( 373 ) : ( 374 ) ) ) : ( (scaler_output_2 <= 0.45427259616553783) ? ( 376 ) : ( 377 ) ) ) : ( (scaler_output_4 <= 0.5182071477174759) ? ( 379 ) : ( 380 ) ) ) ) : ( (scaler_output_6 <= 1.6221995949745178) ? ( (scaler_output_4 <= 0.21968184038996696) ? ( (scaler_output_11 <= 0.5194880366325378) ? ( 384 ) : ( 385 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= 1.3068045377731323) ? ( (scaler_output_6 <= 0.5483719855546951) ? ( (scaler_output_7 <= -0.06079140305519104) ? ( 390 ) : ( 391 ) ) : ( (scaler_output_6 <= 0.7631374895572662) ? ( 393 ) : ( 394 ) ) ) : ( 395 ) ) : ( (scaler_output_4 <= 0.9315498471260071) ? ( (scaler_output_4 <= 0.40338972210884094) ? ( 398 ) : ( (scaler_output_7 <= 0.6754795089364052) ? ( 400 ) : ( 401 ) ) ) : ( 402 ) ) ) ) : ( (scaler_output_7 <= 1.9167150259017944) ? ( 404 ) : ( 405 ) ) ) ) ) ) ) : ( (scaler_output_6 <= 0.77745521068573) ? ( (scaler_output_7 <= 0.2747657001018524) ? ( (scaler_output_4 <= 2.2863954305648804) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_7 <= -0.3149026036262512) ? ( (scaler_output_7 <= -0.624397024512291) ? ( 412 ) : ( 413 ) ) : ( 414 ) ) : ( (scaler_output_4 <= 1.6319361329078674) ? ( (scaler_output_5 <= 0.8470460772514343) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 418 ) : ( 419 ) ) : ( (scaler_output_10 <= 2.126460015773773) ? ( 421 ) : ( 422 ) ) ) : ( (scaler_output_8 <= -0.42551328241825104) ? ( 424 ) : ( 425 ) ) ) ) : ( 426 ) ) : ( (scaler_output_4 <= 1.6548996567726135) ? ( (scaler_output_10 <= 0.9716286957263947) ? ( (scaler_output_11 <= 1.0831982791423798) ? ( 430 ) : ( (scaler_output_9 <= 1.707864910364151) ? ( 432 ) : ( 433 ) ) ) : ( 434 ) ) : ( (scaler_output_6 <= 0.577007383108139) ? ( (scaler_output_5 <= 0.4434153735637665) ? ( 437 ) : ( (scaler_output_9 <= 0.7573491707444191) ? ( 439 ) : ( 440 ) ) ) : ( 441 ) ) ) ) : ( (scaler_output_10 <= 1.275049865245819) ? ( (scaler_output_4 <= 0.9430315792560577) ? ( (scaler_output_9 <= 1.8987471535801888) ? ( 445 ) : ( 446 ) ) : ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_7 <= 1.3270467221736908) ? ( 449 ) : ( 450 ) ) : ( 451 ) ) ) : ( (scaler_output_5 <= -0.5656614601612091) ? ( 453 ) : ( (scaler_output_4 <= 1.0463672876358032) ? ( 455 ) : ( (scaler_output_11 <= 1.516821563243866) ? ( (scaler_output_6 <= 0.9779030382633209) ? ( 458 ) : ( 459 ) ) : ( 460 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_6
		
	
		namespace EXT_SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {137. }} ,
					{ 10 ,  {143. }} ,
					{ 14 ,  {116. }} ,
					{ 17 ,  {85. }} ,
					{ 18 ,  {77. }} ,
					{ 19 ,  {55. }} ,
					{ 21 ,  {51. }} ,
					{ 22 ,  {55. }} ,
					{ 23 ,  {113. }} ,
					{ 24 ,  {200. }} ,
					{ 28 ,  {70. }} ,
					{ 32 ,  {48. }} ,
					{ 33 ,  {45. }} ,
					{ 34 ,  {42. }} ,
					{ 36 ,  {39. }} ,
					{ 37 ,  {37. }} ,
					{ 40 ,  {90. }} ,
					{ 41 ,  {114. }} ,
					{ 45 ,  {74. }} ,
					{ 47 ,  {63. }} ,
					{ 48 ,  {65. }} ,
					{ 50 ,  {47. }} ,
					{ 52 ,  {53. }} ,
					{ 53 ,  {55. }} ,
					{ 57 ,  {75. }} ,
					{ 58 ,  {71. }} ,
					{ 59 ,  {96. }} ,
					{ 60 ,  {52. }} ,
					{ 64 ,  {128. }} ,
					{ 65 ,  {129. }} ,
					{ 67 ,  {72. }} ,
					{ 70 ,  {96. }} ,
					{ 71 ,  {91. }} ,
					{ 72 ,  {102. }} ,
					{ 79 ,  {60. }} ,
					{ 80 ,  {54. }} ,
					{ 81 ,  {79. }} ,
					{ 83 ,  {49. }} ,
					{ 84 ,  {53. }} ,
					{ 86 ,  {87. }} ,
					{ 87 ,  {94. }} ,
					{ 90 ,  {66. }} ,
					{ 91 ,  {64. }} ,
					{ 93 ,  {127. }} ,
					{ 94 ,  {103. }} ,
					{ 95 ,  {135. }} ,
					{ 96 ,  {158. }} ,
					{ 100 ,  {98. }} ,
					{ 101 ,  {150. }} ,
					{ 103 ,  {200. }} ,
					{ 104 ,  {219. }} ,
					{ 108 ,  {118. }} ,
					{ 111 ,  {53. }} ,
					{ 112 ,  {64. }} ,
					{ 114 ,  {90. }} ,
					{ 116 ,  {83. }} ,
					{ 118 ,  {77. }} ,
					{ 119 ,  {80. }} ,
					{ 122 ,  {132. }} ,
					{ 123 ,  {118. }} ,
					{ 125 ,  {89. }} ,
					{ 126 ,  {104. }} ,
					{ 127 ,  {216. }} ,
					{ 130 ,  {168. }} ,
					{ 131 ,  {60. }} ,
					{ 133 ,  {25. }} ,
					{ 136 ,  {39. }} ,
					{ 137 ,  {31. }} ,
					{ 141 ,  {67. }} ,
					{ 143 ,  {61. }} ,
					{ 145 ,  {60. }} ,
					{ 146 ,  {59. }} ,
					{ 149 ,  {44. }} ,
					{ 150 ,  {51. }} ,
					{ 151 ,  {59. }} ,
					{ 153 ,  {81. }} ,
					{ 154 ,  {63. }} ,
					{ 159 ,  {288. }} ,
					{ 161 ,  {263. }} ,
					{ 162 ,  {244. }} ,
					{ 165 ,  {182. }} ,
					{ 167 ,  {210. }} ,
					{ 168 ,  {201. }} ,
					{ 169 ,  {140. }} ,
					{ 171 ,  {145. }} ,
					{ 172 ,  {127. }} ,
					{ 174 ,  {187. }} ,
					{ 177 ,  {172. }} ,
					{ 180 ,  {141. }} ,
					{ 181 ,  {147. }} ,
					{ 182 ,  {131. }} ,
					{ 186 ,  {95. }} ,
					{ 187 ,  {96. }} ,
					{ 188 ,  {103. }} ,
					{ 190 ,  {113. }} ,
					{ 191 ,  {121. }} ,
					{ 199 ,  {178. }} ,
					{ 200 ,  {185. }} ,
					{ 202 ,  {162. }} ,
					{ 203 ,  {153. }} ,
					{ 205 ,  {111. }} ,
					{ 207 ,  {93. }} ,
					{ 208 ,  {91. }} ,
					{ 212 ,  {190. }} ,
					{ 213 ,  {168. }} ,
					{ 214 ,  {141. }} ,
					{ 216 ,  {257. }} ,
					{ 218 ,  {214. }} ,
					{ 219 ,  {200. }} ,
					{ 222 ,  {252. }} ,
					{ 225 ,  {58. }} ,
					{ 227 ,  {94. }} ,
					{ 228 ,  {124. }} ,
					{ 230 ,  {150. }} ,
					{ 232 ,  {168. }} ,
					{ 233 ,  {179. }} ,
					{ 236 ,  {154. }} ,
					{ 238 ,  {102. }} ,
					{ 240 ,  {84. }} ,
					{ 241 ,  {86. }} ,
					{ 244 ,  {66. }} ,
					{ 246 ,  {74. }} ,
					{ 247 ,  {73. }} ,
					{ 248 ,  {48. }} ,
					{ 251 ,  {144. }} ,
					{ 253 ,  {115. }} ,
					{ 255 ,  {94. }} ,
					{ 256 ,  {95. }} ,
					{ 260 ,  {206. }} ,
					{ 261 ,  {101. }} ,
					{ 265 ,  {252. }} ,
					{ 266 ,  {233. }} ,
					{ 268 ,  {292. }} ,
					{ 269 ,  {281. }} ,
					{ 272 ,  {245. }} ,
					{ 273 ,  {241. }} ,
					{ 274 ,  {229. }} ,
					{ 278 ,  {191. }} ,
					{ 280 ,  {200. }} ,
					{ 281 ,  {206. }} ,
					{ 284 ,  {283. }} ,
					{ 285 ,  {258. }} ,
					{ 286 ,  {185. }} ,
					{ 291 ,  {217. }} ,
					{ 292 ,  {209. }} ,
					{ 294 ,  {170. }} ,
					{ 296 ,  {190. }} ,
					{ 298 ,  {196. }} ,
					{ 299 ,  {197. }} ,
					{ 301 ,  {172. }} ,
					{ 303 ,  {123. }} ,
					{ 304 ,  {120. }} ,
					{ 307 ,  {69. }} ,
					{ 308 ,  {90. }} ,
					{ 310 ,  {142. }} ,
					{ 311 ,  {134. }} ,
					{ 316 ,  {68. }} ,
					{ 321 ,  {151. }} ,
					{ 322 ,  {99. }} ,
					{ 325 ,  {167. }} ,
					{ 326 ,  {178. }} ,
					{ 330 ,  {222. }} ,
					{ 331 ,  {221. }} ,
					{ 332 ,  {215. }} ,
					{ 334 ,  {195. }} ,
					{ 335 ,  {198. }} ,
					{ 338 ,  {281. }} ,
					{ 339 ,  {249. }} ,
					{ 341 ,  {235. }} ,
					{ 342 ,  {208. }} ,
					{ 347 ,  {151. }} ,
					{ 348 ,  {144. }} ,
					{ 350 ,  {138. }} ,
					{ 351 ,  {131. }} ,
					{ 352 ,  {178. }} ,
					{ 356 ,  {173. }} ,
					{ 357 ,  {180. }} ,
					{ 359 ,  {164. }} ,
					{ 360 ,  {150. }} ,
					{ 362 ,  {225. }} ,
					{ 363 ,  {212. }} ,
					{ 366 ,  {302. }} ,
					{ 368 ,  {276. }} ,
					{ 369 ,  {265. }} ,
					{ 372 ,  {283. }} ,
					{ 373 ,  {236. }} ,
					{ 376 ,  {235. }} ,
					{ 377 ,  {202. }} ,
					{ 379 ,  {166. }} ,
					{ 380 ,  {143. }} ,
					{ 382 ,  {155. }} ,
					{ 386 ,  {150. }} ,
					{ 388 ,  {173. }} ,
					{ 389 ,  {192. }} ,
					{ 391 ,  {268. }} ,
					{ 392 ,  {220. }} ,
					{ 395 ,  {270. }} ,
					{ 397 ,  {311. }} ,
					{ 398 ,  {297. }} ,
					{ 400 ,  {186. }} ,
					{ 405 ,  {232. }} ,
					{ 406 ,  {230. }} ,
					{ 407 ,  {217. }} ,
					{ 409 ,  {248. }} ,
					{ 410 ,  {242. }} ,
					{ 412 ,  {243. }} ,
					{ 413 ,  {258. }} ,
					{ 416 ,  {128. }} ,
					{ 418 ,  {274. }} ,
					{ 419 ,  {233. }} ,
					{ 427 ,  {279. }} ,
					{ 429 ,  {275. }} ,
					{ 430 ,  {277. }} ,
					{ 431 ,  {270. }} ,
					{ 432 ,  {332. }} ,
					{ 434 ,  {259. }} ,
					{ 435 ,  {264. }} ,
					{ 438 ,  {258. }} ,
					{ 439 ,  {261. }} ,
					{ 440 ,  {242. }} ,
					{ 441 ,  {220. }} ,
					{ 443 ,  {310. }} ,
					{ 444 ,  {306. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_4 <= -0.2740330770611763) ? ( (scaler_output_4 <= -0.6644123196601868) ? ( (scaler_output_6 <= 1.006538450717926) ? ( (scaler_output_2 <= -1.314242959022522) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( (scaler_output_7 <= -1.6473575234413147) ? ( (scaler_output_4 <= -1.4222072958946228) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_4 <= -0.9055289030075073) ? ( (scaler_output_7 <= -0.4875679314136505) ? ( (scaler_output_8 <= 0.2518090680241585) ? ( 14 ) : ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_6 <= -0.9120334684848785) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( 24 ) ) : ( (scaler_output_10 <= -0.7661082744598389) ? ( (scaler_output_2 <= -0.5453231632709503) ? ( (scaler_output_8 <= 0.29165154695510864) ? ( 28 ) : ( (scaler_output_2 <= -0.9297831058502197) ? ( (scaler_output_10 <= -1.0703800916671753) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( (scaler_output_8 <= 1.008816421031952) ? ( 36 ) : ( 37 ) ) ) ) : ( (scaler_output_9 <= -1.1047268509864807) ? ( (scaler_output_8 <= 0.9689739048480988) ? ( 40 ) : ( 41 ) ) : ( (scaler_output_6 <= -0.282054640352726) ? ( (scaler_output_7 <= -0.516888439655304) ? ( (scaler_output_7 <= -1.1847448348999023) ? ( 45 ) : ( (scaler_output_6 <= -1.2413405776023865) ? ( 47 ) : ( 48 ) ) ) : ( (scaler_output_7 <= -0.34096528589725494) ? ( 50 ) : ( (scaler_output_5 <= -0.8505772724747658) ? ( 52 ) : ( 53 ) ) ) ) : ( (scaler_output_7 <= 0.3106019049882889) ? ( (scaler_output_6 <= -0.05297143687494099) ? ( (scaler_output_4 <= -1.0318280756473541) ? ( 57 ) : ( 58 ) ) : ( 59 ) ) : ( 60 ) ) ) ) ) : ( (scaler_output_10 <= -0.6579799056053162) ? ( (scaler_output_8 <= -0.14661585073918104) ? ( (scaler_output_2 <= -0.12241725623607635) ? ( 64 ) : ( 65 ) ) : ( (scaler_output_7 <= -0.3800593316555023) ? ( 67 ) : ( (scaler_output_5 <= 0.716459646821022) ? ( (scaler_output_2 <= 0.45427264273166656) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) ) ) : ( (scaler_output_11 <= 0.6495750248432159) ? ( (scaler_output_2 <= 0.8002865314483643) ? ( (scaler_output_6 <= 0.5054188966751099) ? ( (scaler_output_2 <= -0.007079290226101875) ? ( (scaler_output_5 <= -0.17390222544781864) ? ( (scaler_output_9 <= -0.8632023259997368) ? ( 79 ) : ( 80 ) ) : ( 81 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 83 ) : ( 84 ) ) ) : ( (scaler_output_5 <= -0.5300469696521759) ? ( 86 ) : ( 87 ) ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_7 <= -0.005408167839050293) ? ( 90 ) : ( 91 ) ) : ( (scaler_output_5 <= 0.7876886129379272) ? ( 93 ) : ( 94 ) ) ) ) : ( 95 ) ) ) ) ) : ( 96 ) ) : ( (scaler_output_7 <= -0.539693295955658) ? ( (scaler_output_5 <= -0.38758906349539757) ? ( (scaler_output_4 <= -0.53811314702034) ? ( 100 ) : ( 101 ) ) : ( (scaler_output_11 <= -0.434483140707016) ? ( 103 ) : ( 104 ) ) ) : ( (scaler_output_5 <= 2.0698097348213196) ? ( (scaler_output_11 <= 0.25931408256292343) ? ( (scaler_output_4 <= -0.53811314702034) ? ( 108 ) : ( (scaler_output_5 <= -0.4944325089454651) ? ( (scaler_output_2 <= -0.4299851804971695) ? ( 111 ) : ( 112 ) ) : ( (scaler_output_11 <= -1.1716426759958267) ? ( 114 ) : ( (scaler_output_5 <= 0.03978462517261505) ? ( 116 ) : ( (scaler_output_8 <= -0.38567084074020386) ? ( 118 ) : ( 119 ) ) ) ) ) ) : ( (scaler_output_10 <= -0.8808998465538025) ? ( (scaler_output_11 <= 0.8230243176221848) ? ( 122 ) : ( 123 ) ) : ( (scaler_output_4 <= -0.4462592303752899) ? ( 125 ) : ( 126 ) ) ) ) : ( 127 ) ) ) ) : ( (scaler_output_2 <= -1.544918954372406) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( 130 ) : ( 131 ) ) : ( (scaler_output_4 <= -0.22810611873865128) ? ( 133 ) : ( (scaler_output_10 <= -1.2924543023109436) ? ( (scaler_output_10 <= -1.6066208481788635) ? ( 136 ) : ( 137 ) ) : ( (scaler_output_2 <= 0.6465025544166565) ? ( (scaler_output_2 <= -0.39153921231627464) ? ( (scaler_output_6 <= -1.4704238176345825) ? ( 141 ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 143 ) : ( (scaler_output_10 <= -0.6737861484289169) ? ( 145 ) : ( 146 ) ) ) ) : ( (scaler_output_8 <= 1.287713885307312) ? ( (scaler_output_7 <= -0.4680209159851074) ? ( 149 ) : ( 150 ) ) : ( 151 ) ) ) : ( (scaler_output_4 <= -0.12477043271064758) ? ( 153 ) : ( 154 ) ) ) ) ) ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_8 <= -0.6247257590293884) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 159 ) : ( (scaler_output_11 <= -0.04422220587730408) ? ( 161 ) : ( 162 ) ) ) : ( (scaler_output_11 <= -0.261033833026886) ? ( (scaler_output_4 <= 0.1622731238603592) ? ( 165 ) : ( (scaler_output_7 <= -0.7677418142557144) ? ( 167 ) : ( 168 ) ) ) : ( 169 ) ) ) : ( (scaler_output_6 <= -0.9406688809394836) ? ( 171 ) : ( 172 ) ) ) : ( (scaler_output_6 <= -0.8977157771587372) ? ( 174 ) : ( (scaler_output_8 <= 0.4111790359020233) ? ( (scaler_output_7 <= -0.16504214890301228) ? ( 177 ) : ( (scaler_output_6 <= -0.21046613901853561) ? ( (scaler_output_10 <= -0.6060459613800049) ? ( 180 ) : ( 181 ) ) : ( 182 ) ) ) : ( (scaler_output_2 <= -0.5068771690130234) ? ( (scaler_output_10 <= -0.6583284437656403) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 186 ) : ( 187 ) ) : ( 188 ) ) : ( (scaler_output_4 <= 0.4378349334001541) ? ( 190 ) : ( 191 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= 0.4516777843236923) ? ( (scaler_output_11 <= 0.17258942872285843) ? ( (scaler_output_4 <= -0.43477748334407806) ? ( (scaler_output_4 <= -0.8825654089450836) ? ( (scaler_output_7 <= -1.1098145544528961) ? ( (scaler_output_7 <= -1.6017478108406067) ? ( 199 ) : ( 200 ) ) : ( (scaler_output_2 <= -0.737553121522069) ? ( 202 ) : ( 203 ) ) ) : ( (scaler_output_10 <= -0.07132707454729825) ? ( 205 ) : ( (scaler_output_6 <= 0.2190648764371872) ? ( 207 ) : ( 208 ) ) ) ) : ( (scaler_output_10 <= 0.03249938040971756) ? ( (scaler_output_5 <= 0.14662805199623108) ? ( (scaler_output_11 <= -1.5185412764549255) ? ( 212 ) : ( 213 ) ) : ( 214 ) ) : ( (scaler_output_8 <= -0.9434657096862793) ? ( 216 ) : ( (scaler_output_7 <= 0.4930407255887985) ? ( 218 ) : ( 219 ) ) ) ) ) : ( (scaler_output_8 <= -0.3458283096551895) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 222 ) : ( (scaler_output_6 <= -0.4681847542524338) ? ( (scaler_output_2 <= -0.5837691687047482) ? ( 225 ) : ( (scaler_output_2 <= 0.6465025879442692) ? ( 227 ) : ( 228 ) ) ) : ( (scaler_output_11 <= 0.6495750248432159) ? ( 230 ) : ( (scaler_output_11 <= 1.0398359596729279) ? ( 232 ) : ( 233 ) ) ) ) ) : ( (scaler_output_4 <= -0.6184853613376617) ? ( (scaler_output_11 <= 0.30267641693353653) ? ( 236 ) : ( (scaler_output_5 <= -0.7199908494949341) ? ( 238 ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( 240 ) : ( 241 ) ) ) ) : ( (scaler_output_5 <= 1.3575202226638794) ? ( (scaler_output_11 <= 0.34603874385356903) ? ( 244 ) : ( (scaler_output_6 <= 0.5054188787471503) ? ( 246 ) : ( 247 ) ) ) : ( 248 ) ) ) ) ) : ( (scaler_output_5 <= -0.9218061864376068) ? ( (scaler_output_6 <= -0.7402210831642151) ? ( 251 ) : ( (scaler_output_5 <= -1.4916378259658813) ? ( 253 ) : ( (scaler_output_4 <= -1.054791547358036) ? ( 255 ) : ( 256 ) ) ) ) : ( (scaler_output_8 <= -0.70441073179245) ? ( (scaler_output_2 <= -1.1220130622386932) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 260 ) : ( 261 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.3043961599469185) ? ( (scaler_output_11 <= -1.1282803565263748) ? ( 265 ) : ( 266 ) ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( 268 ) : ( 269 ) ) ) : ( (scaler_output_7 <= 0.818824291229248) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 272 ) : ( 273 ) ) : ( 274 ) ) ) ) : ( (scaler_output_6 <= 0.3049710765480995) ? ( (scaler_output_10 <= 0.65873983502388) ? ( (scaler_output_7 <= -1.0511735379695892) ? ( 278 ) : ( (scaler_output_2 <= 0.5311646014451981) ? ( 280 ) : ( 281 ) ) ) : ( (scaler_output_6 <= -0.13887764140963554) ? ( (scaler_output_7 <= -1.2596750259399414) ? ( 284 ) : ( 285 ) ) : ( 286 ) ) ) : ( (scaler_output_8 <= 0.7299189567565918) ? ( (scaler_output_11 <= 1.5601838827133179) ? ( (scaler_output_6 <= 1.0065383911132812) ? ( (scaler_output_6 <= 0.8490436971187592) ? ( 291 ) : ( 292 ) ) : ( (scaler_output_5 <= 0.46715831756591797) ? ( 294 ) : ( (scaler_output_2 <= 0.7618405520915985) ? ( 296 ) : ( (scaler_output_10 <= 2.1930859684944153) ? ( 298 ) : ( 299 ) ) ) ) ) : ( (scaler_output_5 <= 0.1822425313293934) ? ( 301 ) : ( (scaler_output_2 <= 0.14670467376708984) ? ( 303 ) : ( 304 ) ) ) ) : ( (scaler_output_4 <= -0.4003322347998619) ? ( (scaler_output_11 <= -0.3477585017681122) ? ( 307 ) : ( 308 ) ) : ( (scaler_output_8 <= 1.4470837712287903) ? ( 310 ) : ( 311 ) ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.3908195495605469) ? ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_8 <= 0.09243909455835819) ? ( (scaler_output_2 <= -1.4295809864997864) ? ( 316 ) : ( (scaler_output_2 <= 0.7233945429325104) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_7 <= -0.8394142091274261) ? ( (scaler_output_5 <= -0.31636013090610504) ? ( 321 ) : ( 322 ) ) : ( (scaler_output_8 <= -0.8637807071208954) ? ( (scaler_output_6 <= -0.1531953513622284) ? ( 325 ) : ( 326 ) ) : ( (scaler_output_8 <= -0.30598582327365875) ? ( (scaler_output_6 <= 0.8919968008995056) ? ( (scaler_output_10 <= 0.7911524176597595) ? ( 330 ) : ( 331 ) ) : ( 332 ) ) : ( (scaler_output_6 <= 0.4338303804397583) ? ( 334 ) : ( 335 ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_7 <= 0.26499223709106445) ? ( 338 ) : ( 339 ) ) : ( (scaler_output_2 <= 0.5311645865440369) ? ( 341 ) : ( 342 ) ) ) ) : ( (scaler_output_11 <= 0.17258942872285843) ? ( (scaler_output_8 <= -0.6247257590293884) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 347 ) : ( 348 ) ) : ( (scaler_output_9 <= 1.6922827363014221) ? ( 350 ) : ( 351 ) ) ) : ( 352 ) ) : ( (scaler_output_9 <= 1.1040537059307098) ? ( (scaler_output_10 <= 0.5948107689619064) ? ( (scaler_output_11 <= 0.34603873640298843) ? ( 356 ) : ( 357 ) ) : ( (scaler_output_5 <= -0.06705880165100098) ? ( 359 ) : ( 360 ) ) ) : ( (scaler_output_6 <= 0.634278193116188) ? ( 362 ) : ( 363 ) ) ) ) ) ) : ( (scaler_output_10 <= 0.4345443993806839) ? ( (scaler_output_2 <= -1.0835670307278633) ? ( 366 ) : ( (scaler_output_7 <= -0.3735436573624611) ? ( 368 ) : ( 369 ) ) ) : ( (scaler_output_11 <= -0.3043961599469185) ? ( (scaler_output_10 <= 1.4035919904708862) ? ( 372 ) : ( 373 ) ) : ( (scaler_output_8 <= 0.8892889618873596) ? ( (scaler_output_11 <= 0.3460387457162142) ? ( 376 ) : ( 377 ) ) : ( (scaler_output_6 <= 0.9779030233621597) ? ( 379 ) : ( 380 ) ) ) ) ) ) : ( (scaler_output_10 <= 0.11743468791246414) ? ( 382 ) : ( (scaler_output_5 <= 0.37218640744686127) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.9200681447982788) ? ( 386 ) : ( (scaler_output_6 <= 1.3358455300331116) ? ( 388 ) : ( 389 ) ) ) : ( (scaler_output_10 <= 1.5406018495559692) ? ( 391 ) : ( 392 ) ) ) : ( (scaler_output_4 <= 0.7248784899711609) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 395 ) : ( (scaler_output_7 <= 0.3562115877866745) ? ( 397 ) : ( 398 ) ) ) : ( (scaler_output_10 <= 0.8810737729072571) ? ( 400 ) : ( (scaler_output_8 <= -0.6645682454109192) ? ( (scaler_output_9 <= 2.9933985471725464) ? ( (scaler_output_4 <= 1.218593418598175) ? ( (scaler_output_10 <= 1.543833702802658) ? ( 405 ) : ( 406 ) ) : ( 407 ) ) : ( (scaler_output_11 <= 1.343372255563736) ? ( 409 ) : ( 410 ) ) ) : ( (scaler_output_6 <= 1.4360694289207458) ? ( 412 ) : ( 413 ) ) ) ) ) ) ) ) : ( (scaler_output_2 <= -0.8913370668888092) ? ( (scaler_output_5 <= 0.3247004300355911) ? ( 416 ) : ( (scaler_output_10 <= 0.6626192778348923) ? ( 418 ) : ( 419 ) ) ) : ( (scaler_output_6 <= 0.662913590669632) ? ( (scaler_output_11 <= 1.9938071370124817) ? ( (scaler_output_8 <= -0.5848832726478577) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_5 <= 1.4643636345863342) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 427 ) : ( (scaler_output_6 <= 0.061570167541503906) ? ( 429 ) : ( 430 ) ) ) : ( 431 ) ) : ( 432 ) ) : ( (scaler_output_4 <= 1.6548995971679688) ? ( 434 ) : ( 435 ) ) ) : ( (scaler_output_4 <= 2.9752999544143677) ? ( (scaler_output_6 <= 0.276335671544075) ? ( 438 ) : ( 439 ) ) : ( 440 ) ) ) : ( 441 ) ) : ( (scaler_output_7 <= 1.1185452044010162) ? ( 443 ) : ( 444 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_7
		
	
		namespace EXT_SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {31. }} ,
					{ 8 ,  {113. }} ,
					{ 11 ,  {178. }} ,
					{ 15 ,  {144. }} ,
					{ 16 ,  {150. }} ,
					{ 17 ,  {158. }} ,
					{ 20 ,  {74. }} ,
					{ 21 ,  {79. }} ,
					{ 24 ,  {146. }} ,
					{ 27 ,  {127. }} ,
					{ 28 ,  {128. }} ,
					{ 29 ,  {135. }} ,
					{ 30 ,  {104. }} ,
					{ 33 ,  {168. }} ,
					{ 34 ,  {160. }} ,
					{ 36 ,  {200. }} ,
					{ 37 ,  {216. }} ,
					{ 43 ,  {104. }} ,
					{ 45 ,  {88. }} ,
					{ 46 ,  {83. }} ,
					{ 48 ,  {53. }} ,
					{ 49 ,  {55. }} ,
					{ 51 ,  {160. }} ,
					{ 52 ,  {89. }} ,
					{ 56 ,  {61. }} ,
					{ 57 ,  {70. }} ,
					{ 60 ,  {77. }} ,
					{ 61 ,  {83. }} ,
					{ 62 ,  {71. }} ,
					{ 64 ,  {67. }} ,
					{ 66 ,  {44. }} ,
					{ 67 ,  {53. }} ,
					{ 71 ,  {78. }} ,
					{ 72 ,  {54. }} ,
					{ 75 ,  {116. }} ,
					{ 77 ,  {138. }} ,
					{ 78 ,  {135. }} ,
					{ 80 ,  {88. }} ,
					{ 81 ,  {107. }} ,
					{ 84 ,  {219. }} ,
					{ 85 ,  {200. }} ,
					{ 86 ,  {177. }} ,
					{ 93 ,  {48. }} ,
					{ 94 ,  {37. }} ,
					{ 95 ,  {61. }} ,
					{ 97 ,  {85. }} ,
					{ 98 ,  {98. }} ,
					{ 100 ,  {51. }} ,
					{ 102 ,  {39. }} ,
					{ 103 ,  {42. }} ,
					{ 106 ,  {96. }} ,
					{ 107 ,  {92. }} ,
					{ 109 ,  {72. }} ,
					{ 110 ,  {64. }} ,
					{ 113 ,  {90. }} ,
					{ 115 ,  {137. }} ,
					{ 116 ,  {158. }} ,
					{ 120 ,  {125. }} ,
					{ 122 ,  {40. }} ,
					{ 124 ,  {87. }} ,
					{ 126 ,  {66. }} ,
					{ 129 ,  {77. }} ,
					{ 130 ,  {75. }} ,
					{ 131 ,  {72. }} ,
					{ 134 ,  {96. }} ,
					{ 136 ,  {102. }} ,
					{ 137 ,  {103. }} ,
					{ 140 ,  {118. }} ,
					{ 141 ,  {113. }} ,
					{ 142 ,  {108. }} ,
					{ 145 ,  {52. }} ,
					{ 149 ,  {81. }} ,
					{ 150 ,  {84. }} ,
					{ 151 ,  {71. }} ,
					{ 152 ,  {91. }} ,
					{ 154 ,  {49. }} ,
					{ 156 ,  {59. }} ,
					{ 157 ,  {63. }} ,
					{ 158 ,  {253. }} ,
					{ 162 ,  {94. }} ,
					{ 164 ,  {252. }} ,
					{ 166 ,  {200. }} ,
					{ 167 ,  {214. }} ,
					{ 171 ,  {140. }} ,
					{ 174 ,  {88. }} ,
					{ 175 ,  {93. }} ,
					{ 176 ,  {102. }} ,
					{ 178 ,  {84. }} ,
					{ 180 ,  {58. }} ,
					{ 182 ,  {74. }} ,
					{ 183 ,  {69. }} ,
					{ 186 ,  {91. }} ,
					{ 187 ,  {90. }} ,
					{ 191 ,  {185. }} ,
					{ 192 ,  {209. }} ,
					{ 193 ,  {154. }} ,
					{ 194 ,  {120. }} ,
					{ 197 ,  {283. }} ,
					{ 204 ,  {190. }} ,
					{ 205 ,  {191. }} ,
					{ 206 ,  {198. }} ,
					{ 211 ,  {131. }} ,
					{ 212 ,  {168. }} ,
					{ 215 ,  {101. }} ,
					{ 217 ,  {92. }} ,
					{ 218 ,  {94. }} ,
					{ 220 ,  {124. }} ,
					{ 221 ,  {123. }} ,
					{ 222 ,  {48. }} ,
					{ 223 ,  {197. }} ,
					{ 226 ,  {262. }} ,
					{ 227 ,  {245. }} ,
					{ 231 ,  {200. }} ,
					{ 232 ,  {206. }} ,
					{ 233 ,  {179. }} ,
					{ 236 ,  {151. }} ,
					{ 237 ,  {109. }} ,
					{ 238 ,  {217. }} ,
					{ 241 ,  {100. }} ,
					{ 242 ,  {95. }} ,
					{ 244 ,  {115. }} ,
					{ 247 ,  {142. }} ,
					{ 248 ,  {141. }} ,
					{ 249 ,  {134. }} ,
					{ 251 ,  {202. }} ,
					{ 253 ,  {219. }} ,
					{ 254 ,  {230. }} ,
					{ 257 ,  {126. }} ,
					{ 258 ,  {171. }} ,
					{ 262 ,  {259. }} ,
					{ 263 ,  {257. }} ,
					{ 264 ,  {281. }} ,
					{ 266 ,  {233. }} ,
					{ 267 ,  {229. }} ,
					{ 273 ,  {201. }} ,
					{ 276 ,  {182. }} ,
					{ 277 ,  {184. }} ,
					{ 278 ,  {187. }} ,
					{ 279 ,  {145. }} ,
					{ 283 ,  {90. }} ,
					{ 284 ,  {95. }} ,
					{ 285 ,  {70. }} ,
					{ 288 ,  {103. }} ,
					{ 289 ,  {96. }} ,
					{ 292 ,  {172. }} ,
					{ 293 ,  {191. }} ,
					{ 296 ,  {147. }} ,
					{ 297 ,  {144. }} ,
					{ 299 ,  {141. }} ,
					{ 300 ,  {140. }} ,
					{ 307 ,  {167. }} ,
					{ 308 ,  {174. }} ,
					{ 309 ,  {196. }} ,
					{ 312 ,  {111. }} ,
					{ 313 ,  {84. }} ,
					{ 315 ,  {128. }} ,
					{ 316 ,  {151. }} ,
					{ 318 ,  {90. }} ,
					{ 319 ,  {78. }} ,
					{ 323 ,  {52. }} ,
					{ 325 ,  {137. }} ,
					{ 326 ,  {122. }} ,
					{ 327 ,  {259. }} ,
					{ 331 ,  {275. }} ,
					{ 334 ,  {212. }} ,
					{ 336 ,  {220. }} ,
					{ 337 ,  {225. }} ,
					{ 339 ,  {242. }} ,
					{ 340 ,  {233. }} ,
					{ 342 ,  {192. }} ,
					{ 343 ,  {180. }} ,
					{ 345 ,  {317. }} ,
					{ 346 ,  {268. }} ,
					{ 349 ,  {302. }} ,
					{ 351 ,  {276. }} ,
					{ 352 ,  {281. }} ,
					{ 354 ,  {242. }} ,
					{ 355 ,  {220. }} ,
					{ 360 ,  {52. }} ,
					{ 361 ,  {113. }} ,
					{ 367 ,  {232. }} ,
					{ 370 ,  {198. }} ,
					{ 371 ,  {202. }} ,
					{ 372 ,  {208. }} ,
					{ 375 ,  {170. }} ,
					{ 376 ,  {178. }} ,
					{ 377 ,  {195. }} ,
					{ 379 ,  {248. }} ,
					{ 381 ,  {236. }} ,
					{ 382 ,  {235. }} ,
					{ 384 ,  {244. }} ,
					{ 385 ,  {273. }} ,
					{ 387 ,  {67. }} ,
					{ 389 ,  {144. }} ,
					{ 390 ,  {143. }} ,
					{ 394 ,  {232. }} ,
					{ 396 ,  {246. }} ,
					{ 397 ,  {248. }} ,
					{ 400 ,  {277. }} ,
					{ 401 ,  {270. }} ,
					{ 402 ,  {297. }} ,
					{ 403 ,  {155. }} ,
					{ 409 ,  {293. }} ,
					{ 412 ,  {281. }} ,
					{ 413 ,  {280. }} ,
					{ 414 ,  {277. }} ,
					{ 416 ,  {263. }} ,
					{ 417 ,  {275. }} ,
					{ 419 ,  {332. }} ,
					{ 420 ,  {303. }} ,
					{ 423 ,  {321. }} ,
					{ 424 ,  {308. }} ,
					{ 425 ,  {336. }} ,
					{ 429 ,  {237. }} ,
					{ 431 ,  {215. }} ,
					{ 432 ,  {220. }} ,
					{ 433 ,  {186. }} ,
					{ 435 ,  {310. }} ,
					{ 437 ,  {258. }} ,
					{ 438 ,  {264. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.11634615436196327) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= -1.2924543023109436) ? ( (scaler_output_11 <= -0.8681063950061798) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_4 <= -0.3314417898654938) ? ( (scaler_output_7 <= -1.3020268678665161) ? ( 11 ) : ( (scaler_output_2 <= -1.160459041595459) ? ( (scaler_output_6 <= -0.43954935669898987) ? ( (scaler_output_10 <= -0.6441380530595779) ? ( 15 ) : ( 16 ) ) : ( 17 ) ) : ( (scaler_output_4 <= -0.917010635137558) ? ( (scaler_output_10 <= -0.8087813258171082) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= 0.9301465302705765) ? ( (scaler_output_10 <= -0.7385193109512329) ? ( 24 ) : ( (scaler_output_5 <= -0.06705878674983978) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 27 ) : ( 28 ) ) : ( 29 ) ) ) : ( 30 ) ) ) ) ) : ( (scaler_output_5 <= 0.03978463262319565) ? ( (scaler_output_10 <= -0.7871164083480835) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_7 <= -0.2692929096519947) ? ( 36 ) : ( 37 ) ) ) ) ) : ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_5 <= -0.814962774515152) ? ( (scaler_output_2 <= 0.6465025693178177) ? ( (scaler_output_7 <= -0.5299197733402252) ? ( (scaler_output_4 <= -1.5829516649246216) ? ( 43 ) : ( (scaler_output_8 <= -1.0629931567236781) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_7 <= -0.4191533476114273) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_7 <= 0.26173433661460876) ? ( 51 ) : ( 52 ) ) ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( (scaler_output_7 <= -0.5103727579116821) ? ( (scaler_output_8 <= -0.7442532181739807) ? ( 56 ) : ( 57 ) ) : ( (scaler_output_6 <= -0.43954935297369957) ? ( (scaler_output_4 <= -0.3544052690267563) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) ) : ( (scaler_output_5 <= 0.14662805944681168) ? ( 64 ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 66 ) : ( 67 ) ) ) ) ) : ( (scaler_output_5 <= 0.004170157015323639) ? ( (scaler_output_11 <= -1.1282804012298584) ? ( (scaler_output_10 <= -1.4436786770820618) ? ( 71 ) : ( 72 ) ) : ( (scaler_output_2 <= -0.08397126570343971) ? ( (scaler_output_6 <= -0.9263511896133423) ? ( 75 ) : ( (scaler_output_6 <= -0.7259033620357513) ? ( 77 ) : ( 78 ) ) ) : ( (scaler_output_4 <= -0.5495948940515518) ? ( 80 ) : ( 81 ) ) ) ) : ( (scaler_output_7 <= -0.02495521306991577) ? ( (scaler_output_6 <= -0.9549866020679474) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) ) ) ) : ( (scaler_output_5 <= -0.6725048720836639) ? ( (scaler_output_7 <= -0.38983283936977386) ? ( (scaler_output_7 <= -0.8915395736694336) ? ( (scaler_output_11 <= -0.6079324334859848) ? ( (scaler_output_11 <= -0.8681063950061798) ? ( (scaler_output_10 <= -1.3060796856880188) ? ( 93 ) : ( 94 ) ) : ( 95 ) ) : ( (scaler_output_6 <= -0.9693042635917664) ? ( 97 ) : ( 98 ) ) ) : ( (scaler_output_2 <= -1.4295809864997864) ? ( 100 ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 102 ) : ( 103 ) ) ) ) : ( (scaler_output_9 <= -0.925531268119812) ? ( (scaler_output_6 <= 0.16179408133029938) ? ( 106 ) : ( 107 ) ) : ( (scaler_output_10 <= -0.6727245450019836) ? ( 109 ) : ( 110 ) ) ) ) : ( (scaler_output_4 <= -1.1810907125473022) ? ( (scaler_output_11 <= -0.5645701214671135) ? ( 113 ) : ( (scaler_output_10 <= -0.8000987768173218) ? ( 115 ) : ( 116 ) ) ) : ( (scaler_output_7 <= 0.1444522626698017) ? ( (scaler_output_6 <= -0.11024223733693361) ? ( (scaler_output_5 <= -0.6012759208679199) ? ( 120 ) : ( (scaler_output_6 <= -1.6136007606983185) ? ( 122 ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 124 ) : ( (scaler_output_7 <= -0.7840310037136078) ? ( 126 ) : ( (scaler_output_4 <= -0.9399741291999817) ? ( (scaler_output_8 <= 1.168186366558075) ? ( 129 ) : ( 130 ) ) : ( 131 ) ) ) ) ) ) : ( (scaler_output_4 <= -0.7792297303676605) ? ( (scaler_output_11 <= -0.4778454452753067) ? ( 134 ) : ( (scaler_output_4 <= -0.9399741291999817) ? ( 136 ) : ( 137 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.607932448387146) ? ( 140 ) : ( 141 ) ) : ( 142 ) ) ) ) : ( (scaler_output_4 <= -0.12477043271064758) ? ( (scaler_output_10 <= -1.3195552825927734) ? ( 145 ) : ( (scaler_output_2 <= 1.030962496995926) ? ( (scaler_output_5 <= -0.4588180184364319) ? ( (scaler_output_6 <= 1.2642570286989212) ? ( 149 ) : ( 150 ) ) : ( 151 ) ) : ( 152 ) ) ) : ( (scaler_output_2 <= 0.3773806244134903) ? ( 154 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 156 ) : ( 157 ) ) ) ) ) ) ) ) : ( 158 ) ) : ( (scaler_output_4 <= -0.5036679357290268) ? ( (scaler_output_4 <= -0.9973828196525574) ? ( (scaler_output_4 <= -1.6748056411743164) ? ( 162 ) : ( (scaler_output_11 <= -1.0415557026863098) ? ( 164 ) : ( (scaler_output_6 <= -0.2820546552538872) ? ( 166 ) : ( 167 ) ) ) ) : ( (scaler_output_5 <= 0.11101358011364937) ? ( (scaler_output_5 <= -0.48256099224090576) ? ( (scaler_output_11 <= -1.2583673596382141) ? ( 171 ) : ( (scaler_output_11 <= -0.13094684481620789) ? ( (scaler_output_5 <= -1.0642641186714172) ? ( 174 ) : ( 175 ) ) : ( 176 ) ) ) : ( (scaler_output_5 <= -0.38758906722068787) ? ( 178 ) : ( (scaler_output_7 <= -0.3605123199522495) ? ( 180 ) : ( (scaler_output_7 <= 0.8383713327348232) ? ( 182 ) : ( 183 ) ) ) ) ) : ( (scaler_output_4 <= -0.8136749565601349) ? ( (scaler_output_10 <= 1.1213099360466003) ? ( 186 ) : ( 187 ) ) : ( (scaler_output_11 <= 1.473459243774414) ? ( (scaler_output_8 <= -0.027088381350040436) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 191 ) : ( 192 ) ) : ( 193 ) ) : ( 194 ) ) ) ) ) : ( (scaler_output_9 <= 0.9248580634593964) ? ( (scaler_output_7 <= -1.6408418416976929) ? ( 197 ) : ( (scaler_output_6 <= 1.722423493862152) ? ( (scaler_output_6 <= 1.0781269073486328) ? ( (scaler_output_7 <= 0.02717016637325287) ? ( (scaler_output_7 <= -0.9241179525852203) ? ( (scaler_output_9 <= -0.7190667390823364) ? ( (scaler_output_10 <= 0.19759093970060349) ? ( 204 ) : ( 205 ) ) : ( 206 ) ) : ( (scaler_output_10 <= 2.204393148422241) ? ( (scaler_output_4 <= 0.0589374415576458) ? ( (scaler_output_5 <= -0.4944324940443039) ? ( (scaler_output_8 <= 0.37133652716875076) ? ( 211 ) : ( 212 ) ) : ( (scaler_output_5 <= 0.2534714788198471) ? ( (scaler_output_7 <= -0.45498956739902496) ? ( 215 ) : ( (scaler_output_11 <= -0.0008599162101745605) ? ( 217 ) : ( 218 ) ) ) : ( (scaler_output_11 <= 1.343372255563736) ? ( 220 ) : ( 221 ) ) ) ) : ( 222 ) ) : ( 223 ) ) ) : ( (scaler_output_6 <= 0.04725246876478195) ? ( (scaler_output_7 <= 0.12816308438777924) ? ( 226 ) : ( 227 ) ) : ( (scaler_output_2 <= -0.8528910875320435) ? ( (scaler_output_4 <= -0.2510695978999138) ? ( (scaler_output_5 <= -0.814962774515152) ? ( 231 ) : ( 232 ) ) : ( 233 ) ) : ( (scaler_output_5 <= 0.9657609909772873) ? ( (scaler_output_2 <= 0.1082586944103241) ? ( 236 ) : ( 237 ) ) : ( 238 ) ) ) ) ) : ( (scaler_output_4 <= -0.15921565890312195) ? ( (scaler_output_2 <= 0.33893464133143425) ? ( 241 ) : ( 242 ) ) : ( (scaler_output_5 <= -0.9218062125146389) ? ( 244 ) : ( (scaler_output_8 <= 1.5666112303733826) ? ( (scaler_output_8 <= 0.8892889022827148) ? ( 247 ) : ( 248 ) ) : ( 249 ) ) ) ) ) : ( (scaler_output_7 <= 1.5420638918876648) ? ( 251 ) : ( (scaler_output_4 <= -0.13625217229127884) ? ( 253 ) : ( 254 ) ) ) ) ) : ( (scaler_output_11 <= -0.6512947827577591) ? ( (scaler_output_7 <= 0.8709497153759003) ? ( 257 ) : ( 258 ) ) : ( (scaler_output_9 <= 1.8636871576309204) ? ( (scaler_output_6 <= 0.8633613884449005) ? ( (scaler_output_2 <= 0.4927186071872711) ? ( 262 ) : ( 263 ) ) : ( 264 ) ) : ( (scaler_output_5 <= -0.24513117223978043) ? ( 266 ) : ( 267 ) ) ) ) ) ) ) : ( (scaler_output_5 <= 0.46715833246707916) ? ( (scaler_output_10 <= -0.21344593167304993) ? ( (scaler_output_6 <= -0.5970440804958344) ? ( (scaler_output_2 <= 0.4927186071872711) ? ( (scaler_output_8 <= -0.505198284983635) ? ( 273 ) : ( (scaler_output_4 <= 0.9430316090583801) ? ( (scaler_output_7 <= -0.9241179376840591) ? ( 276 ) : ( 277 ) ) : ( 278 ) ) ) : ( 279 ) ) : ( (scaler_output_7 <= -0.3279339522123337) ? ( (scaler_output_10 <= -0.5557497441768646) ? ( (scaler_output_7 <= -0.575529471039772) ? ( 283 ) : ( 284 ) ) : ( 285 ) ) : ( (scaler_output_2 <= -1.1989050507545471) ? ( (scaler_output_5 <= -0.5656614452600479) ? ( 288 ) : ( 289 ) ) : ( (scaler_output_4 <= 0.7363602519035339) ? ( (scaler_output_5 <= -0.6368904262781143) ? ( 292 ) : ( 293 ) ) : ( (scaler_output_4 <= 1.2760021090507507) ? ( (scaler_output_2 <= 0.031366705894470215) ? ( 296 ) : ( 297 ) ) : ( (scaler_output_11 <= -0.5645701289176941) ? ( 299 ) : ( 300 ) ) ) ) ) ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_10 <= 0.6095067858695984) ? ( (scaler_output_8 <= -0.3458283096551895) ? ( (scaler_output_10 <= 0.24467810988426208) ? ( (scaler_output_5 <= -0.28074564784765244) ? ( (scaler_output_7 <= 0.45068882033228874) ? ( 307 ) : ( 308 ) ) : ( 309 ) ) : ( (scaler_output_8 <= -0.9434657096862793) ? ( (scaler_output_6 <= 1.3931163996458054) ? ( 312 ) : ( 313 ) ) : ( (scaler_output_2 <= -0.4299851804971695) ? ( 315 ) : ( 316 ) ) ) ) : ( (scaler_output_5 <= -1.4204089045524597) ? ( 318 ) : ( 319 ) ) ) : ( (scaler_output_11 <= 0.17258943058550358) ? ( (scaler_output_4 <= 1.1611846685409546) ? ( (scaler_output_5 <= -0.4944324940443039) ? ( 323 ) : ( (scaler_output_5 <= -0.28074564784765244) ? ( 325 ) : ( 326 ) ) ) : ( 327 ) ) : ( (scaler_output_9 <= 2.0078227519989014) ? ( (scaler_output_7 <= 1.0208101272583008) ? ( (scaler_output_6 <= -0.05297143687494099) ? ( 331 ) : ( (scaler_output_4 <= 1.7352718114852905) ? ( (scaler_output_11 <= 0.47612570226192474) ? ( 334 ) : ( (scaler_output_7 <= -0.06730708479881287) ? ( 336 ) : ( 337 ) ) ) : ( (scaler_output_10 <= 1.1127340197563171) ? ( 339 ) : ( 340 ) ) ) ) : ( (scaler_output_5 <= -0.48256103694438934) ? ( 342 ) : ( 343 ) ) ) : ( (scaler_output_4 <= 1.126739501953125) ? ( 345 ) : ( 346 ) ) ) ) ) : ( (scaler_output_7 <= 0.558197408914566) ? ( (scaler_output_10 <= 0.06128799915313721) ? ( 349 ) : ( (scaler_output_7 <= -0.62113918364048) ? ( 351 ) : ( 352 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 354 ) : ( 355 ) ) ) ) ) : ( (scaler_output_4 <= 0.9774768352508545) ? ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_10 <= -0.9227692186832428) ? ( (scaler_output_11 <= -0.21767151355743408) ? ( 360 ) : ( 361 ) ) : ( (scaler_output_7 <= 0.9393642246723175) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_6 <= 0.8633614182472229) ? ( (scaler_output_5 <= 1.1082188487052917) ? ( (scaler_output_4 <= 0.5756158381700516) ? ( 367 ) : ( (scaler_output_5 <= 0.835174560546875) ? ( (scaler_output_4 <= 0.828214168548584) ? ( 370 ) : ( 371 ) ) : ( 372 ) ) ) : ( (scaler_output_7 <= 0.010880988091230392) ? ( (scaler_output_8 <= -0.8637807071208954) ? ( 375 ) : ( 376 ) ) : ( 377 ) ) ) : ( (scaler_output_11 <= -0.8681063801050186) ? ( 379 ) : ( (scaler_output_11 <= -0.26103383116424084) ? ( 381 ) : ( 382 ) ) ) ) : ( (scaler_output_10 <= 1.1318836510181427) ? ( 384 ) : ( 385 ) ) ) : ( (scaler_output_4 <= 0.1852366104722023) ? ( 387 ) : ( (scaler_output_8 <= 0.17212411761283875) ? ( 389 ) : ( 390 ) ) ) ) ) : ( (scaler_output_11 <= 2.167256474494934) ? ( (scaler_output_11 <= 1.2132852673530579) ? ( (scaler_output_6 <= -0.5970440916717052) ? ( 394 ) : ( (scaler_output_7 <= 0.483267217874527) ? ( 396 ) : ( 397 ) ) ) : ( (scaler_output_10 <= 0.7716857194900513) ? ( (scaler_output_10 <= 0.28519469033926725) ? ( 400 ) : ( 401 ) ) : ( 402 ) ) ) : ( 403 ) ) ) : ( (scaler_output_6 <= 0.3765595853328705) ? ( (scaler_output_4 <= 2.1026875376701355) ? ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_2 <= 0.5311646014451981) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 409 ) : ( (scaler_output_11 <= 0.6929373219609261) ? ( (scaler_output_6 <= -0.5397732704877853) ? ( 412 ) : ( 413 ) ) : ( 414 ) ) ) : ( (scaler_output_6 <= -0.11024224758148193) ? ( 416 ) : ( 417 ) ) ) : ( (scaler_output_10 <= 1.1235727965831757) ? ( 419 ) : ( 420 ) ) ) : ( (scaler_output_2 <= 0.569610595703125) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( 423 ) : ( 424 ) ) : ( 425 ) ) ) : ( (scaler_output_5 <= 1.143833339214325) ? ( (scaler_output_7 <= 1.1674127578735352) ? ( (scaler_output_10 <= 0.7305792644619942) ? ( 429 ) : ( (scaler_output_2 <= 0.6080565601587296) ? ( 431 ) : ( 432 ) ) ) : ( 433 ) ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( 435 ) : ( (scaler_output_4 <= 1.4367465376853943) ? ( 437 ) : ( 438 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_8
		
	
		namespace EXT_SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {71. }} ,
					{ 7 ,  {78. }} ,
					{ 9 ,  {104. }} ,
					{ 10 ,  {99. }} ,
					{ 16 ,  {104. }} ,
					{ 17 ,  {101. }} ,
					{ 19 ,  {142. }} ,
					{ 20 ,  {137. }} ,
					{ 22 ,  {55. }} ,
					{ 24 ,  {77. }} ,
					{ 26 ,  {83. }} ,
					{ 28 ,  {88. }} ,
					{ 29 ,  {87. }} ,
					{ 33 ,  {200. }} ,
					{ 36 ,  {150. }} ,
					{ 37 ,  {138. }} ,
					{ 39 ,  {114. }} ,
					{ 41 ,  {129. }} ,
					{ 42 ,  {125. }} ,
					{ 45 ,  {178. }} ,
					{ 46 ,  {168. }} ,
					{ 47 ,  {219. }} ,
					{ 49 ,  {77. }} ,
					{ 50 ,  {61. }} ,
					{ 52 ,  {61. }} ,
					{ 53 ,  {44. }} ,
					{ 60 ,  {48. }} ,
					{ 61 ,  {45. }} ,
					{ 62 ,  {60. }} ,
					{ 65 ,  {98. }} ,
					{ 66 ,  {90. }} ,
					{ 67 ,  {65. }} ,
					{ 69 ,  {39. }} ,
					{ 70 ,  {25. }} ,
					{ 74 ,  {77. }} ,
					{ 75 ,  {103. }} ,
					{ 77 ,  {160. }} ,
					{ 78 ,  {200. }} ,
					{ 82 ,  {75. }} ,
					{ 84 ,  {158. }} ,
					{ 85 ,  {179. }} ,
					{ 88 ,  {96. }} ,
					{ 90 ,  {128. }} ,
					{ 91 ,  {135. }} ,
					{ 94 ,  {51. }} ,
					{ 96 ,  {48. }} ,
					{ 97 ,  {49. }} ,
					{ 101 ,  {79. }} ,
					{ 104 ,  {68. }} ,
					{ 105 ,  {72. }} ,
					{ 106 ,  {64. }} ,
					{ 108 ,  {52. }} ,
					{ 112 ,  {96. }} ,
					{ 113 ,  {97. }} ,
					{ 114 ,  {113. }} ,
					{ 117 ,  {87. }} ,
					{ 118 ,  {90. }} ,
					{ 120 ,  {81. }} ,
					{ 121 ,  {84. }} ,
					{ 123 ,  {49. }} ,
					{ 124 ,  {59. }} ,
					{ 128 ,  {47. }} ,
					{ 131 ,  {54. }} ,
					{ 132 ,  {55. }} ,
					{ 133 ,  {53. }} ,
					{ 134 ,  {71. }} ,
					{ 138 ,  {91. }} ,
					{ 139 ,  {83. }} ,
					{ 141 ,  {97. }} ,
					{ 142 ,  {108. }} ,
					{ 144 ,  {63. }} ,
					{ 145 ,  {71. }} ,
					{ 148 ,  {89. }} ,
					{ 149 ,  {104. }} ,
					{ 152 ,  {177. }} ,
					{ 153 ,  {158. }} ,
					{ 154 ,  {135. }} ,
					{ 161 ,  {190. }} ,
					{ 162 ,  {168. }} ,
					{ 164 ,  {131. }} ,
					{ 166 ,  {109. }} ,
					{ 168 ,  {92. }} ,
					{ 169 ,  {78. }} ,
					{ 171 ,  {156. }} ,
					{ 173 ,  {258. }} ,
					{ 174 ,  {252. }} ,
					{ 177 ,  {162. }} ,
					{ 180 ,  {94. }} ,
					{ 181 ,  {153. }} ,
					{ 185 ,  {94. }} ,
					{ 187 ,  {86. }} ,
					{ 189 ,  {88. }} ,
					{ 190 ,  {90. }} ,
					{ 193 ,  {93. }} ,
					{ 194 ,  {84. }} ,
					{ 197 ,  {74. }} ,
					{ 198 ,  {73. }} ,
					{ 199 ,  {69. }} ,
					{ 200 ,  {58. }} ,
					{ 201 ,  {206. }} ,
					{ 205 ,  {101. }} ,
					{ 206 ,  {91. }} ,
					{ 207 ,  {126. }} ,
					{ 210 ,  {292. }} ,
					{ 213 ,  {214. }} ,
					{ 215 ,  {206. }} ,
					{ 216 ,  {209. }} ,
					{ 217 ,  {245. }} ,
					{ 220 ,  {107. }} ,
					{ 222 ,  {131. }} ,
					{ 223 ,  {123. }} ,
					{ 225 ,  {115. }} ,
					{ 227 ,  {230. }} ,
					{ 228 ,  {229. }} ,
					{ 232 ,  {252. }} ,
					{ 233 ,  {257. }} ,
					{ 234 ,  {283. }} ,
					{ 238 ,  {217. }} ,
					{ 240 ,  {185. }} ,
					{ 242 ,  {191. }} ,
					{ 243 ,  {190. }} ,
					{ 246 ,  {120. }} ,
					{ 247 ,  {129. }} ,
					{ 248 ,  {171. }} ,
					{ 250 ,  {281. }} ,
					{ 251 ,  {241. }} ,
					{ 258 ,  {67. }} ,
					{ 260 ,  {210. }} ,
					{ 261 ,  {187. }} ,
					{ 265 ,  {103. }} ,
					{ 266 ,  {95. }} ,
					{ 267 ,  {137. }} ,
					{ 269 ,  {52. }} ,
					{ 271 ,  {78. }} ,
					{ 272 ,  {68. }} ,
					{ 275 ,  {276. }} ,
					{ 277 ,  {192. }} ,
					{ 278 ,  {180. }} ,
					{ 283 ,  {167. }} ,
					{ 284 ,  {182. }} ,
					{ 286 ,  {151. }} ,
					{ 287 ,  {145. }} ,
					{ 291 ,  {111. }} ,
					{ 292 ,  {110. }} ,
					{ 293 ,  {90. }} ,
					{ 297 ,  {147. }} ,
					{ 299 ,  {144. }} ,
					{ 300 ,  {141. }} ,
					{ 301 ,  {173. }} ,
					{ 304 ,  {121. }} ,
					{ 305 ,  {122. }} ,
					{ 306 ,  {131. }} ,
					{ 308 ,  {220. }} ,
					{ 309 ,  {225. }} ,
					{ 311 ,  {268. }} ,
					{ 312 ,  {317. }} ,
					{ 316 ,  {118. }} ,
					{ 320 ,  {232. }} ,
					{ 321 ,  {202. }} ,
					{ 322 ,  {151. }} ,
					{ 328 ,  {293. }} ,
					{ 329 ,  {288. }} ,
					{ 331 ,  {277. }} ,
					{ 332 ,  {281. }} ,
					{ 337 ,  {281. }} ,
					{ 338 ,  {280. }} ,
					{ 340 ,  {277. }} ,
					{ 341 ,  {273. }} ,
					{ 342 ,  {263. }} ,
					{ 344 ,  {243. }} ,
					{ 345 ,  {246. }} ,
					{ 349 ,  {235. }} ,
					{ 350 ,  {244. }} ,
					{ 352 ,  {311. }} ,
					{ 355 ,  {259. }} ,
					{ 356 ,  {265. }} ,
					{ 357 ,  {275. }} ,
					{ 359 ,  {195. }} ,
					{ 362 ,  {235. }} ,
					{ 364 ,  {232. }} ,
					{ 365 ,  {230. }} ,
					{ 366 ,  {220. }} ,
					{ 367 ,  {131. }} ,
					{ 372 ,  {122. }} ,
					{ 373 ,  {138. }} ,
					{ 374 ,  {67. }} ,
					{ 375 ,  {186. }} ,
					{ 377 ,  {212. }} ,
					{ 380 ,  {248. }} ,
					{ 381 ,  {249. }} ,
					{ 382 ,  {258. }} ,
					{ 386 ,  {191. }} ,
					{ 389 ,  {121. }} ,
					{ 390 ,  {113. }} ,
					{ 391 ,  {143. }} ,
					{ 393 ,  {202. }} ,
					{ 396 ,  {182. }} ,
					{ 397 ,  {175. }} ,
					{ 398 ,  {166. }} ,
					{ 399 ,  {283. }} ,
					{ 401 ,  {346. }} ,
					{ 405 ,  {321. }} ,
					{ 408 ,  {263. }} ,
					{ 411 ,  {275. }} ,
					{ 412 ,  {274. }} ,
					{ 413 ,  {270. }} ,
					{ 414 ,  {257. }} ,
					{ 416 ,  {310. }} ,
					{ 417 ,  {308. }} ,
					{ 419 ,  {128. }} ,
					{ 422 ,  {180. }} ,
					{ 424 ,  {233. }} ,
					{ 425 ,  {242. }} ,
					{ 427 ,  {306. }} ,
					{ 428 ,  {264. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_6 <= -0.8118095695972443) ? ( (scaler_output_10 <= -1.6862652897834778) ? ( (scaler_output_11 <= -1.301729679107666) ? ( (scaler_output_8 <= -0.027088388800621033) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_10 <= -2.424977660179138) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_4 <= -0.1706974022090435) ? ( (scaler_output_4 <= -1.054791510105133) ? ( (scaler_output_4 <= -1.5140612125396729) ? ( (scaler_output_4 <= -1.6862873435020447) ? ( (scaler_output_4 <= -1.8585134744644165) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_5 <= -0.886191725730896) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_4 <= -1.4451707601547241) ? ( 22 ) : ( (scaler_output_4 <= -1.341835081577301) ? ( 24 ) : ( (scaler_output_2 <= -0.42998519726097584) ? ( 26 ) : ( (scaler_output_5 <= -0.4944325052201748) ? ( 28 ) : ( 29 ) ) ) ) ) ) : ( (scaler_output_9 <= -0.2788688689470291) ? ( (scaler_output_5 <= -0.24513117223978043) ? ( (scaler_output_10 <= -1.5203575491905212) ? ( 33 ) : ( (scaler_output_2 <= -0.7759990990161896) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_7 <= -1.6701623797416687) ? ( 39 ) : ( (scaler_output_8 <= 0.012754112482070923) ? ( 41 ) : ( 42 ) ) ) ) ) : ( (scaler_output_8 <= 0.05259660352021456) ? ( (scaler_output_6 <= -1.4990592002868652) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) ) : ( (scaler_output_8 <= -1.4215756058692932) ? ( 49 ) : ( 50 ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 52 ) : ( 53 ) ) ) ) : ( (scaler_output_11 <= 0.8663866519927979) ? ( (scaler_output_7 <= -0.6243970394134521) ? ( (scaler_output_4 <= -0.4003322497010231) ? ( (scaler_output_2 <= -0.6222151666879654) ? ( (scaler_output_10 <= -0.90339694917202) ? ( (scaler_output_11 <= -0.47784546576440334) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) : ( (scaler_output_7 <= -0.7058429419994354) ? ( (scaler_output_7 <= -0.8622190654277802) ? ( 65 ) : ( 66 ) ) : ( 67 ) ) ) : ( (scaler_output_5 <= -0.6012759327422827) ? ( 69 ) : ( 70 ) ) ) : ( (scaler_output_7 <= -0.516888439655304) ? ( (scaler_output_4 <= -0.7792297303676605) ? ( (scaler_output_6 <= 0.09020555019378662) ? ( 74 ) : ( 75 ) ) : ( (scaler_output_4 <= -0.595521867275238) ? ( 77 ) : ( 78 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_6 <= -0.09592453762888908) ? ( (scaler_output_10 <= -1.2829285860061646) ? ( 82 ) : ( (scaler_output_5 <= -0.8149627670645714) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_8 <= 0.2518090605735779) ? ( (scaler_output_5 <= -1.3729228973388672) ? ( 88 ) : ( (scaler_output_8 <= -0.02708837389945984) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_4 <= -1.4910977482795715) ? ( (scaler_output_11 <= -0.9114687144756317) ? ( 94 ) : ( (scaler_output_2 <= -0.007079290226101875) ? ( 96 ) : ( 97 ) ) ) : ( (scaler_output_4 <= -0.009953012224286795) ? ( (scaler_output_8 <= 1.0486589074134827) ? ( (scaler_output_8 <= 0.4111790359020233) ? ( 101 ) : ( (scaler_output_6 <= 0.4481480745598674) ? ( (scaler_output_6 <= -0.0529714347794652) ? ( 104 ) : ( 105 ) ) : ( 106 ) ) ) : ( (scaler_output_10 <= -1.3195552825927734) ? ( 108 ) : ( (scaler_output_8 <= 1.4869263172149658) ? ( (scaler_output_4 <= -0.23958786390721798) ? ( (scaler_output_5 <= -1.6340956687927246) ? ( 112 ) : ( 113 ) ) : ( 114 ) ) : ( (scaler_output_11 <= -0.7380194365978241) ? ( (scaler_output_4 <= -0.5381131619215012) ? ( 117 ) : ( 118 ) ) : ( (scaler_output_7 <= 1.1120295226573944) ? ( 120 ) : ( 121 ) ) ) ) ) ) : ( (scaler_output_8 <= 1.0885013937950134) ? ( 123 ) : ( 124 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.6465025693178177) ? ( (scaler_output_6 <= 0.20474717020988464) ? ( (scaler_output_6 <= -0.6972679495811462) ? ( 128 ) : ( (scaler_output_11 <= -0.2610338255763054) ? ( (scaler_output_4 <= -0.6988575458526611) ? ( 131 ) : ( 132 ) ) : ( 133 ) ) ) : ( 134 ) ) : ( (scaler_output_5 <= 1.226933777332306) ? ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_11 <= -0.6512947510927916) ? ( 138 ) : ( 139 ) ) : ( (scaler_output_5 <= 0.39592936635017395) ? ( 141 ) : ( 142 ) ) ) : ( (scaler_output_11 <= 0.12922710366547108) ? ( 144 ) : ( 145 ) ) ) ) ) ) ) : ( (scaler_output_10 <= -0.7116761207580566) ? ( (scaler_output_8 <= -0.5450407415628433) ? ( 148 ) : ( 149 ) ) : ( (scaler_output_10 <= -0.5220598876476288) ? ( (scaler_output_7 <= 0.7601832747459412) ? ( 152 ) : ( 153 ) ) : ( 154 ) ) ) ) ) : ( (scaler_output_5 <= 0.7876885831356049) ? ( (scaler_output_9 <= 0.632691353559494) ? ( (scaler_output_11 <= -0.9981933832168579) ? ( (scaler_output_9 <= -0.16200218349695206) ? ( (scaler_output_2 <= -0.2762012202292681) ? ( (scaler_output_11 <= -1.5185412764549255) ? ( 161 ) : ( 162 ) ) : ( (scaler_output_5 <= -1.4322803616523743) ? ( 164 ) : ( (scaler_output_11 <= -1.7353529334068298) ? ( 166 ) : ( (scaler_output_2 <= 0.45427259616553783) ? ( 168 ) : ( 169 ) ) ) ) ) : ( (scaler_output_8 <= -1.2223631143569946) ? ( 171 ) : ( (scaler_output_2 <= -0.5837691612541676) ? ( 173 ) : ( 174 ) ) ) ) : ( (scaler_output_11 <= 1.7336331605911255) ? ( (scaler_output_5 <= -1.6340957283973694) ? ( 177 ) : ( (scaler_output_4 <= -1.3418351411819458) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( 180 ) : ( 181 ) ) : ( (scaler_output_9 <= 0.48076464235782623) ? ( (scaler_output_7 <= -0.19762051478028297) ? ( (scaler_output_8 <= -0.30598582327365875) ? ( 185 ) : ( (scaler_output_4 <= -1.1236820220947266) ? ( 187 ) : ( (scaler_output_10 <= 0.992149256169796) ? ( 189 ) : ( 190 ) ) ) ) : ( (scaler_output_5 <= -0.38758906722068787) ? ( (scaler_output_11 <= -0.13094687461853027) ? ( 193 ) : ( 194 ) ) : ( (scaler_output_9 <= -0.2204355224967003) ? ( (scaler_output_7 <= 0.25847652181982994) ? ( 197 ) : ( 198 ) ) : ( 199 ) ) ) ) : ( 200 ) ) ) ) : ( 201 ) ) ) : ( (scaler_output_8 <= -1.2223631143569946) ? ( (scaler_output_4 <= -0.26255133748054504) ? ( (scaler_output_6 <= 0.17611177265644073) ? ( 205 ) : ( 206 ) ) : ( 207 ) ) : ( (scaler_output_11 <= -0.08758453093469143) ? ( (scaler_output_6 <= -0.2677369490265846) ? ( 210 ) : ( (scaler_output_2 <= 0.06981269270181656) ? ( (scaler_output_5 <= -0.814962774515152) ? ( 213 ) : ( (scaler_output_7 <= 0.6103228032588959) ? ( 215 ) : ( 216 ) ) ) : ( 217 ) ) ) : ( (scaler_output_7 <= 0.5386504009366035) ? ( (scaler_output_11 <= 0.259314076974988) ? ( 220 ) : ( (scaler_output_11 <= 1.126560628414154) ? ( 222 ) : ( 223 ) ) ) : ( (scaler_output_5 <= -0.9574206843972206) ? ( 225 ) : ( (scaler_output_4 <= -0.055879979860037565) ? ( 227 ) : ( 228 ) ) ) ) ) ) ) : ( (scaler_output_6 <= -0.5827263593673706) ? ( (scaler_output_2 <= 1.069408506155014) ? ( (scaler_output_5 <= 1.0369898974895477) ? ( 232 ) : ( 233 ) ) : ( 234 ) ) : ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_9 <= 0.6794380247592926) ? ( (scaler_output_11 <= 0.779662013053894) ? ( 238 ) : ( (scaler_output_10 <= 0.41124993562698364) ? ( 240 ) : ( (scaler_output_7 <= 0.1672571301460266) ? ( 242 ) : ( 243 ) ) ) ) : ( (scaler_output_6 <= 1.5076579451560974) ? ( (scaler_output_5 <= 1.1557048857212067) ? ( 246 ) : ( 247 ) ) : ( 248 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 250 ) : ( 251 ) ) ) ) ) ) : ( (scaler_output_4 <= 1.5400822162628174) ? ( (scaler_output_5 <= 0.07539910380728543) ? ( (scaler_output_11 <= 2.4274303913116455) ? ( (scaler_output_2 <= -0.5453231632709503) ? ( (scaler_output_7 <= -0.8622190356254578) ? ( (scaler_output_10 <= -1.0018078684806824) ? ( 258 ) : ( (scaler_output_11 <= -0.5212078019976616) ? ( 260 ) : ( 261 ) ) ) : ( (scaler_output_11 <= -0.781381756067276) ? ( (scaler_output_6 <= 0.5197365880012512) ? ( (scaler_output_2 <= -1.083567053079605) ? ( 265 ) : ( 266 ) ) : ( 267 ) ) : ( (scaler_output_7 <= -0.5950765013694763) ? ( 269 ) : ( (scaler_output_10 <= 0.6231254860758781) ? ( 271 ) : ( 272 ) ) ) ) ) : ( (scaler_output_5 <= -1.194850504398346) ? ( (scaler_output_9 <= -0.06461325287818909) ? ( 275 ) : ( (scaler_output_2 <= 0.9925165325403214) ? ( 277 ) : ( 278 ) ) ) : ( (scaler_output_10 <= 1.365810513496399) ? ( (scaler_output_6 <= -0.5254555642604828) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.6645682603120804) ? ( 283 ) : ( 284 ) ) : ( (scaler_output_4 <= 0.3919079676270485) ? ( 286 ) : ( 287 ) ) ) : ( (scaler_output_6 <= -0.26773694157600403) ? ( (scaler_output_2 <= 1.1463004648685455) ? ( (scaler_output_8 <= -0.7840957343578339) ? ( 291 ) : ( 292 ) ) : ( 293 ) ) : ( (scaler_output_7 <= 1.3856877386569977) ? ( (scaler_output_6 <= 0.5483719855546951) ? ( (scaler_output_2 <= 0.031366705894470215) ? ( 297 ) : ( (scaler_output_10 <= -1.0533716082572937) ? ( 299 ) : ( 300 ) ) ) : ( 301 ) ) : ( (scaler_output_5 <= -0.12641625106334686) ? ( (scaler_output_8 <= -0.4255133122205734) ? ( 304 ) : ( 305 ) ) : ( 306 ) ) ) ) ) : ( (scaler_output_4 <= 0.42635320127010345) ? ( 308 ) : ( 309 ) ) ) ) ) : ( (scaler_output_9 <= 2.486976146697998) ? ( 311 ) : ( 312 ) ) ) : ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_7 <= 0.8970123827457428) ? ( (scaler_output_10 <= -0.6855394244194031) ? ( 316 ) : ( (scaler_output_6 <= -0.7688564658164978) ? ( (scaler_output_4 <= 1.1267394423484802) ? ( (scaler_output_8 <= -0.5848832875490189) ? ( 320 ) : ( 321 ) ) : ( 322 ) ) : ( (scaler_output_4 <= 1.505636990070343) ? ( (scaler_output_7 <= -0.008666028268635273) ? ( (scaler_output_6 <= -0.5397732555866241) ? ( (scaler_output_10 <= -0.21500625181943178) ? ( (scaler_output_2 <= 0.06981270015239716) ? ( 328 ) : ( 329 ) ) : ( (scaler_output_4 <= 0.7133967354893684) ? ( 331 ) : ( 332 ) ) ) : ( (scaler_output_8 <= -0.06693087052553892) ? ( (scaler_output_7 <= -0.1617843136191368) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_10 <= 0.30296437442302704) ? ( 337 ) : ( 338 ) ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( 340 ) : ( 341 ) ) ) : ( 342 ) ) : ( (scaler_output_8 <= 0.09243909735232592) ? ( 344 ) : ( 345 ) ) ) ) : ( (scaler_output_10 <= 0.7564118504524231) ? ( (scaler_output_10 <= 0.2365708202123642) ? ( (scaler_output_11 <= -0.5212078243494034) ? ( 349 ) : ( 350 ) ) : ( (scaler_output_4 <= 0.24264531955122948) ? ( 352 ) : ( (scaler_output_7 <= 0.2877970412373543) ? ( (scaler_output_7 <= 0.12164740823209286) ? ( 355 ) : ( 356 ) ) : ( 357 ) ) ) ) : ( (scaler_output_11 <= -0.21767151169478893) ? ( 359 ) : ( (scaler_output_11 <= 1.7336331605911255) ? ( (scaler_output_11 <= 0.17258943803608418) ? ( 362 ) : ( (scaler_output_11 <= 0.823024332523346) ? ( 364 ) : ( 365 ) ) ) : ( 366 ) ) ) ) ) : ( 367 ) ) ) ) : ( (scaler_output_10 <= 0.912209153175354) ? ( (scaler_output_4 <= 0.8971046507358551) ? ( (scaler_output_6 <= 1.4790225625038147) ? ( (scaler_output_5 <= 0.7164596766233444) ? ( 372 ) : ( 373 ) ) : ( 374 ) ) : ( 375 ) ) : ( (scaler_output_6 <= 0.9492676258087158) ? ( 377 ) : ( (scaler_output_4 <= 0.8741411566734314) ? ( (scaler_output_6 <= 1.3501632809638977) ? ( 380 ) : ( 381 ) ) : ( 382 ) ) ) ) ) : ( (scaler_output_6 <= 2.023095190525055) ? ( (scaler_output_4 <= 0.5067253857851028) ? ( (scaler_output_11 <= -0.7813817262649536) ? ( 386 ) : ( (scaler_output_10 <= 0.07462567090988159) ? ( (scaler_output_6 <= -0.3393254578113556) ? ( 389 ) : ( 390 ) ) : ( 391 ) ) ) : ( (scaler_output_8 <= 0.8892889618873596) ? ( 393 ) : ( (scaler_output_2 <= -0.31464722380042076) ? ( (scaler_output_8 <= 1.3673988580703735) ? ( 396 ) : ( 397 ) ) : ( 398 ) ) ) ) : ( 399 ) ) ) ) : ( (scaler_output_5 <= -0.9336776733398438) ? ( 401 ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_6 <= 0.11884097754955292) ? ( (scaler_output_6 <= -0.7545387744903564) ? ( 405 ) : ( (scaler_output_7 <= 0.12816308811306953) ? ( (scaler_output_7 <= -0.6178813576698303) ? ( 408 ) : ( (scaler_output_4 <= 2.13713276386261) ? ( (scaler_output_8 <= -0.18645834177732468) ? ( 411 ) : ( 412 ) ) : ( 413 ) ) ) : ( 414 ) ) ) : ( (scaler_output_5 <= 1.8917373418807983) ? ( 416 ) : ( 417 ) ) ) : ( (scaler_output_7 <= 0.5386504232883453) ? ( 419 ) : ( (scaler_output_11 <= 1.0398359596729279) ? ( (scaler_output_10 <= 0.6923162043094635) ? ( 422 ) : ( (scaler_output_2 <= -0.5837691500782967) ? ( 424 ) : ( 425 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 427 ) : ( 428 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_9
		
	
		namespace EXT_SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 9 ,  {88. }} ,
					{ 10 ,  {40. }} ,
					{ 13 ,  {137. }} ,
					{ 15 ,  {142. }} ,
					{ 16 ,  {143. }} ,
					{ 17 ,  {178. }} ,
					{ 22 ,  {85. }} ,
					{ 24 ,  {63. }} ,
					{ 25 ,  {65. }} ,
					{ 28 ,  {55. }} ,
					{ 30 ,  {65. }} ,
					{ 31 ,  {60. }} ,
					{ 34 ,  {53. }} ,
					{ 35 ,  {48. }} ,
					{ 36 ,  {42. }} ,
					{ 39 ,  {96. }} ,
					{ 40 ,  {72. }} ,
					{ 41 ,  {158. }} ,
					{ 46 ,  {114. }} ,
					{ 47 ,  {101. }} ,
					{ 50 ,  {78. }} ,
					{ 52 ,  {87. }} ,
					{ 53 ,  {90. }} ,
					{ 54 ,  {68. }} ,
					{ 56 ,  {116. }} ,
					{ 58 ,  {127. }} ,
					{ 59 ,  {135. }} ,
					{ 63 ,  {75. }} ,
					{ 64 ,  {77. }} ,
					{ 68 ,  {51. }} ,
					{ 69 ,  {55. }} ,
					{ 71 ,  {48. }} ,
					{ 72 ,  {47. }} ,
					{ 73 ,  {39. }} ,
					{ 76 ,  {79. }} ,
					{ 78 ,  {72. }} ,
					{ 79 ,  {71. }} ,
					{ 81 ,  {96. }} ,
					{ 82 ,  {102. }} ,
					{ 84 ,  {200. }} ,
					{ 90 ,  {71. }} ,
					{ 92 ,  {61. }} ,
					{ 93 ,  {64. }} ,
					{ 94 ,  {53. }} ,
					{ 96 ,  {77. }} ,
					{ 97 ,  {83. }} ,
					{ 100 ,  {104. }} ,
					{ 102 ,  {97. }} ,
					{ 103 ,  {89. }} ,
					{ 104 ,  {146. }} ,
					{ 107 ,  {219. }} ,
					{ 108 ,  {168. }} ,
					{ 115 ,  {90. }} ,
					{ 118 ,  {125. }} ,
					{ 119 ,  {118. }} ,
					{ 121 ,  {98. }} ,
					{ 122 ,  {104. }} ,
					{ 125 ,  {135. }} ,
					{ 126 ,  {144. }} ,
					{ 127 ,  {118. }} ,
					{ 129 ,  {160. }} ,
					{ 130 ,  {179. }} ,
					{ 133 ,  {94. }} ,
					{ 135 ,  {88. }} ,
					{ 136 ,  {84. }} ,
					{ 137 ,  {25. }} ,
					{ 139 ,  {160. }} ,
					{ 140 ,  {200. }} ,
					{ 142 ,  {108. }} ,
					{ 144 ,  {65. }} ,
					{ 145 ,  {53. }} ,
					{ 149 ,  {68. }} ,
					{ 152 ,  {61. }} ,
					{ 153 ,  {60. }} ,
					{ 154 ,  {59. }} ,
					{ 156 ,  {31. }} ,
					{ 158 ,  {39. }} ,
					{ 159 ,  {44. }} ,
					{ 160 ,  {177. }} ,
					{ 161 ,  {216. }} ,
					{ 162 ,  {253. }} ,
					{ 167 ,  {210. }} ,
					{ 168 ,  {200. }} ,
					{ 171 ,  {170. }} ,
					{ 172 ,  {182. }} ,
					{ 173 ,  {145. }} ,
					{ 175 ,  {288. }} ,
					{ 177 ,  {244. }} ,
					{ 178 ,  {257. }} ,
					{ 183 ,  {184. }} ,
					{ 184 ,  {187. }} ,
					{ 185 ,  {172. }} ,
					{ 189 ,  {90. }} ,
					{ 190 ,  {95. }} ,
					{ 191 ,  {121. }} ,
					{ 193 ,  {175. }} ,
					{ 195 ,  {131. }} ,
					{ 197 ,  {147. }} ,
					{ 198 ,  {141. }} ,
					{ 201 ,  {113. }} ,
					{ 202 ,  {103. }} ,
					{ 204 ,  {60. }} ,
					{ 205 ,  {59. }} ,
					{ 216 ,  {178. }} ,
					{ 218 ,  {167. }} ,
					{ 219 ,  {162. }} ,
					{ 220 ,  {144. }} ,
					{ 222 ,  {192. }} ,
					{ 224 ,  {202. }} ,
					{ 225 ,  {214. }} ,
					{ 228 ,  {52. }} ,
					{ 232 ,  {101. }} ,
					{ 233 ,  {107. }} ,
					{ 234 ,  {93. }} ,
					{ 235 ,  {123. }} ,
					{ 239 ,  {150. }} ,
					{ 240 ,  {161. }} ,
					{ 242 ,  {209. }} ,
					{ 243 ,  {196. }} ,
					{ 245 ,  {111. }} ,
					{ 246 ,  {100. }} ,
					{ 251 ,  {190. }} ,
					{ 252 ,  {185. }} ,
					{ 254 ,  {168. }} ,
					{ 255 ,  {92. }} ,
					{ 256 ,  {99. }} ,
					{ 261 ,  {90. }} ,
					{ 262 ,  {94. }} ,
					{ 264 ,  {86. }} ,
					{ 266 ,  {85. }} ,
					{ 267 ,  {84. }} ,
					{ 268 ,  {74. }} ,
					{ 269 ,  {153. }} ,
					{ 270 ,  {302. }} ,
					{ 276 ,  {131. }} ,
					{ 277 ,  {102. }} ,
					{ 280 ,  {156. }} ,
					{ 281 ,  {154. }} ,
					{ 282 ,  {168. }} ,
					{ 285 ,  {206. }} ,
					{ 286 ,  {214. }} ,
					{ 287 ,  {172. }} ,
					{ 290 ,  {91. }} ,
					{ 291 ,  {90. }} ,
					{ 294 ,  {134. }} ,
					{ 295 ,  {120. }} ,
					{ 296 ,  {170. }} ,
					{ 300 ,  {151. }} ,
					{ 301 ,  {198. }} ,
					{ 307 ,  {242. }} ,
					{ 308 ,  {245. }} ,
					{ 309 ,  {235. }} ,
					{ 310 ,  {259. }} ,
					{ 312 ,  {220. }} ,
					{ 313 ,  {212. }} ,
					{ 316 ,  {265. }} ,
					{ 317 ,  {277. }} ,
					{ 318 ,  {311. }} ,
					{ 322 ,  {232. }} ,
					{ 323 ,  {225. }} ,
					{ 325 ,  {198. }} ,
					{ 326 ,  {202. }} ,
					{ 330 ,  {180. }} ,
					{ 332 ,  {174. }} ,
					{ 333 ,  {173. }} ,
					{ 334 ,  {164. }} ,
					{ 336 ,  {122. }} ,
					{ 337 ,  {150. }} ,
					{ 339 ,  {142. }} ,
					{ 342 ,  {95. }} ,
					{ 345 ,  {84. }} ,
					{ 346 ,  {78. }} ,
					{ 347 ,  {67. }} ,
					{ 348 ,  {131. }} ,
					{ 353 ,  {257. }} ,
					{ 354 ,  {248. }} ,
					{ 358 ,  {124. }} ,
					{ 359 ,  {129. }} ,
					{ 360 ,  {163. }} ,
					{ 364 ,  {202. }} ,
					{ 366 ,  {178. }} ,
					{ 368 ,  {191. }} ,
					{ 369 ,  {185. }} ,
					{ 370 ,  {232. }} ,
					{ 373 ,  {166. }} ,
					{ 375 ,  {155. }} ,
					{ 376 ,  {144. }} ,
					{ 378 ,  {222. }} ,
					{ 380 ,  {171. }} ,
					{ 381 ,  {190. }} ,
					{ 384 ,  {270. }} ,
					{ 385 ,  {280. }} ,
					{ 386 ,  {217. }} ,
					{ 391 ,  {248. }} ,
					{ 392 ,  {236. }} ,
					{ 394 ,  {208. }} ,
					{ 395 ,  {197. }} ,
					{ 397 ,  {273. }} ,
					{ 399 ,  {230. }} ,
					{ 402 ,  {246. }} ,
					{ 403 ,  {248. }} ,
					{ 404 ,  {241. }} ,
					{ 405 ,  {283. }} ,
					{ 408 ,  {151. }} ,
					{ 409 ,  {121. }} ,
					{ 413 ,  {346. }} ,
					{ 415 ,  {321. }} ,
					{ 417 ,  {332. }} ,
					{ 418 ,  {336. }} ,
					{ 421 ,  {275. }} ,
					{ 423 ,  {272. }} ,
					{ 424 ,  {270. }} ,
					{ 425 ,  {303. }} ,
					{ 429 ,  {180. }} ,
					{ 432 ,  {215. }} ,
					{ 433 ,  {220. }} ,
					{ 434 ,  {242. }} ,
					{ 435 ,  {268. }} ,
					{ 438 ,  {308. }} ,
					{ 441 ,  {242. }} ,
					{ 442 ,  {243. }} ,
					{ 444 ,  {277. }} ,
					{ 446 ,  {261. }} ,
					{ 447 ,  {264. }} ,
					{ 448 ,  {310. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= 0.013010472059249878) ? ( (scaler_output_7 <= 2.154537081718445) ? ( (scaler_output_5 <= 2.0341952443122864) ? ( (scaler_output_4 <= -0.22810611873865128) ? ( (scaler_output_4 <= -0.8136749565601349) ? ( (scaler_output_6 <= -1.5849654078483582) ? ( (scaler_output_6 <= -1.9572256207466125) ? ( (scaler_output_8 <= -0.7840957045555115) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_5 <= -0.35197458416223526) ? ( (scaler_output_2 <= -1.9678248763084412) ? ( 13 ) : ( (scaler_output_5 <= -0.886191725730896) ? ( 15 ) : ( 16 ) ) ) : ( 17 ) ) ) : ( (scaler_output_5 <= -1.0286495983600616) ? ( (scaler_output_6 <= -0.4681847542524338) ? ( (scaler_output_10 <= -1.4186306595802307) ? ( (scaler_output_6 <= -1.2699759602546692) ? ( 22 ) : ( (scaler_output_10 <= -1.7433201670646667) ? ( 24 ) : ( 25 ) ) ) : ( (scaler_output_7 <= -1.0348843336105347) ? ( (scaler_output_4 <= -1.4107255339622498) ? ( 28 ) : ( (scaler_output_11 <= -0.7813817784190178) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_11 <= 0.21595174074172974) ? ( (scaler_output_5 <= -1.31356543302536) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) ) ) : ( (scaler_output_5 <= -1.4322803616523743) ? ( (scaler_output_6 <= -0.0529714347794652) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (scaler_output_7 <= -0.5690138339996338) ? ( (scaler_output_7 <= -0.7221320867538452) ? ( (scaler_output_6 <= -1.269976019859314) ? ( (scaler_output_5 <= -0.4232035353779793) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_10 <= -0.3547855466604233) ? ( (scaler_output_6 <= -0.9836219847202301) ? ( 50 ) : ( (scaler_output_7 <= -1.3280895948410034) ? ( 52 ) : ( 53 ) ) ) : ( 54 ) ) ) : ( (scaler_output_7 <= -0.6797802150249481) ? ( 56 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 58 ) : ( 59 ) ) ) ) : ( (scaler_output_7 <= -0.18784700334072113) ? ( (scaler_output_7 <= -0.42892687022686005) ? ( (scaler_output_10 <= -1.2059025466442108) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_7 <= -0.21390969306230545) ? ( (scaler_output_4 <= -1.5599882006645203) ? ( (scaler_output_7 <= -0.38657499849796295) ? ( 68 ) : ( 69 ) ) : ( (scaler_output_4 <= -1.2499811351299286) ? ( 71 ) : ( 72 ) ) ) : ( 73 ) ) ) : ( (scaler_output_8 <= 1.1283438801765442) ? ( (scaler_output_7 <= 0.16399928275495768) ? ( 76 ) : ( (scaler_output_2 <= 0.1851506531238556) ? ( 78 ) : ( 79 ) ) ) : ( (scaler_output_11 <= -0.2610338032245636) ? ( 81 ) : ( 82 ) ) ) ) ) ) ) : ( (scaler_output_5 <= -1.4916378259658813) ? ( 84 ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( (scaler_output_6 <= -0.2534192427992821) ? ( (scaler_output_2 <= 0.6465025693178177) ? ( (scaler_output_2 <= 0.1082586944103241) ? ( (scaler_output_11 <= -1.1716427206993103) ? ( 90 ) : ( (scaler_output_8 <= -0.7840957194566727) ? ( 92 ) : ( 93 ) ) ) : ( 94 ) ) : ( (scaler_output_4 <= -0.3544052690267563) ? ( 96 ) : ( 97 ) ) ) : ( (scaler_output_5 <= -0.19764520414173603) ? ( (scaler_output_2 <= 0.3773806132376194) ? ( 100 ) : ( (scaler_output_9 <= 0.8040958233177662) ? ( 102 ) : ( 103 ) ) ) : ( 104 ) ) ) : ( (scaler_output_6 <= -1.269976019859314) ? ( (scaler_output_4 <= -0.33144179731607437) ? ( 107 ) : ( 108 ) ) : ( (scaler_output_5 <= 0.5383872836828232) ? ( (scaler_output_10 <= -0.39942847192287445) ? ( (scaler_output_10 <= -0.6060459613800049) ? ( (scaler_output_10 <= -0.7113083302974701) ? ( (scaler_output_5 <= -0.20951669663190842) ? ( (scaler_output_2 <= -1.1220130622386932) ? ( 115 ) : ( (scaler_output_11 <= -0.6946571096777916) ? ( (scaler_output_2 <= 0.18515068292617798) ? ( 118 ) : ( 119 ) ) : ( (scaler_output_5 <= -0.6725048720836639) ? ( 121 ) : ( 122 ) ) ) ) : ( (scaler_output_7 <= 0.5060720443725586) ? ( (scaler_output_4 <= -0.6529305577278137) ? ( 125 ) : ( 126 ) ) : ( 127 ) ) ) : ( (scaler_output_8 <= 0.6502339541912079) ? ( 129 ) : ( 130 ) ) ) : ( (scaler_output_5 <= -0.10267326678149402) ? ( (scaler_output_4 <= -0.6758940517902374) ? ( 133 ) : ( (scaler_output_2 <= 0.14670467749238014) ? ( 135 ) : ( 136 ) ) ) : ( 137 ) ) ) : ( (scaler_output_4 <= -0.595521867275238) ? ( 139 ) : ( 140 ) ) ) : ( (scaler_output_7 <= -0.1845891745761037) ? ( 142 ) : ( (scaler_output_2 <= 0.26204265654087067) ? ( 144 ) : ( 145 ) ) ) ) ) ) ) ) : ( (scaler_output_11 <= 0.6929373517632484) ? ( (scaler_output_2 <= -0.5453231949359179) ? ( (scaler_output_10 <= -1.254252016544342) ? ( 149 ) : ( (scaler_output_7 <= 0.20309332013130188) ? ( (scaler_output_6 <= -1.0981635749340057) ? ( 152 ) : ( 153 ) ) : ( 154 ) ) ) : ( (scaler_output_5 <= -1.277950942516327) ? ( 156 ) : ( (scaler_output_11 <= -0.347758486866951) ? ( 158 ) : ( 159 ) ) ) ) : ( 160 ) ) ) : ( 161 ) ) : ( 162 ) ) : ( (scaler_output_8 <= -0.14661585539579391) ? ( (scaler_output_4 <= 0.6100610792636871) ? ( (scaler_output_2 <= -0.7375531494617462) ? ( (scaler_output_11 <= -0.694657102227211) ? ( 167 ) : ( 168 ) ) : ( (scaler_output_2 <= 0.4927186071872711) ? ( (scaler_output_6 <= -2.1290380358695984) ? ( 171 ) : ( 172 ) ) : ( 173 ) ) ) : ( (scaler_output_9 <= -0.021762147545814514) ? ( 175 ) : ( (scaler_output_4 <= 1.1611847281455994) ? ( 177 ) : ( 178 ) ) ) ) : ( (scaler_output_6 <= -0.06728913635015488) ? ( (scaler_output_2 <= -0.8528911173343658) ? ( (scaler_output_7 <= -0.3507387936115265) ? ( (scaler_output_2 <= -1.3142430186271667) ? ( 183 ) : ( 184 ) ) : ( 185 ) ) : ( (scaler_output_6 <= -0.4538670480251312) ? ( (scaler_output_5 <= 0.03978462889790535) ? ( (scaler_output_4 <= 1.0693307518959045) ? ( 189 ) : ( 190 ) ) : ( 191 ) ) : ( (scaler_output_6 <= -0.3106900453567505) ? ( 193 ) : ( (scaler_output_8 <= -0.06693087052553892) ? ( 195 ) : ( (scaler_output_5 <= -0.13828774983994663) ? ( 197 ) : ( 198 ) ) ) ) ) ) : ( (scaler_output_6 <= 0.3049710839986801) ? ( (scaler_output_4 <= 0.6445063054561615) ? ( 201 ) : ( 202 ) ) : ( (scaler_output_10 <= -0.7339947521686554) ? ( 204 ) : ( 205 ) ) ) ) ) ) : ( (scaler_output_4 <= 1.1726664304733276) ? ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_6 <= 1.5219756364822388) ? ( (scaler_output_2 <= 0.14670467749238014) ? ( (scaler_output_8 <= 1.0885014235973358) ? ( (scaler_output_8 <= -0.3458283096551895) ? ( (scaler_output_5 <= -0.7793482840061188) ? ( (scaler_output_7 <= -0.02821304462850094) ? ( (scaler_output_10 <= 0.4829307124018669) ? ( (scaler_output_11 <= -0.17430918663740158) ? ( 216 ) : ( (scaler_output_10 <= -0.07132707454729825) ? ( 218 ) : ( 219 ) ) ) : ( 220 ) ) : ( (scaler_output_5 <= -1.1236215829849243) ? ( 222 ) : ( (scaler_output_11 <= -0.5212077796459198) ? ( 224 ) : ( 225 ) ) ) ) : ( (scaler_output_2 <= -0.2762012258172035) ? ( (scaler_output_6 <= -0.5540909618139267) ? ( 228 ) : ( (scaler_output_6 <= 0.09020556509494781) ? ( (scaler_output_8 <= -0.8239382207393646) ? ( (scaler_output_2 <= -1.1989050507545471) ? ( 232 ) : ( 233 ) ) : ( 234 ) ) : ( 235 ) ) ) : ( (scaler_output_11 <= 0.43276339769363403) ? ( (scaler_output_6 <= 0.018617063760757446) ? ( (scaler_output_10 <= 0.8532008370384574) ? ( 239 ) : ( 240 ) ) : ( (scaler_output_8 <= -0.505198284983635) ? ( 242 ) : ( 243 ) ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( 245 ) : ( 246 ) ) ) ) ) : ( (scaler_output_11 <= -0.13094685040414333) ? ( (scaler_output_4 <= 0.4607984274625778) ? ( (scaler_output_7 <= -0.34422314167022705) ? ( (scaler_output_5 <= -0.5656614452600479) ? ( 251 ) : ( 252 ) ) : ( (scaler_output_10 <= -0.19141935557127) ? ( 254 ) : ( 255 ) ) ) : ( 256 ) ) : ( (scaler_output_2 <= -0.007079290226101875) ? ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_5 <= -1.028649628162384) ? ( (scaler_output_5 <= -1.3847944140434265) ? ( 261 ) : ( 262 ) ) : ( (scaler_output_7 <= -0.68629589676857) ? ( 264 ) : ( (scaler_output_6 <= 0.2477002665400505) ? ( 266 ) : ( 267 ) ) ) ) : ( 268 ) ) : ( 269 ) ) ) ) : ( 270 ) ) : ( (scaler_output_4 <= -0.12477042898535728) ? ( (scaler_output_6 <= 0.662913590669632) ? ( (scaler_output_6 <= 0.16179407387971878) ? ( (scaler_output_10 <= 0.015931359375827014) ? ( (scaler_output_10 <= -0.02190703817177564) ? ( 276 ) : ( 277 ) ) : ( (scaler_output_11 <= 0.5628503635525703) ? ( (scaler_output_10 <= 0.10627887211740017) ? ( 280 ) : ( 281 ) ) : ( 282 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_2 <= 0.8387325406074524) ? ( 285 ) : ( 286 ) ) : ( 287 ) ) ) : ( (scaler_output_4 <= -0.8021932244300842) ? ( (scaler_output_10 <= 1.1213099360466003) ? ( 290 ) : ( 291 ) ) : ( (scaler_output_6 <= 1.3072101473808289) ? ( (scaler_output_5 <= 0.5502587854862213) ? ( 294 ) : ( 295 ) ) : ( 296 ) ) ) ) : ( (scaler_output_4 <= 0.44931668043136597) ? ( (scaler_output_9 <= -0.3295110985636711) ? ( (scaler_output_9 <= -0.7190667390823364) ? ( 300 ) : ( 301 ) ) : ( (scaler_output_5 <= 0.5027728229761124) ? ( (scaler_output_10 <= 1.005488932132721) ? ( (scaler_output_11 <= -0.08758455514907837) ? ( (scaler_output_7 <= 0.7634410858154297) ? ( (scaler_output_11 <= -1.1282804012298584) ? ( 307 ) : ( 308 ) ) : ( 309 ) ) : ( 310 ) ) : ( (scaler_output_2 <= 0.5696105808019638) ? ( 312 ) : ( 313 ) ) ) : ( (scaler_output_7 <= 0.25521867722272873) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 316 ) : ( 317 ) ) : ( 318 ) ) ) ) : ( (scaler_output_7 <= 0.7113157212734222) ? ( (scaler_output_8 <= -0.6645682333037257) ? ( (scaler_output_10 <= 1.2559596598148346) ? ( 322 ) : ( 323 ) ) : ( (scaler_output_4 <= 0.828214168548584) ? ( 325 ) : ( 326 ) ) ) : ( (scaler_output_5 <= 0.004170157015323639) ? ( (scaler_output_7 <= 1.2684056758880615) ? ( (scaler_output_4 <= 0.9085863828659058) ? ( 330 ) : ( (scaler_output_5 <= -0.24513117223978043) ? ( 332 ) : ( 333 ) ) ) : ( 334 ) ) : ( (scaler_output_2 <= 1.146300494670868) ? ( 336 ) : ( 337 ) ) ) ) ) ) ) : ( (scaler_output_2 <= -0.04552527889609337) ? ( 339 ) : ( (scaler_output_2 <= 1.3000844419002533) ? ( (scaler_output_6 <= 1.5935641527175903) ? ( 342 ) : ( (scaler_output_5 <= 0.33657190948724747) ? ( (scaler_output_2 <= 0.4927185885608196) ? ( 345 ) : ( 346 ) ) : ( 347 ) ) ) : ( 348 ) ) ) ) : ( (scaler_output_10 <= 1.1691094636917114) ? ( (scaler_output_5 <= 1.85612291097641) ? ( (scaler_output_8 <= -1.3817330598831177) ? ( (scaler_output_9 <= 2.25324285030365) ? ( 353 ) : ( 354 ) ) : ( (scaler_output_8 <= -0.9833081662654877) ? ( (scaler_output_6 <= -0.052971433848142624) ? ( (scaler_output_10 <= 0.06128799915313721) ? ( 358 ) : ( 359 ) ) : ( 360 ) ) : ( (scaler_output_6 <= 0.333606481552124) ? ( (scaler_output_10 <= 0.7428995668888092) ? ( (scaler_output_10 <= 0.23600436002016068) ? ( 364 ) : ( (scaler_output_8 <= -0.38567081093788147) ? ( 366 ) : ( (scaler_output_6 <= -0.2534192465245724) ? ( 368 ) : ( 369 ) ) ) ) : ( 370 ) ) : ( (scaler_output_7 <= 1.0664198100566864) ? ( (scaler_output_2 <= 0.26204264536499977) ? ( 373 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 375 ) : ( 376 ) ) ) : ( (scaler_output_6 <= 1.0924445986747742) ? ( 378 ) : ( (scaler_output_11 <= 0.25931406021118164) ? ( 380 ) : ( 381 ) ) ) ) ) ) ) : ( (scaler_output_10 <= 0.5685575604438782) ? ( (scaler_output_2 <= 0.031366702169179916) ? ( 384 ) : ( 385 ) ) : ( 386 ) ) ) : ( (scaler_output_8 <= 0.8494464755058289) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= 1.408672034740448) ? ( 391 ) : ( 392 ) ) : ( (scaler_output_8 <= -0.863780677318573) ? ( 394 ) : ( 395 ) ) ) : ( (scaler_output_7 <= -0.8557033836841583) ? ( 397 ) : ( (scaler_output_8 <= -1.3817331194877625) ? ( 399 ) : ( (scaler_output_7 <= 0.25847651809453964) ? ( (scaler_output_2 <= 1.223192423582077) ? ( 402 ) : ( 403 ) ) : ( 404 ) ) ) ) ) : ( 405 ) ) ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_7 <= 0.9556534588336945) ? ( 408 ) : ( 409 ) ) : ( (scaler_output_6 <= 0.11884097452275455) ? ( (scaler_output_10 <= 0.8516778647899628) ? ( (scaler_output_11 <= 0.5194880440831184) ? ( 413 ) : ( (scaler_output_6 <= -0.7259033620357513) ? ( 415 ) : ( (scaler_output_5 <= 1.0369899272918701) ? ( 417 ) : ( 418 ) ) ) ) : ( (scaler_output_2 <= 1.030962496995926) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 421 ) : ( (scaler_output_8 <= -1.3817331194877625) ? ( 423 ) : ( 424 ) ) ) : ( 425 ) ) ) : ( (scaler_output_5 <= 1.143833339214325) ? ( (scaler_output_9 <= 1.871478259563446) ? ( (scaler_output_10 <= 0.6923162043094635) ? ( 429 ) : ( (scaler_output_4 <= 2.5619572401046753) ? ( (scaler_output_4 <= 1.3678560853004456) ? ( 432 ) : ( 433 ) ) : ( 434 ) ) ) : ( 435 ) ) : ( (scaler_output_6 <= 0.605642780661583) ? ( (scaler_output_11 <= 0.7796619776636362) ? ( 438 ) : ( (scaler_output_4 <= 1.3793377876281738) ? ( (scaler_output_7 <= -0.5950765162706375) ? ( 441 ) : ( 442 ) ) : ( (scaler_output_7 <= -0.14223729074001312) ? ( 444 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 446 ) : ( 447 ) ) ) ) ) : ( 448 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_10
		
	
		namespace EXT_SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 10 ,  {137. }} ,
					{ 11 ,  {101. }} ,
					{ 13 ,  {55. }} ,
					{ 14 ,  {71. }} ,
					{ 16 ,  {200. }} ,
					{ 19 ,  {150. }} ,
					{ 20 ,  {158. }} ,
					{ 21 ,  {113. }} ,
					{ 27 ,  {152. }} ,
					{ 28 ,  {143. }} ,
					{ 29 ,  {178. }} ,
					{ 31 ,  {70. }} ,
					{ 33 ,  {83. }} ,
					{ 34 ,  {88. }} ,
					{ 39 ,  {42. }} ,
					{ 41 ,  {51. }} ,
					{ 42 ,  {55. }} ,
					{ 45 ,  {68. }} ,
					{ 47 ,  {96. }} ,
					{ 48 ,  {128. }} ,
					{ 53 ,  {65. }} ,
					{ 55 ,  {65. }} ,
					{ 57 ,  {75. }} ,
					{ 59 ,  {77. }} ,
					{ 60 ,  {78. }} ,
					{ 62 ,  {60. }} ,
					{ 63 ,  {53. }} ,
					{ 66 ,  {79. }} ,
					{ 69 ,  {53. }} ,
					{ 70 ,  {52. }} ,
					{ 72 ,  {55. }} ,
					{ 73 ,  {54. }} ,
					{ 75 ,  {39. }} ,
					{ 77 ,  {49. }} ,
					{ 78 ,  {48. }} ,
					{ 79 ,  {102. }} ,
					{ 84 ,  {72. }} ,
					{ 85 ,  {71. }} ,
					{ 88 ,  {87. }} ,
					{ 89 ,  {91. }} ,
					{ 90 ,  {103. }} ,
					{ 91 ,  {127. }} ,
					{ 92 ,  {66. }} ,
					{ 94 ,  {146. }} ,
					{ 95 ,  {128. }} ,
					{ 100 ,  {200. }} ,
					{ 101 ,  {219. }} ,
					{ 102 ,  {160. }} ,
					{ 103 ,  {88. }} ,
					{ 107 ,  {108. }} ,
					{ 108 ,  {118. }} ,
					{ 109 ,  {179. }} ,
					{ 111 ,  {132. }} ,
					{ 114 ,  {144. }} ,
					{ 115 ,  {90. }} ,
					{ 119 ,  {53. }} ,
					{ 121 ,  {64. }} ,
					{ 122 ,  {65. }} ,
					{ 125 ,  {77. }} ,
					{ 126 ,  {83. }} ,
					{ 127 ,  {97. }} ,
					{ 130 ,  {92. }} ,
					{ 131 ,  {89. }} ,
					{ 132 ,  {104. }} ,
					{ 133 ,  {216. }} ,
					{ 137 ,  {31. }} ,
					{ 138 ,  {25. }} ,
					{ 140 ,  {39. }} ,
					{ 141 ,  {44. }} ,
					{ 146 ,  {60. }} ,
					{ 147 ,  {61. }} ,
					{ 148 ,  {59. }} ,
					{ 150 ,  {68. }} ,
					{ 151 ,  {63. }} ,
					{ 153 ,  {51. }} ,
					{ 154 ,  {49. }} ,
					{ 157 ,  {190. }} ,
					{ 158 ,  {230. }} ,
					{ 162 ,  {162. }} ,
					{ 163 ,  {150. }} ,
					{ 164 ,  {131. }} ,
					{ 167 ,  {153. }} ,
					{ 169 ,  {111. }} ,
					{ 170 ,  {124. }} ,
					{ 173 ,  {93. }} ,
					{ 174 ,  {86. }} ,
					{ 175 ,  {73. }} ,
					{ 176 ,  {253. }} ,
					{ 180 ,  {210. }} ,
					{ 181 ,  {201. }} ,
					{ 186 ,  {145. }} ,
					{ 187 ,  {144. }} ,
					{ 188 ,  {172. }} ,
					{ 190 ,  {110. }} ,
					{ 191 ,  {91. }} ,
					{ 195 ,  {90. }} ,
					{ 196 ,  {96. }} ,
					{ 197 ,  {103. }} ,
					{ 198 ,  {59. }} ,
					{ 203 ,  {121. }} ,
					{ 205 ,  {200. }} ,
					{ 207 ,  {175. }} ,
					{ 208 ,  {170. }} ,
					{ 209 ,  {293. }} ,
					{ 214 ,  {70. }} ,
					{ 215 ,  {60. }} ,
					{ 217 ,  {113. }} ,
					{ 218 ,  {118. }} ,
					{ 221 ,  {147. }} ,
					{ 222 ,  {141. }} ,
					{ 223 ,  {131. }} ,
					{ 224 ,  {182. }} ,
					{ 227 ,  {302. }} ,
					{ 229 ,  {237. }} ,
					{ 230 ,  {244. }} ,
					{ 232 ,  {191. }} ,
					{ 233 ,  {155. }} ,
					{ 238 ,  {78. }} ,
					{ 241 ,  {88. }} ,
					{ 242 ,  {90. }} ,
					{ 245 ,  {94. }} ,
					{ 246 ,  {95. }} ,
					{ 247 ,  {102. }} ,
					{ 250 ,  {180. }} ,
					{ 251 ,  {164. }} ,
					{ 252 ,  {144. }} ,
					{ 258 ,  {252. }} ,
					{ 259 ,  {292. }} ,
					{ 261 ,  {214. }} ,
					{ 263 ,  {200. }} ,
					{ 264 ,  {198. }} ,
					{ 267 ,  {206. }} ,
					{ 268 ,  {219. }} ,
					{ 270 ,  {151. }} ,
					{ 271 ,  {134. }} ,
					{ 275 ,  {168. }} ,
					{ 277 ,  {74. }} ,
					{ 281 ,  {94. }} ,
					{ 282 ,  {91. }} ,
					{ 283 ,  {100. }} ,
					{ 285 ,  {109. }} ,
					{ 286 ,  {107. }} ,
					{ 290 ,  {120. }} ,
					{ 291 ,  {172. }} ,
					{ 292 ,  {69. }} ,
					{ 296 ,  {161. }} ,
					{ 297 ,  {185. }} ,
					{ 299 ,  {101. }} ,
					{ 301 ,  {131. }} ,
					{ 302 ,  {123. }} ,
					{ 305 ,  {202. }} ,
					{ 307 ,  {229. }} ,
					{ 309 ,  {245. }} ,
					{ 310 ,  {259. }} ,
					{ 313 ,  {209. }} ,
					{ 314 ,  {196. }} ,
					{ 317 ,  {170. }} ,
					{ 318 ,  {179. }} ,
					{ 319 ,  {142. }} ,
					{ 320 ,  {262. }} ,
					{ 325 ,  {68. }} ,
					{ 326 ,  {85. }} ,
					{ 328 ,  {52. }} ,
					{ 331 ,  {111. }} ,
					{ 334 ,  {221. }} ,
					{ 336 ,  {259. }} ,
					{ 338 ,  {242. }} ,
					{ 339 ,  {235. }} ,
					{ 342 ,  {178. }} ,
					{ 344 ,  {196. }} ,
					{ 345 ,  {198. }} ,
					{ 346 ,  {212. }} ,
					{ 348 ,  {143. }} ,
					{ 350 ,  {122. }} ,
					{ 351 ,  {121. }} ,
					{ 352 ,  {346. }} ,
					{ 357 ,  {225. }} ,
					{ 358 ,  {220. }} ,
					{ 361 ,  {232. }} ,
					{ 362 ,  {233. }} ,
					{ 363 ,  {242. }} ,
					{ 367 ,  {311. }} ,
					{ 368 ,  {317. }} ,
					{ 370 ,  {268. }} ,
					{ 371 ,  {306. }} ,
					{ 372 ,  {220. }} ,
					{ 373 ,  {84. }} ,
					{ 379 ,  {163. }} ,
					{ 382 ,  {190. }} ,
					{ 383 ,  {185. }} ,
					{ 384 ,  {178. }} ,
					{ 386 ,  {144. }} ,
					{ 387 ,  {129. }} ,
					{ 390 ,  {195. }} ,
					{ 391 ,  {202. }} ,
					{ 393 ,  {232. }} ,
					{ 394 ,  {270. }} ,
					{ 398 ,  {236. }} ,
					{ 400 ,  {208. }} ,
					{ 401 ,  {197. }} ,
					{ 403 ,  {246. }} ,
					{ 404 ,  {248. }} ,
					{ 407 ,  {248. }} ,
					{ 409 ,  {283. }} ,
					{ 410 ,  {281. }} ,
					{ 412 ,  {248. }} ,
					{ 413 ,  {241. }} ,
					{ 416 ,  {303. }} ,
					{ 418 ,  {321. }} ,
					{ 419 ,  {336. }} ,
					{ 422 ,  {308. }} ,
					{ 428 ,  {261. }} ,
					{ 429 ,  {258. }} ,
					{ 430 ,  {270. }} ,
					{ 433 ,  {277. }} ,
					{ 435 ,  {275. }} ,
					{ 436 ,  {274. }} ,
					{ 437 ,  {264. }} ,
					{ 438 ,  {243. }} ,
					{ 439 ,  {310. }} ,
					{ 441 ,  {258. }} ,
					{ 444 ,  {215. }} ,
					{ 445 ,  {217. }} ,
					{ 447 ,  {233. }} ,
					{ 448 ,  {252. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.03458361607044935) ? ( (scaler_output_4 <= 0.0704191830009222) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_10 <= -0.23324186354875565) ? ( (scaler_output_4 <= -0.2740330770611763) ? ( (scaler_output_5 <= 2.4259544610977173) ? ( (scaler_output_2 <= -1.890932857990265) ? ( (scaler_output_6 <= -1.398835301399231) ? ( (scaler_output_6 <= -1.8570017218589783) ? ( (scaler_output_7 <= -1.9796568155288696) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_5 <= -1.3847943842411041) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_5 <= -1.4916378259658813) ? ( 16 ) : ( (scaler_output_5 <= -0.9574206471443176) ? ( (scaler_output_6 <= -0.8261272758245468) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) ) : ( (scaler_output_4 <= -0.6644123196601868) ? ( (scaler_output_6 <= -1.4131529927253723) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_5 <= -0.35197458416223526) ? ( (scaler_output_8 <= 0.8096039891242981) ? ( 27 ) : ( 28 ) ) : ( 29 ) ) : ( (scaler_output_4 <= -1.2729446291923523) ? ( 31 ) : ( (scaler_output_7 <= -1.272706389427185) ? ( 33 ) : ( 34 ) ) ) ) : ( (scaler_output_7 <= 0.5451660752296448) ? ( (scaler_output_2 <= 0.6080565750598907) ? ( (scaler_output_2 <= -1.0835670828819275) ? ( (scaler_output_7 <= -0.6146235167980194) ? ( 39 ) : ( (scaler_output_4 <= -1.6862874031066895) ? ( 41 ) : ( 42 ) ) ) : ( (scaler_output_2 <= -0.8528911173343658) ? ( (scaler_output_6 <= -0.568408653140068) ? ( 45 ) : ( (scaler_output_5 <= -1.4560233056545258) ? ( 47 ) : ( 48 ) ) ) : ( (scaler_output_5 <= 0.9657609760761261) ? ( (scaler_output_7 <= -0.3735436499118805) ? ( (scaler_output_11 <= -0.17430918663740158) ? ( (scaler_output_11 <= -2.342425525188446) ? ( 53 ) : ( (scaler_output_6 <= -1.1411166787147522) ? ( 55 ) : ( (scaler_output_11 <= -1.691990613937378) ? ( 57 ) : ( (scaler_output_7 <= -0.8133515119552612) ? ( 59 ) : ( 60 ) ) ) ) ) : ( (scaler_output_6 <= -0.6972679495811462) ? ( 62 ) : ( 63 ) ) ) : ( (scaler_output_11 <= -0.21767151355743408) ? ( (scaler_output_4 <= -1.3877620697021484) ? ( 66 ) : ( (scaler_output_4 <= -0.7447845041751862) ? ( (scaler_output_6 <= 0.20474718511104584) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_6 <= -0.11024223268032074) ? ( 72 ) : ( 73 ) ) ) ) : ( (scaler_output_2 <= -0.39153920114040375) ? ( 75 ) : ( (scaler_output_5 <= -0.38758908212184906) ? ( 77 ) : ( 78 ) ) ) ) ) : ( 79 ) ) ) ) : ( (scaler_output_2 <= 1.4538683891296387) ? ( (scaler_output_2 <= 1.3000844717025757) ? ( (scaler_output_10 <= -0.7255663871765137) ? ( (scaler_output_4 <= -1.215535968542099) ? ( 84 ) : ( 85 ) ) : ( (scaler_output_8 <= 3.2399959564208984) ? ( (scaler_output_5 <= 0.03978462889790535) ? ( 88 ) : ( 89 ) ) : ( 90 ) ) ) : ( 91 ) ) : ( 92 ) ) ) : ( (scaler_output_8 <= -0.5848832726478577) ? ( 94 ) : ( 95 ) ) ) ) : ( (scaler_output_7 <= -0.516888439655304) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_11 <= -0.434483140707016) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) : ( 103 ) ) : ( (scaler_output_4 <= -0.549594908952713) ? ( (scaler_output_10 <= -0.7113083302974701) ? ( (scaler_output_9 <= -0.9800690412521362) ? ( 107 ) : ( 108 ) ) : ( 109 ) ) : ( (scaler_output_10 <= -1.0023006200790405) ? ( 111 ) : ( (scaler_output_2 <= -1.083567053079605) ? ( (scaler_output_8 <= 0.96897391974926) ? ( 114 ) : ( 115 ) ) : ( (scaler_output_11 <= 0.823024332523346) ? ( (scaler_output_2 <= 0.3773806244134903) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 119 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 121 ) : ( 122 ) ) ) : ( (scaler_output_2 <= 0.83873251080513) ? ( (scaler_output_11 <= -0.17430917732417583) ? ( 125 ) : ( 126 ) ) : ( 127 ) ) ) : ( (scaler_output_10 <= -0.7944855690002441) ? ( (scaler_output_5 <= -1.1948505342006683) ? ( 130 ) : ( 131 ) ) : ( 132 ) ) ) ) ) ) ) ) ) : ( 133 ) ) : ( (scaler_output_7 <= -0.536435455083847) ? ( (scaler_output_11 <= -0.5645701140165329) ? ( (scaler_output_5 <= -0.6725048541557044) ? ( 137 ) : ( 138 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 140 ) : ( 141 ) ) ) : ( (scaler_output_4 <= -0.0214347536675632) ? ( (scaler_output_4 <= -0.15921566262841225) ? ( (scaler_output_6 <= 0.004299372434616089) ? ( (scaler_output_2 <= -1.4295809864997864) ? ( 146 ) : ( 147 ) ) : ( 148 ) ) : ( (scaler_output_4 <= -0.07884346321225166) ? ( 150 ) : ( 151 ) ) ) : ( (scaler_output_5 <= -0.8149627894163132) ? ( 153 ) : ( 154 ) ) ) ) ) : ( (scaler_output_10 <= -0.17072374373674393) ? ( (scaler_output_7 <= 0.538650393486023) ? ( 157 ) : ( 158 ) ) : ( (scaler_output_5 <= -0.6368903815746307) ? ( (scaler_output_8 <= -0.5051982924342155) ? ( (scaler_output_11 <= 0.12922710925340652) ? ( 162 ) : ( 163 ) ) : ( 164 ) ) : ( (scaler_output_10 <= -0.0703623965382576) ? ( (scaler_output_5 <= -0.10267326608300209) ? ( 167 ) : ( (scaler_output_11 <= 0.38940104842185974) ? ( 169 ) : ( 170 ) ) ) : ( (scaler_output_8 <= 0.690076470375061) ? ( (scaler_output_5 <= 0.039784640073776245) ? ( 173 ) : ( 174 ) ) : ( 175 ) ) ) ) ) ) : ( 176 ) ) : ( (scaler_output_5 <= -0.38758908212184906) ? ( (scaler_output_6 <= -1.0122573673725128) ? ( (scaler_output_6 <= -1.1554343700408936) ? ( 180 ) : ( 181 ) ) : ( (scaler_output_8 <= 0.2119665713980794) ? ( (scaler_output_10 <= -0.5257133543491364) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( (scaler_output_6 <= -0.5254555493593216) ? ( 186 ) : ( 187 ) ) : ( 188 ) ) : ( (scaler_output_9 <= 0.48076463490724564) ? ( 190 ) : ( 191 ) ) ) : ( (scaler_output_8 <= 1.447083830833435) ? ( (scaler_output_4 <= 0.839695930480957) ? ( (scaler_output_5 <= -0.7437338083982468) ? ( 195 ) : ( 196 ) ) : ( 197 ) ) : ( 198 ) ) ) ) : ( (scaler_output_7 <= 0.40833696722984314) ? ( (scaler_output_7 <= -0.4028641879558563) ? ( (scaler_output_4 <= 1.0463672876358032) ? ( (scaler_output_5 <= 0.1822425276041031) ? ( 203 ) : ( (scaler_output_11 <= -0.347758486866951) ? ( 205 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 207 ) : ( 208 ) ) ) ) : ( 209 ) ) : ( (scaler_output_7 <= 0.23892950266599655) ? ( (scaler_output_4 <= 0.8052507042884827) ? ( (scaler_output_11 <= -0.17430917918682098) ? ( (scaler_output_7 <= -0.138979472219944) ? ( 214 ) : ( 215 ) ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 217 ) : ( 218 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 1.1726664304733276) ? ( 221 ) : ( 222 ) ) : ( 223 ) ) ) : ( 224 ) ) ) : ( (scaler_output_7 <= 0.7406362295150757) ? ( (scaler_output_2 <= -0.8913370743393898) ? ( 227 ) : ( (scaler_output_11 <= 0.08586477488279343) ? ( 229 ) : ( 230 ) ) ) : ( (scaler_output_10 <= -0.40630144625902176) ? ( 232 ) : ( 233 ) ) ) ) ) ) : ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_5 <= -1.016778141260147) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_11 <= -0.9548310339450836) ? ( 238 ) : ( (scaler_output_10 <= 0.4136218726634979) ? ( (scaler_output_11 <= -0.30439615808427334) ? ( 241 ) : ( 242 ) ) : ( (scaler_output_8 <= 1.8455087542533875) ? ( (scaler_output_7 <= 0.23567163944244385) ? ( 245 ) : ( 246 ) ) : ( 247 ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.30598582327365875) ? ( 250 ) : ( 251 ) ) : ( 252 ) ) ) : ( (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_7 <= 0.28128138184547424) ? ( (scaler_output_8 <= -0.9434657096862793) ? ( (scaler_output_11 <= -0.9548310562968254) ? ( 258 ) : ( 259 ) ) : ( (scaler_output_11 <= 0.08586478233337402) ? ( 261 ) : ( (scaler_output_9 <= -0.7190667390823364) ? ( 263 ) : ( 264 ) ) ) ) : ( (scaler_output_5 <= -0.31636013090610504) ? ( (scaler_output_11 <= -0.17430918663740158) ? ( 267 ) : ( 268 ) ) : ( (scaler_output_2 <= 0.22359666228294373) ? ( 270 ) : ( 271 ) ) ) ) : ( (scaler_output_11 <= 1.9938071370124817) ? ( (scaler_output_10 <= 0.359082967042923) ? ( (scaler_output_5 <= -0.435075044631958) ? ( 275 ) : ( (scaler_output_5 <= -0.328231617808342) ? ( 277 ) : ( (scaler_output_4 <= -0.12477043271064758) ? ( (scaler_output_4 <= -0.22810611128807068) ? ( (scaler_output_5 <= 0.39592939615249634) ? ( 281 ) : ( 282 ) ) : ( 283 ) ) : ( (scaler_output_11 <= -1.0415556859225035) ? ( 285 ) : ( 286 ) ) ) ) ) : ( (scaler_output_4 <= -0.6299670934677124) ? ( (scaler_output_8 <= 0.09243908524513245) ? ( (scaler_output_4 <= -0.7103393077850342) ? ( 290 ) : ( 291 ) ) : ( 292 ) ) : ( (scaler_output_7 <= 0.023912331089377403) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_8 <= -0.385670798830688) ? ( 296 ) : ( 297 ) ) : ( (scaler_output_8 <= -1.10283562541008) ? ( 299 ) : ( (scaler_output_4 <= -0.07884346321225166) ? ( 301 ) : ( 302 ) ) ) ) : ( (scaler_output_5 <= -0.10267326608300209) ? ( (scaler_output_5 <= -0.2688741534948349) ? ( 305 ) : ( (scaler_output_2 <= -0.19930925965309143) ? ( 307 ) : ( (scaler_output_9 <= 0.9248580634593964) ? ( 309 ) : ( 310 ) ) ) ) : ( (scaler_output_11 <= -0.13094684481620789) ? ( (scaler_output_4 <= -0.2969965781085193) ? ( 313 ) : ( 314 ) ) : ( (scaler_output_7 <= 1.1967332661151886) ? ( (scaler_output_11 <= 0.779662013053894) ? ( 317 ) : ( 318 ) ) : ( 319 ) ) ) ) ) ) ) : ( 320 ) ) ) : ( (scaler_output_11 <= 0.6062126755714417) ? ( (scaler_output_4 <= 2.424176275730133) ? ( (scaler_output_5 <= -0.7793482840061188) ? ( (scaler_output_11 <= -0.34775847755372524) ? ( 325 ) : ( 326 ) ) : ( (scaler_output_7 <= -0.6667489111423492) ? ( 328 ) : ( (scaler_output_7 <= 0.936106413602829) ? ( (scaler_output_4 <= 0.23116357624530792) ? ( 331 ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_7 <= -0.3018712718039751) ? ( 334 ) : ( (scaler_output_7 <= 0.3464380782097578) ? ( 336 ) : ( (scaler_output_7 <= 0.7601832449436188) ? ( 338 ) : ( 339 ) ) ) ) : ( (scaler_output_6 <= 0.7058666944503784) ? ( (scaler_output_6 <= 0.36224187910556793) ? ( 342 ) : ( (scaler_output_4 <= 0.6215428113937378) ? ( 344 ) : ( 345 ) ) ) : ( 346 ) ) ) ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( 348 ) : ( (scaler_output_8 <= -0.6645682454109192) ? ( 350 ) : ( 351 ) ) ) ) ) ) : ( 352 ) ) : ( (scaler_output_9 <= 3.456969738006592) ? ( (scaler_output_11 <= 1.0398359596729279) ? ( (scaler_output_4 <= 0.7593237161636353) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 357 ) : ( 358 ) ) : ( (scaler_output_4 <= 3.2623435258865356) ? ( (scaler_output_11 <= 0.9097489714622498) ? ( 361 ) : ( 362 ) ) : ( 363 ) ) ) : ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_6 <= 0.9779030382633209) ? ( (scaler_output_7 <= 0.7406362295150757) ? ( 367 ) : ( 368 ) ) : ( (scaler_output_6 <= 1.579246461391449) ? ( 370 ) : ( 371 ) ) ) : ( 372 ) ) ) : ( 373 ) ) ) ) ) : ( (scaler_output_4 <= 0.9545133709907532) ? ( (scaler_output_10 <= 0.9304323792457581) ? ( (scaler_output_4 <= 0.4378349483013153) ? ( (scaler_output_2 <= 0.9925164878368378) ? ( (scaler_output_2 <= -0.2762012183666229) ? ( 379 ) : ( (scaler_output_4 <= -0.1706974059343338) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 382 ) : ( 383 ) ) : ( 384 ) ) ) : ( (scaler_output_5 <= 1.2862913012504578) ? ( 386 ) : ( 387 ) ) ) : ( (scaler_output_7 <= 0.1607414446771145) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 390 ) : ( 391 ) ) : ( (scaler_output_5 <= 1.7848938703536987) ? ( 393 ) : ( 394 ) ) ) ) : ( (scaler_output_7 <= 0.5028142184019089) ? ( (scaler_output_11 <= 0.6062126997858286) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 398 ) : ( (scaler_output_8 <= -0.863780677318573) ? ( 400 ) : ( 401 ) ) ) : ( (scaler_output_9 <= 0.9793958216905594) ? ( 403 ) : ( 404 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.8681063801050186) ? ( 407 ) : ( (scaler_output_5 <= 1.5355925559997559) ? ( 409 ) : ( 410 ) ) ) : ( (scaler_output_8 <= -1.10283562541008) ? ( 412 ) : ( 413 ) ) ) ) ) : ( (scaler_output_6 <= -0.2820546478033066) ? ( (scaler_output_11 <= 0.779662013053894) ? ( 416 ) : ( (scaler_output_10 <= 0.31794648617506027) ? ( 418 ) : ( 419 ) ) ) : ( (scaler_output_6 <= 0.8490436971187592) ? ( (scaler_output_11 <= 0.21595176495611668) ? ( 422 ) : ( (scaler_output_6 <= 0.5626896917819977) ? ( (scaler_output_5 <= 2.1766531467437744) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_5 <= 1.428749144077301) ? ( (scaler_output_4 <= 2.068242311477661) ? ( 428 ) : ( 429 ) ) : ( 430 ) ) : ( (scaler_output_7 <= 0.56797094643116) ? ( (scaler_output_5 <= 1.286291241645813) ? ( 433 ) : ( (scaler_output_5 <= 1.7848939299583435) ? ( 435 ) : ( 436 ) ) ) : ( 437 ) ) ) : ( 438 ) ) : ( 439 ) ) ) : ( (scaler_output_4 <= 1.138221263885498) ? ( 441 ) : ( (scaler_output_4 <= 1.4252647757530212) ? ( (scaler_output_6 <= 1.8656004071235657) ? ( 444 ) : ( 445 ) ) : ( (scaler_output_9 <= 0.6950202658772469) ? ( 447 ) : ( 448 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_11
		
	
		namespace EXT_SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {140. }} ,
					{ 9 ,  {152. }} ,
					{ 10 ,  {150. }} ,
					{ 12 ,  {162. }} ,
					{ 13 ,  {158. }} ,
					{ 14 ,  {200. }} ,
					{ 21 ,  {101. }} ,
					{ 22 ,  {99. }} ,
					{ 23 ,  {113. }} ,
					{ 25 ,  {85. }} ,
					{ 26 ,  {90. }} ,
					{ 28 ,  {71. }} ,
					{ 29 ,  {77. }} ,
					{ 33 ,  {144. }} ,
					{ 34 ,  {168. }} ,
					{ 35 ,  {116. }} ,
					{ 36 ,  {60. }} ,
					{ 37 ,  {185. }} ,
					{ 42 ,  {70. }} ,
					{ 45 ,  {39. }} ,
					{ 46 ,  {37. }} ,
					{ 47 ,  {45. }} ,
					{ 49 ,  {88. }} ,
					{ 51 ,  {72. }} ,
					{ 52 ,  {65. }} ,
					{ 58 ,  {78. }} ,
					{ 60 ,  {65. }} ,
					{ 61 ,  {55. }} ,
					{ 63 ,  {83. }} ,
					{ 64 ,  {80. }} ,
					{ 66 ,  {98. }} ,
					{ 67 ,  {104. }} ,
					{ 69 ,  {40. }} ,
					{ 73 ,  {125. }} ,
					{ 74 ,  {128. }} ,
					{ 76 ,  {132. }} ,
					{ 77 ,  {138. }} ,
					{ 78 ,  {96. }} ,
					{ 81 ,  {31. }} ,
					{ 84 ,  {67. }} ,
					{ 85 ,  {60. }} ,
					{ 87 ,  {52. }} ,
					{ 88 ,  {51. }} ,
					{ 90 ,  {113. }} ,
					{ 91 ,  {81. }} ,
					{ 94 ,  {219. }} ,
					{ 102 ,  {86. }} ,
					{ 103 ,  {87. }} ,
					{ 105 ,  {77. }} ,
					{ 106 ,  {68. }} ,
					{ 108 ,  {60. }} ,
					{ 109 ,  {66. }} ,
					{ 110 ,  {25. }} ,
					{ 114 ,  {44. }} ,
					{ 117 ,  {64. }} ,
					{ 118 ,  {63. }} ,
					{ 119 ,  {72. }} ,
					{ 120 ,  {108. }} ,
					{ 125 ,  {96. }} ,
					{ 127 ,  {128. }} ,
					{ 128 ,  {127. }} ,
					{ 130 ,  {93. }} ,
					{ 131 ,  {64. }} ,
					{ 133 ,  {160. }} ,
					{ 134 ,  {168. }} ,
					{ 139 ,  {94. }} ,
					{ 140 ,  {97. }} ,
					{ 143 ,  {61. }} ,
					{ 145 ,  {71. }} ,
					{ 146 ,  {72. }} ,
					{ 147 ,  {83. }} ,
					{ 148 ,  {49. }} ,
					{ 153 ,  {179. }} ,
					{ 155 ,  {153. }} ,
					{ 156 ,  {158. }} ,
					{ 157 ,  {118. }} ,
					{ 160 ,  {135. }} ,
					{ 162 ,  {103. }} ,
					{ 164 ,  {73. }} ,
					{ 165 ,  {79. }} ,
					{ 166 ,  {141. }} ,
					{ 170 ,  {102. }} ,
					{ 172 ,  {88. }} ,
					{ 173 ,  {91. }} ,
					{ 174 ,  {53. }} ,
					{ 176 ,  {92. }} ,
					{ 179 ,  {109. }} ,
					{ 180 ,  {107. }} ,
					{ 181 ,  {124. }} ,
					{ 182 ,  {216. }} ,
					{ 185 ,  {102. }} ,
					{ 187 ,  {146. }} ,
					{ 188 ,  {150. }} ,
					{ 189 ,  {230. }} ,
					{ 192 ,  {210. }} ,
					{ 194 ,  {200. }} ,
					{ 195 ,  {191. }} ,
					{ 196 ,  {118. }} ,
					{ 201 ,  {94. }} ,
					{ 203 ,  {214. }} ,
					{ 206 ,  {178. }} ,
					{ 207 ,  {185. }} ,
					{ 209 ,  {168. }} ,
					{ 210 ,  {172. }} ,
					{ 214 ,  {102. }} ,
					{ 216 ,  {84. }} ,
					{ 218 ,  {91. }} ,
					{ 219 ,  {90. }} ,
					{ 220 ,  {120. }} ,
					{ 221 ,  {190. }} ,
					{ 223 ,  {58. }} ,
					{ 225 ,  {69. }} ,
					{ 226 ,  {74. }} ,
					{ 229 ,  {126. }} ,
					{ 233 ,  {258. }} ,
					{ 236 ,  {245. }} ,
					{ 237 ,  {242. }} ,
					{ 238 ,  {235. }} ,
					{ 241 ,  {200. }} ,
					{ 242 ,  {202. }} ,
					{ 243 ,  {196. }} ,
					{ 246 ,  {265. }} ,
					{ 247 ,  {257. }} ,
					{ 248 ,  {283. }} ,
					{ 251 ,  {196. }} ,
					{ 253 ,  {48. }} ,
					{ 255 ,  {122. }} ,
					{ 256 ,  {100. }} ,
					{ 261 ,  {179. }} ,
					{ 262 ,  {206. }} ,
					{ 265 ,  {161. }} ,
					{ 267 ,  {144. }} ,
					{ 268 ,  {150. }} ,
					{ 271 ,  {107. }} ,
					{ 272 ,  {111. }} ,
					{ 276 ,  {138. }} ,
					{ 277 ,  {144. }} ,
					{ 279 ,  {129. }} ,
					{ 280 ,  {131. }} ,
					{ 281 ,  {173. }} ,
					{ 283 ,  {229. }} ,
					{ 284 ,  {241. }} ,
					{ 288 ,  {281. }} ,
					{ 289 ,  {276. }} ,
					{ 290 ,  {311. }} ,
					{ 293 ,  {142. }} ,
					{ 294 ,  {123. }} ,
					{ 298 ,  {198. }} ,
					{ 299 ,  {191. }} ,
					{ 300 ,  {217. }} ,
					{ 302 ,  {143. }} ,
					{ 303 ,  {178. }} ,
					{ 306 ,  {95. }} ,
					{ 310 ,  {170. }} ,
					{ 311 ,  {172. }} ,
					{ 312 ,  {175. }} ,
					{ 315 ,  {140. }} ,
					{ 316 ,  {141. }} ,
					{ 317 ,  {144. }} ,
					{ 320 ,  {302. }} ,
					{ 324 ,  {52. }} ,
					{ 325 ,  {85. }} ,
					{ 327 ,  {103. }} ,
					{ 329 ,  {137. }} ,
					{ 330 ,  {122. }} ,
					{ 337 ,  {167. }} ,
					{ 338 ,  {180. }} ,
					{ 342 ,  {202. }} ,
					{ 343 ,  {208. }} ,
					{ 345 ,  {198. }} ,
					{ 346 ,  {195. }} ,
					{ 347 ,  {166. }} ,
					{ 348 ,  {236. }} ,
					{ 350 ,  {244. }} ,
					{ 351 ,  {225. }} ,
					{ 353 ,  {232. }} ,
					{ 354 ,  {270. }} ,
					{ 357 ,  {155. }} ,
					{ 358 ,  {150. }} ,
					{ 359 ,  {84. }} ,
					{ 363 ,  {178. }} ,
					{ 364 ,  {221. }} ,
					{ 372 ,  {293. }} ,
					{ 373 ,  {281. }} ,
					{ 375 ,  {303. }} ,
					{ 376 ,  {321. }} ,
					{ 378 ,  {288. }} ,
					{ 381 ,  {275. }} ,
					{ 382 ,  {280. }} ,
					{ 383 ,  {263. }} ,
					{ 386 ,  {259. }} ,
					{ 387 ,  {258. }} ,
					{ 390 ,  {272. }} ,
					{ 391 ,  {270. }} ,
					{ 393 ,  {277. }} ,
					{ 394 ,  {275. }} ,
					{ 396 ,  {308. }} ,
					{ 397 ,  {336. }} ,
					{ 401 ,  {237. }} ,
					{ 402 ,  {242. }} ,
					{ 403 ,  {220. }} ,
					{ 405 ,  {279. }} ,
					{ 406 ,  {264. }} ,
					{ 408 ,  {317. }} ,
					{ 409 ,  {310. }} ,
					{ 413 ,  {173. }} ,
					{ 415 ,  {180. }} ,
					{ 416 ,  {186. }} ,
					{ 418 ,  {220. }} ,
					{ 419 ,  {233. }} ,
					{ 422 ,  {233. }} ,
					{ 424 ,  {268. }} ,
					{ 426 ,  {252. }} ,
					{ 427 ,  {258. }} ,
					{ 429 ,  {192. }} ,
					{ 431 ,  {230. }} ,
					{ 432 ,  {217. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.5526523590087891) ? ( (scaler_output_10 <= 0.09841897338628769) ? ( (scaler_output_2 <= -1.4680269360542297) ? ( (scaler_output_5 <= -1.277950942516327) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( (scaler_output_2 <= -2.1985007524490356) ? ( 6 ) : ( (scaler_output_7 <= -0.9632119238376617) ? ( (scaler_output_7 <= -1.836311936378479) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_6 <= -0.6972679644823074) ? ( 12 ) : ( 13 ) ) ) ) : ( 14 ) ) : ( (scaler_output_10 <= -0.37751282670069486) ? ( (scaler_output_2 <= -1.6218109726905823) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= 1.0088164508342743) ? ( (scaler_output_4 <= -1.0662733018398285) ? ( (scaler_output_8 <= 0.3314940631389618) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (scaler_output_5 <= -0.7437338382005692) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_6 <= -1.1840697824954987) ? ( 28 ) : ( 29 ) ) ) : ( (scaler_output_4 <= -0.22810611873865128) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.34775848500430584) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( 36 ) ) ) : ( 37 ) ) ) : ( (scaler_output_10 <= -0.9101118743419647) ? ( (scaler_output_4 <= -1.1810907125473022) ? ( (scaler_output_2 <= -0.2762012202292681) ? ( (scaler_output_2 <= -1.160459041595459) ? ( 42 ) : ( (scaler_output_5 <= -0.06705880165100098) ? ( (scaler_output_2 <= -0.66066113114357) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) ) : ( (scaler_output_11 <= -1.4751790165901184) ? ( 49 ) : ( (scaler_output_5 <= -1.3254369497299194) ? ( 51 ) : ( 52 ) ) ) ) : ( (scaler_output_4 <= -0.2740330845117569) ? ( (scaler_output_10 <= -1.4965637922286987) ? ( (scaler_output_11 <= -0.08758453279733658) ? ( (scaler_output_11 <= -0.6946570873260498) ? ( (scaler_output_7 <= -0.6960694193840027) ? ( 58 ) : ( (scaler_output_9 <= -0.5866178199648857) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_7 <= -0.19762051105499268) ? ( 63 ) : ( 64 ) ) ) : ( (scaler_output_2 <= 0.5696105659008026) ? ( 66 ) : ( 67 ) ) ) : ( (scaler_output_9 <= -1.252757966518402) ? ( 69 ) : ( (scaler_output_7 <= -0.24974589049816132) ? ( (scaler_output_5 <= -0.4944325089454651) ? ( (scaler_output_8 <= 1.2877138257026672) ? ( 73 ) : ( 74 ) ) : ( (scaler_output_8 <= -0.22630084864795208) ? ( 76 ) : ( 77 ) ) ) : ( 78 ) ) ) ) : ( (scaler_output_7 <= 0.12490524351596832) ? ( (scaler_output_10 <= -1.2924543023109436) ? ( 81 ) : ( (scaler_output_2 <= -0.39153921231627464) ? ( (scaler_output_8 <= 0.7697614505887032) ? ( 84 ) : ( 85 ) ) : ( (scaler_output_8 <= 0.4111790657043457) ? ( 87 ) : ( 88 ) ) ) ) : ( (scaler_output_8 <= 1.2080288529396057) ? ( 90 ) : ( 91 ) ) ) ) ) : ( (scaler_output_4 <= 0.0704191830009222) ? ( (scaler_output_6 <= -1.2986114025115967) ? ( 94 ) : ( (scaler_output_9 <= 0.5197202116250992) ? ( (scaler_output_5 <= 2.4259544610977173) ? ( (scaler_output_7 <= -0.7677417993545532) ? ( (scaler_output_7 <= -0.8394142091274261) ? ( (scaler_output_6 <= -0.8690803647041321) ? ( (scaler_output_7 <= -1.0023059844970703) ? ( (scaler_output_4 <= -1.1810907125473022) ? ( 102 ) : ( 103 ) ) : ( (scaler_output_5 <= -1.6340957283973694) ? ( 105 ) : ( 106 ) ) ) : ( (scaler_output_2 <= 0.33893460035324097) ? ( 108 ) : ( 109 ) ) ) : ( 110 ) ) : ( (scaler_output_10 <= -0.7385193109512329) ? ( (scaler_output_2 <= 1.3769764304161072) ? ( (scaler_output_7 <= -0.24648806639015675) ? ( 114 ) : ( (scaler_output_10 <= -0.780195564031601) ? ( (scaler_output_9 <= 0.13016455620527267) ? ( 117 ) : ( 118 ) ) : ( 119 ) ) ) : ( 120 ) ) : ( (scaler_output_5 <= -0.5300469696521759) ? ( (scaler_output_4 <= -0.7333027720451355) ? ( (scaler_output_10 <= -0.6060459613800049) ? ( (scaler_output_4 <= -1.1236820220947266) ? ( 125 ) : ( (scaler_output_11 <= -0.7380194421857595) ? ( 127 ) : ( 128 ) ) ) : ( (scaler_output_8 <= 0.052596598863601685) ? ( 130 ) : ( 131 ) ) ) : ( (scaler_output_6 <= -0.3965962380170822) ? ( 133 ) : ( 134 ) ) ) : ( (scaler_output_5 <= -0.3044886291027069) ? ( (scaler_output_11 <= 0.08586477674543858) ? ( (scaler_output_5 <= -0.363846093416214) ? ( (scaler_output_5 <= -0.435075044631958) ? ( 139 ) : ( 140 ) ) : ( (scaler_output_2 <= 0.6080565750598907) ? ( (scaler_output_2 <= -0.9297830760478973) ? ( 143 ) : ( (scaler_output_2 <= -0.08397126197814941) ? ( 145 ) : ( 146 ) ) ) : ( 147 ) ) ) : ( 148 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_5 <= -0.06705879117362201) ? ( (scaler_output_4 <= -0.595521867275238) ? ( (scaler_output_5 <= -0.19764520227909088) ? ( 153 ) : ( (scaler_output_7 <= 0.2715078741312027) ? ( 155 ) : ( 156 ) ) ) : ( 157 ) ) : ( (scaler_output_6 <= 1.26425701379776) ? ( (scaler_output_8 <= 0.2518090605735779) ? ( 160 ) : ( (scaler_output_7 <= -0.27255073841661215) ? ( 162 ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 164 ) : ( 165 ) ) ) ) : ( 166 ) ) ) : ( (scaler_output_4 <= -0.5495948940515518) ? ( (scaler_output_10 <= -0.3880781978368759) ? ( (scaler_output_10 <= -0.6844651401042938) ? ( 170 ) : ( (scaler_output_8 <= 0.49086400866508484) ? ( 172 ) : ( 173 ) ) ) : ( 174 ) ) : ( (scaler_output_2 <= 0.18515066616237164) ? ( 176 ) : ( (scaler_output_11 <= 0.7362996637821198) ? ( (scaler_output_11 <= -0.7813817262649536) ? ( 179 ) : ( 180 ) ) : ( 181 ) ) ) ) ) ) ) ) ) : ( 182 ) ) : ( (scaler_output_4 <= -0.26255133748054504) ? ( (scaler_output_5 <= -1.242336481809616) ? ( 185 ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( 187 ) : ( 188 ) ) ) : ( 189 ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_6 <= -1.0265750586986542) ? ( 192 ) : ( (scaler_output_5 <= 0.2534714788198471) ? ( 194 ) : ( 195 ) ) ) : ( 196 ) ) ) ) ) : ( (scaler_output_4 <= -0.49218620359897614) ? ( (scaler_output_4 <= -0.6644123196601868) ? ( (scaler_output_6 <= 0.5626896768808365) ? ( (scaler_output_2 <= -1.429580956697464) ? ( 201 ) : ( (scaler_output_2 <= -0.5068771801888943) ? ( 203 ) : ( (scaler_output_4 <= -0.7447845041751862) ? ( (scaler_output_11 <= 0.47612571716308594) ? ( 206 ) : ( 207 ) ) : ( (scaler_output_6 <= 0.1904294677078724) ? ( 209 ) : ( 210 ) ) ) ) ) : ( (scaler_output_7 <= 1.49971204996109) ? ( (scaler_output_11 <= 1.169922947883606) ? ( (scaler_output_9 <= -0.7463356703519821) ? ( 214 ) : ( (scaler_output_6 <= 0.7058666944503784) ? ( 216 ) : ( (scaler_output_8 <= -0.3458283543586731) ? ( 218 ) : ( 219 ) ) ) ) : ( 220 ) ) : ( 221 ) ) ) : ( (scaler_output_2 <= -0.8913370966911316) ? ( 223 ) : ( (scaler_output_4 <= -0.6070035994052887) ? ( 225 ) : ( 226 ) ) ) ) : ( (scaler_output_11 <= -0.3043961673974991) ? ( (scaler_output_5 <= -0.9218061864376068) ? ( 229 ) : ( (scaler_output_5 <= 0.752074122428894) ? ( (scaler_output_11 <= -0.781381756067276) ? ( (scaler_output_7 <= -0.14875296503305435) ? ( 233 ) : ( (scaler_output_5 <= 0.11101358383893967) ? ( (scaler_output_6 <= 0.34792419523000717) ? ( 236 ) : ( 237 ) ) : ( 238 ) ) ) : ( (scaler_output_6 <= 2.3667200803756714) ? ( (scaler_output_10 <= 0.2579987198114395) ? ( 241 ) : ( 242 ) ) : ( 243 ) ) ) : ( (scaler_output_4 <= 0.4607984125614166) ? ( (scaler_output_5 <= 1.001375436782837) ? ( 246 ) : ( 247 ) ) : ( 248 ) ) ) ) : ( (scaler_output_10 <= 0.2541116774082184) ? ( (scaler_output_11 <= 0.12922710366547108) ? ( 251 ) : ( (scaler_output_6 <= 0.3049710802733898) ? ( 253 ) : ( (scaler_output_6 <= 0.8204083144664764) ? ( 255 ) : ( 256 ) ) ) ) : ( (scaler_output_8 <= -0.6247257590293884) ? ( (scaler_output_10 <= 1.7632037997245789) ? ( (scaler_output_2 <= -1.045121043920517) ? ( (scaler_output_10 <= 0.44406750798225403) ? ( 261 ) : ( 262 ) ) : ( (scaler_output_7 <= -0.2041361816227436) ? ( (scaler_output_7 <= -0.9827589690685272) ? ( 265 ) : ( (scaler_output_5 <= -0.06705880165100098) ? ( 267 ) : ( 268 ) ) ) : ( (scaler_output_2 <= 0.49271860532462597) ? ( (scaler_output_4 <= 0.15079137682914734) ? ( 271 ) : ( 272 ) ) : ( (scaler_output_4 <= 0.30005402863025665) ? ( (scaler_output_11 <= 0.042502449825406075) ? ( (scaler_output_11 <= -0.13094685785472393) ? ( 276 ) : ( 277 ) ) : ( (scaler_output_8 <= -0.9833081662654877) ? ( 279 ) : ( 280 ) ) ) : ( 281 ) ) ) ) ) : ( (scaler_output_10 <= 2.0439534783363342) ? ( 283 ) : ( 284 ) ) ) : ( (scaler_output_10 <= 0.4345443993806839) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= 0.30296437442302704) ? ( 288 ) : ( 289 ) ) : ( 290 ) ) : ( (scaler_output_2 <= 0.1082586869597435) ? ( (scaler_output_4 <= 0.02449221583083272) ? ( 293 ) : ( 294 ) ) : ( (scaler_output_4 <= 0.1622731238603592) ? ( (scaler_output_9 <= -0.3295110985636711) ? ( (scaler_output_6 <= -0.6972679793834686) ? ( 298 ) : ( 299 ) ) : ( 300 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 302 ) : ( 303 ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_10 <= -0.6583284437656403) ? ( (scaler_output_10 <= -1.2712291479110718) ? ( 306 ) : ( (scaler_output_2 <= 0.031366705894470215) ? ( (scaler_output_4 <= 0.7937689423561096) ? ( (scaler_output_8 <= -0.5848832605406642) ? ( 310 ) : ( 311 ) ) : ( 312 ) ) : ( (scaler_output_7 <= 0.799277275800705) ? ( (scaler_output_5 <= -0.553789985133335) ? ( 315 ) : ( 316 ) ) : ( 317 ) ) ) ) : ( (scaler_output_4 <= 0.9774768352508545) ? ( (scaler_output_2 <= -1.8524868488311768) ? ( 320 ) : ( (scaler_output_2 <= -0.3530932143330574) ? ( (scaler_output_7 <= -0.16829999536275864) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 324 ) : ( 325 ) ) : ( (scaler_output_6 <= 0.5197365880012512) ? ( 327 ) : ( (scaler_output_8 <= -0.903623178601265) ? ( 329 ) : ( 330 ) ) ) ) : ( (scaler_output_11 <= 1.3433722257614136) ? ( (scaler_output_11 <= 0.779662013053894) ? ( (scaler_output_9 <= 1.1040537059307098) ? ( (scaler_output_10 <= 1.4629014134407043) ? ( (scaler_output_5 <= -0.1382877230644226) ? ( (scaler_output_4 <= 0.8167324364185333) ? ( 337 ) : ( 338 ) ) : ( (scaler_output_8 <= 1.1283438801765442) ? ( (scaler_output_7 <= -0.10640111193060875) ? ( (scaler_output_9 <= -0.08409103751182556) ? ( 342 ) : ( 343 ) ) : ( (scaler_output_10 <= 0.7734600603580475) ? ( 345 ) : ( 346 ) ) ) : ( 347 ) ) ) : ( 348 ) ) : ( (scaler_output_9 <= 1.5676249265670776) ? ( 350 ) : ( 351 ) ) ) : ( (scaler_output_8 <= -0.8637807369232178) ? ( 353 ) : ( 354 ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( 357 ) : ( 358 ) ) : ( 359 ) ) ) ) ) : ( (scaler_output_6 <= 0.77745521068573) ? ( (scaler_output_2 <= -0.6222151517868042) ? ( (scaler_output_8 <= -0.6247257739305496) ? ( 363 ) : ( 364 ) ) : ( (scaler_output_11 <= 2.470792770385742) ? ( (scaler_output_6 <= 0.3765595853328705) ? ( (scaler_output_4 <= 2.343804121017456) ? ( (scaler_output_9 <= -0.06850882433354855) ? ( (scaler_output_7 <= -0.562498152256012) ? ( (scaler_output_11 <= 0.30267641693353653) ? ( (scaler_output_11 <= -0.17430918663740158) ? ( 372 ) : ( 373 ) ) : ( (scaler_output_7 <= -0.7221321165561676) ? ( 375 ) : ( 376 ) ) ) : ( (scaler_output_6 <= -0.6113617718219757) ? ( 378 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.2661433294415474) ? ( 381 ) : ( 382 ) ) : ( 383 ) ) ) ) : ( (scaler_output_11 <= 0.5194880366325378) ? ( (scaler_output_8 <= -1.062993198633194) ? ( 386 ) : ( 387 ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( (scaler_output_6 <= -0.6399971693754196) ? ( 390 ) : ( 391 ) ) : ( (scaler_output_8 <= -0.7044107466936111) ? ( 393 ) : ( 394 ) ) ) ) ) : ( (scaler_output_2 <= 0.18515068292617798) ? ( 396 ) : ( 397 ) ) ) : ( (scaler_output_7 <= 0.7048000693321228) ? ( (scaler_output_11 <= 1.9504448175430298) ? ( (scaler_output_11 <= 0.25931406766176224) ? ( 401 ) : ( 402 ) ) : ( 403 ) ) : ( (scaler_output_5 <= 0.4434153735637665) ? ( 405 ) : ( 406 ) ) ) ) : ( (scaler_output_4 <= 1.4367465376853943) ? ( 408 ) : ( 409 ) ) ) ) : ( (scaler_output_10 <= 1.275049865245819) ? ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_9 <= 0.5781535655260086) ? ( 413 ) : ( (scaler_output_5 <= 0.716459646821022) ? ( 415 ) : ( 416 ) ) ) : ( (scaler_output_8 <= 0.33149405010044575) ? ( 418 ) : ( 419 ) ) ) : ( (scaler_output_10 <= 1.5755862593650818) ? ( (scaler_output_6 <= 1.0494915544986725) ? ( 422 ) : ( (scaler_output_6 <= 1.536293387413025) ? ( 424 ) : ( (scaler_output_11 <= 0.6495750248432159) ? ( 426 ) : ( 427 ) ) ) ) : ( (scaler_output_9 <= 2.0078227519989014) ? ( 429 ) : ( (scaler_output_6 <= 1.9371889233589172) ? ( 431 ) : ( 432 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_12
		
	
		namespace EXT_SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {142. }} ,
					{ 8 ,  {129. }} ,
					{ 10 ,  {101. }} ,
					{ 12 ,  {55. }} ,
					{ 16 ,  {70. }} ,
					{ 17 ,  {71. }} ,
					{ 18 ,  {67. }} ,
					{ 19 ,  {83. }} ,
					{ 22 ,  {124. }} ,
					{ 23 ,  {74. }} ,
					{ 25 ,  {135. }} ,
					{ 28 ,  {178. }} ,
					{ 29 ,  {168. }} ,
					{ 31 ,  {219. }} ,
					{ 33 ,  {190. }} ,
					{ 34 ,  {200. }} ,
					{ 42 ,  {104. }} ,
					{ 43 ,  {138. }} ,
					{ 45 ,  {53. }} ,
					{ 46 ,  {79. }} ,
					{ 52 ,  {60. }} ,
					{ 53 ,  {61. }} ,
					{ 55 ,  {55. }} ,
					{ 56 ,  {53. }} ,
					{ 58 ,  {31. }} ,
					{ 61 ,  {44. }} ,
					{ 62 ,  {47. }} ,
					{ 63 ,  {53. }} ,
					{ 64 ,  {92. }} ,
					{ 66 ,  {132. }} ,
					{ 68 ,  {97. }} ,
					{ 70 ,  {83. }} ,
					{ 72 ,  {77. }} ,
					{ 73 ,  {71. }} ,
					{ 76 ,  {54. }} ,
					{ 78 ,  {135. }} ,
					{ 81 ,  {96. }} ,
					{ 82 ,  {89. }} ,
					{ 85 ,  {107. }} ,
					{ 86 ,  {104. }} ,
					{ 87 ,  {111. }} ,
					{ 89 ,  {146. }} ,
					{ 90 ,  {118. }} ,
					{ 91 ,  {200. }} ,
					{ 92 ,  {216. }} ,
					{ 93 ,  {230. }} ,
					{ 96 ,  {85. }} ,
					{ 98 ,  {51. }} ,
					{ 100 ,  {49. }} ,
					{ 101 ,  {48. }} ,
					{ 109 ,  {152. }} ,
					{ 110 ,  {143. }} ,
					{ 112 ,  {125. }} ,
					{ 113 ,  {114. }} ,
					{ 116 ,  {99. }} ,
					{ 117 ,  {104. }} ,
					{ 120 ,  {65. }} ,
					{ 121 ,  {66. }} ,
					{ 122 ,  {77. }} ,
					{ 125 ,  {61. }} ,
					{ 126 ,  {37. }} ,
					{ 128 ,  {75. }} ,
					{ 130 ,  {98. }} ,
					{ 132 ,  {87. }} ,
					{ 133 ,  {88. }} ,
					{ 135 ,  {40. }} ,
					{ 136 ,  {42. }} ,
					{ 139 ,  {153. }} ,
					{ 141 ,  {168. }} ,
					{ 142 ,  {179. }} ,
					{ 144 ,  {87. }} ,
					{ 145 ,  {128. }} ,
					{ 151 ,  {113. }} ,
					{ 152 ,  {94. }} ,
					{ 153 ,  {59. }} ,
					{ 156 ,  {39. }} ,
					{ 159 ,  {53. }} ,
					{ 160 ,  {52. }} ,
					{ 161 ,  {60. }} ,
					{ 163 ,  {65. }} ,
					{ 164 ,  {71. }} ,
					{ 171 ,  {97. }} ,
					{ 172 ,  {96. }} ,
					{ 173 ,  {91. }} ,
					{ 174 ,  {102. }} ,
					{ 175 ,  {118. }} ,
					{ 177 ,  {72. }} ,
					{ 179 ,  {84. }} ,
					{ 180 ,  {80. }} ,
					{ 182 ,  {49. }} ,
					{ 183 ,  {59. }} ,
					{ 184 ,  {158. }} ,
					{ 186 ,  {302. }} ,
					{ 189 ,  {210. }} ,
					{ 192 ,  {121. }} ,
					{ 195 ,  {182. }} ,
					{ 196 ,  {167. }} ,
					{ 197 ,  {147. }} ,
					{ 200 ,  {144. }} ,
					{ 201 ,  {141. }} ,
					{ 203 ,  {91. }} ,
					{ 205 ,  {103. }} ,
					{ 206 ,  {110. }} ,
					{ 210 ,  {113. }} ,
					{ 211 ,  {52. }} ,
					{ 215 ,  {191. }} ,
					{ 217 ,  {170. }} ,
					{ 218 ,  {155. }} ,
					{ 219 ,  {118. }} ,
					{ 220 ,  {244. }} ,
					{ 223 ,  {293. }} ,
					{ 224 ,  {288. }} ,
					{ 226 ,  {263. }} ,
					{ 227 ,  {257. }} ,
					{ 236 ,  {131. }} ,
					{ 237 ,  {140. }} ,
					{ 238 ,  {115. }} ,
					{ 239 ,  {78. }} ,
					{ 244 ,  {185. }} ,
					{ 245 ,  {200. }} ,
					{ 247 ,  {93. }} ,
					{ 249 ,  {154. }} ,
					{ 250 ,  {151. }} ,
					{ 253 ,  {252. }} ,
					{ 254 ,  {233. }} ,
					{ 257 ,  {200. }} ,
					{ 258 ,  {198. }} ,
					{ 260 ,  {214. }} ,
					{ 261 ,  {206. }} ,
					{ 265 ,  {281. }} ,
					{ 266 ,  {276. }} ,
					{ 268 ,  {258. }} ,
					{ 269 ,  {249. }} ,
					{ 270 ,  {173. }} ,
					{ 272 ,  {122. }} ,
					{ 273 ,  {99. }} ,
					{ 278 ,  {58. }} ,
					{ 280 ,  {126. }} ,
					{ 281 ,  {111. }} ,
					{ 283 ,  {178. }} ,
					{ 284 ,  {151. }} ,
					{ 288 ,  {262. }} ,
					{ 289 ,  {259. }} ,
					{ 292 ,  {220. }} ,
					{ 293 ,  {209. }} ,
					{ 295 ,  {235. }} ,
					{ 296 ,  {229. }} ,
					{ 298 ,  {122. }} ,
					{ 302 ,  {168. }} ,
					{ 304 ,  {172. }} ,
					{ 305 ,  {174. }} ,
					{ 306 ,  {131. }} ,
					{ 307 ,  {212. }} ,
					{ 312 ,  {94. }} ,
					{ 316 ,  {85. }} ,
					{ 317 ,  {84. }} ,
					{ 318 ,  {90. }} ,
					{ 319 ,  {74. }} ,
					{ 321 ,  {109. }} ,
					{ 323 ,  {102. }} ,
					{ 324 ,  {100. }} ,
					{ 325 ,  {69. }} ,
					{ 327 ,  {142. }} ,
					{ 328 ,  {202. }} ,
					{ 332 ,  {156. }} ,
					{ 334 ,  {66. }} ,
					{ 336 ,  {91. }} ,
					{ 337 ,  {90. }} ,
					{ 340 ,  {190. }} ,
					{ 341 ,  {120. }} ,
					{ 342 ,  {252. }} ,
					{ 345 ,  {171. }} ,
					{ 346 ,  {48. }} ,
					{ 349 ,  {292. }} ,
					{ 352 ,  {281. }} ,
					{ 353 ,  {277. }} ,
					{ 354 ,  {273. }} ,
					{ 358 ,  {178. }} ,
					{ 361 ,  {202. }} ,
					{ 363 ,  {195. }} ,
					{ 364 ,  {197. }} ,
					{ 365 ,  {191. }} ,
					{ 366 ,  {166. }} ,
					{ 368 ,  {138. }} ,
					{ 372 ,  {270. }} ,
					{ 373 ,  {283. }} ,
					{ 375 ,  {248. }} ,
					{ 376 ,  {236. }} ,
					{ 378 ,  {265. }} ,
					{ 381 ,  {217. }} ,
					{ 382 ,  {222. }} ,
					{ 384 ,  {235. }} ,
					{ 385 ,  {241. }} ,
					{ 389 ,  {151. }} ,
					{ 391 ,  {221. }} ,
					{ 392 ,  {259. }} ,
					{ 396 ,  {281. }} ,
					{ 398 ,  {272. }} ,
					{ 399 ,  {275. }} ,
					{ 401 ,  {242. }} ,
					{ 402 ,  {258. }} ,
					{ 405 ,  {346. }} ,
					{ 406 ,  {332. }} ,
					{ 409 ,  {280. }} ,
					{ 411 ,  {275. }} ,
					{ 412 ,  {274. }} ,
					{ 414 ,  {310. }} ,
					{ 415 ,  {308. }} ,
					{ 418 ,  {233. }} ,
					{ 420 ,  {68. }} ,
					{ 421 ,  {128. }} ,
					{ 425 ,  {178. }} ,
					{ 426 ,  {164. }} ,
					{ 428 ,  {180. }} ,
					{ 432 ,  {215. }} ,
					{ 433 ,  {220. }} ,
					{ 434 ,  {233. }} ,
					{ 436 ,  {252. }} ,
					{ 437 ,  {237. }} ,
					{ 440 ,  {306. }} ,
					{ 441 ,  {317. }} ,
					{ 443 ,  {230. }} ,
					{ 445 ,  {268. }} ,
					{ 446 ,  {258. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.05069565773010254) ? ( (scaler_output_4 <= 0.15079138055443764) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_7 <= -0.5787873268127441) ? ( (scaler_output_7 <= -1.3280895948410034) ? ( (scaler_output_8 <= -0.4255133122205734) ? ( (scaler_output_4 <= -1.192572444677353) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_4 <= -1.5829516649246216) ? ( 10 ) : ( (scaler_output_4 <= -1.3762803077697754) ? ( 12 ) : ( (scaler_output_8 <= -0.06693087052553892) ? ( (scaler_output_10 <= -1.3739300966262817) ? ( (scaler_output_5 <= -0.6368904113769531) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) : ( 19 ) ) ) ) ) : ( (scaler_output_8 <= -0.30598582327365875) ? ( (scaler_output_8 <= -0.8239382058382034) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_4 <= -1.1007185280323029) ? ( 25 ) : ( (scaler_output_8 <= 0.05259660352021456) ? ( (scaler_output_10 <= -1.051557183265686) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_6 <= -1.1697521209716797) ? ( 31 ) : ( (scaler_output_6 <= -0.9120334982872009) ? ( 33 ) : ( 34 ) ) ) ) ) ) ) : ( (scaler_output_6 <= 1.4074340462684631) ? ( (scaler_output_5 <= 2.0698097348213196) ? ( (scaler_output_4 <= 0.013010472059249878) ? ( (scaler_output_6 <= -0.03865373437292874) ? ( (scaler_output_4 <= -1.008864551782608) ? ( (scaler_output_6 <= -0.6829502582550049) ? ( (scaler_output_8 <= -0.3059858214110136) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_2 <= -0.12241726368665695) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_2 <= 0.6849485635757446) ? ( (scaler_output_8 <= 0.17212408035993576) ? ( (scaler_output_8 <= -0.22630083560943604) ? ( (scaler_output_6 <= -0.7402210533618927) ? ( (scaler_output_10 <= -0.4980408847332001) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_11 <= -0.1743091642856598) ? ( 55 ) : ( 56 ) ) ) : ( (scaler_output_2 <= 0.10825868509709835) ? ( 58 ) : ( (scaler_output_10 <= -0.6244039237499237) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) ) : ( 64 ) ) : ( (scaler_output_10 <= -0.9146139025688171) ? ( 66 ) : ( (scaler_output_5 <= -0.363846093416214) ? ( 68 ) : ( (scaler_output_5 <= 0.46715831756591797) ? ( 70 ) : ( (scaler_output_8 <= -0.9434657096862793) ? ( 72 ) : ( 73 ) ) ) ) ) ) ) : ( (scaler_output_11 <= 1.2132852673530579) ? ( (scaler_output_11 <= -1.345091998577118) ? ( 76 ) : ( (scaler_output_7 <= 0.30082838237285614) ? ( 78 ) : ( (scaler_output_4 <= -0.5036679357290268) ? ( (scaler_output_4 <= -0.9744193851947784) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_10 <= -0.22441993653774261) ? ( (scaler_output_4 <= -0.41181398928165436) ? ( 85 ) : ( 86 ) ) : ( 87 ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 89 ) : ( 90 ) ) ) ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) ) : ( (scaler_output_4 <= -1.4910977482795715) ? ( (scaler_output_10 <= -1.4375481009483337) ? ( 96 ) : ( (scaler_output_4 <= -1.6748056411743164) ? ( 98 ) : ( (scaler_output_8 <= 1.0885013937950134) ? ( 100 ) : ( 101 ) ) ) ) : ( (scaler_output_7 <= -0.22042536735534668) ? ( (scaler_output_6 <= -0.1818307414650917) ? ( (scaler_output_11 <= 0.38940106332302094) ? ( (scaler_output_8 <= 1.128343939781189) ? ( (scaler_output_7 <= -1.2140653133392334) ? ( (scaler_output_7 <= -1.7385769486427307) ? ( (scaler_output_7 <= -2.064360499382019) ? ( 109 ) : ( 110 ) ) : ( (scaler_output_11 <= -2.2123385667800903) ? ( 112 ) : ( 113 ) ) ) : ( (scaler_output_10 <= -1.7956026196479797) ? ( (scaler_output_11 <= -0.4344831258058548) ? ( 116 ) : ( 117 ) ) : ( (scaler_output_7 <= -0.60810786485672) ? ( (scaler_output_4 <= -0.7677479982376099) ? ( 120 ) : ( 121 ) ) : ( 122 ) ) ) ) : ( (scaler_output_2 <= -0.31464721262454987) ? ( (scaler_output_2 <= -1.045121043920517) ? ( 125 ) : ( 126 ) ) : ( (scaler_output_4 <= -1.1007184982299805) ? ( 128 ) : ( (scaler_output_10 <= -1.0109635442495346) ? ( 130 ) : ( (scaler_output_7 <= -1.2205809950828552) ? ( 132 ) : ( 133 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 135 ) : ( 136 ) ) ) : ( (scaler_output_8 <= 1.4470837712287903) ? ( (scaler_output_6 <= -0.13887764140963554) ? ( 139 ) : ( (scaler_output_11 <= -1.0415557026863098) ? ( 141 ) : ( 142 ) ) ) : ( (scaler_output_11 <= -0.3477585017681122) ? ( 144 ) : ( 145 ) ) ) ) : ( (scaler_output_11 <= 0.823024332523346) ? ( (scaler_output_2 <= 0.031366702169179916) ? ( (scaler_output_2 <= -0.8144451081752777) ? ( (scaler_output_7 <= 0.8611761629581451) ? ( (scaler_output_9 <= -0.707380086183548) ? ( 151 ) : ( 152 ) ) : ( 153 ) ) : ( (scaler_output_10 <= -0.5184197872877121) ? ( (scaler_output_8 <= 0.8892889320850372) ? ( 156 ) : ( (scaler_output_5 <= -0.38758905977010727) ? ( (scaler_output_8 <= 1.566611260175705) ? ( 159 ) : ( 160 ) ) : ( 161 ) ) ) : ( (scaler_output_4 <= -0.5266314148902893) ? ( 163 ) : ( 164 ) ) ) ) : ( (scaler_output_4 <= -0.18217915249988437) ? ( (scaler_output_9 <= -0.8437245488166809) ? ( (scaler_output_8 <= 1.606453776359558) ? ( (scaler_output_11 <= 0.3460387457162142) ? ( (scaler_output_5 <= -0.06705880165100098) ? ( (scaler_output_8 <= 1.3275563716888428) ? ( 171 ) : ( 172 ) ) : ( 173 ) ) : ( 174 ) ) : ( 175 ) ) : ( (scaler_output_6 <= 0.433830383233726) ? ( 177 ) : ( (scaler_output_5 <= -0.06705878674983978) ? ( 179 ) : ( 180 ) ) ) ) : ( (scaler_output_8 <= 1.0885013937950134) ? ( 182 ) : ( 183 ) ) ) ) : ( 184 ) ) ) ) ) : ( (scaler_output_2 <= -1.7755948901176453) ? ( 186 ) : ( (scaler_output_5 <= 0.2178570032119751) ? ( (scaler_output_6 <= -0.9979396760463715) ? ( 189 ) : ( (scaler_output_4 <= 0.8741411566734314) ? ( (scaler_output_4 <= 0.5067253857851028) ? ( 192 ) : ( (scaler_output_4 <= 0.8167324364185333) ? ( (scaler_output_10 <= -0.5324465334415436) ? ( 195 ) : ( 196 ) ) : ( 197 ) ) ) : ( (scaler_output_10 <= -0.7719537019729614) ? ( (scaler_output_8 <= -0.42551328241825104) ? ( 200 ) : ( 201 ) ) : ( (scaler_output_8 <= -0.7442532479763031) ? ( 203 ) : ( (scaler_output_7 <= 0.030428003519773483) ? ( 205 ) : ( 206 ) ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_10 <= -0.9499801993370056) ? ( (scaler_output_2 <= -0.04552528262138367) ? ( 210 ) : ( 211 ) ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_2 <= 0.7618405222892761) ? ( (scaler_output_5 <= 0.8589175790548325) ? ( 215 ) : ( (scaler_output_8 <= -0.8637807071208954) ? ( 217 ) : ( 218 ) ) ) : ( 219 ) ) : ( 220 ) ) ) : ( (scaler_output_7 <= -0.17481566220521927) ? ( (scaler_output_4 <= 1.3104473948478699) ? ( 223 ) : ( 224 ) ) : ( (scaler_output_7 <= 0.1639992818236351) ? ( 226 ) : ( 227 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 0.9889585971832275) ? ( (scaler_output_5 <= 0.5027728229761124) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= 0.5296888798475266) ? ( (scaler_output_5 <= -1.254207968711853) ? ( (scaler_output_5 <= -1.3610513806343079) ? ( (scaler_output_6 <= 0.3479241728782654) ? ( (scaler_output_8 <= 0.05259660631418228) ? ( 236 ) : ( 237 ) ) : ( 238 ) ) : ( 239 ) ) : ( (scaler_output_4 <= -0.04439823655411601) ? ( (scaler_output_10 <= 0.31911972165107727) ? ( (scaler_output_2 <= -1.4295809864997864) ? ( (scaler_output_4 <= -0.5840401202440262) ? ( 244 ) : ( 245 ) ) : ( (scaler_output_11 <= -0.5212078094482422) ? ( 247 ) : ( (scaler_output_6 <= 0.2763356864452362) ? ( 249 ) : ( 250 ) ) ) ) : ( (scaler_output_2 <= 0.3004886358976364) ? ( (scaler_output_9 <= 1.0845758393406868) ? ( 253 ) : ( 254 ) ) : ( (scaler_output_7 <= -0.624397024512291) ? ( (scaler_output_10 <= 0.6632643640041351) ? ( 257 ) : ( 258 ) ) : ( (scaler_output_7 <= -0.12269028648734093) ? ( 260 ) : ( 261 ) ) ) ) ) : ( (scaler_output_2 <= 0.9925164878368378) ? ( (scaler_output_6 <= -0.23910154402256012) ? ( (scaler_output_8 <= 0.29165155440568924) ? ( 265 ) : ( 266 ) ) : ( (scaler_output_11 <= -0.3911207914352417) ? ( 268 ) : ( 269 ) ) ) : ( 270 ) ) ) ) : ( (scaler_output_5 <= 0.07539910823106766) ? ( 272 ) : ( 273 ) ) ) : ( (scaler_output_8 <= -0.5450407862663269) ? ( (scaler_output_6 <= -0.29637233912944794) ? ( (scaler_output_8 <= -0.9036231935024261) ? ( (scaler_output_9 <= 0.632691353559494) ? ( 278 ) : ( (scaler_output_5 <= -0.708119347691536) ? ( 280 ) : ( 281 ) ) ) : ( (scaler_output_11 <= -0.04422220587730408) ? ( 283 ) : ( 284 ) ) ) : ( (scaler_output_2 <= 0.4927186071872711) ? ( (scaler_output_5 <= -0.19764519482851028) ? ( (scaler_output_6 <= 0.29065337777137756) ? ( 288 ) : ( 289 ) ) : ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_5 <= 0.07539910380728543) ? ( 292 ) : ( 293 ) ) : ( (scaler_output_8 <= -1.142678141593933) ? ( 295 ) : ( 296 ) ) ) ) : ( (scaler_output_2 <= 0.6080565750598907) ? ( 298 ) : ( (scaler_output_5 <= 0.2534714825451374) ? ( (scaler_output_7 <= 1.7082135081291199) ? ( (scaler_output_4 <= -0.6988575458526611) ? ( 302 ) : ( (scaler_output_4 <= 0.15079137682914734) ? ( 304 ) : ( 305 ) ) ) : ( 306 ) ) : ( 307 ) ) ) ) ) : ( (scaler_output_10 <= 0.5253708511590958) ? ( (scaler_output_6 <= 1.5219756364822388) ? ( (scaler_output_6 <= 0.7058666944503784) ? ( (scaler_output_6 <= -0.3106900528073311) ? ( 312 ) : ( (scaler_output_11 <= 0.6929373443126678) ? ( (scaler_output_10 <= 0.359082967042923) ? ( (scaler_output_5 <= -0.6250188946723938) ? ( 316 ) : ( 317 ) ) : ( 318 ) ) : ( 319 ) ) ) : ( (scaler_output_10 <= 0.15862757712602615) ? ( 321 ) : ( (scaler_output_11 <= 1.169922947883606) ? ( 323 ) : ( 324 ) ) ) ) : ( 325 ) ) : ( (scaler_output_2 <= 0.5696105882525444) ? ( 327 ) : ( 328 ) ) ) ) ) : ( (scaler_output_4 <= -0.4807044416666031) ? ( (scaler_output_5 <= 0.7876885831356049) ? ( (scaler_output_10 <= 0.17306960187852383) ? ( 332 ) : ( (scaler_output_6 <= 0.3049710839986801) ? ( 334 ) : ( (scaler_output_8 <= -0.3458283543586731) ? ( 336 ) : ( 337 ) ) ) ) : ( (scaler_output_4 <= -0.6529305875301361) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 340 ) : ( 341 ) ) : ( 342 ) ) ) : ( (scaler_output_2 <= -0.2762012295424938) ? ( (scaler_output_11 <= -0.3477584943175316) ? ( 345 ) : ( 346 ) ) : ( (scaler_output_8 <= -0.9036231935024261) ? ( (scaler_output_2 <= 0.4542726203799248) ? ( 349 ) : ( (scaler_output_4 <= 0.25412706285715103) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 352 ) : ( 353 ) ) : ( 354 ) ) ) : ( (scaler_output_7 <= 0.14771009609103203) ? ( (scaler_output_8 <= 1.5267688035964966) ? ( (scaler_output_8 <= -0.42551329731941223) ? ( 358 ) : ( (scaler_output_11 <= 0.996473640203476) ? ( (scaler_output_6 <= 0.2477002739906311) ? ( 361 ) : ( (scaler_output_6 <= 0.6485958695411682) ? ( 363 ) : ( 364 ) ) ) : ( 365 ) ) ) : ( 366 ) ) : ( (scaler_output_10 <= 0.31951048970222473) ? ( 368 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_10 <= 1.2318548560142517) ? ( (scaler_output_8 <= 0.6103914976119995) ? ( 372 ) : ( 373 ) ) : ( (scaler_output_10 <= 1.408672034740448) ? ( 375 ) : ( 376 ) ) ) : ( (scaler_output_11 <= -0.21767151169478893) ? ( 378 ) : ( (scaler_output_6 <= 0.9635853171348572) ? ( (scaler_output_7 <= 0.7862459272146225) ? ( 381 ) : ( 382 ) ) : ( (scaler_output_9 <= 0.6950202658772469) ? ( 384 ) : ( 385 ) ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_7 <= 0.43114182353019714) ? ( (scaler_output_11 <= -0.347758486866951) ? ( (scaler_output_10 <= 0.5425282865762711) ? ( 389 ) : ( (scaler_output_4 <= 1.2415568828582764) ? ( 391 ) : ( 392 ) ) ) : ( (scaler_output_7 <= -0.49082574248313904) ? ( (scaler_output_10 <= 1.7255492210388184) ? ( (scaler_output_7 <= -0.9925324618816376) ? ( 396 ) : ( (scaler_output_8 <= -0.9833082109689713) ? ( 398 ) : ( 399 ) ) ) : ( (scaler_output_8 <= -1.222363144159317) ? ( 401 ) : ( 402 ) ) ) : ( (scaler_output_8 <= -0.9434657096862793) ? ( (scaler_output_10 <= 0.6036544442176819) ? ( 405 ) : ( 406 ) ) : ( (scaler_output_6 <= 0.29065337777137756) ? ( (scaler_output_11 <= 0.04250246286392212) ? ( 409 ) : ( (scaler_output_8 <= -0.2661433294415474) ? ( 411 ) : ( 412 ) ) ) : ( (scaler_output_5 <= 1.8917373418807983) ? ( 414 ) : ( 415 ) ) ) ) ) ) : ( (scaler_output_2 <= -1.0835670232772827) ? ( (scaler_output_2 <= -1.6218109726905823) ? ( 418 ) : ( (scaler_output_11 <= 0.04250246286392212) ? ( 420 ) : ( 421 ) ) ) : ( (scaler_output_9 <= 1.871478259563446) ? ( (scaler_output_4 <= 1.2645204067230225) ? ( (scaler_output_10 <= 0.5394022613763809) ? ( 425 ) : ( 426 ) ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( 428 ) : ( (scaler_output_2 <= -0.1608632504940033) ? ( (scaler_output_10 <= 1.51099294424057) ? ( (scaler_output_8 <= -0.14661586098372936) ? ( 432 ) : ( 433 ) ) : ( 434 ) ) : ( (scaler_output_2 <= 0.7618405371904373) ? ( 436 ) : ( 437 ) ) ) ) ) : ( (scaler_output_5 <= -0.42320355400443077) ? ( (scaler_output_11 <= 1.9070825576782227) ? ( 440 ) : ( 441 ) ) : ( (scaler_output_6 <= 1.1926685571670532) ? ( 443 ) : ( (scaler_output_8 <= -0.8637807071208954) ? ( 445 ) : ( 446 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_13
		
	
		namespace EXT_SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {74. }} ,
					{ 9 ,  {77. }} ,
					{ 10 ,  {55. }} ,
					{ 16 ,  {101. }} ,
					{ 18 ,  {96. }} ,
					{ 19 ,  {93. }} ,
					{ 21 ,  {128. }} ,
					{ 22 ,  {131. }} ,
					{ 25 ,  {158. }} ,
					{ 26 ,  {160. }} ,
					{ 27 ,  {135. }} ,
					{ 29 ,  {25. }} ,
					{ 30 ,  {31. }} ,
					{ 36 ,  {185. }} ,
					{ 37 ,  {200. }} ,
					{ 40 ,  {168. }} ,
					{ 41 ,  {162. }} ,
					{ 42 ,  {151. }} ,
					{ 43 ,  {113. }} ,
					{ 45 ,  {200. }} ,
					{ 46 ,  {216. }} ,
					{ 50 ,  {86. }} ,
					{ 51 ,  {68. }} ,
					{ 52 ,  {104. }} ,
					{ 54 ,  {178. }} ,
					{ 56 ,  {146. }} ,
					{ 57 ,  {127. }} ,
					{ 59 ,  {200. }} ,
					{ 60 ,  {230. }} ,
					{ 66 ,  {88. }} ,
					{ 67 ,  {91. }} ,
					{ 68 ,  {58. }} ,
					{ 72 ,  {61. }} ,
					{ 74 ,  {104. }} ,
					{ 75 ,  {107. }} ,
					{ 77 ,  {156. }} ,
					{ 78 ,  {129. }} ,
					{ 79 ,  {202. }} ,
					{ 84 ,  {70. }} ,
					{ 85 ,  {83. }} ,
					{ 86 ,  {101. }} ,
					{ 88 ,  {116. }} ,
					{ 89 ,  {138. }} ,
					{ 93 ,  {71. }} ,
					{ 94 ,  {60. }} ,
					{ 96 ,  {54. }} ,
					{ 97 ,  {44. }} ,
					{ 101 ,  {83. }} ,
					{ 102 ,  {88. }} ,
					{ 104 ,  {111. }} ,
					{ 105 ,  {97. }} ,
					{ 106 ,  {53. }} ,
					{ 112 ,  {118. }} ,
					{ 113 ,  {124. }} ,
					{ 114 ,  {102. }} ,
					{ 116 ,  {150. }} ,
					{ 117 ,  {168. }} ,
					{ 119 ,  {177. }} ,
					{ 120 ,  {179. }} ,
					{ 123 ,  {84. }} ,
					{ 124 ,  {89. }} ,
					{ 125 ,  {100. }} ,
					{ 129 ,  {37. }} ,
					{ 130 ,  {40. }} ,
					{ 134 ,  {137. }} ,
					{ 135 ,  {143. }} ,
					{ 138 ,  {85. }} ,
					{ 139 ,  {99. }} ,
					{ 141 ,  {125. }} ,
					{ 142 ,  {114. }} ,
					{ 148 ,  {98. }} ,
					{ 149 ,  {90. }} ,
					{ 152 ,  {48. }} ,
					{ 153 ,  {49. }} ,
					{ 157 ,  {51. }} ,
					{ 158 ,  {60. }} ,
					{ 160 ,  {87. }} ,
					{ 164 ,  {75. }} ,
					{ 165 ,  {77. }} ,
					{ 166 ,  {72. }} ,
					{ 167 ,  {66. }} ,
					{ 168 ,  {96. }} ,
					{ 170 ,  {39. }} ,
					{ 171 ,  {51. }} ,
					{ 174 ,  {42. }} ,
					{ 175 ,  {39. }} ,
					{ 177 ,  {48. }} ,
					{ 178 ,  {49. }} ,
					{ 180 ,  {158. }} ,
					{ 185 ,  {87. }} ,
					{ 186 ,  {92. }} ,
					{ 187 ,  {102. }} ,
					{ 189 ,  {113. }} ,
					{ 190 ,  {118. }} ,
					{ 193 ,  {71. }} ,
					{ 196 ,  {63. }} ,
					{ 197 ,  {65. }} ,
					{ 198 ,  {59. }} ,
					{ 200 ,  {52. }} ,
					{ 203 ,  {81. }} ,
					{ 206 ,  {97. }} ,
					{ 207 ,  {94. }} ,
					{ 208 ,  {91. }} ,
					{ 210 ,  {80. }} ,
					{ 211 ,  {84. }} ,
					{ 216 ,  {153. }} ,
					{ 217 ,  {168. }} ,
					{ 218 ,  {214. }} ,
					{ 220 ,  {88. }} ,
					{ 221 ,  {109. }} ,
					{ 223 ,  {102. }} ,
					{ 225 ,  {48. }} ,
					{ 226 ,  {73. }} ,
					{ 230 ,  {206. }} ,
					{ 232 ,  {161. }} ,
					{ 234 ,  {144. }} ,
					{ 235 ,  {126. }} ,
					{ 237 ,  {131. }} ,
					{ 239 ,  {292. }} ,
					{ 242 ,  {252. }} ,
					{ 243 ,  {259. }} ,
					{ 246 ,  {233. }} ,
					{ 247 ,  {241. }} ,
					{ 248 ,  {248. }} ,
					{ 252 ,  {94. }} ,
					{ 253 ,  {115. }} ,
					{ 254 ,  {69. }} ,
					{ 258 ,  {200. }} ,
					{ 260 ,  {197. }} ,
					{ 261 ,  {198. }} ,
					{ 262 ,  {191. }} ,
					{ 265 ,  {190. }} ,
					{ 268 ,  {134. }} ,
					{ 269 ,  {120. }} ,
					{ 271 ,  {95. }} ,
					{ 272 ,  {90. }} ,
					{ 274 ,  {123. }} ,
					{ 276 ,  {217. }} ,
					{ 278 ,  {202. }} ,
					{ 279 ,  {196. }} ,
					{ 291 ,  {201. }} ,
					{ 292 ,  {210. }} ,
					{ 294 ,  {182. }} ,
					{ 295 ,  {191. }} ,
					{ 296 ,  {145. }} ,
					{ 298 ,  {276. }} ,
					{ 299 ,  {265. }} ,
					{ 303 ,  {113. }} ,
					{ 304 ,  {127. }} ,
					{ 306 ,  {151. }} ,
					{ 307 ,  {173. }} ,
					{ 309 ,  {202. }} ,
					{ 312 ,  {172. }} ,
					{ 314 ,  {178. }} ,
					{ 315 ,  {182. }} ,
					{ 316 ,  {196. }} ,
					{ 318 ,  {244. }} ,
					{ 319 ,  {235. }} ,
					{ 322 ,  {122. }} ,
					{ 324 ,  {96. }} ,
					{ 325 ,  {67. }} ,
					{ 327 ,  {143. }} ,
					{ 328 ,  {138. }} ,
					{ 332 ,  {242. }} ,
					{ 333 ,  {249. }} ,
					{ 334 ,  {212. }} ,
					{ 336 ,  {273. }} ,
					{ 337 ,  {283. }} ,
					{ 340 ,  {221. }} ,
					{ 343 ,  {90. }} ,
					{ 345 ,  {137. }} ,
					{ 346 ,  {147. }} ,
					{ 348 ,  {99. }} ,
					{ 351 ,  {70. }} ,
					{ 352 ,  {68. }} ,
					{ 353 ,  {91. }} ,
					{ 356 ,  {151. }} ,
					{ 358 ,  {263. }} ,
					{ 359 ,  {259. }} ,
					{ 362 ,  {144. }} ,
					{ 364 ,  {187. }} ,
					{ 368 ,  {175. }} ,
					{ 369 ,  {174. }} ,
					{ 371 ,  {178. }} ,
					{ 372 ,  {180. }} ,
					{ 373 ,  {164. }} ,
					{ 375 ,  {78. }} ,
					{ 377 ,  {121. }} ,
					{ 378 ,  {110. }} ,
					{ 384 ,  {232. }} ,
					{ 385 ,  {225. }} ,
					{ 386 ,  {248. }} ,
					{ 389 ,  {317. }} ,
					{ 391 ,  {277. }} ,
					{ 392 ,  {297. }} ,
					{ 394 ,  {242. }} ,
					{ 396 ,  {272. }} ,
					{ 397 ,  {268. }} ,
					{ 400 ,  {311. }} ,
					{ 402 ,  {246. }} ,
					{ 405 ,  {222. }} ,
					{ 407 ,  {166. }} ,
					{ 410 ,  {202. }} ,
					{ 412 ,  {192. }} ,
					{ 413 ,  {186. }} ,
					{ 414 ,  {173. }} ,
					{ 415 ,  {150. }} ,
					{ 418 ,  {303. }} ,
					{ 420 ,  {258. }} ,
					{ 422 ,  {270. }} ,
					{ 423 ,  {275. }} ,
					{ 425 ,  {217. }} ,
					{ 426 ,  {243. }} ,
					{ 427 ,  {84. }} ,
					{ 430 ,  {140. }} ,
					{ 431 ,  {220. }} ,
					{ 435 ,  {321. }} ,
					{ 436 ,  {336. }} ,
					{ 437 ,  {288. }} ,
					{ 440 ,  {332. }} ,
					{ 441 ,  {306. }} ,
					{ 445 ,  {275. }} ,
					{ 447 ,  {258. }} ,
					{ 449 ,  {261. }} ,
					{ 450 ,  {264. }} ,
					{ 452 ,  {242. }} ,
					{ 453 ,  {237. }} ,
					{ 456 ,  {257. }} ,
					{ 457 ,  {274. }} ,
					{ 459 ,  {310. }} ,
					{ 460 ,  {308. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_10 <= 0.4516777843236923) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_4 <= -0.15921565890312195) ? ( (scaler_output_5 <= -1.8833969831466675) ? ( (scaler_output_8 <= 0.21196657605469227) ? ( (scaler_output_11 <= -0.607932448387146) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) : ( (scaler_output_11 <= -0.6946570873260498) ? ( (scaler_output_4 <= -0.26255134493112564) ? ( (scaler_output_8 <= 0.09243909735232592) ? ( (scaler_output_4 <= -0.8251567184925079) ? ( (scaler_output_7 <= -0.9697276381775737) ? ( 16 ) : ( (scaler_output_11 <= -0.954831063747406) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_4 <= -0.6414488404989243) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_7 <= 0.20960897952318192) ? ( (scaler_output_10 <= -0.8340450525283813) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) : ( (scaler_output_4 <= -0.21662437170743942) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_8 <= 0.3314940482378006) ? ( (scaler_output_8 <= 0.2518090605735779) ? ( (scaler_output_11 <= -0.434483140707016) ? ( (scaler_output_10 <= 0.06128799996804446) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( (scaler_output_10 <= -0.4790898106293753) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) : ( 43 ) ) : ( (scaler_output_4 <= -0.5495948791503906) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_2 <= 0.06981269270181656) ? ( (scaler_output_8 <= 0.21196657605469227) ? ( (scaler_output_4 <= -1.249981164932251) ? ( 50 ) : ( 51 ) ) : ( 52 ) ) : ( (scaler_output_2 <= 0.41582661867141724) ? ( 54 ) : ( (scaler_output_2 <= 0.9540705233812332) ? ( 56 ) : ( 57 ) ) ) ) ) ) ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( 59 ) : ( 60 ) ) ) : ( (scaler_output_11 <= 0.30267641693353653) ? ( (scaler_output_8 <= -0.505198284983635) ? ( (scaler_output_8 <= -1.341890573501587) ? ( (scaler_output_10 <= 0.351041316986084) ? ( (scaler_output_2 <= 0.10825868509709835) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) : ( (scaler_output_10 <= 0.359082967042923) ? ( (scaler_output_2 <= -0.1608632653951645) ? ( (scaler_output_6 <= -0.9836219847202301) ? ( 72 ) : ( (scaler_output_9 <= 0.30546460300683975) ? ( 74 ) : ( 75 ) ) ) : ( (scaler_output_11 <= -0.7380194067955017) ? ( 77 ) : ( 78 ) ) ) : ( 79 ) ) ) : ( (scaler_output_4 <= -0.9859010875225067) ? ( (scaler_output_6 <= -1.2556583285331726) ? ( (scaler_output_10 <= -1.0109635442495346) ? ( (scaler_output_8 <= -0.14661585073918104) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) : ( (scaler_output_10 <= -1.4989989399909973) ? ( 88 ) : ( 89 ) ) ) : ( (scaler_output_10 <= -0.6190283298492432) ? ( (scaler_output_8 <= -0.18645834177732468) ? ( (scaler_output_10 <= -0.7661082744598389) ? ( 93 ) : ( 94 ) ) : ( (scaler_output_5 <= 0.03978462517261505) ? ( 96 ) : ( 97 ) ) ) : ( (scaler_output_5 <= 0.2890859581530094) ? ( (scaler_output_6 <= -0.2104661539196968) ? ( (scaler_output_10 <= -0.5078784078359604) ? ( 101 ) : ( 102 ) ) : ( (scaler_output_4 <= -0.38885051012039185) ? ( 104 ) : ( 105 ) ) ) : ( 106 ) ) ) ) ) : ( (scaler_output_7 <= 0.8253399729728699) ? ( (scaler_output_4 <= -0.28551482409238815) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_9 <= 0.4690779745578766) ? ( (scaler_output_10 <= -0.5324465334415436) ? ( 112 ) : ( 113 ) ) : ( 114 ) ) : ( (scaler_output_8 <= -1.4215756058692932) ? ( 116 ) : ( 117 ) ) ) : ( (scaler_output_9 <= 0.24703125655651093) ? ( 119 ) : ( 120 ) ) ) : ( (scaler_output_10 <= 0.2204427644610405) ? ( (scaler_output_7 <= 0.9589112401008606) ? ( 123 ) : ( 124 ) ) : ( 125 ) ) ) ) ) : ( (scaler_output_10 <= -0.2439785972237587) ? ( (scaler_output_7 <= -2.1230015754699707) ? ( (scaler_output_4 <= -1.1007184982299805) ? ( 129 ) : ( 130 ) ) : ( (scaler_output_6 <= -1.0552105009555817) ? ( (scaler_output_7 <= -1.7385769486427307) ? ( (scaler_output_6 <= -1.7424601316452026) ? ( 134 ) : ( 135 ) ) : ( (scaler_output_9 <= -1.5682980418205261) ? ( (scaler_output_5 <= -0.886191725730896) ? ( 138 ) : ( 139 ) ) : ( (scaler_output_11 <= -2.2123385667800903) ? ( 141 ) : ( 142 ) ) ) ) : ( (scaler_output_6 <= 0.17611177265644073) ? ( (scaler_output_11 <= 0.38940105587244034) ? ( (scaler_output_6 <= 0.018617066321894526) ? ( (scaler_output_10 <= -1.5580146312713623) ? ( (scaler_output_9 <= -1.3813113570213318) ? ( 148 ) : ( 149 ) ) : ( (scaler_output_4 <= -1.4566525220870972) ? ( (scaler_output_11 <= -0.434483140707016) ? ( 152 ) : ( 153 ) ) : ( (scaler_output_6 <= -0.13887763768434525) ? ( (scaler_output_5 <= -1.0998785495758057) ? ( (scaler_output_10 <= -0.6855394095182419) ? ( 157 ) : ( 158 ) ) : ( (scaler_output_7 <= -1.4616608619689941) ? ( 160 ) : ( (scaler_output_2 <= 0.9540704786777496) ? ( (scaler_output_2 <= 0.18515066802501678) ? ( (scaler_output_4 <= -1.0547915399074554) ? ( 164 ) : ( 165 ) ) : ( 166 ) ) : ( 167 ) ) ) ) : ( 168 ) ) ) ) : ( (scaler_output_5 <= -1.028649628162384) ? ( 170 ) : ( 171 ) ) ) : ( (scaler_output_6 <= -0.12455993611365557) ? ( (scaler_output_2 <= -0.9297831058502197) ? ( 174 ) : ( 175 ) ) : ( (scaler_output_6 <= 0.03293476905673742) ? ( 177 ) : ( 178 ) ) ) ) : ( (scaler_output_4 <= -1.1122002601623535) ? ( 180 ) : ( (scaler_output_7 <= 0.17051495239138603) ? ( (scaler_output_7 <= -0.04124438762664795) ? ( (scaler_output_7 <= -0.14549513719975948) ? ( (scaler_output_11 <= 0.34603869915008545) ? ( 185 ) : ( 186 ) ) : ( 187 ) ) : ( (scaler_output_2 <= -0.0839712917804718) ? ( 189 ) : ( 190 ) ) ) : ( (scaler_output_8 <= 0.7299189567565918) ? ( (scaler_output_7 <= 0.40833698958158493) ? ( 193 ) : ( (scaler_output_10 <= -0.45821118354797363) ? ( (scaler_output_10 <= -0.651034876704216) ? ( 196 ) : ( 197 ) ) : ( 198 ) ) ) : ( (scaler_output_4 <= -0.7447845041751862) ? ( 200 ) : ( (scaler_output_9 <= -0.31782444566488266) ? ( (scaler_output_7 <= 0.34643809497356415) ? ( 203 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_9 <= -0.707380086183548) ? ( 206 ) : ( 207 ) ) : ( 208 ) ) ) : ( (scaler_output_10 <= -1.0257400423288345) ? ( 210 ) : ( 211 ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_11 <= 0.17258942872285843) ? ( (scaler_output_4 <= -0.2510695941746235) ? ( (scaler_output_8 <= 1.566611260175705) ? ( (scaler_output_7 <= -0.3572544753551483) ? ( 216 ) : ( 217 ) ) : ( 218 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 220 ) : ( 221 ) ) ) : ( (scaler_output_9 <= -1.0112335085868835) ? ( 223 ) : ( (scaler_output_7 <= 0.07277987897396088) ? ( 225 ) : ( 226 ) ) ) ) ) ) : ( (scaler_output_8 <= -0.70441073179245) ? ( (scaler_output_2 <= -0.007079288363456726) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 230 ) : ( (scaler_output_4 <= -0.15921565890312195) ? ( 232 ) : ( (scaler_output_8 <= -1.5809455513954163) ? ( 234 ) : ( 235 ) ) ) ) : ( (scaler_output_5 <= -0.6012759208679199) ? ( 237 ) : ( (scaler_output_10 <= 0.48898811638355255) ? ( 239 ) : ( (scaler_output_10 <= 1.0920120477676392) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( 242 ) : ( 243 ) ) : ( (scaler_output_4 <= -0.30847831815481186) ? ( (scaler_output_10 <= 1.7833896279335022) ? ( 246 ) : ( 247 ) ) : ( 248 ) ) ) ) ) ) : ( (scaler_output_10 <= 0.5037015527486801) ? ( (scaler_output_6 <= 1.7367411255836487) ? ( (scaler_output_8 <= 0.012754112482070923) ? ( 252 ) : ( 253 ) ) : ( 254 ) ) : ( (scaler_output_7 <= -0.3996063470840454) ? ( (scaler_output_8 <= 1.0885013937950134) ? ( (scaler_output_9 <= -0.7190667390823364) ? ( 258 ) : ( (scaler_output_11 <= 0.042502447962760925) ? ( 260 ) : ( 261 ) ) ) : ( 262 ) ) : ( (scaler_output_4 <= -0.12477042898535728) ? ( (scaler_output_2 <= 0.4927186071872711) ? ( 265 ) : ( (scaler_output_10 <= 0.9129258990287781) ? ( (scaler_output_7 <= 0.8481448590755463) ? ( 268 ) : ( 269 ) ) : ( (scaler_output_5 <= -0.18577370047569275) ? ( 271 ) : ( 272 ) ) ) ) : ( (scaler_output_8 <= -0.027088388800621033) ? ( 274 ) : ( (scaler_output_2 <= 1.1463004648685455) ? ( 276 ) : ( (scaler_output_6 <= 2.3667200803756714) ? ( 278 ) : ( 279 ) ) ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.4597100019454956) ? ( (scaler_output_11 <= 0.5194880366325378) ? ( (scaler_output_4 <= 0.7019150257110596) ? ( (scaler_output_10 <= 0.9063842594623566) ? ( (scaler_output_7 <= 0.9556534290313721) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_11 <= -0.08758453093469143) ? ( (scaler_output_10 <= -0.024389535188674927) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_2 <= -0.31464723497629166) ? ( (scaler_output_5 <= -1.2779509723186493) ? ( 291 ) : ( 292 ) ) : ( (scaler_output_8 <= 0.5705489963293076) ? ( 294 ) : ( 295 ) ) ) : ( 296 ) ) : ( (scaler_output_6 <= -0.09592455625534058) ? ( 298 ) : ( 299 ) ) ) : ( (scaler_output_4 <= 0.3919079750776291) ? ( (scaler_output_10 <= -0.039509743452072144) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( 303 ) : ( 304 ) ) : ( (scaler_output_7 <= -0.7970623075962067) ? ( 306 ) : ( 307 ) ) ) : ( (scaler_output_6 <= -0.6543148458003998) ? ( 309 ) : ( (scaler_output_7 <= 0.5484239161014557) ? ( (scaler_output_6 <= -0.32500774413347244) ? ( 312 ) : ( (scaler_output_4 <= 0.4607984274625778) ? ( 314 ) : ( 315 ) ) ) : ( 316 ) ) ) ) ) : ( (scaler_output_7 <= 0.8123086392879486) ? ( 318 ) : ( 319 ) ) ) : ( (scaler_output_5 <= 0.7876885831356049) ? ( (scaler_output_8 <= 0.012754112482070923) ? ( 322 ) : ( (scaler_output_5 <= 0.14662803709506989) ? ( 324 ) : ( 325 ) ) ) : ( (scaler_output_7 <= 1.4475866556167603) ? ( 327 ) : ( 328 ) ) ) ) : ( (scaler_output_5 <= 0.7876886278390884) ? ( (scaler_output_4 <= 0.32301752269268036) ? ( (scaler_output_2 <= 0.454272598028183) ? ( 332 ) : ( 333 ) ) : ( 334 ) ) : ( (scaler_output_4 <= 0.4607984125614166) ? ( 336 ) : ( 337 ) ) ) ) : ( (scaler_output_11 <= -0.434483140707016) ? ( (scaler_output_11 <= -1.0415557026863098) ? ( 340 ) : ( (scaler_output_11 <= -0.781381756067276) ? ( (scaler_output_6 <= -0.3679608404636383) ? ( 343 ) : ( (scaler_output_2 <= -1.1220130324363708) ? ( 345 ) : ( 346 ) ) ) : ( (scaler_output_7 <= -0.6993272602558136) ? ( 348 ) : ( (scaler_output_4 <= 1.207111656665802) ? ( (scaler_output_4 <= 0.9659950733184814) ? ( 351 ) : ( 352 ) ) : ( 353 ) ) ) ) ) : ( (scaler_output_11 <= -0.3043961673974991) ? ( (scaler_output_7 <= -0.38657499104738235) ? ( 356 ) : ( (scaler_output_6 <= -0.4252316504716873) ? ( 358 ) : ( 359 ) ) ) : ( (scaler_output_4 <= 1.2760021090507507) ? ( (scaler_output_10 <= -1.083932101726532) ? ( 362 ) : ( (scaler_output_10 <= -0.8830830454826355) ? ( 364 ) : ( (scaler_output_7 <= 1.2684056758880615) ? ( (scaler_output_10 <= 0.1766851246356964) ? ( (scaler_output_6 <= 0.004299372434616089) ? ( 368 ) : ( 369 ) ) : ( (scaler_output_8 <= -0.6645682603120804) ? ( 371 ) : ( 372 ) ) ) : ( 373 ) ) ) ) : ( (scaler_output_7 <= -0.21390968188643456) ? ( 375 ) : ( (scaler_output_2 <= 0.41582660377025604) ? ( 377 ) : ( 378 ) ) ) ) ) ) ) : ( (scaler_output_9 <= 3.5660452842712402) ? ( (scaler_output_8 <= -0.9434657096862793) ? ( (scaler_output_11 <= 1.0831982791423798) ? ( (scaler_output_7 <= 0.9263329058885574) ? ( (scaler_output_8 <= -1.4215756058692932) ? ( 384 ) : ( 385 ) ) : ( 386 ) ) : ( (scaler_output_4 <= 1.0922942757606506) ? ( (scaler_output_8 <= -1.3418906331062317) ? ( 389 ) : ( (scaler_output_7 <= 0.098842553794384) ? ( 391 ) : ( 392 ) ) ) : ( (scaler_output_8 <= -1.740315556526184) ? ( 394 ) : ( (scaler_output_9 <= 1.5130870640277863) ? ( 396 ) : ( 397 ) ) ) ) ) : ( (scaler_output_5 <= 1.143833339214325) ? ( (scaler_output_4 <= 0.15079138055443764) ? ( 400 ) : ( (scaler_output_7 <= -0.536435455083847) ? ( 402 ) : ( (scaler_output_2 <= 0.6849485859274864) ? ( (scaler_output_4 <= 0.7593237161636353) ? ( 405 ) : ( (scaler_output_7 <= -0.42892687022686005) ? ( 407 ) : ( (scaler_output_11 <= 1.6035461723804474) ? ( (scaler_output_11 <= 0.8663866519927979) ? ( 410 ) : ( (scaler_output_6 <= 1.622199535369873) ? ( 412 ) : ( 413 ) ) ) : ( 414 ) ) ) ) : ( 415 ) ) ) ) : ( (scaler_output_4 <= 1.2530386447906494) ? ( (scaler_output_6 <= -0.024336040019989014) ? ( 418 ) : ( (scaler_output_5 <= 1.3219057321548462) ? ( 420 ) : ( (scaler_output_2 <= 0.4927185922861099) ? ( 422 ) : ( 423 ) ) ) ) : ( (scaler_output_11 <= 2.29734343290329) ? ( 425 ) : ( 426 ) ) ) ) ) : ( 427 ) ) ) : ( (scaler_output_5 <= -0.9930351674556732) ? ( (scaler_output_7 <= 1.9981609284877777) ? ( 430 ) : ( 431 ) ) : ( (scaler_output_6 <= -0.4538670480251312) ? ( (scaler_output_7 <= -0.4647630751132965) ? ( (scaler_output_8 <= -0.4653557986021042) ? ( 435 ) : ( 436 ) ) : ( 437 ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( (scaler_output_11 <= 0.996473640203476) ? ( 440 ) : ( 441 ) ) : ( (scaler_output_5 <= 1.6068215370178223) ? ( (scaler_output_4 <= 2.378249406814575) ? ( (scaler_output_6 <= 0.07588786259293556) ? ( 445 ) : ( (scaler_output_11 <= 0.9964736104011536) ? ( 447 ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 449 ) : ( 450 ) ) ) ) : ( (scaler_output_8 <= 0.012754112482070923) ? ( 452 ) : ( 453 ) ) ) : ( (scaler_output_6 <= 0.11884097754955292) ? ( (scaler_output_4 <= 1.861570954322815) ? ( 456 ) : ( 457 ) ) : ( (scaler_output_4 <= 2.286395490169525) ? ( 459 ) : ( 460 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_14
		
	
		namespace EXT_SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {116. }} ,
					{ 8 ,  {101. }} ,
					{ 12 ,  {77. }} ,
					{ 14 ,  {70. }} ,
					{ 15 ,  {68. }} ,
					{ 18 ,  {55. }} ,
					{ 19 ,  {53. }} ,
					{ 21 ,  {63. }} ,
					{ 22 ,  {65. }} ,
					{ 24 ,  {96. }} ,
					{ 26 ,  {88. }} ,
					{ 27 ,  {79. }} ,
					{ 31 ,  {74. }} ,
					{ 35 ,  {135. }} ,
					{ 36 ,  {128. }} ,
					{ 38 ,  {140. }} ,
					{ 39 ,  {150. }} ,
					{ 41 ,  {160. }} ,
					{ 42 ,  {190. }} ,
					{ 47 ,  {178. }} ,
					{ 48 ,  {168. }} ,
					{ 49 ,  {200. }} ,
					{ 51 ,  {127. }} ,
					{ 52 ,  {144. }} ,
					{ 54 ,  {216. }} ,
					{ 55 ,  {230. }} ,
					{ 59 ,  {150. }} ,
					{ 64 ,  {78. }} ,
					{ 66 ,  {92. }} ,
					{ 67 ,  {88. }} ,
					{ 68 ,  {44. }} ,
					{ 71 ,  {61. }} ,
					{ 72 ,  {60. }} ,
					{ 75 ,  {54. }} ,
					{ 76 ,  {55. }} ,
					{ 77 ,  {53. }} ,
					{ 80 ,  {135. }} ,
					{ 82 ,  {104. }} ,
					{ 83 ,  {107. }} ,
					{ 84 ,  {67. }} ,
					{ 85 ,  {219. }} ,
					{ 89 ,  {132. }} ,
					{ 91 ,  {124. }} ,
					{ 92 ,  {127. }} ,
					{ 94 ,  {83. }} ,
					{ 95 ,  {97. }} ,
					{ 97 ,  {160. }} ,
					{ 98 ,  {177. }} ,
					{ 103 ,  {143. }} ,
					{ 106 ,  {104. }} ,
					{ 107 ,  {99. }} ,
					{ 108 ,  {90. }} ,
					{ 109 ,  {45. }} ,
					{ 113 ,  {77. }} ,
					{ 115 ,  {85. }} ,
					{ 116 ,  {90. }} ,
					{ 119 ,  {75. }} ,
					{ 120 ,  {65. }} ,
					{ 124 ,  {37. }} ,
					{ 126 ,  {40. }} ,
					{ 127 ,  {42. }} ,
					{ 128 ,  {48. }} ,
					{ 131 ,  {52. }} ,
					{ 132 ,  {51. }} ,
					{ 134 ,  {61. }} ,
					{ 135 ,  {60. }} ,
					{ 138 ,  {96. }} ,
					{ 139 ,  {92. }} ,
					{ 142 ,  {72. }} ,
					{ 144 ,  {81. }} ,
					{ 145 ,  {80. }} ,
					{ 147 ,  {63. }} ,
					{ 148 ,  {49. }} ,
					{ 153 ,  {96. }} ,
					{ 154 ,  {118. }} ,
					{ 156 ,  {152. }} ,
					{ 158 ,  {168. }} ,
					{ 159 ,  {179. }} ,
					{ 161 ,  {91. }} ,
					{ 163 ,  {64. }} ,
					{ 164 ,  {59. }} ,
					{ 169 ,  {60. }} ,
					{ 170 ,  {49. }} ,
					{ 174 ,  {72. }} ,
					{ 175 ,  {71. }} ,
					{ 177 ,  {66. }} ,
					{ 178 ,  {65. }} ,
					{ 181 ,  {84. }} ,
					{ 182 ,  {87. }} ,
					{ 183 ,  {73. }} ,
					{ 184 ,  {102. }} ,
					{ 185 ,  {158. }} ,
					{ 186 ,  {253. }} ,
					{ 191 ,  {170. }} ,
					{ 192 ,  {187. }} ,
					{ 193 ,  {210. }} ,
					{ 195 ,  {52. }} ,
					{ 198 ,  {172. }} ,
					{ 199 ,  {201. }} ,
					{ 203 ,  {95. }} ,
					{ 204 ,  {103. }} ,
					{ 205 ,  {78. }} ,
					{ 209 ,  {121. }} ,
					{ 210 ,  {90. }} ,
					{ 212 ,  {141. }} ,
					{ 214 ,  {147. }} ,
					{ 215 ,  {145. }} ,
					{ 217 ,  {167. }} ,
					{ 218 ,  {175. }} ,
					{ 221 ,  {113. }} ,
					{ 222 ,  {144. }} ,
					{ 226 ,  {182. }} ,
					{ 227 ,  {191. }} ,
					{ 228 ,  {91. }} ,
					{ 231 ,  {257. }} ,
					{ 232 ,  {263. }} ,
					{ 234 ,  {244. }} ,
					{ 235 ,  {237. }} ,
					{ 245 ,  {214. }} ,
					{ 246 ,  {225. }} ,
					{ 248 ,  {233. }} ,
					{ 250 ,  {252. }} ,
					{ 251 ,  {249. }} ,
					{ 252 ,  {292. }} ,
					{ 253 ,  {317. }} ,
					{ 258 ,  {206. }} ,
					{ 260 ,  {200. }} ,
					{ 261 ,  {198. }} ,
					{ 262 ,  {173. }} ,
					{ 264 ,  {281. }} ,
					{ 265 ,  {242. }} ,
					{ 267 ,  {52. }} ,
					{ 271 ,  {173. }} ,
					{ 272 ,  {180. }} ,
					{ 273 ,  {164. }} ,
					{ 274 ,  {150. }} ,
					{ 279 ,  {101. }} ,
					{ 280 ,  {94. }} ,
					{ 281 ,  {68. }} ,
					{ 282 ,  {137. }} ,
					{ 291 ,  {131. }} ,
					{ 292 ,  {126. }} ,
					{ 293 ,  {144. }} ,
					{ 295 ,  {156. }} ,
					{ 296 ,  {164. }} ,
					{ 297 ,  {94. }} ,
					{ 300 ,  {202. }} ,
					{ 301 ,  {245. }} ,
					{ 303 ,  {107. }} ,
					{ 305 ,  {168. }} ,
					{ 306 ,  {179. }} ,
					{ 307 ,  {262. }} ,
					{ 312 ,  {221. }} ,
					{ 313 ,  {220. }} ,
					{ 314 ,  {235. }} ,
					{ 315 ,  {196. }} ,
					{ 317 ,  {311. }} ,
					{ 318 ,  {277. }} ,
					{ 321 ,  {122. }} ,
					{ 324 ,  {84. }} ,
					{ 325 ,  {91. }} ,
					{ 326 ,  {100. }} ,
					{ 330 ,  {209. }} ,
					{ 331 ,  {212. }} ,
					{ 332 ,  {259. }} ,
					{ 334 ,  {131. }} ,
					{ 335 ,  {120. }} ,
					{ 339 ,  {185. }} ,
					{ 340 ,  {200. }} ,
					{ 345 ,  {85. }} ,
					{ 347 ,  {74. }} ,
					{ 348 ,  {69. }} ,
					{ 350 ,  {78. }} ,
					{ 352 ,  {90. }} ,
					{ 354 ,  {95. }} ,
					{ 355 ,  {99. }} ,
					{ 358 ,  {102. }} ,
					{ 359 ,  {109. }} ,
					{ 360 ,  {134. }} ,
					{ 362 ,  {170. }} ,
					{ 363 ,  {143. }} ,
					{ 366 ,  {196. }} ,
					{ 367 ,  {202. }} ,
					{ 368 ,  {219. }} ,
					{ 372 ,  {171. }} ,
					{ 374 ,  {163. }} ,
					{ 375 ,  {166. }} ,
					{ 376 ,  {195. }} ,
					{ 379 ,  {257. }} ,
					{ 381 ,  {150. }} ,
					{ 382 ,  {129. }} ,
					{ 385 ,  {273. }} ,
					{ 388 ,  {197. }} ,
					{ 390 ,  {246. }} ,
					{ 392 ,  {236. }} ,
					{ 394 ,  {230. }} ,
					{ 395 ,  {232. }} ,
					{ 397 ,  {241. }} ,
					{ 398 ,  {248. }} ,
					{ 400 ,  {297. }} ,
					{ 401 ,  {281. }} ,
					{ 405 ,  {151. }} ,
					{ 406 ,  {178. }} ,
					{ 410 ,  {259. }} ,
					{ 412 ,  {281. }} ,
					{ 414 ,  {275. }} ,
					{ 415 ,  {277. }} ,
					{ 416 ,  {332. }} ,
					{ 419 ,  {186. }} ,
					{ 420 ,  {180. }} ,
					{ 426 ,  {215. }} ,
					{ 427 ,  {217. }} ,
					{ 428 ,  {220. }} ,
					{ 429 ,  {233. }} ,
					{ 431 ,  {220. }} ,
					{ 433 ,  {242. }} ,
					{ 434 ,  {252. }} ,
					{ 435 ,  {268. }} ,
					{ 438 ,  {306. }} ,
					{ 441 ,  {279. }} ,
					{ 442 ,  {275. }} ,
					{ 444 ,  {261. }} ,
					{ 446 ,  {263. }} ,
					{ 447 ,  {264. }} ,
					{ 449 ,  {270. }} ,
					{ 451 ,  {321. }} ,
					{ 453 ,  {336. }} ,
					{ 454 ,  {346. }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= -0.012311428901739419) ? ( (scaler_output_4 <= 0.1852366104722023) ? ( (scaler_output_7 <= 2.307655453681946) ? ( (scaler_output_8 <= 0.49086402356624603) ? ( (scaler_output_4 <= -1.2155359387397766) ? ( (scaler_output_4 <= -1.5829516649246216) ? ( (scaler_output_10 <= -1.4989989399909973) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_9 <= -0.5203933715820312) ? ( (scaler_output_8 <= 0.09243909455835819) ? ( (scaler_output_5 <= -1.6340957283973694) ? ( 12 ) : ( (scaler_output_8 <= -0.1067733597010374) ? ( 14 ) : ( 15 ) ) ) : ( (scaler_output_5 <= -1.4560233354568481) ? ( (scaler_output_5 <= -1.9190115332603455) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_7 <= -1.0707205533981323) ? ( 21 ) : ( 22 ) ) ) ) : ( (scaler_output_9 <= -0.13083773106336594) ? ( 24 ) : ( (scaler_output_7 <= -0.494083589874208) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_11 <= -0.8247440755367279) ? ( (scaler_output_4 <= -0.9055289030075073) ? ( 31 ) : ( (scaler_output_4 <= -0.4003322422504425) ? ( (scaler_output_10 <= -0.5601608902215958) ? ( (scaler_output_6 <= 0.23338258266448975) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_7 <= -1.3965041041374207) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_10 <= -0.4102309122681618) ? ( 41 ) : ( 42 ) ) ) ) : ( (scaler_output_6 <= -0.3393254429101944) ? ( (scaler_output_6 <= -0.7402210533618927) ? ( (scaler_output_7 <= -0.9176022410392761) ? ( (scaler_output_8 <= -0.14661585073918104) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) : ( (scaler_output_4 <= -0.6758940517902374) ? ( 51 ) : ( 52 ) ) ) : ( (scaler_output_6 <= 0.7917729318141937) ? ( 54 ) : ( 55 ) ) ) ) : ( (scaler_output_2 <= 0.6080565750598907) ? ( (scaler_output_5 <= 0.8233030736446381) ? ( (scaler_output_8 <= -1.3817331194877625) ? ( 59 ) : ( (scaler_output_11 <= 0.43276339769363403) ? ( (scaler_output_9 <= -0.47364669293165207) ? ( (scaler_output_4 <= -0.09032520651817322) ? ( (scaler_output_10 <= -1.332528755068779) ? ( 64 ) : ( (scaler_output_11 <= -0.6512947976589203) ? ( 66 ) : ( 67 ) ) ) : ( 68 ) ) : ( (scaler_output_6 <= -0.7402210533618927) ? ( (scaler_output_7 <= -0.5071149170398712) ? ( 71 ) : ( 72 ) ) : ( (scaler_output_10 <= -0.4992281198501587) ? ( (scaler_output_4 <= -0.6988575458526611) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) ) ) : ( (scaler_output_4 <= -0.12477043643593788) ? ( (scaler_output_6 <= 0.04725247621536255) ? ( 80 ) : ( (scaler_output_10 <= -0.36575955152511597) ? ( 82 ) : ( 83 ) ) ) : ( 84 ) ) ) ) : ( 85 ) ) : ( (scaler_output_8 <= -0.22630083560943604) ? ( (scaler_output_8 <= -0.38567081093788147) ? ( (scaler_output_10 <= -0.7358774989843369) ? ( 89 ) : ( (scaler_output_7 <= -0.6146235018968582) ? ( 91 ) : ( 92 ) ) ) : ( (scaler_output_2 <= 0.83873251080513) ? ( 94 ) : ( 95 ) ) ) : ( (scaler_output_11 <= 0.6062126997858286) ? ( 97 ) : ( 98 ) ) ) ) ) ) : ( (scaler_output_10 <= -0.7661082744598389) ? ( (scaler_output_10 <= -1.690198540687561) ? ( (scaler_output_8 <= 1.885351300239563) ? ( (scaler_output_7 <= -1.4584030508995056) ? ( 103 ) : ( (scaler_output_10 <= -1.9486954808235168) ? ( (scaler_output_8 <= 0.8096039593219757) ? ( 106 ) : ( 107 ) ) : ( 108 ) ) ) : ( 109 ) ) : ( (scaler_output_2 <= 0.06981269456446171) ? ( (scaler_output_2 <= -1.5833649635314941) ? ( (scaler_output_8 <= 0.8892889618873596) ? ( 113 ) : ( (scaler_output_7 <= -0.885023906826973) ? ( 115 ) : ( 116 ) ) ) : ( (scaler_output_11 <= -1.9088022112846375) ? ( (scaler_output_4 <= -0.9859010875225067) ? ( 119 ) : ( 120 ) ) : ( (scaler_output_4 <= -0.8021932244300842) ? ( (scaler_output_8 <= 1.3673988580703735) ? ( (scaler_output_10 <= -1.1503134965896606) ? ( 124 ) : ( (scaler_output_6 <= -1.484741449356079) ? ( 126 ) : ( 127 ) ) ) : ( 128 ) ) : ( (scaler_output_11 <= -1.301729679107666) ? ( (scaler_output_10 <= -1.2413150072097778) ? ( 131 ) : ( 132 ) ) : ( (scaler_output_5 <= -0.5300469622015953) ? ( 134 ) : ( 135 ) ) ) ) ) ) : ( (scaler_output_7 <= -0.11617461033165455) ? ( (scaler_output_6 <= 0.20474718208424747) ? ( 138 ) : ( 139 ) ) : ( (scaler_output_11 <= -0.0008598752319812775) ? ( (scaler_output_6 <= 0.23338257055729628) ? ( 142 ) : ( (scaler_output_6 <= 0.6915489882230759) ? ( 144 ) : ( 145 ) ) ) : ( (scaler_output_11 <= 0.3460387233644724) ? ( 147 ) : ( 148 ) ) ) ) ) ) : ( (scaler_output_11 <= -0.694657102227211) ? ( (scaler_output_6 <= 0.36224187910556793) ? ( (scaler_output_10 <= -0.7113083302974701) ? ( (scaler_output_8 <= 1.606453776359558) ? ( 153 ) : ( 154 ) ) : ( (scaler_output_8 <= 0.690076470375061) ? ( 156 ) : ( (scaler_output_5 <= -0.5300469622015953) ? ( 158 ) : ( 159 ) ) ) ) : ( (scaler_output_10 <= -0.6321826577186584) ? ( 161 ) : ( (scaler_output_4 <= -0.423295721411705) ? ( 163 ) : ( 164 ) ) ) ) : ( (scaler_output_11 <= 0.823024332523346) ? ( (scaler_output_5 <= 1.1794478297233582) ? ( (scaler_output_4 <= -1.1351637244224548) ? ( (scaler_output_2 <= -0.3915392179042101) ? ( 169 ) : ( 170 ) ) : ( (scaler_output_8 <= 1.3673988580703735) ? ( (scaler_output_5 <= 0.03978462517261505) ? ( (scaler_output_6 <= 0.0329347625374794) ? ( 174 ) : ( 175 ) ) : ( (scaler_output_6 <= -0.12455993890762329) ? ( 177 ) : ( 178 ) ) ) : ( (scaler_output_11 <= 0.25931409001350403) ? ( (scaler_output_2 <= 0.41582661122083664) ? ( 181 ) : ( 182 ) ) : ( 183 ) ) ) ) : ( 184 ) ) : ( 185 ) ) ) ) ) : ( 186 ) ) : ( (scaler_output_7 <= -0.02169737219810486) ? ( (scaler_output_7 <= -1.0055637955665588) ? ( (scaler_output_10 <= -0.5370636284351349) ? ( (scaler_output_4 <= 0.8626594245433807) ? ( 191 ) : ( 192 ) ) : ( 193 ) ) : ( (scaler_output_7 <= -0.901313066482544) ? ( 195 ) : ( (scaler_output_5 <= -1.4204089045524597) ? ( (scaler_output_2 <= -1.0451210737228394) ? ( 198 ) : ( 199 ) ) : ( (scaler_output_2 <= -0.5453231632709503) ? ( (scaler_output_4 <= 1.3908195495605469) ? ( (scaler_output_6 <= -0.1531953513622284) ? ( 203 ) : ( 204 ) ) : ( 205 ) ) : ( (scaler_output_11 <= -0.261033833026886) ? ( (scaler_output_7 <= -0.49734140932559967) ? ( (scaler_output_7 <= -0.8003201484680176) ? ( 209 ) : ( 210 ) ) : ( (scaler_output_9 <= -0.47364669293165207) ? ( 212 ) : ( (scaler_output_11 <= -0.6512947827577591) ? ( 214 ) : ( 215 ) ) ) ) : ( (scaler_output_4 <= 0.874141126871109) ? ( 217 ) : ( 218 ) ) ) ) ) ) ) : ( (scaler_output_10 <= -1.0533716082572937) ? ( (scaler_output_2 <= 0.06981270015239716) ? ( 221 ) : ( 222 ) ) : ( (scaler_output_5 <= 0.43154387176036835) ? ( (scaler_output_10 <= -0.43594955280423164) ? ( (scaler_output_10 <= -0.8386322855949402) ? ( 226 ) : ( 227 ) ) : ( 228 ) ) : ( (scaler_output_7 <= 0.41159480810165405) ? ( (scaler_output_10 <= -0.6195310652256012) ? ( 231 ) : ( 232 ) ) : ( (scaler_output_4 <= 1.5286005139350891) ? ( 234 ) : ( 235 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.195629894733429) ? ( (scaler_output_5 <= 0.9064035415649414) ? ( (scaler_output_8 <= 0.012754111550748348) ? ( (scaler_output_3 <= 0.04821458458900452) ? ( (scaler_output_8 <= -0.8239382207393646) ? ( (scaler_output_9 <= 2.486976146697998) ? ( (scaler_output_5 <= 0.39592939615249634) ? ( (scaler_output_5 <= -0.518175482749939) ? ( (scaler_output_9 <= 1.1780692636966705) ? ( 245 ) : ( 246 ) ) : ( (scaler_output_8 <= -1.3817331194877625) ? ( 248 ) : ( (scaler_output_8 <= -1.0231506824493408) ? ( 250 ) : ( 251 ) ) ) ) : ( 252 ) ) : ( 253 ) ) : ( (scaler_output_4 <= 0.5641341060400009) ? ( (scaler_output_8 <= -0.18645834177732468) ? ( (scaler_output_2 <= 1.2231924533843994) ? ( (scaler_output_8 <= -0.5051982700824738) ? ( 258 ) : ( (scaler_output_11 <= -0.08758452534675598) ? ( 260 ) : ( 261 ) ) ) : ( 262 ) ) : ( (scaler_output_7 <= 0.1607414335012436) ? ( 264 ) : ( 265 ) ) ) : ( (scaler_output_2 <= -0.3530932143330574) ? ( 267 ) : ( (scaler_output_5 <= 0.004170157015323639) ? ( (scaler_output_6 <= 1.2356216311454773) ? ( (scaler_output_9 <= 0.5976313501596451) ? ( 271 ) : ( 272 ) ) : ( 273 ) ) : ( 274 ) ) ) ) ) : ( (scaler_output_2 <= -1.5064729452133179) ? ( (scaler_output_9 <= 1.8636871576309204) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( (scaler_output_11 <= -0.17430918477475643) ? ( 279 ) : ( 280 ) ) : ( 281 ) ) : ( 282 ) ) : ( (scaler_output_6 <= 0.5054188817739487) ? ( (scaler_output_4 <= 0.09338266775012016) ? ( (scaler_output_11 <= 1.7336331605911255) ? ( (scaler_output_7 <= 0.023912331089377403) ? ( (scaler_output_11 <= 1.0398359298706055) ? ( (scaler_output_5 <= -0.06705877184867859) ? ( (scaler_output_4 <= -0.021434754133224487) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 291 ) : ( 292 ) ) : ( 293 ) ) : ( (scaler_output_8 <= -1.2622056007385254) ? ( 295 ) : ( 296 ) ) ) : ( 297 ) ) : ( (scaler_output_11 <= -0.39112080447375774) ? ( (scaler_output_7 <= 0.12490524910390377) ? ( 300 ) : ( 301 ) ) : ( (scaler_output_11 <= 0.432763384655118) ? ( 303 ) : ( (scaler_output_7 <= 0.5907757729291916) ? ( 305 ) : ( 306 ) ) ) ) ) : ( 307 ) ) : ( (scaler_output_11 <= 1.0398359596729279) ? ( (scaler_output_6 <= 0.39087727665901184) ? ( (scaler_output_7 <= 0.2063511461019516) ? ( (scaler_output_11 <= -0.2176714837551117) ? ( 312 ) : ( 313 ) ) : ( 314 ) ) : ( 315 ) ) : ( (scaler_output_11 <= 1.4300969243049622) ? ( 317 ) : ( 318 ) ) ) ) : ( (scaler_output_10 <= 0.4039204567670822) ? ( (scaler_output_6 <= 0.577007383108139) ? ( 321 ) : ( (scaler_output_11 <= 1.7336331605911255) ? ( (scaler_output_2 <= 0.14670467749238014) ? ( 324 ) : ( 325 ) ) : ( 326 ) ) ) : ( (scaler_output_7 <= 1.2749213576316833) ? ( (scaler_output_11 <= 0.47612570226192474) ? ( (scaler_output_9 <= 1.0845759212970734) ? ( 330 ) : ( 331 ) ) : ( 332 ) ) : ( (scaler_output_5 <= 0.3840579017996788) ? ( 334 ) : ( 335 ) ) ) ) ) ) ) : ( (scaler_output_6 <= 2.023095190525055) ? ( (scaler_output_6 <= -0.3965962529182434) ? ( (scaler_output_11 <= -0.04422220587730408) ? ( 339 ) : ( 340 ) ) : ( (scaler_output_2 <= 1.1847464442253113) ? ( (scaler_output_8 <= 1.4869263172149658) ? ( (scaler_output_10 <= 0.7076313942670822) ? ( (scaler_output_5 <= -0.6131474077701569) ? ( 345 ) : ( (scaler_output_5 <= -0.15015923604369164) ? ( 347 ) : ( 348 ) ) ) : ( (scaler_output_5 <= -1.1829789876937866) ? ( 350 ) : ( (scaler_output_4 <= -0.5725583806633949) ? ( 352 ) : ( (scaler_output_5 <= -0.3875890523195267) ? ( 354 ) : ( 355 ) ) ) ) ) : ( (scaler_output_5 <= -0.03144432604312897) ? ( (scaler_output_7 <= 0.06300636380910873) ? ( 358 ) : ( 359 ) ) : ( 360 ) ) ) : ( (scaler_output_6 <= 1.3931163549423218) ? ( 362 ) : ( 363 ) ) ) ) : ( (scaler_output_11 <= -0.2610338404774666) ? ( (scaler_output_11 <= -0.521207794547081) ? ( 366 ) : ( 367 ) ) : ( 368 ) ) ) ) : ( (scaler_output_2 <= 0.14670467749238014) ? ( (scaler_output_5 <= 1.713664948940277) ? ( (scaler_output_2 <= -1.0451210737228394) ? ( 372 ) : ( (scaler_output_4 <= 0.17375484108924866) ? ( 374 ) : ( 375 ) ) ) : ( 376 ) ) : ( (scaler_output_6 <= 0.004299364984035492) ? ( (scaler_output_2 <= 0.8771785199642181) ? ( 379 ) : ( (scaler_output_7 <= -0.024955205619335175) ? ( 381 ) : ( 382 ) ) ) : ( (scaler_output_11 <= 1.5601838827133179) ? ( (scaler_output_2 <= 0.8387325406074524) ? ( 385 ) : ( (scaler_output_6 <= 1.2069861888885498) ? ( (scaler_output_4 <= 0.12782789766788483) ? ( 388 ) : ( (scaler_output_7 <= -0.16504215449094772) ? ( 390 ) : ( (scaler_output_11 <= -0.04422219097614288) ? ( 392 ) : ( (scaler_output_8 <= -0.9434657096862793) ? ( 394 ) : ( 395 ) ) ) ) ) : ( (scaler_output_4 <= -0.30847831815481186) ? ( 397 ) : ( 398 ) ) ) ) : ( (scaler_output_6 <= 0.605642780661583) ? ( 400 ) : ( 401 ) ) ) ) ) ) : ( (scaler_output_4 <= 1.7582352757453918) ? ( (scaler_output_10 <= 0.4289030283689499) ? ( (scaler_output_9 <= 0.30546460300683975) ? ( 405 ) : ( 406 ) ) : ( (scaler_output_6 <= 0.39087727665901184) ? ( (scaler_output_2 <= 1.1463004350662231) ? ( (scaler_output_8 <= -1.302048146724701) ? ( 410 ) : ( (scaler_output_5 <= 1.143833339214325) ? ( 412 ) : ( (scaler_output_10 <= 1.3373650312423706) ? ( 414 ) : ( 415 ) ) ) ) : ( 416 ) ) : ( (scaler_output_10 <= 0.8273775577545166) ? ( (scaler_output_4 <= 1.49415522813797) ? ( 419 ) : ( 420 ) ) : ( (scaler_output_11 <= 2.4274303913116455) ? ( (scaler_output_2 <= -0.1608632504940033) ? ( (scaler_output_8 <= 0.33149405010044575) ? ( (scaler_output_7 <= 2.9527069330215454) ? ( (scaler_output_4 <= 1.3104473948478699) ? ( 426 ) : ( 427 ) ) : ( 428 ) ) : ( 429 ) ) : ( (scaler_output_9 <= 1.1352181434631348) ? ( 431 ) : ( (scaler_output_5 <= 1.630564570426941) ? ( 433 ) : ( 434 ) ) ) ) : ( 435 ) ) ) ) ) : ( (scaler_output_4 <= 2.13713276386261) ? ( (scaler_output_8 <= -1.1825206279754639) ? ( 438 ) : ( (scaler_output_5 <= 0.5740017518401146) ? ( (scaler_output_5 <= -0.3401030972599983) ? ( 441 ) : ( 442 ) ) : ( (scaler_output_3 <= 0.04821458458900452) ? ( 444 ) : ( (scaler_output_7 <= 0.020654499530792236) ? ( 446 ) : ( 447 ) ) ) ) ) : ( (scaler_output_8 <= -1.1028356552124023) ? ( 449 ) : ( (scaler_output_4 <= 2.2863954305648804) ? ( 451 ) : ( (scaler_output_4 <= 2.883445978164673) ? ( 453 ) : ( 454 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				EXT_SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable = lAggregatedTable;
	
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/diabetes.csv");
	return 0;
}
