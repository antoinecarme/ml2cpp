// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor_Pipeline
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_Pipeline_RandomReg_10.exe ml2cpp-demo_RandomForestRegressor_Pipeline_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.16680947298137394 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( -0.16351271994443456 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.19149292241003152 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.058384844753055345 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.09933205162122274 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.21293121660488037 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.047865568690029614 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.05078698959084227 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -0.1913199225908187 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.19940405677473352 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.16680947298137394 ) / 1.0289835997047314 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - -0.16351271994443456 ) / 0.9915812535046814 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.19149292241003152 ) / 0.9321147629147756 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.058384844753055345 ) / 1.0855729329506805 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.09933205162122274 ) / 1.0743904412882828 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.21293121660488037 ) / 0.9358074381886248 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.047865568690029614 ) / 1.1363574090613386 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.05078698959084227 ) / 0.9725457460098452 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -0.1913199225908187 ) / 1.1415974677936562 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.19940405677473352 ) / 0.882245682091319 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace EXT_SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-351.38429309 }} ,
					{ 7 ,  {-459.03067075 }} ,
					{ 10 ,  {-223.26828856 }} ,
					{ 12 ,  {-251.2683419 }} ,
					{ 13 ,  {-237.150375 }} ,
					{ 14 ,  {-298.79907559 }} ,
					{ 16 ,  {-268.19043239 }} ,
					{ 19 ,  {-130.20856672 }} ,
					{ 21 ,  {-182.68535868 }} ,
					{ 22 ,  {-165.64587305 }} ,
					{ 26 ,  {-67.71218597 }} ,
					{ 27 ,  {-80.36713173 }} ,
					{ 28 ,  {-97.81389434 }} ,
					{ 31 ,  {-6.19072274 }} ,
					{ 32 ,  {-9.61795807 }} ,
					{ 33 ,  {3.07608881 }} ,
					{ 35 ,  {133.87071389 }} ,
					{ 36 ,  {-1.77890863 }} ,
					{ 40 ,  {-154.40083699 }} ,
					{ 42 ,  {-284.89041043 }} ,
					{ 43 ,  {-230.73613628 }} ,
					{ 44 ,  {-9.18516091 }} ,
					{ 50 ,  {-27.42654029 }} ,
					{ 51 ,  {-32.37006064 }} ,
					{ 54 ,  {38.71263785 }} ,
					{ 55 ,  {26.98702516 }} ,
					{ 56 ,  {62.64480581 }} ,
					{ 58 ,  {131.03680508 }} ,
					{ 59 ,  {113.44087953 }} ,
					{ 62 ,  {239.63425512 }} ,
					{ 63 ,  {248.55956548 }} ,
					{ 65 ,  {58.89206445 }} ,
					{ 66 ,  {156.7480822 }} ,
					{ 69 ,  {250.1827601 }} ,
					{ 71 ,  {191.55215494 }} ,
					{ 72 ,  {156.85798347 }} ,
					{ 74 ,  {310.60889078 }} ,
					{ 75 ,  {349.42168234 }} ,
					{ 80 ,  {60.83005802 }} ,
					{ 81 ,  {58.56592202 }} ,
					{ 82 ,  {23.51174878 }} ,
					{ 83 ,  {116.88919618 }} ,
					{ 87 ,  {259.87552026 }} ,
					{ 88 ,  {325.07388162 }} ,
					{ 90 ,  {228.58868552 }} ,
					{ 91 ,  {194.40871671 }} ,
					{ 93 ,  {447.69098355 }} ,
					{ 95 ,  {393.26109279 }} ,
					{ 97 ,  {351.37130796 }} ,
					{ 98 ,  {360.61572443 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_6 <= -0.3798469603061676) ? ( (scaler_output_8 <= 1.5122901797294617) ? ( (scaler_output_9 <= -0.4780315011739731) ? ( (scaler_output_7 <= -1.0161686539649963) ? ( (scaler_output_2 <= -0.5081993937492371) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_9 <= -1.0901395678520203) ? ( (scaler_output_4 <= -0.1294427588582039) ? ( 10 ) : ( (scaler_output_7 <= 1.4971961379051208) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) ) : ( (scaler_output_3 <= -1.761682391166687) ? ( 16 ) : ( (scaler_output_4 <= -0.5235208421945572) ? ( (scaler_output_8 <= -0.4097907096147537) ? ( 19 ) : ( (scaler_output_9 <= -0.1147889755666256) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_11 <= 0.29752183705568314) ? ( (scaler_output_7 <= 0.27129679918289185) ? ( (scaler_output_3 <= -0.01516065001487732) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) : ( (scaler_output_5 <= 0.11539097875356674) ? ( (scaler_output_4 <= 0.11750050261616707) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) ) ) ) : ( (scaler_output_7 <= 0.44283455703407526) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_8 <= -0.3954513967037201) ? ( (scaler_output_7 <= 0.20878371968865395) ? ( (scaler_output_2 <= -0.5859893262386322) ? ( 40 ) : ( (scaler_output_5 <= -0.5036529749631882) ? ( 42 ) : ( 43 ) ) ) : ( 44 ) ) : ( (scaler_output_4 <= 1.0448696315288544) ? ( (scaler_output_3 <= 0.12294390052556992) ? ( (scaler_output_10 <= 0.12877562269568443) ? ( (scaler_output_5 <= -0.9548004269599915) ? ( (scaler_output_7 <= 1.7172324061393738) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_9 <= 0.9318417310714722) ? ( (scaler_output_9 <= 0.20240862667560577) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (scaler_output_5 <= 0.7718487083911896) ? ( 58 ) : ( 59 ) ) ) : ( (scaler_output_3 <= 0.4348759800195694) ? ( (scaler_output_9 <= 0.9255155026912689) ? ( 62 ) : ( 63 ) ) : ( (scaler_output_7 <= 0.9218187816441059) ? ( 65 ) : ( 66 ) ) ) ) : ( (scaler_output_3 <= 0.8193405121564865) ? ( (scaler_output_4 <= 1.4368491768836975) ? ( 69 ) : ( (scaler_output_11 <= 1.0262231901288033) ? ( 71 ) : ( 72 ) ) ) : ( (scaler_output_2 <= -0.031503140926361084) ? ( 74 ) : ( 75 ) ) ) ) ) ) : ( (scaler_output_2 <= -0.4683295339345932) ? ( (scaler_output_10 <= 1.5136516094207764) ? ( (scaler_output_10 <= 1.2387386560440063) ? ( (scaler_output_5 <= -0.703867718577385) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( 83 ) ) : ( (scaler_output_7 <= 0.5281001180410385) ? ( (scaler_output_7 <= -0.8354119956493378) ? ( (scaler_output_10 <= 1.361190915107727) ? ( 87 ) : ( 88 ) ) : ( (scaler_output_7 <= -0.2301299124956131) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_8 <= -0.3801072183996439) ? ( 93 ) : ( (scaler_output_4 <= -0.2438624408096075) ? ( 95 ) : ( (scaler_output_3 <= -0.4509758800268173) ? ( 97 ) : ( 98 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_0
		
	
		namespace EXT_SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-210.3549175 }} ,
					{ 6 ,  {-165.64587305 }} ,
					{ 7 ,  {-284.89041043 }} ,
					{ 8 ,  {-53.5585581 }} ,
					{ 10 ,  {-351.38429309 }} ,
					{ 12 ,  {-459.03067075 }} ,
					{ 13 ,  {-422.390294 }} ,
					{ 17 ,  {-9.18516091 }} ,
					{ 20 ,  {-130.20856672 }} ,
					{ 23 ,  {-168.02760852 }} ,
					{ 24 ,  {-154.40083699 }} ,
					{ 25 ,  {-182.33200566 }} ,
					{ 26 ,  {-251.2683419 }} ,
					{ 31 ,  {-80.36713173 }} ,
					{ 32 ,  {-20.2700101 }} ,
					{ 36 ,  {-1.77890863 }} ,
					{ 37 ,  {3.07608881 }} ,
					{ 38 ,  {-6.19072274 }} ,
					{ 40 ,  {26.98702516 }} ,
					{ 42 ,  {37.34665341 }} ,
					{ 43 ,  {38.71263785 }} ,
					{ 44 ,  {-223.26828856 }} ,
					{ 46 ,  {156.85798347 }} ,
					{ 47 ,  {144.42445426 }} ,
					{ 51 ,  {11.97984848 }} ,
					{ 52 ,  {23.51174878 }} ,
					{ 54 ,  {-32.37006064 }} ,
					{ 55 ,  {-27.42654029 }} ,
					{ 59 ,  {-20.42352874 }} ,
					{ 60 ,  {-8.54151458 }} ,
					{ 61 ,  {-33.33701473 }} ,
					{ 65 ,  {62.64480581 }} ,
					{ 66 ,  {116.88919618 }} ,
					{ 69 ,  {133.87071389 }} ,
					{ 70 ,  {58.89206445 }} ,
					{ 76 ,  {259.87552026 }} ,
					{ 78 ,  {250.1827601 }} ,
					{ 79 ,  {248.55956548 }} ,
					{ 80 ,  {228.58868552 }} ,
					{ 82 ,  {277.98128451 }} ,
					{ 83 ,  {310.60889078 }} ,
					{ 85 ,  {320.68265233 }} ,
					{ 86 ,  {316.51213779 }} ,
					{ 87 ,  {191.55215494 }} ,
					{ 89 ,  {239.63425512 }} ,
					{ 92 ,  {393.26109279 }} ,
					{ 93 ,  {360.61572443 }} ,
					{ 94 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.9428369104862213) ? ( (scaler_output_7 <= -1.2679385542869568) ? ( (scaler_output_10 <= 0.4619877189397812) ? ( (scaler_output_4 <= -0.20682822167873383) ? ( (scaler_output_2 <= -0.1339108943939209) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_7 <= -1.0613932013511658) ? ( 10 ) : ( (scaler_output_9 <= -0.34047882817685604) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_10 <= -0.17482367157936096) ? ( (scaler_output_8 <= -0.245400108397007) ? ( (scaler_output_8 <= -1.0984260439872742) ? ( 17 ) : ( (scaler_output_8 <= -0.36704882979393005) ? ( (scaler_output_6 <= -0.15566031634807587) ? ( 20 ) : ( (scaler_output_10 <= -0.6856398582458496) ? ( (scaler_output_9 <= -0.7582036070525646) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) : ( 26 ) ) ) : ( (scaler_output_4 <= 0.8959313333034515) ? ( (scaler_output_10 <= -0.24197456985712051) ? ( (scaler_output_7 <= -0.24570775404572487) ? ( (scaler_output_3 <= 1.9200956523418427) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_4 <= 0.1282102670520544) ? ( (scaler_output_3 <= 0.5154055804014206) ? ( (scaler_output_4 <= -0.5519738886505365) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) : ( (scaler_output_4 <= 0.31030669808387756) ? ( 40 ) : ( (scaler_output_11 <= -0.47358690202236176) ? ( 42 ) : ( 43 ) ) ) ) ) : ( 44 ) ) : ( (scaler_output_10 <= -1.1479481905698776) ? ( 46 ) : ( 47 ) ) ) ) : ( (scaler_output_5 <= -0.7398846447467804) ? ( (scaler_output_7 <= 1.213316410779953) ? ( (scaler_output_5 <= -0.9330978095531464) ? ( 51 ) : ( 52 ) ) : ( (scaler_output_11 <= -0.16868747025728226) ? ( 54 ) : ( 55 ) ) ) : ( (scaler_output_6 <= -0.7899761199951172) ? ( (scaler_output_5 <= 0.8231121003627777) ? ( (scaler_output_11 <= -0.4450569748878479) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( (scaler_output_2 <= 0.6652275621891022) ? ( (scaler_output_5 <= -0.22441939264535904) ? ( (scaler_output_11 <= 1.015782043337822) ? ( 65 ) : ( 66 ) ) : ( (scaler_output_4 <= 0.14913317561149597) ? ( (scaler_output_6 <= 0.34851768612861633) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_2 <= 0.35938650369644165) ? ( (scaler_output_5 <= 0.611094057559967) ? ( (scaler_output_3 <= 1.0422756373882294) ? ( (scaler_output_5 <= 0.39662427455186844) ? ( (scaler_output_7 <= -0.17169252038002014) ? ( 76 ) : ( (scaler_output_6 <= 0.20129265297146048) ? ( 78 ) : ( 79 ) ) ) : ( 80 ) ) : ( (scaler_output_7 <= 0.3793104439973831) ? ( 82 ) : ( 83 ) ) ) : ( (scaler_output_2 <= -0.6103813648223877) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (scaler_output_8 <= 0.33084998838603497) ? ( 89 ) : ( (scaler_output_2 <= 1.781028002500534) ? ( (scaler_output_5 <= 0.30066297948360443) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_1
		
	
		namespace EXT_SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-422.390294 }} ,
					{ 9 ,  {-298.79907559 }} ,
					{ 10 ,  {-305.67509721 }} ,
					{ 11 ,  {-223.26828856 }} ,
					{ 14 ,  {-181.51172981 }} ,
					{ 15 ,  {-182.33200566 }} ,
					{ 16 ,  {-165.64587305 }} ,
					{ 19 ,  {-268.19043239 }} ,
					{ 21 ,  {-101.20974879 }} ,
					{ 22 ,  {-130.20856672 }} ,
					{ 25 ,  {-20.2700101 }} ,
					{ 26 ,  {-33.10367735 }} ,
					{ 27 ,  {-53.5585581 }} ,
					{ 32 ,  {-97.81389434 }} ,
					{ 34 ,  {-182.68535868 }} ,
					{ 35 ,  {-154.40083699 }} ,
					{ 36 ,  {-9.18516091 }} ,
					{ 39 ,  {26.98702516 }} ,
					{ 43 ,  {-27.42654029 }} ,
					{ 45 ,  {-33.33701473 }} ,
					{ 46 ,  {-32.37006064 }} ,
					{ 47 ,  {-1.77890863 }} ,
					{ 48 ,  {23.51174878 }} ,
					{ 53 ,  {60.83005802 }} ,
					{ 54 ,  {58.89206445 }} ,
					{ 55 ,  {38.71263785 }} ,
					{ 56 ,  {-8.54151458 }} ,
					{ 57 ,  {156.7480822 }} ,
					{ 59 ,  {320.68265233 }} ,
					{ 60 ,  {290.7091541 }} ,
					{ 64 ,  {191.55215494 }} ,
					{ 66 ,  {156.85798347 }} ,
					{ 67 ,  {144.42445426 }} ,
					{ 68 ,  {259.87552026 }} ,
					{ 70 ,  {447.69098355 }} ,
					{ 71 ,  {316.51213779 }} ,
					{ 77 ,  {62.64480581 }} ,
					{ 78 ,  {58.56592202 }} ,
					{ 79 ,  {113.44087953 }} ,
					{ 80 ,  {198.97164294 }} ,
					{ 82 ,  {228.58868552 }} ,
					{ 83 ,  {325.07388162 }} ,
					{ 86 ,  {277.98128451 }} ,
					{ 87 ,  {243.63801062 }} ,
					{ 89 ,  {393.26109279 }} ,
					{ 90 ,  {360.61572443 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_9 <= 0.8095761239528656) ? ( (scaler_output_4 <= 0.9782909452915192) ? ( (scaler_output_7 <= 0.014573076623491943) ? ( (scaler_output_9 <= 0.04512178339064121) ? ( (scaler_output_6 <= -0.4225664883852005) ? ( (scaler_output_10 <= -0.785129614174366) ? ( 6 ) : ( (scaler_output_7 <= -0.5945745632052422) ? ( (scaler_output_11 <= -1.0792132019996643) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) : ( (scaler_output_2 <= -0.0845283567905426) ? ( (scaler_output_6 <= 0.28809135407209396) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) ) : ( (scaler_output_6 <= -0.44942520558834076) ? ( (scaler_output_5 <= 0.08530177175998688) ? ( 19 ) : ( (scaler_output_2 <= 0.03444671630859375) ? ( 21 ) : ( 22 ) ) ) : ( (scaler_output_10 <= -0.11592283844947815) ? ( (scaler_output_9 <= 0.3410375714302063) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_output_10 <= 1.399146854877472) ? ( (scaler_output_8 <= -0.27082373201847076) ? ( (scaler_output_4 <= 0.5875247269868851) ? ( (scaler_output_8 <= -1.393473967909813) ? ( 32 ) : ( (scaler_output_9 <= -0.10682657733559608) ? ( 34 ) : ( 35 ) ) ) : ( 36 ) ) : ( (scaler_output_3 <= -0.35706889629364014) ? ( (scaler_output_10 <= -0.997508317232132) ? ( 39 ) : ( (scaler_output_10 <= 1.0577508509159088) ? ( (scaler_output_3 <= -0.5415234118700027) ? ( (scaler_output_3 <= -1.5242506563663483) ? ( 43 ) : ( (scaler_output_11 <= -0.7995853126049042) ? ( 45 ) : ( 46 ) ) ) : ( 47 ) ) : ( 48 ) ) ) : ( (scaler_output_2 <= 0.4506669342517853) ? ( (scaler_output_11 <= 0.07688005268573761) ? ( (scaler_output_4 <= 0.24203167110681534) ? ( (scaler_output_5 <= -0.4109376072883606) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) ) ) : ( (scaler_output_2 <= 0.0832970142364502) ? ( 59 ) : ( 60 ) ) ) ) : ( (scaler_output_6 <= 0.4129885137081146) ? ( (scaler_output_10 <= 0.601702518761158) ? ( (scaler_output_3 <= -0.1904040426015854) ? ( 64 ) : ( (scaler_output_10 <= -1.1479481905698776) ? ( 66 ) : ( 67 ) ) ) : ( 68 ) ) : ( (scaler_output_9 <= -0.9551796019077301) ? ( 70 ) : ( 71 ) ) ) ) : ( (scaler_output_7 <= 0.262357197701931) ? ( (scaler_output_10 <= 1.239126980304718) ? ( (scaler_output_8 <= 0.8141590803861618) ? ( (scaler_output_5 <= 0.5256486088037491) ? ( (scaler_output_3 <= 0.6007898077368736) ? ( 77 ) : ( 78 ) ) : ( 79 ) ) : ( 80 ) ) : ( (scaler_output_3 <= 0.35453518183203414) ? ( 82 ) : ( 83 ) ) ) : ( (scaler_output_8 <= 0.23263979703187943) ? ( (scaler_output_2 <= 0.18456709384918213) ? ( 86 ) : ( 87 ) ) : ( (scaler_output_9 <= 1.2210365533828735) ? ( 89 ) : ( 90 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_2
		
	
		namespace EXT_SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-459.03067075 }} ,
					{ 5 ,  {-305.67509721 }} ,
					{ 9 ,  {-210.3549175 }} ,
					{ 11 ,  {-230.73613628 }} ,
					{ 12 ,  {-223.26828856 }} ,
					{ 13 ,  {-182.33200566 }} ,
					{ 16 ,  {-101.20974879 }} ,
					{ 17 ,  {-130.20856672 }} ,
					{ 18 ,  {-53.5585581 }} ,
					{ 23 ,  {-251.2683419 }} ,
					{ 24 ,  {-182.68535868 }} ,
					{ 26 ,  {-97.81389434 }} ,
					{ 27 ,  {-154.40083699 }} ,
					{ 29 ,  {-181.51172981 }} ,
					{ 33 ,  {3.07608881 }} ,
					{ 34 ,  {-1.77890863 }} ,
					{ 36 ,  {-6.19072274 }} ,
					{ 37 ,  {-9.61795807 }} ,
					{ 39 ,  {58.89206445 }} ,
					{ 40 ,  {37.34665341 }} ,
					{ 44 ,  {-20.42352874 }} ,
					{ 46 ,  {23.51174878 }} ,
					{ 47 ,  {60.83005802 }} ,
					{ 49 ,  {116.88919618 }} ,
					{ 50 ,  {133.87071389 }} ,
					{ 52 ,  {320.68265233 }} ,
					{ 54 ,  {360.61572443 }} ,
					{ 55 ,  {393.26109279 }} ,
					{ 57 ,  {-298.79907559 }} ,
					{ 61 ,  {-67.71218597 }} ,
					{ 62 ,  {-9.18516091 }} ,
					{ 65 ,  {62.64480581 }} ,
					{ 67 ,  {131.03680508 }} ,
					{ 68 ,  {113.44087953 }} ,
					{ 70 ,  {351.37130796 }} ,
					{ 72 ,  {191.55215494 }} ,
					{ 73 ,  {250.1827601 }} ,
					{ 79 ,  {259.87552026 }} ,
					{ 80 ,  {248.55956548 }} ,
					{ 81 ,  {235.32017089 }} ,
					{ 82 ,  {290.7091541 }} ,
					{ 84 ,  {194.40871671 }} ,
					{ 85 ,  {156.85798347 }} ,
					{ 89 ,  {310.60889078 }} ,
					{ 90 ,  {316.51213779 }} ,
					{ 91 ,  {325.07388162 }} ,
					{ 92 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.4185757488012314) ? ( (scaler_output_7 <= -0.09774368163198233) ? ( (scaler_output_6 <= -0.929365485906601) ? ( (scaler_output_9 <= -0.3917820304632187) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_9 <= 0.10032571479678154) ? ( (scaler_output_3 <= -0.00482979416847229) ? ( (scaler_output_7 <= -1.8714837431907654) ? ( 9 ) : ( (scaler_output_3 <= -1.6025041937828064) ? ( 11 ) : ( 12 ) ) ) : ( 13 ) ) : ( (scaler_output_6 <= -0.44942520558834076) ? ( (scaler_output_7 <= -0.965292364358902) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) ) : ( (scaler_output_10 <= 0.1501882653683424) ? ( (scaler_output_8 <= -0.2280818521976471) ? ( (scaler_output_6 <= -0.8422871381044388) ? ( (scaler_output_10 <= -0.11746279336512089) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_4 <= 0.1363144456408918) ? ( 26 ) : ( 27 ) ) ) : ( (scaler_output_7 <= 0.02638519264291972) ? ( 29 ) : ( (scaler_output_10 <= -0.3739514797925949) ? ( (scaler_output_10 <= -0.6252661347389221) ? ( (scaler_output_11 <= 0.6175484657287598) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_9 <= 1.0640915930271149) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_4 <= 0.03051869571208954) ? ( 39 ) : ( 40 ) ) ) ) ) : ( (scaler_output_9 <= 0.569673478603363) ? ( (scaler_output_11 <= -0.06553857028484344) ? ( (scaler_output_8 <= 0.2822574842721224) ? ( 44 ) : ( (scaler_output_3 <= -0.05193650722503662) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_8 <= 0.10476219654083252) ? ( 49 ) : ( 50 ) ) ) : ( (scaler_output_8 <= 0.31986553873866796) ? ( 52 ) : ( (scaler_output_3 <= 0.5443774610757828) ? ( 54 ) : ( 55 ) ) ) ) ) ) : ( (scaler_output_6 <= -1.6506281197071075) ? ( 57 ) : ( (scaler_output_3 <= -0.030735751381143928) ? ( (scaler_output_8 <= -0.3158585727214813) ? ( (scaler_output_7 <= -0.4931046664714813) ? ( 61 ) : ( 62 ) ) : ( (scaler_output_4 <= 0.6720361113548279) ? ( (scaler_output_10 <= 0.11964179947972298) ? ( 65 ) : ( (scaler_output_10 <= 0.1618170216679573) ? ( 67 ) : ( 68 ) ) ) : ( (scaler_output_3 <= -0.9811828434467316) ? ( 70 ) : ( (scaler_output_7 <= 0.4530588686466217) ? ( 72 ) : ( 73 ) ) ) ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_4 <= 1.4766360521316528) ? ( (scaler_output_10 <= 1.3090230226516724) ? ( (scaler_output_2 <= 1.0226135179400444) ? ( (scaler_output_5 <= -0.020113304257392883) ? ( 79 ) : ( 80 ) ) : ( 81 ) ) : ( 82 ) ) : ( (scaler_output_2 <= 0.6149096935987473) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_2 <= 1.6469647884368896) ? ( (scaler_output_6 <= 1.2226697206497192) ? ( (scaler_output_11 <= 0.7123488038778305) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) : ( 92 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_3
		
	
		namespace EXT_SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {-459.03067075 }} ,
					{ 8 ,  {-230.73613628 }} ,
					{ 9 ,  {-210.3549175 }} ,
					{ 10 ,  {-284.89041043 }} ,
					{ 13 ,  {-101.20974879 }} ,
					{ 14 ,  {-103.03861457 }} ,
					{ 16 ,  {-186.24037603 }} ,
					{ 17 ,  {-165.64587305 }} ,
					{ 19 ,  {-351.38429309 }} ,
					{ 21 ,  {-268.19043239 }} ,
					{ 22 ,  {-298.79907559 }} ,
					{ 25 ,  {235.32017089 }} ,
					{ 26 ,  {259.87552026 }} ,
					{ 28 ,  {-53.5585581 }} ,
					{ 29 ,  {-20.2700101 }} ,
					{ 35 ,  {-237.150375 }} ,
					{ 36 ,  {-182.68535868 }} ,
					{ 38 ,  {-140.83123535 }} ,
					{ 39 ,  {-130.20856672 }} ,
					{ 42 ,  {-80.36713173 }} ,
					{ 43 ,  {-49.96946031 }} ,
					{ 45 ,  {44.29871811 }} ,
					{ 46 ,  {-6.19072274 }} ,
					{ 50 ,  {26.98702516 }} ,
					{ 51 ,  {38.71263785 }} ,
					{ 54 ,  {-9.18516091 }} ,
					{ 55 ,  {-9.61795807 }} ,
					{ 56 ,  {8.92365624 }} ,
					{ 58 ,  {156.85798347 }} ,
					{ 59 ,  {144.42445426 }} ,
					{ 63 ,  {58.56592202 }} ,
					{ 64 ,  {116.88919618 }} ,
					{ 67 ,  {-33.33701473 }} ,
					{ 68 ,  {-32.37006064 }} ,
					{ 70 ,  {-8.54151458 }} ,
					{ 71 ,  {11.97984848 }} ,
					{ 75 ,  {23.51174878 }} ,
					{ 77 ,  {62.64480581 }} ,
					{ 78 ,  {60.83005802 }} ,
					{ 80 ,  {320.68265233 }} ,
					{ 81 ,  {250.1827601 }} ,
					{ 85 ,  {349.42168234 }} ,
					{ 86 ,  {290.7091541 }} ,
					{ 89 ,  {191.55215494 }} ,
					{ 90 ,  {156.7480822 }} ,
					{ 91 ,  {239.63425512 }} ,
					{ 93 ,  {393.26109279 }} ,
					{ 94 ,  {360.61572443 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_3 <= 0.2923084795475006) ? ( (scaler_output_4 <= -1.8589808344841003) ? ( 3 ) : ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_7 <= -1.5423945784568787) ? ( (scaler_output_2 <= 0.33083289861679077) ? ( (scaler_output_4 <= -1.277140498161316) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) : ( (scaler_output_4 <= -0.6605803668498993) ? ( (scaler_output_11 <= 0.1635812520980835) ? ( 13 ) : ( 14 ) ) : ( (scaler_output_3 <= -0.23836174979805946) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_4 <= -0.3683353364467621) ? ( 19 ) : ( (scaler_output_3 <= -1.11715629696846) ? ( 21 ) : ( 22 ) ) ) ) ) : ( (scaler_output_3 <= 1.0411626994609833) ? ( (scaler_output_7 <= -1.2324949502944946) ? ( 25 ) : ( 26 ) ) : ( (scaler_output_3 <= 2.247633934020996) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_10 <= 0.0016293618828058243) ? ( (scaler_output_4 <= 0.17639855295419693) ? ( (scaler_output_3 <= 0.435245156288147) ? ( (scaler_output_6 <= -0.9659329354763031) ? ( (scaler_output_10 <= -0.665274964645505) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_2 <= 1.0031894892454147) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_7 <= -0.11824488639831543) ? ( (scaler_output_4 <= -0.1819013273343444) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_8 <= -0.3709051162004471) ? ( 45 ) : ( 46 ) ) ) ) : ( (scaler_output_3 <= 0.08869194984436035) ? ( (scaler_output_2 <= 0.18364668637514114) ? ( (scaler_output_3 <= -0.6278005093336105) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_7 <= 0.6116381287574768) ? ( (scaler_output_9 <= 0.9769949615001678) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (scaler_output_10 <= -1.1479481905698776) ? ( 58 ) : ( 59 ) ) ) ) : ( (scaler_output_4 <= -0.7241815030574799) ? ( (scaler_output_4 <= -1.2308654189109802) ? ( (scaler_output_4 <= -1.8556938171386719) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_3 <= 0.19140076637268066) ? ( (scaler_output_3 <= -0.7114358246326447) ? ( 67 ) : ( 68 ) ) : ( (scaler_output_2 <= -1.4582566022872925) ? ( 70 ) : ( 71 ) ) ) ) : ( (scaler_output_2 <= -0.07108019292354584) ? ( (scaler_output_11 <= 0.1936997026205063) ? ( (scaler_output_3 <= -0.4290520027279854) ? ( 75 ) : ( (scaler_output_7 <= -0.11557619273662567) ? ( 77 ) : ( 78 ) ) ) : ( (scaler_output_2 <= -1.3823789954185486) ? ( 80 ) : ( 81 ) ) ) : ( (scaler_output_9 <= 0.8856830894947052) ? ( (scaler_output_9 <= -1.1331683099269867) ? ( (scaler_output_2 <= 0.9949109703302383) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_9 <= 0.36650839261710644) ? ( (scaler_output_7 <= 0.5033256709575653) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) : ( (scaler_output_5 <= 0.30066297948360443) ? ( 93 ) : ( 94 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_4
		
	
		namespace EXT_SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-351.38429309 }} ,
					{ 6 ,  {-422.390294 }} ,
					{ 7 ,  {-165.64587305 }} ,
					{ 11 ,  {-305.67509721 }} ,
					{ 13 ,  {-182.68535868 }} ,
					{ 14 ,  {-223.26828856 }} ,
					{ 18 ,  {-210.3549175 }} ,
					{ 19 ,  {-186.24037603 }} ,
					{ 22 ,  {-130.20856672 }} ,
					{ 23 ,  {-140.83123535 }} ,
					{ 25 ,  {-97.81389434 }} ,
					{ 26 ,  {-103.03861457 }} ,
					{ 29 ,  {-33.10367735 }} ,
					{ 30 ,  {-32.37006064 }} ,
					{ 31 ,  {-1.77890863 }} ,
					{ 35 ,  {-20.2700101 }} ,
					{ 36 ,  {-6.19072274 }} ,
					{ 38 ,  {-53.5585581 }} ,
					{ 39 ,  {-80.36713173 }} ,
					{ 40 ,  {156.7480822 }} ,
					{ 45 ,  {23.51174878 }} ,
					{ 47 ,  {60.83005802 }} ,
					{ 48 ,  {58.56592202 }} ,
					{ 49 ,  {116.88919618 }} ,
					{ 51 ,  {-101.20974879 }} ,
					{ 52 ,  {-33.33701473 }} ,
					{ 53 ,  {393.26109279 }} ,
					{ 58 ,  {-181.51172981 }} ,
					{ 59 ,  {-251.2683419 }} ,
					{ 62 ,  {-27.42654029 }} ,
					{ 63 ,  {-49.96946031 }} ,
					{ 66 ,  {-9.61795807 }} ,
					{ 67 ,  {3.07608881 }} ,
					{ 69 ,  {26.98702516 }} ,
					{ 71 ,  {37.34665341 }} ,
					{ 72 ,  {38.71263785 }} ,
					{ 75 ,  {235.32017089 }} ,
					{ 76 ,  {277.98128451 }} ,
					{ 77 ,  {156.85798347 }} ,
					{ 82 ,  {228.58868552 }} ,
					{ 85 ,  {320.68265233 }} ,
					{ 86 ,  {316.51213779 }} ,
					{ 87 ,  {351.37130796 }} ,
					{ 89 ,  {131.03680508 }} ,
					{ 90 ,  {250.1827601 }} ,
					{ 93 ,  {62.64480581 }} ,
					{ 94 ,  {113.44087953 }} ,
					{ 95 ,  {198.97164294 }} ,
					{ 99 ,  {290.7091541 }} ,
					{ 100 ,  {259.87552026 }} ,
					{ 102 ,  {360.61572443 }} ,
					{ 104 ,  {349.42168234 }} ,
					{ 106 ,  {310.60889078 }} ,
					{ 107 ,  {325.07388162 }} ,
					{ 108 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.007927310187369585) ? ( (scaler_output_10 <= 0.6936891376972198) ? ( (scaler_output_5 <= -1.0870668292045593) ? ( (scaler_output_4 <= -0.7153770923614502) ? ( (scaler_output_7 <= -1.038272887468338) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_3 <= 0.44873759150505066) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_5 <= -0.3190116360783577) ? ( 11 ) : ( (scaler_output_6 <= -1.0834064483642578) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_8 <= 0.4318760186433792) ? ( (scaler_output_2 <= -0.1782253235578537) ? ( (scaler_output_11 <= 0.017364144325256348) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_10 <= -0.38498893193900585) ? ( (scaler_output_5 <= 0.6542628109455109) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_6 <= 0.04927299916744232) ? ( 25 ) : ( 26 ) ) ) ) : ( (scaler_output_3 <= -0.5415234118700027) ? ( (scaler_output_3 <= -0.700309157371521) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) ) : ( (scaler_output_2 <= 0.6017136871814728) ? ( (scaler_output_8 <= 0.6196816712617874) ? ( (scaler_output_11 <= -1.0623801201581955) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_5 <= -0.006446957588195801) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) ) ) : ( (scaler_output_2 <= 0.9415285587310791) ? ( (scaler_output_5 <= 0.2576393336057663) ? ( (scaler_output_7 <= 0.763214111328125) ? ( (scaler_output_3 <= -0.05193650722503662) ? ( 45 ) : ( (scaler_output_10 <= 0.9984680116176605) ? ( 47 ) : ( 48 ) ) ) : ( 49 ) ) : ( (scaler_output_2 <= -0.28413620591163635) ? ( 51 ) : ( 52 ) ) ) : ( 53 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_4 <= 0.8083431720733643) ? ( (scaler_output_11 <= -0.7062302529811859) ? ( (scaler_output_10 <= -0.8930359408259392) ? ( 58 ) : ( 59 ) ) : ( (scaler_output_8 <= -0.023608282208442688) ? ( (scaler_output_5 <= -0.8938660696148872) ? ( 62 ) : ( 63 ) ) : ( (scaler_output_6 <= -0.498374342918396) ? ( (scaler_output_6 <= -0.9099875688552856) ? ( 66 ) : ( 67 ) ) : ( (scaler_output_4 <= 0.31030669808387756) ? ( 69 ) : ( (scaler_output_7 <= 0.6818727813661098) ? ( 71 ) : ( 72 ) ) ) ) ) ) : ( (scaler_output_11 <= 1.1784224212169647) ? ( (scaler_output_4 <= 0.9852233827114105) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) ) : ( (scaler_output_3 <= 0.1847696714103222) ? ( (scaler_output_8 <= 0.12627877946943045) ? ( (scaler_output_7 <= 1.073623538017273) ? ( (scaler_output_7 <= -0.6908875703811646) ? ( 82 ) : ( (scaler_output_6 <= 1.292745053768158) ? ( (scaler_output_3 <= -0.045379811665043235) ? ( 85 ) : ( 86 ) ) : ( 87 ) ) ) : ( (scaler_output_4 <= 0.8606989234685898) ? ( 89 ) : ( 90 ) ) ) : ( (scaler_output_10 <= 0.3452252075076103) ? ( (scaler_output_4 <= 0.6163085401058197) ? ( 93 ) : ( 94 ) ) : ( 95 ) ) ) : ( (scaler_output_6 <= 1.8639472126960754) ? ( (scaler_output_6 <= -0.6538205444812775) ? ( (scaler_output_9 <= -1.1672596335411072) ? ( 99 ) : ( 100 ) ) : ( (scaler_output_6 <= -0.04054573178291321) ? ( 102 ) : ( (scaler_output_10 <= 0.12722483649849892) ? ( 104 ) : ( (scaler_output_9 <= 0.08271008729934692) ? ( 106 ) : ( 107 ) ) ) ) ) : ( 108 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_5
		
	
		namespace EXT_SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-459.03067075 }} ,
					{ 5 ,  {-422.390294 }} ,
					{ 9 ,  {-186.24037603 }} ,
					{ 10 ,  {-210.3549175 }} ,
					{ 12 ,  {-165.64587305 }} ,
					{ 13 ,  {-130.20856672 }} ,
					{ 15 ,  {-101.20974879 }} ,
					{ 16 ,  {-53.5585581 }} ,
					{ 22 ,  {-80.36713173 }} ,
					{ 23 ,  {-97.81389434 }} ,
					{ 24 ,  {-33.33701473 }} ,
					{ 26 ,  {-33.10367735 }} ,
					{ 27 ,  {-1.77890863 }} ,
					{ 29 ,  {-223.26828856 }} ,
					{ 30 ,  {-140.83123535 }} ,
					{ 34 ,  {58.56592202 }} ,
					{ 35 ,  {58.89206445 }} ,
					{ 36 ,  {44.29871811 }} ,
					{ 38 ,  {11.97984848 }} ,
					{ 39 ,  {-8.54151458 }} ,
					{ 44 ,  {-154.40083699 }} ,
					{ 45 ,  {-268.19043239 }} ,
					{ 46 ,  {144.42445426 }} ,
					{ 48 ,  {156.85798347 }} ,
					{ 52 ,  {8.92365624 }} ,
					{ 53 ,  {3.07608881 }} ,
					{ 54 ,  {-9.61795807 }} ,
					{ 56 ,  {26.98702516 }} ,
					{ 58 ,  {38.71263785 }} ,
					{ 59 ,  {37.34665341 }} ,
					{ 62 ,  {-20.42352874 }} ,
					{ 63 ,  {-298.79907559 }} ,
					{ 66 ,  {-27.42654029 }} ,
					{ 67 ,  {113.44087953 }} ,
					{ 71 ,  {62.64480581 }} ,
					{ 74 ,  {198.97164294 }} ,
					{ 76 ,  {133.87071389 }} ,
					{ 77 ,  {131.03680508 }} ,
					{ 79 ,  {191.55215494 }} ,
					{ 82 ,  {248.55956548 }} ,
					{ 83 ,  {235.32017089 }} ,
					{ 85 ,  {277.98128451 }} ,
					{ 86 ,  {259.87552026 }} ,
					{ 87 ,  {360.61572443 }} ,
					{ 91 ,  {349.42168234 }} ,
					{ 92 ,  {351.37130796 }} ,
					{ 93 ,  {310.60889078 }} ,
					{ 95 ,  {479.70721604 }} ,
					{ 96 ,  {447.69098355 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= -0.007927310187369585) ? ( (scaler_output_7 <= -0.6461533010005951) ? ( (scaler_output_3 <= -0.7652519196271896) ? ( (scaler_output_7 <= -1.0065246522426605) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_10 <= 0.4619877189397812) ? ( (scaler_output_2 <= -0.1339108943939209) ? ( (scaler_output_3 <= -0.40754419565200806) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_9 <= 0.13833438977599144) ? ( 12 ) : ( 13 ) ) ) : ( (scaler_output_8 <= 0.668264627456665) ? ( 15 ) : ( 16 ) ) ) ) : ( (scaler_output_3 <= 0.7406691908836365) ? ( (scaler_output_11 <= 0.8753224909305573) ? ( (scaler_output_11 <= -0.1577131673693657) ? ( (scaler_output_10 <= 0.3725809771567583) ? ( (scaler_output_7 <= 0.27129679918289185) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) : ( (scaler_output_8 <= 1.360350862145424) ? ( 26 ) : ( 27 ) ) ) : ( (scaler_output_2 <= 0.07993932068347931) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_7 <= 0.4961199462413788) ? ( (scaler_output_4 <= -0.32653671503067017) ? ( (scaler_output_6 <= 0.12282359600067139) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (scaler_output_9 <= -0.9633224010467529) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (scaler_output_10 <= -0.218040831387043) ? ( (scaler_output_7 <= 0.11110728979110718) ? ( (scaler_output_2 <= -0.11874869093298912) ? ( (scaler_output_5 <= -1.0022778362035751) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (scaler_output_10 <= -1.7344289422035217) ? ( 48 ) : ( (scaler_output_6 <= -0.498374342918396) ? ( (scaler_output_2 <= 0.7049340158700943) ? ( (scaler_output_5 <= -0.4121719039976597) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (scaler_output_10 <= -1.2522475123405457) ? ( 56 ) : ( (scaler_output_10 <= -0.7045877277851105) ? ( 58 ) : ( 59 ) ) ) ) ) ) : ( (scaler_output_6 <= -1.2978788912296295) ? ( (scaler_output_4 <= 0.4416889399290085) ? ( 62 ) : ( 63 ) ) : ( (scaler_output_3 <= -1.2278449535369873) ? ( (scaler_output_3 <= -1.7484225034713745) ? ( 66 ) : ( 67 ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_10 <= 1.4250845313072205) ? ( (scaler_output_5 <= -0.22441939264535904) ? ( 71 ) : ( (scaler_output_4 <= 0.45866164565086365) ? ( (scaler_output_7 <= -0.12150829192250967) ? ( 74 ) : ( (scaler_output_9 <= -1.4972816109657288) ? ( 76 ) : ( 77 ) ) ) : ( (scaler_output_3 <= -0.20189429819583893) ? ( 79 ) : ( (scaler_output_3 <= 0.6417366862297058) ? ( (scaler_output_4 <= 0.6502862125635147) ? ( 82 ) : ( 83 ) ) : ( (scaler_output_11 <= 0.2922990582883358) ? ( 85 ) : ( 86 ) ) ) ) ) ) : ( 87 ) ) : ( (scaler_output_2 <= 1.0470840483903885) ? ( (scaler_output_8 <= 0.06425403617322445) ? ( (scaler_output_6 <= 1.5462496876716614) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) : ( (scaler_output_5 <= 0.4851815402507782) ? ( 95 ) : ( 96 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_6
		
	
		namespace EXT_SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 8 ,  {-230.73613628 }} ,
					{ 9 ,  {-210.3549175 }} ,
					{ 11 ,  {-165.64587305 }} ,
					{ 12 ,  {-186.24037603 }} ,
					{ 13 ,  {-305.67509721 }} ,
					{ 15 ,  {-101.20974879 }} ,
					{ 16 ,  {-53.5585581 }} ,
					{ 18 ,  {-422.390294 }} ,
					{ 20 ,  {-351.38429309 }} ,
					{ 21 ,  {-298.79907559 }} ,
					{ 27 ,  {-223.26828856 }} ,
					{ 28 ,  {-237.150375 }} ,
					{ 30 ,  {-268.19043239 }} ,
					{ 31 ,  {-251.2683419 }} ,
					{ 32 ,  {-182.68535868 }} ,
					{ 37 ,  {-154.40083699 }} ,
					{ 39 ,  {-130.20856672 }} ,
					{ 40 ,  {-140.83123535 }} ,
					{ 41 ,  {-182.33200566 }} ,
					{ 43 ,  {-49.96946031 }} ,
					{ 44 ,  {-97.81389434 }} ,
					{ 47 ,  {-80.36713173 }} ,
					{ 49 ,  {-20.2700101 }} ,
					{ 50 ,  {-33.10367735 }} ,
					{ 52 ,  {-1.77890863 }} ,
					{ 54 ,  {38.71263785 }} ,
					{ 55 ,  {58.89206445 }} ,
					{ 59 ,  {116.88919618 }} ,
					{ 60 ,  {131.03680508 }} ,
					{ 62 ,  {60.83005802 }} ,
					{ 66 ,  {-32.37006064 }} ,
					{ 67 ,  {-33.33701473 }} ,
					{ 68 ,  {-27.42654029 }} ,
					{ 70 ,  {-8.54151458 }} ,
					{ 71 ,  {-20.42352874 }} ,
					{ 73 ,  {133.87071389 }} ,
					{ 74 ,  {290.7091541 }} ,
					{ 78 ,  {62.64480581 }} ,
					{ 79 ,  {-6.19072274 }} ,
					{ 80 ,  {-284.89041043 }} ,
					{ 84 ,  {243.63801062 }} ,
					{ 85 ,  {239.63425512 }} ,
					{ 86 ,  {113.44087953 }} ,
					{ 88 ,  {479.70721604 }} ,
					{ 90 ,  {360.61572443 }} ,
					{ 91 ,  {393.26109279 }} ,
					{ 95 ,  {144.42445426 }} ,
					{ 96 ,  {156.85798347 }} ,
					{ 97 ,  {-9.18516091 }} ,
					{ 101 ,  {194.40871671 }} ,
					{ 102 ,  {191.55215494 }} ,
					{ 104 ,  {259.87552026 }} ,
					{ 105 ,  {235.32017089 }} ,
					{ 107 ,  {277.98128451 }} ,
					{ 110 ,  {316.51213779 }} ,
					{ 111 ,  {325.07388162 }} ,
					{ 112 ,  {349.42168234 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.8083431720733643) ? ( (scaler_output_9 <= 0.7477214932441711) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_10 <= 0.6157704889774323) ? ( (scaler_output_2 <= 0.8830057382583618) ? ( (scaler_output_7 <= -1.5423945784568787) ? ( (scaler_output_5 <= 0.21118897199630737) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_4 <= -0.36963072046637535) ? ( 11 ) : ( 12 ) ) ) : ( 13 ) ) : ( (scaler_output_8 <= 0.668264627456665) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_10 <= -1.154826819896698) ? ( 18 ) : ( (scaler_output_10 <= -0.3970099315047264) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_10 <= -0.01286462601274252) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_5 <= 0.558073453605175) ? ( (scaler_output_9 <= -1.5785094499588013) ? ( (scaler_output_2 <= 0.942356675863266) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_10 <= -0.921132855117321) ? ( 30 ) : ( 31 ) ) ) : ( 32 ) ) : ( (scaler_output_8 <= -0.35871870070695877) ? ( (scaler_output_10 <= -0.22979073598980904) ? ( (scaler_output_10 <= -0.5378560721874237) ? ( (scaler_output_11 <= -0.46111175417900085) ? ( 37 ) : ( (scaler_output_11 <= 0.9132484495639801) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( (scaler_output_7 <= 0.2096768319606781) ? ( 43 ) : ( 44 ) ) ) : ( (scaler_output_7 <= -0.2314622811973095) ? ( (scaler_output_2 <= 0.09337414219044149) ? ( 47 ) : ( (scaler_output_4 <= -0.353750042617321) ? ( 49 ) : ( 50 ) ) ) : ( (scaler_output_6 <= 0.00830504298210144) ? ( 52 ) : ( (scaler_output_9 <= -0.16975223273038864) ? ( 54 ) : ( 55 ) ) ) ) ) ) : ( (scaler_output_5 <= 0.9120454788208008) ? ( (scaler_output_8 <= -0.20171399414539337) ? ( (scaler_output_8 <= -0.8379391580820084) ? ( 59 ) : ( 60 ) ) : ( (scaler_output_7 <= 0.38451874256134033) ? ( 62 ) : ( (scaler_output_3 <= -0.5233330875635147) ? ( (scaler_output_11 <= -0.16868747025728226) ? ( (scaler_output_10 <= 0.4595779590308666) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) : ( (scaler_output_2 <= -0.9520665481686592) ? ( 70 ) : ( 71 ) ) ) ) ) : ( (scaler_output_3 <= 1.0073953568935394) ? ( 73 ) : ( 74 ) ) ) ) ) : ( (scaler_output_10 <= 0.10793066024780273) ? ( (scaler_output_6 <= 0.6046860218048096) ? ( (scaler_output_5 <= -0.07110871747136116) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (scaler_output_8 <= 0.4694274514913559) ? ( (scaler_output_8 <= 0.17236611060798168) ? ( (scaler_output_4 <= -1.0777013897895813) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) : ( (scaler_output_10 <= 0.4302732013165951) ? ( 88 ) : ( (scaler_output_7 <= 1.2881647944450378) ? ( 90 ) : ( 91 ) ) ) ) ) ) : ( (scaler_output_10 <= -0.30469074100255966) ? ( (scaler_output_9 <= 0.4225375894457102) ? ( (scaler_output_11 <= 0.9673760738223791) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) : ( (scaler_output_6 <= 0.3019660413265228) ? ( (scaler_output_8 <= 0.4618576094508171) ? ( (scaler_output_2 <= 0.46027539670467377) ? ( 101 ) : ( 102 ) ) : ( (scaler_output_9 <= -0.11925399303436279) ? ( 104 ) : ( 105 ) ) ) : ( (scaler_output_8 <= -1.489517480134964) ? ( 107 ) : ( (scaler_output_7 <= -0.22929173707962036) ? ( (scaler_output_2 <= 0.472220778465271) ? ( 110 ) : ( 111 ) ) : ( 112 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_7
		
	
		namespace EXT_SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-284.89041043 }} ,
					{ 6 ,  {-230.73613628 }} ,
					{ 9 ,  {-186.24037603 }} ,
					{ 10 ,  {-165.64587305 }} ,
					{ 12 ,  {-103.03861457 }} ,
					{ 13 ,  {-67.71218597 }} ,
					{ 15 ,  {-351.38429309 }} ,
					{ 17 ,  {-298.79907559 }} ,
					{ 18 ,  {-268.19043239 }} ,
					{ 22 ,  {-182.68535868 }} ,
					{ 24 ,  {-223.26828856 }} ,
					{ 25 ,  {-251.2683419 }} ,
					{ 30 ,  {-9.18516091 }} ,
					{ 31 ,  {44.29871811 }} ,
					{ 32 ,  {-140.83123535 }} ,
					{ 35 ,  {-182.33200566 }} ,
					{ 37 ,  {-130.20856672 }} ,
					{ 38 ,  {-154.40083699 }} ,
					{ 40 ,  {-97.81389434 }} ,
					{ 41 ,  {-49.96946031 }} ,
					{ 45 ,  {62.64480581 }} ,
					{ 46 ,  {58.89206445 }} ,
					{ 47 ,  {144.42445426 }} ,
					{ 49 ,  {-80.36713173 }} ,
					{ 53 ,  {-32.37006064 }} ,
					{ 54 ,  {-33.10367735 }} ,
					{ 56 ,  {11.97984848 }} ,
					{ 58 ,  {3.07608881 }} ,
					{ 59 ,  {-1.77890863 }} ,
					{ 61 ,  {37.34665341 }} ,
					{ 62 ,  {26.98702516 }} ,
					{ 64 ,  {-8.54151458 }} ,
					{ 67 ,  {198.97164294 }} ,
					{ 68 ,  {248.55956548 }} ,
					{ 70 ,  {133.87071389 }} ,
					{ 71 ,  {131.03680508 }} ,
					{ 76 ,  {-101.20974879 }} ,
					{ 77 ,  {-53.5585581 }} ,
					{ 81 ,  {60.83005802 }} ,
					{ 82 ,  {58.56592202 }} ,
					{ 83 ,  {23.51174878 }} ,
					{ 84 ,  {-33.33701473 }} ,
					{ 85 ,  {393.26109279 }} ,
					{ 88 ,  {194.40871671 }} ,
					{ 90 ,  {228.58868552 }} ,
					{ 91 ,  {259.87552026 }} ,
					{ 95 ,  {351.37130796 }} ,
					{ 97 ,  {325.07388162 }} ,
					{ 98 ,  {320.68265233 }} ,
					{ 99 ,  {290.7091541 }} ,
					{ 100 ,  {447.69098355 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_7 <= -0.7631610631942749) ? ( (scaler_output_7 <= -1.1942983269691467) ? ( (scaler_output_3 <= -0.7743398547172546) ? ( (scaler_output_5 <= -0.5036529749631882) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= -0.4635252505540848) ? ( (scaler_output_2 <= -0.77400141954422) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_8 <= -0.33373740315437317) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_5 <= -0.9991087764501572) ? ( 15 ) : ( (scaler_output_6 <= -1.7460159659385681) ? ( 17 ) : ( 18 ) ) ) ) : ( (scaler_output_10 <= 0.12877562269568443) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_4 <= -1.232251301407814) ? ( 22 ) : ( (scaler_output_2 <= 0.06618532538414001) ? ( 24 ) : ( 25 ) ) ) : ( (scaler_output_8 <= -0.3414004445075989) ? ( (scaler_output_10 <= -1.328522801399231) ? ( (scaler_output_5 <= 0.23115688562393188) ? ( (scaler_output_8 <= -1.0766929388046265) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (scaler_output_10 <= -0.22979073598980904) ? ( (scaler_output_3 <= 0.35860802233219147) ? ( 35 ) : ( (scaler_output_3 <= 0.7220810949802399) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_2 <= 0.8455783128738403) ? ( 40 ) : ( 41 ) ) ) ) : ( (scaler_output_8 <= 0.3817114531993866) ? ( (scaler_output_11 <= -0.08986097015440464) ? ( (scaler_output_5 <= 0.0755724161863327) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (scaler_output_7 <= -0.5586669743061066) ? ( 49 ) : ( (scaler_output_4 <= 0.1282102670520544) ? ( (scaler_output_3 <= -0.5415234118700027) ? ( (scaler_output_11 <= -0.3330914005637169) ? ( 53 ) : ( 54 ) ) : ( (scaler_output_8 <= 0.804375171661377) ? ( 56 ) : ( (scaler_output_7 <= 0.7361498475074768) ? ( 58 ) : ( 59 ) ) ) ) : ( (scaler_output_7 <= 0.5297742150723934) ? ( 61 ) : ( 62 ) ) ) ) ) ) ) : ( (scaler_output_6 <= -0.7899761199951172) ? ( 64 ) : ( (scaler_output_11 <= -0.0766264945268631) ? ( (scaler_output_4 <= 0.3175135478377342) ? ( 67 ) : ( 68 ) ) : ( (scaler_output_7 <= 0.5367186078801751) ? ( 70 ) : ( 71 ) ) ) ) ) ) : ( (scaler_output_4 <= -0.02671101689338684) ? ( (scaler_output_2 <= 0.9415285587310791) ? ( (scaler_output_7 <= -0.5247380211949348) ? ( (scaler_output_11 <= -0.1515183374285698) ? ( 76 ) : ( 77 ) ) : ( (scaler_output_2 <= 0.19262078404426575) ? ( (scaler_output_8 <= 0.6035111844539642) ? ( (scaler_output_5 <= -0.703867718577385) ? ( 81 ) : ( 82 ) ) : ( 83 ) ) : ( 84 ) ) ) : ( 85 ) ) : ( (scaler_output_10 <= 1.3501418828964233) ? ( (scaler_output_9 <= -0.8517085313796997) ? ( 88 ) : ( (scaler_output_11 <= 0.43564489483833313) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_10 <= 2.245677351951599) ? ( (scaler_output_2 <= 1.1658991575241089) ? ( (scaler_output_5 <= -0.7422719895839691) ? ( 95 ) : ( (scaler_output_7 <= -0.6338682174682617) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_8
		
	
		namespace EXT_SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-459.03067075 }} ,
					{ 6 ,  {-422.390294 }} ,
					{ 9 ,  {-298.79907559 }} ,
					{ 10 ,  {-305.67509721 }} ,
					{ 12 ,  {-230.73613628 }} ,
					{ 14 ,  {-181.51172981 }} ,
					{ 15 ,  {-182.68535868 }} ,
					{ 17 ,  {-268.19043239 }} ,
					{ 21 ,  {-27.42654029 }} ,
					{ 22 ,  {-67.71218597 }} ,
					{ 25 ,  {8.92365624 }} ,
					{ 26 ,  {-1.77890863 }} ,
					{ 27 ,  {26.98702516 }} ,
					{ 28 ,  {113.44087953 }} ,
					{ 33 ,  {-103.03861457 }} ,
					{ 34 ,  {-130.20856672 }} ,
					{ 36 ,  {-210.3549175 }} ,
					{ 39 ,  {-168.02760852 }} ,
					{ 40 ,  {-165.64587305 }} ,
					{ 41 ,  {-182.33200566 }} ,
					{ 44 ,  {-80.36713173 }} ,
					{ 46 ,  {11.97984848 }} ,
					{ 47 ,  {-20.2700101 }} ,
					{ 48 ,  {156.7480822 }} ,
					{ 52 ,  {250.1827601 }} ,
					{ 53 ,  {144.42445426 }} ,
					{ 57 ,  {62.64480581 }} ,
					{ 58 ,  {58.89206445 }} ,
					{ 60 ,  {38.71263785 }} ,
					{ 61 ,  {44.29871811 }} ,
					{ 62 ,  {-9.18516091 }} ,
					{ 65 ,  {277.98128451 }} ,
					{ 67 ,  {310.60889078 }} ,
					{ 68 ,  {316.51213779 }} ,
					{ 70 ,  {133.87071389 }} ,
					{ 73 ,  {235.32017089 }} ,
					{ 74 ,  {239.63425512 }} ,
					{ 75 ,  {198.97164294 }} ,
					{ 80 ,  {320.68265233 }} ,
					{ 81 ,  {325.07388162 }} ,
					{ 83 ,  {360.61572443 }} ,
					{ 84 ,  {351.37130796 }} ,
					{ 85 ,  {447.69098355 }} ,
					{ 90 ,  {259.87552026 }} ,
					{ 91 ,  {243.63801062 }} ,
					{ 92 ,  {290.7091541 }} ,
					{ 93 ,  {194.40871671 }} ,
					{ 94 ,  {58.56592202 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.5968423783779144) ? ( (scaler_output_3 <= -0.41629238426685333) ? ( (scaler_output_9 <= 0.14091176725924015) ? ( (scaler_output_5 <= -0.7203118205070496) ? ( (scaler_output_7 <= -1.0065246522426605) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_11 <= -0.9757114350795746) ? ( (scaler_output_10 <= 0.15918518602848053) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_3 <= -1.160763442516327) ? ( 12 ) : ( (scaler_output_7 <= 0.129420340876095) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (scaler_output_10 <= -1.5120097994804382) ? ( 17 ) : ( (scaler_output_2 <= 0.5398449450731277) ? ( (scaler_output_8 <= 0.1699398308992386) ? ( (scaler_output_9 <= 0.9371306598186493) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_6 <= -0.6140874028205872) ? ( (scaler_output_8 <= 2.131413221359253) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) : ( 28 ) ) ) ) : ( (scaler_output_4 <= -0.3784916251897812) ? ( (scaler_output_3 <= 0.44873759150505066) ? ( (scaler_output_4 <= -1.2500613331794739) ? ( (scaler_output_7 <= -1.0564309656620026) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_11 <= -0.8731107115745544) ? ( 36 ) : ( (scaler_output_6 <= 0.5635450333356857) ? ( (scaler_output_8 <= -0.5306030958890915) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) ) : ( (scaler_output_7 <= 1.3039696514606476) ? ( (scaler_output_3 <= 0.9361896812915802) ? ( 44 ) : ( (scaler_output_3 <= 2.2776857018470764) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) ) : ( (scaler_output_5 <= 0.4288088530302048) ? ( (scaler_output_9 <= -0.23121614009141922) ? ( (scaler_output_3 <= 0.5681009441614151) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_4 <= 0.8070214986801147) ? ( (scaler_output_7 <= 0.26724522188305855) ? ( (scaler_output_6 <= 0.8496048450469971) ? ( 57 ) : ( 58 ) ) : ( (scaler_output_2 <= 0.2377239316701889) ? ( 60 ) : ( 61 ) ) ) : ( 62 ) ) ) : ( (scaler_output_2 <= 0.22233962267637253) ? ( (scaler_output_8 <= -1.2722949832677841) ? ( 65 ) : ( (scaler_output_5 <= 0.551938459277153) ? ( 67 ) : ( 68 ) ) ) : ( (scaler_output_9 <= -0.8695903420448303) ? ( 70 ) : ( (scaler_output_9 <= 1.2702540457248688) ? ( (scaler_output_9 <= 0.6786147654056549) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) ) : ( (scaler_output_3 <= 0.7794442772865295) ? ( (scaler_output_10 <= 2.3095709681510925) ? ( (scaler_output_9 <= 1.1313903331756592) ? ( (scaler_output_4 <= 0.5360392555594444) ? ( 80 ) : ( 81 ) ) : ( (scaler_output_9 <= 1.659104347229004) ? ( 83 ) : ( 84 ) ) ) : ( 85 ) ) : ( (scaler_output_3 <= 1.1398407220840454) ? ( (scaler_output_4 <= 1.4933378100395203) ? ( (scaler_output_5 <= 0.3618583455681801) ? ( (scaler_output_3 <= 0.879047155380249) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) : ( 94 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_9
		
	
		namespace EXT_SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-298.79907559 }} ,
					{ 7 ,  {-305.67509721 }} ,
					{ 8 ,  {-351.38429309 }} ,
					{ 9 ,  {-422.390294 }} ,
					{ 11 ,  {-268.19043239 }} ,
					{ 14 ,  {-230.73613628 }} ,
					{ 15 ,  {-210.3549175 }} ,
					{ 16 ,  {-186.24037603 }} ,
					{ 20 ,  {-181.51172981 }} ,
					{ 22 ,  {-97.81389434 }} ,
					{ 24 ,  {113.44087953 }} ,
					{ 29 ,  {-1.77890863 }} ,
					{ 31 ,  {23.51174878 }} ,
					{ 32 ,  {26.98702516 }} ,
					{ 35 ,  {-20.42352874 }} ,
					{ 36 ,  {-27.42654029 }} ,
					{ 38 ,  {-9.61795807 }} ,
					{ 39 ,  {-9.18516091 }} ,
					{ 41 ,  {-32.37006064 }} ,
					{ 42 ,  {-33.10367735 }} ,
					{ 43 ,  {38.71263785 }} ,
					{ 45 ,  {-140.83123535 }} ,
					{ 46 ,  {-223.26828856 }} ,
					{ 48 ,  {447.69098355 }} ,
					{ 49 ,  {191.55215494 }} ,
					{ 56 ,  {60.83005802 }} ,
					{ 58 ,  {58.89206445 }} ,
					{ 59 ,  {58.56592202 }} ,
					{ 60 ,  {116.88919618 }} ,
					{ 62 ,  {11.97984848 }} ,
					{ 63 ,  {-20.2700101 }} ,
					{ 66 ,  {-103.03861457 }} ,
					{ 67 ,  {-53.5585581 }} ,
					{ 68 ,  {-237.150375 }} ,
					{ 70 ,  {360.61572443 }} ,
					{ 71 ,  {393.26109279 }} ,
					{ 75 ,  {62.64480581 }} ,
					{ 76 ,  {144.42445426 }} ,
					{ 79 ,  {277.98128451 }} ,
					{ 81 ,  {259.87552026 }} ,
					{ 82 ,  {248.55956548 }} ,
					{ 84 ,  {198.97164294 }} ,
					{ 85 ,  {194.40871671 }} ,
					{ 89 ,  {349.42168234 }} ,
					{ 92 ,  {320.68265233 }} ,
					{ 93 ,  {325.07388162 }} ,
					{ 95 ,  {316.51213779 }} ,
					{ 96 ,  {310.60889078 }} ,
					{ 97 ,  {228.58868552 }} ,
					{ 98 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.14761683717370033) ? ( (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_9 <= -0.037589069455862045) ? ( (scaler_output_9 <= -0.09779385291039944) ? ( (scaler_output_6 <= -0.7887376248836517) ? ( (scaler_output_8 <= 0.19630989292636514) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (scaler_output_3 <= -1.7256102561950684) ? ( 11 ) : ( (scaler_output_9 <= 0.1583516113460064) ? ( (scaler_output_8 <= -0.9523910880088806) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) ) ) : ( (scaler_output_4 <= 1.412977010011673) ? ( (scaler_output_11 <= 0.8996148705482483) ? ( (scaler_output_10 <= -1.5609650611877441) ? ( 20 ) : ( (scaler_output_8 <= -1.731895923614502) ? ( 22 ) : ( (scaler_output_11 <= -1.6048160195350647) ? ( 24 ) : ( (scaler_output_3 <= -0.23613522946834564) ? ( (scaler_output_6 <= 0.8080362677574158) ? ( (scaler_output_4 <= 0.25682082772254944) ? ( (scaler_output_4 <= -0.7470095455646515) ? ( 29 ) : ( (scaler_output_11 <= 0.22277763485908508) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_9 <= 0.7236742377281189) ? ( (scaler_output_9 <= -0.1338757872581482) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_6 <= -0.2873154878616333) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_11 <= -0.3330914005637169) ? ( 41 ) : ( 42 ) ) ) : ( 43 ) ) ) ) ) : ( (scaler_output_10 <= -1.158886380493641) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_8 <= -0.43679366260766983) ? ( 48 ) : ( 49 ) ) ) ) : ( (scaler_output_4 <= 0.14351950585842133) ? ( (scaler_output_9 <= 0.9470257759094238) ? ( (scaler_output_2 <= 0.30570174753665924) ? ( (scaler_output_3 <= 1.2788571119308472) ? ( (scaler_output_10 <= 1.4325306415557861) ? ( (scaler_output_9 <= -0.3381003215909004) ? ( 56 ) : ( (scaler_output_9 <= 0.39538102596998215) ? ( 58 ) : ( 59 ) ) ) : ( 60 ) ) : ( (scaler_output_4 <= -0.6573869287967682) ? ( 62 ) : ( 63 ) ) ) : ( (scaler_output_2 <= 1.3620609045028687) ? ( (scaler_output_2 <= 0.45674850046634674) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (scaler_output_6 <= -0.22109383344650269) ? ( 70 ) : ( 71 ) ) ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_5 <= -0.22441939264535904) ? ( (scaler_output_11 <= -0.08986097015440464) ? ( 75 ) : ( 76 ) ) : ( (scaler_output_2 <= 0.2658329978585243) ? ( (scaler_output_10 <= 0.20399578660726547) ? ( 79 ) : ( (scaler_output_5 <= -0.020113304257392883) ? ( 81 ) : ( 82 ) ) ) : ( (scaler_output_7 <= 0.037154339253902435) ? ( 84 ) : ( 85 ) ) ) ) : ( (scaler_output_6 <= 1.8639472126960754) ? ( (scaler_output_9 <= 0.9868417382240295) ? ( (scaler_output_5 <= -0.6532513797283173) ? ( 89 ) : ( (scaler_output_4 <= 1.2692298293113708) ? ( (scaler_output_9 <= 0.7263864874839783) ? ( 92 ) : ( 93 ) ) : ( (scaler_output_3 <= 0.6183927229139954) ? ( 95 ) : ( 96 ) ) ) ) : ( 97 ) ) : ( 98 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_10
		
	
		namespace EXT_SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-422.390294 }} ,
					{ 8 ,  {-230.73613628 }} ,
					{ 11 ,  {-298.79907559 }} ,
					{ 12 ,  {-284.89041043 }} ,
					{ 13 ,  {-268.19043239 }} ,
					{ 15 ,  {-165.64587305 }} ,
					{ 16 ,  {-182.33200566 }} ,
					{ 18 ,  {-210.3549175 }} ,
					{ 22 ,  {-130.20856672 }} ,
					{ 24 ,  {-101.20974879 }} ,
					{ 25 ,  {-103.03861457 }} ,
					{ 26 ,  {-80.36713173 }} ,
					{ 28 ,  {-49.96946031 }} ,
					{ 29 ,  {-33.10367735 }} ,
					{ 33 ,  {-182.68535868 }} ,
					{ 35 ,  {-237.150375 }} ,
					{ 36 ,  {-251.2683419 }} ,
					{ 41 ,  {-168.02760852 }} ,
					{ 42 ,  {-181.51172981 }} ,
					{ 43 ,  {-154.40083699 }} ,
					{ 45 ,  {-6.19072274 }} ,
					{ 46 ,  {37.34665341 }} ,
					{ 49 ,  {26.98702516 }} ,
					{ 51 ,  {44.29871811 }} ,
					{ 52 ,  {58.89206445 }} ,
					{ 53 ,  {-97.81389434 }} ,
					{ 56 ,  {58.56592202 }} ,
					{ 58 ,  {-32.37006064 }} ,
					{ 59 ,  {-33.33701473 }} ,
					{ 63 ,  {131.03680508 }} ,
					{ 64 ,  {156.7480822 }} ,
					{ 66 ,  {239.63425512 }} ,
					{ 67 ,  {198.97164294 }} ,
					{ 68 ,  {479.70721604 }} ,
					{ 73 ,  {235.32017089 }} ,
					{ 75 ,  {259.87552026 }} ,
					{ 76 ,  {250.1827601 }} ,
					{ 78 ,  {194.40871671 }} ,
					{ 79 ,  {156.85798347 }} ,
					{ 81 ,  {316.51213779 }} ,
					{ 82 ,  {349.42168234 }} ,
					{ 84 ,  {-9.18516091 }} ,
					{ 85 ,  {62.64480581 }} ,
					{ 91 ,  {351.37130796 }} ,
					{ 92 ,  {360.61572443 }} ,
					{ 94 ,  {320.68265233 }} ,
					{ 95 ,  {325.07388162 }} ,
					{ 97 ,  {243.63801062 }} ,
					{ 98 ,  {290.7091541 }} ,
					{ 99 ,  {447.69098355 }} ,
					{ 100 ,  {116.88919618 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 1.374468743801117) ? ( (scaler_output_4 <= 0.5463549196720123) ? ( (scaler_output_7 <= -0.24096271395683289) ? ( (scaler_output_5 <= 0.13666564971208572) ? ( (scaler_output_3 <= -0.22167320922017097) ? ( (scaler_output_5 <= -1.0917496085166931) ? ( 6 ) : ( (scaler_output_4 <= -0.6468367129564285) ? ( 8 ) : ( (scaler_output_4 <= 0.503389984369278) ? ( (scaler_output_2 <= -0.325656920671463) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (scaler_output_7 <= -0.8453375473618507) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_11 <= -0.7872759401798248) ? ( 18 ) : ( (scaler_output_6 <= 0.8873679041862488) ? ( (scaler_output_8 <= 0.865021675825119) ? ( (scaler_output_10 <= -0.3419175036251545) ? ( 22 ) : ( (scaler_output_6 <= -0.09422612190246582) ? ( 24 ) : ( 25 ) ) ) : ( 26 ) ) : ( (scaler_output_11 <= -0.18424393981695175) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (scaler_output_10 <= 0.015268662944436073) ? ( (scaler_output_6 <= -1.2609769105911255) ? ( (scaler_output_4 <= -0.9660212323069572) ? ( 33 ) : ( (scaler_output_3 <= 0.3544527105987072) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_2 <= -0.24187489598989487) ? ( (scaler_output_10 <= -0.745757058262825) ? ( (scaler_output_4 <= 0.14406251232139766) ? ( (scaler_output_8 <= 0.10845661163330078) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (scaler_output_10 <= -0.3739514797925949) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_7 <= 1.0467787683010101) ? ( (scaler_output_3 <= -0.06373360753059387) ? ( 49 ) : ( (scaler_output_6 <= 0.6376424059271812) ? ( 51 ) : ( 52 ) ) ) : ( 53 ) ) ) ) : ( (scaler_output_4 <= -0.7315464615821838) ? ( (scaler_output_6 <= -1.172817349433899) ? ( 56 ) : ( (scaler_output_4 <= -0.8748756647109985) ? ( 58 ) : ( 59 ) ) ) : ( (scaler_output_6 <= 1.3335599601268768) ? ( (scaler_output_8 <= 0.0294274864718318) ? ( (scaler_output_11 <= 0.6546302139759064) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_4 <= -0.10964914411306381) ? ( 66 ) : ( 67 ) ) ) : ( 68 ) ) ) ) ) : ( (scaler_output_9 <= 0.6921540200710297) ? ( (scaler_output_6 <= 0.37174221873283386) ? ( (scaler_output_4 <= 1.4766360521316528) ? ( (scaler_output_4 <= 1.0523234903812408) ? ( 73 ) : ( (scaler_output_11 <= 0.9558181017637253) ? ( 75 ) : ( 76 ) ) ) : ( (scaler_output_11 <= 1.044766128063202) ? ( 78 ) : ( 79 ) ) ) : ( (scaler_output_10 <= 0.043775152415037155) ? ( 81 ) : ( 82 ) ) ) : ( (scaler_output_8 <= -0.46119707077741623) ? ( 84 ) : ( 85 ) ) ) ) : ( (scaler_output_11 <= 1.4262112975120544) ? ( (scaler_output_4 <= 1.4639790058135986) ? ( (scaler_output_2 <= 1.07509645819664) ? ( (scaler_output_11 <= 0.4519040733575821) ? ( (scaler_output_5 <= -0.23576536774635315) ? ( 91 ) : ( 92 ) ) : ( (scaler_output_10 <= 1.5917079448699951) ? ( 94 ) : ( 95 ) ) ) : ( (scaler_output_4 <= -0.6721698641777039) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_11
		
	
		namespace EXT_SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {-237.150375 }} ,
					{ 7 ,  {-284.89041043 }} ,
					{ 8 ,  {-351.38429309 }} ,
					{ 9 ,  {-154.40083699 }} ,
					{ 15 ,  {-168.02760852 }} ,
					{ 17 ,  {-186.24037603 }} ,
					{ 19 ,  {-182.33200566 }} ,
					{ 20 ,  {-181.51172981 }} ,
					{ 21 ,  {-223.26828856 }} ,
					{ 25 ,  {-130.20856672 }} ,
					{ 26 ,  {-140.83123535 }} ,
					{ 27 ,  {-103.03861457 }} ,
					{ 29 ,  {-80.36713173 }} ,
					{ 30 ,  {-49.96946031 }} ,
					{ 33 ,  {26.98702516 }} ,
					{ 34 ,  {-1.77890863 }} ,
					{ 35 ,  {-97.81389434 }} ,
					{ 38 ,  {-6.19072274 }} ,
					{ 39 ,  {11.97984848 }} ,
					{ 41 ,  {58.89206445 }} ,
					{ 42 ,  {44.29871811 }} ,
					{ 46 ,  {37.34665341 }} ,
					{ 47 ,  {8.92365624 }} ,
					{ 48 ,  {-27.42654029 }} ,
					{ 50 ,  {144.42445426 }} ,
					{ 51 ,  {277.98128451 }} ,
					{ 56 ,  {-210.3549175 }} ,
					{ 58 ,  {-298.79907559 }} ,
					{ 59 ,  {-305.67509721 }} ,
					{ 61 ,  {-165.64587305 }} ,
					{ 62 ,  {-101.20974879 }} ,
					{ 63 ,  {325.07388162 }} ,
					{ 66 ,  {58.56592202 }} ,
					{ 68 ,  {-8.54151458 }} ,
					{ 70 ,  {-20.42352874 }} ,
					{ 71 ,  {-33.33701473 }} ,
					{ 77 ,  {228.58868552 }} ,
					{ 80 ,  {131.03680508 }} ,
					{ 82 ,  {113.44087953 }} ,
					{ 83 ,  {116.88919618 }} ,
					{ 84 ,  {198.97164294 }} ,
					{ 85 ,  {250.1827601 }} ,
					{ 87 ,  {320.68265233 }} ,
					{ 88 ,  {191.55215494 }} ,
					{ 92 ,  {239.63425512 }} ,
					{ 94 ,  {133.87071389 }} ,
					{ 95 ,  {156.7480822 }} ,
					{ 98 ,  {290.7091541 }} ,
					{ 99 ,  {310.60889078 }} ,
					{ 100 ,  {259.87552026 }} ,
					{ 102 ,  {360.61572443 }} ,
					{ 103 ,  {393.26109279 }} ,
					{ 105 ,  {447.69098355 }} ,
					{ 106 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_10 <= 0.0714151170104742) ? ( (scaler_output_4 <= 0.34513597190380096) ? ( (scaler_output_5 <= -1.0795968770980835) ? ( (scaler_output_3 <= 0.526381503790617) ? ( (scaler_output_8 <= -0.7350127249956131) ? ( (scaler_output_5 <= -2.4072508811950684) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( 9 ) ) : ( (scaler_output_3 <= 0.6540780365467072) ? ( (scaler_output_7 <= 0.8646484613418579) ? ( (scaler_output_2 <= -0.16158342943526804) ? ( (scaler_output_2 <= -0.48473262786865234) ? ( (scaler_output_9 <= -0.8743785917758942) ? ( 15 ) : ( (scaler_output_7 <= -0.7936358824372292) ? ( 17 ) : ( (scaler_output_8 <= 0.11770516633987427) ? ( 19 ) : ( 20 ) ) ) ) : ( 21 ) ) : ( (scaler_output_3 <= 0.435245156288147) ? ( (scaler_output_10 <= -0.3419175036251545) ? ( (scaler_output_6 <= 0.20690473914146423) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) : ( (scaler_output_4 <= -0.1819013273343444) ? ( 29 ) : ( 30 ) ) ) ) : ( (scaler_output_2 <= 0.46180249005556107) ? ( (scaler_output_3 <= -0.7594743520021439) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (scaler_output_2 <= -0.47950613498687744) ? ( (scaler_output_3 <= 1.011668086051941) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_7 <= 0.26724522188305855) ? ( 41 ) : ( 42 ) ) ) ) ) : ( (scaler_output_3 <= 0.36121538281440735) ? ( (scaler_output_11 <= -0.1288725510239601) ? ( (scaler_output_9 <= 0.35363511741161346) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) : ( (scaler_output_4 <= 1.1109252572059631) ? ( 50 ) : ( 51 ) ) ) ) : ( (scaler_output_7 <= -0.9524809122085571) ? ( (scaler_output_4 <= 0.6926334798336029) ? ( (scaler_output_11 <= -0.7613807618618011) ? ( (scaler_output_7 <= -2.014664351940155) ? ( 56 ) : ( (scaler_output_10 <= 0.15918518602848053) ? ( 58 ) : ( 59 ) ) ) : ( (scaler_output_7 <= -1.343161165714264) ? ( 61 ) : ( 62 ) ) ) : ( 63 ) ) : ( (scaler_output_6 <= -0.8129599392414093) ? ( (scaler_output_5 <= 0.22949038445949554) ? ( 66 ) : ( (scaler_output_7 <= 0.5279724895954132) ? ( 68 ) : ( (scaler_output_6 <= -1.4828404784202576) ? ( 70 ) : ( 71 ) ) ) ) : ( (scaler_output_2 <= 1.6595296263694763) ? ( (scaler_output_3 <= 0.1847696714103222) ? ( (scaler_output_5 <= 1.4333100318908691) ? ( (scaler_output_4 <= 0.967586100101471) ? ( (scaler_output_7 <= -0.6946527063846588) ? ( 77 ) : ( (scaler_output_8 <= 0.8141590803861618) ? ( (scaler_output_9 <= -0.09210121631622314) ? ( 80 ) : ( (scaler_output_7 <= 0.14075955748558044) ? ( 82 ) : ( 83 ) ) ) : ( 84 ) ) ) : ( 85 ) ) : ( (scaler_output_2 <= -0.47099465131759644) ? ( 87 ) : ( 88 ) ) ) : ( (scaler_output_9 <= 0.8856830894947052) ? ( (scaler_output_4 <= 0.27630145102739334) ? ( (scaler_output_3 <= 0.39909809827804565) ? ( 92 ) : ( (scaler_output_6 <= -0.5228621065616608) ? ( 94 ) : ( 95 ) ) ) : ( (scaler_output_11 <= 0.05576702952384949) ? ( (scaler_output_7 <= 0.22674686554819345) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) : ( (scaler_output_2 <= 0.9121250510215759) ? ( 102 ) : ( 103 ) ) ) ) : ( (scaler_output_11 <= -0.9274199455976486) ? ( 105 ) : ( 106 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_12
		
	
		namespace EXT_SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-230.73613628 }} ,
					{ 7 ,  {-305.67509721 }} ,
					{ 8 ,  {-284.89041043 }} ,
					{ 11 ,  {-67.71218597 }} ,
					{ 12 ,  {-101.20974879 }} ,
					{ 14 ,  {-165.64587305 }} ,
					{ 15 ,  {-186.24037603 }} ,
					{ 18 ,  {-351.38429309 }} ,
					{ 19 ,  {-298.79907559 }} ,
					{ 21 ,  {-459.03067075 }} ,
					{ 22 ,  {-422.390294 }} ,
					{ 28 ,  {-182.68535868 }} ,
					{ 30 ,  {-223.26828856 }} ,
					{ 31 ,  {-251.2683419 }} ,
					{ 34 ,  {-33.10367735 }} ,
					{ 36 ,  {-130.20856672 }} ,
					{ 38 ,  {-181.51172981 }} ,
					{ 39 ,  {-168.02760852 }} ,
					{ 41 ,  {-1.77890863 }} ,
					{ 43 ,  {-97.81389434 }} ,
					{ 44 ,  {-49.96946031 }} ,
					{ 46 ,  {37.34665341 }} ,
					{ 47 ,  {-9.61795807 }} ,
					{ 52 ,  {-20.2700101 }} ,
					{ 53 ,  {-6.19072274 }} ,
					{ 54 ,  {11.97984848 }} ,
					{ 56 ,  {44.29871811 }} ,
					{ 57 ,  {58.89206445 }} ,
					{ 58 ,  {-154.40083699 }} ,
					{ 62 ,  {133.87071389 }} ,
					{ 63 ,  {58.56592202 }} ,
					{ 66 ,  {320.68265233 }} ,
					{ 67 ,  {290.7091541 }} ,
					{ 68 ,  {479.70721604 }} ,
					{ 73 ,  {-8.54151458 }} ,
					{ 74 ,  {-20.42352874 }} ,
					{ 75 ,  {-33.33701473 }} ,
					{ 76 ,  {23.51174878 }} ,
					{ 78 ,  {116.88919618 }} ,
					{ 79 ,  {156.7480822 }} ,
					{ 83 ,  {8.92365624 }} ,
					{ 84 ,  {38.71263785 }} ,
					{ 85 ,  {113.44087953 }} ,
					{ 89 ,  {144.42445426 }} ,
					{ 90 ,  {191.55215494 }} ,
					{ 92 ,  {235.32017089 }} ,
					{ 94 ,  {259.87552026 }} ,
					{ 95 ,  {250.1827601 }} ,
					{ 98 ,  {351.37130796 }} ,
					{ 99 ,  {349.42168234 }} ,
					{ 100 ,  {310.60889078 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_4 <= 0.5733436048030853) ? ( (scaler_output_7 <= -0.9403623640537262) ? ( (scaler_output_7 <= -1.1683640480041504) ? ( (scaler_output_7 <= -1.5423945784568787) ? ( (scaler_output_4 <= -0.8429703637957573) ? ( 5 ) : ( (scaler_output_3 <= -1.1110749244689941) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_6 <= -0.5570704191923141) ? ( (scaler_output_10 <= 0.9764862358570099) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_11 <= 0.8106168508529663) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_2 <= -0.5081993937492371) ? ( (scaler_output_8 <= -0.21820064028725028) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= -1.3247398436069489) ? ( 21 ) : ( 22 ) ) ) ) : ( (scaler_output_10 <= 0.0714151170104742) ? ( (scaler_output_3 <= 0.7111696898937225) ? ( (scaler_output_4 <= 0.2539488971233368) ? ( (scaler_output_6 <= -0.8831796050071716) ? ( (scaler_output_8 <= -0.29647211730480194) ? ( 28 ) : ( (scaler_output_10 <= -0.19875741004943848) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_10 <= -0.673870325088501) ? ( (scaler_output_3 <= -0.7242879271507263) ? ( 34 ) : ( (scaler_output_6 <= -0.43111399561166763) ? ( 36 ) : ( (scaler_output_3 <= -0.4378725364804268) ? ( 38 ) : ( 39 ) ) ) ) : ( (scaler_output_10 <= -0.3658049888908863) ? ( 41 ) : ( (scaler_output_5 <= 0.13218381628394127) ? ( 43 ) : ( 44 ) ) ) ) ) : ( (scaler_output_7 <= 0.22211971506476402) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_4 <= 0.111518744379282) ? ( (scaler_output_2 <= 0.20476947724819183) ? ( (scaler_output_8 <= 0.4059995859861374) ? ( (scaler_output_9 <= 0.6363818794488907) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (scaler_output_10 <= -0.815542459487915) ? ( 56 ) : ( 57 ) ) ) : ( 58 ) ) ) : ( (scaler_output_7 <= 0.49287089705467224) ? ( (scaler_output_4 <= 0.14913317561149597) ? ( (scaler_output_9 <= -0.7045138478279114) ? ( 62 ) : ( 63 ) ) : ( (scaler_output_4 <= 0.44913579523563385) ? ( (scaler_output_10 <= 1.5395400524139404) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (scaler_output_11 <= 0.6510209739208221) ? ( (scaler_output_10 <= 1.2407955527305603) ? ( (scaler_output_2 <= 0.362693689763546) ? ( (scaler_output_4 <= -0.4123983234167099) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) : ( 76 ) ) : ( (scaler_output_3 <= 0.24510239575465675) ? ( 78 ) : ( 79 ) ) ) ) ) ) : ( (scaler_output_11 <= -0.40230631828308105) ? ( (scaler_output_6 <= 1.1881286799907684) ? ( (scaler_output_7 <= 1.0713911950588226) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( (scaler_output_6 <= 0.38173192739486694) ? ( (scaler_output_11 <= 0.30690107494592667) ? ( (scaler_output_4 <= 1.5018868446350098) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_11 <= 0.46266378462314606) ? ( 92 ) : ( (scaler_output_11 <= 0.9558181017637253) ? ( 94 ) : ( 95 ) ) ) ) : ( (scaler_output_8 <= 0.06425403617322445) ? ( (scaler_output_2 <= -0.0244731605052948) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_13
		
	
		namespace EXT_SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {-186.24037603 }} ,
					{ 5 ,  {-101.20974879 }} ,
					{ 10 ,  {-284.89041043 }} ,
					{ 11 ,  {-268.19043239 }} ,
					{ 13 ,  {-298.79907559 }} ,
					{ 14 ,  {-305.67509721 }} ,
					{ 15 ,  {-230.73613628 }} ,
					{ 16 ,  {-351.38429309 }} ,
					{ 19 ,  {-53.5585581 }} ,
					{ 20 ,  {-20.2700101 }} ,
					{ 21 ,  {-103.03861457 }} ,
					{ 28 ,  {-182.68535868 }} ,
					{ 29 ,  {-182.33200566 }} ,
					{ 31 ,  {-154.40083699 }} ,
					{ 32 ,  {-140.83123535 }} ,
					{ 33 ,  {-251.2683419 }} ,
					{ 35 ,  {44.29871811 }} ,
					{ 37 ,  {-130.20856672 }} ,
					{ 38 ,  {-49.96946031 }} ,
					{ 40 ,  {-223.26828856 }} ,
					{ 45 ,  {38.71263785 }} ,
					{ 46 ,  {37.34665341 }} ,
					{ 47 ,  {58.89206445 }} ,
					{ 50 ,  {3.07608881 }} ,
					{ 51 ,  {26.98702516 }} ,
					{ 54 ,  {-33.10367735 }} ,
					{ 55 ,  {-27.42654029 }} ,
					{ 57 ,  {-6.19072274 }} ,
					{ 58 ,  {-9.61795807 }} ,
					{ 60 ,  {8.92365624 }} ,
					{ 62 ,  {144.42445426 }} ,
					{ 63 ,  {156.85798347 }} ,
					{ 69 ,  {23.51174878 }} ,
					{ 70 ,  {11.97984848 }} ,
					{ 72 ,  {60.83005802 }} ,
					{ 73 ,  {62.64480581 }} ,
					{ 74 ,  {116.88919618 }} ,
					{ 78 ,  {250.1827601 }} ,
					{ 79 ,  {191.55215494 }} ,
					{ 81 ,  {113.44087953 }} ,
					{ 82 ,  {131.03680508 }} ,
					{ 85 ,  {133.87071389 }} ,
					{ 86 ,  {156.7480822 }} ,
					{ 88 ,  {248.55956548 }} ,
					{ 90 ,  {360.61572443 }} ,
					{ 92 ,  {310.60889078 }} ,
					{ 94 ,  {320.68265233 }} ,
					{ 95 ,  {316.51213779 }} ,
					{ 97 ,  {243.63801062 }} ,
					{ 99 ,  {393.26109279 }} ,
					{ 101 ,  {447.69098355 }} ,
					{ 102 ,  {479.70721604 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.7928295135498047) ? ( (scaler_output_3 <= -0.02689894288778305) ? ( (scaler_output_2 <= -1.3474148511886597) ? ( (scaler_output_7 <= -1.2914595007896423) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_11 <= 1.1821158826351166) ? ( (scaler_output_6 <= 1.45726078748703) ? ( (scaler_output_10 <= -0.5894565805792809) ? ( (scaler_output_7 <= -1.3977256119251251) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_2 <= 0.024190068244934082) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) : ( 16 ) ) ) : ( (scaler_output_11 <= 0.49860770255327225) ? ( (scaler_output_4 <= -0.8684839308261871) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) : ( (scaler_output_10 <= 0.02928116451948881) ? ( (scaler_output_8 <= -0.2280818521976471) ? ( (scaler_output_2 <= 0.7118693739175797) ? ( (scaler_output_7 <= 0.9347164630889893) ? ( (scaler_output_4 <= -0.657991074025631) ? ( (scaler_output_3 <= -0.06965522468090057) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_2 <= -0.3850828558206558) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (scaler_output_10 <= -1.1069163382053375) ? ( 35 ) : ( (scaler_output_3 <= 0.435245156288147) ? ( 37 ) : ( 38 ) ) ) ) : ( (scaler_output_4 <= -0.3696195185184479) ? ( 40 ) : ( (scaler_output_4 <= 0.9340450465679169) ? ( (scaler_output_11 <= -0.2696090117096901) ? ( (scaler_output_6 <= 1.175461322069168) ? ( (scaler_output_8 <= 0.5974166542291641) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (scaler_output_10 <= -1.3311511278152466) ? ( (scaler_output_4 <= 0.1282102670520544) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_9 <= 0.8107708692550659) ? ( (scaler_output_4 <= 0.3175653889775276) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_11 <= 0.4314423054456711) ? ( 57 ) : ( 58 ) ) ) ) ) : ( (scaler_output_6 <= -0.8804872184991837) ? ( 60 ) : ( (scaler_output_4 <= 1.32602459192276) ? ( 62 ) : ( 63 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.9207028448581696) ? ( (scaler_output_5 <= -0.22053303569555283) ? ( (scaler_output_11 <= 1.015782043337822) ? ( (scaler_output_9 <= -0.861991822719574) ? ( (scaler_output_3 <= 0.24901530146598816) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_2 <= -1.2223726212978363) ? ( 72 ) : ( 73 ) ) ) : ( 74 ) ) : ( (scaler_output_3 <= -0.19498779997229576) ? ( (scaler_output_6 <= 0.24770185351371765) ? ( (scaler_output_10 <= 0.13826238736510277) ? ( 78 ) : ( 79 ) ) : ( (scaler_output_7 <= 0.2308584451675415) ? ( 81 ) : ( 82 ) ) ) : ( (scaler_output_9 <= -0.8062174916267395) ? ( (scaler_output_7 <= 0.8927530655637383) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_5 <= 0.30596261471509933) ? ( 88 ) : ( (scaler_output_6 <= -0.04054573178291321) ? ( 90 ) : ( (scaler_output_5 <= 0.551938459277153) ? ( 92 ) : ( (scaler_output_4 <= 1.3158309683203697) ? ( 94 ) : ( 95 ) ) ) ) ) ) ) ) : ( (scaler_output_4 <= -1.1353812515735626) ? ( 97 ) : ( (scaler_output_4 <= -0.014075592160224915) ? ( 99 ) : ( (scaler_output_6 <= 1.2721144556999207) ? ( 101 ) : ( 102 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_14
		
	
		namespace EXT_SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {-351.38429309 }} ,
					{ 6 ,  {-298.79907559 }} ,
					{ 7 ,  {-459.03067075 }} ,
					{ 11 ,  {-210.3549175 }} ,
					{ 12 ,  {-230.73613628 }} ,
					{ 14 ,  {-284.89041043 }} ,
					{ 15 ,  {-268.19043239 }} ,
					{ 16 ,  {-101.20974879 }} ,
					{ 20 ,  {-20.2700101 }} ,
					{ 21 ,  {-49.96946031 }} ,
					{ 23 ,  {-165.64587305 }} ,
					{ 25 ,  {-103.03861457 }} ,
					{ 26 ,  {-130.20856672 }} ,
					{ 28 ,  {325.07388162 }} ,
					{ 30 ,  {235.32017089 }} ,
					{ 31 ,  {228.58868552 }} ,
					{ 38 ,  {-97.81389434 }} ,
					{ 39 ,  {-33.10367735 }} ,
					{ 42 ,  {-181.51172981 }} ,
					{ 43 ,  {-168.02760852 }} ,
					{ 44 ,  {-154.40083699 }} ,
					{ 47 ,  {-32.37006064 }} ,
					{ 48 ,  {-8.54151458 }} ,
					{ 50 ,  {60.83005802 }} ,
					{ 53 ,  {11.97984848 }} ,
					{ 54 ,  {23.51174878 }} ,
					{ 55 ,  {-20.42352874 }} ,
					{ 59 ,  {26.98702516 }} ,
					{ 60 ,  {44.29871811 }} ,
					{ 61 ,  {-1.77890863 }} ,
					{ 63 ,  {116.88919618 }} ,
					{ 64 ,  {156.7480822 }} ,
					{ 67 ,  {58.56592202 }} ,
					{ 68 ,  {-9.61795807 }} ,
					{ 71 ,  {198.97164294 }} ,
					{ 73 ,  {243.63801062 }} ,
					{ 74 ,  {239.63425512 }} ,
					{ 76 ,  {320.68265233 }} ,
					{ 77 ,  {360.61572443 }} ,
					{ 81 ,  {8.92365624 }} ,
					{ 82 ,  {-27.42654029 }} ,
					{ 84 ,  {156.85798347 }} ,
					{ 85 ,  {144.42445426 }} ,
					{ 88 ,  {113.44087953 }} ,
					{ 91 ,  {277.98128451 }} ,
					{ 93 ,  {248.55956548 }} ,
					{ 94 ,  {250.1827601 }} ,
					{ 96 ,  {310.60889078 }} ,
					{ 97 ,  {316.51213779 }} ,
					{ 99 ,  {479.70721604 }} ,
					{ 100 ,  {447.69098355 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_7 <= -0.6538744866847992) ? ( (scaler_output_3 <= -0.10237983166007325) ? ( (scaler_output_9 <= -0.3131030257791281) ? ( (scaler_output_10 <= 0.27342457324266434) ? ( (scaler_output_8 <= -0.21820064028725028) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_10 <= 0.981691986322403) ? ( (scaler_output_9 <= 0.38850581273436546) ? ( (scaler_output_6 <= 1.5816024541854858) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_8 <= 0.16652274131774902) ? ( 14 ) : ( 15 ) ) ) : ( 16 ) ) ) : ( (scaler_output_4 <= 0.17947968188673258) ? ( (scaler_output_11 <= 0.10488665103912354) ? ( (scaler_output_6 <= 0.966106504201889) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_5 <= -0.3799918293952942) ? ( 23 ) : ( (scaler_output_9 <= 0.11592444777488708) ? ( 25 ) : ( 26 ) ) ) ) : ( (scaler_output_8 <= -0.8293024301528931) ? ( 28 ) : ( (scaler_output_9 <= 0.8694196343421936) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (scaler_output_4 <= 0.4198857247829437) ? ( (scaler_output_9 <= 0.6365488171577454) ? ( (scaler_output_11 <= 0.6820541024208069) ? ( (scaler_output_10 <= 0.005953516811132431) ? ( (scaler_output_3 <= -0.7242879271507263) ? ( (scaler_output_8 <= -0.9242628663778305) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_3 <= 0.40157853811979294) ? ( (scaler_output_11 <= -0.1247301697731018) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) : ( (scaler_output_4 <= -0.8675107061862946) ? ( (scaler_output_10 <= 0.2468969188630581) ? ( 47 ) : ( 48 ) ) : ( (scaler_output_7 <= 0.4176098108291626) ? ( 50 ) : ( (scaler_output_4 <= 0.016676172614097595) ? ( (scaler_output_2 <= -0.8510537147521973) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) ) : ( (scaler_output_10 <= -0.2738999165594578) ? ( (scaler_output_8 <= 1.3606280535459518) ? ( (scaler_output_2 <= 0.5675154700875282) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( (scaler_output_8 <= -0.7027779472991824) ? ( 63 ) : ( 64 ) ) ) ) : ( (scaler_output_6 <= -0.8943517804145813) ? ( (scaler_output_4 <= -1.0799172520637512) ? ( 67 ) : ( 68 ) ) : ( (scaler_output_5 <= 0.8130553960800171) ? ( (scaler_output_11 <= -0.5486960783600807) ? ( 71 ) : ( (scaler_output_4 <= -1.0777013897895813) ? ( 73 ) : ( 74 ) ) ) : ( (scaler_output_2 <= -0.3045403063297272) ? ( 76 ) : ( 77 ) ) ) ) ) : ( (scaler_output_6 <= -0.07860141586570535) ? ( (scaler_output_3 <= -0.5449564605951309) ? ( (scaler_output_6 <= -0.8249332010746002) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_10 <= -1.1479481905698776) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_2 <= 1.2802700996398926) ? ( (scaler_output_11 <= -1.0754390954971313) ? ( 88 ) : ( (scaler_output_6 <= 0.4668203145265579) ? ( (scaler_output_10 <= -0.037053871899843216) ? ( 91 ) : ( (scaler_output_11 <= 0.5051846504211426) ? ( 93 ) : ( 94 ) ) ) : ( (scaler_output_6 <= 0.5995803773403168) ? ( 96 ) : ( 97 ) ) ) ) : ( (scaler_output_4 <= 1.2499072700738907) ? ( 99 ) : ( 100 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				EXT_SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable = lAggregatedTable;
	
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
