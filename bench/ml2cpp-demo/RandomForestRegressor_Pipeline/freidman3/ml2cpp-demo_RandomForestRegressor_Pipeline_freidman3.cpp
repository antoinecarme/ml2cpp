// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor_Pipeline
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_Pipeline_freidman3.exe ml2cpp-demo_RandomForestRegressor_Pipeline_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace EXT_SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.48486692 }} ,
					{ 4 ,  {0.38342473 }} ,
					{ 5 ,  {0.61001684 }} ,
					{ 9 ,  {1.55432885 }} ,
					{ 11 ,  {1.40929984 }} ,
					{ 14 ,  {1.36871758 }} ,
					{ 15 ,  {1.36789414 }} ,
					{ 17 ,  {1.3413442 }} ,
					{ 18 ,  {1.35009011 }} ,
					{ 20 ,  {0.70507147 }} ,
					{ 24 ,  {1.11561476 }} ,
					{ 25 ,  {1.081892 }} ,
					{ 28 ,  {1.1968265 }} ,
					{ 29 ,  {1.1082904 }} ,
					{ 30 ,  {1.34984299 }} ,
					{ 32 ,  {1.31432562 }} ,
					{ 33 ,  {1.34636148 }} ,
					{ 37 ,  {1.16100714 }} ,
					{ 38 ,  {1.14405643 }} ,
					{ 39 ,  {1.27887759 }} ,
					{ 43 ,  {1.56967904 }} ,
					{ 44 ,  {1.46088901 }} ,
					{ 47 ,  {1.27948723 }} ,
					{ 48 ,  {1.26722342 }} ,
					{ 49 ,  {1.38449452 }} ,
					{ 55 ,  {1.57058399 }} ,
					{ 57 ,  {1.56427232 }} ,
					{ 58 ,  {1.56460912 }} ,
					{ 59 ,  {1.55610197 }} ,
					{ 60 ,  {1.54561918 }} ,
					{ 63 ,  {1.49656192 }} ,
					{ 64 ,  {1.48725785 }} ,
					{ 69 ,  {1.53095005 }} ,
					{ 71 ,  {1.53405928 }} ,
					{ 72 ,  {1.5352537 }} ,
					{ 73 ,  {1.52485398 }} ,
					{ 75 ,  {1.5278957 }} ,
					{ 77 ,  {1.52169424 }} ,
					{ 78 ,  {1.52208363 }} ,
					{ 81 ,  {1.54404651 }} ,
					{ 82 ,  {1.54375025 }} ,
					{ 83 ,  {1.53740023 }} ,
					{ 86 ,  {1.46764868 }} ,
					{ 90 ,  {1.48471099 }} ,
					{ 91 ,  {1.48605726 }} ,
					{ 93 ,  {1.49496626 }} ,
					{ 94 ,  {1.49292179 }} ,
					{ 95 ,  {1.47832813 }} ,
					{ 97 ,  {1.50320739 }} ,
					{ 98 ,  {1.51266196 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_4 <= -0.37393590807914734) ? ( (scaler_output_2 <= 0.19635166227817535) ? ( (scaler_output_2 <= -1.346356213092804) ? ( 9 ) : ( (scaler_output_2 <= -1.1099023222923279) ? ( 11 ) : ( (scaler_output_3 <= 0.49332664906978607) ? ( (scaler_output_2 <= -0.4112001731991768) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_5 <= -0.272657785564661) ? ( 17 ) : ( 18 ) ) ) ) ) : ( (scaler_output_4 <= -1.3605417609214783) ? ( 20 ) : ( (scaler_output_3 <= 0.32986392825841904) ? ( (scaler_output_5 <= 0.06985824927687645) ? ( (scaler_output_3 <= -0.7127169445157051) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_4 <= -0.823421061038971) ? ( (scaler_output_2 <= 0.8264346718788147) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) ) : ( (scaler_output_4 <= -1.108010083436966) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (scaler_output_3 <= -1.495688259601593) ? ( (scaler_output_4 <= 1.1004490554332733) ? ( (scaler_output_2 <= 0.5216177850961685) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (scaler_output_3 <= -0.9236918985843658) ? ( (scaler_output_2 <= 0.17494834959506989) ? ( (scaler_output_4 <= 0.7450381778180599) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_5 <= 0.7377939373254776) ? ( (scaler_output_4 <= 0.07374501833692193) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( (scaler_output_2 <= 0.18584853038191795) ? ( (scaler_output_2 <= -0.8880466222763062) ? ( (scaler_output_3 <= 1.0571516752243042) ? ( (scaler_output_2 <= -1.3772780299186707) ? ( (scaler_output_3 <= -0.26454778015613556) ? ( 55 ) : ( (scaler_output_5 <= 0.5319756343960762) ? ( 57 ) : ( 58 ) ) ) : ( 59 ) ) : ( 60 ) ) : ( (scaler_output_3 <= -0.39177244156599045) ? ( (scaler_output_5 <= 0.4108768701553345) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_3 <= 0.9106614589691162) ? ( (scaler_output_3 <= 0.35755085945129395) ? ( (scaler_output_5 <= 0.8707916736602783) ? ( (scaler_output_5 <= -1.084018588066101) ? ( 69 ) : ( (scaler_output_3 <= -0.05914175510406494) ? ( 71 ) : ( 72 ) ) ) : ( 73 ) ) : ( (scaler_output_2 <= -0.35263078659772873) ? ( 75 ) : ( (scaler_output_3 <= 0.5218991041183472) ? ( 77 ) : ( 78 ) ) ) ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( (scaler_output_5 <= 1.1773918867111206) ? ( 81 ) : ( 82 ) ) : ( 83 ) ) ) ) ) : ( (scaler_output_3 <= 1.0520135760307312) ? ( (scaler_output_2 <= 0.31113870441913605) ? ( 86 ) : ( (scaler_output_5 <= 1.4324640035629272) ? ( (scaler_output_4 <= 0.6813516318798065) ? ( (scaler_output_2 <= 0.6658321619033813) ? ( 90 ) : ( 91 ) ) : ( (scaler_output_5 <= 1.1903365850448608) ? ( 93 ) : ( 94 ) ) ) : ( 95 ) ) ) : ( (scaler_output_3 <= 1.3279410600662231) ? ( 97 ) : ( 98 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_0
		
	
		namespace EXT_SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.61001684 }} ,
					{ 3 ,  {0.38342473 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 13 ,  {1.14091625 }} ,
					{ 14 ,  {1.1968265 }} ,
					{ 15 ,  {1.36871758 }} ,
					{ 19 ,  {1.10634412 }} ,
					{ 20 ,  {1.1082904 }} ,
					{ 21 ,  {1.081892 }} ,
					{ 22 ,  {1.15778604 }} ,
					{ 24 ,  {1.40929984 }} ,
					{ 25 ,  {1.34636148 }} ,
					{ 30 ,  {1.41074394 }} ,
					{ 31 ,  {1.45186094 }} ,
					{ 32 ,  {1.53596709 }} ,
					{ 37 ,  {1.16100714 }} ,
					{ 38 ,  {1.14405643 }} ,
					{ 39 ,  {1.11561476 }} ,
					{ 42 ,  {1.27887759 }} ,
					{ 43 ,  {1.27948723 }} ,
					{ 44 ,  {1.26722342 }} ,
					{ 45 ,  {1.46088901 }} ,
					{ 48 ,  {1.42518022 }} ,
					{ 50 ,  {1.36789414 }} ,
					{ 51 ,  {1.34984299 }} ,
					{ 54 ,  {1.49656192 }} ,
					{ 57 ,  {1.56460912 }} ,
					{ 58 ,  {1.56232281 }} ,
					{ 62 ,  {1.54158957 }} ,
					{ 64 ,  {1.53405928 }} ,
					{ 65 ,  {1.53181558 }} ,
					{ 69 ,  {1.52208363 }} ,
					{ 70 ,  {1.52169424 }} ,
					{ 71 ,  {1.52129772 }} ,
					{ 72 ,  {1.52485398 }} ,
					{ 74 ,  {1.53740023 }} ,
					{ 76 ,  {1.54561918 }} ,
					{ 77 ,  {1.54404651 }} ,
					{ 81 ,  {1.46424873 }} ,
					{ 82 ,  {1.46764868 }} ,
					{ 84 ,  {1.48605726 }} ,
					{ 85 ,  {1.47832813 }} ,
					{ 87 ,  {1.51266196 }} ,
					{ 90 ,  {1.50282351 }} ,
					{ 92 ,  {1.49496626 }} ,
					{ 93 ,  {1.49322332 }} ,
					{ 94 ,  {1.50990015 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_3 <= -0.9540339708328247) ? ( (scaler_output_2 <= 0.0887349471449852) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= 0.32986392825841904) ? ( (scaler_output_2 <= 0.8264346718788147) ? ( (scaler_output_3 <= -0.2286939173936844) ? ( (scaler_output_2 <= -0.19000491499900818) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( (scaler_output_4 <= -0.8944589197635651) ? ( (scaler_output_2 <= 1.673033356666565) ? ( (scaler_output_4 <= -1.0379496812820435) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) : ( 22 ) ) ) : ( (scaler_output_2 <= -0.1256169080734253) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_3 <= -0.9236918985843658) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_5 <= 1.1626447439193726) ? ( (scaler_output_5 <= -0.13076937198638916) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (scaler_output_4 <= 1.4993480443954468) ? ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_3 <= -1.5474199056625366) ? ( (scaler_output_4 <= 0.6049727499485016) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (scaler_output_5 <= 0.054462283849716187) ? ( (scaler_output_3 <= -1.224008947610855) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) : ( 45 ) ) ) : ( (scaler_output_4 <= -0.4938385933637619) ? ( (scaler_output_2 <= 0.07024127151817083) ? ( 48 ) : ( (scaler_output_2 <= 0.6968342885375023) ? ( 50 ) : ( 51 ) ) ) : ( (scaler_output_2 <= 0.2522202655673027) ? ( (scaler_output_3 <= -0.5624355897307396) ? ( 54 ) : ( (scaler_output_2 <= -1.1883381009101868) ? ( (scaler_output_3 <= 0.9078867882490158) ? ( 57 ) : ( 58 ) ) : ( (scaler_output_3 <= 1.1414362788200378) ? ( (scaler_output_2 <= -0.6282318532466888) ? ( (scaler_output_4 <= 0.1700807735323906) ? ( 62 ) : ( (scaler_output_2 <= -0.7733035981655121) ? ( 64 ) : ( 65 ) ) ) : ( (scaler_output_5 <= 0.6576172113418579) ? ( (scaler_output_2 <= 0.13620396330952644) ? ( (scaler_output_5 <= -0.5815658569335938) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) : ( 72 ) ) ) : ( (scaler_output_3 <= 1.51060950756073) ? ( 74 ) : ( (scaler_output_4 <= 0.10831808298826218) ? ( 76 ) : ( 77 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.18565069139003754) ? ( (scaler_output_2 <= 0.6957541704177856) ? ( (scaler_output_3 <= -0.21962417662143707) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_5 <= 1.4324640035629272) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_2 <= 0.75363589823246) ? ( 87 ) : ( (scaler_output_4 <= 1.545040786266327) ? ( (scaler_output_2 <= 1.2077310681343079) ? ( 90 ) : ( (scaler_output_4 <= 1.307365357875824) ? ( 92 ) : ( 93 ) ) ) : ( 94 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_1
		
	
		namespace EXT_SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.38342473 }} ,
					{ 4 ,  {0.48486692 }} ,
					{ 5 ,  {0.70507147 }} ,
					{ 9 ,  {1.53596709 }} ,
					{ 12 ,  {1.46088901 }} ,
					{ 13 ,  {1.41074394 }} ,
					{ 14 ,  {1.16100714 }} ,
					{ 17 ,  {1.11561476 }} ,
					{ 18 ,  {1.14405643 }} ,
					{ 20 ,  {1.38449452 }} ,
					{ 22 ,  {1.27887759 }} ,
					{ 23 ,  {1.26722342 }} ,
					{ 27 ,  {1.34984299 }} ,
					{ 28 ,  {1.53671123 }} ,
					{ 30 ,  {1.081892 }} ,
					{ 31 ,  {1.10634412 }} ,
					{ 35 ,  {1.56427232 }} ,
					{ 37 ,  {1.57058399 }} ,
					{ 38 ,  {1.56848669 }} ,
					{ 41 ,  {1.49656192 }} ,
					{ 45 ,  {1.5352537 }} ,
					{ 47 ,  {1.53095005 }} ,
					{ 48 ,  {1.53256929 }} ,
					{ 49 ,  {1.5278957 }} ,
					{ 52 ,  {1.52208363 }} ,
					{ 53 ,  {1.52129772 }} ,
					{ 54 ,  {1.50778907 }} ,
					{ 56 ,  {1.56232281 }} ,
					{ 58 ,  {1.52787455 }} ,
					{ 61 ,  {1.54561918 }} ,
					{ 62 ,  {1.54158957 }} ,
					{ 64 ,  {1.52485398 }} ,
					{ 66 ,  {1.53405928 }} ,
					{ 67 ,  {1.53740023 }} ,
					{ 69 ,  {1.27948723 }} ,
					{ 73 ,  {1.46424873 }} ,
					{ 74 ,  {1.46708262 }} ,
					{ 76 ,  {1.49292179 }} ,
					{ 77 ,  {1.47832813 }} ,
					{ 80 ,  {1.47193903 }} ,
					{ 81 ,  {1.48471099 }} ,
					{ 85 ,  {1.50320739 }} ,
					{ 86 ,  {1.50282351 }} ,
					{ 88 ,  {1.49496626 }} ,
					{ 89 ,  {1.49322332 }} ,
					{ 90 ,  {1.50990015 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_4 <= -1.5832272171974182) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_3 <= -1.0727011263370514) ? ( (scaler_output_2 <= 0.040250442922115326) ? ( (scaler_output_3 <= -1.765479326248169) ? ( 9 ) : ( (scaler_output_5 <= -1.3401830196380615) ? ( (scaler_output_5 <= -1.4251958131790161) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_5 <= 0.07333740964531898) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( 20 ) : ( (scaler_output_2 <= 1.0436431467533112) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_2 <= 1.2749183773994446) ? ( (scaler_output_5 <= 0.8026990666985512) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_4 <= -1.1359039545059204) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_2 <= 0.26149413734674454) ? ( (scaler_output_2 <= -1.3878793120384216) ? ( (scaler_output_5 <= 0.2587533965706825) ? ( 35 ) : ( (scaler_output_3 <= -0.551594689488411) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_5 <= -0.2391058597713709) ? ( (scaler_output_2 <= -0.6771551668643951) ? ( 41 ) : ( (scaler_output_2 <= -0.024430605117231607) ? ( (scaler_output_5 <= -0.5943354666233063) ? ( (scaler_output_2 <= -0.35484689474105835) ? ( 45 ) : ( (scaler_output_5 <= -0.9225163161754608) ? ( 47 ) : ( 48 ) ) ) : ( 49 ) ) : ( (scaler_output_5 <= -1.119491457939148) ? ( (scaler_output_3 <= 0.7350868582725525) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) ) : ( (scaler_output_5 <= 0.17552613280713558) ? ( 56 ) : ( (scaler_output_4 <= -0.2572235092520714) ? ( 58 ) : ( (scaler_output_4 <= 0.2857843413949013) ? ( (scaler_output_4 <= 0.007955357432365417) ? ( 61 ) : ( 62 ) ) : ( (scaler_output_4 <= 0.43903884291648865) ? ( 64 ) : ( (scaler_output_4 <= 0.7401810735464096) ? ( 66 ) : ( 67 ) ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.615314394235611) ? ( 69 ) : ( (scaler_output_3 <= 0.09310385317075998) ? ( (scaler_output_3 <= -0.1196240484714508) ? ( (scaler_output_4 <= 0.8666970729827881) ? ( 73 ) : ( 74 ) ) : ( (scaler_output_5 <= 1.4066079258918762) ? ( 76 ) : ( 77 ) ) ) : ( (scaler_output_4 <= 0.22938552498817444) ? ( (scaler_output_4 <= -0.07951180636882782) ? ( 80 ) : ( 81 ) ) : ( (scaler_output_4 <= 1.545040786266327) ? ( (scaler_output_2 <= 1.2077310681343079) ? ( (scaler_output_2 <= 0.8727086186408997) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_4 <= 1.307365357875824) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_2
		
	
		namespace EXT_SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.61001684 }} ,
					{ 4 ,  {0.38342473 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 10 ,  {1.14091625 }} ,
					{ 12 ,  {1.40929984 }} ,
					{ 13 ,  {1.35009011 }} ,
					{ 18 ,  {1.53596709 }} ,
					{ 19 ,  {1.45186094 }} ,
					{ 22 ,  {1.16100714 }} ,
					{ 23 ,  {1.11561476 }} ,
					{ 24 ,  {1.27887759 }} ,
					{ 27 ,  {1.31432562 }} ,
					{ 28 ,  {1.34636148 }} ,
					{ 31 ,  {1.41074394 }} ,
					{ 35 ,  {1.55432885 }} ,
					{ 36 ,  {1.52787455 }} ,
					{ 38 ,  {1.56232281 }} ,
					{ 41 ,  {1.56967904 }} ,
					{ 42 ,  {1.57058399 }} ,
					{ 43 ,  {1.56848669 }} ,
					{ 46 ,  {1.48725785 }} ,
					{ 47 ,  {1.49656192 }} ,
					{ 50 ,  {1.52485398 }} ,
					{ 51 ,  {1.53405928 }} ,
					{ 53 ,  {1.53256929 }} ,
					{ 55 ,  {1.54404651 }} ,
					{ 56 ,  {1.54375025 }} ,
					{ 60 ,  {1.38449452 }} ,
					{ 61 ,  {1.36789414 }} ,
					{ 62 ,  {1.46088901 }} ,
					{ 65 ,  {1.46764868 }} ,
					{ 68 ,  {1.49292179 }} ,
					{ 69 ,  {1.48605726 }} ,
					{ 70 ,  {1.47832813 }} ,
					{ 75 ,  {1.52129772 }} ,
					{ 76 ,  {1.52169424 }} ,
					{ 77 ,  {1.53095005 }} ,
					{ 79 ,  {1.50778907 }} ,
					{ 80 ,  {1.51266196 }} ,
					{ 82 ,  {1.50320739 }} ,
					{ 83 ,  {1.48471099 }} ,
					{ 87 ,  {1.081892 }} ,
					{ 88 ,  {1.02748435 }} ,
					{ 89 ,  {1.15778604 }} ,
					{ 91 ,  {1.27948723 }} ,
					{ 92 ,  {1.49496626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_5 <= -0.3222903907299042) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_3 <= -0.9296590089797974) ? ( (scaler_output_4 <= -1.4776207208633423) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= 0.20885485410690308) ? ( 10 ) : ( (scaler_output_5 <= -0.6441354788839817) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (scaler_output_2 <= 1.2387755811214447) ? ( (scaler_output_3 <= -1.495688259601593) ? ( (scaler_output_2 <= -0.6530774086713791) ? ( (scaler_output_4 <= -0.019264429807662964) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= 0.8984425663948059) ? ( (scaler_output_2 <= 0.0012792721390724182) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) : ( (scaler_output_4 <= -0.9403093159198761) ? ( (scaler_output_5 <= -0.4165308028459549) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_2 <= -0.15516800433397293) ? ( (scaler_output_5 <= -1.3374958038330078) ? ( 31 ) : ( (scaler_output_2 <= -1.0938920080661774) ? ( (scaler_output_4 <= -0.2431742437183857) ? ( (scaler_output_5 <= -0.2511811852455139) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_5 <= 0.33950900100171566) ? ( 38 ) : ( (scaler_output_2 <= -1.645344316959381) ? ( (scaler_output_3 <= -1.1564879417419434) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) : ( (scaler_output_3 <= -0.39177244156599045) ? ( (scaler_output_4 <= 0.3445229083299637) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_3 <= 0.5796983548207209) ? ( (scaler_output_4 <= 0.43903884291648865) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_5 <= 0.016523748636245728) ? ( 53 ) : ( (scaler_output_2 <= -0.387220598757267) ? ( 55 ) : ( 56 ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.27114999294281006) ? ( (scaler_output_4 <= 1.3373567461967468) ? ( (scaler_output_3 <= -0.8399465531110764) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) : ( (scaler_output_3 <= 0.25954669713974) ? ( (scaler_output_2 <= 0.31113870441913605) ? ( 65 ) : ( (scaler_output_2 <= 0.8529378771781921) ? ( (scaler_output_5 <= 1.3620607256889343) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) ) : ( (scaler_output_2 <= 0.5117313712835312) ? ( (scaler_output_3 <= 1.1634110808372498) ? ( (scaler_output_4 <= 1.1670985221862793) ? ( (scaler_output_5 <= -0.4703904390335083) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( (scaler_output_4 <= -0.13736221939325333) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_5 <= -1.1946588158607483) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) : ( (scaler_output_5 <= -0.606260135769844) ? ( (scaler_output_5 <= -1.0919035375118256) ? ( (scaler_output_2 <= 2.0901739597320557) ? ( 87 ) : ( 88 ) ) : ( 89 ) ) : ( (scaler_output_2 <= 1.6268758177757263) ? ( 91 ) : ( 92 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_3
		
	
		namespace EXT_SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {1.40929984 }} ,
					{ 5 ,  {0.61001684 }} ,
					{ 7 ,  {0.48486692 }} ,
					{ 9 ,  {0.37516757 }} ,
					{ 10 ,  {0.38342473 }} ,
					{ 12 ,  {1.36871758 }} ,
					{ 13 ,  {0.70507147 }} ,
					{ 17 ,  {1.53596709 }} ,
					{ 18 ,  {1.16100714 }} ,
					{ 20 ,  {1.3413442 }} ,
					{ 24 ,  {1.41074394 }} ,
					{ 25 ,  {1.46088901 }} ,
					{ 27 ,  {1.52762941 }} ,
					{ 28 ,  {1.52208363 }} ,
					{ 32 ,  {1.50778907 }} ,
					{ 33 ,  {1.47795145 }} ,
					{ 37 ,  {1.56967904 }} ,
					{ 39 ,  {1.56427232 }} ,
					{ 40 ,  {1.56460912 }} ,
					{ 41 ,  {1.55610197 }} ,
					{ 44 ,  {1.49656192 }} ,
					{ 45 ,  {1.49902739 }} ,
					{ 48 ,  {1.54561918 }} ,
					{ 49 ,  {1.54158957 }} ,
					{ 54 ,  {1.53405928 }} ,
					{ 55 ,  {1.5352537 }} ,
					{ 58 ,  {1.53181558 }} ,
					{ 59 ,  {1.53256929 }} ,
					{ 60 ,  {1.53095005 }} ,
					{ 61 ,  {1.52485398 }} ,
					{ 63 ,  {1.53740023 }} ,
					{ 64 ,  {1.54375025 }} ,
					{ 66 ,  {1.46424873 }} ,
					{ 68 ,  {1.4771264 }} ,
					{ 71 ,  {1.48471099 }} ,
					{ 72 ,  {1.49292179 }} ,
					{ 73 ,  {1.51266196 }} ,
					{ 77 ,  {1.02748435 }} ,
					{ 78 ,  {1.07654708 }} ,
					{ 82 ,  {1.1082904 }} ,
					{ 84 ,  {1.15778604 }} ,
					{ 85 ,  {1.14405643 }} ,
					{ 86 ,  {1.1968265 }} ,
					{ 87 ,  {1.27887759 }} ,
					{ 89 ,  {1.34636148 }} ,
					{ 92 ,  {1.50282351 }} ,
					{ 93 ,  {1.50990015 }} ,
					{ 94 ,  {1.47832813 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_5 <= -1.2066214084625244) ? ( 2 ) : ( (scaler_output_4 <= -1.5602660179138184) ? ( (scaler_output_4 <= -1.7965635061264038) ? ( 5 ) : ( (scaler_output_5 <= -0.14987096190452576) ? ( 7 ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_2 <= -0.3636448532342911) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_2 <= 0.6816338896751404) ? ( (scaler_output_3 <= -1.6158922910690308) ? ( (scaler_output_3 <= -1.765479326248169) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_4 <= -1.1599440574645996) ? ( 20 ) : ( (scaler_output_5 <= -1.2838689684867859) ? ( (scaler_output_3 <= -0.521224245429039) ? ( (scaler_output_3 <= -1.3582056164741516) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_5 <= -1.5175570249557495) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_2 <= 0.11517623253166676) ? ( (scaler_output_4 <= -0.3715920001268387) ? ( (scaler_output_5 <= -0.5414793565869331) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_2 <= -1.19354248046875) ? ( (scaler_output_2 <= -1.3772780299186707) ? ( (scaler_output_2 <= -1.6234049201011658) ? ( 37 ) : ( (scaler_output_5 <= 0.5319756343960762) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( (scaler_output_3 <= -0.5055505260825157) ? ( (scaler_output_4 <= 0.6498354375362396) ? ( 44 ) : ( 45 ) ) : ( (scaler_output_2 <= -0.8880466222763062) ? ( (scaler_output_5 <= 0.8835726082324982) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_5 <= 1.1439576745033264) ? ( (scaler_output_5 <= 0.8707916736602783) ? ( (scaler_output_3 <= 0.21372415870428085) ? ( (scaler_output_4 <= 0.9795459359884262) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_4 <= 0.8536984920501709) ? ( (scaler_output_5 <= -0.968233197927475) ? ( 58 ) : ( 59 ) ) : ( 60 ) ) ) : ( 61 ) ) : ( (scaler_output_4 <= 1.2806103229522705) ? ( 63 ) : ( 64 ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.2016371637582779) ? ( 66 ) : ( (scaler_output_4 <= -0.31597117334604263) ? ( 68 ) : ( (scaler_output_3 <= 1.0170723795890808) ? ( (scaler_output_4 <= 0.46315979957580566) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.13757695525418967) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_3 <= -1.494538426399231) ? ( 77 ) : ( 78 ) ) : ( (scaler_output_4 <= 1.1004490554332733) ? ( (scaler_output_3 <= -0.4480481743812561) ? ( (scaler_output_2 <= 1.1109921038150787) ? ( 82 ) : ( (scaler_output_4 <= 0.010518312454223633) ? ( 84 ) : ( 85 ) ) ) : ( 86 ) ) : ( 87 ) ) ) : ( (scaler_output_4 <= -0.02971065044403076) ? ( 89 ) : ( (scaler_output_5 <= 0.7852952666580677) ? ( (scaler_output_2 <= 1.2282309532165527) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_4
		
	
		namespace EXT_SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.14091625 }} ,
					{ 5 ,  {1.36871758 }} ,
					{ 6 ,  {1.40929984 }} ,
					{ 9 ,  {0.48486692 }} ,
					{ 11 ,  {0.38342473 }} ,
					{ 12 ,  {0.37516757 }} ,
					{ 14 ,  {0.70507147 }} ,
					{ 15 ,  {0.80791092 }} ,
					{ 20 ,  {1.53596709 }} ,
					{ 21 ,  {1.41074394 }} ,
					{ 23 ,  {1.11561476 }} ,
					{ 24 ,  {1.38449452 }} ,
					{ 26 ,  {1.31432562 }} ,
					{ 31 ,  {1.56460912 }} ,
					{ 32 ,  {1.56427232 }} ,
					{ 34 ,  {1.56848669 }} ,
					{ 35 ,  {1.57058399 }} ,
					{ 39 ,  {1.55610197 }} ,
					{ 40 ,  {1.56232281 }} ,
					{ 41 ,  {1.54561918 }} ,
					{ 43 ,  {1.52787455 }} ,
					{ 45 ,  {1.53405928 }} ,
					{ 46 ,  {1.53671123 }} ,
					{ 49 ,  {1.4771264 }} ,
					{ 50 ,  {1.47795145 }} ,
					{ 53 ,  {1.46088901 }} ,
					{ 55 ,  {1.46764868 }} ,
					{ 58 ,  {1.49656192 }} ,
					{ 59 ,  {1.49902739 }} ,
					{ 61 ,  {1.48725785 }} ,
					{ 62 ,  {1.49292179 }} ,
					{ 67 ,  {1.52208363 }} ,
					{ 69 ,  {1.50778907 }} ,
					{ 70 ,  {1.51266196 }} ,
					{ 73 ,  {1.52485398 }} ,
					{ 74 ,  {1.52169424 }} ,
					{ 75 ,  {1.53256929 }} ,
					{ 77 ,  {1.53095005 }} ,
					{ 79 ,  {1.54375025 }} ,
					{ 80 ,  {1.53740023 }} ,
					{ 82 ,  {1.50320739 }} ,
					{ 83 ,  {1.48605726 }} ,
					{ 88 ,  {1.34636148 }} ,
					{ 89 ,  {1.34984299 }} ,
					{ 90 ,  {1.26722342 }} ,
					{ 94 ,  {1.14405643 }} ,
					{ 95 ,  {1.15778604 }} ,
					{ 96 ,  {1.10634412 }} ,
					{ 98 ,  {1.081892 }} ,
					{ 99 ,  {1.02748435 }} ,
					{ 101 ,  {1.27887759 }} ,
					{ 104 ,  {1.49322332 }} ,
					{ 106 ,  {1.50282351 }} ,
					{ 107 ,  {1.50990015 }} ,
					{ 108 ,  {1.46708262 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_3 <= -0.4679744988679886) ? ( 3 ) : ( (scaler_output_3 <= 0.6646461933851242) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( (scaler_output_5 <= -0.14987096190452576) ? ( 9 ) : ( (scaler_output_5 <= 0.7462165057659149) ? ( 11 ) : ( 12 ) ) ) : ( (scaler_output_3 <= -1.1316539645195007) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_2 <= 0.8440569937229156) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_2 <= -0.35382256656885147) ? ( (scaler_output_2 <= -1.2736729383468628) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_4 <= 0.3329373747110367) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_4 <= -1.1697484254837036) ? ( 26 ) : ( (scaler_output_2 <= -0.7974012792110443) ? ( (scaler_output_2 <= -1.3966397047042847) ? ( (scaler_output_4 <= 1.1511195302009583) ? ( (scaler_output_2 <= -1.5053826570510864) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_4 <= 1.4812145233154297) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_5 <= 0.7203217148780823) ? ( (scaler_output_2 <= -1.098024696111679) ? ( (scaler_output_3 <= 0.8681400045752525) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( (scaler_output_3 <= -0.5923634096980095) ? ( 43 ) : ( (scaler_output_3 <= 0.13445503264665604) ? ( 45 ) : ( 46 ) ) ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( (scaler_output_5 <= -0.2896973118185997) ? ( 49 ) : ( 50 ) ) : ( (scaler_output_3 <= -0.0517913541989401) ? ( (scaler_output_5 <= -1.1071047186851501) ? ( 53 ) : ( (scaler_output_4 <= 0.20296504348516464) ? ( 55 ) : ( (scaler_output_5 <= 0.9033738970756531) ? ( (scaler_output_5 <= -0.14239919185638428) ? ( 58 ) : ( 59 ) ) : ( (scaler_output_4 <= 0.5097056776285172) ? ( 61 ) : ( 62 ) ) ) ) ) : ( (scaler_output_2 <= 0.5260942727327347) ? ( (scaler_output_4 <= 0.911697268486023) ? ( (scaler_output_5 <= -0.8749085068702698) ? ( (scaler_output_5 <= -1.2306668758392334) ? ( 67 ) : ( (scaler_output_2 <= 0.1994251380674541) ? ( 69 ) : ( 70 ) ) ) : ( (scaler_output_3 <= 1.0173494219779968) ? ( (scaler_output_4 <= 0.610555037856102) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) : ( (scaler_output_3 <= 0.746313214302063) ? ( 77 ) : ( (scaler_output_3 <= 1.3170108795166016) ? ( 79 ) : ( 80 ) ) ) ) : ( (scaler_output_4 <= 0.4475773572921753) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.0049840807914734) ? ( (scaler_output_2 <= 1.241290807723999) ? ( (scaler_output_5 <= 0.22517549246549606) ? ( (scaler_output_2 <= 1.0996875166893005) ? ( 88 ) : ( 89 ) ) : ( 90 ) ) : ( (scaler_output_2 <= 1.8500051498413086) ? ( (scaler_output_5 <= 0.6600398570299149) ? ( (scaler_output_2 <= 1.4666967988014221) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) : ( (scaler_output_5 <= -1.5203047394752502) ? ( 98 ) : ( 99 ) ) ) ) : ( (scaler_output_2 <= 1.0417806208133698) ? ( 101 ) : ( (scaler_output_5 <= 0.4805448241531849) ? ( (scaler_output_5 <= -0.8360162265598774) ? ( 104 ) : ( (scaler_output_4 <= 1.503876268863678) ? ( 106 ) : ( 107 ) ) ) : ( 108 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_5
		
	
		namespace EXT_SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.61001684 }} ,
					{ 5 ,  {1.14091625 }} ,
					{ 6 ,  {1.36871758 }} ,
					{ 9 ,  {0.38342473 }} ,
					{ 10 ,  {0.37516757 }} ,
					{ 12 ,  {0.70507147 }} ,
					{ 13 ,  {0.80791092 }} ,
					{ 18 ,  {1.41074394 }} ,
					{ 20 ,  {1.45186094 }} ,
					{ 21 ,  {1.48725785 }} ,
					{ 24 ,  {1.16100714 }} ,
					{ 25 ,  {1.11561476 }} ,
					{ 28 ,  {1.46088901 }} ,
					{ 30 ,  {1.36789414 }} ,
					{ 31 ,  {1.38449452 }} ,
					{ 33 ,  {1.27887759 }} ,
					{ 34 ,  {1.26722342 }} ,
					{ 38 ,  {1.10634412 }} ,
					{ 39 ,  {1.14405643 }} ,
					{ 41 ,  {1.27948723 }} ,
					{ 42 ,  {1.15778604 }} ,
					{ 44 ,  {1.07654708 }} ,
					{ 45 ,  {1.02748435 }} ,
					{ 48 ,  {1.31432562 }} ,
					{ 49 ,  {1.081892 }} ,
					{ 53 ,  {1.53671123 }} ,
					{ 55 ,  {1.56427232 }} ,
					{ 56 ,  {1.55610197 }} ,
					{ 58 ,  {1.47795145 }} ,
					{ 61 ,  {1.54158957 }} ,
					{ 64 ,  {1.53181558 }} ,
					{ 66 ,  {1.52485398 }} ,
					{ 68 ,  {1.52762941 }} ,
					{ 69 ,  {1.5278957 }} ,
					{ 70 ,  {1.5352537 }} ,
					{ 72 ,  {1.53256929 }} ,
					{ 75 ,  {1.54561918 }} ,
					{ 77 ,  {1.54404651 }} ,
					{ 78 ,  {1.54375025 }} ,
					{ 79 ,  {1.53740023 }} ,
					{ 82 ,  {1.46424873 }} ,
					{ 84 ,  {1.46708262 }} ,
					{ 85 ,  {1.46764868 }} ,
					{ 88 ,  {1.49322332 }} ,
					{ 90 ,  {1.48471099 }} ,
					{ 91 ,  {1.48605726 }} ,
					{ 94 ,  {1.50320739 }} ,
					{ 95 ,  {1.50990015 }} ,
					{ 96 ,  {1.49496626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_5 <= -0.3194104954600334) ? ( 3 ) : ( (scaler_output_3 <= -0.4679744988679886) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_4 <= -1.5640677213668823) ? ( (scaler_output_2 <= 0.2745603397488594) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_3 <= -1.1316539645195007) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= 1.1800363659858704) ? ( (scaler_output_2 <= -0.2754115164279938) ? ( (scaler_output_5 <= -0.13076937198638916) ? ( 18 ) : ( (scaler_output_3 <= -1.1159041821956635) ? ( 20 ) : ( 21 ) ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_3 <= -1.6383969187736511) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_2 <= 0.01613243669271469) ? ( 28 ) : ( (scaler_output_5 <= -0.20964401960372925) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_2 <= 1.0436431467533112) ? ( 33 ) : ( 34 ) ) ) ) ) : ( (scaler_output_2 <= 1.7521882057189941) ? ( (scaler_output_2 <= 1.4051255583763123) ? ( (scaler_output_4 <= -0.13297244906425476) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_2 <= 1.582097351551056) ? ( 41 ) : ( 42 ) ) ) : ( (scaler_output_4 <= 0.49538497254252434) ? ( 44 ) : ( 45 ) ) ) ) : ( (scaler_output_4 <= -1.1435618996620178) ? ( (scaler_output_4 <= -1.225070297718048) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_2 <= 0.17194722779095173) ? ( (scaler_output_2 <= -1.19354248046875) ? ( (scaler_output_4 <= -0.3912697285413742) ? ( 53 ) : ( (scaler_output_5 <= 0.24943871051073074) ? ( 55 ) : ( 56 ) ) ) : ( (scaler_output_4 <= -0.5353570654988289) ? ( 58 ) : ( (scaler_output_3 <= 0.8169082701206207) ? ( (scaler_output_2 <= -0.8677496910095215) ? ( 61 ) : ( (scaler_output_2 <= -0.3807009756565094) ? ( (scaler_output_2 <= -0.6530574858188629) ? ( 64 ) : ( (scaler_output_3 <= 0.10797195218037814) ? ( 66 ) : ( (scaler_output_5 <= -0.9981440901756287) ? ( 68 ) : ( 69 ) ) ) ) : ( 70 ) ) ) : ( (scaler_output_5 <= -0.1797034740447998) ? ( 72 ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( (scaler_output_4 <= 0.10831808298826218) ? ( 75 ) : ( (scaler_output_4 <= 0.9527565836906433) ? ( 77 ) : ( 78 ) ) ) : ( 79 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.025099143385887146) ? ( (scaler_output_3 <= -0.21962417662143707) ? ( 82 ) : ( (scaler_output_5 <= 0.9820998311042786) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_3 <= 0.6569289267063141) ? ( (scaler_output_5 <= -1.374675452709198) ? ( 88 ) : ( (scaler_output_4 <= 0.40834131836891174) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_4 <= 0.9189117550849915) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_6
		
	
		namespace EXT_SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.37516757 }} ,
					{ 8 ,  {1.081892 }} ,
					{ 9 ,  {0.70507147 }} ,
					{ 13 ,  {1.15778604 }} ,
					{ 15 ,  {1.14091625 }} ,
					{ 17 ,  {1.11561476 }} ,
					{ 19 ,  {1.10634412 }} ,
					{ 20 ,  {1.1082904 }} ,
					{ 21 ,  {1.1968265 }} ,
					{ 22 ,  {1.36871758 }} ,
					{ 26 ,  {1.55432885 }} ,
					{ 27 ,  {1.53671123 }} ,
					{ 28 ,  {1.47795145 }} ,
					{ 31 ,  {1.3413442 }} ,
					{ 32 ,  {1.31432562 }} ,
					{ 33 ,  {1.34636148 }} ,
					{ 38 ,  {1.56967904 }} ,
					{ 39 ,  {1.52787455 }} ,
					{ 41 ,  {1.45186094 }} ,
					{ 42 ,  {1.41074394 }} ,
					{ 45 ,  {1.16100714 }} ,
					{ 46 ,  {1.02748435 }} ,
					{ 49 ,  {1.38449452 }} ,
					{ 50 ,  {1.46088901 }} ,
					{ 53 ,  {1.27887759 }} ,
					{ 54 ,  {1.27948723 }} ,
					{ 55 ,  {1.26722342 }} ,
					{ 61 ,  {1.57058399 }} ,
					{ 62 ,  {1.56460912 }} ,
					{ 64 ,  {1.56232281 }} ,
					{ 65 ,  {1.55610197 }} ,
					{ 67 ,  {1.53405928 }} ,
					{ 69 ,  {1.54158957 }} ,
					{ 71 ,  {1.54404651 }} ,
					{ 72 ,  {1.54561918 }} ,
					{ 74 ,  {1.49902739 }} ,
					{ 76 ,  {1.50778907 }} ,
					{ 79 ,  {1.53256929 }} ,
					{ 83 ,  {1.52208363 }} ,
					{ 84 ,  {1.52169424 }} ,
					{ 85 ,  {1.52129772 }} ,
					{ 86 ,  {1.52485398 }} ,
					{ 89 ,  {1.5352537 }} ,
					{ 90 ,  {1.53740023 }} ,
					{ 91 ,  {1.53095005 }} ,
					{ 93 ,  {1.46424873 }} ,
					{ 97 ,  {1.48471099 }} ,
					{ 98 ,  {1.47193903 }} ,
					{ 102 ,  {1.49292179 }} ,
					{ 103 ,  {1.49322332 }} ,
					{ 104 ,  {1.47832813 }} ,
					{ 108 ,  {1.50320739 }} ,
					{ 109 ,  {1.50282351 }} ,
					{ 110 ,  {1.50990015 }} ,
					{ 111 ,  {1.49496626 }} ,
					{ 112 ,  {1.51266196 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6357912421226501) ? ( (scaler_output_4 <= -1.7129992842674255) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( (scaler_output_5 <= -0.9156729280948639) ? ( (scaler_output_5 <= -1.3440741300582886) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_3 <= -0.2286939173936844) ? ( (scaler_output_3 <= -0.3915177583694458) ? ( (scaler_output_5 <= -0.405744981020689) ? ( 13 ) : ( (scaler_output_4 <= -1.350892961025238) ? ( 15 ) : ( (scaler_output_3 <= -1.161270022392273) ? ( 17 ) : ( (scaler_output_4 <= -1.0379496812820435) ? ( 19 ) : ( 20 ) ) ) ) ) : ( 21 ) ) : ( 22 ) ) ) : ( (scaler_output_2 <= -0.16294515877962112) ? ( (scaler_output_2 <= -0.9280877113342285) ? ( (scaler_output_2 <= -1.410794973373413) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) : ( (scaler_output_4 <= -1.108010083436966) ? ( (scaler_output_4 <= -1.3216150999069214) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) ) : ( (scaler_output_3 <= -0.8848086297512054) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_2 <= -1.2143871784210205) ? ( (scaler_output_3 <= -1.2252990305423737) ? ( 38 ) : ( 39 ) ) : ( (scaler_output_3 <= -1.5593922138214111) ? ( 41 ) : ( 42 ) ) ) : ( (scaler_output_3 <= -1.555534303188324) ? ( (scaler_output_2 <= 0.9723859578371048) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 49 ) : ( 50 ) ) : ( (scaler_output_5 <= 0.054462283849716187) ? ( (scaler_output_3 <= -1.224008947610855) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) ) : ( (scaler_output_2 <= 0.26149413734674454) ? ( (scaler_output_2 <= -0.5963975787162781) ? ( (scaler_output_2 <= -1.1883381009101868) ? ( (scaler_output_2 <= -1.4423834681510925) ? ( (scaler_output_2 <= -1.6239587664604187) ? ( 61 ) : ( 62 ) ) : ( (scaler_output_5 <= 0.3301943149417639) ? ( 64 ) : ( 65 ) ) ) : ( (scaler_output_3 <= -0.11086891405284405) ? ( 67 ) : ( (scaler_output_3 <= 0.7666403446346521) ? ( 69 ) : ( (scaler_output_3 <= 1.5545402765274048) ? ( 71 ) : ( 72 ) ) ) ) ) : ( (scaler_output_3 <= -0.39929947175551206) ? ( 74 ) : ( (scaler_output_4 <= -0.18692036718130112) ? ( 76 ) : ( (scaler_output_4 <= 0.911697268486023) ? ( (scaler_output_4 <= 0.21919577568769455) ? ( 79 ) : ( (scaler_output_5 <= 0.6576172113418579) ? ( (scaler_output_3 <= 0.7350868582725525) ? ( (scaler_output_4 <= 0.7763578593730927) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( 86 ) ) ) : ( (scaler_output_4 <= 1.5099091529846191) ? ( (scaler_output_2 <= -0.16892036609351635) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) ) ) ) : ( (scaler_output_3 <= -0.2016371637582779) ? ( 93 ) : ( (scaler_output_3 <= 1.5113640427589417) ? ( (scaler_output_4 <= 0.22938552498817444) ? ( (scaler_output_5 <= -0.3603789508342743) ? ( 97 ) : ( 98 ) ) : ( (scaler_output_3 <= 0.2843315601348877) ? ( (scaler_output_5 <= 1.4066079258918762) ? ( (scaler_output_3 <= 0.040927499532699585) ? ( 102 ) : ( 103 ) ) : ( 104 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_2 <= 1.2282309532165527) ? ( (scaler_output_5 <= -0.5720314793288708) ? ( 108 ) : ( 109 ) ) : ( 110 ) ) : ( 111 ) ) ) ) : ( 112 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_7
		
	
		namespace EXT_SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.80791092 }} ,
					{ 5 ,  {0.37516757 }} ,
					{ 6 ,  {0.38342473 }} ,
					{ 7 ,  {1.35009011 }} ,
					{ 12 ,  {1.36789414 }} ,
					{ 13 ,  {1.41074394 }} ,
					{ 15 ,  {1.52208363 }} ,
					{ 16 ,  {1.46088901 }} ,
					{ 18 ,  {1.36871758 }} ,
					{ 23 ,  {1.53596709 }} ,
					{ 24 ,  {1.55432885 }} ,
					{ 27 ,  {1.56967904 }} ,
					{ 28 ,  {1.57058399 }} ,
					{ 30 ,  {1.56460912 }} ,
					{ 31 ,  {1.56427232 }} ,
					{ 33 ,  {1.54561918 }} ,
					{ 35 ,  {1.53671123 }} ,
					{ 36 ,  {1.54158957 }} ,
					{ 39 ,  {1.4771264 }} ,
					{ 40 ,  {1.47795145 }} ,
					{ 44 ,  {1.49656192 }} ,
					{ 45 ,  {1.49902739 }} ,
					{ 46 ,  {1.48725785 }} ,
					{ 48 ,  {1.50778907 }} ,
					{ 53 ,  {1.5352537 }} ,
					{ 55 ,  {1.53181558 }} ,
					{ 56 ,  {1.53095005 }} ,
					{ 58 ,  {1.53405928 }} ,
					{ 61 ,  {1.52485398 }} ,
					{ 62 ,  {1.5278957 }} ,
					{ 63 ,  {1.52169424 }} ,
					{ 64 ,  {1.52129772 }} ,
					{ 66 ,  {1.54404651 }} ,
					{ 67 ,  {1.53256929 }} ,
					{ 72 ,  {1.1082904 }} ,
					{ 73 ,  {1.11561476 }} ,
					{ 75 ,  {1.27948723 }} ,
					{ 77 ,  {1.14405643 }} ,
					{ 78 ,  {1.07654708 }} ,
					{ 79 ,  {1.38449452 }} ,
					{ 83 ,  {1.34984299 }} ,
					{ 84 ,  {1.31432562 }} ,
					{ 85 ,  {1.081892 }} ,
					{ 88 ,  {1.46424873 }} ,
					{ 90 ,  {1.46764868 }} ,
					{ 91 ,  {1.46708262 }} ,
					{ 95 ,  {1.48471099 }} ,
					{ 97 ,  {1.49496626 }} ,
					{ 98 ,  {1.49292179 }} ,
					{ 99 ,  {1.47832813 }} ,
					{ 100 ,  {1.50990015 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.481613039970398) ? ( (scaler_output_3 <= 0.8200521022081375) ? ( (scaler_output_3 <= -1.0840756297111511) ? ( 3 ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( 5 ) : ( 6 ) ) ) : ( 7 ) ) : ( (scaler_output_2 <= 0.20899805426597595) ? ( (scaler_output_5 <= -1.3374958038330078) ? ( (scaler_output_4 <= 0.23203356564044952) ? ( (scaler_output_5 <= -1.5075144171714783) ? ( 12 ) : ( 13 ) ) : ( (scaler_output_5 <= -1.4630562663078308) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_4 <= -1.2830256819725037) ? ( 18 ) : ( (scaler_output_2 <= -0.8880466222763062) ? ( (scaler_output_2 <= -1.3966397047042847) ? ( (scaler_output_4 <= -0.5003117173910141) ? ( (scaler_output_3 <= -0.534621387720108) ? ( 23 ) : ( 24 ) ) : ( (scaler_output_2 <= -1.6234049201011658) ? ( (scaler_output_4 <= 0.7431471608579159) ? ( 27 ) : ( 28 ) ) : ( (scaler_output_4 <= 0.2984974533319473) ? ( 30 ) : ( 31 ) ) ) ) : ( (scaler_output_5 <= 0.8835726082324982) ? ( 33 ) : ( (scaler_output_4 <= -0.46476496011018753) ? ( 35 ) : ( 36 ) ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( (scaler_output_5 <= -0.2896973118185997) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_3 <= -0.39177244156599045) ? ( (scaler_output_2 <= -0.3808511644601822) ? ( (scaler_output_5 <= -0.14239919185638428) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (scaler_output_4 <= -0.18692036718130112) ? ( 48 ) : ( (scaler_output_3 <= 1.1753819584846497) ? ( (scaler_output_2 <= 0.08094288222491741) ? ( (scaler_output_5 <= -0.7558377385139465) ? ( (scaler_output_3 <= 0.21372415870428085) ? ( 53 ) : ( (scaler_output_2 <= -0.35169159807264805) ? ( 55 ) : ( 56 ) ) ) : ( (scaler_output_3 <= -0.10421227582264692) ? ( 58 ) : ( (scaler_output_4 <= 0.610555037856102) ? ( (scaler_output_3 <= 0.23009626648854464) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) ) : ( 64 ) ) : ( (scaler_output_3 <= 1.5997104048728943) ? ( 66 ) : ( 67 ) ) ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.5494245290756226) ? ( (scaler_output_5 <= 0.8700805306434631) ? ( (scaler_output_2 <= 1.1109921038150787) ? ( (scaler_output_4 <= -0.7035183757543564) ? ( 72 ) : ( 73 ) ) : ( (scaler_output_4 <= 0.053647244814783335) ? ( 75 ) : ( (scaler_output_3 <= -1.4832730889320374) ? ( 77 ) : ( 78 ) ) ) ) : ( 79 ) ) : ( (scaler_output_4 <= -0.26058902591466904) ? ( (scaler_output_2 <= 1.6245991587638855) ? ( (scaler_output_3 <= 0.401416152715683) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) : ( (scaler_output_3 <= -0.1196240484714508) ? ( (scaler_output_3 <= -0.21962417662143707) ? ( 88 ) : ( (scaler_output_4 <= 0.6197080388665199) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_4 <= 1.331526517868042) ? ( (scaler_output_5 <= 1.4066079258918762) ? ( (scaler_output_5 <= -0.053603410720825195) ? ( 95 ) : ( (scaler_output_5 <= 1.1903365850448608) ? ( 97 ) : ( 98 ) ) ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_8
		
	
		namespace EXT_SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.38342473 }} ,
					{ 4 ,  {0.48486692 }} ,
					{ 5 ,  {0.61001684 }} ,
					{ 9 ,  {1.1968265 }} ,
					{ 12 ,  {1.35009011 }} ,
					{ 13 ,  {1.36871758 }} ,
					{ 14 ,  {1.40929984 }} ,
					{ 19 ,  {1.55432885 }} ,
					{ 20 ,  {1.53596709 }} ,
					{ 22 ,  {1.56427232 }} ,
					{ 25 ,  {1.57058399 }} ,
					{ 26 ,  {1.56967904 }} ,
					{ 27 ,  {1.56848669 }} ,
					{ 34 ,  {1.52787455 }} ,
					{ 35 ,  {1.5278957 }} ,
					{ 36 ,  {1.52762941 }} ,
					{ 37 ,  {1.52485398 }} ,
					{ 38 ,  {1.53181558 }} ,
					{ 39 ,  {1.5352537 }} ,
					{ 41 ,  {1.56232281 }} ,
					{ 43 ,  {1.54561918 }} ,
					{ 44 ,  {1.54404651 }} ,
					{ 46 ,  {1.27887759 }} ,
					{ 49 ,  {1.42518022 }} ,
					{ 52 ,  {1.46088901 }} ,
					{ 53 ,  {1.46424873 }} ,
					{ 56 ,  {1.49292179 }} ,
					{ 57 ,  {1.48725785 }} ,
					{ 58 ,  {1.47832813 }} ,
					{ 62 ,  {1.48471099 }} ,
					{ 64 ,  {1.50778907 }} ,
					{ 65 ,  {1.50320739 }} ,
					{ 67 ,  {1.48605726 }} ,
					{ 69 ,  {1.4771264 }} ,
					{ 70 ,  {1.47193903 }} ,
					{ 73 ,  {1.52129772 }} ,
					{ 74 ,  {1.53740023 }} ,
					{ 75 ,  {1.50282351 }} ,
					{ 80 ,  {1.07654708 }} ,
					{ 81 ,  {1.081892 }} ,
					{ 82 ,  {1.02748435 }} ,
					{ 85 ,  {1.15778604 }} ,
					{ 86 ,  {1.10634412 }} ,
					{ 89 ,  {1.27948723 }} ,
					{ 90 ,  {1.26722342 }} ,
					{ 91 ,  {1.14405643 }} ,
					{ 93 ,  {1.49322332 }} ,
					{ 94 ,  {1.46708262 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_3 <= 1.0818820148706436) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( (scaler_output_4 <= -1.0424461364746094) ? ( (scaler_output_3 <= -0.2286939173936844) ? ( 9 ) : ( (scaler_output_3 <= 1.3414755463600159) ? ( (scaler_output_4 <= -1.561489462852478) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (scaler_output_2 <= -0.3589157611131668) ? ( (scaler_output_2 <= -1.3878793120384216) ? ( (scaler_output_4 <= -0.385757002979517) ? ( (scaler_output_5 <= -0.044081687927246094) ? ( 19 ) : ( 20 ) ) : ( (scaler_output_5 <= 0.2587533965706825) ? ( 22 ) : ( (scaler_output_5 <= 1.0123527646064758) ? ( (scaler_output_2 <= -1.6768755912780762) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_output_3 <= 0.9923432171344757) ? ( (scaler_output_4 <= 1.1248639225959778) ? ( (scaler_output_3 <= 0.4673061817884445) ? ( (scaler_output_5 <= 0.8961135149002075) ? ( (scaler_output_2 <= -0.5124766528606415) ? ( (scaler_output_4 <= -0.16301528736948967) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( 37 ) ) : ( 38 ) ) : ( 39 ) ) : ( (scaler_output_2 <= -1.098024696111679) ? ( 41 ) : ( (scaler_output_2 <= -0.745602011680603) ? ( 43 ) : ( 44 ) ) ) ) ) : ( (scaler_output_3 <= -1.3856977820396423) ? ( 46 ) : ( (scaler_output_3 <= 0.0912780585931614) ? ( (scaler_output_4 <= -0.23049773275852203) ? ( 49 ) : ( (scaler_output_5 <= 1.26242196559906) ? ( (scaler_output_2 <= 0.27068284153938293) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_3 <= -0.05344513326417655) ? ( (scaler_output_5 <= 1.4566499590873718) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) ) : ( (scaler_output_4 <= 0.693148285150528) ? ( (scaler_output_5 <= -0.7423070818185806) ? ( (scaler_output_3 <= 0.824400007724762) ? ( 62 ) : ( (scaler_output_2 <= 0.31849785847589374) ? ( 64 ) : ( 65 ) ) ) : ( (scaler_output_3 <= 0.8429697751998901) ? ( 67 ) : ( (scaler_output_5 <= -0.029803797602653503) ? ( 69 ) : ( 70 ) ) ) ) : ( (scaler_output_2 <= 0.6514129713177681) ? ( (scaler_output_4 <= 0.8874532282352448) ? ( 73 ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) ) : ( (scaler_output_4 <= 1.0049840807914734) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_4 <= 0.49538497254252434) ? ( (scaler_output_2 <= 1.9248971939086914) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( (scaler_output_4 <= -0.3880885704420507) ? ( (scaler_output_3 <= -0.5656808018684387) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_4 <= 0.47235190123319626) ? ( (scaler_output_4 <= 0.07374501833692193) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) ) : ( (scaler_output_5 <= -0.36508262157440186) ? ( 93 ) : ( 94 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_9
		
	
		namespace EXT_SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.37516757 }} ,
					{ 9 ,  {1.53596709 }} ,
					{ 10 ,  {1.52787455 }} ,
					{ 12 ,  {1.57058399 }} ,
					{ 13 ,  {1.56967904 }} ,
					{ 14 ,  {1.45186094 }} ,
					{ 18 ,  {1.16100714 }} ,
					{ 19 ,  {1.14405643 }} ,
					{ 20 ,  {1.11561476 }} ,
					{ 24 ,  {1.14091625 }} ,
					{ 25 ,  {1.15778604 }} ,
					{ 26 ,  {1.10634412 }} ,
					{ 30 ,  {1.41074394 }} ,
					{ 31 ,  {1.49656192 }} ,
					{ 33 ,  {1.36789414 }} ,
					{ 34 ,  {1.38449452 }} ,
					{ 37 ,  {1.27948723 }} ,
					{ 38 ,  {1.27887759 }} ,
					{ 39 ,  {1.26722342 }} ,
					{ 46 ,  {1.55432885 }} ,
					{ 48 ,  {1.56848669 }} ,
					{ 50 ,  {1.56460912 }} ,
					{ 51 ,  {1.56427232 }} ,
					{ 53 ,  {1.56232281 }} ,
					{ 54 ,  {1.55610197 }} ,
					{ 55 ,  {1.53671123 }} ,
					{ 57 ,  {1.47795145 }} ,
					{ 61 ,  {1.5278957 }} ,
					{ 63 ,  {1.53405928 }} ,
					{ 64 ,  {1.53181558 }} ,
					{ 66 ,  {1.52485398 }} ,
					{ 67 ,  {1.52208363 }} ,
					{ 70 ,  {1.53095005 }} ,
					{ 72 ,  {1.53740023 }} ,
					{ 73 ,  {1.5352537 }} ,
					{ 74 ,  {1.54375025 }} ,
					{ 77 ,  {1.3413442 }} ,
					{ 78 ,  {1.34636148 }} ,
					{ 81 ,  {1.34984299 }} ,
					{ 84 ,  {1.46424873 }} ,
					{ 85 ,  {1.46708262 }} ,
					{ 86 ,  {1.47832813 }} ,
					{ 89 ,  {1.48471099 }} ,
					{ 90 ,  {1.4771264 }} ,
					{ 93 ,  {1.49322332 }} ,
					{ 94 ,  {1.48605726 }} ,
					{ 96 ,  {1.50320739 }} ,
					{ 97 ,  {1.50282351 }} ,
					{ 98 ,  {1.081892 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6357912421226501) ? ( (scaler_output_4 <= -1.7129992842674255) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_2 <= -1.0801426768302917) ? ( (scaler_output_2 <= -1.2143871784210205) ? ( (scaler_output_4 <= -0.2431742437183857) ? ( (scaler_output_4 <= -0.5142303854227066) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_5 <= 0.7895824015140533) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) : ( (scaler_output_3 <= -1.5181928873062134) ? ( (scaler_output_3 <= -1.5474199056625366) ? ( (scaler_output_4 <= 0.6049727499485016) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_3 <= -0.5656808018684387) ? ( (scaler_output_4 <= -1.2074021995067596) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_2 <= -0.27185211330652237) ? ( (scaler_output_3 <= -1.1872327327728271) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_5 <= -0.20964401960372925) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_5 <= 0.054462283849716187) ? ( (scaler_output_4 <= 0.701842172536999) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) ) ) ) : ( (scaler_output_2 <= 1.6818326115608215) ? ( (scaler_output_2 <= 0.12355757132172585) ? ( (scaler_output_2 <= -1.0938920080661774) ? ( (scaler_output_5 <= 1.35083669424057) ? ( (scaler_output_2 <= -1.3772780299186707) ? ( (scaler_output_5 <= -0.7473860308527946) ? ( 46 ) : ( (scaler_output_3 <= 0.020498842000961304) ? ( 48 ) : ( (scaler_output_2 <= -1.5053826570510864) ? ( 50 ) : ( 51 ) ) ) ) : ( (scaler_output_5 <= 0.3301943149417639) ? ( 53 ) : ( 54 ) ) ) : ( 55 ) ) : ( (scaler_output_4 <= -0.4411488436162472) ? ( 57 ) : ( (scaler_output_4 <= 0.8798036277294159) ? ( (scaler_output_2 <= -0.618596076965332) ? ( (scaler_output_4 <= 0.11353424564003944) ? ( 61 ) : ( (scaler_output_2 <= -0.7733035981655121) ? ( 63 ) : ( 64 ) ) ) : ( (scaler_output_4 <= 0.5786613970994949) ? ( 66 ) : ( 67 ) ) ) : ( (scaler_output_4 <= 1.5360115766525269) ? ( (scaler_output_5 <= -1.084018588066101) ? ( 70 ) : ( (scaler_output_4 <= 1.2545078992843628) ? ( 72 ) : ( 73 ) ) ) : ( 74 ) ) ) ) ) : ( (scaler_output_4 <= -0.8606774806976318) ? ( (scaler_output_4 <= -1.1783683598041534) ? ( 77 ) : ( 78 ) ) : ( (scaler_output_3 <= 0.12828844785690308) ? ( (scaler_output_4 <= -0.013599991798400879) ? ( 81 ) : ( (scaler_output_5 <= 1.332825243473053) ? ( (scaler_output_4 <= 0.8666970729827881) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) ) : ( (scaler_output_2 <= 0.6308040916919708) ? ( (scaler_output_3 <= 1.0350512862205505) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_3 <= 0.2843315601348877) ? ( (scaler_output_5 <= -0.10487937927246094) ? ( 93 ) : ( 94 ) ) : ( (scaler_output_5 <= -0.5720314793288708) ? ( 96 ) : ( 97 ) ) ) ) ) ) ) : ( 98 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_10
		
	
		namespace EXT_SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.38342473 }} ,
					{ 3 ,  {0.48486692 }} ,
					{ 7 ,  {0.80791092 }} ,
					{ 8 ,  {0.70507147 }} ,
					{ 12 ,  {1.14091625 }} ,
					{ 14 ,  {1.1082904 }} ,
					{ 15 ,  {1.10634412 }} ,
					{ 16 ,  {1.1968265 }} ,
					{ 18 ,  {1.53671123 }} ,
					{ 21 ,  {1.36871758 }} ,
					{ 22 ,  {1.40929984 }} ,
					{ 24 ,  {1.3413442 }} ,
					{ 25 ,  {1.31432562 }} ,
					{ 31 ,  {1.53596709 }} ,
					{ 33 ,  {1.55432885 }} ,
					{ 34 ,  {1.54561918 }} ,
					{ 37 ,  {1.56427232 }} ,
					{ 40 ,  {1.56967904 }} ,
					{ 41 ,  {1.57058399 }} ,
					{ 42 ,  {1.56848669 }} ,
					{ 44 ,  {1.55610197 }} ,
					{ 45 ,  {1.56232281 }} ,
					{ 47 ,  {1.49902739 }} ,
					{ 50 ,  {1.52485398 }} ,
					{ 51 ,  {1.5278957 }} ,
					{ 52 ,  {1.5352537 }} ,
					{ 55 ,  {1.38449452 }} ,
					{ 59 ,  {1.48725785 }} ,
					{ 60 ,  {1.49292179 }} ,
					{ 61 ,  {1.46088901 }} ,
					{ 62 ,  {1.42518022 }} ,
					{ 64 ,  {1.4771264 }} ,
					{ 67 ,  {1.53256929 }} ,
					{ 70 ,  {1.51266196 }} ,
					{ 71 ,  {1.50778907 }} ,
					{ 74 ,  {1.52169424 }} ,
					{ 75 ,  {1.52208363 }} ,
					{ 76 ,  {1.52129772 }} ,
					{ 77 ,  {1.48471099 }} ,
					{ 81 ,  {1.07654708 }} ,
					{ 82 ,  {1.02748435 }} ,
					{ 86 ,  {1.27887759 }} ,
					{ 87 ,  {1.27948723 }} ,
					{ 88 ,  {1.15778604 }} ,
					{ 89 ,  {1.14405643 }} ,
					{ 91 ,  {1.34636148 }} ,
					{ 95 ,  {1.47193903 }} ,
					{ 96 ,  {1.46708262 }} ,
					{ 97 ,  {1.47832813 }} ,
					{ 99 ,  {1.50990015 }} ,
					{ 100 ,  {1.49496626 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_3 <= -0.9540339708328247) ? ( (scaler_output_4 <= -1.4776207208633423) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= -0.2286939173936844) ? ( (scaler_output_3 <= -0.3915177583694458) ? ( (scaler_output_4 <= -1.350892961025238) ? ( 12 ) : ( (scaler_output_2 <= 1.1446196734905243) ? ( 14 ) : ( 15 ) ) ) : ( 16 ) ) : ( (scaler_output_2 <= -1.2885634303092957) ? ( 18 ) : ( (scaler_output_2 <= -0.4061509147286415) ? ( (scaler_output_3 <= 0.6646461933851242) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_4 <= -1.3216150999069214) ? ( 24 ) : ( 25 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.7946660220623016) ? ( (scaler_output_2 <= -0.3589157611131668) ? ( (scaler_output_2 <= -0.767800509929657) ? ( (scaler_output_4 <= -0.12875012680888176) ? ( (scaler_output_2 <= -1.5464340448379517) ? ( 31 ) : ( (scaler_output_3 <= 1.1353956162929535) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_2 <= -1.3772780299186707) ? ( (scaler_output_5 <= 0.2587533965706825) ? ( 37 ) : ( (scaler_output_3 <= -0.551594689488411) ? ( (scaler_output_3 <= -1.1564879417419434) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) : ( (scaler_output_3 <= 0.8681400045752525) ? ( 44 ) : ( 45 ) ) ) ) : ( (scaler_output_3 <= -0.39929947175551206) ? ( 47 ) : ( (scaler_output_2 <= -0.48682039976119995) ? ( (scaler_output_3 <= 0.23009626648854464) ? ( 50 ) : ( 51 ) ) : ( 52 ) ) ) ) : ( (scaler_output_3 <= 0.17564557399600744) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 55 ) : ( (scaler_output_3 <= -0.06708178017288446) ? ( (scaler_output_4 <= 1.1704736649990082) ? ( (scaler_output_3 <= -0.33935151994228363) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) : ( 62 ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 64 ) : ( (scaler_output_2 <= 0.5117313712835312) ? ( (scaler_output_2 <= -0.19583164900541306) ? ( 67 ) : ( (scaler_output_4 <= 0.434556744992733) ? ( (scaler_output_3 <= 1.5382841229438782) ? ( 70 ) : ( 71 ) ) : ( (scaler_output_2 <= 0.13620396330952644) ? ( (scaler_output_3 <= 0.5218991041183472) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) ) : ( 77 ) ) ) ) ) : ( (scaler_output_3 <= -0.37791891396045685) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_2 <= 1.9923570156097412) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_5 <= 0.011746138334274292) ? ( (scaler_output_2 <= 1.582097351551056) ? ( (scaler_output_3 <= -1.224008947610855) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) : ( 89 ) ) ) : ( (scaler_output_4 <= -0.6569682210683823) ? ( 91 ) : ( (scaler_output_2 <= 1.3485813736915588) ? ( (scaler_output_5 <= 1.1722607612609863) ? ( (scaler_output_4 <= 0.38377706706523895) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) : ( (scaler_output_3 <= 0.8845424950122833) ? ( 99 ) : ( 100 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_11
		
	
		namespace EXT_SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.80791092 }} ,
					{ 5 ,  {0.48486692 }} ,
					{ 6 ,  {0.37516757 }} ,
					{ 8 ,  {1.40929984 }} ,
					{ 9 ,  {1.14091625 }} ,
					{ 14 ,  {1.11561476 }} ,
					{ 15 ,  {1.16100714 }} ,
					{ 18 ,  {1.53596709 }} ,
					{ 19 ,  {1.45186094 }} ,
					{ 20 ,  {1.38449452 }} ,
					{ 23 ,  {1.36871758 }} ,
					{ 25 ,  {1.3413442 }} ,
					{ 26 ,  {1.31432562 }} ,
					{ 31 ,  {1.57058399 }} ,
					{ 32 ,  {1.56848669 }} ,
					{ 34 ,  {1.56427232 }} ,
					{ 35 ,  {1.56460912 }} ,
					{ 37 ,  {1.47795145 }} ,
					{ 41 ,  {1.52787455 }} ,
					{ 43 ,  {1.54561918 }} ,
					{ 44 ,  {1.54158957 }} ,
					{ 48 ,  {1.53181558 }} ,
					{ 49 ,  {1.53405928 }} ,
					{ 51 ,  {1.52485398 }} ,
					{ 53 ,  {1.5278957 }} ,
					{ 54 ,  {1.52762941 }} ,
					{ 56 ,  {1.53256929 }} ,
					{ 57 ,  {1.54404651 }} ,
					{ 58 ,  {1.49902739 }} ,
					{ 62 ,  {1.46424873 }} ,
					{ 63 ,  {1.46088901 }} ,
					{ 64 ,  {1.42518022 }} ,
					{ 68 ,  {1.48471099 }} ,
					{ 71 ,  {1.50778907 }} ,
					{ 72 ,  {1.51266196 }} ,
					{ 73 ,  {1.50320739 }} ,
					{ 74 ,  {1.4771264 }} ,
					{ 75 ,  {1.52129772 }} ,
					{ 80 ,  {1.07654708 }} ,
					{ 81 ,  {1.081892 }} ,
					{ 84 ,  {1.1082904 }} ,
					{ 86 ,  {1.1968265 }} ,
					{ 87 ,  {1.15778604 }} ,
					{ 89 ,  {1.14405643 }} ,
					{ 93 ,  {1.27948723 }} ,
					{ 94 ,  {1.27887759 }} ,
					{ 95 ,  {1.26722342 }} ,
					{ 96 ,  {1.34984299 }} ,
					{ 97 ,  {1.46708262 }} ,
					{ 99 ,  {1.34636148 }} ,
					{ 102 ,  {1.48605726 }} ,
					{ 104 ,  {1.49322332 }} ,
					{ 105 ,  {1.49496626 }} ,
					{ 106 ,  {1.50990015 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.481613039970398) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_3 <= -1.0840756297111511) ? ( 3 ) : ( (scaler_output_2 <= 0.3028857856988907) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_5 <= -0.03826737403869629) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_2 <= 0.6816338896751404) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_5 <= 0.5453606434166431) ? ( (scaler_output_4 <= -0.0005476325750350952) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_4 <= 0.8441102802753448) ? ( (scaler_output_4 <= -0.019264429807662964) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (scaler_output_4 <= -1.089585781097412) ? ( (scaler_output_4 <= -1.4348923563957214) ? ( 23 ) : ( (scaler_output_5 <= -0.5445553362369537) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_2 <= -0.2323714792728424) ? ( (scaler_output_2 <= -1.3878793120384216) ? ( (scaler_output_2 <= -1.5924274921417236) ? ( (scaler_output_2 <= -1.645898163318634) ? ( 31 ) : ( 32 ) ) : ( (scaler_output_5 <= 0.5319756343960762) ? ( 34 ) : ( 35 ) ) ) : ( (scaler_output_4 <= -0.6497811824083328) ? ( 37 ) : ( (scaler_output_4 <= 0.824860692024231) ? ( (scaler_output_2 <= -0.8880466222763062) ? ( (scaler_output_2 <= -1.204143762588501) ? ( 41 ) : ( (scaler_output_5 <= 0.8835726082324982) ? ( 43 ) : ( 44 ) ) ) : ( (scaler_output_3 <= 1.0105068981647491) ? ( (scaler_output_2 <= -0.6530574858188629) ? ( (scaler_output_5 <= -0.2228761911392212) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_3 <= 0.10797195218037814) ? ( 51 ) : ( (scaler_output_2 <= -0.5124766528606415) ? ( 53 ) : ( 54 ) ) ) ) : ( (scaler_output_4 <= 0.1924842670559883) ? ( 56 ) : ( 57 ) ) ) ) : ( 58 ) ) ) ) : ( (scaler_output_3 <= 0.24249462690204382) ? ( (scaler_output_3 <= -0.16309745702892542) ? ( (scaler_output_4 <= 1.1107220649719238) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) : ( (scaler_output_4 <= 0.5141924917697906) ? ( (scaler_output_5 <= -0.7400449365377426) ? ( (scaler_output_3 <= 0.824400007724762) ? ( 68 ) : ( (scaler_output_4 <= 0.1966354176402092) ? ( (scaler_output_5 <= -0.991826981306076) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) ) : ( 74 ) ) : ( 75 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.1398674175143242) ? ( (scaler_output_5 <= 0.8137871325016022) ? ( (scaler_output_5 <= -0.7887826561927795) ? ( (scaler_output_2 <= 1.9248971939086914) ? ( 80 ) : ( 81 ) ) : ( (scaler_output_4 <= -0.7149047553539276) ? ( (scaler_output_3 <= -0.7117037177085876) ? ( 84 ) : ( (scaler_output_2 <= 1.182139366865158) ? ( 86 ) : ( 87 ) ) ) : ( (scaler_output_3 <= -1.5442689657211304) ? ( 89 ) : ( (scaler_output_3 <= -0.43011197447776794) ? ( (scaler_output_5 <= 0.054462283849716187) ? ( (scaler_output_4 <= 0.701842172536999) ? ( 93 ) : ( 94 ) ) : ( 95 ) ) : ( 96 ) ) ) ) ) : ( 97 ) ) : ( (scaler_output_4 <= -0.1691150963306427) ? ( 99 ) : ( (scaler_output_4 <= 1.545040786266327) ? ( (scaler_output_2 <= 1.015217512845993) ? ( 102 ) : ( (scaler_output_3 <= 0.5781174749135971) ? ( 104 ) : ( 105 ) ) ) : ( 106 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_12
		
	
		namespace EXT_SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {0.80791092 }} ,
					{ 5 ,  {0.48486692 }} ,
					{ 6 ,  {0.37516757 }} ,
					{ 8 ,  {0.61001684 }} ,
					{ 11 ,  {1.14091625 }} ,
					{ 12 ,  {1.081892 }} ,
					{ 14 ,  {1.35009011 }} ,
					{ 15 ,  {1.40929984 }} ,
					{ 21 ,  {1.53671123 }} ,
					{ 22 ,  {1.53596709 }} ,
					{ 23 ,  {1.42518022 }} ,
					{ 26 ,  {1.11561476 }} ,
					{ 28 ,  {1.1082904 }} ,
					{ 29 ,  {1.10634412 }} ,
					{ 30 ,  {1.34636148 }} ,
					{ 32 ,  {1.16100714 }} ,
					{ 37 ,  {1.52787455 }} ,
					{ 38 ,  {1.56967904 }} ,
					{ 42 ,  {1.45186094 }} ,
					{ 43 ,  {1.46088901 }} ,
					{ 44 ,  {1.38449452 }} ,
					{ 48 ,  {1.49656192 }} ,
					{ 49 ,  {1.49902739 }} ,
					{ 50 ,  {1.48725785 }} ,
					{ 51 ,  {1.46424873 }} ,
					{ 52 ,  {1.27948723 }} ,
					{ 57 ,  {1.56848669 }} ,
					{ 59 ,  {1.56460912 }} ,
					{ 60 ,  {1.56427232 }} ,
					{ 61 ,  {1.55610197 }} ,
					{ 63 ,  {1.50778907 }} ,
					{ 68 ,  {1.53256929 }} ,
					{ 69 ,  {1.53181558 }} ,
					{ 70 ,  {1.52762941 }} ,
					{ 71 ,  {1.52169424 }} ,
					{ 75 ,  {1.54561918 }} ,
					{ 76 ,  {1.54404651 }} ,
					{ 77 ,  {1.54158957 }} ,
					{ 79 ,  {1.52485398 }} ,
					{ 81 ,  {1.54375025 }} ,
					{ 82 ,  {1.53740023 }} ,
					{ 86 ,  {1.48605726 }} ,
					{ 87 ,  {1.48471099 }} ,
					{ 89 ,  {1.50282351 }} ,
					{ 90 ,  {1.49292179 }} ,
					{ 93 ,  {1.50320739 }} ,
					{ 95 ,  {1.51266196 }} ,
					{ 96 ,  {1.50990015 }} ,
					{ 97 ,  {1.49496626 }} ,
					{ 99 ,  {1.07654708 }} ,
					{ 100 ,  {1.02748435 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.1435618996620178) ? ( (scaler_output_3 <= -0.80410435795784) ? ( (scaler_output_5 <= -0.8493432998657227) ? ( 3 ) : ( (scaler_output_4 <= -1.6696742177009583) ? ( 5 ) : ( 6 ) ) ) : ( (scaler_output_4 <= -1.7431707978248596) ? ( 8 ) : ( (scaler_output_3 <= 0.6330329701304436) ? ( (scaler_output_4 <= -1.41387277841568) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_3 <= 1.3414755463600159) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (scaler_output_2 <= 1.7969666719436646) ? ( (scaler_output_4 <= -0.4017176181077957) ? ( (scaler_output_2 <= 0.09435927774757147) ? ( (scaler_output_2 <= -0.6898520225659013) ? ( (scaler_output_4 <= -0.8725265860557556) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (scaler_output_3 <= 0.027333766222000122) ? ( (scaler_output_5 <= 0.24834014847874641) ? ( 26 ) : ( (scaler_output_5 <= 0.8350425958633423) ? ( 28 ) : ( 29 ) ) ) : ( 30 ) ) ) : ( (scaler_output_3 <= -1.7070884108543396) ? ( 32 ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_2 <= 1.0815918743610382) ? ( (scaler_output_2 <= -1.2143871784210205) ? ( (scaler_output_5 <= 0.8157296776771545) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_3 <= -1.085380733013153) ? ( (scaler_output_5 <= 1.1671010255813599) ? ( (scaler_output_4 <= 1.111530750989914) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) : ( (scaler_output_2 <= 0.16916202008724213) ? ( (scaler_output_3 <= -0.6868596374988556) ? ( (scaler_output_5 <= -0.14239919185638428) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) : ( 51 ) ) ) ) : ( 52 ) ) : ( (scaler_output_2 <= 0.18122109957039356) ? ( (scaler_output_2 <= -1.19354248046875) ? ( (scaler_output_2 <= -1.3772780299186707) ? ( (scaler_output_2 <= -1.5924274921417236) ? ( 57 ) : ( (scaler_output_2 <= -1.5053826570510864) ? ( 59 ) : ( 60 ) ) ) : ( 61 ) ) : ( (scaler_output_4 <= -0.27108655124902725) ? ( 63 ) : ( (scaler_output_5 <= 0.35247907042503357) ? ( (scaler_output_4 <= 0.7820532917976379) ? ( (scaler_output_4 <= 0.46865326166152954) ? ( (scaler_output_4 <= 0.10349220782518387) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) : ( 71 ) ) : ( (scaler_output_4 <= 0.38614706695079803) ? ( (scaler_output_5 <= 1.0797998309135437) ? ( (scaler_output_4 <= 0.10831808298826218) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( (scaler_output_3 <= 0.5796983548207209) ? ( 79 ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( 81 ) : ( 82 ) ) ) ) ) ) ) : ( (scaler_output_3 <= 0.6569289267063141) ? ( (scaler_output_4 <= 0.6813516318798065) ? ( (scaler_output_3 <= 0.3486781120300293) ? ( 86 ) : ( 87 ) ) : ( (scaler_output_5 <= 0.7148919887840748) ? ( 89 ) : ( 90 ) ) ) : ( (scaler_output_5 <= 0.4850558154284954) ? ( (scaler_output_5 <= -1.113603562116623) ? ( 93 ) : ( (scaler_output_2 <= 0.8816166073083878) ? ( 95 ) : ( 96 ) ) ) : ( 97 ) ) ) ) ) ) ) : ( (scaler_output_2 <= 1.9923570156097412) ? ( 99 ) : ( 100 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_13
		
	
		namespace EXT_SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 3 ,  {1.40929984 }} ,
					{ 4 ,  {1.14091625 }} ,
					{ 7 ,  {0.70507147 }} ,
					{ 8 ,  {0.80791092 }} ,
					{ 10 ,  {0.48486692 }} ,
					{ 12 ,  {0.37516757 }} ,
					{ 13 ,  {0.38342473 }} ,
					{ 18 ,  {1.16100714 }} ,
					{ 19 ,  {1.11561476 }} ,
					{ 20 ,  {1.53596709 }} ,
					{ 22 ,  {1.31432562 }} ,
					{ 24 ,  {1.36789414 }} ,
					{ 28 ,  {1.52787455 }} ,
					{ 29 ,  {1.53671123 }} ,
					{ 31 ,  {1.56967904 }} ,
					{ 33 ,  {1.56460912 }} ,
					{ 34 ,  {1.56232281 }} ,
					{ 37 ,  {1.41074394 }} ,
					{ 38 ,  {1.46088901 }} ,
					{ 42 ,  {1.49656192 }} ,
					{ 43 ,  {1.49902739 }} ,
					{ 45 ,  {1.47795145 }} ,
					{ 50 ,  {1.53405928 }} ,
					{ 51 ,  {1.5352537 }} ,
					{ 54 ,  {1.52762941 }} ,
					{ 55 ,  {1.5278957 }} ,
					{ 57 ,  {1.53181558 }} ,
					{ 58 ,  {1.53256929 }} ,
					{ 60 ,  {1.53095005 }} ,
					{ 61 ,  {1.52169424 }} ,
					{ 64 ,  {1.54404651 }} ,
					{ 65 ,  {1.54375025 }} ,
					{ 66 ,  {1.53740023 }} ,
					{ 70 ,  {1.52129772 }} ,
					{ 71 ,  {1.51266196 }} ,
					{ 73 ,  {1.48471099 }} ,
					{ 74 ,  {1.50320739 }} ,
					{ 78 ,  {1.46764868 }} ,
					{ 79 ,  {1.46424873 }} ,
					{ 80 ,  {1.4771264 }} ,
					{ 82 ,  {1.49292179 }} ,
					{ 83 ,  {1.48605726 }} ,
					{ 88 ,  {1.14405643 }} ,
					{ 91 ,  {1.27887759 }} ,
					{ 92 ,  {1.27948723 }} ,
					{ 93 ,  {1.26722342 }} ,
					{ 94 ,  {1.07654708 }} ,
					{ 95 ,  {1.1082904 }} ,
					{ 97 ,  {1.34636148 }} ,
					{ 100 ,  {1.49496626 }} ,
					{ 101 ,  {1.50282351 }} ,
					{ 102 ,  {1.47193903 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_2 <= -0.626136414706707) ? ( (scaler_output_2 <= -1.1455585360527039) ? ( 3 ) : ( 4 ) ) : ( (scaler_output_5 <= -0.7836979031562805) ? ( (scaler_output_3 <= -1.1316539645195007) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_5 <= -0.14987096190452576) ? ( 10 ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (scaler_output_2 <= 0.84055495262146) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( (scaler_output_5 <= 0.5780204124748707) ? ( (scaler_output_2 <= 0.0012792721390724182) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_4 <= -1.1697484254837036) ? ( 22 ) : ( (scaler_output_5 <= -1.5956872701644897) ? ( 24 ) : ( (scaler_output_2 <= -1.113467812538147) ? ( (scaler_output_4 <= -0.3577289581298828) ? ( (scaler_output_5 <= 1.1037617325782776) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_3 <= -0.5843944102525711) ? ( 31 ) : ( (scaler_output_4 <= 0.13226787745952606) ? ( 33 ) : ( 34 ) ) ) ) : ( (scaler_output_3 <= -1.085380733013153) ? ( (scaler_output_2 <= -0.5289925336837769) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_2 <= 0.11517623253166676) ? ( (scaler_output_3 <= -0.5055505260825157) ? ( (scaler_output_5 <= -0.14239919185638428) ? ( 42 ) : ( 43 ) ) : ( (scaler_output_4 <= -0.45119088143110275) ? ( 45 ) : ( (scaler_output_5 <= 0.7618807554244995) ? ( (scaler_output_2 <= -0.19583164900541306) ? ( (scaler_output_3 <= 0.1530424728989601) ? ( (scaler_output_3 <= -0.05914175510406494) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_3 <= 0.4673061817884445) ? ( (scaler_output_5 <= -0.9981440901756287) ? ( 54 ) : ( 55 ) ) : ( (scaler_output_3 <= 1.0656621158123016) ? ( 57 ) : ( 58 ) ) ) ) : ( (scaler_output_5 <= -0.39033377170562744) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( (scaler_output_5 <= 1.1773918867111206) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) ) ) : ( (scaler_output_5 <= -0.7400449365377426) ? ( (scaler_output_2 <= 0.5117313712835312) ? ( (scaler_output_3 <= 1.1634110808372498) ? ( 70 ) : ( 71 ) ) : ( (scaler_output_2 <= 0.6308040916919708) ? ( 73 ) : ( 74 ) ) ) : ( (scaler_output_4 <= 0.6216000318527222) ? ( (scaler_output_3 <= 0.7074878662824631) ? ( (scaler_output_2 <= 0.48907501995563507) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (scaler_output_2 <= 0.5178178548812866) ? ( 82 ) : ( 83 ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.2100047916173935) ? ( (scaler_output_3 <= -0.8670860826969147) ? ( (scaler_output_2 <= 1.6569893956184387) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( 88 ) : ( (scaler_output_5 <= 0.054462283849716187) ? ( (scaler_output_3 <= -1.224008947610855) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) : ( 94 ) ) : ( 95 ) ) : ( (scaler_output_4 <= -0.6569682210683823) ? ( 97 ) : ( (scaler_output_3 <= 1.2354365587234497) ? ( (scaler_output_4 <= 1.266200840473175) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_14
		
	
		namespace EXT_SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 2 ,  {0.61001684 }} ,
					{ 3 ,  {0.48486692 }} ,
					{ 7 ,  {0.70507147 }} ,
					{ 11 ,  {1.1082904 }} ,
					{ 13 ,  {1.14091625 }} ,
					{ 14 ,  {1.15778604 }} ,
					{ 15 ,  {1.1968265 }} ,
					{ 16 ,  {1.081892 }} ,
					{ 18 ,  {1.53671123 }} ,
					{ 20 ,  {1.34636148 }} ,
					{ 21 ,  {1.40929984 }} ,
					{ 26 ,  {1.53596709 }} ,
					{ 30 ,  {1.57058399 }} ,
					{ 31 ,  {1.56967904 }} ,
					{ 32 ,  {1.56848669 }} ,
					{ 35 ,  {1.56460912 }} ,
					{ 36 ,  {1.56427232 }} ,
					{ 37 ,  {1.56232281 }} ,
					{ 40 ,  {1.45186094 }} ,
					{ 42 ,  {1.49656192 }} ,
					{ 43 ,  {1.49902739 }} ,
					{ 47 ,  {1.53181558 }} ,
					{ 49 ,  {1.5278957 }} ,
					{ 50 ,  {1.52762941 }} ,
					{ 52 ,  {1.5352537 }} ,
					{ 53 ,  {1.53256929 }} ,
					{ 55 ,  {1.54158957 }} ,
					{ 57 ,  {1.54561918 }} ,
					{ 58 ,  {1.54375025 }} ,
					{ 61 ,  {1.27887759 }} ,
					{ 62 ,  {1.38449452 }} ,
					{ 65 ,  {1.36789414 }} ,
					{ 67 ,  {1.42518022 }} ,
					{ 69 ,  {1.46424873 }} ,
					{ 70 ,  {1.46088901 }} ,
					{ 73 ,  {1.53095005 }} ,
					{ 74 ,  {1.52208363 }} ,
					{ 78 ,  {1.47193903 }} ,
					{ 79 ,  {1.4771264 }} ,
					{ 80 ,  {1.48471099 }} ,
					{ 83 ,  {1.50320739 }} ,
					{ 84 ,  {1.50282351 }} ,
					{ 85 ,  {1.48605726 }} ,
					{ 90 ,  {1.02748435 }} ,
					{ 91 ,  {1.07654708 }} ,
					{ 92 ,  {1.14405643 }} ,
					{ 93 ,  {1.26722342 }} ,
					{ 95 ,  {1.34984299 }} ,
					{ 97 ,  {1.46708262 }} ,
					{ 99 ,  {1.49496626 }} ,
					{ 100 ,  {1.49322332 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.6296412795782089) ? ( 2 ) : ( 3 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( (scaler_output_3 <= -0.9788162112236023) ? ( 7 ) : ( (scaler_output_3 <= -0.08898759633302689) ? ( (scaler_output_3 <= -0.4480481743812561) ? ( (scaler_output_3 <= -0.7768212556838989) ? ( 11 ) : ( (scaler_output_4 <= -1.2074021995067596) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) : ( 16 ) ) ) : ( (scaler_output_3 <= 0.5215956568717957) ? ( 18 ) : ( (scaler_output_3 <= 1.0383065044879913) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_2 <= 1.1021127700805664) ? ( (scaler_output_2 <= -0.15516800433397293) ? ( (scaler_output_2 <= -1.1985815167427063) ? ( (scaler_output_4 <= -0.5003117173910141) ? ( 26 ) : ( (scaler_output_2 <= -1.5924274921417236) ? ( (scaler_output_3 <= -0.551594689488411) ? ( (scaler_output_2 <= -1.6768755912780762) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (scaler_output_2 <= -1.3720736503601074) ? ( (scaler_output_3 <= 0.42866186797618866) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) ) ) : ( (scaler_output_3 <= -0.4059561099857092) ? ( (scaler_output_2 <= -0.9020907878875732) ? ( 40 ) : ( (scaler_output_4 <= 0.6498354375362396) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_5 <= -0.013786762952804565) ? ( (scaler_output_2 <= -0.3807009756565094) ? ( (scaler_output_2 <= -0.6530574858188629) ? ( 47 ) : ( (scaler_output_4 <= 0.4007360674440861) ? ( 49 ) : ( 50 ) ) ) : ( (scaler_output_3 <= 0.8735227212309837) ? ( 52 ) : ( 53 ) ) ) : ( (scaler_output_2 <= -0.9824927151203156) ? ( 55 ) : ( (scaler_output_2 <= -0.5337978973984718) ? ( 57 ) : ( 58 ) ) ) ) ) ) : ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_3 <= -1.3971152901649475) ? ( 61 ) : ( 62 ) ) : ( (scaler_output_3 <= 0.07764141168445349) ? ( (scaler_output_5 <= -1.541186511516571) ? ( 65 ) : ( (scaler_output_4 <= -0.0637848973274231) ? ( 67 ) : ( (scaler_output_4 <= 1.1107220649719238) ? ( 69 ) : ( 70 ) ) ) ) : ( (scaler_output_2 <= 0.12907753512263298) ? ( (scaler_output_2 <= 0.014571147039532661) ? ( 73 ) : ( 74 ) ) : ( (scaler_output_4 <= 0.22938552498817444) ? ( (scaler_output_4 <= -0.07951180636882782) ? ( (scaler_output_3 <= 1.5293429493904114) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( (scaler_output_5 <= 0.7407480664551258) ? ( (scaler_output_2 <= 0.8727086186408997) ? ( 83 ) : ( 84 ) ) : ( 85 ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.6523826867341995) ? ( (scaler_output_5 <= 0.2286546528339386) ? ( (scaler_output_5 <= -0.30970026552677155) ? ( (scaler_output_5 <= -1.1084599196910858) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) : ( (scaler_output_2 <= 1.270848035812378) ? ( 95 ) : ( (scaler_output_3 <= 0.026924937963485718) ? ( 97 ) : ( (scaler_output_4 <= 1.307365357875824) ? ( 99 ) : ( 100 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				EXT_SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable = lAggregatedTable;
	
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
