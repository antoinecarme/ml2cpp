// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor_Pipeline
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_Pipeline_freidman1.exe ml2cpp-demo_RandomForestRegressor_Pipeline_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.5629846484809591 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.45606442423375926 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.47113817481474773 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.533968020094518 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.4780936262373869 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.5682849224172329 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.47914374714280494 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.4594152477223205 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.4901106996809651 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.5378806933707533 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.5629846484809591 ) / 0.2583714683396337 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.45606442423375926 ) / 0.2878721730712705 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.47113817481474773 ) / 0.3109216791553051 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.533968020094518 ) / 0.2826199867400281 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.4780936262373869 ) / 0.286140491317745 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.5682849224172329 ) / 0.29767408106451737 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.47914374714280494 ) / 0.2735314971431575 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.4594152477223205 ) / 0.28721149346998975 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.4901106996809651 ) / 0.2790486717322703 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.5378806933707533 ) / 0.2958192296543193 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace EXT_SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.293284 }} ,
					{ 6 ,  {6.24571025 }} ,
					{ 7 ,  {8.0628501 }} ,
					{ 10 ,  {6.98004624 }} ,
					{ 12 ,  {8.89707415 }} ,
					{ 13 ,  {8.24017885 }} ,
					{ 15 ,  {11.38099315 }} ,
					{ 18 ,  {12.0711718 }} ,
					{ 19 ,  {12.123142 }} ,
					{ 20 ,  {12.76012926 }} ,
					{ 24 ,  {16.08254262 }} ,
					{ 25 ,  {16.3247696 }} ,
					{ 27 ,  {14.46699637 }} ,
					{ 28 ,  {14.0511849 }} ,
					{ 30 ,  {12.83034463 }} ,
					{ 32 ,  {11.77602305 }} ,
					{ 33 ,  {11.31351814 }} ,
					{ 39 ,  {10.13178962 }} ,
					{ 40 ,  {10.18163117 }} ,
					{ 41 ,  {6.86145372 }} ,
					{ 43 ,  {15.54179787 }} ,
					{ 44 ,  {13.11975672 }} ,
					{ 47 ,  {17.89244708 }} ,
					{ 48 ,  {18.25069552 }} ,
					{ 49 ,  {16.0096116 }} ,
					{ 55 ,  {15.92255811 }} ,
					{ 61 ,  {18.00761757 }} ,
					{ 62 ,  {17.954677 }} ,
					{ 63 ,  {18.10948375 }} ,
					{ 64 ,  {17.80609749 }} ,
					{ 65 ,  {17.4514578 }} ,
					{ 66 ,  {18.9003877 }} ,
					{ 67 ,  {14.53624519 }} ,
					{ 68 ,  {13.17420206 }} ,
					{ 70 ,  {23.18131441 }} ,
					{ 73 ,  {18.23761382 }} ,
					{ 74 ,  {16.91440831 }} ,
					{ 77 ,  {19.59215343 }} ,
					{ 78 ,  {19.36426348 }} ,
					{ 80 ,  {20.19903361 }} ,
					{ 81 ,  {20.06970209 }} ,
					{ 84 ,  {19.30378831 }} ,
					{ 85 ,  {18.28251507 }} ,
					{ 90 ,  {21.34099337 }} ,
					{ 91 ,  {21.77400035 }} ,
					{ 92 ,  {20.70189537 }} ,
					{ 94 ,  {22.76939497 }} ,
					{ 95 ,  {22.30975449 }} ,
					{ 97 ,  {23.03027937 }} ,
					{ 98 ,  {23.6939704 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5554684400558472) ? ( (scaler_output_8 <= 0.07249260740354657) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_8 <= -0.15321852965280414) ? ( (scaler_output_7 <= -0.31792107224464417) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_6 <= -0.9904888868331909) ? ( (scaler_output_4 <= -0.15859099477529526) ? ( 10 ) : ( (scaler_output_4 <= 0.15703392773866653) ? ( 12 ) : ( 13 ) ) ) : ( (scaler_output_3 <= -1.3994879722595215) ? ( 15 ) : ( (scaler_output_9 <= -0.5623336639255285) ? ( (scaler_output_7 <= -1.4401406645774841) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) ) ) : ( (scaler_output_5 <= 0.8224952518939972) ? ( (scaler_output_3 <= -0.8141056895256042) ? ( (scaler_output_10 <= 0.45338772237300873) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_4 <= 0.9442027136683464) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_8 <= 0.6220327615737915) ? ( 30 ) : ( (scaler_output_3 <= -1.5264851450920105) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (scaler_output_5 <= -0.8790078461170197) ? ( (scaler_output_2 <= -0.652317613363266) ? ( (scaler_output_6 <= 0.8250467479228973) ? ( (scaler_output_7 <= -0.7278894633054733) ? ( (scaler_output_2 <= -0.8742681443691254) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( (scaler_output_5 <= -0.9399192035198212) ? ( 43 ) : ( 44 ) ) ) : ( (scaler_output_10 <= 0.38361895829439163) ? ( (scaler_output_11 <= -0.23419010639190674) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( (scaler_output_5 <= 0.884007453918457) ? ( (scaler_output_10 <= 0.26932352781295776) ? ( (scaler_output_10 <= -0.09689275920391083) ? ( (scaler_output_11 <= 1.3992086052894592) ? ( (scaler_output_4 <= -0.6545254737138748) ? ( 55 ) : ( (scaler_output_5 <= 0.801215261220932) ? ( (scaler_output_3 <= 0.6590147763490677) ? ( (scaler_output_4 <= 0.5339023470878601) ? ( (scaler_output_9 <= 0.4862058311700821) ? ( (scaler_output_3 <= -0.200992651283741) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) : ( 64 ) ) : ( 65 ) ) : ( 66 ) ) ) : ( 67 ) ) : ( 68 ) ) : ( (scaler_output_4 <= -1.4623147249221802) ? ( 70 ) : ( (scaler_output_3 <= 0.9174917638301849) ? ( (scaler_output_2 <= 0.46838192641735077) ? ( 73 ) : ( 74 ) ) : ( (scaler_output_8 <= 0.21829358860850334) ? ( (scaler_output_8 <= -0.07032731920480728) ? ( 77 ) : ( 78 ) ) : ( (scaler_output_4 <= 1.1821215450763702) ? ( 80 ) : ( 81 ) ) ) ) ) ) : ( (scaler_output_2 <= 0.11304868012666702) ? ( (scaler_output_2 <= -0.6023203358054161) ? ( 84 ) : ( 85 ) ) : ( (scaler_output_8 <= 0.8534097969532013) ? ( (scaler_output_3 <= 0.7196853831410408) ? ( (scaler_output_7 <= 0.8123534619808197) ? ( (scaler_output_2 <= 0.7235237956047058) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( (scaler_output_4 <= -1.2739455699920654) ? ( 94 ) : ( 95 ) ) ) : ( (scaler_output_11 <= -0.29549162555485964) ? ( 97 ) : ( 98 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_0
		
	
		namespace EXT_SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {12.0711718 }} ,
					{ 7 ,  {13.17420206 }} ,
					{ 8 ,  {13.11975672 }} ,
					{ 10 ,  {18.25069552 }} ,
					{ 11 ,  {16.08254262 }} ,
					{ 16 ,  {9.73504122 }} ,
					{ 18 ,  {10.04520361 }} ,
					{ 19 ,  {10.13178962 }} ,
					{ 20 ,  {11.38099315 }} ,
					{ 22 ,  {11.78982164 }} ,
					{ 26 ,  {5.293284 }} ,
					{ 28 ,  {5.79437904 }} ,
					{ 29 ,  {6.24571025 }} ,
					{ 31 ,  {6.98004624 }} ,
					{ 32 ,  {6.86145372 }} ,
					{ 34 ,  {8.0628501 }} ,
					{ 37 ,  {7.55699808 }} ,
					{ 38 ,  {7.73242981 }} ,
					{ 39 ,  {7.21944335 }} ,
					{ 41 ,  {12.76012926 }} ,
					{ 42 ,  {12.123142 }} ,
					{ 47 ,  {8.89707415 }} ,
					{ 49 ,  {10.2020931 }} ,
					{ 50 ,  {11.31351814 }} ,
					{ 52 ,  {14.0511849 }} ,
					{ 53 ,  {12.83034463 }} ,
					{ 54 ,  {18.4937214 }} ,
					{ 57 ,  {15.30848399 }} ,
					{ 59 ,  {18.00761757 }} ,
					{ 61 ,  {18.33205802 }} ,
					{ 62 ,  {18.28251507 }} ,
					{ 64 ,  {21.34099337 }} ,
					{ 65 ,  {23.6939704 }} ,
					{ 69 ,  {18.10948375 }} ,
					{ 71 ,  {19.36426348 }} ,
					{ 73 ,  {20.19903361 }} ,
					{ 74 ,  {20.06970209 }} ,
					{ 77 ,  {18.25024804 }} ,
					{ 79 ,  {17.89244708 }} ,
					{ 80 ,  {17.80609749 }} ,
					{ 82 ,  {16.91440831 }} ,
					{ 84 ,  {16.30127921 }} ,
					{ 85 ,  {15.70652198 }} ,
					{ 88 ,  {25.24805848 }} ,
					{ 90 ,  {23.76092016 }} ,
					{ 92 ,  {22.76939497 }} ,
					{ 93 ,  {22.30975449 }} ,
					{ 94 ,  {18.9003877 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= 0.34914006292819977) ? ( (scaler_output_5 <= 0.2771869841963053) ? ( (scaler_output_4 <= -0.6321609020233154) ? ( (scaler_output_7 <= 0.7383587807416916) ? ( (scaler_output_7 <= -1.0111323446035385) ? ( 5 ) : ( (scaler_output_7 <= 0.016124427318572998) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_9 <= -0.22718697786331177) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_4 <= 1.185806393623352) ? ( (scaler_output_7 <= -1.1048519611358643) ? ( (scaler_output_5 <= -0.3947170600295067) ? ( (scaler_output_9 <= 0.3402666449546814) ? ( 16 ) : ( (scaler_output_9 <= 1.1321979761123657) ? ( 18 ) : ( 19 ) ) ) : ( 20 ) ) : ( (scaler_output_9 <= -1.0931169390678406) ? ( 22 ) : ( (scaler_output_7 <= 0.22691281139850616) ? ( (scaler_output_5 <= -1.409048080444336) ? ( (scaler_output_5 <= -1.7078079581260681) ? ( 26 ) : ( (scaler_output_7 <= -0.6375406831502914) ? ( 28 ) : ( 29 ) ) ) : ( (scaler_output_3 <= -0.6926263570785522) ? ( 31 ) : ( 32 ) ) ) : ( (scaler_output_10 <= 0.2154730260372162) ? ( 34 ) : ( (scaler_output_3 <= -0.23952214419841766) ? ( (scaler_output_4 <= -0.4795411080121994) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) ) ) ) : ( (scaler_output_4 <= 1.3449748754501343) ? ( 41 ) : ( 42 ) ) ) ) : ( (scaler_output_3 <= -0.6435166597366333) ? ( (scaler_output_5 <= 1.2724136710166931) ? ( (scaler_output_4 <= 0.6081145703792572) ? ( (scaler_output_6 <= -0.7691580355167389) ? ( 47 ) : ( (scaler_output_5 <= 0.8364088535308838) ? ( 49 ) : ( 50 ) ) ) : ( (scaler_output_11 <= 0.5500586852431297) ? ( 52 ) : ( 53 ) ) ) : ( 54 ) ) : ( (scaler_output_2 <= 0.5017070323228836) ? ( (scaler_output_6 <= -0.4181811809539795) ? ( 57 ) : ( (scaler_output_11 <= -0.7274714037775993) ? ( 59 ) : ( (scaler_output_4 <= -0.006116718053817749) ? ( 61 ) : ( 62 ) ) ) ) : ( (scaler_output_8 <= 0.8534097969532013) ? ( 64 ) : ( 65 ) ) ) ) ) : ( (scaler_output_5 <= 0.7374852299690247) ? ( (scaler_output_7 <= -0.04169179091695696) ? ( (scaler_output_6 <= -0.29102957248687744) ? ( 69 ) : ( (scaler_output_8 <= 0.21829358860850334) ? ( 71 ) : ( (scaler_output_2 <= -0.5804695188999176) ? ( 73 ) : ( 74 ) ) ) ) : ( (scaler_output_11 <= -0.6820610612630844) ? ( (scaler_output_9 <= -0.7750413864850998) ? ( 77 ) : ( (scaler_output_7 <= 0.9859398305416107) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_6 <= -0.0968272015452385) ? ( 82 ) : ( (scaler_output_4 <= -1.1366896629333496) ? ( 84 ) : ( 85 ) ) ) ) ) : ( (scaler_output_2 <= 0.9343535602092743) ? ( (scaler_output_2 <= -0.1604674756526947) ? ( 88 ) : ( (scaler_output_3 <= 1.046646922826767) ? ( 90 ) : ( (scaler_output_5 <= 1.3998578190803528) ? ( 92 ) : ( 93 ) ) ) ) : ( 94 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_1
		
	
		namespace EXT_SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {9.73504122 }} ,
					{ 6 ,  {6.86145372 }} ,
					{ 8 ,  {8.0628501 }} ,
					{ 9 ,  {7.55699808 }} ,
					{ 10 ,  {5.293284 }} ,
					{ 15 ,  {8.89707415 }} ,
					{ 16 ,  {7.73242981 }} ,
					{ 18 ,  {10.48306677 }} ,
					{ 20 ,  {12.76012926 }} ,
					{ 21 ,  {12.83034463 }} ,
					{ 23 ,  {12.0711718 }} ,
					{ 26 ,  {14.0511849 }} ,
					{ 27 ,  {14.77256375 }} ,
					{ 28 ,  {13.17420206 }} ,
					{ 31 ,  {11.38099315 }} ,
					{ 33 ,  {14.46699637 }} ,
					{ 34 ,  {16.08254262 }} ,
					{ 36 ,  {18.33205802 }} ,
					{ 37 ,  {23.6939704 }} ,
					{ 41 ,  {7.21944335 }} ,
					{ 43 ,  {12.42341176 }} ,
					{ 44 ,  {14.53624519 }} ,
					{ 46 ,  {10.18163117 }} ,
					{ 49 ,  {17.89244708 }} ,
					{ 52 ,  {16.30127921 }} ,
					{ 53 ,  {16.0096116 }} ,
					{ 55 ,  {15.70652198 }} ,
					{ 56 ,  {15.70100345 }} ,
					{ 61 ,  {19.95894273 }} ,
					{ 62 ,  {20.06970209 }} ,
					{ 63 ,  {20.19903361 }} ,
					{ 64 ,  {18.23761382 }} ,
					{ 67 ,  {17.954677 }} ,
					{ 69 ,  {18.25024804 }} ,
					{ 70 ,  {18.25069552 }} ,
					{ 72 ,  {17.80609749 }} ,
					{ 74 ,  {17.51855413 }} ,
					{ 75 ,  {17.4514578 }} ,
					{ 78 ,  {15.30848399 }} ,
					{ 79 ,  {19.30378831 }} ,
					{ 83 ,  {21.34099337 }} ,
					{ 84 ,  {21.77400035 }} ,
					{ 86 ,  {23.03027937 }} ,
					{ 87 ,  {22.76939497 }} ,
					{ 89 ,  {25.24805848 }} ,
					{ 90 ,  {24.71333827 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.12853724043816328) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_9 <= 0.08022167533636093) ? ( (scaler_output_7 <= -1.0812368243932724) ? ( 4 ) : ( (scaler_output_9 <= -0.9570851922035217) ? ( 6 ) : ( (scaler_output_6 <= -0.5959430485963821) ? ( 8 ) : ( 9 ) ) ) ) : ( 10 ) ) : ( (scaler_output_6 <= 1.0415067076683044) ? ( (scaler_output_3 <= -0.7378084659576416) ? ( (scaler_output_2 <= -1.5313507914543152) ? ( (scaler_output_6 <= -0.6946941167116165) ? ( 15 ) : ( 16 ) ) : ( (scaler_output_7 <= -0.4078449010848999) ? ( 18 ) : ( (scaler_output_8 <= -0.5477010905742645) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_6 <= -0.7141208648681641) ? ( 23 ) : ( (scaler_output_3 <= -0.5260386168956757) ? ( (scaler_output_3 <= -0.6356008350849152) ? ( 26 ) : ( 27 ) ) : ( 28 ) ) ) ) : ( (scaler_output_3 <= -0.690780520439148) ? ( (scaler_output_7 <= -0.3311998248100281) ? ( 31 ) : ( (scaler_output_7 <= 0.8340752124786377) ? ( 33 ) : ( 34 ) ) ) : ( (scaler_output_8 <= 0.6583707481622696) ? ( 36 ) : ( 37 ) ) ) ) ) : ( (scaler_output_5 <= 0.8174906969070435) ? ( (scaler_output_2 <= -1.0480525493621826) ? ( (scaler_output_4 <= -0.07936598360538483) ? ( 41 ) : ( (scaler_output_9 <= -0.8348624408245087) ? ( 43 ) : ( 44 ) ) ) : ( (scaler_output_7 <= -1.8351979851722717) ? ( 46 ) : ( (scaler_output_5 <= -1.2151864171028137) ? ( (scaler_output_11 <= -1.6895971298217773) ? ( 49 ) : ( (scaler_output_2 <= -0.2968900725245476) ? ( (scaler_output_8 <= -1.4769281148910522) ? ( 52 ) : ( 53 ) ) : ( (scaler_output_5 <= -1.458510398864746) ? ( 55 ) : ( 56 ) ) ) ) : ( (scaler_output_7 <= -0.04169179091695696) ? ( (scaler_output_2 <= 0.06694014370441437) ? ( (scaler_output_3 <= 1.4273104071617126) ? ( (scaler_output_4 <= 0.17677050828933716) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) : ( 64 ) ) : ( (scaler_output_9 <= -0.46352986991405487) ? ( (scaler_output_10 <= -0.29104504734277725) ? ( 67 ) : ( (scaler_output_9 <= -0.7753695249557495) ? ( 69 ) : ( 70 ) ) ) : ( (scaler_output_6 <= -0.9886406362056732) ? ( 72 ) : ( (scaler_output_7 <= 0.27047738432884216) ? ( 74 ) : ( 75 ) ) ) ) ) ) ) ) : ( (scaler_output_2 <= -0.8964633345603943) ? ( (scaler_output_2 <= -1.367207646369934) ? ( 78 ) : ( 79 ) ) : ( (scaler_output_4 <= 1.1652636528015137) ? ( (scaler_output_3 <= 0.261717714369297) ? ( (scaler_output_10 <= -1.4013564586639404) ? ( 83 ) : ( 84 ) ) : ( (scaler_output_2 <= 0.4091864824295044) ? ( 86 ) : ( 87 ) ) ) : ( (scaler_output_9 <= 0.27823615074157715) ? ( 89 ) : ( 90 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_2
		
	
		namespace EXT_SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {6.86145372 }} ,
					{ 7 ,  {5.293284 }} ,
					{ 8 ,  {5.79437904 }} ,
					{ 9 ,  {9.73504122 }} ,
					{ 13 ,  {12.76012926 }} ,
					{ 14 ,  {13.11975672 }} ,
					{ 17 ,  {12.0711718 }} ,
					{ 18 ,  {12.123142 }} ,
					{ 19 ,  {11.78982164 }} ,
					{ 22 ,  {6.98004624 }} ,
					{ 23 ,  {8.24017885 }} ,
					{ 24 ,  {11.38099315 }} ,
					{ 27 ,  {16.3247696 }} ,
					{ 29 ,  {18.00761757 }} ,
					{ 30 ,  {18.4937214 }} ,
					{ 32 ,  {14.0511849 }} ,
					{ 33 ,  {12.83034463 }} ,
					{ 37 ,  {10.13178962 }} ,
					{ 43 ,  {16.30127921 }} ,
					{ 44 ,  {16.0096116 }} ,
					{ 46 ,  {15.70100345 }} ,
					{ 47 ,  {15.54179787 }} ,
					{ 51 ,  {18.25024804 }} ,
					{ 52 ,  {18.10948375 }} ,
					{ 53 ,  {17.89244708 }} ,
					{ 54 ,  {16.91440831 }} ,
					{ 55 ,  {12.42341176 }} ,
					{ 58 ,  {18.23761382 }} ,
					{ 61 ,  {17.4514578 }} ,
					{ 62 ,  {17.51855413 }} ,
					{ 63 ,  {17.80609749 }} ,
					{ 65 ,  {20.06970209 }} ,
					{ 66 ,  {20.62985591 }} ,
					{ 70 ,  {19.36426348 }} ,
					{ 71 ,  {19.59215343 }} ,
					{ 72 ,  {20.19903361 }} ,
					{ 73 ,  {23.18131441 }} ,
					{ 79 ,  {22.76939497 }} ,
					{ 80 ,  {23.03027937 }} ,
					{ 81 ,  {23.76092016 }} ,
					{ 82 ,  {21.77400035 }} ,
					{ 86 ,  {21.34099337 }} ,
					{ 87 ,  {20.70189537 }} ,
					{ 88 ,  {22.30975449 }} ,
					{ 89 ,  {19.30378831 }} ,
					{ 91 ,  {25.24805848 }} ,
					{ 92 ,  {24.71333827 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= 0.057984648272395134) ? ( (scaler_output_5 <= -1.050271600484848) ? ( (scaler_output_11 <= 1.2509176433086395) ? ( (scaler_output_9 <= -0.9631825387477875) ? ( 5 ) : ( (scaler_output_3 <= -0.7121950685977936) ? ( 7 ) : ( 8 ) ) ) : ( 9 ) ) : ( (scaler_output_9 <= -0.014901649672538042) ? ( (scaler_output_5 <= -0.7380824089050293) ? ( (scaler_output_6 <= 1.1320082247257233) ? ( 13 ) : ( 14 ) ) : ( (scaler_output_5 <= -0.10249164514243603) ? ( (scaler_output_7 <= -1.4401406645774841) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) : ( (scaler_output_11 <= 0.10272175073623657) ? ( (scaler_output_5 <= -0.5801641047000885) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) : ( (scaler_output_9 <= 1.4635692834854126) ? ( (scaler_output_7 <= -0.7220275551080704) ? ( 27 ) : ( (scaler_output_10 <= 0.058473050594329834) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_10 <= -0.3805384486913681) ? ( 32 ) : ( 33 ) ) ) ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_3 <= 1.2855579257011414) ? ( (scaler_output_3 <= 0.309597909450531) ? ( 37 ) : ( (scaler_output_8 <= 0.6467042863368988) ? ( (scaler_output_5 <= 0.7361785769462585) ? ( (scaler_output_2 <= 0.20753739029169083) ? ( (scaler_output_8 <= -0.9611698985099792) ? ( (scaler_output_5 <= -1.4353999495506287) ? ( 43 ) : ( 44 ) ) : ( (scaler_output_8 <= -0.2718233880586922) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_8 <= 0.19261537492275238) ? ( (scaler_output_6 <= 0.013767823576927185) ? ( (scaler_output_2 <= 1.1742006540298462) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( 54 ) ) ) : ( 55 ) ) : ( (scaler_output_9 <= 0.45720474421977997) ? ( (scaler_output_5 <= -0.3784775584936142) ? ( 58 ) : ( (scaler_output_7 <= 0.6994284391403198) ? ( (scaler_output_9 <= 0.07981601357460022) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) : ( (scaler_output_5 <= -0.2586699575185776) ? ( 65 ) : ( 66 ) ) ) ) ) : ( (scaler_output_7 <= 1.1817528009414673) ? ( (scaler_output_8 <= 0.21829358860850334) ? ( (scaler_output_7 <= 0.31386810541152954) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) : ( 73 ) ) ) : ( (scaler_output_4 <= 1.1652636528015137) ? ( (scaler_output_11 <= -0.34223273396492004) ? ( (scaler_output_2 <= 0.9161916673183441) ? ( (scaler_output_2 <= 0.7096204161643982) ? ( (scaler_output_5 <= 1.3410025238990784) ? ( 79 ) : ( 80 ) ) : ( 81 ) ) : ( 82 ) ) : ( (scaler_output_9 <= 1.5312511920928955) ? ( (scaler_output_10 <= 0.5451775416731834) ? ( (scaler_output_6 <= -0.6465537697076797) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) : ( 89 ) ) ) : ( (scaler_output_2 <= -0.275451622903347) ? ( 91 ) : ( 92 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_3
		
	
		namespace EXT_SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {8.0628501 }} ,
					{ 7 ,  {6.98004624 }} ,
					{ 8 ,  {7.55699808 }} ,
					{ 10 ,  {5.293284 }} ,
					{ 11 ,  {6.24571025 }} ,
					{ 15 ,  {10.04520361 }} ,
					{ 18 ,  {12.0711718 }} ,
					{ 19 ,  {12.123142 }} ,
					{ 22 ,  {11.78982164 }} ,
					{ 23 ,  {11.77602305 }} ,
					{ 24 ,  {12.10988659 }} ,
					{ 25 ,  {14.0511849 }} ,
					{ 28 ,  {10.59689049 }} ,
					{ 29 ,  {11.31351814 }} ,
					{ 31 ,  {8.24017885 }} ,
					{ 32 ,  {7.73242981 }} ,
					{ 36 ,  {16.08254262 }} ,
					{ 37 ,  {16.30255672 }} ,
					{ 38 ,  {18.33205802 }} ,
					{ 41 ,  {11.38099315 }} ,
					{ 42 ,  {12.83034463 }} ,
					{ 43 ,  {14.46699637 }} ,
					{ 46 ,  {10.18163117 }} ,
					{ 47 ,  {9.73504122 }} ,
					{ 53 ,  {15.30848399 }} ,
					{ 54 ,  {15.54179787 }} ,
					{ 56 ,  {15.92255811 }} ,
					{ 57 ,  {15.70100345 }} ,
					{ 59 ,  {16.91440831 }} ,
					{ 60 ,  {18.25069552 }} ,
					{ 64 ,  {20.06970209 }} ,
					{ 69 ,  {17.954677 }} ,
					{ 70 ,  {18.00761757 }} ,
					{ 72 ,  {17.80609749 }} ,
					{ 73 ,  {17.89244708 }} ,
					{ 76 ,  {18.23761382 }} ,
					{ 77 ,  {18.25024804 }} ,
					{ 78 ,  {18.28251507 }} ,
					{ 80 ,  {17.36059041 }} ,
					{ 82 ,  {17.41761148 }} ,
					{ 83 ,  {17.4514578 }} ,
					{ 84 ,  {16.0096116 }} ,
					{ 87 ,  {20.62985591 }} ,
					{ 88 ,  {20.19903361 }} ,
					{ 90 ,  {18.9003877 }} ,
					{ 91 ,  {17.31914707 }} ,
					{ 93 ,  {24.71333827 }} ,
					{ 94 ,  {23.6939704 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5990101397037506) ? ( (scaler_output_6 <= 0.5279591083526611) ? ( (scaler_output_5 <= -0.7714441120624542) ? ( (scaler_output_11 <= 0.516387939453125) ? ( (scaler_output_10 <= 0.2154730260372162) ? ( 5 ) : ( (scaler_output_2 <= 0.9573343098163605) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_4 <= 0.26727570593357086) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_7 <= 0.5764994323253632) ? ( (scaler_output_9 <= 1.7547411918640137) ? ( (scaler_output_5 <= -0.6961230039596558) ? ( 15 ) : ( (scaler_output_5 <= -0.10249164514243603) ? ( (scaler_output_9 <= -1.1911850571632385) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_10 <= 0.18495644629001617) ? ( (scaler_output_7 <= 0.495399072766304) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) : ( 25 ) ) : ( (scaler_output_3 <= -1.2625617384910583) ? ( (scaler_output_3 <= -1.5200937986373901) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_7 <= 0.6526878476142883) ? ( 31 ) : ( 32 ) ) ) ) ) : ( (scaler_output_4 <= -0.5396069139242172) ? ( (scaler_output_3 <= -0.7092001140117645) ? ( (scaler_output_10 <= 0.6082374900579453) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) : ( (scaler_output_2 <= 0.8696907758712769) ? ( (scaler_output_10 <= -0.962982788681984) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) : ( (scaler_output_7 <= -1.806531846523285) ? ( (scaler_output_8 <= 0.5529173612594604) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_9 <= 1.0257534682750702) ? ( (scaler_output_4 <= -0.6289365440607071) ? ( (scaler_output_2 <= 0.3154761865735054) ? ( (scaler_output_7 <= -0.052179038524627686) ? ( (scaler_output_9 <= -0.2958299592137337) ? ( 53 ) : ( 54 ) ) : ( (scaler_output_10 <= 0.28616923093795776) ? ( 56 ) : ( 57 ) ) ) : ( (scaler_output_6 <= -0.057531206868588924) ? ( 59 ) : ( 60 ) ) ) : ( (scaler_output_11 <= 1.0744843184947968) ? ( (scaler_output_4 <= 1.5975546836853027) ? ( (scaler_output_7 <= -0.9090708196163177) ? ( 64 ) : ( (scaler_output_3 <= 0.8109166622161865) ? ( (scaler_output_10 <= 0.40289323031902313) ? ( (scaler_output_4 <= 0.14998465776443481) ? ( (scaler_output_11 <= -1.467487394809723) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_3 <= 0.45570848882198334) ? ( 72 ) : ( 73 ) ) ) : ( (scaler_output_7 <= 0.1324268396710977) ? ( (scaler_output_2 <= 0.6665663868188858) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) ) : ( (scaler_output_5 <= 0.24630474299192429) ? ( 80 ) : ( (scaler_output_11 <= -1.6039016842842102) ? ( 82 ) : ( 83 ) ) ) ) ) : ( 84 ) ) : ( (scaler_output_4 <= 1.0394505560398102) ? ( (scaler_output_3 <= 1.3925305604934692) ? ( 87 ) : ( 88 ) ) : ( (scaler_output_7 <= -0.4573763459920883) ? ( 90 ) : ( 91 ) ) ) ) ) : ( (scaler_output_5 <= 0.8914636969566345) ? ( 93 ) : ( 94 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_4
		
	
		namespace EXT_SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.293284 }} ,
					{ 6 ,  {6.24571025 }} ,
					{ 8 ,  {7.73242981 }} ,
					{ 9 ,  {6.98004624 }} ,
					{ 13 ,  {10.48306677 }} ,
					{ 14 ,  {10.59689049 }} ,
					{ 15 ,  {8.89707415 }} ,
					{ 17 ,  {12.123142 }} ,
					{ 18 ,  {11.78982164 }} ,
					{ 21 ,  {16.08254262 }} ,
					{ 24 ,  {12.10988659 }} ,
					{ 25 ,  {11.38099315 }} ,
					{ 27 ,  {12.76012926 }} ,
					{ 28 ,  {12.83034463 }} ,
					{ 29 ,  {18.4937214 }} ,
					{ 33 ,  {15.70100345 }} ,
					{ 36 ,  {8.0628501 }} ,
					{ 38 ,  {9.73504122 }} ,
					{ 39 ,  {10.18163117 }} ,
					{ 41 ,  {5.79437904 }} ,
					{ 42 ,  {7.21944335 }} ,
					{ 44 ,  {10.13178962 }} ,
					{ 48 ,  {16.30127921 }} ,
					{ 49 ,  {16.0096116 }} ,
					{ 51 ,  {15.70652198 }} ,
					{ 52 ,  {15.54179787 }} ,
					{ 54 ,  {17.89244708 }} ,
					{ 55 ,  {18.25069552 }} ,
					{ 64 ,  {18.25024804 }} ,
					{ 65 ,  {18.33205802 }} ,
					{ 66 ,  {18.00761757 }} ,
					{ 68 ,  {17.4514578 }} ,
					{ 69 ,  {17.80609749 }} ,
					{ 70 ,  {16.30255672 }} ,
					{ 71 ,  {20.06970209 }} ,
					{ 74 ,  {15.92255811 }} ,
					{ 75 ,  {17.51855413 }} ,
					{ 77 ,  {14.46699637 }} ,
					{ 79 ,  {13.17420206 }} ,
					{ 80 ,  {12.42341176 }} ,
					{ 82 ,  {23.18131441 }} ,
					{ 85 ,  {20.62985591 }} ,
					{ 87 ,  {19.95894273 }} ,
					{ 88 ,  {20.19903361 }} ,
					{ 89 ,  {19.36426348 }} ,
					{ 91 ,  {17.41761148 }} ,
					{ 94 ,  {19.30378831 }} ,
					{ 95 ,  {18.28251507 }} ,
					{ 99 ,  {22.30975449 }} ,
					{ 100 ,  {21.77400035 }} ,
					{ 102 ,  {21.34099337 }} ,
					{ 103 ,  {20.70189537 }} ,
					{ 106 ,  {23.03027937 }} ,
					{ 107 ,  {23.6939704 }} ,
					{ 108 ,  {24.71333827 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.7941106855869293) ? ( (scaler_output_6 <= 0.41291773319244385) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_5 <= -1.1897129714488983) ? ( (scaler_output_7 <= -0.31792107224464417) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_9 <= -0.17961002001538873) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_4 <= 0.4264764077961445) ? ( (scaler_output_3 <= -0.977634608745575) ? ( (scaler_output_6 <= -0.24314209818840027) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) : ( (scaler_output_2 <= 0.6429652869701385) ? ( 17 ) : ( 18 ) ) ) ) : ( (scaler_output_5 <= 1.2488571107387543) ? ( (scaler_output_4 <= -1.3330397009849548) ? ( 21 ) : ( (scaler_output_4 <= 0.1343841701745987) ? ( (scaler_output_2 <= -0.37258046865463257) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_6 <= 0.5460385978221893) ? ( 27 ) : ( 28 ) ) ) ) : ( 29 ) ) ) : ( (scaler_output_5 <= -0.9059769511222839) ? ( (scaler_output_6 <= -0.10462668538093567) ? ( (scaler_output_4 <= -0.8448290079832077) ? ( 33 ) : ( (scaler_output_10 <= 0.4377283379435539) ? ( (scaler_output_11 <= -0.9392621517181396) ? ( 36 ) : ( (scaler_output_5 <= -1.3054264783859253) ? ( 38 ) : ( 39 ) ) ) : ( (scaler_output_2 <= -1.0816559195518494) ? ( 41 ) : ( 42 ) ) ) ) : ( (scaler_output_5 <= -1.730229675769806) ? ( 44 ) : ( (scaler_output_7 <= 0.885921448469162) ? ( (scaler_output_8 <= -1.0799291133880615) ? ( (scaler_output_10 <= -0.3104594051837921) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_11 <= 0.3555814176797867) ? ( 51 ) : ( 52 ) ) ) : ( (scaler_output_11 <= -0.23419010639190674) ? ( 54 ) : ( 55 ) ) ) ) ) : ( (scaler_output_5 <= 0.8174906969070435) ? ( (scaler_output_3 <= 1.1969408988952637) ? ( (scaler_output_11 <= -0.03035035729408264) ? ( (scaler_output_4 <= 1.2349737584590912) ? ( (scaler_output_9 <= 0.5445897132158279) ? ( (scaler_output_8 <= 0.5215602070093155) ? ( (scaler_output_9 <= -0.5095090419054031) ? ( (scaler_output_5 <= 0.23607374355196953) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) : ( (scaler_output_7 <= 0.6994284391403198) ? ( 68 ) : ( 69 ) ) ) : ( 70 ) ) : ( 71 ) ) : ( (scaler_output_10 <= -0.23316064476966858) ? ( (scaler_output_4 <= 0.19280186295509338) ? ( 74 ) : ( 75 ) ) : ( (scaler_output_11 <= 0.18023260682821274) ? ( 77 ) : ( (scaler_output_5 <= 0.33255283534526825) ? ( 79 ) : ( 80 ) ) ) ) ) : ( (scaler_output_11 <= 0.25653308629989624) ? ( 82 ) : ( (scaler_output_2 <= 0.48330582678318024) ? ( (scaler_output_6 <= 1.179479956626892) ? ( 85 ) : ( (scaler_output_3 <= 1.4273104071617126) ? ( 87 ) : ( 88 ) ) ) : ( 89 ) ) ) ) : ( (scaler_output_11 <= -1.7283473014831543) ? ( 91 ) : ( (scaler_output_2 <= 0.018691375851631165) ? ( (scaler_output_4 <= -0.2271086871623993) ? ( 94 ) : ( 95 ) ) : ( (scaler_output_6 <= -0.14588714204728603) ? ( (scaler_output_9 <= 0.5082177445292473) ? ( (scaler_output_7 <= -0.33767589926719666) ? ( 99 ) : ( 100 ) ) : ( (scaler_output_6 <= -0.6465537697076797) ? ( 102 ) : ( 103 ) ) ) : ( (scaler_output_10 <= 0.6828840970993042) ? ( (scaler_output_9 <= 1.1465093493461609) ? ( 106 ) : ( 107 ) ) : ( 108 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_5
		
	
		namespace EXT_SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {5.293284 }} ,
					{ 7 ,  {5.79437904 }} ,
					{ 8 ,  {6.86145372 }} ,
					{ 11 ,  {7.55699808 }} ,
					{ 12 ,  {8.0628501 }} ,
					{ 13 ,  {9.73504122 }} ,
					{ 18 ,  {11.78982164 }} ,
					{ 19 ,  {12.0711718 }} ,
					{ 20 ,  {12.76012926 }} ,
					{ 22 ,  {10.48306677 }} ,
					{ 23 ,  {10.04520361 }} ,
					{ 25 ,  {13.17420206 }} ,
					{ 26 ,  {14.46699637 }} ,
					{ 30 ,  {7.21944335 }} ,
					{ 31 ,  {10.13178962 }} ,
					{ 32 ,  {13.11975672 }} ,
					{ 36 ,  {15.54179787 }} ,
					{ 37 ,  {15.70652198 }} ,
					{ 40 ,  {18.25069552 }} ,
					{ 41 ,  {17.89244708 }} ,
					{ 42 ,  {16.91440831 }} ,
					{ 45 ,  {20.06970209 }} ,
					{ 46 ,  {19.95894273 }} ,
					{ 48 ,  {17.954677 }} ,
					{ 49 ,  {18.23761382 }} ,
					{ 53 ,  {23.76092016 }} ,
					{ 56 ,  {23.03027937 }} ,
					{ 57 ,  {23.18131441 }} ,
					{ 58 ,  {22.76939497 }} ,
					{ 59 ,  {21.77400035 }} ,
					{ 64 ,  {15.30848399 }} ,
					{ 65 ,  {15.92255811 }} ,
					{ 68 ,  {21.34099337 }} ,
					{ 69 ,  {20.62985591 }} ,
					{ 72 ,  {16.30255672 }} ,
					{ 76 ,  {17.36059041 }} ,
					{ 77 ,  {17.31914707 }} ,
					{ 79 ,  {18.10948375 }} ,
					{ 80 ,  {17.80609749 }} ,
					{ 82 ,  {19.36426348 }} ,
					{ 85 ,  {18.33205802 }} ,
					{ 86 ,  {18.28251507 }} ,
					{ 87 ,  {18.4937214 }} ,
					{ 88 ,  {20.70189537 }} ,
					{ 90 ,  {10.59689049 }} ,
					{ 91 ,  {14.53624519 }} ,
					{ 94 ,  {24.71333827 }} ,
					{ 95 ,  {23.6939704 }} ,
					{ 96 ,  {20.19903361 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= 0.062120383605360985) ? ( (scaler_output_3 <= -0.13997434824705124) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_5 <= -1.735771358013153) ? ( 4 ) : ( (scaler_output_9 <= -0.9171954691410065) ? ( (scaler_output_5 <= -1.4128466844558716) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_4 <= 0.8416293561458588) ? ( (scaler_output_9 <= -0.5782239362597466) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (scaler_output_10 <= -0.13970722258090973) ? ( (scaler_output_9 <= 0.30822111107409) ? ( (scaler_output_6 <= -0.2246147096157074) ? ( (scaler_output_3 <= -0.7696717977523804) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (scaler_output_3 <= -1.106139361858368) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_7 <= 0.1118408590555191) ? ( 25 ) : ( 26 ) ) ) ) : ( (scaler_output_2 <= -0.9460362792015076) ? ( (scaler_output_6 <= 1.1179764568805695) ? ( (scaler_output_6 <= 0.17573610693216324) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( (scaler_output_8 <= 0.7470073401927948) ? ( (scaler_output_7 <= 0.22373316809535027) ? ( (scaler_output_9 <= 0.7299947664141655) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_10 <= 0.36258236318826675) ? ( (scaler_output_6 <= 0.25824561808258295) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) : ( (scaler_output_2 <= 0.06694014370441437) ? ( (scaler_output_5 <= -0.4930250234901905) ? ( 45 ) : ( 46 ) ) : ( (scaler_output_10 <= 0.3432089537382126) ? ( 48 ) : ( 49 ) ) ) ) ) ) : ( (scaler_output_4 <= -0.9005289077758789) ? ( (scaler_output_2 <= 0.9161916673183441) ? ( (scaler_output_10 <= -0.5686390101909637) ? ( 53 ) : ( (scaler_output_10 <= 1.5610646605491638) ? ( (scaler_output_10 <= 1.0304233133792877) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( 59 ) ) : ( (scaler_output_6 <= 1.583541214466095) ? ( (scaler_output_11 <= 1.3498066067695618) ? ( (scaler_output_4 <= -0.7880869805812836) ? ( (scaler_output_9 <= 0.22518500685691833) ? ( 64 ) : ( 65 ) ) : ( (scaler_output_10 <= -1.2262859344482422) ? ( (scaler_output_10 <= -1.401419997215271) ? ( 68 ) : ( 69 ) ) : ( (scaler_output_7 <= 1.1562620997428894) ? ( (scaler_output_11 <= -0.9391080439090729) ? ( 72 ) : ( (scaler_output_6 <= -0.5270169675350189) ? ( (scaler_output_10 <= -0.8243967294692993) ? ( (scaler_output_8 <= 0.03199014067649841) ? ( 76 ) : ( 77 ) ) : ( (scaler_output_3 <= 0.37498433887958527) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_5 <= 0.322087898850441) ? ( 82 ) : ( (scaler_output_9 <= -0.6338270902633667) ? ( (scaler_output_11 <= 0.050772152841091156) ? ( 85 ) : ( 86 ) ) : ( 87 ) ) ) ) ) : ( 88 ) ) ) ) : ( (scaler_output_8 <= -0.8936997354030609) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_6 <= 1.6388948559761047) ? ( (scaler_output_5 <= 0.8914636969566345) ? ( 94 ) : ( 95 ) ) : ( 96 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_6
		
	
		namespace EXT_SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {12.0711718 }} ,
					{ 6 ,  {13.11975672 }} ,
					{ 7 ,  {16.08254262 }} ,
					{ 11 ,  {5.293284 }} ,
					{ 13 ,  {6.86145372 }} ,
					{ 14 ,  {6.24571025 }} ,
					{ 17 ,  {8.24017885 }} ,
					{ 18 ,  {8.0628501 }} ,
					{ 20 ,  {7.55699808 }} ,
					{ 21 ,  {7.73242981 }} ,
					{ 23 ,  {9.73504122 }} ,
					{ 24 ,  {12.76012926 }} ,
					{ 30 ,  {12.10988659 }} ,
					{ 31 ,  {12.123142 }} ,
					{ 33 ,  {11.38099315 }} ,
					{ 35 ,  {11.78982164 }} ,
					{ 36 ,  {11.77602305 }} ,
					{ 38 ,  {10.59689049 }} ,
					{ 39 ,  {11.31351814 }} ,
					{ 40 ,  {18.4937214 }} ,
					{ 45 ,  {14.0511849 }} ,
					{ 46 ,  {14.77256375 }} ,
					{ 47 ,  {13.17420206 }} ,
					{ 51 ,  {18.28251507 }} ,
					{ 52 ,  {18.33205802 }} ,
					{ 53 ,  {18.00761757 }} ,
					{ 55 ,  {15.92255811 }} ,
					{ 56 ,  {16.30255672 }} ,
					{ 57 ,  {23.6939704 }} ,
					{ 59 ,  {7.21944335 }} ,
					{ 67 ,  {15.70652198 }} ,
					{ 68 ,  {15.70100345 }} ,
					{ 70 ,  {16.30127921 }} ,
					{ 71 ,  {16.0096116 }} ,
					{ 72 ,  {17.89244708 }} ,
					{ 73 ,  {12.42341176 }} ,
					{ 77 ,  {17.80609749 }} ,
					{ 78 ,  {17.4514578 }} ,
					{ 80 ,  {17.954677 }} ,
					{ 81 ,  {18.23761382 }} ,
					{ 83 ,  {20.62985591 }} ,
					{ 85 ,  {20.06970209 }} ,
					{ 86 ,  {19.95894273 }} ,
					{ 89 ,  {20.19903361 }} ,
					{ 90 ,  {19.59215343 }} ,
					{ 91 ,  {23.18131441 }} ,
					{ 94 ,  {15.30848399 }} ,
					{ 95 ,  {19.30378831 }} ,
					{ 99 ,  {21.77400035 }} ,
					{ 101 ,  {23.03027937 }} ,
					{ 102 ,  {22.76939497 }} ,
					{ 105 ,  {25.24805848 }} ,
					{ 106 ,  {24.71333827 }} ,
					{ 107 ,  {23.76092016 }} ,
					{ 109 ,  {18.9003877 }} ,
					{ 111 ,  {22.30975449 }} ,
					{ 112 ,  {21.34099337 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_4 <= -0.6404086947441101) ? ( (scaler_output_11 <= 0.12812358140945435) ? ( (scaler_output_9 <= -0.806011289358139) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (scaler_output_11 <= 1.305152714252472) ? ( (scaler_output_7 <= 0.17647136747837067) ? ( (scaler_output_5 <= -1.7040093541145325) ? ( 11 ) : ( (scaler_output_4 <= 0.3276527374982834) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_8 <= 0.6160197635181248) ? ( (scaler_output_4 <= 0.48825059831142426) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_10 <= 1.1456634402275085) ? ( 20 ) : ( 21 ) ) ) ) : ( (scaler_output_11 <= 1.5238791108131409) ? ( 23 ) : ( 24 ) ) ) ) : ( (scaler_output_3 <= -0.8259740173816681) ? ( (scaler_output_8 <= 1.5058903694152832) ? ( (scaler_output_7 <= 0.8419815003871918) ? ( (scaler_output_8 <= -1.0841555893421173) ? ( (scaler_output_10 <= 0.9216151833534241) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_4 <= -0.42271487414836884) ? ( 33 ) : ( (scaler_output_5 <= 0.6356471721082926) ? ( 35 ) : ( 36 ) ) ) ) : ( (scaler_output_8 <= 0.14745354652404785) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) : ( (scaler_output_8 <= 0.7568807005882263) ? ( (scaler_output_2 <= -0.08383416384458542) ? ( (scaler_output_3 <= -0.5260386168956757) ? ( (scaler_output_10 <= 0.12323269248008728) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( (scaler_output_9 <= 0.26531390845775604) ? ( (scaler_output_9 <= -0.5095090419054031) ? ( (scaler_output_6 <= 0.676403671503067) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (scaler_output_9 <= 1.0774112045764923) ? ( 55 ) : ( 56 ) ) ) ) : ( 57 ) ) ) ) : ( (scaler_output_5 <= -1.7781072854995728) ? ( 59 ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_3 <= 1.2873224020004272) ? ( (scaler_output_8 <= 0.5515375733375549) ? ( (scaler_output_7 <= 1.1472919285297394) ? ( (scaler_output_7 <= 0.885921448469162) ? ( (scaler_output_6 <= 0.020264320075511932) ? ( (scaler_output_5 <= -1.458510398864746) ? ( 67 ) : ( 68 ) ) : ( (scaler_output_8 <= -1.4769281148910522) ? ( 70 ) : ( 71 ) ) ) : ( 72 ) ) : ( 73 ) ) : ( (scaler_output_3 <= 0.9287995994091034) ? ( (scaler_output_10 <= -0.5176029950380325) ? ( (scaler_output_5 <= 0.3792236000299454) ? ( 77 ) : ( 78 ) ) : ( (scaler_output_10 <= 0.3432089537382126) ? ( 80 ) : ( 81 ) ) ) : ( (scaler_output_8 <= 1.0948494672775269) ? ( 83 ) : ( (scaler_output_3 <= 1.1072546243667603) ? ( 85 ) : ( 86 ) ) ) ) ) : ( (scaler_output_10 <= 1.2076093256473541) ? ( (scaler_output_7 <= 0.5241558328270912) ? ( 89 ) : ( 90 ) ) : ( 91 ) ) ) : ( (scaler_output_2 <= -0.8964633345603943) ? ( (scaler_output_11 <= -0.9529251307249069) ? ( 94 ) : ( 95 ) ) : ( (scaler_output_11 <= 0.36913497745990753) ? ( (scaler_output_11 <= -0.5298067778348923) ? ( (scaler_output_8 <= -1.0993037968873978) ? ( 99 ) : ( (scaler_output_2 <= 0.4091864824295044) ? ( 101 ) : ( 102 ) ) ) : ( (scaler_output_9 <= 1.6092536449432373) ? ( (scaler_output_8 <= -0.00466928631067276) ? ( 105 ) : ( 106 ) ) : ( 107 ) ) ) : ( (scaler_output_8 <= -0.43377685546875) ? ( 109 ) : ( (scaler_output_2 <= 0.4270458519458771) ? ( 111 ) : ( 112 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_7
		
	
		namespace EXT_SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {8.89707415 }} ,
					{ 8 ,  {8.24017885 }} ,
					{ 11 ,  {10.59689049 }} ,
					{ 12 ,  {10.48306677 }} ,
					{ 14 ,  {10.04520361 }} ,
					{ 15 ,  {9.73504122 }} ,
					{ 18 ,  {5.79437904 }} ,
					{ 19 ,  {6.24571025 }} ,
					{ 21 ,  {7.55699808 }} ,
					{ 22 ,  {6.86145372 }} ,
					{ 23 ,  {14.0511849 }} ,
					{ 26 ,  {11.38099315 }} ,
					{ 28 ,  {12.10988659 }} ,
					{ 29 ,  {12.83034463 }} ,
					{ 33 ,  {13.11975672 }} ,
					{ 34 ,  {12.76012926 }} ,
					{ 35 ,  {14.46699637 }} ,
					{ 39 ,  {16.30255672 }} ,
					{ 40 ,  {16.3247696 }} ,
					{ 41 ,  {16.08254262 }} ,
					{ 42 ,  {18.33205802 }} ,
					{ 44 ,  {18.28251507 }} ,
					{ 45 ,  {23.6939704 }} ,
					{ 50 ,  {17.36059041 }} ,
					{ 53 ,  {15.30848399 }} ,
					{ 55 ,  {16.0096116 }} ,
					{ 56 ,  {15.70100345 }} ,
					{ 57 ,  {14.53624519 }} ,
					{ 59 ,  {21.77400035 }} ,
					{ 62 ,  {18.10948375 }} ,
					{ 63 ,  {18.25069552 }} ,
					{ 64 ,  {18.9003877 }} ,
					{ 65 ,  {10.13178962 }} ,
					{ 71 ,  {17.4514578 }} ,
					{ 72 ,  {17.41761148 }} ,
					{ 75 ,  {17.89244708 }} ,
					{ 76 ,  {17.954677 }} ,
					{ 78 ,  {18.23761382 }} ,
					{ 79 ,  {18.25024804 }} ,
					{ 81 ,  {20.19903361 }} ,
					{ 82 ,  {19.95894273 }} ,
					{ 85 ,  {22.76939497 }} ,
					{ 86 ,  {22.30975449 }} ,
					{ 88 ,  {21.34099337 }} ,
					{ 91 ,  {19.30378831 }} ,
					{ 92 ,  {19.59215343 }} ,
					{ 93 ,  {20.06970209 }} ,
					{ 95 ,  {20.70189537 }} ,
					{ 97 ,  {23.18131441 }} ,
					{ 99 ,  {25.24805848 }} ,
					{ 100 ,  {24.71333827 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.035752530209720135) ? ( (scaler_output_5 <= 0.9240188300609589) ? ( (scaler_output_6 <= 0.41291773319244385) ? ( (scaler_output_9 <= 1.473335087299347) ? ( (scaler_output_10 <= 0.13386300299316645) ? ( (scaler_output_6 <= -0.9089318811893463) ? ( (scaler_output_2 <= -0.874906487762928) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_8 <= 0.538689374923706) ? ( (scaler_output_9 <= -0.3859758675098419) ? ( 11 ) : ( 12 ) ) : ( (scaler_output_10 <= -0.277524346485734) ? ( 14 ) : ( 15 ) ) ) ) : ( (scaler_output_5 <= -1.5550702214241028) ? ( (scaler_output_2 <= 0.3038821816444397) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_4 <= -0.45807765424251556) ? ( 21 ) : ( 22 ) ) ) ) : ( 23 ) ) : ( (scaler_output_3 <= -1.1706072688102722) ? ( (scaler_output_5 <= 0.04740076884627342) ? ( 26 ) : ( (scaler_output_2 <= -1.2398391366004944) ? ( 28 ) : ( 29 ) ) ) : ( (scaler_output_5 <= -0.464217945933342) ? ( (scaler_output_8 <= -0.05649399757385254) ? ( (scaler_output_5 <= -0.8703859150409698) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( (scaler_output_3 <= -0.7092001140117645) ? ( (scaler_output_11 <= 0.39123570919036865) ? ( (scaler_output_2 <= 1.0640095174312592) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( 42 ) ) ) ) ) : ( (scaler_output_8 <= -0.012597739696502686) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_8 <= -0.5067865401506424) ? ( (scaler_output_6 <= 0.30062711238861084) ? ( (scaler_output_2 <= 0.4320812299847603) ? ( (scaler_output_10 <= -0.7364011257886887) ? ( 50 ) : ( (scaler_output_11 <= 0.4328656792640686) ? ( (scaler_output_3 <= 0.3236779049038887) ? ( 53 ) : ( (scaler_output_8 <= -0.9611698985099792) ? ( 55 ) : ( 56 ) ) ) : ( 57 ) ) ) : ( (scaler_output_3 <= -0.0054356674663722515) ? ( 59 ) : ( (scaler_output_8 <= -1.1544707417488098) ? ( (scaler_output_6 <= -0.5857017179951072) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) ) ) : ( 65 ) ) : ( (scaler_output_7 <= 1.1817528009414673) ? ( (scaler_output_9 <= -0.013723235577344894) ? ( (scaler_output_11 <= 0.25312742590904236) ? ( (scaler_output_10 <= -0.7864562422037125) ? ( (scaler_output_2 <= 0.059108078479766846) ? ( 71 ) : ( 72 ) ) : ( (scaler_output_11 <= -1.5975511074066162) ? ( (scaler_output_11 <= -1.6773877143859863) ? ( 75 ) : ( 76 ) ) : ( (scaler_output_10 <= 1.4331046342849731) ? ( 78 ) : ( 79 ) ) ) ) : ( (scaler_output_8 <= 1.0744511187076569) ? ( 81 ) : ( 82 ) ) ) : ( (scaler_output_6 <= -1.2150817215442657) ? ( (scaler_output_4 <= -1.2739455699920654) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_3 <= 0.5301078632473946) ? ( 88 ) : ( (scaler_output_11 <= -0.18459326028823853) ? ( (scaler_output_3 <= 1.2327934503555298) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) ) ) : ( (scaler_output_3 <= 0.4104338325560093) ? ( 95 ) : ( (scaler_output_5 <= 0.47002173587679863) ? ( 97 ) : ( (scaler_output_7 <= 1.3157113790512085) ? ( 99 ) : ( 100 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_8
		
	
		namespace EXT_SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {5.293284 }} ,
					{ 7 ,  {6.98004624 }} ,
					{ 10 ,  {8.24017885 }} ,
					{ 11 ,  {8.0628501 }} ,
					{ 12 ,  {7.73242981 }} ,
					{ 13 ,  {10.04520361 }} ,
					{ 17 ,  {11.31351814 }} ,
					{ 18 ,  {11.78982164 }} ,
					{ 20 ,  {10.48306677 }} ,
					{ 21 ,  {10.2020931 }} ,
					{ 22 ,  {14.0511849 }} ,
					{ 25 ,  {12.76012926 }} ,
					{ 27 ,  {14.46699637 }} ,
					{ 28 ,  {14.77256375 }} ,
					{ 29 ,  {16.3247696 }} ,
					{ 31 ,  {7.21944335 }} ,
					{ 35 ,  {10.18163117 }} ,
					{ 38 ,  {15.30848399 }} ,
					{ 39 ,  {14.53624519 }} ,
					{ 40 ,  {13.11975672 }} ,
					{ 44 ,  {18.28251507 }} ,
					{ 45 ,  {18.25069552 }} ,
					{ 46 ,  {17.36059041 }} ,
					{ 48 ,  {16.30127921 }} ,
					{ 50 ,  {15.70100345 }} ,
					{ 51 ,  {15.70652198 }} ,
					{ 57 ,  {13.17420206 }} ,
					{ 58 ,  {16.91440831 }} ,
					{ 60 ,  {20.06970209 }} ,
					{ 63 ,  {17.31914707 }} ,
					{ 65 ,  {17.4514578 }} ,
					{ 66 ,  {17.51855413 }} ,
					{ 69 ,  {17.954677 }} ,
					{ 70 ,  {17.89244708 }} ,
					{ 72 ,  {18.25024804 }} ,
					{ 73 ,  {18.23761382 }} ,
					{ 74 ,  {12.42341176 }} ,
					{ 77 ,  {19.59215343 }} ,
					{ 78 ,  {19.36426348 }} ,
					{ 80 ,  {20.62985591 }} ,
					{ 81 ,  {20.19903361 }} ,
					{ 84 ,  {17.41761148 }} ,
					{ 85 ,  {19.30378831 }} ,
					{ 89 ,  {23.6939704 }} ,
					{ 91 ,  {23.03027937 }} ,
					{ 92 ,  {22.76939497 }} ,
					{ 93 ,  {25.24805848 }} ,
					{ 94 ,  {20.70189537 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.5990101397037506) ? ( (scaler_output_6 <= 0.2855916991829872) ? ( (scaler_output_5 <= -0.22010701894760132) ? ( (scaler_output_10 <= -0.8579889237880707) ? ( 4 ) : ( (scaler_output_9 <= 0.9429537355899811) ? ( (scaler_output_8 <= -0.7917318940162659) ? ( 7 ) : ( (scaler_output_10 <= 0.27572503685951233) ? ( (scaler_output_3 <= -0.8296851217746735) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( 13 ) ) ) : ( (scaler_output_4 <= 1.2920085787773132) ? ( (scaler_output_9 <= 0.17041368037462234) ? ( (scaler_output_3 <= -1.1652402877807617) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_4 <= -0.35675403475761414) ? ( 20 ) : ( 21 ) ) ) : ( 22 ) ) ) : ( (scaler_output_9 <= 0.9613550305366516) ? ( (scaler_output_5 <= -0.701123982667923) ? ( 25 ) : ( (scaler_output_5 <= -0.3366477005183697) ? ( 27 ) : ( 28 ) ) ) : ( 29 ) ) ) : ( (scaler_output_5 <= -1.7781072854995728) ? ( 31 ) : ( (scaler_output_8 <= -0.5065665990114212) ? ( (scaler_output_2 <= -0.7435633540153503) ? ( (scaler_output_7 <= -1.1481241285800934) ? ( 35 ) : ( (scaler_output_6 <= 0.8819322166964412) ? ( (scaler_output_6 <= -0.31811113376170397) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) : ( (scaler_output_9 <= 0.5806009322404861) ? ( (scaler_output_4 <= 0.7637431919574738) ? ( (scaler_output_3 <= -0.12131612421944737) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) : ( (scaler_output_8 <= -1.1871193647384644) ? ( 48 ) : ( (scaler_output_2 <= 0.4333132281899452) ? ( 50 ) : ( 51 ) ) ) ) ) : ( (scaler_output_5 <= 0.8508428931236267) ? ( (scaler_output_3 <= 1.1969408988952637) ? ( (scaler_output_5 <= 0.6644933819770813) ? ( (scaler_output_4 <= -0.5977477580308914) ? ( (scaler_output_6 <= -0.18806783854961395) ? ( 57 ) : ( 58 ) ) : ( (scaler_output_7 <= -0.8840323388576508) ? ( 60 ) : ( (scaler_output_2 <= 0.4210478961467743) ? ( (scaler_output_8 <= 0.6652004420757294) ? ( 63 ) : ( (scaler_output_4 <= 0.7888452410697937) ? ( 65 ) : ( 66 ) ) ) : ( (scaler_output_10 <= 0.40289323031902313) ? ( (scaler_output_6 <= 0.18284441530704498) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_9 <= -0.8370184004306793) ? ( 72 ) : ( 73 ) ) ) ) ) ) : ( 74 ) ) : ( (scaler_output_8 <= 0.21829358860850334) ? ( (scaler_output_10 <= 1.2205744087696075) ? ( 77 ) : ( 78 ) ) : ( (scaler_output_3 <= 1.3925305604934692) ? ( 80 ) : ( 81 ) ) ) ) : ( (scaler_output_7 <= -0.35087767853110563) ? ( (scaler_output_10 <= -0.6080703914631158) ? ( 84 ) : ( 85 ) ) : ( (scaler_output_9 <= 1.2437933683395386) ? ( (scaler_output_11 <= 0.1539810700342059) ? ( (scaler_output_5 <= 1.0721152424812317) ? ( 89 ) : ( (scaler_output_3 <= 1.03066948056221) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( 94 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_9
		
	
		namespace EXT_SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {9.73504122 }} ,
					{ 5 ,  {8.0628501 }} ,
					{ 7 ,  {5.293284 }} ,
					{ 8 ,  {6.24571025 }} ,
					{ 15 ,  {12.0711718 }} ,
					{ 16 ,  {11.77602305 }} ,
					{ 17 ,  {10.48306677 }} ,
					{ 21 ,  {7.73242981 }} ,
					{ 22 ,  {8.24017885 }} ,
					{ 23 ,  {8.89707415 }} ,
					{ 25 ,  {10.04520361 }} ,
					{ 26 ,  {10.59689049 }} ,
					{ 29 ,  {12.83034463 }} ,
					{ 30 ,  {12.76012926 }} ,
					{ 31 ,  {11.78982164 }} ,
					{ 33 ,  {15.92255811 }} ,
					{ 35 ,  {14.0511849 }} ,
					{ 36 ,  {13.17420206 }} ,
					{ 40 ,  {18.00761757 }} ,
					{ 41 ,  {18.4937214 }} ,
					{ 43 ,  {16.30255672 }} ,
					{ 44 ,  {16.08254262 }} ,
					{ 46 ,  {11.38099315 }} ,
					{ 47 ,  {14.46699637 }} ,
					{ 50 ,  {7.21944335 }} ,
					{ 54 ,  {15.30848399 }} ,
					{ 55 ,  {14.53624519 }} ,
					{ 56 ,  {12.42341176 }} ,
					{ 57 ,  {19.30378831 }} ,
					{ 63 ,  {16.30127921 }} ,
					{ 64 ,  {16.0096116 }} ,
					{ 66 ,  {15.54179787 }} ,
					{ 67 ,  {15.70652198 }} ,
					{ 69 ,  {18.25069552 }} ,
					{ 70 ,  {17.89244708 }} ,
					{ 74 ,  {17.954677 }} ,
					{ 75 ,  {18.10948375 }} ,
					{ 76 ,  {17.51855413 }} ,
					{ 79 ,  {18.23761382 }} ,
					{ 80 ,  {18.25024804 }} ,
					{ 83 ,  {20.06970209 }} ,
					{ 84 ,  {19.95894273 }} ,
					{ 86 ,  {19.59215343 }} ,
					{ 87 ,  {19.36426348 }} ,
					{ 89 ,  {17.41761148 }} ,
					{ 92 ,  {21.34099337 }} ,
					{ 93 ,  {21.77400035 }} ,
					{ 95 ,  {23.76092016 }} ,
					{ 97 ,  {23.03027937 }} ,
					{ 98 ,  {22.76939497 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.12853724043816328) ? ( (scaler_output_5 <= -1.0131055116653442) ? ( (scaler_output_9 <= 0.05892374366521835) ? ( (scaler_output_9 <= -0.3170451447367668) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_6 <= -0.5465253964066505) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_6 <= 0.6631695628166199) ? ( (scaler_output_3 <= -0.6702880263328552) ? ( (scaler_output_4 <= 0.5810590535402298) ? ( (scaler_output_4 <= -0.41715122759342194) ? ( (scaler_output_9 <= -0.24218949675559998) ? ( (scaler_output_6 <= -0.468206450343132) ? ( 15 ) : ( 16 ) ) : ( 17 ) ) : ( (scaler_output_2 <= 0.45956485718488693) ? ( (scaler_output_5 <= 0.24529233574867249) ? ( (scaler_output_2 <= -0.9043329432606697) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (scaler_output_6 <= 0.2781211957335472) ? ( 25 ) : ( 26 ) ) ) ) : ( (scaler_output_3 <= -0.8640663921833038) ? ( (scaler_output_2 <= -0.25694575905799866) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) : ( (scaler_output_4 <= -0.7758426070213318) ? ( 33 ) : ( (scaler_output_11 <= 0.2633386626839638) ? ( 35 ) : ( 36 ) ) ) ) : ( (scaler_output_6 <= 1.6327390670776367) ? ( (scaler_output_9 <= -0.16896472871303558) ? ( (scaler_output_6 <= 1.4253177642822266) ? ( 40 ) : ( 41 ) ) : ( (scaler_output_11 <= 0.03158995509147644) ? ( 43 ) : ( 44 ) ) ) : ( (scaler_output_10 <= -0.33393269777297974) ? ( 46 ) : ( 47 ) ) ) ) ) : ( (scaler_output_2 <= -1.002018392086029) ? ( (scaler_output_5 <= -0.7440596669912338) ? ( 50 ) : ( (scaler_output_9 <= 0.7068003714084625) ? ( (scaler_output_4 <= 0.7786935120820999) ? ( (scaler_output_4 <= -0.4026244133710861) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) ) : ( (scaler_output_5 <= 0.7374852299690247) ? ( (scaler_output_5 <= -0.9310081601142883) ? ( (scaler_output_2 <= 0.9644909799098969) ? ( (scaler_output_8 <= -1.0799291133880615) ? ( (scaler_output_8 <= -1.4769281148910522) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_2 <= 0.007468044757843018) ? ( 66 ) : ( 67 ) ) ) : ( (scaler_output_6 <= 0.25824561808258295) ? ( 69 ) : ( 70 ) ) ) : ( (scaler_output_10 <= -0.08968852460384369) ? ( (scaler_output_3 <= 0.7692352831363678) ? ( (scaler_output_11 <= -0.12993520498275757) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) : ( (scaler_output_3 <= 0.821411520242691) ? ( (scaler_output_10 <= 1.4331046342849731) ? ( 79 ) : ( 80 ) ) : ( (scaler_output_5 <= 0.008078690618276596) ? ( (scaler_output_5 <= -0.4930250234901905) ? ( 83 ) : ( 84 ) ) : ( (scaler_output_6 <= 0.22322845458984375) ? ( 86 ) : ( 87 ) ) ) ) ) ) : ( (scaler_output_11 <= -1.7283473014831543) ? ( 89 ) : ( (scaler_output_3 <= 0.261717714369297) ? ( (scaler_output_2 <= 0.7235237956047058) ? ( 92 ) : ( 93 ) ) : ( (scaler_output_10 <= -0.5686390101909637) ? ( 95 ) : ( (scaler_output_3 <= 1.03066948056221) ? ( 97 ) : ( 98 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_10
		
	
		namespace EXT_SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {5.293284 }} ,
					{ 7 ,  {5.79437904 }} ,
					{ 9 ,  {6.98004624 }} ,
					{ 10 ,  {6.86145372 }} ,
					{ 11 ,  {8.24017885 }} ,
					{ 16 ,  {12.10988659 }} ,
					{ 17 ,  {12.123142 }} ,
					{ 18 ,  {11.78982164 }} ,
					{ 21 ,  {10.48306677 }} ,
					{ 22 ,  {10.2020931 }} ,
					{ 24 ,  {11.77602305 }} ,
					{ 25 ,  {11.31351814 }} ,
					{ 27 ,  {15.92255811 }} ,
					{ 29 ,  {14.0511849 }} ,
					{ 30 ,  {14.77256375 }} ,
					{ 34 ,  {18.00761757 }} ,
					{ 36 ,  {18.4937214 }} ,
					{ 37 ,  {18.33205802 }} ,
					{ 39 ,  {16.08254262 }} ,
					{ 40 ,  {14.46699637 }} ,
					{ 41 ,  {23.6939704 }} ,
					{ 44 ,  {7.21944335 }} ,
					{ 46 ,  {10.18163117 }} ,
					{ 48 ,  {22.76939497 }} ,
					{ 51 ,  {22.30975449 }} ,
					{ 53 ,  {19.30378831 }} ,
					{ 55 ,  {20.06970209 }} ,
					{ 56 ,  {19.95894273 }} ,
					{ 58 ,  {21.77400035 }} ,
					{ 63 ,  {17.80609749 }} ,
					{ 66 ,  {17.41761148 }} ,
					{ 67 ,  {17.4514578 }} ,
					{ 68 ,  {17.51855413 }} ,
					{ 72 ,  {18.23761382 }} ,
					{ 74 ,  {18.25024804 }} ,
					{ 75 ,  {18.25069552 }} ,
					{ 76 ,  {18.28251507 }} ,
					{ 78 ,  {17.89244708 }} ,
					{ 79 ,  {17.954677 }} ,
					{ 81 ,  {16.30127921 }} ,
					{ 82 ,  {15.70100345 }} ,
					{ 84 ,  {17.36059041 }} ,
					{ 86 ,  {18.9003877 }} ,
					{ 88 ,  {19.59215343 }} ,
					{ 89 ,  {20.19903361 }} ,
					{ 93 ,  {23.18131441 }} ,
					{ 95 ,  {25.24805848 }} ,
					{ 96 ,  {24.71333827 }} ,
					{ 98 ,  {20.62985591 }} ,
					{ 99 ,  {20.70189537 }} ,
					{ 100 ,  {14.53624519 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.2825087904930115) ? ( (scaler_output_6 <= 0.8974297046661377) ? ( (scaler_output_5 <= -0.31683310121297836) ? ( (scaler_output_7 <= 0.16519685089588165) ? ( (scaler_output_5 <= -1.4128466844558716) ? ( (scaler_output_10 <= -0.11081868410110474) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_6 <= -0.6518208757042885) ? ( 9 ) : ( 10 ) ) ) : ( 11 ) ) : ( (scaler_output_3 <= -0.7602905631065369) ? ( (scaler_output_8 <= -0.5940360724925995) ? ( (scaler_output_2 <= 0.6429652869701385) ? ( (scaler_output_8 <= -1.3890385031700134) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) : ( (scaler_output_7 <= -0.14047858119010925) ? ( (scaler_output_8 <= -0.1495157890021801) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_3 <= -1.5264851450920105) ? ( 24 ) : ( 25 ) ) ) ) : ( (scaler_output_6 <= -0.4942489564418793) ? ( 27 ) : ( (scaler_output_3 <= -0.6356008350849152) ? ( 29 ) : ( 30 ) ) ) ) ) : ( (scaler_output_9 <= 0.902372419834137) ? ( (scaler_output_6 <= 1.558141052722931) ? ( (scaler_output_2 <= 0.32790517807006836) ? ( 34 ) : ( (scaler_output_3 <= -1.0563082695007324) ? ( 36 ) : ( 37 ) ) ) : ( (scaler_output_8 <= 0.6391022503376007) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) ) : ( (scaler_output_7 <= 1.2079678177833557) ? ( (scaler_output_5 <= -1.7781072854995728) ? ( 44 ) : ( (scaler_output_7 <= -1.8351979851722717) ? ( 46 ) : ( (scaler_output_4 <= -1.4688674807548523) ? ( 48 ) : ( (scaler_output_7 <= -0.8966631293296814) ? ( (scaler_output_8 <= 0.7344706058502197) ? ( 51 ) : ( (scaler_output_6 <= 0.13360604643821716) ? ( 53 ) : ( (scaler_output_6 <= 1.2932146191596985) ? ( 55 ) : ( 56 ) ) ) ) : ( (scaler_output_8 <= -1.6427521705627441) ? ( 58 ) : ( (scaler_output_3 <= 1.4981982111930847) ? ( (scaler_output_9 <= 0.5294337719678879) ? ( (scaler_output_10 <= -0.48029179871082306) ? ( (scaler_output_3 <= 0.6590147763490677) ? ( 63 ) : ( (scaler_output_4 <= 0.7888452410697937) ? ( (scaler_output_11 <= -1.6039016842842102) ? ( 66 ) : ( 67 ) ) : ( 68 ) ) ) : ( (scaler_output_2 <= 1.0248532891273499) ? ( (scaler_output_5 <= 0.6743910424411297) ? ( (scaler_output_2 <= 0.6665663868188858) ? ( 72 ) : ( (scaler_output_11 <= -0.15435349941253662) ? ( 74 ) : ( 75 ) ) ) : ( 76 ) ) : ( (scaler_output_11 <= -1.6773877143859863) ? ( 78 ) : ( 79 ) ) ) ) : ( (scaler_output_10 <= -0.16512668132781982) ? ( 81 ) : ( 82 ) ) ) : ( (scaler_output_5 <= 0.1514061540365219) ? ( 84 ) : ( (scaler_output_10 <= -0.4079284965991974) ? ( 86 ) : ( (scaler_output_3 <= 1.5717870593070984) ? ( 88 ) : ( 89 ) ) ) ) ) ) ) ) ) ) : ( (scaler_output_3 <= 1.4954568147659302) ? ( (scaler_output_2 <= 0.2511781081557274) ? ( (scaler_output_5 <= 0.47002173587679863) ? ( 93 ) : ( (scaler_output_10 <= -0.002965271472930908) ? ( 95 ) : ( 96 ) ) ) : ( (scaler_output_4 <= 0.13123464584350586) ? ( 98 ) : ( 99 ) ) ) : ( 100 ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_11
		
	
		namespace EXT_SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {5.79437904 }} ,
					{ 7 ,  {6.24571025 }} ,
					{ 8 ,  {5.293284 }} ,
					{ 10 ,  {6.86145372 }} ,
					{ 11 ,  {7.55699808 }} ,
					{ 13 ,  {17.31914707 }} ,
					{ 16 ,  {8.89707415 }} ,
					{ 21 ,  {11.31351814 }} ,
					{ 22 ,  {10.48306677 }} ,
					{ 24 ,  {11.77602305 }} ,
					{ 26 ,  {12.123142 }} ,
					{ 27 ,  {12.10988659 }} ,
					{ 30 ,  {10.2020931 }} ,
					{ 31 ,  {10.04520361 }} ,
					{ 32 ,  {10.59689049 }} ,
					{ 35 ,  {11.78982164 }} ,
					{ 36 ,  {12.0711718 }} ,
					{ 38 ,  {12.76012926 }} ,
					{ 39 ,  {13.17420206 }} ,
					{ 40 ,  {6.98004624 }} ,
					{ 44 ,  {16.30255672 }} ,
					{ 47 ,  {18.33205802 }} ,
					{ 48 ,  {18.4937214 }} ,
					{ 49 ,  {18.00761757 }} ,
					{ 50 ,  {23.6939704 }} ,
					{ 52 ,  {11.38099315 }} ,
					{ 53 ,  {14.46699637 }} ,
					{ 58 ,  {10.18163117 }} ,
					{ 59 ,  {12.42341176 }} ,
					{ 62 ,  {15.30848399 }} ,
					{ 63 ,  {14.53624519 }} ,
					{ 64 ,  {13.11975672 }} ,
					{ 66 ,  {19.30378831 }} ,
					{ 67 ,  {20.19903361 }} ,
					{ 72 ,  {17.89244708 }} ,
					{ 73 ,  {17.51855413 }} ,
					{ 76 ,  {18.25069552 }} ,
					{ 77 ,  {18.25024804 }} ,
					{ 78 ,  {18.23761382 }} ,
					{ 80 ,  {15.70652198 }} ,
					{ 81 ,  {15.70100345 }} ,
					{ 85 ,  {21.77400035 }} ,
					{ 86 ,  {22.76939497 }} ,
					{ 89 ,  {17.36059041 }} ,
					{ 90 ,  {17.41761148 }} ,
					{ 92 ,  {18.28251507 }} ,
					{ 93 ,  {18.9003877 }} ,
					{ 97 ,  {23.76092016 }} ,
					{ 99 ,  {23.03027937 }} ,
					{ 100 ,  {23.18131441 }} ,
					{ 102 ,  {25.24805848 }} ,
					{ 103 ,  {24.71333827 }} ,
					{ 105 ,  {21.34099337 }} ,
					{ 106 ,  {19.36426348 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.2825087904930115) ? ( (scaler_output_6 <= 0.6482125818729401) ? ( (scaler_output_5 <= -1.0327386260032654) ? ( (scaler_output_6 <= -0.0061066001653671265) ? ( (scaler_output_11 <= 0.9797397255897522) ? ( (scaler_output_5 <= -1.609270453453064) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_7 <= 0.2529193311929703) ? ( 10 ) : ( 11 ) ) ) : ( (scaler_output_9 <= -1.4538482427597046) ? ( 13 ) : ( (scaler_output_10 <= 1.2846095561981201) ? ( (scaler_output_8 <= -1.4903945326805115) ? ( 16 ) : ( (scaler_output_3 <= -0.960707813501358) ? ( (scaler_output_11 <= 0.22556444257497787) ? ( (scaler_output_6 <= -0.2508396878838539) ? ( (scaler_output_9 <= 0.274072490632534) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_10 <= -0.48596322536468506) ? ( 24 ) : ( (scaler_output_6 <= 0.13865887373685837) ? ( 26 ) : ( 27 ) ) ) ) : ( (scaler_output_7 <= 0.1715179681777954) ? ( (scaler_output_9 <= 0.7597338706254959) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) ) : ( (scaler_output_11 <= 0.4022436589002609) ? ( (scaler_output_3 <= -0.7696717977523804) ? ( 35 ) : ( 36 ) ) : ( (scaler_output_3 <= -0.6551204025745392) ? ( 38 ) : ( 39 ) ) ) ) ) : ( 40 ) ) ) ) : ( (scaler_output_6 <= 1.6669470071792603) ? ( (scaler_output_6 <= 1.5923489928245544) ? ( (scaler_output_5 <= 0.4527852237224579) ? ( 44 ) : ( (scaler_output_9 <= -0.4717315584421158) ? ( (scaler_output_4 <= 0.3485150933265686) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) ) : ( 50 ) ) : ( (scaler_output_7 <= -0.3311998248100281) ? ( 52 ) : ( 53 ) ) ) ) : ( (scaler_output_2 <= -0.7201983630657196) ? ( (scaler_output_8 <= 0.4229904115200043) ? ( (scaler_output_9 <= -0.7700740098953247) ? ( (scaler_output_5 <= -0.0824936032295227) ? ( 58 ) : ( 59 ) ) : ( (scaler_output_2 <= -1.194003701210022) ? ( (scaler_output_2 <= -1.4927203059196472) ? ( 62 ) : ( 63 ) ) : ( 64 ) ) ) : ( (scaler_output_3 <= 1.240412414073944) ? ( 66 ) : ( 67 ) ) ) : ( (scaler_output_5 <= 0.021007142961025238) ? ( (scaler_output_9 <= 0.5294337719678879) ? ( (scaler_output_10 <= -0.2313607707619667) ? ( (scaler_output_11 <= -0.3305744528770447) ? ( 72 ) : ( 73 ) ) : ( (scaler_output_8 <= 0.7513820081949234) ? ( (scaler_output_4 <= -0.26165977120399475) ? ( 76 ) : ( 77 ) ) : ( 78 ) ) ) : ( (scaler_output_10 <= 1.0904134809970856) ? ( 80 ) : ( 81 ) ) ) : ( (scaler_output_8 <= -0.35078954696655273) ? ( (scaler_output_4 <= -0.8881331533193588) ? ( (scaler_output_7 <= 0.7468560636043549) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_6 <= -0.5699408650398254) ? ( (scaler_output_8 <= -0.438055083155632) ? ( 89 ) : ( 90 ) ) : ( (scaler_output_4 <= 0.9978832900524139) ? ( 92 ) : ( 93 ) ) ) ) : ( (scaler_output_11 <= 0.36913497745990753) ? ( (scaler_output_7 <= 1.2418496012687683) ? ( (scaler_output_10 <= -0.5686390101909637) ? ( 97 ) : ( (scaler_output_7 <= 0.6145438490930246) ? ( 99 ) : ( 100 ) ) ) : ( (scaler_output_2 <= -0.275451622903347) ? ( 102 ) : ( 103 ) ) ) : ( (scaler_output_11 <= 0.7545805424451828) ? ( 105 ) : ( 106 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_12
		
	
		namespace EXT_SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {10.18163117 }} ,
					{ 7 ,  {10.04520361 }} ,
					{ 9 ,  {12.0711718 }} ,
					{ 10 ,  {12.123142 }} ,
					{ 14 ,  {6.98004624 }} ,
					{ 15 ,  {6.86145372 }} ,
					{ 17 ,  {6.24571025 }} ,
					{ 18 ,  {5.79437904 }} ,
					{ 22 ,  {7.55699808 }} ,
					{ 23 ,  {7.73242981 }} ,
					{ 24 ,  {7.21944335 }} ,
					{ 26 ,  {8.0628501 }} ,
					{ 27 ,  {8.24017885 }} ,
					{ 29 ,  {16.91440831 }} ,
					{ 30 ,  {15.70100345 }} ,
					{ 33 ,  {17.89244708 }} ,
					{ 34 ,  {18.23761382 }} ,
					{ 37 ,  {12.76012926 }} ,
					{ 38 ,  {13.11975672 }} ,
					{ 40 ,  {15.54179787 }} ,
					{ 41 ,  {14.46699637 }} ,
					{ 46 ,  {10.2020931 }} ,
					{ 47 ,  {10.59689049 }} ,
					{ 49 ,  {12.10988659 }} ,
					{ 50 ,  {12.83034463 }} ,
					{ 51 ,  {18.4937214 }} ,
					{ 58 ,  {18.00761757 }} ,
					{ 60 ,  {18.33205802 }} ,
					{ 61 ,  {18.25024804 }} ,
					{ 64 ,  {17.4514578 }} ,
					{ 65 ,  {17.51855413 }} ,
					{ 66 ,  {17.36059041 }} ,
					{ 68 ,  {16.3247696 }} ,
					{ 69 ,  {15.92255811 }} ,
					{ 71 ,  {17.31914707 }} ,
					{ 75 ,  {19.95894273 }} ,
					{ 76 ,  {20.19903361 }} ,
					{ 77 ,  {20.62985591 }} ,
					{ 78 ,  {19.36426348 }} ,
					{ 79 ,  {12.42341176 }} ,
					{ 81 ,  {15.30848399 }} ,
					{ 85 ,  {21.77400035 }} ,
					{ 87 ,  {23.03027937 }} ,
					{ 88 ,  {22.76939497 }} ,
					{ 91 ,  {23.76092016 }} ,
					{ 92 ,  {23.6939704 }} ,
					{ 93 ,  {24.71333827 }} ,
					{ 96 ,  {22.30975449 }} ,
					{ 98 ,  {21.34099337 }} ,
					{ 99 ,  {20.70189537 }} ,
					{ 100 ,  {18.9003877 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_5 <= -0.22762642055749893) ? ( (scaler_output_6 <= 0.3923843204975128) ? ( (scaler_output_3 <= 0.6856510639190674) ? ( (scaler_output_7 <= -1.149171769618988) ? ( (scaler_output_5 <= -0.6961230039596558) ? ( (scaler_output_7 <= -1.683074712753296) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_4 <= 0.051272571086883545) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_7 <= 0.17647136747837067) ? ( (scaler_output_4 <= 0.36616022884845734) ? ( (scaler_output_11 <= 0.13535846769809723) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_8 <= 0.5006175339221954) ? ( 17 ) : ( 18 ) ) ) : ( (scaler_output_4 <= 0.12520407140254974) ? ( (scaler_output_7 <= 0.9418817758560181) ? ( (scaler_output_5 <= -0.8963561952114105) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) : ( (scaler_output_5 <= -0.779866099357605) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (scaler_output_3 <= 1.0880453288555145) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_9 <= -0.36881090700626373) ? ( (scaler_output_10 <= 0.40289323031902313) ? ( 33 ) : ( 34 ) ) : ( (scaler_output_10 <= -0.5725537836551666) ? ( (scaler_output_8 <= -1.2992315292358398) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_6 <= 1.4364500641822815) ? ( 40 ) : ( 41 ) ) ) ) ) : ( (scaler_output_3 <= -1.0470510721206665) ? ( (scaler_output_4 <= 1.0671523809432983) ? ( (scaler_output_9 <= 1.0411399751901627) ? ( (scaler_output_7 <= 0.1715179681777954) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_4 <= -0.25683826208114624) ? ( 49 ) : ( 50 ) ) ) : ( 51 ) ) : ( (scaler_output_5 <= 0.7781765460968018) ? ( (scaler_output_7 <= 1.3235834240913391) ? ( (scaler_output_11 <= 1.0998644828796387) ? ( (scaler_output_9 <= 0.6638046652078629) ? ( (scaler_output_9 <= -0.2675075829029083) ? ( (scaler_output_8 <= -0.7917432636022568) ? ( 58 ) : ( (scaler_output_2 <= 0.6846863776445389) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_9 <= 0.39840084314346313) ? ( (scaler_output_10 <= -1.1404487490653992) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) : ( (scaler_output_3 <= -0.689156174659729) ? ( 68 ) : ( 69 ) ) ) : ( (scaler_output_9 <= -1.40859055519104) ? ( 71 ) : ( (scaler_output_2 <= 0.48330582678318024) ? ( (scaler_output_9 <= 0.21158869564533234) ? ( (scaler_output_3 <= 1.4273104071617126) ? ( 75 ) : ( 76 ) ) : ( 77 ) ) : ( 78 ) ) ) ) : ( 79 ) ) : ( (scaler_output_2 <= -0.7461959347128868) ? ( 81 ) : ( (scaler_output_11 <= -0.003324707970023155) ? ( (scaler_output_9 <= 1.1465093493461609) ? ( (scaler_output_3 <= 0.17016154248267412) ? ( 85 ) : ( (scaler_output_10 <= 1.0969816148281097) ? ( 87 ) : ( 88 ) ) ) : ( (scaler_output_10 <= 0.22716347873210907) ? ( (scaler_output_11 <= -0.2604822861030698) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) ) : ( (scaler_output_4 <= 1.1509721875190735) ? ( (scaler_output_4 <= -0.19120264053344727) ? ( 96 ) : ( (scaler_output_2 <= 0.6222974359989166) ? ( 98 ) : ( 99 ) ) ) : ( 100 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_13
		
	
		namespace EXT_SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {12.0711718 }} ,
					{ 5 ,  {13.11975672 }} ,
					{ 8 ,  {9.73504122 }} ,
					{ 9 ,  {10.04520361 }} ,
					{ 13 ,  {6.24571025 }} ,
					{ 15 ,  {5.79437904 }} ,
					{ 16 ,  {5.293284 }} ,
					{ 18 ,  {6.86145372 }} ,
					{ 19 ,  {6.98004624 }} ,
					{ 22 ,  {8.24017885 }} ,
					{ 23 ,  {8.0628501 }} ,
					{ 24 ,  {7.73242981 }} ,
					{ 28 ,  {14.77256375 }} ,
					{ 29 ,  {17.31914707 }} ,
					{ 31 ,  {10.59689049 }} ,
					{ 34 ,  {13.17420206 }} ,
					{ 35 ,  {12.83034463 }} ,
					{ 37 ,  {12.123142 }} ,
					{ 38 ,  {12.10988659 }} ,
					{ 42 ,  {18.00761757 }} ,
					{ 43 ,  {18.4937214 }} ,
					{ 44 ,  {16.30255672 }} ,
					{ 45 ,  {11.38099315 }} ,
					{ 50 ,  {10.18163117 }} ,
					{ 51 ,  {10.13178962 }} ,
					{ 54 ,  {15.30848399 }} ,
					{ 55 ,  {14.53624519 }} ,
					{ 56 ,  {12.42341176 }} ,
					{ 60 ,  {15.54179787 }} ,
					{ 61 ,  {16.30127921 }} ,
					{ 62 ,  {17.4514578 }} ,
					{ 64 ,  {20.19903361 }} ,
					{ 65 ,  {19.95894273 }} ,
					{ 69 ,  {22.76939497 }} ,
					{ 75 ,  {17.41761148 }} ,
					{ 76 ,  {17.36059041 }} ,
					{ 78 ,  {18.25024804 }} ,
					{ 80 ,  {17.954677 }} ,
					{ 81 ,  {17.80609749 }} ,
					{ 82 ,  {16.0096116 }} ,
					{ 84 ,  {18.9003877 }} ,
					{ 86 ,  {18.25069552 }} ,
					{ 87 ,  {18.10948375 }} ,
					{ 90 ,  {20.06970209 }} ,
					{ 91 ,  {19.36426348 }} ,
					{ 92 ,  {18.23761382 }} ,
					{ 95 ,  {23.03027937 }} ,
					{ 96 ,  {22.30975449 }} ,
					{ 97 ,  {21.34099337 }} ,
					{ 100 ,  {25.24805848 }} ,
					{ 101 ,  {24.71333827 }} ,
					{ 102 ,  {23.18131441 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.01687277527526021) ? ( (scaler_output_5 <= -0.2676679417490959) ? ( (scaler_output_4 <= -0.6136064678430557) ? ( (scaler_output_7 <= -0.5804587155580521) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_7 <= -1.2620937824249268) ? ( (scaler_output_5 <= -1.2189649939537048) ? ( 8 ) : ( 9 ) ) : ( (scaler_output_7 <= 0.17647136747837067) ? ( (scaler_output_5 <= -1.409048080444336) ? ( (scaler_output_8 <= -0.45740053057670593) ? ( 13 ) : ( (scaler_output_9 <= -0.258749857544899) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_4 <= -0.2668755352497101) ? ( 18 ) : ( 19 ) ) ) : ( (scaler_output_11 <= 0.4658396914601326) ? ( (scaler_output_7 <= 0.8726261854171753) ? ( 22 ) : ( 23 ) ) : ( 24 ) ) ) ) ) : ( (scaler_output_6 <= 0.6631695628166199) ? ( (scaler_output_9 <= -1.4538482427597046) ? ( (scaler_output_5 <= 0.21410824730992317) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_3 <= -1.5535297393798828) ? ( 31 ) : ( (scaler_output_10 <= 0.4544975459575653) ? ( (scaler_output_11 <= 0.7299758344888687) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_9 <= 0.2742440104484558) ? ( 37 ) : ( 38 ) ) ) ) ) : ( (scaler_output_11 <= 0.12510161474347115) ? ( (scaler_output_2 <= 0.6028776615858078) ? ( (scaler_output_11 <= -0.6108684353530407) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) : ( 45 ) ) ) ) : ( (scaler_output_2 <= -0.6842065751552582) ? ( (scaler_output_6 <= 0.8059833943843842) ? ( (scaler_output_5 <= -0.2883421629667282) ? ( (scaler_output_4 <= 0.32005877792835236) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_8 <= -0.13003459572792053) ? ( (scaler_output_4 <= -0.4026244133710861) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) : ( (scaler_output_3 <= 1.2654917240142822) ? ( (scaler_output_6 <= 1.3440638780593872) ? ( (scaler_output_4 <= -1.239029049873352) ? ( 60 ) : ( 61 ) ) : ( 62 ) ) : ( (scaler_output_8 <= 1.0744511187076569) ? ( 64 ) : ( 65 ) ) ) ) : ( (scaler_output_7 <= 1.2079678177833557) ? ( (scaler_output_5 <= 1.4537083506584167) ? ( (scaler_output_4 <= -1.4688674807548523) ? ( 69 ) : ( (scaler_output_6 <= 0.35423246026039124) ? ( (scaler_output_11 <= 1.110346406698227) ? ( (scaler_output_6 <= -0.015840888023376465) ? ( (scaler_output_8 <= -0.3194575607776642) ? ( (scaler_output_10 <= -1.0932499766349792) ? ( 75 ) : ( 76 ) ) : ( (scaler_output_7 <= 0.11888213863130659) ? ( 78 ) : ( (scaler_output_9 <= -0.9589187353849411) ? ( 80 ) : ( 81 ) ) ) ) : ( 82 ) ) : ( (scaler_output_10 <= -0.9636452943086624) ? ( 84 ) : ( (scaler_output_2 <= 1.230956494808197) ? ( 86 ) : ( 87 ) ) ) ) : ( (scaler_output_8 <= 1.6048626899719238) ? ( (scaler_output_5 <= -0.3689930886030197) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) ) ) : ( (scaler_output_4 <= 0.050473034381866455) ? ( (scaler_output_2 <= 0.3192797899246216) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) ) : ( (scaler_output_10 <= 1.1469671428203583) ? ( (scaler_output_6 <= 0.7342626675963402) ? ( 100 ) : ( 101 ) ) : ( 102 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_14
		
	
		namespace EXT_SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {5.293284 }} ,
					{ 6 ,  {6.24571025 }} ,
					{ 8 ,  {7.55699808 }} ,
					{ 9 ,  {6.98004624 }} ,
					{ 13 ,  {10.48306677 }} ,
					{ 15 ,  {10.04520361 }} ,
					{ 16 ,  {10.2020931 }} ,
					{ 17 ,  {11.78982164 }} ,
					{ 19 ,  {11.31351814 }} ,
					{ 21 ,  {8.89707415 }} ,
					{ 23 ,  {8.24017885 }} ,
					{ 24 ,  {7.73242981 }} ,
					{ 27 ,  {12.10988659 }} ,
					{ 29 ,  {12.76012926 }} ,
					{ 30 ,  {12.83034463 }} ,
					{ 32 ,  {18.4937214 }} ,
					{ 33 ,  {16.08254262 }} ,
					{ 40 ,  {15.30848399 }} ,
					{ 41 ,  {15.54179787 }} ,
					{ 42 ,  {14.77256375 }} ,
					{ 43 ,  {13.17420206 }} ,
					{ 45 ,  {10.18163117 }} ,
					{ 46 ,  {6.86145372 }} ,
					{ 49 ,  {14.53624519 }} ,
					{ 52 ,  {16.30127921 }} ,
					{ 53 ,  {16.0096116 }} ,
					{ 54 ,  {17.36059041 }} ,
					{ 56 ,  {17.51855413 }} ,
					{ 59 ,  {19.95894273 }} ,
					{ 60 ,  {20.19903361 }} ,
					{ 61 ,  {19.30378831 }} ,
					{ 67 ,  {17.31914707 }} ,
					{ 71 ,  {18.00761757 }} ,
					{ 72 ,  {17.954677 }} ,
					{ 73 ,  {17.80609749 }} ,
					{ 77 ,  {18.25024804 }} ,
					{ 78 ,  {18.25069552 }} ,
					{ 79 ,  {18.23761382 }} ,
					{ 80 ,  {18.10948375 }} ,
					{ 82 ,  {15.70652198 }} ,
					{ 83 ,  {16.91440831 }} ,
					{ 84 ,  {14.46699637 }} ,
					{ 86 ,  {20.62985591 }} ,
					{ 87 ,  {19.36426348 }} ,
					{ 91 ,  {24.71333827 }} ,
					{ 93 ,  {23.76092016 }} ,
					{ 94 ,  {23.6939704 }} ,
					{ 96 ,  {21.77400035 }} ,
					{ 97 ,  {23.03027937 }} ,
					{ 99 ,  {17.41761148 }} ,
					{ 100 ,  {18.9003877 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = (scaler_output_3 <= -0.7756910920143127) ? ( (scaler_output_6 <= 0.39204226434230804) ? ( (scaler_output_5 <= -0.7714441120624542) ? ( (scaler_output_10 <= 0.7501522600650787) ? ( (scaler_output_4 <= 0.26727570593357086) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_10 <= 1.2952806949615479) ? ( 8 ) : ( 9 ) ) ) : ( (scaler_output_7 <= 0.525112971663475) ? ( (scaler_output_3 <= -0.9563157558441162) ? ( (scaler_output_8 <= -0.1495157890021801) ? ( 13 ) : ( (scaler_output_10 <= -0.3474564030766487) ? ( 15 ) : ( 16 ) ) ) : ( 17 ) ) : ( (scaler_output_10 <= -1.0161524415016174) ? ( 19 ) : ( (scaler_output_6 <= -1.127454161643982) ? ( 21 ) : ( (scaler_output_11 <= 0.4658396914601326) ? ( 23 ) : ( 24 ) ) ) ) ) ) : ( (scaler_output_6 <= 1.05584716796875) ? ( (scaler_output_8 <= -1.3678308725357056) ? ( 27 ) : ( (scaler_output_9 <= 0.7973192129284143) ? ( 29 ) : ( 30 ) ) ) : ( (scaler_output_11 <= 0.5864013619720936) ? ( 32 ) : ( 33 ) ) ) ) : ( (scaler_output_2 <= 0.007412798702716827) ? ( (scaler_output_3 <= 0.4823174625635147) ? ( (scaler_output_4 <= -0.5449816435575485) ? ( (scaler_output_8 <= 0.03929572878405452) ? ( (scaler_output_2 <= -0.5077515840530396) ? ( (scaler_output_2 <= -1.2613603174686432) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) : ( 43 ) ) : ( (scaler_output_11 <= 0.04491947591304779) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_8 <= -0.011688321828842163) ? ( (scaler_output_2 <= -1.0453409850597382) ? ( 49 ) : ( (scaler_output_2 <= -0.5105142593383789) ? ( (scaler_output_4 <= 0.20355701446533203) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) : ( (scaler_output_10 <= -0.3019059479702264) ? ( 56 ) : ( (scaler_output_9 <= 0.8021914213895798) ? ( (scaler_output_9 <= -0.7414731532335281) ? ( 59 ) : ( 60 ) ) : ( 61 ) ) ) ) ) : ( (scaler_output_5 <= 0.7693573534488678) ? ( (scaler_output_3 <= 1.0506720840930939) ? ( (scaler_output_6 <= 1.6510465145111084) ? ( (scaler_output_3 <= 0.7611802816390991) ? ( (scaler_output_10 <= -0.9256821870803833) ? ( 67 ) : ( (scaler_output_10 <= -0.3440239131450653) ? ( (scaler_output_4 <= 0.14998465776443481) ? ( (scaler_output_2 <= 0.9136814326047897) ? ( 71 ) : ( 72 ) ) : ( 73 ) ) : ( (scaler_output_5 <= 0.32778478786349297) ? ( (scaler_output_6 <= 0.7985764006152749) ? ( (scaler_output_6 <= -0.22359330859035254) ? ( 77 ) : ( 78 ) ) : ( 79 ) ) : ( 80 ) ) ) ) : ( (scaler_output_5 <= -1.1437282860279083) ? ( 82 ) : ( 83 ) ) ) : ( 84 ) ) : ( (scaler_output_9 <= 1.0571644604206085) ? ( 86 ) : ( 87 ) ) ) : ( (scaler_output_3 <= 1.1224741637706757) ? ( (scaler_output_5 <= 0.9712488055229187) ? ( (scaler_output_2 <= 0.5047295764088631) ? ( 91 ) : ( (scaler_output_11 <= -0.2604822861030698) ? ( 93 ) : ( 94 ) ) ) : ( (scaler_output_6 <= -0.5505315270274878) ? ( 96 ) : ( 97 ) ) ) : ( (scaler_output_4 <= 0.3951011449098587) ? ( 99 ) : ( 100 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			std::vector<tTable> lTreeScores = { 
				EXT_SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11),
				EXT_SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable = lAggregatedTable;
	
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
