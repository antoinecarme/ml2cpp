// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RandomForestRegressor_Pipeline
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RandomForestRegressor_Pipeline_freidman2.exe ml2cpp-demo_RandomForestRegressor_Pipeline_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 43.79128122207401 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 945.9672833084396 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.5310009099975209 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 6.139967152050499 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 43.79128122207401 ) / 26.03562357622511 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 945.9672833084396 ) / 461.4552766146446 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.5310009099975209 ) / 0.2901863282144786 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 6.139967152050499 ) / 3.072917242564058 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		namespace EXT_SubModel_0 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {17.5126316 }} ,
					{ 6 ,  {45.71113412 }} ,
					{ 7 ,  {42.01839185 }} ,
					{ 10 ,  {74.13416807 }} ,
					{ 11 ,  {66.46875936 }} ,
					{ 13 ,  {89.81697753 }} ,
					{ 14 ,  {81.61991679 }} ,
					{ 17 ,  {112.36813458 }} ,
					{ 18 ,  {154.50461473 }} ,
					{ 23 ,  {205.37013415 }} ,
					{ 24 ,  {212.83015826 }} ,
					{ 25 ,  {222.6809715 }} ,
					{ 26 ,  {168.83377965 }} ,
					{ 28 ,  {238.91298805 }} ,
					{ 30 ,  {310.5792773 }} ,
					{ 32 ,  {337.38826236 }} ,
					{ 33 ,  {345.51744456 }} ,
					{ 39 ,  {96.00340237 }} ,
					{ 40 ,  {131.74760526 }} ,
					{ 42 ,  {184.81176238 }} ,
					{ 43 ,  {241.12137081 }} ,
					{ 46 ,  {340.89432548 }} ,
					{ 47 ,  {367.2164339 }} ,
					{ 50 ,  {242.64398564 }} ,
					{ 51 ,  {287.26242769 }} ,
					{ 52 ,  {304.56729485 }} ,
					{ 56 ,  {565.71521017 }} ,
					{ 57 ,  {557.42418185 }} ,
					{ 58 ,  {501.63259526 }} ,
					{ 59 ,  {419.36346749 }} ,
					{ 65 ,  {651.51242251 }} ,
					{ 67 ,  {630.47308595 }} ,
					{ 68 ,  {616.90506534 }} ,
					{ 69 ,  {469.13995216 }} ,
					{ 71 ,  {859.39726521 }} ,
					{ 74 ,  {670.13118584 }} ,
					{ 75 ,  {695.99180066 }} ,
					{ 77 ,  {737.40865774 }} ,
					{ 78 ,  {753.58663382 }} ,
					{ 80 ,  {816.81265916 }} ,
					{ 84 ,  {964.56286917 }} ,
					{ 86 ,  {936.66449274 }} ,
					{ 87 ,  {936.08984202 }} ,
					{ 88 ,  {897.11075364 }} ,
					{ 89 ,  {1054.16277579 }} ,
					{ 92 ,  {954.01675074 }} ,
					{ 93 ,  {1072.70246576 }} ,
					{ 95 ,  {1185.2623187 }} ,
					{ 97 ,  {1450.4501203 }} ,
					{ 98 ,  {1344.28572632 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.37393590807914734) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 4 ) : ( (scaler_output_3 <= -0.19290710985660553) ? ( 6 ) : ( 7 ) ) ) : ( (scaler_output_5 <= -0.4966336525976658) ? ( (scaler_output_2 <= -0.48091481626033783) ? ( 10 ) : ( 11 ) ) : ( (scaler_output_3 <= 0.49332664906978607) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_3 <= -0.6009503453969955) ? ( (scaler_output_5 <= 0.24834014847874641) ? ( 17 ) : ( 18 ) ) : ( (scaler_output_4 <= -1.0669001638889313) ? ( (scaler_output_5 <= 0.14106056094169617) ? ( (scaler_output_5 <= -0.5445553362369537) ? ( (scaler_output_3 <= 0.7902272269129753) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) : ( 26 ) ) : ( (scaler_output_5 <= -1.4534865021705627) ? ( 28 ) : ( (scaler_output_4 <= -0.9403093159198761) ? ( 30 ) : ( (scaler_output_4 <= -0.7798610925674438) ? ( 32 ) : ( 33 ) ) ) ) ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.3777616024017334) ? ( (scaler_output_2 <= 0.3852245658636093) ? ( (scaler_output_3 <= -1.6158922910690308) ? ( 39 ) : ( 40 ) ) : ( (scaler_output_4 <= 1.1004490554332733) ? ( 42 ) : ( 43 ) ) ) : ( (scaler_output_5 <= -0.5978177636861801) ? ( (scaler_output_4 <= 1.0052908957004547) ? ( 46 ) : ( 47 ) ) : ( (scaler_output_5 <= 0.7377939373254776) ? ( (scaler_output_3 <= -1.0520573556423187) ? ( 50 ) : ( 51 ) ) : ( 52 ) ) ) ) : ( (scaler_output_5 <= 1.336892306804657) ? ( (scaler_output_2 <= -0.2910245507955551) ? ( (scaler_output_4 <= 1.0331071466207504) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) : ( 59 ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_2 <= -0.32780515402555466) ? ( (scaler_output_5 <= 1.1431884765625) ? ( (scaler_output_2 <= -0.9788502752780914) ? ( 65 ) : ( (scaler_output_2 <= -0.618596076965332) ? ( 67 ) : ( 68 ) ) ) : ( 69 ) ) : ( (scaler_output_2 <= 0.12928635627031326) ? ( 71 ) : ( (scaler_output_5 <= 1.3620607256889343) ? ( (scaler_output_2 <= 0.4684268832206726) ? ( 74 ) : ( 75 ) ) : ( (scaler_output_2 <= 0.8529378771781921) ? ( 77 ) : ( 78 ) ) ) ) ) : ( (scaler_output_4 <= -0.009075060486793518) ? ( 80 ) : ( (scaler_output_5 <= 0.290997751057148) ? ( (scaler_output_2 <= 0.5260942727327347) ? ( (scaler_output_2 <= -0.6852224953472614) ? ( 84 ) : ( (scaler_output_3 <= 1.0922892093658447) ? ( 86 ) : ( 87 ) ) ) : ( 88 ) ) : ( 89 ) ) ) ) : ( (scaler_output_3 <= 0.6520134806632996) ? ( (scaler_output_2 <= -0.21028014458715916) ? ( 92 ) : ( 93 ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( 95 ) : ( (scaler_output_3 <= 1.3170108795166016) ? ( 97 ) : ( 98 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_0
		
	
		namespace EXT_SubModel_1 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {17.5126316 }} ,
					{ 6 ,  {42.01839185 }} ,
					{ 10 ,  {74.13416807 }} ,
					{ 12 ,  {66.46875936 }} ,
					{ 13 ,  {60.17684929 }} ,
					{ 14 ,  {89.81697753 }} ,
					{ 15 ,  {38.41875351 }} ,
					{ 20 ,  {154.50461473 }} ,
					{ 22 ,  {174.68142017 }} ,
					{ 23 ,  {168.83377965 }} ,
					{ 25 ,  {217.90641985 }} ,
					{ 26 ,  {238.91298805 }} ,
					{ 28 ,  {43.13717196 }} ,
					{ 30 ,  {123.98006476 }} ,
					{ 31 ,  {112.36813458 }} ,
					{ 33 ,  {205.37013415 }} ,
					{ 35 ,  {469.13995216 }} ,
					{ 38 ,  {310.5792773 }} ,
					{ 39 ,  {297.00533496 }} ,
					{ 40 ,  {345.51744456 }} ,
					{ 43 ,  {96.00340237 }} ,
					{ 46 ,  {287.26242769 }} ,
					{ 47 ,  {242.64398564 }} ,
					{ 48 ,  {340.89432548 }} ,
					{ 52 ,  {501.63259526 }} ,
					{ 53 ,  {543.10577247 }} ,
					{ 54 ,  {680.96114859 }} ,
					{ 56 ,  {816.81265916 }} ,
					{ 58 ,  {936.08984202 }} ,
					{ 59 ,  {1054.16277579 }} ,
					{ 65 ,  {184.81176238 }} ,
					{ 66 ,  {129.17022248 }} ,
					{ 67 ,  {241.12137081 }} ,
					{ 68 ,  {367.2164339 }} ,
					{ 71 ,  {616.90506534 }} ,
					{ 73 ,  {565.71521017 }} ,
					{ 74 ,  {577.34865081 }} ,
					{ 76 ,  {737.40865774 }} ,
					{ 77 ,  {753.58663382 }} ,
					{ 81 ,  {936.66449274 }} ,
					{ 82 ,  {859.39726521 }} ,
					{ 84 ,  {1006.94766003 }} ,
					{ 85 ,  {1066.49672809 }} ,
					{ 88 ,  {991.65423222 }} ,
					{ 89 ,  {1161.77589816 }} ,
					{ 92 ,  {1299.75326814 }} ,
					{ 93 ,  {1344.28572632 }} ,
					{ 94 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.4093315750360489) ? ( (scaler_output_4 <= -0.211598239839077) ? ( (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_5 <= 0.7459412887692451) ? ( (scaler_output_5 <= -0.422412745654583) ? ( (scaler_output_2 <= -0.6544749066233635) ? ( 10 ) : ( (scaler_output_3 <= -1.1316539645195007) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) : ( 15 ) ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( (scaler_output_4 <= -0.7135348320007324) ? ( (scaler_output_4 <= -0.8944589197635651) ? ( (scaler_output_3 <= -0.6551733016967773) ? ( 20 ) : ( (scaler_output_3 <= -0.3915177583694458) ? ( 22 ) : ( 23 ) ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( 25 ) : ( 26 ) ) ) : ( (scaler_output_3 <= -1.6484262347221375) ? ( 28 ) : ( (scaler_output_5 <= -0.715393703430891) ? ( 30 ) : ( 31 ) ) ) ) : ( (scaler_output_4 <= -1.0818235576152802) ? ( 33 ) : ( (scaler_output_2 <= -0.798594974912703) ? ( 35 ) : ( (scaler_output_4 <= -0.6940518021583557) ? ( (scaler_output_4 <= -0.854500025510788) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) ) ) ) : ( (scaler_output_3 <= -0.528001680970192) ? ( (scaler_output_3 <= -1.4632943868637085) ? ( 43 ) : ( (scaler_output_3 <= -0.9236918985843658) ? ( (scaler_output_4 <= 0.07374501833692193) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) : ( (scaler_output_3 <= 0.9985360205173492) ? ( (scaler_output_3 <= 0.2325920555740595) ? ( (scaler_output_5 <= 1.231494665145874) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) : ( (scaler_output_2 <= -0.745602011680603) ? ( 56 ) : ( (scaler_output_3 <= 1.532584309577942) ? ( 58 ) : ( 59 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.18565069139003754) ? ( (scaler_output_3 <= -0.7770032286643982) ? ( (scaler_output_3 <= -1.3856977820396423) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_5 <= 0.6579617410898209) ? ( 65 ) : ( 66 ) ) : ( 67 ) ) : ( 68 ) ) : ( (scaler_output_2 <= 0.6957541704177856) ? ( (scaler_output_4 <= 0.43903884291648865) ? ( 71 ) : ( (scaler_output_5 <= 0.9595505595207214) ? ( 73 ) : ( 74 ) ) ) : ( (scaler_output_4 <= 0.7659375965595245) ? ( 76 ) : ( 77 ) ) ) ) : ( (scaler_output_3 <= 0.732145756483078) ? ( (scaler_output_2 <= 0.5850412361323833) ? ( (scaler_output_4 <= 0.7763578593730927) ? ( 81 ) : ( 82 ) ) : ( (scaler_output_5 <= -0.7520481161773205) ? ( 84 ) : ( 85 ) ) ) : ( (scaler_output_4 <= 0.8874532282352448) ? ( (scaler_output_3 <= 1.1572182774543762) ? ( 88 ) : ( 89 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_5 <= 0.6012184731662273) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_1
		
	
		namespace EXT_SubModel_2 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {45.71113412 }} ,
					{ 8 ,  {43.13717196 }} ,
					{ 9 ,  {66.46875936 }} ,
					{ 10 ,  {112.36813458 }} ,
					{ 11 ,  {174.68142017 }} ,
					{ 14 ,  {123.98006476 }} ,
					{ 15 ,  {96.00340237 }} ,
					{ 18 ,  {287.26242769 }} ,
					{ 19 ,  {340.89432548 }} ,
					{ 24 ,  {241.12137081 }} ,
					{ 25 ,  {242.64398564 }} ,
					{ 26 ,  {210.24199264 }} ,
					{ 27 ,  {304.56729485 }} ,
					{ 28 ,  {184.81176238 }} ,
					{ 30 ,  {557.42418185 }} ,
					{ 31 ,  {367.2164339 }} ,
					{ 34 ,  {42.01839185 }} ,
					{ 37 ,  {205.37013415 }} ,
					{ 38 ,  {251.33228306 }} ,
					{ 39 ,  {345.51744456 }} ,
					{ 45 ,  {565.71521017 }} ,
					{ 46 ,  {577.34865081 }} ,
					{ 47 ,  {543.10577247 }} ,
					{ 48 ,  {616.90506534 }} ,
					{ 50 ,  {670.13118584 }} ,
					{ 53 ,  {762.12754055 }} ,
					{ 54 ,  {760.21824104 }} ,
					{ 55 ,  {753.58663382 }} ,
					{ 59 ,  {695.99180066 }} ,
					{ 60 ,  {630.47308595 }} ,
					{ 63 ,  {692.1009437 }} ,
					{ 64 ,  {707.74797907 }} ,
					{ 66 ,  {816.81265916 }} ,
					{ 68 ,  {897.11075364 }} ,
					{ 69 ,  {921.14633043 }} ,
					{ 74 ,  {936.66449274 }} ,
					{ 76 ,  {964.56286917 }} ,
					{ 77 ,  {954.01675074 }} ,
					{ 78 ,  {991.65423222 }} ,
					{ 80 ,  {1006.94766003 }} ,
					{ 81 ,  {1072.70246576 }} ,
					{ 83 ,  {1066.49672809 }} ,
					{ 86 ,  {1299.75326814 }} ,
					{ 88 ,  {1161.77589816 }} ,
					{ 89 ,  {1185.2623187 }} ,
					{ 90 ,  {1344.28572632 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.40340161323547363) ? ( (scaler_output_4 <= 1.4974570274353027) ? ( (scaler_output_4 <= -0.38785457611083984) ? ( (scaler_output_3 <= -0.6824564039707184) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( (scaler_output_2 <= 0.06683275103569031) ? ( (scaler_output_4 <= -1.1767204403877258) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) : ( 10 ) ) : ( 11 ) ) : ( (scaler_output_5 <= -1.0220919251441956) ? ( (scaler_output_5 <= -1.3401830196380615) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_5 <= -0.30137011408805847) ? ( (scaler_output_3 <= -0.9236918985843658) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_2 <= 1.1800363659858704) ? ( (scaler_output_5 <= 0.9926612973213196) ? ( (scaler_output_5 <= 0.5262381583452225) ? ( (scaler_output_5 <= 0.054462283849716187) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( 27 ) ) : ( 28 ) ) ) ) ) : ( (scaler_output_4 <= 1.6028861999511719) ? ( 30 ) : ( 31 ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_4 <= -1.4910808205604553) ? ( 34 ) : ( (scaler_output_4 <= -0.8660534620285034) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_4 <= 0.6764185130596161) ? ( (scaler_output_3 <= -0.00461785972584039) ? ( (scaler_output_5 <= 1.2774696350097656) ? ( (scaler_output_2 <= -0.10381436347961426) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) : ( 48 ) ) : ( (scaler_output_4 <= 0.8207560777664185) ? ( 50 ) : ( (scaler_output_5 <= 1.325681447982788) ? ( (scaler_output_3 <= -0.20008733868598938) ? ( 53 ) : ( 54 ) ) : ( 55 ) ) ) ) : ( (scaler_output_4 <= 0.4384838044643402) ? ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_5 <= -0.7900470495223999) ? ( 59 ) : ( 60 ) ) : ( (scaler_output_4 <= -0.24598624557256699) ? ( (scaler_output_2 <= 0.49639912648126483) ? ( 63 ) : ( 64 ) ) : ( (scaler_output_4 <= -0.05863320827484131) ? ( 66 ) : ( (scaler_output_3 <= 1.3950671553611755) ? ( 68 ) : ( 69 ) ) ) ) ) : ( (scaler_output_5 <= -0.1428305320441723) ? ( (scaler_output_4 <= 1.5073761940002441) ? ( (scaler_output_3 <= 0.7350868582725525) ? ( (scaler_output_5 <= -1.2752506732940674) ? ( 74 ) : ( (scaler_output_4 <= 1.2173389792442322) ? ( 76 ) : ( 77 ) ) ) : ( 78 ) ) : ( (scaler_output_4 <= 1.5234125852584839) ? ( 80 ) : ( 81 ) ) ) : ( (scaler_output_3 <= 0.5907565802335739) ? ( 83 ) : ( (scaler_output_5 <= 1.1606311798095703) ? ( (scaler_output_5 <= -0.06207492761313915) ? ( 86 ) : ( (scaler_output_2 <= 0.23149150609970093) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_2
		
	
		namespace EXT_SubModel_3 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {17.5126316 }} ,
					{ 5 ,  {42.01839185 }} ,
					{ 9 ,  {60.17684929 }} ,
					{ 10 ,  {66.46875936 }} ,
					{ 12 ,  {74.13416807 }} ,
					{ 13 ,  {81.61991679 }} ,
					{ 14 ,  {38.41875351 }} ,
					{ 19 ,  {112.36813458 }} ,
					{ 21 ,  {131.74760526 }} ,
					{ 22 ,  {123.98006476 }} ,
					{ 23 ,  {43.13717196 }} ,
					{ 25 ,  {337.38826236 }} ,
					{ 29 ,  {205.37013415 }} ,
					{ 31 ,  {217.90641985 }} ,
					{ 32 ,  {222.6809715 }} ,
					{ 33 ,  {238.91298805 }} ,
					{ 35 ,  {210.24199264 }} ,
					{ 37 ,  {287.26242769 }} ,
					{ 38 ,  {310.5792773 }} ,
					{ 39 ,  {692.1009437 }} ,
					{ 44 ,  {193.36881075 }} ,
					{ 46 ,  {96.00340237 }} ,
					{ 47 ,  {129.17022248 }} ,
					{ 50 ,  {367.2164339 }} ,
					{ 51 ,  {340.89432548 }} ,
					{ 53 ,  {241.12137081 }} ,
					{ 54 ,  {304.56729485 }} ,
					{ 58 ,  {565.71521017 }} ,
					{ 59 ,  {557.42418185 }} ,
					{ 60 ,  {762.12754055 }} ,
					{ 62 ,  {419.36346749 }} ,
					{ 63 ,  {501.63259526 }} ,
					{ 69 ,  {616.90506534 }} ,
					{ 70 ,  {670.13118584 }} ,
					{ 72 ,  {695.99180066 }} ,
					{ 73 ,  {737.40865774 }} ,
					{ 75 ,  {859.39726521 }} ,
					{ 76 ,  {753.58663382 }} ,
					{ 79 ,  {991.65423222 }} ,
					{ 81 ,  {897.11075364 }} ,
					{ 83 ,  {921.14633043 }} ,
					{ 84 ,  {936.08984202 }} ,
					{ 86 ,  {1054.16277579 }} ,
					{ 87 ,  {1161.77589816 }} ,
					{ 89 ,  {1450.4501203 }} ,
					{ 91 ,  {1072.70246576 }} ,
					{ 92 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.7298851609230042) ? ( (scaler_output_5 <= -0.3222903907299042) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_5 <= 0.6717203818261623) ? ( (scaler_output_3 <= 0.031642138957977295) ? ( (scaler_output_5 <= -1.1247649788856506) ? ( 9 ) : ( 10 ) ) : ( (scaler_output_4 <= -1.660830020904541) ? ( 12 ) : ( 13 ) ) ) : ( 14 ) ) ) : ( (scaler_output_3 <= 1.1430175602436066) ? ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_5 <= 1.0228291749954224) ? ( (scaler_output_4 <= -0.34222930669784546) ? ( 19 ) : ( (scaler_output_2 <= -1.2996936440467834) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) : ( (scaler_output_2 <= -1.40203458070755) ? ( 25 ) : ( (scaler_output_5 <= -0.45911841094493866) ? ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_5 <= -1.200627475976944) ? ( 29 ) : ( (scaler_output_3 <= 0.05393454432487488) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (scaler_output_3 <= -0.9536197185516357) ? ( 35 ) : ( (scaler_output_5 <= -0.39770638942718506) ? ( 37 ) : ( 38 ) ) ) ) ) ) : ( 39 ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.555534303188324) ? ( (scaler_output_5 <= -1.3502115607261658) ? ( 44 ) : ( (scaler_output_4 <= 0.5106252729892731) ? ( 46 ) : ( 47 ) ) ) : ( (scaler_output_2 <= 0.17494834959506989) ? ( (scaler_output_3 <= -1.085380733013153) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_5 <= 0.5208854228258133) ? ( 53 ) : ( 54 ) ) ) ) : ( (scaler_output_2 <= -0.6109375506639481) ? ( (scaler_output_5 <= 0.9524067640304565) ? ( (scaler_output_4 <= 1.0331071466207504) ? ( 58 ) : ( 59 ) ) : ( 60 ) ) : ( (scaler_output_3 <= -0.3573385328054428) ? ( 62 ) : ( 63 ) ) ) ) : ( (scaler_output_4 <= 0.9995965659618378) ? ( (scaler_output_3 <= 0.6598700284957886) ? ( (scaler_output_4 <= 0.7722108066082001) ? ( (scaler_output_2 <= 0.4684268832206726) ? ( (scaler_output_5 <= 1.173663079738617) ? ( 69 ) : ( 70 ) ) : ( (scaler_output_5 <= 0.11812072992324829) ? ( 72 ) : ( 73 ) ) ) : ( (scaler_output_2 <= 0.4644063785672188) ? ( 75 ) : ( 76 ) ) ) : ( (scaler_output_5 <= -0.4050225708633661) ? ( (scaler_output_5 <= -1.2412680387496948) ? ( 79 ) : ( (scaler_output_5 <= -1.113603562116623) ? ( 81 ) : ( (scaler_output_2 <= 0.038599058985710144) ? ( 83 ) : ( 84 ) ) ) ) : ( (scaler_output_4 <= 0.4838908016681671) ? ( 86 ) : ( 87 ) ) ) ) : ( (scaler_output_2 <= -0.10805320926010609) ? ( 89 ) : ( (scaler_output_2 <= 0.8630815800279379) ? ( 91 ) : ( 92 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_3
		
	
		namespace EXT_SubModel_4 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {45.71113412 }} ,
					{ 8 ,  {43.13717196 }} ,
					{ 9 ,  {66.46875936 }} ,
					{ 10 ,  {89.81697753 }} ,
					{ 13 ,  {131.74760526 }} ,
					{ 14 ,  {123.98006476 }} ,
					{ 15 ,  {96.00340237 }} ,
					{ 17 ,  {67.61473198 }} ,
					{ 20 ,  {168.83377965 }} ,
					{ 21 ,  {154.50461473 }} ,
					{ 23 ,  {217.90641985 }} ,
					{ 24 ,  {192.59288742 }} ,
					{ 28 ,  {340.89432548 }} ,
					{ 29 ,  {367.2164339 }} ,
					{ 32 ,  {193.36881075 }} ,
					{ 33 ,  {184.81176238 }} ,
					{ 34 ,  {241.12137081 }} ,
					{ 36 ,  {456.84183869 }} ,
					{ 38 ,  {565.71521017 }} ,
					{ 39 ,  {577.34865081 }} ,
					{ 43 ,  {74.13416807 }} ,
					{ 45 ,  {17.5126316 }} ,
					{ 46 ,  {42.01839185 }} ,
					{ 49 ,  {331.03594313 }} ,
					{ 50 ,  {310.5792773 }} ,
					{ 51 ,  {212.83015826 }} ,
					{ 55 ,  {651.51242251 }} ,
					{ 57 ,  {543.10577247 }} ,
					{ 58 ,  {469.13995216 }} ,
					{ 60 ,  {520.61172947 }} ,
					{ 65 ,  {680.96114859 }} ,
					{ 66 ,  {695.99180066 }} ,
					{ 68 ,  {670.13118584 }} ,
					{ 69 ,  {616.90506534 }} ,
					{ 71 ,  {784.59125862 }} ,
					{ 72 ,  {753.58663382 }} ,
					{ 74 ,  {692.1009437 }} ,
					{ 78 ,  {936.66449274 }} ,
					{ 79 ,  {936.08984202 }} ,
					{ 80 ,  {921.14633043 }} ,
					{ 81 ,  {816.81265916 }} ,
					{ 85 ,  {954.01675074 }} ,
					{ 86 ,  {964.56286917 }} ,
					{ 88 ,  {1066.49672809 }} ,
					{ 89 ,  {1072.70246576 }} ,
					{ 92 ,  {1344.28572632 }} ,
					{ 93 ,  {1299.75326814 }} ,
					{ 94 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.14456209540367126) ? ( (scaler_output_4 <= 0.40438541769981384) ? ( (scaler_output_2 <= 0.47463880479335785) ? ( (scaler_output_4 <= -0.4686051160097122) ? ( (scaler_output_3 <= -0.519632562994957) ? ( (scaler_output_2 <= 0.06683275103569031) ? ( (scaler_output_5 <= 0.3435141444206238) ? ( 7 ) : ( 8 ) ) : ( 9 ) ) : ( 10 ) ) : ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_3 <= -1.4681960940361023) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) : ( (scaler_output_4 <= -1.4058788418769836) ? ( 17 ) : ( (scaler_output_4 <= -0.8944589197635651) ? ( (scaler_output_4 <= -1.0860061049461365) ? ( 20 ) : ( 21 ) ) : ( (scaler_output_2 <= 1.7521882057189941) ? ( 23 ) : ( 24 ) ) ) ) ) : ( (scaler_output_3 <= -0.8575227856636047) ? ( (scaler_output_2 <= 0.4241957366466522) ? ( (scaler_output_2 <= -0.4229040741920471) ? ( 28 ) : ( 29 ) ) : ( (scaler_output_4 <= 1.14357990026474) ? ( (scaler_output_5 <= -0.6128211468458176) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( 36 ) : ( (scaler_output_2 <= -0.10381436347961426) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (scaler_output_4 <= -0.842253178358078) ? ( (scaler_output_4 <= -1.5342329144477844) ? ( (scaler_output_5 <= -1.1036191582679749) ? ( 43 ) : ( (scaler_output_4 <= -1.7965635061264038) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_3 <= 1.0818198025226593) ? ( (scaler_output_2 <= 0.23485881090164185) ? ( 49 ) : ( 50 ) ) : ( 51 ) ) ) : ( (scaler_output_4 <= 0.9230736196041107) ? ( (scaler_output_2 <= -0.9824927151203156) ? ( (scaler_output_5 <= 0.992718517780304) ? ( 55 ) : ( (scaler_output_3 <= 0.1481356266885996) ? ( 57 ) : ( 58 ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 60 ) : ( (scaler_output_3 <= 0.5887481570243835) ? ( (scaler_output_4 <= 0.7460125982761383) ? ( (scaler_output_5 <= -0.07027691602706909) ? ( (scaler_output_4 <= 0.1858004629611969) ? ( 65 ) : ( 66 ) ) : ( (scaler_output_3 <= -0.0517913541989401) ? ( 68 ) : ( 69 ) ) ) : ( (scaler_output_4 <= 0.8305985629558563) ? ( 71 ) : ( 72 ) ) ) : ( (scaler_output_4 <= -0.27108655124902725) ? ( 74 ) : ( (scaler_output_5 <= -0.1797034740447998) ? ( (scaler_output_3 <= 1.5877395272254944) ? ( (scaler_output_5 <= -1.2284047305583954) ? ( 78 ) : ( 79 ) ) : ( 80 ) ) : ( 81 ) ) ) ) ) ) : ( (scaler_output_3 <= 0.6750522553920746) ? ( (scaler_output_2 <= -0.21028014458715916) ? ( (scaler_output_5 <= -0.6472804471850395) ? ( 85 ) : ( 86 ) ) : ( (scaler_output_4 <= 1.482248067855835) ? ( 88 ) : ( 89 ) ) ) : ( (scaler_output_5 <= 1.4191389679908752) ? ( (scaler_output_2 <= 0.6991206426173449) ? ( 92 ) : ( 93 ) ) : ( 94 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_4
		
	
		namespace EXT_SubModel_5 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {42.01839185 }} ,
					{ 6 ,  {45.71113412 }} ,
					{ 9 ,  {38.41875351 }} ,
					{ 11 ,  {60.17684929 }} ,
					{ 13 ,  {66.46875936 }} ,
					{ 14 ,  {67.61473198 }} ,
					{ 16 ,  {74.13416807 }} ,
					{ 17 ,  {89.81697753 }} ,
					{ 21 ,  {43.13717196 }} ,
					{ 23 ,  {112.36813458 }} ,
					{ 24 ,  {123.98006476 }} ,
					{ 26 ,  {174.68142017 }} ,
					{ 28 ,  {217.90641985 }} ,
					{ 29 ,  {210.24199264 }} ,
					{ 34 ,  {222.6809715 }} ,
					{ 35 ,  {205.37013415 }} ,
					{ 36 ,  {251.33228306 }} ,
					{ 38 ,  {310.5792773 }} ,
					{ 40 ,  {345.51744456 }} ,
					{ 41 ,  {331.03594313 }} ,
					{ 42 ,  {469.13995216 }} ,
					{ 44 ,  {692.1009437 }} ,
					{ 45 ,  {520.61172947 }} ,
					{ 50 ,  {304.56729485 }} ,
					{ 52 ,  {367.2164339 }} ,
					{ 53 ,  {340.89432548 }} ,
					{ 56 ,  {193.36881075 }} ,
					{ 57 ,  {184.81176238 }} ,
					{ 59 ,  {241.12137081 }} ,
					{ 60 ,  {242.64398564 }} ,
					{ 64 ,  {456.84183869 }} ,
					{ 65 ,  {419.36346749 }} ,
					{ 66 ,  {557.42418185 }} ,
					{ 70 ,  {565.71521017 }} ,
					{ 71 ,  {616.90506534 }} ,
					{ 72 ,  {501.63259526 }} ,
					{ 75 ,  {762.12754055 }} ,
					{ 76 ,  {760.21824104 }} ,
					{ 78 ,  {670.13118584 }} ,
					{ 79 ,  {737.40865774 }} ,
					{ 86 ,  {921.14633043 }} ,
					{ 88 ,  {936.66449274 }} ,
					{ 89 ,  {936.08984202 }} ,
					{ 90 ,  {897.11075364 }} ,
					{ 91 ,  {964.56286917 }} ,
					{ 92 ,  {1161.77589816 }} ,
					{ 94 ,  {651.51242251 }} ,
					{ 96 ,  {816.81265916 }} ,
					{ 97 ,  {859.39726521 }} ,
					{ 101 ,  {1066.49672809 }} ,
					{ 102 ,  {1072.70246576 }} ,
					{ 103 ,  {1006.94766003 }} ,
					{ 106 ,  {1344.28572632 }} ,
					{ 107 ,  {1299.75326814 }} ,
					{ 108 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.211598239839077) ? ( (scaler_output_3 <= 1.5343749523162842) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.15695498138666153) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.4679744988679886) ? ( (scaler_output_2 <= -0.5759087726473808) ? ( 9 ) : ( (scaler_output_5 <= -1.1247649788856506) ? ( 11 ) : ( (scaler_output_5 <= 0.11238956451416016) ? ( 13 ) : ( 14 ) ) ) ) : ( (scaler_output_2 <= -1.1068547070026398) ? ( 16 ) : ( 17 ) ) ) ) : ( (scaler_output_3 <= -0.21819919347763062) ? ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( 21 ) : ( (scaler_output_4 <= -0.34222930669784546) ? ( 23 ) : ( 24 ) ) ) : ( (scaler_output_4 <= -0.9294333755970001) ? ( 26 ) : ( (scaler_output_5 <= 0.004439622163772583) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_4 <= -0.4938385933637619) ? ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_4 <= -1.1435618996620178) ? ( (scaler_output_2 <= 1.2551733702421188) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (scaler_output_4 <= -0.9463390409946442) ? ( 38 ) : ( (scaler_output_3 <= 0.3759235441684723) ? ( 40 ) : ( 41 ) ) ) ) : ( 42 ) ) ) ) : ( (scaler_output_5 <= -0.7423070818185806) ? ( 44 ) : ( 45 ) ) ) : ( (scaler_output_3 <= 0.18565069139003754) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( 50 ) : ( (scaler_output_5 <= -1.1071047186851501) ? ( 52 ) : ( 53 ) ) ) : ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_5 <= -0.6128211468458176) ? ( 56 ) : ( 57 ) ) : ( (scaler_output_5 <= 0.054462283849716187) ? ( 59 ) : ( 60 ) ) ) ) : ( (scaler_output_3 <= -0.4198148101568222) ? ( (scaler_output_4 <= 1.2474307417869568) ? ( (scaler_output_2 <= -0.3808511644601822) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) : ( (scaler_output_4 <= 0.5458761304616928) ? ( (scaler_output_5 <= 1.053905427455902) ? ( (scaler_output_2 <= -0.7388421893119812) ? ( 70 ) : ( 71 ) ) : ( 72 ) ) : ( (scaler_output_3 <= -0.1196240484714508) ? ( (scaler_output_2 <= -0.13670790195465088) ? ( 75 ) : ( 76 ) ) : ( (scaler_output_3 <= 0.03910170495510101) ? ( 78 ) : ( 79 ) ) ) ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_5 <= 0.12715997360646725) ? ( (scaler_output_5 <= -0.13054856844246387) ? ( (scaler_output_4 <= 0.8426347076892853) ? ( (scaler_output_2 <= 0.5260942727327347) ? ( (scaler_output_2 <= -0.12999560311436653) ? ( 86 ) : ( (scaler_output_3 <= 1.0922892093658447) ? ( 88 ) : ( 89 ) ) ) : ( 90 ) ) : ( 91 ) ) : ( 92 ) ) : ( (scaler_output_2 <= -1.1032290756702423) ? ( 94 ) : ( (scaler_output_2 <= -0.4770095869898796) ? ( 96 ) : ( 97 ) ) ) ) : ( (scaler_output_3 <= 0.5907565802335739) ? ( (scaler_output_2 <= 1.2077310681343079) ? ( (scaler_output_4 <= 1.482248067855835) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) : ( (scaler_output_5 <= 1.4191389679908752) ? ( (scaler_output_4 <= 1.2921724915504456) ? ( 106 ) : ( 107 ) ) : ( 108 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_5
		
	
		namespace EXT_SubModel_6 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {38.41875351 }} ,
					{ 6 ,  {60.17684929 }} ,
					{ 8 ,  {67.61473198 }} ,
					{ 9 ,  {66.46875936 }} ,
					{ 10 ,  {89.81697753 }} ,
					{ 16 ,  {129.17022248 }} ,
					{ 17 ,  {123.98006476 }} ,
					{ 19 ,  {96.00340237 }} ,
					{ 20 ,  {112.36813458 }} ,
					{ 22 ,  {241.12137081 }} ,
					{ 25 ,  {193.36881075 }} ,
					{ 26 ,  {192.59288742 }} ,
					{ 27 ,  {184.81176238 }} ,
					{ 30 ,  {367.2164339 }} ,
					{ 31 ,  {419.36346749 }} ,
					{ 34 ,  {174.68142017 }} ,
					{ 35 ,  {217.90641985 }} ,
					{ 37 ,  {304.56729485 }} ,
					{ 40 ,  {238.91298805 }} ,
					{ 41 ,  {242.64398564 }} ,
					{ 42 ,  {287.26242769 }} ,
					{ 44 ,  {577.34865081 }} ,
					{ 45 ,  {501.63259526 }} ,
					{ 50 ,  {17.5126316 }} ,
					{ 51 ,  {42.01839185 }} ,
					{ 54 ,  {251.33228306 }} ,
					{ 56 ,  {205.37013415 }} ,
					{ 57 ,  {222.6809715 }} ,
					{ 58 ,  {331.03594313 }} ,
					{ 62 ,  {543.10577247 }} ,
					{ 65 ,  {680.96114859 }} ,
					{ 66 ,  {651.51242251 }} ,
					{ 68 ,  {630.47308595 }} ,
					{ 69 ,  {616.90506534 }} ,
					{ 72 ,  {737.40865774 }} ,
					{ 73 ,  {695.99180066 }} ,
					{ 74 ,  {784.59125862 }} ,
					{ 77 ,  {816.81265916 }} ,
					{ 79 ,  {897.11075364 }} ,
					{ 80 ,  {921.14633043 }} ,
					{ 81 ,  {1054.16277579 }} ,
					{ 85 ,  {1006.94766003 }} ,
					{ 87 ,  {954.01675074 }} ,
					{ 88 ,  {964.56286917 }} ,
					{ 89 ,  {760.21824104 }} ,
					{ 92 ,  {1450.4501203 }} ,
					{ 94 ,  {1299.75326814 }} ,
					{ 95 ,  {1344.28572632 }} ,
					{ 96 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.13761106133460999) ? ( (scaler_output_4 <= -1.2713754177093506) ? ( (scaler_output_3 <= -0.4679744988679886) ? ( (scaler_output_2 <= -0.5759087726473808) ? ( 4 ) : ( (scaler_output_2 <= 0.0887349471449852) ? ( 6 ) : ( (scaler_output_4 <= -1.5562736988067627) ? ( 8 ) : ( 9 ) ) ) ) : ( 10 ) ) : ( (scaler_output_3 <= -0.34917865693569183) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= 0.5993657037615776) ? ( (scaler_output_2 <= -0.5679637044668198) ? ( (scaler_output_3 <= -1.5593922138214111) ? ( 16 ) : ( 17 ) ) : ( (scaler_output_3 <= -1.6383969187736511) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_2 <= 1.1197042167186737) ? ( 22 ) : ( (scaler_output_5 <= -0.30970026552677155) ? ( (scaler_output_3 <= -1.494538426399231) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_output_2 <= 0.01613243669271469) ? ( (scaler_output_5 <= 0.05911368131637573) ? ( 30 ) : ( 31 ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_2 <= 1.5003243684768677) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_3 <= -1.2251636981964111) ? ( 37 ) : ( (scaler_output_2 <= 1.2954369187355042) ? ( (scaler_output_2 <= 0.6355798467993736) ? ( 40 ) : ( 41 ) ) : ( 42 ) ) ) ) ) ) : ( (scaler_output_3 <= -0.21962417662143707) ? ( 44 ) : ( 45 ) ) ) ) : ( (scaler_output_4 <= 0.8483301401138306) ? ( (scaler_output_4 <= -0.5353570654988289) ? ( (scaler_output_4 <= -1.5172673463821411) ? ( (scaler_output_4 <= -1.7965635061264038) ? ( 50 ) : ( 51 ) ) : ( (scaler_output_4 <= -1.0080773830413818) ? ( (scaler_output_2 <= -0.4326847940683365) ? ( 54 ) : ( (scaler_output_3 <= 0.4129951223731041) ? ( 56 ) : ( 57 ) ) ) : ( 58 ) ) ) : ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_2 <= -0.4876510202884674) ? ( (scaler_output_3 <= -0.00461785972584039) ? ( 62 ) : ( (scaler_output_2 <= -0.6530574858188629) ? ( (scaler_output_5 <= -0.23301631212234497) ? ( 65 ) : ( 66 ) ) : ( (scaler_output_5 <= 0.2913513779640198) ? ( 68 ) : ( 69 ) ) ) ) : ( (scaler_output_4 <= 0.6911941170692444) ? ( (scaler_output_3 <= 0.3486781120300293) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) ) : ( (scaler_output_4 <= 0.3140285611152649) ? ( (scaler_output_4 <= -0.05863320827484131) ? ( 77 ) : ( (scaler_output_3 <= 1.3950671553611755) ? ( 79 ) : ( 80 ) ) ) : ( 81 ) ) ) ) : ( (scaler_output_3 <= 0.6750522553920746) ? ( (scaler_output_5 <= 0.32810307294130325) ? ( (scaler_output_5 <= -1.3404661417007446) ? ( 85 ) : ( (scaler_output_3 <= 0.32097890228033066) ? ( 87 ) : ( 88 ) ) ) : ( 89 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_2 <= -0.06669343076646328) ? ( 92 ) : ( (scaler_output_3 <= 1.1384951770305634) ? ( 94 ) : ( 95 ) ) ) : ( 96 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_6
		
	
		namespace EXT_SubModel_7 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {38.41875351 }} ,
					{ 7 ,  {89.81697753 }} ,
					{ 9 ,  {66.46875936 }} ,
					{ 10 ,  {67.61473198 }} ,
					{ 14 ,  {112.36813458 }} ,
					{ 16 ,  {131.74760526 }} ,
					{ 17 ,  {123.98006476 }} ,
					{ 18 ,  {96.00340237 }} ,
					{ 21 ,  {168.83377965 }} ,
					{ 22 ,  {154.50461473 }} ,
					{ 23 ,  {210.24199264 }} ,
					{ 26 ,  {242.64398564 }} ,
					{ 27 ,  {287.26242769 }} ,
					{ 29 ,  {174.68142017 }} ,
					{ 30 ,  {217.90641985 }} ,
					{ 34 ,  {193.36881075 }} ,
					{ 35 ,  {129.17022248 }} ,
					{ 37 ,  {304.56729485 }} ,
					{ 38 ,  {241.12137081 }} ,
					{ 41 ,  {367.2164339 }} ,
					{ 42 ,  {456.84183869 }} ,
					{ 45 ,  {557.42418185 }} ,
					{ 46 ,  {565.71521017 }} ,
					{ 47 ,  {577.34865081 }} ,
					{ 50 ,  {42.01839185 }} ,
					{ 53 ,  {251.33228306 }} ,
					{ 56 ,  {205.37013415 }} ,
					{ 57 ,  {212.83015826 }} ,
					{ 58 ,  {222.6809715 }} ,
					{ 61 ,  {331.03594313 }} ,
					{ 62 ,  {337.38826236 }} ,
					{ 63 ,  {310.5792773 }} ,
					{ 68 ,  {543.10577247 }} ,
					{ 69 ,  {469.13995216 }} ,
					{ 72 ,  {651.51242251 }} ,
					{ 73 ,  {616.90506534 }} ,
					{ 74 ,  {695.99180066 }} ,
					{ 77 ,  {816.81265916 }} ,
					{ 79 ,  {707.74797907 }} ,
					{ 80 ,  {692.1009437 }} ,
					{ 83 ,  {897.11075364 }} ,
					{ 85 ,  {921.14633043 }} ,
					{ 86 ,  {936.08984202 }} ,
					{ 87 ,  {1054.16277579 }} ,
					{ 92 ,  {936.66449274 }} ,
					{ 93 ,  {859.39726521 }} ,
					{ 96 ,  {954.01675074 }} ,
					{ 97 ,  {1006.94766003 }} ,
					{ 99 ,  {1072.70246576 }} ,
					{ 100 ,  {1066.49672809 }} ,
					{ 102 ,  {991.65423222 }} ,
					{ 105 ,  {1299.75326814 }} ,
					{ 107 ,  {1161.77589816 }} ,
					{ 108 ,  {1185.2623187 }} ,
					{ 109 ,  {1344.28572632 }} ,
					{ 111 ,  {670.13118584 }} ,
					{ 112 ,  {753.58663382 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.14456209540367126) ? ( (scaler_output_4 <= 0.4340926855802536) ? ( (scaler_output_2 <= 1.0349310338497162) ? ( (scaler_output_4 <= -1.3194318413734436) ? ( (scaler_output_2 <= -1.028288573026657) ? ( 5 ) : ( (scaler_output_2 <= -0.3636448532342911) ? ( 7 ) : ( (scaler_output_2 <= 0.49834807217121124) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_4 <= 0.14413269981741905) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( 14 ) : ( (scaler_output_3 <= -1.4681960940361023) ? ( 16 ) : ( 17 ) ) ) : ( 18 ) ) : ( (scaler_output_4 <= -0.6873114258050919) ? ( (scaler_output_2 <= 0.8264346718788147) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (scaler_output_3 <= -0.777593582868576) ? ( (scaler_output_2 <= 1.2954369187355042) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_4 <= -0.9294333755970001) ? ( 29 ) : ( 30 ) ) ) ) : ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_3 <= -1.555534303188324) ? ( (scaler_output_5 <= -0.1407979130744934) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( 37 ) : ( 38 ) ) ) : ( (scaler_output_5 <= 0.5996770560741425) ? ( (scaler_output_3 <= -1.0284956693649292) ? ( 41 ) : ( 42 ) ) : ( (scaler_output_2 <= -0.10381436347961426) ? ( (scaler_output_2 <= -1.2806716859340668) ? ( 45 ) : ( 46 ) ) : ( 47 ) ) ) ) ) : ( (scaler_output_4 <= -0.6576144993305206) ? ( (scaler_output_4 <= -1.5876256227493286) ? ( 50 ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_2 <= -0.5878596380352974) ? ( 53 ) : ( (scaler_output_5 <= -0.5445553362369537) ? ( (scaler_output_5 <= -1.1200982630252838) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( (scaler_output_2 <= 0.23485881090164185) ? ( (scaler_output_4 <= -0.9218850135803223) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) ) : ( (scaler_output_4 <= 0.5106023102998734) ? ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_4 <= 0.17442979663610458) ? ( (scaler_output_3 <= 0.1481356266885996) ? ( 68 ) : ( 69 ) ) : ( (scaler_output_3 <= 0.3707917556166649) ? ( (scaler_output_5 <= 0.8606515526771545) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) ) : ( (scaler_output_4 <= -0.05863320827484131) ? ( (scaler_output_2 <= -0.45017529325559735) ? ( 77 ) : ( (scaler_output_3 <= 1.5290347337722778) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_5 <= 0.016523748636245728) ? ( (scaler_output_3 <= 1.3279410600662231) ? ( 83 ) : ( (scaler_output_4 <= 0.07509112358093262) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (scaler_output_5 <= 1.3064992427825928) ? ( (scaler_output_3 <= 0.732145756483078) ? ( (scaler_output_4 <= 1.1234010457992554) ? ( (scaler_output_5 <= -0.5815658569335938) ? ( 92 ) : ( 93 ) ) : ( (scaler_output_3 <= 0.26137249171733856) ? ( (scaler_output_3 <= 0.1398281529545784) ? ( 96 ) : ( 97 ) ) : ( (scaler_output_5 <= -0.4956005625426769) ? ( 99 ) : ( 100 ) ) ) ) : ( (scaler_output_5 <= -0.6596253402531147) ? ( 102 ) : ( (scaler_output_5 <= 1.1606311798095703) ? ( (scaler_output_3 <= 0.8845424950122833) ? ( 105 ) : ( (scaler_output_2 <= 0.23149150609970093) ? ( 107 ) : ( 108 ) ) ) : ( 109 ) ) ) ) : ( (scaler_output_5 <= 1.4066079258918762) ? ( 111 ) : ( 112 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_7
		
	
		namespace EXT_SubModel_8 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {81.61991679 }} ,
					{ 6 ,  {89.81697753 }} ,
					{ 9 ,  {60.17684929 }} ,
					{ 10 ,  {67.61473198 }} ,
					{ 11 ,  {42.01839185 }} ,
					{ 16 ,  {154.50461473 }} ,
					{ 18 ,  {112.36813458 }} ,
					{ 20 ,  {131.74760526 }} ,
					{ 21 ,  {123.98006476 }} ,
					{ 22 ,  {43.13717196 }} ,
					{ 23 ,  {287.26242769 }} ,
					{ 26 ,  {337.38826236 }} ,
					{ 27 ,  {469.13995216 }} ,
					{ 30 ,  {238.91298805 }} ,
					{ 32 ,  {222.6809715 }} ,
					{ 33 ,  {205.37013415 }} ,
					{ 36 ,  {331.03594313 }} ,
					{ 37 ,  {345.51744456 }} ,
					{ 38 ,  {251.33228306 }} ,
					{ 40 ,  {520.61172947 }} ,
					{ 42 ,  {692.1009437 }} ,
					{ 43 ,  {816.81265916 }} ,
					{ 48 ,  {184.81176238 }} ,
					{ 49 ,  {192.59288742 }} ,
					{ 51 ,  {304.56729485 }} ,
					{ 53 ,  {340.89432548 }} ,
					{ 54 ,  {367.2164339 }} ,
					{ 59 ,  {456.84183869 }} ,
					{ 61 ,  {501.63259526 }} ,
					{ 64 ,  {565.71521017 }} ,
					{ 65 ,  {557.42418185 }} ,
					{ 66 ,  {577.34865081 }} ,
					{ 69 ,  {670.13118584 }} ,
					{ 70 ,  {616.90506534 }} ,
					{ 71 ,  {543.10577247 }} ,
					{ 72 ,  {419.36346749 }} ,
					{ 74 ,  {760.21824104 }} ,
					{ 75 ,  {753.58663382 }} ,
					{ 80 ,  {680.96114859 }} ,
					{ 81 ,  {695.99180066 }} ,
					{ 82 ,  {630.47308595 }} ,
					{ 83 ,  {921.14633043 }} ,
					{ 89 ,  {936.66449274 }} ,
					{ 91 ,  {954.01675074 }} ,
					{ 92 ,  {964.56286917 }} ,
					{ 93 ,  {859.39726521 }} ,
					{ 95 ,  {991.65423222 }} ,
					{ 96 ,  {1054.16277579 }} ,
					{ 97 ,  {1072.70246576 }} ,
					{ 99 ,  {1299.75326814 }} ,
					{ 100 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_3 <= 1.363055408000946) ? ( (scaler_output_4 <= -1.364534080028534) ? ( (scaler_output_2 <= -0.5874325856566429) ? ( (scaler_output_4 <= -1.561489462852478) ? ( 5 ) : ( 6 ) ) : ( (scaler_output_3 <= -0.2956656664609909) ? ( (scaler_output_3 <= -1.0840756297111511) ? ( 9 ) : ( 10 ) ) : ( 11 ) ) ) : ( (scaler_output_3 <= -0.6009503453969955) ? ( (scaler_output_4 <= -0.05246769404038787) ? ( (scaler_output_5 <= 1.0228291749954224) ? ( (scaler_output_4 <= -0.7035183757543564) ? ( 16 ) : ( (scaler_output_4 <= -0.34222930669784546) ? ( 18 ) : ( (scaler_output_2 <= -1.2996936440467834) ? ( 20 ) : ( 21 ) ) ) ) : ( 22 ) ) : ( 23 ) ) : ( (scaler_output_2 <= -1.410794973373413) ? ( (scaler_output_5 <= -0.0041062235832214355) ? ( 26 ) : ( 27 ) ) : ( (scaler_output_5 <= -0.28340620547533035) ? ( (scaler_output_3 <= -0.1523972675204277) ? ( 30 ) : ( (scaler_output_4 <= -1.225070297718048) ? ( 32 ) : ( 33 ) ) ) : ( (scaler_output_5 <= 0.8026990666985512) ? ( (scaler_output_4 <= -0.7858908176422119) ? ( 36 ) : ( 37 ) ) : ( 38 ) ) ) ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 40 ) : ( (scaler_output_4 <= -0.27108655124902725) ? ( 42 ) : ( 43 ) ) ) ) : ( (scaler_output_3 <= 0.047109299222938716) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_3 <= -1.4832730889320374) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_3 <= -1.2677711248397827) ? ( 51 ) : ( (scaler_output_2 <= -0.4229040741920471) ? ( 53 ) : ( 54 ) ) ) ) : ( (scaler_output_2 <= 0.8334689140319824) ? ( (scaler_output_5 <= 1.4716976284980774) ? ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_5 <= 0.5996770560741425) ? ( 59 ) : ( (scaler_output_4 <= 0.2939539775252342) ? ( 61 ) : ( (scaler_output_2 <= -0.10381436347961426) ? ( (scaler_output_4 <= 1.0331071466207504) ? ( 64 ) : ( 65 ) ) : ( 66 ) ) ) ) : ( (scaler_output_5 <= 1.3512523174285889) ? ( (scaler_output_3 <= -0.0517913541989401) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) ) : ( 72 ) ) : ( (scaler_output_3 <= -0.06744769483339041) ? ( 74 ) : ( 75 ) ) ) ) : ( (scaler_output_4 <= 0.27479252219200134) ? ( (scaler_output_3 <= 1.0841984748840332) ? ( (scaler_output_5 <= -0.7900470495223999) ? ( (scaler_output_2 <= -0.023126035928726196) ? ( 80 ) : ( 81 ) ) : ( 82 ) ) : ( 83 ) ) : ( (scaler_output_2 <= 0.7793936803936958) ? ( (scaler_output_4 <= 1.5099091529846191) ? ( (scaler_output_3 <= 0.7350868582725525) ? ( (scaler_output_5 <= 0.04640436917543411) ? ( (scaler_output_5 <= -1.2752506732940674) ? ( 89 ) : ( (scaler_output_3 <= 0.32097890228033066) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( (scaler_output_5 <= -0.22579705715179443) ? ( 95 ) : ( 96 ) ) ) : ( 97 ) ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( 99 ) : ( 100 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_8
		
	
		namespace EXT_SubModel_9 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {17.5126316 }} ,
					{ 7 ,  {42.01839185 }} ,
					{ 8 ,  {45.71113412 }} ,
					{ 11 ,  {74.13416807 }} ,
					{ 12 ,  {81.61991679 }} ,
					{ 13 ,  {89.81697753 }} ,
					{ 16 ,  {168.83377965 }} ,
					{ 17 ,  {174.68142017 }} ,
					{ 18 ,  {205.37013415 }} ,
					{ 21 ,  {217.90641985 }} ,
					{ 22 ,  {43.13717196 }} ,
					{ 25 ,  {337.38826236 }} ,
					{ 26 ,  {297.00533496 }} ,
					{ 27 ,  {520.61172947 }} ,
					{ 33 ,  {131.74760526 }} ,
					{ 37 ,  {242.64398564 }} ,
					{ 38 ,  {241.12137081 }} ,
					{ 39 ,  {210.24199264 }} ,
					{ 42 ,  {193.36881075 }} ,
					{ 43 ,  {192.59288742 }} ,
					{ 44 ,  {184.81176238 }} ,
					{ 45 ,  {287.26242769 }} ,
					{ 46 ,  {367.2164339 }} ,
					{ 48 ,  {419.36346749 }} ,
					{ 49 ,  {557.42418185 }} ,
					{ 52 ,  {1161.77589816 }} ,
					{ 57 ,  {680.96114859 }} ,
					{ 58 ,  {695.99180066 }} ,
					{ 61 ,  {630.47308595 }} ,
					{ 62 ,  {616.90506534 }} ,
					{ 63 ,  {577.34865081 }} ,
					{ 65 ,  {670.13118584 }} ,
					{ 67 ,  {784.59125862 }} ,
					{ 68 ,  {737.40865774 }} ,
					{ 72 ,  {692.1009437 }} ,
					{ 73 ,  {707.74797907 }} ,
					{ 74 ,  {816.81265916 }} ,
					{ 76 ,  {897.11075364 }} ,
					{ 77 ,  {1054.16277579 }} ,
					{ 80 ,  {753.58663382 }} ,
					{ 82 ,  {762.12754055 }} ,
					{ 83 ,  {760.21824104 }} ,
					{ 88 ,  {964.56286917 }} ,
					{ 89 ,  {954.01675074 }} ,
					{ 91 ,  {1006.94766003 }} ,
					{ 92 ,  {991.65423222 }} ,
					{ 93 ,  {1066.49672809 }} ,
					{ 94 ,  {1344.28572632 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.5280934274196625) ? ( (scaler_output_4 <= -0.9943897128105164) ? ( (scaler_output_2 <= 0.2791765183210373) ? ( (scaler_output_4 <= -1.6865600943565369) ? ( (scaler_output_2 <= -0.6579667255282402) ? ( 5 ) : ( (scaler_output_2 <= -0.15695498138666153) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_5 <= 0.14007318392395973) ? ( (scaler_output_4 <= -1.660830020904541) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) : ( (scaler_output_3 <= -0.08898759633302689) ? ( (scaler_output_2 <= 1.0051675736904144) ? ( 16 ) : ( 17 ) ) : ( 18 ) ) ) : ( (scaler_output_3 <= -0.3253766456618905) ? ( (scaler_output_5 <= 0.2115391194820404) ? ( 21 ) : ( 22 ) ) : ( (scaler_output_3 <= 1.1314185559749603) ? ( (scaler_output_4 <= -0.8300459980964661) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (scaler_output_3 <= -0.4353671967983246) ? ( (scaler_output_3 <= -0.8848086297512054) ? ( (scaler_output_4 <= 1.4993480443954468) ? ( (scaler_output_3 <= -0.9536197185516357) ? ( (scaler_output_2 <= -1.505901575088501) ? ( 33 ) : ( (scaler_output_2 <= 1.1800363659858704) ? ( (scaler_output_3 <= -1.0727011263370514) ? ( (scaler_output_4 <= 0.7658217176795006) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (scaler_output_5 <= -0.30970026552677155) ? ( (scaler_output_3 <= -1.494538426399231) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) ) : ( 45 ) ) : ( 46 ) ) : ( (scaler_output_4 <= 0.9421182125806808) ? ( 48 ) : ( 49 ) ) ) : ( (scaler_output_4 <= 0.7578092515468597) ? ( (scaler_output_2 <= -1.098024696111679) ? ( 52 ) : ( (scaler_output_3 <= 0.824400007724762) ? ( (scaler_output_4 <= 0.6216000318527222) ? ( (scaler_output_5 <= -0.7900470495223999) ? ( (scaler_output_3 <= 0.49499496817588806) ? ( 57 ) : ( 58 ) ) : ( (scaler_output_2 <= 0.041257381439208984) ? ( (scaler_output_5 <= 0.2913513779640198) ? ( 61 ) : ( 62 ) ) : ( 63 ) ) ) : ( (scaler_output_3 <= 0.03910170495510101) ? ( 65 ) : ( (scaler_output_2 <= 0.16684576869010925) ? ( 67 ) : ( 68 ) ) ) ) : ( (scaler_output_4 <= 0.06291108578443527) ? ( (scaler_output_4 <= -0.24598624557256699) ? ( (scaler_output_4 <= -0.3742734044790268) ? ( 72 ) : ( 73 ) ) : ( 74 ) ) : ( (scaler_output_4 <= 0.3140285611152649) ? ( 76 ) : ( 77 ) ) ) ) ) : ( (scaler_output_3 <= 0.04545552015770227) ? ( (scaler_output_4 <= 1.0110346376895905) ? ( 80 ) : ( (scaler_output_2 <= -0.13670790195465088) ? ( 82 ) : ( 83 ) ) ) : ( (scaler_output_5 <= 0.6851865835487843) ? ( (scaler_output_5 <= -0.05886242166161537) ? ( (scaler_output_2 <= -0.08864732831716537) ? ( (scaler_output_4 <= 1.2173389792442322) ? ( 88 ) : ( 89 ) ) : ( (scaler_output_5 <= -1.4212846755981445) ? ( 91 ) : ( 92 ) ) ) : ( 93 ) ) : ( 94 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_9
		
	
		namespace EXT_SubModel_10 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 5 ,  {112.36813458 }} ,
					{ 7 ,  {131.74760526 }} ,
					{ 8 ,  {123.98006476 }} ,
					{ 11 ,  {174.68142017 }} ,
					{ 13 ,  {205.37013415 }} ,
					{ 14 ,  {217.90641985 }} ,
					{ 17 ,  {210.24199264 }} ,
					{ 19 ,  {242.64398564 }} ,
					{ 20 ,  {238.91298805 }} ,
					{ 22 ,  {345.51744456 }} ,
					{ 23 ,  {287.26242769 }} ,
					{ 25 ,  {67.61473198 }} ,
					{ 27 ,  {43.13717196 }} ,
					{ 28 ,  {38.41875351 }} ,
					{ 31 ,  {42.01839185 }} ,
					{ 34 ,  {251.33228306 }} ,
					{ 35 ,  {212.83015826 }} ,
					{ 37 ,  {310.5792773 }} ,
					{ 39 ,  {331.03594313 }} ,
					{ 40 ,  {337.38826236 }} ,
					{ 43 ,  {520.61172947 }} ,
					{ 44 ,  {469.13995216 }} ,
					{ 45 ,  {630.47308595 }} ,
					{ 51 ,  {129.17022248 }} ,
					{ 52 ,  {96.00340237 }} ,
					{ 53 ,  {184.81176238 }} ,
					{ 56 ,  {340.89432548 }} ,
					{ 57 ,  {304.56729485 }} ,
					{ 58 ,  {241.12137081 }} ,
					{ 60 ,  {577.34865081 }} ,
					{ 61 ,  {557.42418185 }} ,
					{ 66 ,  {680.96114859 }} ,
					{ 67 ,  {695.99180066 }} ,
					{ 71 ,  {897.11075364 }} ,
					{ 74 ,  {964.56286917 }} ,
					{ 75 ,  {954.01675074 }} ,
					{ 76 ,  {936.66449274 }} ,
					{ 78 ,  {1066.49672809 }} ,
					{ 79 ,  {1006.94766003 }} ,
					{ 80 ,  {1072.70246576 }} ,
					{ 84 ,  {651.51242251 }} ,
					{ 85 ,  {616.90506534 }} ,
					{ 86 ,  {565.71521017 }} ,
					{ 90 ,  {762.12754055 }} ,
					{ 91 ,  {760.21824104 }} ,
					{ 92 ,  {753.58663382 }} ,
					{ 93 ,  {737.40865774 }} ,
					{ 96 ,  {1344.28572632 }} ,
					{ 97 ,  {1450.4501203 }} ,
					{ 98 ,  {1161.77589816 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.15958800166845322) ? ( (scaler_output_3 <= 0.20172784477472305) ? ( (scaler_output_5 <= 1.1647228598594666) ? ( (scaler_output_3 <= -1.31559818983078) ? ( (scaler_output_3 <= -1.4988391995429993) ? ( 5 ) : ( (scaler_output_3 <= -1.4681960940361023) ? ( 7 ) : ( 8 ) ) ) : ( (scaler_output_4 <= -0.7780995666980743) ? ( (scaler_output_2 <= 1.5003243684768677) ? ( 11 ) : ( (scaler_output_5 <= -1.200627475976944) ? ( 13 ) : ( 14 ) ) ) : ( (scaler_output_2 <= 1.1652297377586365) ? ( (scaler_output_2 <= -0.5841485038399696) ? ( 17 ) : ( (scaler_output_3 <= -0.7859216183423996) ? ( 19 ) : ( 20 ) ) ) : ( (scaler_output_4 <= -0.3170507117174566) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (scaler_output_4 <= -1.6357912421226501) ? ( 25 ) : ( (scaler_output_5 <= 1.236446499824524) ? ( 27 ) : ( 28 ) ) ) ) : ( (scaler_output_4 <= -0.8362234532833099) ? ( (scaler_output_3 <= 0.47466079890727997) ? ( 31 ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_2 <= -0.5878596380352974) ? ( 34 ) : ( 35 ) ) : ( (scaler_output_4 <= -0.9463390409946442) ? ( 37 ) : ( (scaler_output_4 <= -0.9218850135803223) ? ( 39 ) : ( 40 ) ) ) ) ) : ( (scaler_output_4 <= -0.14909661933779716) ? ( (scaler_output_5 <= 0.3923652023077011) ? ( 43 ) : ( 44 ) ) : ( 45 ) ) ) ) : ( (scaler_output_3 <= -0.28210045397281647) ? ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_3 <= -1.5442689657211304) ? ( (scaler_output_3 <= -1.616111397743225) ? ( (scaler_output_2 <= -0.6530774086713791) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (scaler_output_2 <= 0.7340636104345322) ? ( (scaler_output_2 <= -0.11303620040416718) ? ( 56 ) : ( 57 ) ) : ( 58 ) ) ) : ( (scaler_output_4 <= 1.1088310480117798) ? ( 60 ) : ( 61 ) ) ) : ( (scaler_output_3 <= 1.1463133096694946) ? ( (scaler_output_5 <= 0.4018804617226124) ? ( (scaler_output_4 <= 0.22938552498817444) ? ( (scaler_output_4 <= 0.1858004629611969) ? ( 66 ) : ( 67 ) ) : ( (scaler_output_4 <= 1.5234125852584839) ? ( (scaler_output_2 <= 0.8727086186408997) ? ( (scaler_output_4 <= 0.5065428912639618) ? ( 71 ) : ( (scaler_output_3 <= 0.606871485710144) ? ( (scaler_output_4 <= 1.2173389792442322) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) : ( (scaler_output_4 <= 1.47971510887146) ? ( 78 ) : ( 79 ) ) ) : ( 80 ) ) ) : ( (scaler_output_4 <= 0.5458761304616928) ? ( (scaler_output_4 <= 0.43903884291648865) ? ( (scaler_output_5 <= 0.8606515526771545) ? ( 84 ) : ( 85 ) ) : ( 86 ) ) : ( (scaler_output_3 <= 0.0912780585931614) ? ( (scaler_output_3 <= -0.06744769483339041) ? ( (scaler_output_2 <= -0.13670790195465088) ? ( 90 ) : ( 91 ) ) : ( 92 ) ) : ( 93 ) ) ) ) : ( (scaler_output_3 <= 1.4924458265304565) ? ( (scaler_output_5 <= 1.4191389679908752) ? ( 96 ) : ( 97 ) ) : ( 98 ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_10
		
	
		namespace EXT_SubModel_11 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 7 ,  {74.13416807 }} ,
					{ 8 ,  {60.17684929 }} ,
					{ 10 ,  {45.71113412 }} ,
					{ 12 ,  {38.41875351 }} ,
					{ 13 ,  {42.01839185 }} ,
					{ 15 ,  {89.81697753 }} ,
					{ 16 ,  {66.46875936 }} ,
					{ 20 ,  {131.74760526 }} ,
					{ 22 ,  {168.83377965 }} ,
					{ 23 ,  {154.50461473 }} ,
					{ 24 ,  {43.13717196 }} ,
					{ 28 ,  {222.6809715 }} ,
					{ 29 ,  {212.83015826 }} ,
					{ 30 ,  {251.33228306 }} ,
					{ 32 ,  {337.38826236 }} ,
					{ 33 ,  {297.00533496 }} ,
					{ 37 ,  {217.90641985 }} ,
					{ 39 ,  {287.26242769 }} ,
					{ 40 ,  {310.5792773 }} ,
					{ 41 ,  {174.68142017 }} ,
					{ 42 ,  {707.74797907 }} ,
					{ 44 ,  {520.61172947 }} ,
					{ 46 ,  {692.1009437 }} ,
					{ 47 ,  {816.81265916 }} ,
					{ 54 ,  {192.59288742 }} ,
					{ 55 ,  {193.36881075 }} ,
					{ 56 ,  {184.81176238 }} ,
					{ 57 ,  {241.12137081 }} ,
					{ 58 ,  {304.56729485 }} ,
					{ 60 ,  {557.42418185 }} ,
					{ 63 ,  {419.36346749 }} ,
					{ 64 ,  {456.84183869 }} ,
					{ 65 ,  {367.2164339 }} ,
					{ 71 ,  {651.51242251 }} ,
					{ 73 ,  {616.90506534 }} ,
					{ 74 ,  {630.47308595 }} ,
					{ 76 ,  {670.13118584 }} ,
					{ 77 ,  {695.99180066 }} ,
					{ 79 ,  {859.39726521 }} ,
					{ 81 ,  {753.58663382 }} ,
					{ 83 ,  {762.12754055 }} ,
					{ 84 ,  {760.21824104 }} ,
					{ 85 ,  {954.01675074 }} ,
					{ 89 ,  {921.14633043 }} ,
					{ 91 ,  {936.08984202 }} ,
					{ 92 ,  {936.66449274 }} ,
					{ 94 ,  {991.65423222 }} ,
					{ 95 ,  {964.56286917 }} ,
					{ 98 ,  {1185.2623187 }} ,
					{ 99 ,  {1161.77589816 }} ,
					{ 100 ,  {1299.75326814 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_3 <= 1.5343749523162842) ? ( (scaler_output_2 <= 0.9693888127803802) ? ( (scaler_output_4 <= -1.4309000372886658) ? ( (scaler_output_4 <= -1.481613039970398) ? ( (scaler_output_5 <= -0.8493432998657227) ? ( (scaler_output_4 <= -1.580953598022461) ? ( 7 ) : ( 8 ) ) : ( (scaler_output_3 <= -0.80410435795784) ? ( 10 ) : ( (scaler_output_2 <= -0.626136414706707) ? ( 12 ) : ( 13 ) ) ) ) : ( (scaler_output_2 <= -0.3636448532342911) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_3 <= -0.1512136021628976) ? ( (scaler_output_5 <= 1.0228291749954224) ? ( (scaler_output_3 <= -1.1387653946876526) ? ( 20 ) : ( (scaler_output_4 <= -1.0860061049461365) ? ( 22 ) : ( 23 ) ) ) : ( 24 ) ) : ( (scaler_output_4 <= -1.0020476579666138) ? ( (scaler_output_4 <= -1.1697484254837036) ? ( (scaler_output_3 <= 1.10731241106987) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (scaler_output_2 <= -0.7476448053494096) ? ( 32 ) : ( 33 ) ) ) ) ) : ( (scaler_output_3 <= 1.032966285943985) ? ( (scaler_output_5 <= 0.38951121270656586) ? ( (scaler_output_5 <= -0.606260135769844) ? ( 37 ) : ( (scaler_output_3 <= -0.1845790147781372) ? ( 39 ) : ( 40 ) ) ) : ( 41 ) ) : ( 42 ) ) ) : ( (scaler_output_4 <= -0.5779826641082764) ? ( 44 ) : ( (scaler_output_3 <= 1.560240089893341) ? ( 46 ) : ( 47 ) ) ) ) : ( (scaler_output_3 <= -0.4198148101568222) ? ( (scaler_output_3 <= -1.2677711248397827) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_4 <= 1.14357990026474) ? ( (scaler_output_5 <= -0.30970026552677155) ? ( (scaler_output_2 <= 1.9923570156097412) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) : ( 57 ) ) : ( 58 ) ) : ( (scaler_output_2 <= -1.050585299730301) ? ( 60 ) : ( (scaler_output_2 <= -0.23644034564495087) ? ( (scaler_output_4 <= 0.5885537713766098) ? ( 63 ) : ( 64 ) ) : ( 65 ) ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 1.4276533126831055) ? ( (scaler_output_4 <= 0.7722108066082001) ? ( (scaler_output_2 <= -0.13667893409729004) ? ( (scaler_output_2 <= -0.9788502752780914) ? ( 71 ) : ( (scaler_output_3 <= 0.23009626648854464) ? ( 73 ) : ( 74 ) ) ) : ( (scaler_output_3 <= 0.20395492017269135) ? ( 76 ) : ( 77 ) ) ) : ( (scaler_output_4 <= 0.8567967712879181) ? ( 79 ) : ( (scaler_output_4 <= 1.0110346376895905) ? ( 81 ) : ( (scaler_output_2 <= -0.13670790195465088) ? ( 83 ) : ( 84 ) ) ) ) ) : ( 85 ) ) : ( (scaler_output_5 <= -0.1428305320441723) ? ( (scaler_output_4 <= 0.7521138191223145) ? ( (scaler_output_4 <= 0.07509112358093262) ? ( 89 ) : ( (scaler_output_4 <= 0.434556744992733) ? ( 91 ) : ( 92 ) ) ) : ( (scaler_output_5 <= -0.7280989810824394) ? ( 94 ) : ( 95 ) ) ) : ( (scaler_output_4 <= 1.331526517868042) ? ( (scaler_output_3 <= 1.2384931445121765) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_11
		
	
		namespace EXT_SubModel_12 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {60.17684929 }} ,
					{ 7 ,  {67.61473198 }} ,
					{ 9 ,  {45.71113412 }} ,
					{ 10 ,  {38.41875351 }} ,
					{ 13 ,  {43.13717196 }} ,
					{ 15 ,  {112.36813458 }} ,
					{ 16 ,  {96.00340237 }} ,
					{ 19 ,  {168.83377965 }} ,
					{ 20 ,  {154.50461473 }} ,
					{ 21 ,  {210.24199264 }} ,
					{ 24 ,  {242.64398564 }} ,
					{ 25 ,  {287.26242769 }} ,
					{ 27 ,  {217.90641985 }} ,
					{ 28 ,  {192.59288742 }} ,
					{ 32 ,  {129.17022248 }} ,
					{ 33 ,  {184.81176238 }} ,
					{ 35 ,  {241.12137081 }} ,
					{ 37 ,  {367.2164339 }} ,
					{ 38 ,  {304.56729485 }} ,
					{ 40 ,  {456.84183869 }} ,
					{ 42 ,  {577.34865081 }} ,
					{ 43 ,  {557.42418185 }} ,
					{ 48 ,  {74.13416807 }} ,
					{ 49 ,  {89.81697753 }} ,
					{ 52 ,  {205.37013415 }} ,
					{ 53 ,  {212.83015826 }} ,
					{ 54 ,  {222.6809715 }} ,
					{ 58 ,  {331.03594313 }} ,
					{ 60 ,  {297.00533496 }} ,
					{ 61 ,  {310.5792773 }} ,
					{ 62 ,  {345.51744456 }} ,
					{ 63 ,  {520.61172947 }} ,
					{ 69 ,  {543.10577247 }} ,
					{ 70 ,  {565.71521017 }} ,
					{ 71 ,  {469.13995216 }} ,
					{ 74 ,  {680.96114859 }} ,
					{ 75 ,  {695.99180066 }} ,
					{ 77 ,  {616.90506534 }} ,
					{ 78 ,  {630.47308595 }} ,
					{ 80 ,  {1006.94766003 }} ,
					{ 83 ,  {784.59125862 }} ,
					{ 85 ,  {762.12754055 }} ,
					{ 86 ,  {760.21824104 }} ,
					{ 87 ,  {737.40865774 }} ,
					{ 91 ,  {816.81265916 }} ,
					{ 92 ,  {692.1009437 }} ,
					{ 96 ,  {921.14633043 }} ,
					{ 97 ,  {936.08984202 }} ,
					{ 98 ,  {897.11075364 }} ,
					{ 101 ,  {991.65423222 }} ,
					{ 102 ,  {964.56286917 }} ,
					{ 103 ,  {1054.16277579 }} ,
					{ 105 ,  {1299.75326814 }} ,
					{ 106 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.27021659910678864) ? ( (scaler_output_4 <= 0.509816586971283) ? ( (scaler_output_2 <= 1.0349310338497162) ? ( (scaler_output_4 <= -1.3272258639335632) ? ( (scaler_output_3 <= -0.9585209786891937) ? ( (scaler_output_3 <= -1.0840756297111511) ? ( 6 ) : ( 7 ) ) : ( (scaler_output_3 <= -0.80410435795784) ? ( 9 ) : ( 10 ) ) ) : ( (scaler_output_3 <= -1.247803658246994) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( 13 ) : ( (scaler_output_4 <= -0.0005476325750350952) ? ( 15 ) : ( 16 ) ) ) : ( (scaler_output_4 <= -0.6873114258050919) ? ( (scaler_output_2 <= 0.8264346718788147) ? ( 19 ) : ( 20 ) ) : ( 21 ) ) ) ) : ( (scaler_output_2 <= 1.582097351551056) ? ( (scaler_output_3 <= -1.0520573556423187) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_4 <= -0.3442067988216877) ? ( 27 ) : ( 28 ) ) ) ) : ( (scaler_output_3 <= -1.0464974641799927) ? ( (scaler_output_4 <= 0.9384577572345734) ? ( (scaler_output_2 <= 0.0814022421836853) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_3 <= -1.3971152901649475) ? ( 35 ) : ( (scaler_output_2 <= 0.17494834959506989) ? ( 37 ) : ( 38 ) ) ) ) : ( (scaler_output_5 <= 0.5996770560741425) ? ( 40 ) : ( (scaler_output_4 <= 1.1088310480117798) ? ( 42 ) : ( 43 ) ) ) ) ) : ( (scaler_output_4 <= -0.5216203033924103) ? ( (scaler_output_4 <= -1.0818235576152802) ? ( (scaler_output_2 <= -0.4061509147286415) ? ( (scaler_output_5 <= -0.5699145719408989) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_5 <= -0.5445553362369537) ? ( (scaler_output_3 <= 0.7902272269129753) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) : ( (scaler_output_3 <= 1.1178331673145294) ? ( (scaler_output_4 <= -0.6940518021583557) ? ( (scaler_output_2 <= -0.264937543310225) ? ( 58 ) : ( (scaler_output_3 <= 0.26763792242854834) ? ( 60 ) : ( 61 ) ) ) : ( 62 ) ) : ( 63 ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 0.5458761304616928) ? ( (scaler_output_2 <= -0.7733035981655121) ? ( (scaler_output_3 <= 0.1481356266885996) ? ( (scaler_output_4 <= 0.31196460872888565) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) : ( (scaler_output_5 <= -0.7900470495223999) ? ( (scaler_output_5 <= -1.1639447808265686) ? ( 74 ) : ( 75 ) ) : ( (scaler_output_3 <= 0.23009626648854464) ? ( 77 ) : ( 78 ) ) ) ) : ( (scaler_output_5 <= -1.5827724933624268) ? ( 80 ) : ( (scaler_output_5 <= 1.2811342477798462) ? ( (scaler_output_4 <= 0.9362911581993103) ? ( 83 ) : ( (scaler_output_3 <= -0.20008733868598938) ? ( 85 ) : ( 86 ) ) ) : ( 87 ) ) ) ) : ( (scaler_output_2 <= 1.0006893277168274) ? ( (scaler_output_4 <= -0.05863320827484131) ? ( (scaler_output_2 <= -0.45017529325559735) ? ( 91 ) : ( 92 ) ) : ( (scaler_output_4 <= 0.3140285611152649) ? ( (scaler_output_4 <= 0.1966354176402092) ? ( (scaler_output_4 <= 0.07509112358093262) ? ( 96 ) : ( 97 ) ) : ( 98 ) ) : ( (scaler_output_3 <= 1.1753819584846497) ? ( (scaler_output_5 <= -0.7280989810824394) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) ) ) : ( (scaler_output_3 <= 0.8845424950122833) ? ( 105 ) : ( 106 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_12
		
	
		namespace EXT_SubModel_13 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {60.17684929 }} ,
					{ 7 ,  {45.71113412 }} ,
					{ 8 ,  {112.36813458 }} ,
					{ 11 ,  {210.24199264 }} ,
					{ 13 ,  {174.68142017 }} ,
					{ 14 ,  {154.50461473 }} ,
					{ 15 ,  {131.74760526 }} ,
					{ 18 ,  {43.13717196 }} ,
					{ 19 ,  {38.41875351 }} ,
					{ 20 ,  {67.61473198 }} ,
					{ 24 ,  {96.00340237 }} ,
					{ 25 ,  {129.17022248 }} ,
					{ 27 ,  {193.36881075 }} ,
					{ 28 ,  {192.59288742 }} ,
					{ 32 ,  {340.89432548 }} ,
					{ 33 ,  {367.2164339 }} ,
					{ 35 ,  {287.26242769 }} ,
					{ 36 ,  {304.56729485 }} ,
					{ 38 ,  {456.84183869 }} ,
					{ 39 ,  {419.36346749 }} ,
					{ 43 ,  {17.5126316 }} ,
					{ 45 ,  {74.13416807 }} ,
					{ 46 ,  {81.61991679 }} ,
					{ 49 ,  {205.37013415 }} ,
					{ 50 ,  {251.33228306 }} ,
					{ 52 ,  {310.5792773 }} ,
					{ 53 ,  {297.00533496 }} ,
					{ 58 ,  {543.10577247 }} ,
					{ 59 ,  {469.13995216 }} ,
					{ 62 ,  {577.34865081 }} ,
					{ 65 ,  {680.96114859 }} ,
					{ 68 ,  {651.51242251 }} ,
					{ 69 ,  {616.90506534 }} ,
					{ 70 ,  {670.13118584 }} ,
					{ 72 ,  {695.99180066 }} ,
					{ 73 ,  {737.40865774 }} ,
					{ 75 ,  {784.59125862 }} ,
					{ 76 ,  {859.39726521 }} ,
					{ 79 ,  {692.1009437 }} ,
					{ 80 ,  {816.81265916 }} ,
					{ 83 ,  {897.11075364 }} ,
					{ 86 ,  {936.08984202 }} ,
					{ 87 ,  {921.14633043 }} ,
					{ 88 ,  {964.56286917 }} ,
					{ 89 ,  {1054.16277579 }} ,
					{ 92 ,  {762.12754055 }} ,
					{ 93 ,  {1066.49672809 }} ,
					{ 95 ,  {1450.4501203 }} ,
					{ 98 ,  {1344.28572632 }} ,
					{ 99 ,  {1299.75326814 }} ,
					{ 100 ,  {1185.2623187 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_3 <= -0.40340161323547363) ? ( (scaler_output_4 <= -0.05246769404038787) ? ( (scaler_output_5 <= 1.1647228598594666) ? ( (scaler_output_5 <= 0.24834014847874641) ? ( (scaler_output_4 <= -0.9447381347417831) ? ( (scaler_output_3 <= -0.9813170731067657) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_4 <= -0.2431742437183857) ? ( (scaler_output_3 <= -0.8877298533916473) ? ( 11 ) : ( (scaler_output_4 <= -1.0379496812820435) ? ( 13 ) : ( 14 ) ) ) : ( 15 ) ) ) : ( (scaler_output_5 <= 1.2807435989379883) ? ( (scaler_output_3 <= -1.2639774680137634) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_3 <= -1.6273767352104187) ? ( (scaler_output_5 <= -0.07942867279052734) ? ( 24 ) : ( 25 ) ) : ( (scaler_output_5 <= -1.1084599196910858) ? ( 27 ) : ( 28 ) ) ) : ( (scaler_output_3 <= -0.8575227856636047) ? ( (scaler_output_2 <= 0.17494834959506989) ? ( (scaler_output_4 <= 1.0052908957004547) ? ( 32 ) : ( 33 ) ) : ( (scaler_output_4 <= 0.539850874338299) ? ( 35 ) : ( 36 ) ) ) : ( (scaler_output_2 <= -0.3808511644601822) ? ( 38 ) : ( 39 ) ) ) ) ) : ( (scaler_output_4 <= -0.5718052089214325) ? ( (scaler_output_4 <= -1.4220256805419922) ? ( (scaler_output_4 <= -1.7431707978248596) ? ( 43 ) : ( (scaler_output_4 <= -1.660830020904541) ? ( 45 ) : ( 46 ) ) ) : ( (scaler_output_4 <= -1.0265016853809357) ? ( (scaler_output_3 <= 0.28764166682958603) ? ( 49 ) : ( 50 ) ) : ( (scaler_output_5 <= -0.09663799405097961) ? ( 52 ) : ( 53 ) ) ) ) : ( (scaler_output_4 <= 0.9779741168022156) ? ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 0.1700807735323906) ? ( (scaler_output_3 <= 0.1481356266885996) ? ( 58 ) : ( 59 ) ) : ( (scaler_output_4 <= 0.7460125982761383) ? ( (scaler_output_3 <= -0.2016371637582779) ? ( 62 ) : ( (scaler_output_2 <= 0.4684268832206726) ? ( (scaler_output_4 <= 0.24357600510120392) ? ( 65 ) : ( (scaler_output_5 <= 1.173663079738617) ? ( (scaler_output_4 <= 0.3592795729637146) ? ( 68 ) : ( 69 ) ) : ( 70 ) ) ) : ( (scaler_output_4 <= 0.40834131836891174) ? ( 72 ) : ( 73 ) ) ) ) : ( (scaler_output_5 <= -0.6318782567977905) ? ( 75 ) : ( 76 ) ) ) ) : ( (scaler_output_4 <= -0.05863320827484131) ? ( (scaler_output_3 <= 1.560240089893341) ? ( 79 ) : ( 80 ) ) : ( (scaler_output_5 <= 0.290997751057148) ? ( (scaler_output_5 <= -1.113603562116623) ? ( 83 ) : ( (scaler_output_5 <= -0.48577817529439926) ? ( (scaler_output_5 <= -0.8749085068702698) ? ( 86 ) : ( 87 ) ) : ( 88 ) ) ) : ( 89 ) ) ) ) : ( (scaler_output_3 <= 0.5907565802335739) ? ( (scaler_output_4 <= 1.3999922275543213) ? ( 92 ) : ( 93 ) ) : ( (scaler_output_2 <= -0.06669343076646328) ? ( 95 ) : ( (scaler_output_2 <= 1.5615323781967163) ? ( (scaler_output_2 <= 0.6991206426173449) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_13
		
	
		namespace EXT_SubModel_14 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 6 ,  {60.17684929 }} ,
					{ 7 ,  {66.46875936 }} ,
					{ 8 ,  {74.13416807 }} ,
					{ 10 ,  {67.61473198 }} ,
					{ 13 ,  {45.71113412 }} ,
					{ 14 ,  {42.01839185 }} ,
					{ 15 ,  {38.41875351 }} ,
					{ 18 ,  {251.33228306 }} ,
					{ 19 ,  {222.6809715 }} ,
					{ 20 ,  {154.50461473 }} ,
					{ 24 ,  {43.13717196 }} ,
					{ 26 ,  {112.36813458 }} ,
					{ 28 ,  {131.74760526 }} ,
					{ 29 ,  {123.98006476 }} ,
					{ 32 ,  {238.91298805 }} ,
					{ 33 ,  {210.24199264 }} ,
					{ 34 ,  {287.26242769 }} ,
					{ 37 ,  {331.03594313 }} ,
					{ 38 ,  {310.5792773 }} ,
					{ 41 ,  {520.61172947 }} ,
					{ 42 ,  {469.13995216 }} ,
					{ 43 ,  {707.74797907 }} ,
					{ 48 ,  {96.00340237 }} ,
					{ 50 ,  {241.12137081 }} ,
					{ 52 ,  {184.81176238 }} ,
					{ 53 ,  {192.59288742 }} ,
					{ 55 ,  {242.64398564 }} ,
					{ 57 ,  {367.2164339 }} ,
					{ 58 ,  {340.89432548 }} ,
					{ 60 ,  {456.84183869 }} ,
					{ 62 ,  {501.63259526 }} ,
					{ 64 ,  {565.71521017 }} ,
					{ 65 ,  {577.34865081 }} ,
					{ 71 ,  {630.47308595 }} ,
					{ 74 ,  {680.96114859 }} ,
					{ 75 ,  {670.13118584 }} ,
					{ 76 ,  {695.99180066 }} ,
					{ 77 ,  {737.40865774 }} ,
					{ 79 ,  {784.59125862 }} ,
					{ 80 ,  {859.39726521 }} ,
					{ 83 ,  {991.65423222 }} ,
					{ 85 ,  {897.11075364 }} ,
					{ 87 ,  {921.14633043 }} ,
					{ 88 ,  {936.08984202 }} ,
					{ 90 ,  {1054.16277579 }} ,
					{ 91 ,  {1161.77589816 }} ,
					{ 94 ,  {1185.2623187 }} ,
					{ 96 ,  {954.01675074 }} ,
					{ 98 ,  {1072.70246576 }} ,
					{ 99 ,  {1066.49672809 }} ,
					{ 101 ,  {1344.28572632 }} ,
					{ 102 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= 0.017649224493652582) ? ( (scaler_output_4 <= -0.9838692843914032) ? ( (scaler_output_4 <= -1.3605417609214783) ? ( (scaler_output_5 <= -0.7836979031562805) ? ( (scaler_output_3 <= 0.20296168327331543) ? ( (scaler_output_2 <= 0.0887349471449852) ? ( 6 ) : ( 7 ) ) : ( 8 ) ) : ( (scaler_output_3 <= -0.9585209786891937) ? ( 10 ) : ( (scaler_output_4 <= -1.6627447605133057) ? ( (scaler_output_3 <= -0.19290710985660553) ? ( 13 ) : ( 14 ) ) : ( 15 ) ) ) ) : ( (scaler_output_4 <= -1.0456076264381409) ? ( (scaler_output_2 <= -0.4326847940683365) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (scaler_output_3 <= -0.04657936096191406) ? ( (scaler_output_3 <= -1.217160552740097) ? ( (scaler_output_4 <= -0.5304373353719711) ? ( 24 ) : ( (scaler_output_4 <= -0.34222930669784546) ? ( 26 ) : ( (scaler_output_3 <= -1.4681960940361023) ? ( 28 ) : ( 29 ) ) ) ) : ( (scaler_output_2 <= 0.82704146951437) ? ( (scaler_output_4 <= -0.5709520727396011) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) ) : ( (scaler_output_4 <= -0.842253178358078) ? ( (scaler_output_2 <= 0.23485881090164185) ? ( 37 ) : ( 38 ) ) : ( (scaler_output_2 <= 0.5946461856365204) ? ( (scaler_output_5 <= 0.3923652023077011) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) ) : ( (scaler_output_3 <= -0.12360849976539612) ? ( (scaler_output_5 <= 0.3709569722414017) ? ( (scaler_output_3 <= -1.3247019052505493) ? ( (scaler_output_2 <= 0.3852245658636093) ? ( 48 ) : ( (scaler_output_2 <= 1.1197042167186737) ? ( 50 ) : ( (scaler_output_3 <= -1.4832730889320374) ? ( 52 ) : ( 53 ) ) ) ) : ( (scaler_output_4 <= 0.2717645689845085) ? ( 55 ) : ( (scaler_output_5 <= -1.1071047186851501) ? ( 57 ) : ( 58 ) ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( 60 ) : ( (scaler_output_4 <= 0.2939539775252342) ? ( 62 ) : ( (scaler_output_5 <= 0.9595505595207214) ? ( 64 ) : ( 65 ) ) ) ) ) : ( (scaler_output_4 <= 0.911697268486023) ? ( (scaler_output_3 <= 0.6598700284957886) ? ( (scaler_output_4 <= 0.7460125982761383) ? ( (scaler_output_5 <= 1.3620607256889343) ? ( (scaler_output_4 <= 0.11353424564003944) ? ( 71 ) : ( (scaler_output_2 <= 0.4684268832206726) ? ( (scaler_output_4 <= 0.4588107764720917) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) ) : ( 77 ) ) : ( (scaler_output_2 <= -0.2216857299208641) ? ( 79 ) : ( 80 ) ) ) : ( (scaler_output_5 <= -0.4050225708633661) ? ( (scaler_output_5 <= -1.2412680387496948) ? ( 83 ) : ( (scaler_output_3 <= 1.3279410600662231) ? ( 85 ) : ( (scaler_output_2 <= 0.038599058985710144) ? ( 87 ) : ( 88 ) ) ) ) : ( (scaler_output_4 <= 0.4838908016681671) ? ( 90 ) : ( 91 ) ) ) ) : ( (scaler_output_3 <= 1.0630581974983215) ? ( (scaler_output_4 <= 1.266200840473175) ? ( 94 ) : ( (scaler_output_2 <= -0.21028014458715916) ? ( 96 ) : ( (scaler_output_5 <= -0.4956005625426769) ? ( 98 ) : ( 99 ) ) ) ) : ( (scaler_output_4 <= 1.2806103229522705) ? ( 101 ) : ( 102 ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_14
		
	
		namespace EXT_SubModel_15 {
		
			typedef std::vector<double> tNodeData;
			std::map<int, tNodeData> Decision_Tree_Node_data = {
					{ 4 ,  {74.13416807 }} ,
					{ 5 ,  {66.46875936 }} ,
					{ 7 ,  {17.5126316 }} ,
					{ 9 ,  {38.41875351 }} ,
					{ 10 ,  {45.71113412 }} ,
					{ 14 ,  {154.50461473 }} ,
					{ 15 ,  {43.13717196 }} ,
					{ 18 ,  {205.37013415 }} ,
					{ 19 ,  {168.83377965 }} ,
					{ 22 ,  {217.90641985 }} ,
					{ 23 ,  {238.91298805 }} ,
					{ 27 ,  {297.00533496 }} ,
					{ 28 ,  {310.5792773 }} ,
					{ 29 ,  {345.51744456 }} ,
					{ 30 ,  {251.33228306 }} ,
					{ 31 ,  {520.61172947 }} ,
					{ 36 ,  {129.17022248 }} ,
					{ 37 ,  {131.74760526 }} ,
					{ 40 ,  {184.81176238 }} ,
					{ 42 ,  {192.59288742 }} ,
					{ 43 ,  {193.36881075 }} ,
					{ 44 ,  {241.12137081 }} ,
					{ 48 ,  {340.89432548 }} ,
					{ 49 ,  {367.2164339 }} ,
					{ 51 ,  {242.64398564 }} ,
					{ 52 ,  {304.56729485 }} ,
					{ 54 ,  {557.42418185 }} ,
					{ 55 ,  {456.84183869 }} ,
					{ 61 ,  {469.13995216 }} ,
					{ 63 ,  {577.34865081 }} ,
					{ 64 ,  {543.10577247 }} ,
					{ 66 ,  {630.47308595 }} ,
					{ 68 ,  {680.96114859 }} ,
					{ 69 ,  {695.99180066 }} ,
					{ 72 ,  {784.59125862 }} ,
					{ 74 ,  {762.12754055 }} ,
					{ 75 ,  {760.21824104 }} ,
					{ 76 ,  {737.40865774 }} ,
					{ 79 ,  {954.01675074 }} ,
					{ 80 ,  {1006.94766003 }} ,
					{ 82 ,  {1072.70246576 }} ,
					{ 83 ,  {1066.49672809 }} ,
					{ 87 ,  {897.11075364 }} ,
					{ 88 ,  {921.14633043 }} ,
					{ 90 ,  {816.81265916 }} ,
					{ 91 ,  {707.74797907 }} ,
					{ 94 ,  {936.66449274 }} ,
					{ 95 ,  {964.56286917 }} ,
					{ 98 ,  {1161.77589816 }} ,
					{ 99 ,  {1185.2623187 }} ,
					{ 100 ,  {1450.4501203 }} 
			};
			
		
			int get_decision_tree_node_index(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = (scaler_output_4 <= -0.49651999771595) ? ( (scaler_output_4 <= -1.3343552350997925) ? ( (scaler_output_5 <= -0.9561173319816589) ? ( (scaler_output_2 <= -0.48091481626033783) ? ( 4 ) : ( 5 ) ) : ( (scaler_output_5 <= -0.680695652961731) ? ( 7 ) : ( (scaler_output_2 <= -0.5978109687566757) ? ( 9 ) : ( 10 ) ) ) ) : ( (scaler_output_3 <= 1.060194581747055) ? ( (scaler_output_3 <= -0.7117037177085876) ? ( (scaler_output_4 <= -0.8298941850662231) ? ( 14 ) : ( 15 ) ) : ( (scaler_output_4 <= -1.128638505935669) ? ( (scaler_output_5 <= -0.4344823658466339) ? ( 18 ) : ( 19 ) ) : ( (scaler_output_3 <= -0.2146232733502984) ? ( (scaler_output_4 <= -0.7780995666980743) ? ( 22 ) : ( 23 ) ) : ( (scaler_output_5 <= 0.8026990666985512) ? ( (scaler_output_4 <= -0.6940518021583557) ? ( (scaler_output_2 <= 0.4730944996699691) ? ( 27 ) : ( 28 ) ) : ( 29 ) ) : ( 30 ) ) ) ) ) : ( 31 ) ) ) : ( (scaler_output_3 <= -0.5491452813148499) ? ( (scaler_output_3 <= -1.3361194133758545) ? ( (scaler_output_2 <= -0.0549909770488739) ? ( (scaler_output_3 <= -1.5675306916236877) ? ( 36 ) : ( 37 ) ) : ( (scaler_output_4 <= 1.14357990026474) ? ( (scaler_output_2 <= 1.541588842868805) ? ( 40 ) : ( (scaler_output_4 <= 0.49538497254252434) ? ( 42 ) : ( 43 ) ) ) : ( 44 ) ) ) : ( (scaler_output_3 <= -0.8755245804786682) ? ( (scaler_output_5 <= -0.24198536574840546) ? ( (scaler_output_4 <= 1.0052908957004547) ? ( 48 ) : ( 49 ) ) : ( (scaler_output_4 <= 0.6038304194808006) ? ( 51 ) : ( 52 ) ) ) : ( (scaler_output_3 <= -0.8186395168304443) ? ( 54 ) : ( 55 ) ) ) ) : ( (scaler_output_3 <= 0.5316546559333801) ? ( (scaler_output_4 <= 1.3999922275543213) ? ( (scaler_output_4 <= 0.6216000318527222) ? ( (scaler_output_3 <= 0.3828497529029846) ? ( (scaler_output_2 <= -1.3216471076011658) ? ( 61 ) : ( (scaler_output_5 <= 1.2774696350097656) ? ( 63 ) : ( 64 ) ) ) : ( (scaler_output_4 <= 0.11353424564003944) ? ( 66 ) : ( (scaler_output_3 <= 0.49499496817588806) ? ( 68 ) : ( 69 ) ) ) ) : ( (scaler_output_5 <= 1.2811342477798462) ? ( (scaler_output_5 <= -0.3501795530319214) ? ( 72 ) : ( (scaler_output_3 <= -0.20008733868598938) ? ( 74 ) : ( 75 ) ) ) : ( 76 ) ) ) : ( (scaler_output_3 <= 0.26137249171733856) ? ( (scaler_output_3 <= 0.1398281529545784) ? ( 79 ) : ( 80 ) ) : ( (scaler_output_5 <= -0.4956005625426769) ? ( 82 ) : ( 83 ) ) ) ) : ( (scaler_output_4 <= 0.4384838044643402) ? ( (scaler_output_5 <= -0.1797034740447998) ? ( (scaler_output_5 <= -0.9989472329616547) ? ( 87 ) : ( 88 ) ) : ( (scaler_output_5 <= 0.41588133573532104) ? ( 90 ) : ( 91 ) ) ) : ( (scaler_output_5 <= -0.13054856844246387) ? ( (scaler_output_5 <= -0.8392743989825249) ? ( 94 ) : ( 95 ) ) : ( (scaler_output_5 <= 1.3029763102531433) ? ( (scaler_output_2 <= 0.23149150609970093) ? ( 98 ) : ( 99 ) ) : ( 100 ) ) ) ) ) );
			
				return lNodeIndex;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Estimator" };
		
				return lOutputs;
			}
		
			tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				int lNodeIndex = get_decision_tree_node_index(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5);
		
				std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
		
		
				tTable lTable;
		
				std::any  lEstimator = lNodeValue [ 0 ];
				lTable[ "Estimator" ] = { lEstimator };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace EXT_SubModel_15
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			std::vector<tTable> lTreeScores = { 
				EXT_SubModel_0::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_1::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_2::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_3::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_4::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_5::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_6::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_7::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_8::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_9::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_10::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_11::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_12::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_13::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_14::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5),
				EXT_SubModel_15::compute_regression(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5)
			};
	
			tTable lAggregatedTable = aggregate_rf_scores(lTreeScores, {"Estimator"});
	
	
			tTable lTable = lAggregatedTable;
	
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable;

		std::any  lEstimator = lTable_model[ "Estimator" ][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
