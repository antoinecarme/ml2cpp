// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LGBMRegressor
// Dataset : boston

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LGBMRegressor_boston.exe ml2cpp-demo_LGBMRegressor_boston.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace LGBM_Tree_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {23.68019760161212 }} ,
				{ 9 ,  {22.83501241924654 }} ,
				{ 12 ,  {23.12476244902847 }} ,
				{ 13 ,  {22.8224124152684 }} ,
				{ 20 ,  {22.1865124199414 }} ,
				{ 22 ,  {22.133845756612594 }} ,
				{ 23 ,  {21.979528549173622 }} ,
				{ 33 ,  {22.760012416034588 }} ,
				{ 34 ,  {22.54477432406451 }} ,
				{ 42 ,  {22.44327328999447 }} ,
				{ 43 ,  {22.275262429478143 }} ,
				{ 64 ,  {22.485512422995207 }} ,
				{ 65 ,  {22.625938357487197 }} ,
				{ 70 ,  {22.400012429599947 }} ,
				{ 142 ,  {22.52676243251798 }} ,
				{ 143 ,  {22.444066474559584 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 6.825 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_0 <= 0.13995000000000005 ) ? ( ( ( Feature_5 <= 6.208500000000001 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 34 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_0 <= 5.776155000000001 ) ? ( ( ( Feature_7 <= 1.9590500000000002 ) ? ( 20 ) : ( ( ( Feature_10 <= 20.150000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_12 <= 21.385 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.416000000000001 ) ? ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 12 ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0
	

	namespace LGBM_Tree_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {1.046175335292463 }} ,
				{ 12 ,  {0.5185119009017944 }} ,
				{ 13 ,  {0.23127937006950378 }} ,
				{ 17 ,  {0.25936048831790687 }} ,
				{ 18 ,  {-0.0324768134525844 }} ,
				{ 20 ,  {-0.37282561540603637 }} ,
				{ 22 ,  {-0.42285894155502324 }} ,
				{ 23 ,  {-0.5694602920163062 }} ,
				{ 32 ,  {0.18230336777400225 }} ,
				{ 38 ,  {-0.16674019930263362 }} ,
				{ 42 ,  {-0.12890279338411664 }} ,
				{ 43 ,  {-0.2885131169855595 }} ,
				{ 66 ,  {-0.09879467114806176 }} ,
				{ 67 ,  {0.058645646909384855 }} ,
				{ 78 ,  {-0.04958811178803444 }} ,
				{ 79 ,  {-0.12482299310596366 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 6.825 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_11 <= 390.80000000000007 ) ? ( 32 ) : ( ( ( Feature_5 <= 6.157500000000001 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 18 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 38 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_0 <= 5.776155000000001 ) ? ( ( ( Feature_7 <= 1.9590500000000002 ) ? ( 20 ) : ( ( ( Feature_10 <= 20.150000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_12 <= 21.385 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.416000000000001 ) ? ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 12 ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1
	

	namespace LGBM_Tree_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.4872575873420353 }} ,
				{ 7 ,  {1.0207646484176318 }} ,
				{ 18 ,  {0.41737285366524823 }} ,
				{ 20 ,  {-0.13354739701518645 }} ,
				{ 21 ,  {-0.29685386657714846 }} ,
				{ 23 ,  {-0.5864352961381276 }} ,
				{ 33 ,  {0.1676879637282003 }} ,
				{ 34 ,  {-0.030852971188280554 }} ,
				{ 38 ,  {0.22944668382406236 }} ,
				{ 39 ,  {0.12306558111682536 }} ,
				{ 44 ,  {-0.3060102091232936 }} ,
				{ 45 ,  {-0.4596290184901311 }} ,
				{ 64 ,  {-0.08563497792929411 }} ,
				{ 65 ,  {0.0398647699367117 }} ,
				{ 70 ,  {-0.1616636018390241 }} ,
				{ 142 ,  {-0.0471087034791708 }} ,
				{ 143 ,  {-0.12190811891813536 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_0 <= 0.13995000000000005 ) ? ( ( ( Feature_5 <= 6.208500000000001 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 34 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 5.285000000000001 ) ? ( 18 ) : ( ( ( Feature_2 <= 6.080000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2
	

	namespace LGBM_Tree_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.4628946996870495 }} ,
				{ 7 ,  {0.9697264621655146 }} ,
				{ 18 ,  {0.39650421479473946 }} ,
				{ 20 ,  {-0.1268700288178829 }} ,
				{ 21 ,  {-0.2820111757516861 }} ,
				{ 23 ,  {-0.557113532225291 }} ,
				{ 32 ,  {0.16862687380751595 }} ,
				{ 34 ,  {-0.029310325502107545 }} ,
				{ 38 ,  {0.2179743518680334 }} ,
				{ 39 ,  {0.11691229958087207 }} ,
				{ 44 ,  {-0.2907096968094508 }} ,
				{ 45 ,  {-0.43664756921621467 }} ,
				{ 66 ,  {-0.09198578777057785 }} ,
				{ 67 ,  {0.052118188159407254 }} ,
				{ 70 ,  {-0.15358042017273282 }} ,
				{ 142 ,  {-0.044753270074725154 }} ,
				{ 143 ,  {-0.11581271548528929 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_11 <= 390.80000000000007 ) ? ( 32 ) : ( ( ( Feature_5 <= 6.157500000000001 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 34 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 5.285000000000001 ) ? ( 18 ) : ( ( ( Feature_2 <= 6.080000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3
	

	namespace LGBM_Tree_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.9001216561705978 }} ,
				{ 12 ,  {0.4488262629508972 }} ,
				{ 13 ,  {0.19560412871837618 }} ,
				{ 16 ,  {0.2758381972766735 }} ,
				{ 18 ,  {-0.027844806458978428 }} ,
				{ 20 ,  {-0.3177920526266098 }} ,
				{ 22 ,  {-0.3654472271601359 }} ,
				{ 23 ,  {-0.4901316242833292 }} ,
				{ 35 ,  {0.16882487437961735 }} ,
				{ 38 ,  {-0.1437976984928052 }} ,
				{ 42 ,  {-0.1094367877944656 }} ,
				{ 43 ,  {-0.2454939514398575 }} ,
				{ 68 ,  {-0.07795563204740377 }} ,
				{ 69 ,  {0.027667950552243456 }} ,
				{ 78 ,  {-0.04251560464501381 }} ,
				{ 79 ,  {-0.10732435005667962 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 6.825 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_11 <= 385.25000000000006 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.472500000000001 ) ? ( ( ( Feature_5 <= 6.157500000000001 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 18 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 38 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_0 <= 5.776155000000001 ) ? ( ( ( Feature_7 <= 1.9590500000000002 ) ? ( 20 ) : ( ( ( Feature_10 <= 20.150000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_12 <= 21.385 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.416000000000001 ) ? ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 12 ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4
	

	namespace LGBM_Tree_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.4195113136654809 }} ,
				{ 7 ,  {0.876234057545662 }} ,
				{ 18 ,  {0.3606115233153105 }} ,
				{ 20 ,  {-0.11399166776010623 }} ,
				{ 21 ,  {-0.2528046953678131 }} ,
				{ 23 ,  {-0.5072189281384151 }} ,
				{ 33 ,  {0.15058369689028372 }} ,
				{ 35 ,  {-0.13262193070517644 }} ,
				{ 38 ,  {0.19749678652733565 }} ,
				{ 39 ,  {0.10349509610794486 }} ,
				{ 44 ,  {-0.26045705417792003 }} ,
				{ 45 ,  {-0.3953929089582884 }} ,
				{ 64 ,  {-0.07593208227306605 }} ,
				{ 65 ,  {0.028353116392261454 }} ,
				{ 68 ,  {-0.015540200060811535 }} ,
				{ 138 ,  {-0.13518817776983436 }} ,
				{ 139 ,  {-0.0617536703205627 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_0 <= 0.13995000000000005 ) ? ( ( ( Feature_5 <= 6.208500000000001 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_7 <= 4.433350000000002 ) ? ( ( ( Feature_6 <= 70.45 ) ? ( 68 ) : ( ( ( Feature_4 <= 0.6010000000000001 ) ? ( 138 ) : ( 139 ) ) ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_12 <= 5.285000000000001 ) ? ( 18 ) : ( ( ( Feature_2 <= 6.080000000000001 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5
	

	namespace LGBM_Tree_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.8138412157694499 }} ,
				{ 12 ,  {0.40702912807464603 }} ,
				{ 13 ,  {0.1752028804421425 }} ,
				{ 16 ,  {0.25468312400308524 }} ,
				{ 18 ,  {-0.130439582230368 }} ,
				{ 20 ,  {-0.2859011819958687 }} ,
				{ 22 ,  {-0.3312468538681666 }} ,
				{ 23 ,  {-0.4431184114948396 }} ,
				{ 35 ,  {0.15131260015152614 }} ,
				{ 38 ,  {-0.019852200435895112 }} ,
				{ 42 ,  {-0.09826535974507747 }} ,
				{ 43 ,  {-0.22073474258184433 }} ,
				{ 68 ,  {-0.07321579882308192 }} ,
				{ 69 ,  {0.023622583182385335 }} ,
				{ 78 ,  {-0.12303612295072526 }} ,
				{ 79 ,  {-0.06780925784260035 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 6.825 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_11 <= 385.25000000000006 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.472500000000001 ) ? ( ( ( Feature_5 <= 6.157500000000001 ) ? ( 68 ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( ( ( Feature_5 <= 5.851500000000001 ) ? ( 18 ) : ( ( ( Feature_10 <= 18.650000000000002 ) ? ( 38 ) : ( ( ( Feature_2 <= 9.125000000000002 ) ? ( 78 ) : ( 79 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_0 <= 5.776155000000001 ) ? ( ( ( Feature_7 <= 1.9590500000000002 ) ? ( 20 ) : ( ( ( Feature_10 <= 20.150000000000002 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_12 <= 21.385 ) ? ( 22 ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.416000000000001 ) ? ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 12 ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6
	

	namespace LGBM_Tree_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.38024618966238843 }} ,
				{ 7 ,  {0.7917302926381429 }} ,
				{ 18 ,  {0.3203236476182938 }} ,
				{ 19 ,  {0.1300581678061893 }} ,
				{ 20 ,  {-0.10322626722604036 }} ,
				{ 21 ,  {-0.23557976603508 }} ,
				{ 23 ,  {-0.4710798812949139 }} ,
				{ 32 ,  {0.1500300649739802 }} ,
				{ 34 ,  {-0.02015474227567514 }} ,
				{ 44 ,  {-0.24699253819205544 }} ,
				{ 45 ,  {-0.3567742813201178 }} ,
				{ 66 ,  {0.01551507211489869 }} ,
				{ 67 ,  {-0.056125140700134496 }} ,
				{ 70 ,  {-0.1289058319090501 }} ,
				{ 142 ,  {-0.0341631534229964 }} ,
				{ 143 ,  {-0.09554501856501038 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_7 <= 4.4583 ) ? ( 32 ) : ( ( ( Feature_12 <= 7.550000000000001 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 34 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6695000000000001 ) ? ( ( ( Feature_10 <= 19.900000000000002 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7
	

	namespace LGBM_Tree_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {0.7358486546410455 }} ,
				{ 9 ,  {0.17009803150829517 }} ,
				{ 12 ,  {0.35831355552806565 }} ,
				{ 13 ,  {0.13996829959479246 }} ,
				{ 17 ,  {0.09653892369511036 }} ,
				{ 20 ,  {-0.06208976803436166 }} ,
				{ 23 ,  {-0.2497278080880642 }} ,
				{ 42 ,  {-0.2516712417497355 }} ,
				{ 43 ,  {-0.14201768528670075 }} ,
				{ 44 ,  {-0.4189322257041932 }} ,
				{ 45 ,  {-0.358195953524631 }} ,
				{ 64 ,  {-0.1527059193700552 }} ,
				{ 65 ,  {-0.07131623082927295 }} ,
				{ 67 ,  {-0.07668999359011651 }} ,
				{ 132 ,  {0.04374145467710846 }} ,
				{ 133 ,  {-0.012029530054756574 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 6.825 ) ? ( ( ( Feature_12 <= 14.125000000000002 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_4 <= 0.6010000000000001 ) ? ( ( ( Feature_5 <= 6.057500000000001 ) ? ( ( ( Feature_5 <= 5.869500000000001 ) ? ( 64 ) : ( 65 ) ) ) : ( ( ( Feature_6 <= 69.55000000000001 ) ? ( ( ( Feature_7 <= 6.303050000000001 ) ? ( 132 ) : ( 133 ) ) ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( 9 ) ) ) : ( ( ( Feature_0 <= 5.776155000000001 ) ? ( ( ( Feature_6 <= 85.15000000000002 ) ? ( 20 ) : ( ( ( Feature_11 <= 393.24000000000007 ) ? ( 42 ) : ( 43 ) ) ) ) ) : ( ( ( Feature_7 <= 2.0085 ) ? ( ( ( Feature_6 <= 96.95000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.416000000000001 ) ? ( ( ( Feature_9 <= 298.00000000000006 ) ? ( 12 ) : ( 13 ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8
	

	namespace LGBM_Tree_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.34478048369998027 }} ,
				{ 7 ,  {0.7153513232866924 }} ,
				{ 18 ,  {0.29384527397155763 }} ,
				{ 19 ,  {0.11359430528000783 }} ,
				{ 20 ,  {-0.08975499762365452 }} ,
				{ 21 ,  {-0.20269539251923563 }} ,
				{ 23 ,  {-0.4210472335418065 }} ,
				{ 33 ,  {0.14321047950536012 }} ,
				{ 34 ,  {-0.01613803246901149 }} ,
				{ 44 ,  {-0.20954118832945823 }} ,
				{ 45 ,  {-0.32619722531392026 }} ,
				{ 64 ,  {0.02641438137808884 }} ,
				{ 65 ,  {-0.06379776725714857 }} ,
				{ 70 ,  {-0.11938267583432405 }} ,
				{ 142 ,  {-0.03056231179274619 }} ,
				{ 143 ,  {-0.08890278709901346 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_0 <= 0.15487000000000004 ) ? ( ( ( Feature_10 <= 18.250000000000004 ) ? ( 64 ) : ( 65 ) ) ) : ( 33 ) ) ) : ( ( ( Feature_9 <= 282.50000000000006 ) ? ( 34 ) : ( ( ( Feature_8 <= 4.500000000000001 ) ? ( 70 ) : ( ( ( Feature_6 <= 70.45 ) ? ( 142 ) : ( 143 ) ) ) ) ) ) ) ) ) : ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9
	

	namespace LGBM_Tree_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.5860365500816932 }} ,
				{ 9 ,  {0.23690923593747312 }} ,
				{ 14 ,  {-0.15782547505064445 }} ,
				{ 16 ,  {0.17232989804553134 }} ,
				{ 24 ,  {0.013262526651046106 }} ,
				{ 26 ,  {-0.086320418715477 }} ,
				{ 27 ,  {-0.20054076666181742 }} ,
				{ 30 ,  {-0.30782047410806024 }} ,
				{ 31 ,  {-0.42328581273555754 }} ,
				{ 34 ,  {-0.05970133189111948 }} ,
				{ 51 ,  {-0.028482959392879693 }} ,
				{ 70 ,  {0.06621709569142416 }} ,
				{ 71 ,  {0.00638087158176032 }} ,
				{ 100 ,  {-0.0854371827468276 }} ,
				{ 101 ,  {-0.1281234148144722 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_5 <= 7.147500000000001 ) ? ( ( ( Feature_5 <= 6.665500000000001 ) ? ( ( ( Feature_7 <= 3.5949000000000004 ) ? ( 16 ) : ( ( ( Feature_5 <= 6.157500000000001 ) ? ( 34 ) : ( ( ( Feature_6 <= 37.95000000000001 ) ? ( 70 ) : ( 71 ) ) ) ) ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_4 <= 0.6635000000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_10 <= 17.850000000000005 ) ? ( 24 ) : ( ( ( Feature_2 <= 10.300000000000002 ) ? ( ( ( Feature_6 <= 65.35000000000001 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_10 <= 19.900000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_0 <= 6.881660000000001 ) ? ( 14 ) : ( ( ( Feature_0 <= 13.518950000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_10
	

	namespace LGBM_Tree_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.2781340370886028 }} ,
				{ 5 ,  {0.7071467785608201 }} ,
				{ 26 ,  {0.3151923488974571 }} ,
				{ 27 ,  {0.03415128705294236 }} ,
				{ 28 ,  {-0.08200439816713334 }} ,
				{ 29 ,  {-0.19069193697401457 }} ,
				{ 31 ,  {-0.38875666442124746 }} ,
				{ 48 ,  {0.14149669055705485 }} ,
				{ 51 ,  {-0.1063199974872448 }} ,
				{ 60 ,  {-0.29562854717175163 }} ,
				{ 61 ,  {-0.1934352187253535 }} ,
				{ 98 ,  {0.02077727831527591 }} ,
				{ 99 ,  {-0.04725643768161536 }} ,
				{ 100 ,  {0.00924349706619978 }} ,
				{ 202 ,  {-0.10163055506569368 }} ,
				{ 203 ,  {-0.039430530264973646 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_12 <= 5.155000000000001 ) ? ( ( ( Feature_5 <= 7.416000000000001 ) ? ( 4 ) : ( 5 ) ) ) : ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.61 ) ? ( ( ( Feature_12 <= 9.63 ) ? ( ( ( Feature_7 <= 4.4583 ) ? ( 48 ) : ( ( ( Feature_12 <= 7.4750000000000005 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( ( ( Feature_7 <= 4.433350000000002 ) ? ( ( ( Feature_4 <= 0.5350000000000001 ) ? ( 100 ) : ( ( ( Feature_4 <= 0.6010000000000001 ) ? ( 202 ) : ( 203 ) ) ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_2 <= 4.44 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6695000000000001 ) ? ( ( ( Feature_10 <= 19.900000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_4 <= 0.7155000000000001 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_11
	

	namespace LGBM_Tree_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.2642273319885135 }} ,
				{ 5 ,  {0.671789448601859 }} ,
				{ 26 ,  {0.29943273404240606 }} ,
				{ 27 ,  {0.032443723665631335 }} ,
				{ 28 ,  {-0.07642233864619181 }} ,
				{ 29 ,  {-0.17299898453056814 }} ,
				{ 31 ,  {-0.3610081508755684 }} ,
				{ 48 ,  {0.13442185714172766 }} ,
				{ 51 ,  {-0.10100399815925845 }} ,
				{ 60 ,  {-0.1824359984407502 }} ,
				{ 61 ,  {-0.2858220160007477 }} ,
				{ 98 ,  {0.019738414376042786 }} ,
				{ 99 ,  {-0.04489361587166787 }} ,
				{ 100 ,  {0.00878132206077377 }} ,
				{ 202 ,  {-0.09654902876527222 }} ,
				{ 203 ,  {-0.0374590038061142 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_12 <= 5.155000000000001 ) ? ( ( ( Feature_5 <= 7.416000000000001 ) ? ( 4 ) : ( 5 ) ) ) : ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.61 ) ? ( ( ( Feature_12 <= 9.63 ) ? ( ( ( Feature_7 <= 4.4583 ) ? ( 48 ) : ( ( ( Feature_12 <= 7.4750000000000005 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( ( ( Feature_7 <= 4.433350000000002 ) ? ( ( ( Feature_4 <= 0.5350000000000001 ) ? ( 100 ) : ( ( ( Feature_4 <= 0.6010000000000001 ) ? ( 202 ) : ( 203 ) ) ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_2 <= 4.44 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 60 ) : ( 61 ) ) ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_12
	

	namespace LGBM_Tree_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 6 ,  {0.2786734047390166 }} ,
				{ 7 ,  {0.5904384444157283 }} ,
				{ 17 ,  {0.08776424032720653 }} ,
				{ 18 ,  {0.2437588059306145 }} ,
				{ 19 ,  {0.08891570545046738 }} ,
				{ 20 ,  {-0.07260122081408134 }} ,
				{ 21 ,  {-0.1643490367010236 }} ,
				{ 23 ,  {-0.3429577400286993 }} ,
				{ 44 ,  {-0.16730254928270977 }} ,
				{ 45 ,  {-0.27153091568213245 }} ,
				{ 64 ,  {-0.07529557651307967 }} ,
				{ 66 ,  {-0.08012650850273315 }} ,
				{ 67 ,  {-0.13650642193853854 }} ,
				{ 130 ,  {0.04095101026845548 }} ,
				{ 262 ,  {0.009990429651478063 }} ,
				{ 263 ,  {-0.04740083498710936 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_5 <= 7.097500000000001 ) ? ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.531500000000001 ) ? ( ( ( Feature_4 <= 0.6190000000000001 ) ? ( ( ( Feature_10 <= 19.650000000000002 ) ? ( ( ( Feature_5 <= 5.925000000000002 ) ? ( 64 ) : ( ( ( Feature_6 <= 44.75000000000001 ) ? ( 130 ) : ( ( ( Feature_9 <= 298.00000000000006 ) ? ( 262 ) : ( 263 ) ) ) ) ) ) ) : ( ( ( Feature_6 <= 65.35000000000001 ) ? ( 66 ) : ( 67 ) ) ) ) ) : ( 17 ) ) ) : ( ( ( Feature_12 <= 5.410000000000001 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6070000000000001 ) ? ( ( ( Feature_0 <= 0.6473050000000001 ) ? ( 20 ) : ( 21 ) ) ) : ( ( ( Feature_0 <= 11.134250000000002 ) ? ( ( ( Feature_12 <= 19.080000000000002 ) ? ( 44 ) : ( 45 ) ) ) : ( 23 ) ) ) ) ) ) ) : ( ( ( Feature_5 <= 7.479500000000001 ) ? ( 6 ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_13
	

	namespace LGBM_Tree_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.48386052021613485 }} ,
				{ 9 ,  {0.2445928942750801 }} ,
				{ 14 ,  {-0.13008818203075365 }} ,
				{ 25 ,  {-0.09563842575097907 }} ,
				{ 26 ,  {-0.07045300084352495 }} ,
				{ 27 ,  {-0.1685366020087273 }} ,
				{ 30 ,  {-0.2536992394924164 }} ,
				{ 31 ,  {-0.35157553493976595 }} ,
				{ 32 ,  {0.01340988933807239 }} ,
				{ 33 ,  {-0.0769247608880202 }} ,
				{ 34 ,  {0.21765401376919313 }} ,
				{ 35 ,  {0.06472753661894991 }} ,
				{ 48 ,  {0.0493192545324564 }} ,
				{ 98 ,  {0.002516149924624534 }} ,
				{ 99 ,  {-0.07873551758405355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_12 <= 9.700000000000001 ) ? ( ( ( Feature_5 <= 7.147500000000001 ) ? ( ( ( Feature_9 <= 351.50000000000006 ) ? ( ( ( Feature_5 <= 6.472500000000001 ) ? ( ( ( Feature_10 <= 19.150000000000002 ) ? ( 32 ) : ( 33 ) ) ) : ( ( ( Feature_9 <= 264.50000000000006 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( 5 ) ) ) : ( ( ( Feature_4 <= 0.6635000000000001 ) ? ( ( ( Feature_12 <= 15.06 ) ? ( ( ( Feature_7 <= 4.433350000000002 ) ? ( ( ( Feature_10 <= 18.100000000000005 ) ? ( 48 ) : ( ( ( Feature_6 <= 68.75000000000001 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_10 <= 19.900000000000002 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_0 <= 6.881660000000001 ) ? ( 14 ) : ( ( ( Feature_0 <= 13.518950000000002 ) ? ( 30 ) : ( 31 ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_14
	

	namespace LGBM_Tree_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.22663972222799203 }} ,
				{ 5 ,  {0.5859696183885846 }} ,
				{ 26 ,  {0.258727479338646 }} ,
				{ 27 ,  {0.01936088986694813 }} ,
				{ 28 ,  {-0.06693035280704498 }} ,
				{ 29 ,  {-0.1537446166574955 }} ,
				{ 30 ,  {-0.3342779865860939 }} ,
				{ 48 ,  {0.12244915100543395 }} ,
				{ 50 ,  {-0.0953269116114825 }} ,
				{ 62 ,  {-0.16274736989289523 }} ,
				{ 63 ,  {-0.24910367338553718 }} ,
				{ 98 ,  {0.015637456805065827 }} ,
				{ 99 ,  {-0.04485151037857261 }} ,
				{ 103 ,  {-0.06892213628774412 }} ,
				{ 204 ,  {0.024623556025326253 }} ,
				{ 205 ,  {-0.04231715954485394 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = ( ( Feature_12 <= 5.155000000000001 ) ? ( ( ( Feature_5 <= 7.416000000000001 ) ? ( 4 ) : ( 5 ) ) ) : ( ( ( Feature_12 <= 14.805000000000001 ) ? ( ( ( Feature_5 <= 6.61 ) ? ( ( ( Feature_12 <= 9.63 ) ? ( ( ( Feature_7 <= 4.4583 ) ? ( 48 ) : ( ( ( Feature_12 <= 7.550000000000001 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( ( ( Feature_5 <= 5.851500000000001 ) ? ( 50 ) : ( ( ( Feature_6 <= 74.35000000000001 ) ? ( ( ( Feature_10 <= 18.650000000000002 ) ? ( 204 ) : ( 205 ) ) ) : ( 103 ) ) ) ) ) ) ) : ( ( ( Feature_2 <= 4.44 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( ( ( Feature_4 <= 0.6695000000000001 ) ? ( ( ( Feature_10 <= 19.900000000000002 ) ? ( 28 ) : ( 29 ) ) ) : ( ( ( Feature_4 <= 0.6965 ) ? ( 30 ) : ( ( ( Feature_0 <= 8.024135000000001 ) ? ( 62 ) : ( 63 ) ) ) ) ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
		std::vector<tTable> lTreeScores = { 
			LGBM_Tree_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			LGBM_Tree_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12)
		};

		tTable lAggregatedTable = aggregate_lgb_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/boston.csv");
	return 0;
}
