// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : LGBMRegressor
// Dataset : diabetes

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_LGBMRegressor_diabetes.exe ml2cpp-demo_LGBMRegressor_diabetes.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace LGBM_Tree_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {154.49102431345986 }} ,
				{ 7 ,  {158.96734010293355 }} ,
				{ 16 ,  {151.0152841818221 }} ,
				{ 18 ,  {150.29365589272092 }} ,
				{ 19 ,  {151.09140025234595 }} ,
				{ 24 ,  {152.9949716817791 }} ,
				{ 26 ,  {155.85330501552795 }} ,
				{ 27 ,  {158.46997168219463 }} ,
				{ 34 ,  {151.96747168219463 }} ,
				{ 35 ,  {153.2774716821946 }} ,
				{ 50 ,  {154.37291285831458 }} ,
				{ 51 ,  {156.01602431314615 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_8 <= -0.03262011609449084 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.05738495822316491 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.022912041280962248 ) ? ( 24 ) : ( ( ( Feature_0 <= 0.007199329599757851 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( ( ( Feature_2 <= 0.013194663194048 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_0
	

	namespace LGBM_Tree_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.39650137447997147 }} ,
				{ 13 ,  {2.64865423573388 }} ,
				{ 14 ,  {3.03571115732193 }} ,
				{ 15 ,  {5.617542032762008 }} ,
				{ 16 ,  {-2.9054516600444913 }} ,
				{ 18 ,  {-3.590998561131327 }} ,
				{ 19 ,  {-2.833141436321395 }} ,
				{ 24 ,  {-1.024748606635974 }} ,
				{ 34 ,  {-2.0008735167980194 }} ,
				{ 35 ,  {-0.756373634338379 }} ,
				{ 50 ,  {-0.0882884647165026 }} ,
				{ 51 ,  {1.8749563907696443 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_8 <= -0.03262011609449084 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.042834495225772755 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.022912041280962248 ) ? ( 24 ) : ( ( ( Feature_0 <= 0.007199329599757851 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_2 <= 0.07193542122055706 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_1
	

	namespace LGBM_Tree_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.37667629576631284 }} ,
				{ 7 ,  {4.42247857671035 }} ,
				{ 16 ,  {-2.760179137066007 }} ,
				{ 18 ,  {-3.4114486989222073 }} ,
				{ 19 ,  {-2.69148428099496 }} ,
				{ 24 ,  {-0.9409569753540886 }} ,
				{ 26 ,  {1.5582353353500367 }} ,
				{ 27 ,  {4.039230431318283 }} ,
				{ 34 ,  {-1.9008299243450164 }} ,
				{ 35 ,  {-0.7185548543930054 }} ,
				{ 51 ,  {-0.2638456737995148 }} ,
				{ 100 ,  {0.3278233327648856 }} ,
				{ 101 ,  {2.5277667505987758 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_8 <= -0.03262011609449084 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.05738495822316491 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.020756417133200446 ) ? ( 24 ) : ( ( ( Feature_4 <= 0.04865331950412991 ) ? ( ( ( Feature_0 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_2 <= 0.013194663194048 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_2
	

	namespace LGBM_Tree_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.3578425559950502 }} ,
				{ 13 ,  {2.4804026696611854 }} ,
				{ 14 ,  {5.046654764811198 }} ,
				{ 15 ,  {2.3588869998852413 }} ,
				{ 16 ,  {-2.6221702311187984 }} ,
				{ 18 ,  {-3.2408761838549065 }} ,
				{ 19 ,  {-2.556910140173776 }} ,
				{ 25 ,  {-1.2782118737697603 }} ,
				{ 34 ,  {-1.805788359642029 }} ,
				{ 35 ,  {-0.682627180814743 }} ,
				{ 48 ,  {-0.6673168671131134 }} ,
				{ 98 ,  {0.40024313971400266 }} ,
				{ 99 ,  {2.141424208134413 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_8 <= -0.03262011609449084 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.04606793144741546 ) ? ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( ( ( Feature_4 <= 0.04865331950412991 ) ? ( ( ( Feature_0 <= -0.010963362655339919 ) ? ( 48 ) : ( ( ( Feature_2 <= -0.007822672246629598 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_5 <= 0.022328831438891104 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_3
	

	namespace LGBM_Tree_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.33995041094328227 }} ,
				{ 7 ,  {4.782801995674769 }} ,
				{ 16 ,  {-2.4910617059096696 }} ,
				{ 18 ,  {-2.516725219262613 }} ,
				{ 19 ,  {-3.16864162560167 }} ,
				{ 24 ,  {-0.8933768967787424 }} ,
				{ 26 ,  {1.5184456860025726 }} ,
				{ 27 ,  {3.8041203276469155 }} ,
				{ 34 ,  {-1.7154989665746692 }} ,
				{ 35 ,  {-0.6484958505630494 }} ,
				{ 51 ,  {2.291787776080045 }} ,
				{ 100 ,  {1.3108158826828005 }} ,
				{ 101 ,  {-0.47192815851282194 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_5 <= -0.009455737432746464 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.020756417133200446 ) ? ( 24 ) : ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= -0.0031487509578837446 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_4
	

	namespace LGBM_Tree_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.22217052586980768 }} ,
				{ 13 ,  {2.1855903277794524 }} ,
				{ 14 ,  {4.359449644088746 }} ,
				{ 15 ,  {2.1670745849609374 }} ,
				{ 16 ,  {-2.50848767220974 }} ,
				{ 18 ,  {-2.941844959321775 }} ,
				{ 19 ,  {-2.245437099315502 }} ,
				{ 24 ,  {-0.8065089475748869 }} ,
				{ 34 ,  {-1.6297239962220194 }} ,
				{ 35 ,  {-0.6160710144042969 }} ,
				{ 50 ,  {-0.18441972136497498 }} ,
				{ 51 ,  {1.4932738213828118 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.0010539205031971832 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( ( ( Feature_0 <= 0.010831868050777417 ) ? ( 34 ) : ( 35 ) ) ) ) ) : ( ( ( Feature_8 <= -0.03262011609449084 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.042834495225772755 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.020756417133200446 ) ? ( 24 ) : ( ( ( Feature_0 <= 0.007199329599757851 ) ? ( 50 ) : ( 51 ) ) ) ) ) : ( 13 ) ) ) : ( ( ( Feature_5 <= 0.022328831438891104 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_5
	

	namespace LGBM_Tree_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.211062013136374 }} ,
				{ 7 ,  {4.3542511970996856 }} ,
				{ 16 ,  {-2.343231020442077 }} ,
				{ 17 ,  {-3.1192486989498143 }} ,
				{ 25 ,  {1.6666386078905178 }} ,
				{ 26 ,  {1.3196957709112516 }} ,
				{ 27 ,  {3.4796942160679745 }} ,
				{ 36 ,  {-1.6204421186447142 }} ,
				{ 37 ,  {-2.750308445325265 }} ,
				{ 38 ,  {-0.39959341826893036 }} ,
				{ 39 ,  {-1.8827151072025299 }} ,
				{ 49 ,  {-0.954588280226055 }} ,
				{ 96 ,  {1.387149403350694 }} ,
				{ 97 ,  {0.06463616862893105 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.0010539205031971832 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_8 <= -0.04327875374419265 ) ? ( ( ( Feature_4 <= -0.03390385198793789 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_3 <= -0.01198254016585555 ) ? ( ( ( Feature_9 <= -0.040427713191396146 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_8 <= -0.021952926435010244 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= -0.0031487509578837446 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( 97 ) ) ) : ( 49 ) ) ) : ( 25 ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_6
	

	namespace LGBM_Tree_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.2146135985851288 }} ,
				{ 7 ,  {4.136538574695588 }} ,
				{ 16 ,  {-2.4125173440685983 }} ,
				{ 17 ,  {-1.0882704568875803 }} ,
				{ 18 ,  {-2.816568328274621 }} ,
				{ 19 ,  {-2.2140276947021484 }} ,
				{ 25 ,  {1.5833066595925225 }} ,
				{ 26 ,  {1.0772228748710067 }} ,
				{ 27 ,  {3.3057094867412857 }} ,
				{ 96 ,  {1.15195819095329 }} ,
				{ 97 ,  {-0.3663129128515721 }} ,
				{ 98 ,  {-1.4493305605649949 }} ,
				{ 99 ,  {0.03812645673751831 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.010411696605265933 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_0 <= 0.0035667911487382957 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_5 <= 0.021389386053522454 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_7
	

	namespace LGBM_Tree_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.2781665965130455 }} ,
				{ 7 ,  {3.9468243946631754 }} ,
				{ 17 ,  {-0.7458762217064699 }} ,
				{ 18 ,  {-2.023190445432792 }} ,
				{ 19 ,  {-2.6645777940750124 }} ,
				{ 24 ,  {-0.8572845257245577 }} ,
				{ 26 ,  {1.020382727327801 }} ,
				{ 27 ,  {3.0696338949532347 }} ,
				{ 32 ,  {-1.511051419377327 }} ,
				{ 33 ,  {-2.2907865957780316 }} ,
				{ 51 ,  {-0.40241824558803013 }} ,
				{ 100 ,  {2.447789607048035 }} ,
				{ 101 ,  {0.5880075864493847 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_6 <= 0.0026196268990615044 ) ? ( ( ( Feature_2 <= -0.03584578616753304 ) ? ( 32 ) : ( 33 ) ) ) : ( 17 ) ) ) : ( ( ( Feature_5 <= -0.009455737432746464 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_2 <= -0.022912041280962248 ) ? ( 24 ) : ( ( ( Feature_4 <= 0.05002927236233106 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 100 ) : ( 101 ) ) ) : ( 51 ) ) ) ) ) : ( ( ( Feature_2 <= 0.013194663194048 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_8
	

	namespace LGBM_Tree_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.18997461795806886 }} ,
				{ 7 ,  {3.739707843780518 }} ,
				{ 16 ,  {-2.226149979564879 }} ,
				{ 17 ,  {-0.9590628855937237 }} ,
				{ 18 ,  {-2.5629998385906223 }} ,
				{ 19 ,  {-1.984207925796509 }} ,
				{ 25 ,  {1.4837419094862763 }} ,
				{ 26 ,  {0.9487237815503721 }} ,
				{ 27 ,  {3.014528377239521 }} ,
				{ 96 ,  {1.0697267015775045 }} ,
				{ 97 ,  {-0.34137846147641543 }} ,
				{ 98 ,  {-1.373930842280388 }} ,
				{ 99 ,  {0.031372507810592656 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.010411696605265933 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_0 <= 0.0035667911487382957 ) ? ( 18 ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_5 <= 0.021389386053522454 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_9
	

	namespace LGBM_Tree_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.6028423468271892 }} ,
				{ 13 ,  {1.8546615235945758 }} ,
				{ 14 ,  {3.780128524921559 }} ,
				{ 15 ,  {1.4848123118281364 }} ,
				{ 16 ,  {-1.438541260957718 }} ,
				{ 17 ,  {-2.680873932208746 }} ,
				{ 25 ,  {-1.3950972390174865 }} ,
				{ 36 ,  {-1.7935660815238954 }} ,
				{ 37 ,  {-0.3151700369812347 }} ,
				{ 38 ,  {-2.5768017944835484 }} ,
				{ 39 ,  {-1.1980491971969605 }} ,
				{ 48 ,  {-0.7324454605579377 }} ,
				{ 98 ,  {0.3521541638672352 }} ,
				{ 99 ,  {1.7486850143410266 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.026667314117559255 ) ? ( ( ( Feature_8 <= -0.04327875374419265 ) ? ( ( ( Feature_0 <= -0.036391131812476794 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= -0.038001410315294845 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_0 <= 0.021729483403836052 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.04606793144741546 ) ? ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( ( ( Feature_4 <= 0.04865331950412991 ) ? ( ( ( Feature_0 <= -0.010963362655339919 ) ? ( 48 ) : ( ( ( Feature_2 <= -0.007822672246629598 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( 13 ) ) ) : ( ( ( Feature_5 <= 0.022328831438891104 ) ? ( 14 ) : ( 15 ) ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_10
	

	namespace LGBM_Tree_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.1815529763698578 }} ,
				{ 7 ,  {3.415976930618286 }} ,
				{ 16 ,  {-2.0291416892298946 }} ,
				{ 17 ,  {-0.8344681175173941 }} ,
				{ 19 ,  {-2.5323369003477554 }} ,
				{ 25 ,  {1.364739485360958 }} ,
				{ 26 ,  {0.8662844134701623 }} ,
				{ 27 ,  {2.7516970194303076 }} ,
				{ 36 ,  {-1.6302422994375227 }} ,
				{ 37 ,  {-2.180033823251724 }} ,
				{ 96 ,  {1.0164934522575801 }} ,
				{ 97 ,  {-0.36965566223176816 }} ,
				{ 98 ,  {-1.3222833389043809 }} ,
				{ 99 ,  {-0.0036031734943389893 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.010411696605265933 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_2 <= -0.026684383539545397 ) ? ( ( ( Feature_9 <= -0.023859285532057246 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.06977979707279526 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_5 <= 0.021389386053522454 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_11
	

	namespace LGBM_Tree_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.5588422581001565 }} ,
				{ 7 ,  {2.777959238541754 }} ,
				{ 12 ,  {-0.5991753652195135 }} ,
				{ 16 ,  {-1.2849613463878633 }} ,
				{ 17 ,  {-2.458157257879934 }} ,
				{ 26 ,  {2.150735145735164 }} ,
				{ 36 ,  {-1.6171157002449037 }} ,
				{ 37 ,  {-0.24804111598311246 }} ,
				{ 38 ,  {-2.3789717765081497 }} ,
				{ 39 ,  {-1.0898066782951357 }} ,
				{ 55 ,  {-0.2751157398980397 }} ,
				{ 108 ,  {0.26546413794807766 }} ,
				{ 109 ,  {1.6163825199521822 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.026667314117559255 ) ? ( ( ( Feature_8 <= -0.04327875374419265 ) ? ( ( ( Feature_0 <= -0.036391131812476794 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= -0.038001410315294845 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_0 <= 0.021729483403836052 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_3 <= 0.059170120901146504 ) ? ( ( ( Feature_2 <= -0.020756417133200446 ) ? ( 12 ) : ( ( ( Feature_6 <= -0.045241664554070395 ) ? ( 26 ) : ( ( ( Feature_4 <= 0.05002927236233106 ) ? ( ( ( Feature_0 <= 1.0000000180025095e-35 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_12
	

	namespace LGBM_Tree_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.17288845032453537 }} ,
				{ 7 ,  {3.264838948457138 }} ,
				{ 16 ,  {-1.8500154427908087 }} ,
				{ 17 ,  {-0.7231683963053936 }} ,
				{ 19 ,  {-2.3397705884206865 }} ,
				{ 25 ,  {1.2504374160298282 }} ,
				{ 26 ,  {0.7499283547754642 }} ,
				{ 27 ,  {2.520111906969989 }} ,
				{ 36 ,  {-1.463226389884949 }} ,
				{ 37 ,  {-1.9809817671775818 }} ,
				{ 96 ,  {0.9566881444719103 }} ,
				{ 97 ,  {-0.37359617104132975 }} ,
				{ 98 ,  {-1.2731814825534822 }} ,
				{ 99 ,  {-0.030035514831542973 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= -0.010411696605265933 ) ? ( ( ( Feature_2 <= 0.006188884713822105 ) ? ( ( ( Feature_6 <= 0.021027815919496855 ) ? ( ( ( Feature_9 <= -0.032143499361726696 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_2 <= -0.026684383539545397 ) ? ( ( ( Feature_9 <= -0.023859285532057246 ) ? ( 36 ) : ( 37 ) ) ) : ( 19 ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_2 <= 0.07193542122055706 ) ? ( ( ( Feature_3 <= 0.036791461391860805 ) ? ( ( ( Feature_9 <= 0.029988104360793955 ) ? ( ( ( Feature_9 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( 96 ) : ( 97 ) ) ) : ( ( ( Feature_5 <= 0.021389386053522454 ) ? ( 98 ) : ( 99 ) ) ) ) ) : ( 25 ) ) ) : ( ( ( Feature_8 <= 0.04533348837519321 ) ? ( 26 ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_13
	

	namespace LGBM_Tree_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {0.5179142113085147 }} ,
				{ 7 ,  {2.532556216810879 }} ,
				{ 12 ,  {-0.5721415992577871 }} ,
				{ 16 ,  {-1.1468252396583558 }} ,
				{ 17 ,  {-2.2547116487256944 }} ,
				{ 26 ,  {1.997733380140797 }} ,
				{ 36 ,  {-0.16554352850527376 }} ,
				{ 37 ,  {-1.501022576093674 }} ,
				{ 38 ,  {-2.197298436505454 }} ,
				{ 39 ,  {-0.9923231291770936 }} ,
				{ 55 ,  {-0.3038919198971528 }} ,
				{ 108 ,  {0.19058373078056004 }} ,
				{ 109 ,  {1.499976420402527 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= 0.026667314117559255 ) ? ( ( ( Feature_8 <= -0.04327875374419265 ) ? ( ( ( Feature_0 <= -0.036391131812476794 ) ? ( 16 ) : ( 17 ) ) ) : ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_6 <= 0.05048091835219346 ) ? ( 36 ) : ( 37 ) ) ) : ( ( ( Feature_0 <= 0.021729483403836052 ) ? ( 38 ) : ( 39 ) ) ) ) ) ) ) : ( 5 ) ) ) : ( ( ( Feature_3 <= 0.059170120901146504 ) ? ( ( ( Feature_2 <= -0.020756417133200446 ) ? ( 12 ) : ( ( ( Feature_6 <= -0.045241664554070395 ) ? ( 26 ) : ( ( ( Feature_4 <= 0.05002927236233106 ) ? ( ( ( Feature_0 <= 1.0000000180025095e-35 ) ? ( 108 ) : ( 109 ) ) ) : ( 55 ) ) ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_14
	

	namespace LGBM_Tree_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 7 ,  {3.0287841545210945 }} ,
				{ 9 ,  {0.02443707585334778 }} ,
				{ 10 ,  {-0.4934547875866746 }} ,
				{ 11 ,  {1.9271709720293684 }} ,
				{ 12 ,  {2.1035590476003185 }} ,
				{ 16 ,  {-0.5353812475096096 }} ,
				{ 27 ,  {-0.29166953462746836 }} ,
				{ 35 ,  {-2.5400077633235765 }} ,
				{ 52 ,  {0.19458491639657455 }} ,
				{ 53 ,  {1.2758478102476702 }} ,
				{ 69 ,  {-1.8186673514353924 }} ,
				{ 136 ,  {-1.6303475031485926 }} ,
				{ 137 ,  {-0.36591363367827046 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = ( ( Feature_8 <= 0.016671042607360905 ) ? ( ( ( Feature_2 <= 0.005111072639941211 ) ? ( ( ( Feature_7 <= 0.03357083646020811 ) ? ( ( ( Feature_5 <= -0.047190127078385095 ) ? ( 16 ) : ( ( ( Feature_2 <= -0.012133920542153198 ) ? ( ( ( Feature_1 <= 1.0000000180025095e-35 ) ? ( ( ( Feature_2 <= -0.038001410315294845 ) ? ( 136 ) : ( 137 ) ) ) : ( 69 ) ) ) : ( 35 ) ) ) ) ) : ( 9 ) ) ) : ( ( ( Feature_3 <= 0.016134237177800204 ) ? ( 10 ) : ( 11 ) ) ) ) ) : ( ( ( Feature_3 <= 0.06089155624801466 ) ? ( ( ( Feature_6 <= -0.045241664554070395 ) ? ( 12 ) : ( ( ( Feature_4 <= 0.04865331950412991 ) ? ( ( ( Feature_6 <= -0.023151837729547996 ) ? ( 52 ) : ( 53 ) ) ) : ( 27 ) ) ) ) ) : ( 7 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace LGBM_Tree_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			LGBM_Tree_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			LGBM_Tree_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_lgb_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/diabetes.csv");
	return 0;
}
