// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SGDClassifier
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SGDClassifier_FourClass_10.exe ml2cpp-demo_SGDClassifier_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		std::any score_0 = -12.375726415074062 * Feature_0 + -12.933541403763863 * Feature_1 + 3.1368839091490197 * Feature_2 + -4.282754505667559 * Feature_3 + 15.300469806822848 * Feature_4 + -31.121270772515192 * Feature_5 + 0.37247663334074654 * Feature_6 + 14.340256369404452 * Feature_7 + 8.352986898925753 * Feature_8 + 2.9003648690699557 * Feature_9 + -50.87993711928817;

		std::any score_1 = 1.9814436391623054 * Feature_0 + 23.762568721425225 * Feature_1 + 4.847186455012002 * Feature_2 + 28.48499798761651 * Feature_3 + 8.944262074522017 * Feature_4 + -4.278931423499031 * Feature_5 + -9.613570270246996 * Feature_6 + 10.665315517304538 * Feature_7 + -9.016702918330552 * Feature_8 + 10.524294281418097 * Feature_9 + -65.44620546155673;

		std::any score_2 = -15.831527648601812 * Feature_0 + -28.14187912778253 * Feature_1 + -21.9872600347505 * Feature_2 + -20.300721857066208 * Feature_3 + -49.32327418269164 * Feature_4 + 10.324559648737276 * Feature_5 + 1.2851824723210232 * Feature_6 + 18.90446874462234 * Feature_7 + 18.43330628409076 * Feature_8 + 2.2049877460189578 * Feature_9 + -59.82039485992377;

		std::any score_3 = -20.41862468079258 * Feature_0 + 54.3466398546702 * Feature_1 + -11.160841136751662 * Feature_2 + 16.0950754843288 * Feature_3 + -15.337711194001304 * Feature_4 + 27.331423238957267 * Feature_5 + 1.3936557086873465 * Feature_6 + -43.021914921669456 * Feature_7 + -16.67254987702921 * Feature_8 + -4.137497467432553 * Feature_9 + -138.85391137636455;


		tTable lTable;

		lTable["Score"] = { 
			score_0,
			score_1,
			score_2,
			score_3 
		} ;
		lTable["Proba"] = { 
			std::any(),
			std::any(),
			std::any(),
			std::any() 
		} ;
		int lBestClass = get_arg_max( lTable["Score"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
