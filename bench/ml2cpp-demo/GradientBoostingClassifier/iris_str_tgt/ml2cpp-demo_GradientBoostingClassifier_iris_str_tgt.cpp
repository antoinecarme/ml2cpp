// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : GradientBoostingClassifier
// Dataset : iris_str_tgt

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_GradientBoostingClassifier_iris_str_tgt.exe ml2cpp-demo_GradientBoostingClassifier_iris_str_tgt.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::string> get_classes(){
		std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };

		return lClasses;
	}

	namespace SubModel_0_0 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {2.16216216 }} ,
				{ 2 ,  {-0.96385542 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.800000011920929) ? ( 1 ) : ( 2 );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0_0
	

	namespace SubModel_0_1 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {-1. }} ,
				{ 4 ,  {2. }} ,
				{ 5 ,  {1.11022302e-16 }} ,
				{ 7 ,  {0.28571429 }} ,
				{ 8 ,  {-1. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 1.75) ? ( 7 ) : ( 8 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0_1
	

	namespace SubModel_0_2 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {-1.03896104 }} ,
				{ 4 ,  {1.86046512 }} ,
				{ 5 ,  {-1.03896104 }} ,
				{ 8 ,  {-0.3141045 }} ,
				{ 9 ,  {1.86046512 }} ,
				{ 10 ,  {1.86046512 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 2 ) : ( (Feature_1 <= 3.100000023841858) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_3 <= 1.75) ? ( (Feature_2 <= 5.049999952316284) ? ( 8 ) : ( 9 ) ) : ( 10 ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0_2
	

	namespace SubModel_1_0 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.75454009 }} ,
				{ 4 ,  {-0.92202182 }} ,
				{ 5 ,  {-0.92842907 }} ,
				{ 7 ,  {-0.90765302 }} ,
				{ 8 ,  {-0.92125405 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_3 <= 0.800000011920929) ? ( 1 ) : ( (Feature_2 <= 5.049999952316284) ? ( (Feature_2 <= 4.75) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 1.699999988079071) ? ( 7 ) : ( 8 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1_0
	

	namespace SubModel_1_1 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {-0.95158495 }} ,
				{ 4 ,  {-0.95158495 }} ,
				{ 5 ,  {-0.95158495 }} ,
				{ 8 ,  {1.65401401 }} ,
				{ 9 ,  {0.00602282 }} ,
				{ 11 ,  {0.25870879 }} ,
				{ 12 ,  {-0.94923152 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( (Feature_0 <= 4.950000047683716) ? ( 2 ) : ( (Feature_0 <= 5.299999952316284) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 8 ) : ( 9 ) ) : ( (Feature_3 <= 1.75) ? ( 11 ) : ( 12 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1_1
	

	namespace SubModel_1_2 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-0.98128532 }} ,
				{ 4 ,  {-0.98001813 }} ,
				{ 6 ,  {1.6140383 }} ,
				{ 7 ,  {-1.01772285 }} ,
				{ 10 ,  {-1.03826103 }} ,
				{ 11 ,  {1.15700254 }} ,
				{ 13 ,  {1.56504152 }} ,
				{ 14 ,  {1.56504152 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( (Feature_2 <= 2.449999988079071) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 3.100000023841858) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_3 <= 1.75) ? ( (Feature_2 <= 4.950000047683716) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 5.8500001430511475) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1_2
	

	namespace SubModel_2_0 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {1.49534567 }} ,
				{ 4 ,  {-0.88635766 }} ,
				{ 5 ,  {-0.89716752 }} ,
				{ 7 ,  {-0.87045048 }} ,
				{ 8 ,  {-0.88519552 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_2 <= 5.049999952316284) ? ( (Feature_2 <= 4.75) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 1.699999988079071) ? ( 7 ) : ( 8 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				lNodeValue [ 0 ],
				0.0,
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2_0
	

	namespace SubModel_2_1 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 1 ,  {-0.91077303 }} ,
				{ 4 ,  {1.42741891 }} ,
				{ 5 ,  {0.01267884 }} ,
				{ 7 ,  {0.23650798 }} ,
				{ 8 ,  {-0.90726123 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 2.449999988079071) ? ( 1 ) : ( (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 1.75) ? ( 7 ) : ( 8 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				lNodeValue [ 0 ],
				0.0 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2_1
	

	namespace SubModel_2_2 {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-0.9339045 }} ,
				{ 4 ,  {-0.93201272 }} ,
				{ 6 ,  {1.44057143 }} ,
				{ 7 ,  {-0.99701633 }} ,
				{ 10 ,  {-0.33317964 }} ,
				{ 11 ,  {1.50276426 }} ,
				{ 13 ,  {1.36602421 }} ,
				{ 14 ,  {1.36626613 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 4.8500001430511475) ? ( (Feature_3 <= 1.6500000357627869) ? ( (Feature_3 <= 0.800000011920929) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 3.100000023841858) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_3 <= 1.75) ? ( (Feature_2 <= 5.049999952316284) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 5.049999952316284) ? ( 13 ) : ( 14 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			auto lClasses = get_classes();
	
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				0.0,
				0.0,
				lNodeValue [ 0 ] 
			} ;
			lTable["Proba"] = { 
				std::any(),
				std::any(),
				std::any() 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2_2
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
			"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
			"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		auto lClasses = get_classes();

		std::vector<tTable> lTreeScores = { 
			SubModel_0_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2_0::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_gb_scores(lTreeScores, {"Proba", "Score"});

		auto lLogSumExp = ln( + exp(ln(0.30833333333333335) + 0.1 * lAggregatedTable["Score"][ 0 ]) + exp(ln(0.3333333333333333) + 0.1 * lAggregatedTable["Score"][ 1 ]) + exp(ln(0.35833333333333334) + 0.1 * lAggregatedTable["Score"][ 2 ]));

		lAggregatedTable["Score"][ 0 ] = exp(ln(0.30833333333333335) + 0.1 * lAggregatedTable["Score"][ 0 ] - lLogSumExp);

		lAggregatedTable["Score"][ 1 ] = exp(ln(0.3333333333333333) + 0.1 * lAggregatedTable["Score"][ 1 ] - lLogSumExp);

		lAggregatedTable["Score"][ 2 ] = exp(ln(0.35833333333333334) + 0.1 * lAggregatedTable["Score"][ 2 ] - lLogSumExp);

		tTable lSoftMaxTable = soft_max( lAggregatedTable );

		lSoftMaxTable[ "Score" ] = lAggregatedTable[ "Score" ];


		tTable lTable = lSoftMaxTable;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/iris_str_tgt.csv");
	return 0;
}
