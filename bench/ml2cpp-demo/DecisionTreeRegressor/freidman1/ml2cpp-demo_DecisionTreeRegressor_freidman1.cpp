// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_freidman1.exe ml2cpp-demo_DecisionTreeRegressor_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 4 ,  {12.76012926 }} ,
			{ 7 ,  {12.0711718 }} ,
			{ 9 ,  {9.73504122 }} ,
			{ 10 ,  {10.04520361 }} ,
			{ 13 ,  {5.293284 }} ,
			{ 15 ,  {5.79437904 }} ,
			{ 16 ,  {6.24571025 }} ,
			{ 19 ,  {6.98004624 }} ,
			{ 20 ,  {6.86145372 }} ,
			{ 23 ,  {8.24017885 }} ,
			{ 24 ,  {8.0628501 }} ,
			{ 26 ,  {7.73242981 }} ,
			{ 27 ,  {7.55699808 }} ,
			{ 32 ,  {10.48306677 }} ,
			{ 37 ,  {12.10988659 }} ,
			{ 38 ,  {12.123142 }} ,
			{ 40 ,  {11.78982164 }} ,
			{ 41 ,  {11.77602305 }} ,
			{ 42 ,  {11.31351814 }} ,
			{ 43 ,  {12.83034463 }} ,
			{ 45 ,  {10.2020931 }} ,
			{ 46 ,  {10.59689049 }} ,
			{ 47 ,  {8.89707415 }} ,
			{ 51 ,  {14.77256375 }} ,
			{ 52 ,  {14.0511849 }} ,
			{ 53 ,  {13.17420206 }} ,
			{ 55 ,  {15.92255811 }} ,
			{ 57 ,  {17.31914707 }} ,
			{ 58 ,  {18.28251507 }} ,
			{ 62 ,  {11.38099315 }} ,
			{ 63 ,  {13.11975672 }} ,
			{ 66 ,  {16.08254262 }} ,
			{ 68 ,  {16.3247696 }} ,
			{ 69 ,  {16.30255672 }} ,
			{ 70 ,  {14.46699637 }} ,
			{ 74 ,  {18.33205802 }} ,
			{ 75 ,  {18.4937214 }} ,
			{ 76 ,  {18.00761757 }} ,
			{ 77 ,  {23.6939704 }} ,
			{ 81 ,  {15.54179787 }} ,
			{ 83 ,  {7.21944335 }} ,
			{ 85 ,  {10.18163117 }} ,
			{ 86 ,  {10.13178962 }} ,
			{ 90 ,  {16.0096116 }} ,
			{ 91 ,  {16.30127921 }} ,
			{ 93 ,  {15.70652198 }} ,
			{ 94 ,  {15.70100345 }} ,
			{ 96 ,  {18.25069552 }} ,
			{ 97 ,  {17.89244708 }} ,
			{ 101 ,  {15.30848399 }} ,
			{ 102 ,  {14.53624519 }} ,
			{ 103 ,  {12.42341176 }} ,
			{ 109 ,  {18.23761382 }} ,
			{ 110 ,  {18.10948375 }} ,
			{ 114 ,  {20.06970209 }} ,
			{ 115 ,  {19.95894273 }} ,
			{ 116 ,  {20.19903361 }} ,
			{ 117 ,  {19.36426348 }} ,
			{ 119 ,  {19.59215343 }} ,
			{ 122 ,  {16.91440831 }} ,
			{ 124 ,  {17.36059041 }} ,
			{ 126 ,  {17.51855413 }} ,
			{ 127 ,  {17.4514578 }} ,
			{ 130 ,  {17.80609749 }} ,
			{ 131 ,  {17.954677 }} ,
			{ 132 ,  {18.25024804 }} ,
			{ 134 ,  {23.18131441 }} ,
			{ 135 ,  {20.62985591 }} ,
			{ 139 ,  {19.30378831 }} ,
			{ 143 ,  {21.34099337 }} ,
			{ 144 ,  {21.77400035 }} ,
			{ 145 ,  {20.70189537 }} ,
			{ 147 ,  {23.76092016 }} ,
			{ 149 ,  {22.30975449 }} ,
			{ 151 ,  {22.76939497 }} ,
			{ 152 ,  {23.03027937 }} ,
			{ 154 ,  {25.24805848 }} ,
			{ 155 ,  {24.71333827 }} ,
			{ 157 ,  {18.9003877 }} ,
			{ 158 ,  {17.41761148 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_4 <= 0.6678532958030701) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_8 <= 0.14137074537575245) ? ( 4 ) : ( (Feature_5 <= 0.1925923340022564) ? ( (Feature_4 <= 0.27703479677438736) ? ( 7 ) : ( (Feature_3 <= 0.1894641350954771) ? ( 9 ) : ( 10 ) ) ) : ( (Feature_3 <= 0.09447410702705383) ? ( (Feature_2 <= 0.5338698327541351) ? ( 13 ) : ( (Feature_5 <= 0.378505602478981) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_5 <= 0.6174597442150116) ? ( (Feature_5 <= 0.39834147691726685) ? ( 19 ) : ( 20 ) ) : ( (Feature_8 <= 0.5502381473779678) ? ( (Feature_6 <= 0.39417441189289093) ? ( 23 ) : ( 24 ) ) : ( (Feature_4 <= 0.5001286119222641) ? ( 26 ) : ( 27 ) ) ) ) ) ) ) : ( (Feature_1 <= 0.24637049436569214) ? ( (Feature_5 <= 0.9225369095802307) ? ( (Feature_9 <= 0.8895005583763123) ? ( (Feature_2 <= 0.09128302335739136) ? ( 32 ) : ( (Feature_4 <= 0.6291640996932983) ? ( (Feature_5 <= 0.8189209997653961) ? ( (Feature_6 <= 0.18259304761886597) ? ( (Feature_8 <= 0.7472862005233765) ? ( 37 ) : ( 38 ) ) : ( (Feature_3 <= 0.7136146128177643) ? ( 40 ) : ( 41 ) ) ) : ( 42 ) ) : ( 43 ) ) ) : ( (Feature_4 <= 0.5237888693809509) ? ( 45 ) : ( 46 ) ) ) : ( 47 ) ) : ( (Feature_0 <= 0.5413242876529694) ? ( (Feature_1 <= 0.3046325445175171) ? ( (Feature_7 <= 0.5161080565303564) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (Feature_2 <= 0.45538998395204544) ? ( 55 ) : ( (Feature_4 <= 0.2480442076921463) ? ( 57 ) : ( 58 ) ) ) ) ) ) : ( (Feature_3 <= 0.6619341671466827) ? ( (Feature_8 <= 0.3244403786957264) ? ( (Feature_1 <= 0.2373416405171156) ? ( 62 ) : ( 63 ) ) : ( (Feature_8 <= 0.7667050063610077) ? ( (Feature_7 <= 0.6441303193569183) ? ( 66 ) : ( (Feature_8 <= 0.7098629474639893) ? ( 68 ) : ( 69 ) ) ) : ( 70 ) ) ) : ( (Feature_0 <= 0.8129578530788422) ? ( (Feature_7 <= 0.32392852008342743) ? ( (Feature_9 <= 0.5372053384780884) ? ( 74 ) : ( 75 ) ) : ( 76 ) ) : ( 77 ) ) ) ) : ( (Feature_3 <= 0.27792081236839294) ? ( (Feature_0 <= 0.37086910009384155) ? ( (Feature_2 <= 0.21655013039708138) ? ( 81 ) : ( (Feature_0 <= 0.29816339910030365) ? ( 83 ) : ( (Feature_7 <= 0.47128359228372574) ? ( 85 ) : ( 86 ) ) ) ) : ( (Feature_0 <= 0.8121815919876099) ? ( (Feature_0 <= 0.4862767159938812) ? ( (Feature_5 <= 0.502183809876442) ? ( 90 ) : ( 91 ) ) : ( (Feature_5 <= 0.6428447663784027) ? ( 93 ) : ( 94 ) ) ) : ( (Feature_7 <= 0.33186040818691254) ? ( 96 ) : ( 97 ) ) ) ) : ( (Feature_0 <= 0.23805725574493408) ? ( (Feature_5 <= 0.9631622135639191) ? ( (Feature_2 <= 0.3459535241127014) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) : ( (Feature_3 <= 0.7423960864543915) ? ( (Feature_5 <= 0.9200620949268341) ? ( (Feature_5 <= 0.5558743476867676) ? ( (Feature_1 <= 0.6416755318641663) ? ( (Feature_3 <= 0.5546689331531525) ? ( 109 ) : ( 110 ) ) : ( (Feature_0 <= 0.5959380120038986) ? ( (Feature_5 <= 0.38930948823690414) ? ( (Feature_1 <= 0.7748122215270996) ? ( 114 ) : ( 115 ) ) : ( 116 ) ) : ( 117 ) ) ) : ( (Feature_2 <= 0.12859860993921757) ? ( 119 ) : ( (Feature_0 <= 0.7265767753124237) ? ( (Feature_7 <= 0.34459739923477173) ? ( 122 ) : ( (Feature_6 <= 0.511108323931694) ? ( 124 ) : ( (Feature_4 <= 0.5647256746888161) ? ( 126 ) : ( 127 ) ) ) ) : ( (Feature_1 <= 0.6148624122142792) ? ( (Feature_4 <= 0.3104628324508667) ? ( 130 ) : ( 131 ) ) : ( 132 ) ) ) ) ) : ( (Feature_7 <= 0.35593997314572334) ? ( 134 ) : ( 135 ) ) ) : ( (Feature_0 <= 0.8087022304534912) ? ( (Feature_5 <= 0.9390800297260284) ? ( (Feature_5 <= 0.21848126500844955) ? ( 139 ) : ( (Feature_1 <= 0.5314056873321533) ? ( (Feature_7 <= 0.787653774023056) ? ( (Feature_5 <= 0.5631897449493408) ? ( 143 ) : ( 144 ) ) : ( 145 ) ) : ( (Feature_8 <= 0.33143275044858456) ? ( 147 ) : ( (Feature_7 <= 0.5082620531320572) ? ( 149 ) : ( (Feature_3 <= 0.9129621386528015) ? ( 151 ) : ( 152 ) ) ) ) ) ) : ( (Feature_4 <= 0.6881959289312363) ? ( 154 ) : ( 155 ) ) ) : ( (Feature_7 <= 0.26279619708657265) ? ( 157 ) : ( 158 ) ) ) ) ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		std::any  lEstimator = lNodeValue [ 0 ];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
