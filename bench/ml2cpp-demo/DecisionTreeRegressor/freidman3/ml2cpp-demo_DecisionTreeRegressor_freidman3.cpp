// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_freidman3.exe ml2cpp-demo_DecisionTreeRegressor_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 3 ,  {0.61001684 }} ,
			{ 5 ,  {1.14091625 }} ,
			{ 8 ,  {1.35009011 }} ,
			{ 9 ,  {1.36871758 }} ,
			{ 10 ,  {1.40929984 }} ,
			{ 13 ,  {0.80791092 }} ,
			{ 14 ,  {0.70507147 }} ,
			{ 16 ,  {0.48486692 }} ,
			{ 18 ,  {0.37516757 }} ,
			{ 19 ,  {0.38342473 }} ,
			{ 24 ,  {1.11561476 }} ,
			{ 25 ,  {1.16100714 }} ,
			{ 27 ,  {1.53596709 }} ,
			{ 28 ,  {1.45186094 }} ,
			{ 31 ,  {1.31432562 }} ,
			{ 32 ,  {1.3413442 }} ,
			{ 39 ,  {1.56967904 }} ,
			{ 40 ,  {1.57058399 }} ,
			{ 41 ,  {1.56848669 }} ,
			{ 43 ,  {1.56460912 }} ,
			{ 44 ,  {1.56427232 }} ,
			{ 45 ,  {1.55432885 }} ,
			{ 48 ,  {1.52787455 }} ,
			{ 50 ,  {1.53671123 }} ,
			{ 51 ,  {1.54158957 }} ,
			{ 53 ,  {1.56232281 }} ,
			{ 54 ,  {1.55610197 }} ,
			{ 58 ,  {1.36789414 }} ,
			{ 60 ,  {1.41074394 }} ,
			{ 61 ,  {1.42518022 }} ,
			{ 63 ,  {1.38449452 }} ,
			{ 65 ,  {1.53405928 }} ,
			{ 69 ,  {1.49656192 }} ,
			{ 70 ,  {1.49902739 }} ,
			{ 71 ,  {1.48725785 }} ,
			{ 74 ,  {1.46764868 }} ,
			{ 76 ,  {1.46424873 }} ,
			{ 77 ,  {1.46088901 }} ,
			{ 78 ,  {1.49292179 }} ,
			{ 81 ,  {1.47795145 }} ,
			{ 82 ,  {1.4771264 }} ,
			{ 86 ,  {1.50778907 }} ,
			{ 91 ,  {1.5278957 }} ,
			{ 92 ,  {1.52762941 }} ,
			{ 93 ,  {1.53181558 }} ,
			{ 95 ,  {1.5352537 }} ,
			{ 96 ,  {1.53256929 }} ,
			{ 98 ,  {1.53095005 }} ,
			{ 101 ,  {1.52208363 }} ,
			{ 102 ,  {1.52169424 }} ,
			{ 103 ,  {1.52129772 }} ,
			{ 105 ,  {1.52485398 }} ,
			{ 108 ,  {1.54561918 }} ,
			{ 110 ,  {1.54404651 }} ,
			{ 111 ,  {1.54375025 }} ,
			{ 112 ,  {1.53740023 }} ,
			{ 114 ,  {1.48471099 }} ,
			{ 116 ,  {1.50320739 }} ,
			{ 117 ,  {1.51266196 }} ,
			{ 121 ,  {1.02748435 }} ,
			{ 122 ,  {1.07654708 }} ,
			{ 125 ,  {1.14405643 }} ,
			{ 128 ,  {1.27887759 }} ,
			{ 129 ,  {1.27948723 }} ,
			{ 130 ,  {1.26722342 }} ,
			{ 132 ,  {1.1968265 }} ,
			{ 135 ,  {1.1082904 }} ,
			{ 136 ,  {1.10634412 }} ,
			{ 137 ,  {1.15778604 }} ,
			{ 139 ,  {1.081892 }} ,
			{ 142 ,  {1.34984299 }} ,
			{ 143 ,  {1.34636148 }} ,
			{ 146 ,  {1.49322332 }} ,
			{ 148 ,  {1.50282351 }} ,
			{ 149 ,  {1.50990015 }} ,
			{ 152 ,  {1.47193903 }} ,
			{ 153 ,  {1.46708262 }} ,
			{ 155 ,  {1.49496626 }} ,
			{ 157 ,  {1.48605726 }} ,
			{ 158 ,  {1.47832813 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_2 <= 0.025156566640362144) ? ( 3 ) : ( (Feature_1 <= 730.0179748535156) ? ( 5 ) : ( (Feature_1 <= 1564.9982299804688) ? ( (Feature_0 <= 17.94747829437256) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) ) : ( (Feature_1 <= 445.71485900878906) ? ( (Feature_0 <= 46.1015510559082) ? ( 13 ) : ( 14 ) ) : ( (Feature_3 <= 5.679425954818726) ? ( 16 ) : ( (Feature_1 <= 809.5308074951172) ? ( 18 ) : ( 19 ) ) ) ) ) : ( (Feature_0 <= 61.53804397583008) ? ( (Feature_1 <= 254.32003784179688) ? ( (Feature_3 <= 7.815814971923828) ? ( (Feature_2 <= 0.5308420062065125) ? ( 24 ) : ( 25 ) ) : ( (Feature_1 <= 153.59423828125) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( (Feature_1 <= 1456.9424438476562) ? ( 31 ) : ( 32 ) ) : ( (Feature_0 <= 17.809399127960205) ? ( (Feature_0 <= 7.428896188735962) ? ( (Feature_1 <= 1235.7713623046875) ? ( (Feature_1 <= 955.4265747070312) ? ( (Feature_3 <= 9.250843524932861) ? ( (Feature_2 <= 0.7466520518064499) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( (Feature_1 <= 1143.7755737304688) ? ( 43 ) : ( 44 ) ) ) : ( 45 ) ) : ( (Feature_2 <= 0.5983837246894836) ? ( (Feature_3 <= 9.439367294311523) ? ( 48 ) : ( (Feature_2 <= 0.3961324691772461) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_3 <= 7.154626846313477) ? ( 53 ) : ( 54 ) ) ) ) : ( (Feature_1 <= 939.8522338867188) ? ( (Feature_2 <= 0.508118525147438) ? ( (Feature_3 <= 1.5074999928474426) ? ( 58 ) : ( (Feature_3 <= 4.250613212585449) ? ( 60 ) : ( 61 ) ) ) : ( (Feature_1 <= 360.9476013183594) ? ( 63 ) : ( (Feature_0 <= 23.030441284179688) ? ( 65 ) : ( (Feature_0 <= 37.63541030883789) ? ( (Feature_0 <= 33.87558364868164) ? ( (Feature_3 <= 5.702386260032654) ? ( 69 ) : ( 70 ) ) : ( 71 ) ) : ( (Feature_3 <= 10.019285678863525) ? ( (Feature_2 <= 0.6382763683795929) ? ( 74 ) : ( (Feature_2 <= 0.8533172607421875) ? ( 76 ) : ( 77 ) ) ) : ( 78 ) ) ) ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( (Feature_0 <= 39.69261932373047) ? ( 81 ) : ( 82 ) ) : ( (Feature_0 <= 51.72690391540527) ? ( (Feature_3 <= 7.223106145858765) ? ( (Feature_2 <= 0.4767591804265976) ? ( 86 ) : ( (Feature_0 <= 38.69268226623535) ? ( (Feature_0 <= 33.879493713378906) ? ( (Feature_1 <= 1161.6082153320312) ? ( (Feature_2 <= 0.6472890377044678) ? ( 91 ) : ( 92 ) ) : ( 93 ) ) : ( (Feature_3 <= 3.3074920177459717) ? ( 95 ) : ( 96 ) ) ) : ( (Feature_1 <= 1110.9609985351562) ? ( 98 ) : ( (Feature_1 <= 1285.177001953125) ? ( (Feature_3 <= 4.352863371372223) ? ( 101 ) : ( 102 ) ) : ( 103 ) ) ) ) ) : ( (Feature_1 <= 1213.47216796875) ? ( 105 ) : ( (Feature_0 <= 42.05487632751465) ? ( (Feature_2 <= 0.5624333471059799) ? ( 108 ) : ( (Feature_3 <= 9.757994651794434) ? ( 110 ) : ( 111 ) ) ) : ( 112 ) ) ) ) : ( (Feature_1 <= 1326.3909912109375) ? ( 114 ) : ( (Feature_3 <= 2.7179555892944336) ? ( 116 ) : ( 117 ) ) ) ) ) ) ) ) ) : ( (Feature_1 <= 851.9430541992188) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_1 <= 256.30464935302734) ? ( 121 ) : ( 122 ) ) : ( (Feature_1 <= 545.8458251953125) ? ( (Feature_1 <= 233.35620880126953) ? ( 125 ) : ( (Feature_3 <= 6.307325124740601) ? ( (Feature_0 <= 75.94800186157227) ? ( 128 ) : ( 129 ) ) : ( 130 ) ) ) : ( (Feature_2 <= 0.20570768415927887) ? ( 132 ) : ( (Feature_0 <= 82.8531608581543) ? ( (Feature_0 <= 73.59216690063477) ? ( 135 ) : ( 136 ) ) : ( 137 ) ) ) ) ) : ( (Feature_2 <= 0.21707050502300262) ? ( 139 ) : ( (Feature_2 <= 0.3869176059961319) ? ( (Feature_1 <= 1092.841552734375) ? ( 142 ) : ( 143 ) ) : ( (Feature_3 <= 6.9458348751068115) ? ( (Feature_3 <= 3.5709584951400757) ? ( 146 ) : ( (Feature_0 <= 75.76903915405273) ? ( 148 ) : ( 149 ) ) ) : ( (Feature_3 <= 9.077643394470215) ? ( (Feature_0 <= 74.2779655456543) ? ( 152 ) : ( 153 ) ) : ( (Feature_3 <= 9.87722635269165) ? ( 155 ) : ( (Feature_0 <= 65.99805068969727) ? ( 157 ) : ( 158 ) ) ) ) ) ) ) ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		std::any  lEstimator = lNodeValue [ 0 ];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
