// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : DecisionTreeRegressor
// Dataset : RandomReg_100

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_DecisionTreeRegressor_RandomReg_100.exe ml2cpp-demo_DecisionTreeRegressor_RandomReg_100.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	typedef std::vector<double> tNodeData;
	std::map<int, tNodeData> Decision_Tree_Node_data = {
			{ 8 ,  {-291.84388737 }} ,
			{ 9 ,  {-290.52672487 }} ,
			{ 11 ,  {-310.56333873 }} ,
			{ 12 ,  {-306.85826974 }} ,
			{ 14 ,  {-361.1632498 }} ,
			{ 15 ,  {-338.54994316 }} ,
			{ 18 ,  {-234.79191601 }} ,
			{ 19 ,  {-234.46580929 }} ,
			{ 20 ,  {-257.97922489 }} ,
			{ 22 ,  {-146.53732849 }} ,
			{ 24 ,  {-190.6470266 }} ,
			{ 25 ,  {-207.82497721 }} ,
			{ 27 ,  {-327.50301874 }} ,
			{ 30 ,  {-436.89308609 }} ,
			{ 31 ,  {-430.73224202 }} ,
			{ 32 ,  {-454.82158737 }} ,
			{ 36 ,  {-280.96508601 }} ,
			{ 38 ,  {-167.53786194 }} ,
			{ 41 ,  {-196.17622398 }} ,
			{ 42 ,  {-197.78121613 }} ,
			{ 43 ,  {-200.33739348 }} ,
			{ 45 ,  {-190.99779883 }} ,
			{ 48 ,  {-54.81786632 }} ,
			{ 49 ,  {-42.10296472 }} ,
			{ 51 ,  {-86.11645147 }} ,
			{ 52 ,  {-102.26347334 }} ,
			{ 56 ,  {39.44300012 }} ,
			{ 58 ,  {75.607022 }} ,
			{ 59 ,  {75.33652616 }} ,
			{ 60 ,  {-55.13785993 }} ,
			{ 63 ,  {215.90083762 }} ,
			{ 64 ,  {183.77184322 }} ,
			{ 66 ,  {136.92680038 }} ,
			{ 68 ,  {111.49818731 }} ,
			{ 69 ,  {114.45423223 }} ,
			{ 75 ,  {-30.69897773 }} ,
			{ 77 ,  {2.27397289 }} ,
			{ 78 ,  {-4.90459143 }} ,
			{ 82 ,  {62.60532339 }} ,
			{ 83 ,  {48.4233357 }} ,
			{ 84 ,  {90.67187466 }} ,
			{ 87 ,  {105.13302469 }} ,
			{ 88 ,  {122.37894791 }} ,
			{ 90 ,  {144.72865942 }} ,
			{ 91 ,  {157.32675575 }} ,
			{ 95 ,  {-172.78010698 }} ,
			{ 96 ,  {-202.60833883 }} ,
			{ 97 ,  {-140.57351312 }} ,
			{ 100 ,  {38.19976423 }} ,
			{ 101 ,  {-3.85906949 }} ,
			{ 103 ,  {-87.98512255 }} ,
			{ 107 ,  {-79.2896338 }} ,
			{ 108 ,  {-79.78381999 }} ,
			{ 109 ,  {-81.7867005 }} ,
			{ 110 ,  {-76.86275487 }} ,
			{ 113 ,  {94.43377409 }} ,
			{ 114 ,  {-10.71544337 }} ,
			{ 117 ,  {278.81453164 }} ,
			{ 118 ,  {327.27619653 }} ,
			{ 121 ,  {175.64031368 }} ,
			{ 122 ,  {178.09986345 }} ,
			{ 123 ,  {233.33694107 }} ,
			{ 130 ,  {130.61554227 }} ,
			{ 131 ,  {128.74971925 }} ,
			{ 132 ,  {114.66116148 }} ,
			{ 133 ,  {174.05588768 }} ,
			{ 137 ,  {294.89065558 }} ,
			{ 138 ,  {270.97867971 }} ,
			{ 140 ,  {245.21860441 }} ,
			{ 141 ,  {242.60253144 }} ,
			{ 144 ,  {167.43350007 }} ,
			{ 145 ,  {180.24317892 }} ,
			{ 148 ,  {212.8171045 }} ,
			{ 149 ,  {219.92766038 }} ,
			{ 150 ,  {195.39419395 }} ,
			{ 152 ,  {419.81179048 }} ,
			{ 154 ,  {294.76468454 }} ,
			{ 155 ,  {305.04020477 }} ,
			{ 157 ,  {-107.89147253 }} ,
			{ 158 ,  {-51.54063841 }} 
	};
	

	int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		int lNodeIndex = (Feature_80 <= -0.20716173201799393) ? ( (Feature_41 <= -0.5217077285051346) ? ( (Feature_55 <= 0.8011568188667297) ? ( (Feature_73 <= 0.41047578677535057) ? ( (Feature_63 <= 0.04603707045316696) ? ( (Feature_96 <= 0.8706262409687042) ? ( (Feature_46 <= -0.2032956387847662) ? ( (Feature_82 <= -0.03152686357498169) ? ( 8 ) : ( 9 ) ) : ( (Feature_92 <= -0.6632300354540348) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_53 <= -0.3576663210988045) ? ( 14 ) : ( 15 ) ) ) : ( (Feature_6 <= 0.4762225644662976) ? ( (Feature_1 <= -0.31221383390948176) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) ) : ( (Feature_78 <= -0.6743063032627106) ? ( 22 ) : ( (Feature_77 <= -0.5518433749675751) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_8 <= -1.3428598642349243) ? ( 27 ) : ( (Feature_23 <= 0.16964510083198547) ? ( (Feature_83 <= -0.13480877876281738) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) ) ) : ( (Feature_63 <= 0.025700129568576813) ? ( (Feature_13 <= -0.46739228069782257) ? ( (Feature_31 <= -0.720977783203125) ? ( 36 ) : ( (Feature_22 <= -1.1919351518154144) ? ( 38 ) : ( (Feature_83 <= 0.84161177277565) ? ( (Feature_47 <= -0.3343585878610611) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) ) : ( (Feature_45 <= -1.0837392210960388) ? ( 45 ) : ( (Feature_6 <= 0.26147793233394623) ? ( (Feature_99 <= -0.2790444325655699) ? ( 48 ) : ( 49 ) ) : ( (Feature_91 <= 1.6004826128482819) ? ( 51 ) : ( 52 ) ) ) ) ) : ( (Feature_33 <= -0.18238015472888947) ? ( (Feature_98 <= 1.1700470447540283) ? ( (Feature_85 <= -0.5872405227273703) ? ( 56 ) : ( (Feature_46 <= 1.447135105729103) ? ( 58 ) : ( 59 ) ) ) : ( 60 ) ) : ( (Feature_86 <= -0.3604295179247856) ? ( (Feature_23 <= -0.6699973929207772) ? ( 63 ) : ( 64 ) ) : ( (Feature_99 <= -0.8446950018405914) ? ( 66 ) : ( (Feature_26 <= 0.4743259698152542) ? ( 68 ) : ( 69 ) ) ) ) ) ) ) : ( (Feature_39 <= 0.45573797821998596) ? ( (Feature_57 <= 0.7340818643569946) ? ( (Feature_94 <= -0.6375347375869751) ? ( (Feature_80 <= -0.08977922052145004) ? ( (Feature_45 <= -0.501436710357666) ? ( 75 ) : ( (Feature_79 <= -1.6703673005104065) ? ( 77 ) : ( 78 ) ) ) : ( (Feature_31 <= -0.40328168869018555) ? ( (Feature_45 <= -0.47328342497348785) ? ( (Feature_5 <= 0.026429329067468643) ? ( 82 ) : ( 83 ) ) : ( 84 ) ) : ( (Feature_19 <= -0.8009656965732574) ? ( (Feature_86 <= 1.5553003549575806) ? ( 87 ) : ( 88 ) ) : ( (Feature_60 <= 0.03241045959293842) ? ( 90 ) : ( 91 ) ) ) ) ) : ( (Feature_11 <= -0.4716191291809082) ? ( (Feature_67 <= 0.346039742231369) ? ( (Feature_98 <= 0.42897909064777195) ? ( 95 ) : ( 96 ) ) : ( 97 ) ) : ( (Feature_57 <= -0.41929439455270767) ? ( (Feature_18 <= 0.6564229875802994) ? ( 100 ) : ( 101 ) ) : ( (Feature_74 <= -1.529185712337494) ? ( 103 ) : ( (Feature_46 <= 1.8549515902996063) ? ( (Feature_52 <= 0.8495583236217499) ? ( (Feature_49 <= -0.8195846676826477) ? ( 107 ) : ( 108 ) ) : ( 109 ) ) : ( 110 ) ) ) ) ) ) : ( (Feature_80 <= 0.9317565262317657) ? ( (Feature_58 <= -0.6561886966228485) ? ( 113 ) : ( 114 ) ) : ( (Feature_52 <= -0.24263763427734375) ? ( (Feature_20 <= 1.0010245144367218) ? ( 117 ) : ( 118 ) ) : ( (Feature_83 <= 0.18763845320791006) ? ( (Feature_76 <= 1.0078788846731186) ? ( 121 ) : ( 122 ) ) : ( 123 ) ) ) ) ) : ( (Feature_1 <= 1.2074711918830872) ? ( (Feature_18 <= 0.5775236189365387) ? ( (Feature_2 <= -0.6292065680027008) ? ( (Feature_52 <= 1.1171106100082397) ? ( (Feature_73 <= 0.6667274385690689) ? ( (Feature_66 <= -0.7341473512351513) ? ( 130 ) : ( 131 ) ) : ( 132 ) ) : ( 133 ) ) : ( (Feature_80 <= 0.4601690322160721) ? ( (Feature_29 <= 0.6953991204500198) ? ( (Feature_13 <= 0.1526515781879425) ? ( 137 ) : ( 138 ) ) : ( (Feature_57 <= 0.7593249976634979) ? ( 140 ) : ( 141 ) ) ) : ( (Feature_48 <= 0.03654786944389343) ? ( (Feature_28 <= -0.5644242838025093) ? ( 144 ) : ( 145 ) ) : ( (Feature_0 <= 1.1486323177814484) ? ( (Feature_37 <= 0.13666221499443054) ? ( 148 ) : ( 149 ) ) : ( 150 ) ) ) ) ) : ( (Feature_6 <= -0.23877617716789246) ? ( 152 ) : ( (Feature_68 <= 0.4047330617904663) ? ( 154 ) : ( 155 ) ) ) ) : ( (Feature_99 <= -0.3261108919978142) ? ( 157 ) : ( 158 ) ) ) );
	
		return lNodeIndex;
	}
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63, Feature_64, Feature_65, Feature_66, Feature_67, Feature_68, Feature_69, Feature_70, Feature_71, Feature_72, Feature_73, Feature_74, Feature_75, Feature_76, Feature_77, Feature_78, Feature_79, Feature_80, Feature_81, Feature_82, Feature_83, Feature_84, Feature_85, Feature_86, Feature_87, Feature_88, Feature_89, Feature_90, Feature_91, Feature_92, Feature_93, Feature_94, Feature_95, Feature_96, Feature_97, Feature_98, Feature_99);

		std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];


		tTable lTable;

		std::any  lEstimator = lNodeValue [ 0 ];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_100.csv");
	return 0;
}
