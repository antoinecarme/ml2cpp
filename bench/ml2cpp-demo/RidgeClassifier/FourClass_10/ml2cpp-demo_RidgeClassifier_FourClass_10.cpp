// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : RidgeClassifier
// Dataset : FourClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_RidgeClassifier_FourClass_10.exe ml2cpp-demo_RidgeClassifier_FourClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		std::any score_0 = 0.10521770725334928 * Feature_0 + -0.0947827460176711 * Feature_1 + 0.006824385127577531 * Feature_2 + -0.07216160296024896 * Feature_3 + 0.19727744443363884 * Feature_4 + -0.09849635427617884 * Feature_5 + 0.02647717025592013 * Feature_6 + 0.10135349960990762 * Feature_7 + 0.11610715317337014 * Feature_8 + 0.02246527119366313 * Feature_9 + -0.3662883118395498;

		std::any score_1 = -0.01638736674957127 * Feature_0 + -0.002040271887556677 * Feature_1 + 0.10227786226507364 * Feature_2 + 0.10705162305738065 * Feature_3 + 0.0914969256313264 * Feature_4 + -0.030449150582468557 * Feature_5 + -0.04626652186495494 * Feature_6 + 0.06828714224720481 * Feature_7 + -0.07679610092258175 * Feature_8 + 0.031057027709078713 * Feature_9 + -0.5734389690274515;

		std::any score_2 = -0.05702998816007132 * Feature_0 + -0.14684186792775697 * Feature_1 + -0.13884871477145558 * Feature_2 + -0.1148285113344985 * Feature_3 + -0.21348223079619627 * Feature_4 + -0.0006294328118063719 * Feature_5 + 0.010985531815777739 * Feature_6 + 0.144090946067489 * Feature_7 + 0.1090632169879587 * Feature_8 + 0.023972137063824447 * Feature_9 + -0.4304058003170998;

		std::any score_3 = -0.0318003523437066 * Feature_0 + 0.2436648858329784 * Feature_1 + 0.029746467378797103 * Feature_2 + 0.07993849123737407 * Feature_3 + -0.07529213926876675 * Feature_4 + 0.12957493767045372 * Feature_5 + 0.008803819793256035 * Feature_6 + -0.313731587924606 * Feature_7 + -0.148374269238747 * Feature_8 + -0.07749443596656623 * Feature_9 + -0.6298669188158991;


		tTable lTable;

		lTable["Score"] = { 
			score_0,
			score_1,
			score_2,
			score_3 
		} ;
		lTable["Proba"] = { 
			std::any(),
			std::any(),
			std::any(),
			std::any() 
		} ;
		int lBestClass = get_arg_max( lTable["Score"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_10.csv");
	return 0;
}
