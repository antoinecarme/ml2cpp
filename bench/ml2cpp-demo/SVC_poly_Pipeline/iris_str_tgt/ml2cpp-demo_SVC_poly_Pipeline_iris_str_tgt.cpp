// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_poly_Pipeline
// Dataset : iris_str_tgt

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_poly_Pipeline_iris_str_tgt.exe ml2cpp-demo_SVC_poly_Pipeline_iris_str_tgt.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::string> get_classes(){
		std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 5.8474999999999975 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 3.040833333333332 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 3.844166666666667 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 1.2458333333333336 ) : ( Feature_3)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 5.8474999999999975 ) / 0.827039146594646 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 3.040833333333332 ) / 0.43922200789830873 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 3.844166666666667 ) / 1.7109839193347847 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 1.2458333333333336 ) / 0.7486538845747673 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::string> get_classes(){
			std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1", "CLASS_2" };
	
			return lClasses;
		}
	
		namespace pb_0_1 {
		
			std::vector<std::string> get_classes(){
				std::vector<std::string> lClasses = { "CLASS_0", "CLASS_1" };
		
				return lClasses;
			}
		
			std::vector<std::any> lProblem_data_dual_0_1 = { 
			0.965815948213565 ,1.0 ,0.18823839395613395 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-1.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-1.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.1540543421696991 ,-0.0 ,-0.0 ,-0.0 , };
			
		
			std::vector<std::vector<std::any> > lProblem_data_sv_0_1 = { 
			 { -0.5410868419500932, 0.8177337660862934, -1.370069373637397, -1.12980557606238 },
			 { -0.903826624263008, 0.5900584715843097, -1.2531775678524786, -0.9962325030303746 },
			 { -1.6293061888888354, -1.686694473435526, -1.4869611794223154, -1.2633786490943855 },
			 { 0.1843927226757343, -0.3206427064236244, 0.3833077131363777, 0.33949822728968027 },
			 { 1.1516988088435047, -0.5483180009256082, 0.5586454218137551, 0.2059251542576747 },
			 { -0.4201735811791223, -1.2313438844315585, 0.09107819867408189, 0.07235208122566938 },
			 { 0.5471325049886481, 0.5900584715843097, 0.5001995189212961, 0.4730713003216859 },
			 { -0.903826624263008, -1.2313438844315585, -0.4933808302505097, -0.19479406483834152 },
			 { 1.3935253303854476, 0.3623831770823269, 0.5001995189212961, 0.2059251542576747 },
			 { 0.9098722873015618, -0.09296741192164064, 0.32486181024391875, 0.2059251542576747 },
			 { -0.4201735811791223, -1.686694473435526, 0.09107819867408189, 0.07235208122566938 },
			 { -0.4201735811791223, -1.0036685899295748, 0.32486181024391875, -0.06122099180633622 },
			 { -0.782913363492036, -0.775993295427591, 0.03263229578162268, 0.2059251542576747 },
			 { 0.5471325049886481, -1.686694473435526, 0.32486181024391875, 0.07235208122566938 },
			 { -0.17834705963717942, -0.09296741192164064, 0.20797000445900032, -0.06122099180633622 },
			 { -0.17834705963717942, -0.5483180009256082, 0.3833077131363777, 0.07235208122566938 },
			 { 0.42621924421767715, -1.914369767937509, 0.3833077131363777, 0.33949822728968027 },
			 { 0.06347946190476342, 0.3623831770823269, 0.5586454218137551, 0.7402174463856968 },
			 { 0.1843927226757343, 0.8177337660862934, 0.3833077131363777, 0.4730713003216859 },
			 { 1.0307855480725336, 0.13470788258034314, 0.5001995189212961, 0.33949822728968027 },
			 { 0.5471325049886481, -1.2313438844315585, 0.6170913247062145, 0.33949822728968027 },
			 { 0.3053059834467052, -0.3206427064236244, 0.5001995189212961, 0.2059251542576747 },
			 { -0.5410868419500932, -0.09296741192164064, 0.3833077131363777, 0.33949822728968027 },
			 { 1.0307855480725336, -0.09296741192164064, 0.6755372275986735, 0.6066443733536911 },
			 { -0.17834705963717942, -1.0036685899295748, -0.2011513157882139, -0.3283671378703471 },
			 { 0.3053059834467052, -0.5483180009256082, 0.5001995189212961, -0.06122099180633622 },
			 { 0.66804576575962, 0.3623831770823269, 0.3833077131363777, 0.33949822728968027 },
			 { 1.2726120696144765, 0.13470788258034314, 0.6170913247062145, 0.33949822728968027 },
			};
			
		
			double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
				return poly_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.24999999999999994, 0.0, 3 ) + -0.9944943250382091;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_CLASS_0", "Score_CLASS_1",
					"Proba_CLASS_0", "Proba_CLASS_1",
					"LogProba_CLASS_0", "LogProba_CLASS_1" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				auto lClasses = get_classes();
		
				std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5 };
		
				std::any lDotProduct_0_1 = poly_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.24999999999999994, 0.0, 3 ) + -0.9944943250382091;
		
				std::any lLogistic_0_1 = logistic(-2.4991410592028886 * lDotProduct_0_1 + 0.3819729693130725);
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					-lDotProduct_0_1,
					lDotProduct_0_1 
				} ;
				lTable["Proba"] = { 
					lLogistic_0_1,
					1.0 - lLogistic_0_1 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace pb_0_1
		
	
		namespace pb_0_2 {
		
			std::vector<std::string> get_classes(){
				std::vector<std::string> lClasses = { "CLASS_0", "CLASS_2" };
		
				return lClasses;
			}
		
			std::vector<std::any> lProblem_data_dual_0_2 = { 
			0.6892798915237314 ,1.0 ,0.0555170455800468 ,-0.0 ,-0.0 ,-0.0 ,-0.2699730600290302 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.4748238770747478 ,-0.0 ,-1.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 ,-0.0 , };
			
		
			std::vector<std::vector<std::any> > lProblem_data_sv_0_2 = { 
			 { -0.5410868419500932, 0.8177337660862934, -1.370069373637397, -1.12980557606238 },
			 { -0.903826624263008, 0.5900584715843097, -1.2531775678524786, -0.9962325030303746 },
			 { -1.6293061888888354, -1.686694473435526, -1.4869611794223154, -1.2633786490943855 },
			 { 0.7889590265305909, -0.09296741192164064, 0.7924290333835919, 1.0073635924497077 },
			 { -0.057433798866208544, -0.775993295427591, 0.7339831304911324, 0.8737905194177021 },
			 { 0.3053059834467052, -0.09296741192164064, 0.6170913247062145, 0.7402174463856968 },
			 { -1.1456531458049497, -1.2313438844315585, 0.3833077131363777, 0.6066443733536911 },
			 { -0.17834705963717942, -1.2313438844315585, 0.6755372275986735, 1.0073635924497077 },
			 { 0.7889590265305909, 0.3623831770823269, 0.7339831304911324, 1.0073635924497077 },
			 { 0.66804576575962, 0.3623831770823269, 0.8508749362760508, 1.408082811545724 },
			 { 0.5471325049886481, -0.775993295427591, 0.6170913247062145, 0.7402174463856968 },
			 { 0.06347946190476342, -0.09296741192164064, 0.7339831304911324, 0.7402174463856968 },
			 { 0.5471325049886481, -0.3206427064236244, 1.0262126449534283, 0.7402174463856968 },
			 { 0.1843927226757343, -0.09296741192164064, 0.5586454218137551, 0.7402174463856968 },
			 { 0.3053059834467052, -1.0036685899295748, 1.0262126449534283, 0.2059251542576747 },
			 { -0.29926032040815137, -0.5483180009256082, 0.6170913247062145, 1.0073635924497077 },
			 { 0.42621924421767715, 0.8177337660862934, 0.9093208391685104, 1.408082811545724 },
			 { 0.5471325049886481, -0.5483180009256082, 0.7339831304911324, 0.33949822728968027 },
			 { 0.7889590265305909, -0.09296741192164064, 0.9677667420609692, 0.7402174463856968 },
			 { -0.057433798866208544, -0.775993295427591, 0.7339831304911324, 0.8737905194177021 },
			 { 1.6353518519273904, -0.09296741192164064, 1.1431044507383468, 0.4730713003216859 },
			 { 0.1843927226757343, -1.914369767937509, 0.6755372275986735, 0.33949822728968027 },
			 { 0.66804576575962, -0.775993295427591, 0.8508749362760508, 0.8737905194177021 },
			 { 0.5471325049886481, -1.2313438844315585, 0.6755372275986735, 0.8737905194177021 },
			};
			
		
			double get_problem_0_2_decision_function( std::vector<std::any> const & inputs) {
				return poly_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.24999999999999994, 0.0, 3 ) + -0.8002063790470264;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_CLASS_0", "Score_CLASS_2",
					"Proba_CLASS_0", "Proba_CLASS_2",
					"LogProba_CLASS_0", "LogProba_CLASS_2" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				auto lClasses = get_classes();
		
				std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5 };
		
				std::any lDotProduct_0_2 = poly_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.24999999999999994, 0.0, 3 ) + -0.8002063790470264;
		
				std::any lLogistic_0_2 = logistic(-2.035586717838956 * lDotProduct_0_2 + 0.12266124439255614);
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					-lDotProduct_0_2,
					lDotProduct_0_2 
				} ;
				lTable["Proba"] = { 
					lLogistic_0_2,
					1.0 - lLogistic_0_2 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace pb_0_2
		
	
		namespace pb_1_2 {
		
			std::vector<std::string> get_classes(){
				std::vector<std::string> lClasses = { "CLASS_1", "CLASS_2" };
		
				return lClasses;
			}
		
			std::vector<std::any> lProblem_data_dual_1_2 = { 
			1.0 ,1.0 ,1.0 ,1.0 ,0.0 ,0.945038189019914 ,1.0 ,0.3913861749250639 ,1.0 ,1.0 ,0.8215068333824217 ,0.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,0.12305381653030455 ,1.0 ,0.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-0.2809850138577043 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
			
		
			std::vector<std::vector<std::any> > lProblem_data_sv_1_2 = { 
			 { 0.1843927226757343, -0.3206427064236244, 0.3833077131363777, 0.33949822728968027 },
			 { 1.1516988088435047, -0.5483180009256082, 0.5586454218137551, 0.2059251542576747 },
			 { -0.4201735811791223, -1.2313438844315585, 0.09107819867408189, 0.07235208122566938 },
			 { 0.5471325049886481, 0.5900584715843097, 0.5001995189212961, 0.4730713003216859 },
			 { -0.903826624263008, -1.2313438844315585, -0.4933808302505097, -0.19479406483834152 },
			 { 1.3935253303854476, 0.3623831770823269, 0.5001995189212961, 0.2059251542576747 },
			 { 0.9098722873015618, -0.09296741192164064, 0.32486181024391875, 0.2059251542576747 },
			 { -0.4201735811791223, -1.686694473435526, 0.09107819867408189, 0.07235208122566938 },
			 { -0.4201735811791223, -1.0036685899295748, 0.32486181024391875, -0.06122099180633622 },
			 { -0.782913363492036, -0.775993295427591, 0.03263229578162268, 0.2059251542576747 },
			 { 0.5471325049886481, -1.686694473435526, 0.32486181024391875, 0.07235208122566938 },
			 { -0.17834705963717942, -0.09296741192164064, 0.20797000445900032, -0.06122099180633622 },
			 { -0.17834705963717942, -0.5483180009256082, 0.3833077131363777, 0.07235208122566938 },
			 { 0.42621924421767715, -1.914369767937509, 0.3833077131363777, 0.33949822728968027 },
			 { 0.06347946190476342, 0.3623831770823269, 0.5586454218137551, 0.7402174463856968 },
			 { 0.1843927226757343, 0.8177337660862934, 0.3833077131363777, 0.4730713003216859 },
			 { 1.0307855480725336, 0.13470788258034314, 0.5001995189212961, 0.33949822728968027 },
			 { 0.5471325049886481, -1.2313438844315585, 0.6170913247062145, 0.33949822728968027 },
			 { 0.3053059834467052, -0.3206427064236244, 0.5001995189212961, 0.2059251542576747 },
			 { -0.5410868419500932, -0.09296741192164064, 0.3833077131363777, 0.33949822728968027 },
			 { 1.0307855480725336, -0.09296741192164064, 0.6755372275986735, 0.6066443733536911 },
			 { -0.17834705963717942, -1.0036685899295748, -0.2011513157882139, -0.3283671378703471 },
			 { 0.3053059834467052, -0.5483180009256082, 0.5001995189212961, -0.06122099180633622 },
			 { 0.66804576575962, 0.3623831770823269, 0.3833077131363777, 0.33949822728968027 },
			 { 1.2726120696144765, 0.13470788258034314, 0.6170913247062145, 0.33949822728968027 },
			 { 0.7889590265305909, -0.09296741192164064, 0.7924290333835919, 1.0073635924497077 },
			 { -0.057433798866208544, -0.775993295427591, 0.7339831304911324, 0.8737905194177021 },
			 { 0.3053059834467052, -0.09296741192164064, 0.6170913247062145, 0.7402174463856968 },
			 { -1.1456531458049497, -1.2313438844315585, 0.3833077131363777, 0.6066443733536911 },
			 { -0.17834705963717942, -1.2313438844315585, 0.6755372275986735, 1.0073635924497077 },
			 { 0.7889590265305909, 0.3623831770823269, 0.7339831304911324, 1.0073635924497077 },
			 { 0.66804576575962, 0.3623831770823269, 0.8508749362760508, 1.408082811545724 },
			 { 0.5471325049886481, -0.775993295427591, 0.6170913247062145, 0.7402174463856968 },
			 { 0.06347946190476342, -0.09296741192164064, 0.7339831304911324, 0.7402174463856968 },
			 { 0.5471325049886481, -0.3206427064236244, 1.0262126449534283, 0.7402174463856968 },
			 { 0.1843927226757343, -0.09296741192164064, 0.5586454218137551, 0.7402174463856968 },
			 { 0.3053059834467052, -1.0036685899295748, 1.0262126449534283, 0.2059251542576747 },
			 { -0.29926032040815137, -0.5483180009256082, 0.6170913247062145, 1.0073635924497077 },
			 { 0.42621924421767715, 0.8177337660862934, 0.9093208391685104, 1.408082811545724 },
			 { 0.5471325049886481, -0.5483180009256082, 0.7339831304911324, 0.33949822728968027 },
			 { 0.7889590265305909, -0.09296741192164064, 0.9677667420609692, 0.7402174463856968 },
			 { -0.057433798866208544, -0.775993295427591, 0.7339831304911324, 0.8737905194177021 },
			 { 1.6353518519273904, -0.09296741192164064, 1.1431044507383468, 0.4730713003216859 },
			 { 0.1843927226757343, -1.914369767937509, 0.6755372275986735, 0.33949822728968027 },
			 { 0.66804576575962, -0.775993295427591, 0.8508749362760508, 0.8737905194177021 },
			 { 0.5471325049886481, -1.2313438844315585, 0.6755372275986735, 0.8737905194177021 },
			};
			
		
			double get_problem_1_2_decision_function( std::vector<std::any> const & inputs) {
				return poly_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.24999999999999994, 0.0, 3 ) + 1.052728351747169;
			}
			
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { 
					"Score_CLASS_1", "Score_CLASS_2",
					"Proba_CLASS_1", "Proba_CLASS_2",
					"LogProba_CLASS_1", "LogProba_CLASS_2" };
		
				return lOutputs;
			}
		
			tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
				auto lClasses = get_classes();
		
				std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5 };
		
				std::any lDotProduct_1_2 = poly_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.24999999999999994, 0.0, 3 ) + 1.052728351747169;
		
				std::any lLogistic_1_2 = logistic(-3.7128464785900097 * lDotProduct_1_2 + 1.5864791801222389);
		
		
				tTable lTable;
		
				lTable["Score"] = { 
					-lDotProduct_1_2,
					lDotProduct_1_2 
				} ;
				lTable["Proba"] = { 
					lLogistic_1_2,
					1.0 - lLogistic_1_2 
				} ;
		
				recompute_log_probas( lTable );
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
		
				return lTable;
			}
		
		} // eof namespace pb_1_2
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
				"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
				"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5 };
	
			std::map<uint, tTable> lBinaryScores = { 
				{ 0 , pb_0_1::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) },
				{ 1 , pb_0_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) },
				{ 2 , pb_1_2::compute_classification_scores(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5) }
			};
	
			tTable lOVRTable = compute_svc_ovr_scores(lBinaryScores, lClasses);
	
	
			tTable lTable = lOVRTable;
	
			int lBestClass = get_arg_max( lTable["Score"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_CLASS_0", "Score_CLASS_1", "Score_CLASS_2",
			"Proba_CLASS_0", "Proba_CLASS_1", "Proba_CLASS_2",
			"LogProba_CLASS_0", "LogProba_CLASS_1", "LogProba_CLASS_2",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/iris_str_tgt.csv");
	return 0;
}
