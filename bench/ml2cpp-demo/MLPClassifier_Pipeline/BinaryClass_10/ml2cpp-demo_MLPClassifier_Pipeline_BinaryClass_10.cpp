// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier_Pipeline
// Dataset : BinaryClass_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_Pipeline_BinaryClass_10.exe ml2cpp-demo_MLPClassifier_Pipeline_BinaryClass_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 0.061829205238134496 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 0.17702463767183324 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 0.04138385004903454 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 0.13060646805847148 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( -0.05955810471983082 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( -0.04892908987010584 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.19101797861713127 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.02204959673267471 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( -0.057729814034140035 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( -0.05254959205203237 ) : ( Feature_9)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 0.061829205238134496 ) / 1.2283839562090673 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 0.17702463767183324 ) / 0.940821656314017 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 0.04138385004903454 ) / 1.0741824888811282 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 0.13060646805847148 ) / 1.0792244559733761 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - -0.05955810471983082 ) / 1.1095891190508123 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - -0.04892908987010584 ) / 1.3781871812029047 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.19101797861713127 ) / 0.9735285246303208 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.02204959673267471 ) / 0.47460301203797095 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - -0.057729814034140035 ) / 1.064607524840552 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - -0.05254959205203237 ) / 1.2245328896554564 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		namespace InputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
		
				tTable lTable;
		
				lTable["input_0"] = { scaler_output_2 };
				lTable["input_1"] = { scaler_output_3 };
				lTable["input_2"] = { scaler_output_4 };
				lTable["input_3"] = { scaler_output_5 };
				lTable["input_4"] = { scaler_output_6 };
				lTable["input_5"] = { scaler_output_7 };
				lTable["input_6"] = { scaler_output_8 };
				lTable["input_7"] = { scaler_output_9 };
				lTable["input_8"] = { scaler_output_10 };
				lTable["input_9"] = { scaler_output_11 };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
		
				return lTable;
			}
		
		} // eof namespace InputLayer
		
	
		namespace HiddenLayer_1 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9) {
		
				tTable lTable;
		
				double output_1_0_BA = -1.2291736775068371 * input_0 + -0.4431717057936512 * input_1 + -6.220060026478739 * input_2 + 4.73688940076226 * input_3 + -4.518617612945613 * input_4 + 1.8384249523866156 * input_5 + -4.9584246733439095 * input_6 + -1.0217163116850485 * input_7 + 3.9911821816584188 * input_8 + 0.5953587183594122 * input_9 + -11.514271345763074;
		
				double output_1_1_BA = 4.849739365352118 * input_0 + -1.9579097371757241 * input_1 + 1.741947275741613 * input_2 + 2.6883548749405 * input_3 + 2.721006401873953 * input_4 + 0.44300818830937333 * input_5 + -2.535092735424429 * input_6 + 4.1898085997078205 * input_7 + 1.582963598377703 * input_8 + -4.959453416239042 * input_9 + -5.61785632173384;
		
				double output_1_2_BA = -9.879392680019953 * input_0 + 0.6027221866250989 * input_1 + -1.9837035989700276 * input_2 + 2.179907594153163 * input_3 + 0.9655319237867889 * input_4 + -5.6467855928554 * input_5 + -6.9569462308367 * input_6 + -12.022812641360506 * input_7 + -1.7516716579263252 * input_8 + 12.848542761363142 * input_9 + -1.2707207763849853;
		
				lTable["output_1_0"] = { relu(output_1_0_BA) };
				lTable["output_1_1"] = { relu(output_1_1_BA) };
				lTable["output_1_2"] = { relu(output_1_2_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_1
		
	
		namespace HiddenLayer_2 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
		
				tTable lTable;
		
				double output_2_0_BA = -0.8520496908814373 * output_1_0 + 1.786786596975958 * output_1_1 + -0.4662835716303707 * output_1_2 + -4.635184802269998;
		
				double output_2_1_BA = -7.055590638974669 * output_1_0 + -3.4000374568911984 * output_1_1 + -3.341166515853937 * output_1_2 + 11.460388619313996;
		
				double output_2_2_BA = 9.85720817101897 * output_1_0 + 0.07324854804975371 * output_1_1 + 10.042937582693737 * output_1_2 + 1.9130262108520102;
		
				double output_2_3_BA = 0.1110629492474539 * output_1_0 + -0.5046181300763377 * output_1_1 + -0.4065313614295861 * output_1_2 + -0.7964330424336139;
		
				double output_2_4_BA = -0.5675058296358042 * output_1_0 + 3.045018013684669 * output_1_1 + -0.5289175526854095 * output_1_2 + -8.406418239432632;
		
				lTable["output_2_0"] = { relu(output_2_0_BA) };
				lTable["output_2_1"] = { relu(output_2_1_BA) };
				lTable["output_2_2"] = { relu(output_2_2_BA) };
				lTable["output_2_3"] = { relu(output_2_3_BA) };
				lTable["output_2_4"] = { relu(output_2_4_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_2
		
	
		namespace OutputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_3_0" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
		
				tTable lTable;
		
				double output_3_0_BA = -5.682115907899211 * output_2_0 + -4.437931998535575 * output_2_1 + 15.146872867568376 * output_2_2 + 0.7006689661671782 * output_2_3 + -10.615553479804616 * output_2_4 + -4.834590661250504;
		
				lTable["output_3_0"] = { logistic(output_3_0_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
		
				return lTable;
			}
		
		} // eof namespace OutputLayer
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11) {
			auto lClasses = get_classes();
	
			tTable lTable_InputLayer = InputLayer::compute_features(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11);
	
			tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );
	
			tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );
	
			tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - lTable_OutputLayer[ "output_3_0" ][0],
				lTable_OutputLayer[ "output_3_0" ][0] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BinaryClass_10.csv");
	return 0;
}
