// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier_Pipeline
// Dataset : BreastCancer

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_Pipeline_BreastCancer.exe ml2cpp-demo_MLPClassifier_Pipeline_BreastCancer.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
	
			tTable lTable;
	
			lTable["imputer_output_2"] = { ((Feature_0 == std::any()) ?  ( 14.077712087912083 ) : ( Feature_0)) };
			lTable["imputer_output_3"] = { ((Feature_1 == std::any()) ?  ( 19.03905494505495 ) : ( Feature_1)) };
			lTable["imputer_output_4"] = { ((Feature_2 == std::any()) ?  ( 91.66178021978023 ) : ( Feature_2)) };
			lTable["imputer_output_5"] = { ((Feature_3 == std::any()) ?  ( 650.9676923076925 ) : ( Feature_3)) };
			lTable["imputer_output_6"] = { ((Feature_4 == std::any()) ?  ( 0.09642184615384615 ) : ( Feature_4)) };
			lTable["imputer_output_7"] = { ((Feature_5 == std::any()) ?  ( 0.10441613186813191 ) : ( Feature_5)) };
			lTable["imputer_output_8"] = { ((Feature_6 == std::any()) ?  ( 0.08826232681318694 ) : ( Feature_6)) };
			lTable["imputer_output_9"] = { ((Feature_7 == std::any()) ?  ( 0.048516399999999966 ) : ( Feature_7)) };
			lTable["imputer_output_10"] = { ((Feature_8 == std::any()) ?  ( 0.1815885714285715 ) : ( Feature_8)) };
			lTable["imputer_output_11"] = { ((Feature_9 == std::any()) ?  ( 0.06294030769230768 ) : ( Feature_9)) };
			lTable["imputer_output_12"] = { ((Feature_10 == std::any()) ?  ( 0.4099173626373627 ) : ( Feature_10)) };
			lTable["imputer_output_13"] = { ((Feature_11 == std::any()) ?  ( 1.2170694505494501 ) : ( Feature_11)) };
			lTable["imputer_output_14"] = { ((Feature_12 == std::any()) ?  ( 2.90524901098901 ) : ( Feature_12)) };
			lTable["imputer_output_15"] = { ((Feature_13 == std::any()) ?  ( 40.87988571428572 ) : ( Feature_13)) };
			lTable["imputer_output_16"] = { ((Feature_14 == std::any()) ?  ( 0.007055971428571433 ) : ( Feature_14)) };
			lTable["imputer_output_17"] = { ((Feature_15 == std::any()) ?  ( 0.025567830769230776 ) : ( Feature_15)) };
			lTable["imputer_output_18"] = { ((Feature_16 == std::any()) ?  ( 0.03199925626373623 ) : ( Feature_16)) };
			lTable["imputer_output_19"] = { ((Feature_17 == std::any()) ?  ( 0.011972369230769237 ) : ( Feature_17)) };
			lTable["imputer_output_20"] = { ((Feature_18 == std::any()) ?  ( 0.020896200000000014 ) : ( Feature_18)) };
			lTable["imputer_output_21"] = { ((Feature_19 == std::any()) ?  ( 0.0038465518681318647 ) : ( Feature_19)) };
			lTable["imputer_output_22"] = { ((Feature_20 == std::any()) ?  ( 16.17776483516484 ) : ( Feature_20)) };
			lTable["imputer_output_23"] = { ((Feature_21 == std::any()) ?  ( 25.26505494505494 ) : ( Feature_21)) };
			lTable["imputer_output_24"] = { ((Feature_22 == std::any()) ?  ( 106.68156043956041 ) : ( Feature_22)) };
			lTable["imputer_output_25"] = { ((Feature_23 == std::any()) ?  ( 870.8639560439567 ) : ( Feature_23)) };
			lTable["imputer_output_26"] = { ((Feature_24 == std::any()) ?  ( 0.1318275604395605 ) : ( Feature_24)) };
			lTable["imputer_output_27"] = { ((Feature_25 == std::any()) ?  ( 0.24991806593406582 ) : ( Feature_25)) };
			lTable["imputer_output_28"] = { ((Feature_26 == std::any()) ?  ( 0.2654615934065932 ) : ( Feature_26)) };
			lTable["imputer_output_29"] = { ((Feature_27 == std::any()) ?  ( 0.11348798021978022 ) : ( Feature_27)) };
			lTable["imputer_output_30"] = { ((Feature_28 == std::any()) ?  ( 0.2897881318681319 ) : ( Feature_28)) };
			lTable["imputer_output_31"] = { ((Feature_29 == std::any()) ?  ( 0.08364145054945049 ) : ( Feature_29)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "imputer_output_2", "imputer_output_3", "imputer_output_4", "imputer_output_5", "imputer_output_6", "imputer_output_7", "imputer_output_8", "imputer_output_9", "imputer_output_10", "imputer_output_11", "imputer_output_12", "imputer_output_13", "imputer_output_14", "imputer_output_15", "imputer_output_16", "imputer_output_17", "imputer_output_18", "imputer_output_19", "imputer_output_20", "imputer_output_21", "imputer_output_22", "imputer_output_23", "imputer_output_24", "imputer_output_25", "imputer_output_26", "imputer_output_27", "imputer_output_28", "imputer_output_29", "imputer_output_30", "imputer_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any imputer_output_2, std::any imputer_output_3, std::any imputer_output_4, std::any imputer_output_5, std::any imputer_output_6, std::any imputer_output_7, std::any imputer_output_8, std::any imputer_output_9, std::any imputer_output_10, std::any imputer_output_11, std::any imputer_output_12, std::any imputer_output_13, std::any imputer_output_14, std::any imputer_output_15, std::any imputer_output_16, std::any imputer_output_17, std::any imputer_output_18, std::any imputer_output_19, std::any imputer_output_20, std::any imputer_output_21, std::any imputer_output_22, std::any imputer_output_23, std::any imputer_output_24, std::any imputer_output_25, std::any imputer_output_26, std::any imputer_output_27, std::any imputer_output_28, std::any imputer_output_29, std::any imputer_output_30, std::any imputer_output_31) {
	
			tTable lTable;
	
			lTable["scaler_output_2"] = { ( ( imputer_output_2 - 14.077712087912083 ) / 3.5451492987000814 ) };
			lTable["scaler_output_3"] = { ( ( imputer_output_3 - 19.03905494505495 ) / 4.1622971504218205 ) };
			lTable["scaler_output_4"] = { ( ( imputer_output_4 - 91.66178021978023 ) / 24.503971943475648 ) };
			lTable["scaler_output_5"] = { ( ( imputer_output_5 - 650.9676923076925 ) / 355.702823163891 ) };
			lTable["scaler_output_6"] = { ( ( imputer_output_6 - 0.09642184615384615 ) / 0.014197819663072304 ) };
			lTable["scaler_output_7"] = { ( ( imputer_output_7 - 0.10441613186813191 ) / 0.05340369466973436 ) };
			lTable["scaler_output_8"] = { ( ( imputer_output_8 - 0.08826232681318694 ) / 0.08191200162631372 ) };
			lTable["scaler_output_9"] = { ( ( imputer_output_9 - 0.048516399999999966 ) / 0.039373117396730245 ) };
			lTable["scaler_output_10"] = { ( ( imputer_output_10 - 0.1815885714285715 ) / 0.02779005832874822 ) };
			lTable["scaler_output_11"] = { ( ( imputer_output_11 - 0.06294030769230768 ) / 0.007019354586172742 ) };
			lTable["scaler_output_12"] = { ( ( imputer_output_12 - 0.4099173626373627 ) / 0.29120400836827026 ) };
			lTable["scaler_output_13"] = { ( ( imputer_output_13 - 1.2170694505494501 ) / 0.5363896396336265 ) };
			lTable["scaler_output_14"] = { ( ( imputer_output_14 - 2.90524901098901 ) / 2.1424944299808626 ) };
			lTable["scaler_output_15"] = { ( ( imputer_output_15 - 40.87988571428572 ) / 48.224754479577314 ) };
			lTable["scaler_output_16"] = { ( ( imputer_output_16 - 0.007055971428571433 ) / 0.002863651656569403 ) };
			lTable["scaler_output_17"] = { ( ( imputer_output_17 - 0.025567830769230776 ) / 0.017947013631032318 ) };
			lTable["scaler_output_18"] = { ( ( imputer_output_18 - 0.03199925626373623 ) / 0.03166493672136351 ) };
			lTable["scaler_output_19"] = { ( ( imputer_output_19 - 0.011972369230769237 ) / 0.006392005589396607 ) };
			lTable["scaler_output_20"] = { ( ( imputer_output_20 - 0.020896200000000014 ) / 0.008582910079869234 ) };
			lTable["scaler_output_21"] = { ( ( imputer_output_21 - 0.0038465518681318647 ) / 0.0027436075866190575 ) };
			lTable["scaler_output_22"] = { ( ( imputer_output_22 - 16.17776483516484 ) / 4.817458816201383 ) };
			lTable["scaler_output_23"] = { ( ( imputer_output_23 - 25.26505494505494 ) / 5.92332412866667 ) };
			lTable["scaler_output_24"] = { ( ( imputer_output_24 - 106.68156043956041 ) / 33.70385837605481 ) };
			lTable["scaler_output_25"] = { ( ( imputer_output_25 - 870.8639560439567 ) / 566.9950559872813 ) };
			lTable["scaler_output_26"] = { ( ( imputer_output_26 - 0.1318275604395605 ) / 0.02274820752228878 ) };
			lTable["scaler_output_27"] = { ( ( imputer_output_27 - 0.24991806593406582 ) / 0.15246893644279044 ) };
			lTable["scaler_output_28"] = { ( ( imputer_output_28 - 0.2654615934065932 ) / 0.20692568678204093 ) };
			lTable["scaler_output_29"] = { ( ( imputer_output_29 - 0.11348798021978022 ) / 0.06638141278520703 ) };
			lTable["scaler_output_30"] = { ( ( imputer_output_30 - 0.2897881318681319 ) / 0.06220470665051894 ) };
			lTable["scaler_output_31"] = { ( ( imputer_output_31 - 0.08364145054945049 ) / 0.01706514580694785 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("imputer_output_2")[0], iTable.at("imputer_output_3")[0], iTable.at("imputer_output_4")[0], iTable.at("imputer_output_5")[0], iTable.at("imputer_output_6")[0], iTable.at("imputer_output_7")[0], iTable.at("imputer_output_8")[0], iTable.at("imputer_output_9")[0], iTable.at("imputer_output_10")[0], iTable.at("imputer_output_11")[0], iTable.at("imputer_output_12")[0], iTable.at("imputer_output_13")[0], iTable.at("imputer_output_14")[0], iTable.at("imputer_output_15")[0], iTable.at("imputer_output_16")[0], iTable.at("imputer_output_17")[0], iTable.at("imputer_output_18")[0], iTable.at("imputer_output_19")[0], iTable.at("imputer_output_20")[0], iTable.at("imputer_output_21")[0], iTable.at("imputer_output_22")[0], iTable.at("imputer_output_23")[0], iTable.at("imputer_output_24")[0], iTable.at("imputer_output_25")[0], iTable.at("imputer_output_26")[0], iTable.at("imputer_output_27")[0], iTable.at("imputer_output_28")[0], iTable.at("imputer_output_29")[0], iTable.at("imputer_output_30")[0], iTable.at("imputer_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		namespace InputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14, std::any scaler_output_15, std::any scaler_output_16, std::any scaler_output_17, std::any scaler_output_18, std::any scaler_output_19, std::any scaler_output_20, std::any scaler_output_21, std::any scaler_output_22, std::any scaler_output_23, std::any scaler_output_24, std::any scaler_output_25, std::any scaler_output_26, std::any scaler_output_27, std::any scaler_output_28, std::any scaler_output_29, std::any scaler_output_30, std::any scaler_output_31) {
		
				tTable lTable;
		
				lTable["input_0"] = { scaler_output_2 };
				lTable["input_1"] = { scaler_output_3 };
				lTable["input_2"] = { scaler_output_4 };
				lTable["input_3"] = { scaler_output_5 };
				lTable["input_4"] = { scaler_output_6 };
				lTable["input_5"] = { scaler_output_7 };
				lTable["input_6"] = { scaler_output_8 };
				lTable["input_7"] = { scaler_output_9 };
				lTable["input_8"] = { scaler_output_10 };
				lTable["input_9"] = { scaler_output_11 };
				lTable["input_10"] = { scaler_output_12 };
				lTable["input_11"] = { scaler_output_13 };
				lTable["input_12"] = { scaler_output_14 };
				lTable["input_13"] = { scaler_output_15 };
				lTable["input_14"] = { scaler_output_16 };
				lTable["input_15"] = { scaler_output_17 };
				lTable["input_16"] = { scaler_output_18 };
				lTable["input_17"] = { scaler_output_19 };
				lTable["input_18"] = { scaler_output_20 };
				lTable["input_19"] = { scaler_output_21 };
				lTable["input_20"] = { scaler_output_22 };
				lTable["input_21"] = { scaler_output_23 };
				lTable["input_22"] = { scaler_output_24 };
				lTable["input_23"] = { scaler_output_25 };
				lTable["input_24"] = { scaler_output_26 };
				lTable["input_25"] = { scaler_output_27 };
				lTable["input_26"] = { scaler_output_28 };
				lTable["input_27"] = { scaler_output_29 };
				lTable["input_28"] = { scaler_output_30 };
				lTable["input_29"] = { scaler_output_31 };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0], iTable.at("scaler_output_15")[0], iTable.at("scaler_output_16")[0], iTable.at("scaler_output_17")[0], iTable.at("scaler_output_18")[0], iTable.at("scaler_output_19")[0], iTable.at("scaler_output_20")[0], iTable.at("scaler_output_21")[0], iTable.at("scaler_output_22")[0], iTable.at("scaler_output_23")[0], iTable.at("scaler_output_24")[0], iTable.at("scaler_output_25")[0], iTable.at("scaler_output_26")[0], iTable.at("scaler_output_27")[0], iTable.at("scaler_output_28")[0], iTable.at("scaler_output_29")[0], iTable.at("scaler_output_30")[0], iTable.at("scaler_output_31")[0]);
		
				return lTable;
			}
		
		} // eof namespace InputLayer
		
	
		namespace HiddenLayer_1 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9, std::any input_10, std::any input_11, std::any input_12, std::any input_13, std::any input_14, std::any input_15, std::any input_16, std::any input_17, std::any input_18, std::any input_19, std::any input_20, std::any input_21, std::any input_22, std::any input_23, std::any input_24, std::any input_25, std::any input_26, std::any input_27, std::any input_28, std::any input_29) {
		
				tTable lTable;
		
				double output_1_0_BA = 0.6035521390925462 * input_0 + 1.2192753918755241 * input_1 + 0.3645678132270481 * input_2 + -0.09403360765031625 * input_3 + -0.7019130998425175 * input_4 + 1.072204272029119 * input_5 + -1.0188698801617195 * input_6 + -0.9825516043515856 * input_7 + -0.11165166949368391 * input_8 + -1.3214658680580524 * input_9 + -2.160094150985066 * input_10 + -0.39714822920707893 * input_11 + -0.981194619276208 * input_12 + -0.9508726647107216 * input_13 + 0.8291423737687517 * input_14 + 2.0943480770088456 * input_15 + 0.07088330452147061 * input_16 + -0.4461396376173517 * input_17 + 0.9355619170253068 * input_18 + 1.0561268421784524 * input_19 + -0.8402585978305996 * input_20 + -0.031506340680765146 * input_21 + 0.10202154671521066 * input_22 + -1.0296779074644677 * input_23 + -0.6852008687287077 * input_24 + 0.7569658395830319 * input_25 + -1.0400787656400854 * input_26 + -0.5718418433133294 * input_27 + -0.20226517170789737 * input_28 + 0.32017514812179315 * input_29 + 2.7265841046700507;
		
				double output_1_1_BA = 0.5240382938742697 * input_0 + -0.6256426237945713 * input_1 + 0.16886649831505798 * input_2 + 0.45405057632982093 * input_3 + 0.621982809392034 * input_4 + 0.6074891897496655 * input_5 + -0.7708942755925505 * input_6 + -0.6802527248197017 * input_7 + -0.2886796881298794 * input_8 + -0.557248646786587 * input_9 + -1.5774791949649953 * input_10 + -1.4521162812630475 * input_11 + -1.0565409595096389 * input_12 + -0.5476386381163917 * input_13 + 1.2264786735700006 * input_14 + 0.382851174700748 * input_15 + -0.10939875373197963 * input_16 + -0.23929423704877825 * input_17 + 0.06294999162379909 * input_18 + 0.734165665559948 * input_19 + -0.577880515629558 * input_20 + -1.9022439127763342 * input_21 + -0.3373775569392069 * input_22 + -0.2721039509989454 * input_23 + 0.5258202902155191 * input_24 + -0.3356406466288375 * input_25 + -1.23932543445503 * input_26 + -0.2333596527005418 * input_27 + -0.8140219346057331 * input_28 + -0.9325380241951844 * input_29 + 1.0332920200101996;
		
				double output_1_2_BA = 1.3578064125521456 * input_0 + 0.3760175841528188 * input_1 + 1.119844877628658 * input_2 + 1.0480438362510494 * input_3 + -0.05174207591521668 * input_4 + -0.04053112487869353 * input_5 + 1.8754966838732 * input_6 + 1.8551579743047595 * input_7 + -0.0303206305758884 * input_8 + -0.04438482603209095 * input_9 + 1.127765250925684 * input_10 + -1.2928436206254565 * input_11 + 0.7655464987442028 * input_12 + 1.036331725199886 * input_13 + 0.019817867776533975 * input_14 + -1.2968969931177343 * input_15 + -0.2885499342252428 * input_16 + 0.12253475804225678 * input_17 + 0.558032589655056 * input_18 + -1.3726571132426075 * input_19 + 1.6325575183743553 * input_20 + 2.543590966234499 * input_21 + 0.9865310867662782 * input_22 + 1.9078008495129601 * input_23 + 1.4305187086740705 * input_24 + -0.05490218231795477 * input_25 + 2.0709736901219453 * input_26 + 1.7844456395331312 * input_27 + 1.0414384374374819 * input_28 + -0.5640588376650691 * input_29 + 0.20041431403563892;
		
				lTable["output_1_0"] = { relu(output_1_0_BA) };
				lTable["output_1_1"] = { relu(output_1_1_BA) };
				lTable["output_1_2"] = { relu(output_1_2_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0], iTable.at("input_10")[0], iTable.at("input_11")[0], iTable.at("input_12")[0], iTable.at("input_13")[0], iTable.at("input_14")[0], iTable.at("input_15")[0], iTable.at("input_16")[0], iTable.at("input_17")[0], iTable.at("input_18")[0], iTable.at("input_19")[0], iTable.at("input_20")[0], iTable.at("input_21")[0], iTable.at("input_22")[0], iTable.at("input_23")[0], iTable.at("input_24")[0], iTable.at("input_25")[0], iTable.at("input_26")[0], iTable.at("input_27")[0], iTable.at("input_28")[0], iTable.at("input_29")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_1
		
	
		namespace HiddenLayer_2 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
		
				tTable lTable;
		
				double output_2_0_BA = 0.49853784439596555 * output_1_0 + -0.5750282582934445 * output_1_1 + -0.7201585811268097 * output_1_2 + -0.02738182586133637;
		
				double output_2_1_BA = -0.7288083285847037 * output_1_0 + -0.8789506211465544 * output_1_1 + 0.5483991070432 * output_1_2 + 0.6166178504467086;
		
				double output_2_2_BA = 1.1208584530335013 * output_1_0 + 1.8989329755207651 * output_1_1 + -1.5860395059162007 * output_1_2 + -0.06436421807090374;
		
				double output_2_3_BA = -0.5283052699886182 * output_1_0 + -0.642728203801112 * output_1_1 + 2.50721924629379 * output_1_2 + 1.6213458354322503;
		
				double output_2_4_BA = -0.6947502490619603 * output_1_0 + -0.2695090985330501 * output_1_1 + -0.6616811479073949 * output_1_2 + -0.815750113657602;
		
				lTable["output_2_0"] = { relu(output_2_0_BA) };
				lTable["output_2_1"] = { relu(output_2_1_BA) };
				lTable["output_2_2"] = { relu(output_2_2_BA) };
				lTable["output_2_3"] = { relu(output_2_3_BA) };
				lTable["output_2_4"] = { relu(output_2_4_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_2
		
	
		namespace OutputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_3_0" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
		
				tTable lTable;
		
				double output_3_0_BA = 0.18834779921312333 * output_2_0 + -0.7528375434279767 * output_2_1 + 2.3362699508122513 * output_2_2 + -2.6544117560874905 * output_2_3 + 0.3793441160311875 * output_2_4 + -0.26660724183894524;
		
				lTable["output_3_0"] = { logistic(output_3_0_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
		
				return lTable;
			}
		
		} // eof namespace OutputLayer
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_output_2", "scaler_output_3", "scaler_output_4", "scaler_output_5", "scaler_output_6", "scaler_output_7", "scaler_output_8", "scaler_output_9", "scaler_output_10", "scaler_output_11", "scaler_output_12", "scaler_output_13", "scaler_output_14", "scaler_output_15", "scaler_output_16", "scaler_output_17", "scaler_output_18", "scaler_output_19", "scaler_output_20", "scaler_output_21", "scaler_output_22", "scaler_output_23", "scaler_output_24", "scaler_output_25", "scaler_output_26", "scaler_output_27", "scaler_output_28", "scaler_output_29", "scaler_output_30", "scaler_output_31" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_output_2, std::any scaler_output_3, std::any scaler_output_4, std::any scaler_output_5, std::any scaler_output_6, std::any scaler_output_7, std::any scaler_output_8, std::any scaler_output_9, std::any scaler_output_10, std::any scaler_output_11, std::any scaler_output_12, std::any scaler_output_13, std::any scaler_output_14, std::any scaler_output_15, std::any scaler_output_16, std::any scaler_output_17, std::any scaler_output_18, std::any scaler_output_19, std::any scaler_output_20, std::any scaler_output_21, std::any scaler_output_22, std::any scaler_output_23, std::any scaler_output_24, std::any scaler_output_25, std::any scaler_output_26, std::any scaler_output_27, std::any scaler_output_28, std::any scaler_output_29, std::any scaler_output_30, std::any scaler_output_31) {
			auto lClasses = get_classes();
	
			tTable lTable_InputLayer = InputLayer::compute_features(scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11, scaler_output_12, scaler_output_13, scaler_output_14, scaler_output_15, scaler_output_16, scaler_output_17, scaler_output_18, scaler_output_19, scaler_output_20, scaler_output_21, scaler_output_22, scaler_output_23, scaler_output_24, scaler_output_25, scaler_output_26, scaler_output_27, scaler_output_28, scaler_output_29, scaler_output_30, scaler_output_31);
	
			tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );
	
			tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );
	
			tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				std::any(),
				std::any() 
			} ;
			lTable["Proba"] = { 
				1.0 - lTable_OutputLayer[ "output_3_0" ][0],
				lTable_OutputLayer[ "output_3_0" ][0] 
			} ;
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_output_2")[0], iTable.at("scaler_output_3")[0], iTable.at("scaler_output_4")[0], iTable.at("scaler_output_5")[0], iTable.at("scaler_output_6")[0], iTable.at("scaler_output_7")[0], iTable.at("scaler_output_8")[0], iTable.at("scaler_output_9")[0], iTable.at("scaler_output_10")[0], iTable.at("scaler_output_11")[0], iTable.at("scaler_output_12")[0], iTable.at("scaler_output_13")[0], iTable.at("scaler_output_14")[0], iTable.at("scaler_output_15")[0], iTable.at("scaler_output_16")[0], iTable.at("scaler_output_17")[0], iTable.at("scaler_output_18")[0], iTable.at("scaler_output_19")[0], iTable.at("scaler_output_20")[0], iTable.at("scaler_output_21")[0], iTable.at("scaler_output_22")[0], iTable.at("scaler_output_23")[0], iTable.at("scaler_output_24")[0], iTable.at("scaler_output_25")[0], iTable.at("scaler_output_26")[0], iTable.at("scaler_output_27")[0], iTable.at("scaler_output_28")[0], iTable.at("scaler_output_29")[0], iTable.at("scaler_output_30")[0], iTable.at("scaler_output_31")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1",
			"Proba_0", "Proba_1",
			"LogProba_0", "LogProba_1",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/BreastCancer.csv");
	return 0;
}
