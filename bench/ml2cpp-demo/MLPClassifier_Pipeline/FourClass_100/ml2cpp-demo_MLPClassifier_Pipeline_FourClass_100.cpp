// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : MLPClassifier_Pipeline
// Dataset : FourClass_100

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_MLPClassifier_Pipeline_FourClass_100.exe ml2cpp-demo_MLPClassifier_Pipeline_FourClass_100.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3 };

		return lClasses;
	}

	namespace imputer {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
	
			tTable lTable;
	
			lTable["impter_2"] = { ((Feature_0 == std::any()) ?  ( -0.0014807007689716506 ) : ( Feature_0)) };
			lTable["impter_3"] = { ((Feature_1 == std::any()) ?  ( 0.08599214990681354 ) : ( Feature_1)) };
			lTable["impter_4"] = { ((Feature_2 == std::any()) ?  ( -0.006358164676411468 ) : ( Feature_2)) };
			lTable["impter_5"] = { ((Feature_3 == std::any()) ?  ( -0.024301807422776375 ) : ( Feature_3)) };
			lTable["impter_6"] = { ((Feature_4 == std::any()) ?  ( 0.015786548044298444 ) : ( Feature_4)) };
			lTable["impter_7"] = { ((Feature_5 == std::any()) ?  ( -0.13959329445651672 ) : ( Feature_5)) };
			lTable["impter_8"] = { ((Feature_6 == std::any()) ?  ( -0.06476745048019888 ) : ( Feature_6)) };
			lTable["impter_9"] = { ((Feature_7 == std::any()) ?  ( 0.025579810774090658 ) : ( Feature_7)) };
			lTable["impter_10"] = { ((Feature_8 == std::any()) ?  ( -0.03173937260977112 ) : ( Feature_8)) };
			lTable["impter_11"] = { ((Feature_9 == std::any()) ?  ( -0.1518141420862488 ) : ( Feature_9)) };
			lTable["impter_12"] = { ((Feature_10 == std::any()) ?  ( -0.13244576558492482 ) : ( Feature_10)) };
			lTable["impter_13"] = { ((Feature_11 == std::any()) ?  ( 0.044172679762224144 ) : ( Feature_11)) };
			lTable["impter_14"] = { ((Feature_12 == std::any()) ?  ( 0.010165946719810038 ) : ( Feature_12)) };
			lTable["impter_15"] = { ((Feature_13 == std::any()) ?  ( -0.03645872019103299 ) : ( Feature_13)) };
			lTable["impter_16"] = { ((Feature_14 == std::any()) ?  ( 0.06491512811593925 ) : ( Feature_14)) };
			lTable["impter_17"] = { ((Feature_15 == std::any()) ?  ( -0.11930146867074032 ) : ( Feature_15)) };
			lTable["impter_18"] = { ((Feature_16 == std::any()) ?  ( 0.007738863934852773 ) : ( Feature_16)) };
			lTable["impter_19"] = { ((Feature_17 == std::any()) ?  ( -0.1226774060147726 ) : ( Feature_17)) };
			lTable["impter_20"] = { ((Feature_18 == std::any()) ?  ( 0.019160881669086405 ) : ( Feature_18)) };
			lTable["impter_21"] = { ((Feature_19 == std::any()) ?  ( -0.26340351121131067 ) : ( Feature_19)) };
			lTable["impter_22"] = { ((Feature_20 == std::any()) ?  ( 0.035692361937735194 ) : ( Feature_20)) };
			lTable["impter_23"] = { ((Feature_21 == std::any()) ?  ( -0.010021324964069293 ) : ( Feature_21)) };
			lTable["impter_24"] = { ((Feature_22 == std::any()) ?  ( -0.1258614387723542 ) : ( Feature_22)) };
			lTable["impter_25"] = { ((Feature_23 == std::any()) ?  ( 0.09372773898231128 ) : ( Feature_23)) };
			lTable["impter_26"] = { ((Feature_24 == std::any()) ?  ( -0.1687929597880227 ) : ( Feature_24)) };
			lTable["impter_27"] = { ((Feature_25 == std::any()) ?  ( 0.10006283199629364 ) : ( Feature_25)) };
			lTable["impter_28"] = { ((Feature_26 == std::any()) ?  ( -0.10297858086822659 ) : ( Feature_26)) };
			lTable["impter_29"] = { ((Feature_27 == std::any()) ?  ( 0.19240514535870412 ) : ( Feature_27)) };
			lTable["impter_30"] = { ((Feature_28 == std::any()) ?  ( -0.052866434246092435 ) : ( Feature_28)) };
			lTable["impter_31"] = { ((Feature_29 == std::any()) ?  ( 0.26246121463661504 ) : ( Feature_29)) };
			lTable["impter_32"] = { ((Feature_30 == std::any()) ?  ( 0.002677575140361194 ) : ( Feature_30)) };
			lTable["impter_33"] = { ((Feature_31 == std::any()) ?  ( 0.09707041941284063 ) : ( Feature_31)) };
			lTable["impter_34"] = { ((Feature_32 == std::any()) ?  ( -0.032793219857333473 ) : ( Feature_32)) };
			lTable["impter_35"] = { ((Feature_33 == std::any()) ?  ( -0.003130273745908922 ) : ( Feature_33)) };
			lTable["impter_36"] = { ((Feature_34 == std::any()) ?  ( 0.053446276216279974 ) : ( Feature_34)) };
			lTable["impter_37"] = { ((Feature_35 == std::any()) ?  ( -0.18668146437412367 ) : ( Feature_35)) };
			lTable["impter_38"] = { ((Feature_36 == std::any()) ?  ( -0.029335964960866243 ) : ( Feature_36)) };
			lTable["impter_39"] = { ((Feature_37 == std::any()) ?  ( 0.07219772199502426 ) : ( Feature_37)) };
			lTable["impter_40"] = { ((Feature_38 == std::any()) ?  ( -0.0007762839781489412 ) : ( Feature_38)) };
			lTable["impter_41"] = { ((Feature_39 == std::any()) ?  ( 0.08270823712098274 ) : ( Feature_39)) };
			lTable["impter_42"] = { ((Feature_40 == std::any()) ?  ( 0.10432022852347983 ) : ( Feature_40)) };
			lTable["impter_43"] = { ((Feature_41 == std::any()) ?  ( 0.07058566385022276 ) : ( Feature_41)) };
			lTable["impter_44"] = { ((Feature_42 == std::any()) ?  ( 0.05096693098357383 ) : ( Feature_42)) };
			lTable["impter_45"] = { ((Feature_43 == std::any()) ?  ( 0.0660758203367818 ) : ( Feature_43)) };
			lTable["impter_46"] = { ((Feature_44 == std::any()) ?  ( -0.07075895636353369 ) : ( Feature_44)) };
			lTable["impter_47"] = { ((Feature_45 == std::any()) ?  ( 0.08422536561649958 ) : ( Feature_45)) };
			lTable["impter_48"] = { ((Feature_46 == std::any()) ?  ( 0.21367580667795616 ) : ( Feature_46)) };
			lTable["impter_49"] = { ((Feature_47 == std::any()) ?  ( -0.055897457335624984 ) : ( Feature_47)) };
			lTable["impter_50"] = { ((Feature_48 == std::any()) ?  ( -0.17453036726139812 ) : ( Feature_48)) };
			lTable["impter_51"] = { ((Feature_49 == std::any()) ?  ( -0.054944001818473996 ) : ( Feature_49)) };
			lTable["impter_52"] = { ((Feature_50 == std::any()) ?  ( -0.5961651261710368 ) : ( Feature_50)) };
			lTable["impter_53"] = { ((Feature_51 == std::any()) ?  ( 0.5020404526565605 ) : ( Feature_51)) };
			lTable["impter_54"] = { ((Feature_52 == std::any()) ?  ( -0.052340545201383926 ) : ( Feature_52)) };
			lTable["impter_55"] = { ((Feature_53 == std::any()) ?  ( 0.052943076116746535 ) : ( Feature_53)) };
			lTable["impter_56"] = { ((Feature_54 == std::any()) ?  ( 0.03835884479069335 ) : ( Feature_54)) };
			lTable["impter_57"] = { ((Feature_55 == std::any()) ?  ( -0.13571979014964694 ) : ( Feature_55)) };
			lTable["impter_58"] = { ((Feature_56 == std::any()) ?  ( -0.2190306843141183 ) : ( Feature_56)) };
			lTable["impter_59"] = { ((Feature_57 == std::any()) ?  ( -0.1191752362029383 ) : ( Feature_57)) };
			lTable["impter_60"] = { ((Feature_58 == std::any()) ?  ( 0.38058346912807667 ) : ( Feature_58)) };
			lTable["impter_61"] = { ((Feature_59 == std::any()) ?  ( -0.12720928974168508 ) : ( Feature_59)) };
			lTable["impter_62"] = { ((Feature_60 == std::any()) ?  ( -0.09072936496613782 ) : ( Feature_60)) };
			lTable["impter_63"] = { ((Feature_61 == std::any()) ?  ( -0.03915125937954538 ) : ( Feature_61)) };
			lTable["impter_64"] = { ((Feature_62 == std::any()) ?  ( 0.07075412393313481 ) : ( Feature_62)) };
			lTable["impter_65"] = { ((Feature_63 == std::any()) ?  ( 0.10124894587016948 ) : ( Feature_63)) };
			lTable["impter_66"] = { ((Feature_64 == std::any()) ?  ( -0.1945661449475579 ) : ( Feature_64)) };
			lTable["impter_67"] = { ((Feature_65 == std::any()) ?  ( -0.1759482981261233 ) : ( Feature_65)) };
			lTable["impter_68"] = { ((Feature_66 == std::any()) ?  ( 0.07473228971855511 ) : ( Feature_66)) };
			lTable["impter_69"] = { ((Feature_67 == std::any()) ?  ( 0.0377705562115906 ) : ( Feature_67)) };
			lTable["impter_70"] = { ((Feature_68 == std::any()) ?  ( 0.0139470898598917 ) : ( Feature_68)) };
			lTable["impter_71"] = { ((Feature_69 == std::any()) ?  ( 0.2582685725145942 ) : ( Feature_69)) };
			lTable["impter_72"] = { ((Feature_70 == std::any()) ?  ( 0.022975786233048922 ) : ( Feature_70)) };
			lTable["impter_73"] = { ((Feature_71 == std::any()) ?  ( 0.17445434061949525 ) : ( Feature_71)) };
			lTable["impter_74"] = { ((Feature_72 == std::any()) ?  ( -0.011413879692078346 ) : ( Feature_72)) };
			lTable["impter_75"] = { ((Feature_73 == std::any()) ?  ( 0.07898984156871978 ) : ( Feature_73)) };
			lTable["impter_76"] = { ((Feature_74 == std::any()) ?  ( 0.0952547273770713 ) : ( Feature_74)) };
			lTable["impter_77"] = { ((Feature_75 == std::any()) ?  ( -0.03997776839639901 ) : ( Feature_75)) };
			lTable["impter_78"] = { ((Feature_76 == std::any()) ?  ( -0.020839895874293496 ) : ( Feature_76)) };
			lTable["impter_79"] = { ((Feature_77 == std::any()) ?  ( -0.07284631986613152 ) : ( Feature_77)) };
			lTable["impter_80"] = { ((Feature_78 == std::any()) ?  ( -0.27389951764434384 ) : ( Feature_78)) };
			lTable["impter_81"] = { ((Feature_79 == std::any()) ?  ( 0.08057287885287609 ) : ( Feature_79)) };
			lTable["impter_82"] = { ((Feature_80 == std::any()) ?  ( -0.06244274245437891 ) : ( Feature_80)) };
			lTable["impter_83"] = { ((Feature_81 == std::any()) ?  ( -0.12290855334066887 ) : ( Feature_81)) };
			lTable["impter_84"] = { ((Feature_82 == std::any()) ?  ( 0.11639531793890918 ) : ( Feature_82)) };
			lTable["impter_85"] = { ((Feature_83 == std::any()) ?  ( -0.03350462786128603 ) : ( Feature_83)) };
			lTable["impter_86"] = { ((Feature_84 == std::any()) ?  ( -0.03914049968144583 ) : ( Feature_84)) };
			lTable["impter_87"] = { ((Feature_85 == std::any()) ?  ( 0.24193903072305167 ) : ( Feature_85)) };
			lTable["impter_88"] = { ((Feature_86 == std::any()) ?  ( -0.07389719862221904 ) : ( Feature_86)) };
			lTable["impter_89"] = { ((Feature_87 == std::any()) ?  ( 0.1400756228320113 ) : ( Feature_87)) };
			lTable["impter_90"] = { ((Feature_88 == std::any()) ?  ( 0.2765301935136145 ) : ( Feature_88)) };
			lTable["impter_91"] = { ((Feature_89 == std::any()) ?  ( -0.07957147169250885 ) : ( Feature_89)) };
			lTable["impter_92"] = { ((Feature_90 == std::any()) ?  ( 0.16295767680642717 ) : ( Feature_90)) };
			lTable["impter_93"] = { ((Feature_91 == std::any()) ?  ( 0.07062813888509549 ) : ( Feature_91)) };
			lTable["impter_94"] = { ((Feature_92 == std::any()) ?  ( 0.012995630151896219 ) : ( Feature_92)) };
			lTable["impter_95"] = { ((Feature_93 == std::any()) ?  ( 0.1055212408190415 ) : ( Feature_93)) };
			lTable["impter_96"] = { ((Feature_94 == std::any()) ?  ( -0.1408434425354362 ) : ( Feature_94)) };
			lTable["impter_97"] = { ((Feature_95 == std::any()) ?  ( -0.1574012366732725 ) : ( Feature_95)) };
			lTable["impter_98"] = { ((Feature_96 == std::any()) ?  ( 0.05477536676313335 ) : ( Feature_96)) };
			lTable["impter_99"] = { ((Feature_97 == std::any()) ?  ( 0.05673272205919614 ) : ( Feature_97)) };
			lTable["impter_100"] = { ((Feature_98 == std::any()) ?  ( -0.14226649213619527 ) : ( Feature_98)) };
			lTable["impter_101"] = { ((Feature_99 == std::any()) ?  ( -0.04042675289131947 ) : ( Feature_99)) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);
	
			return lTable;
		}
	
	} // eof namespace imputer
	

	namespace scaler {
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "impter_2", "impter_3", "impter_4", "impter_5", "impter_6", "impter_7", "impter_8", "impter_9", "impter_10", "impter_11", "impter_12", "impter_13", "impter_14", "impter_15", "impter_16", "impter_17", "impter_18", "impter_19", "impter_20", "impter_21", "impter_22", "impter_23", "impter_24", "impter_25", "impter_26", "impter_27", "impter_28", "impter_29", "impter_30", "impter_31", "impter_32", "impter_33", "impter_34", "impter_35", "impter_36", "impter_37", "impter_38", "impter_39", "impter_40", "impter_41", "impter_42", "impter_43", "impter_44", "impter_45", "impter_46", "impter_47", "impter_48", "impter_49", "impter_50", "impter_51", "impter_52", "impter_53", "impter_54", "impter_55", "impter_56", "impter_57", "impter_58", "impter_59", "impter_60", "impter_61", "impter_62", "impter_63", "impter_64", "impter_65", "impter_66", "impter_67", "impter_68", "impter_69", "impter_70", "impter_71", "impter_72", "impter_73", "impter_74", "impter_75", "impter_76", "impter_77", "impter_78", "impter_79", "impter_80", "impter_81", "impter_82", "impter_83", "impter_84", "impter_85", "impter_86", "impter_87", "impter_88", "impter_89", "impter_90", "impter_91", "impter_92", "impter_93", "impter_94", "impter_95", "impter_96", "impter_97", "impter_98", "impter_99", "impter_100", "impter_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lOutputs;
		}
	
		tTable compute_features(std::any impter_2, std::any impter_3, std::any impter_4, std::any impter_5, std::any impter_6, std::any impter_7, std::any impter_8, std::any impter_9, std::any impter_10, std::any impter_11, std::any impter_12, std::any impter_13, std::any impter_14, std::any impter_15, std::any impter_16, std::any impter_17, std::any impter_18, std::any impter_19, std::any impter_20, std::any impter_21, std::any impter_22, std::any impter_23, std::any impter_24, std::any impter_25, std::any impter_26, std::any impter_27, std::any impter_28, std::any impter_29, std::any impter_30, std::any impter_31, std::any impter_32, std::any impter_33, std::any impter_34, std::any impter_35, std::any impter_36, std::any impter_37, std::any impter_38, std::any impter_39, std::any impter_40, std::any impter_41, std::any impter_42, std::any impter_43, std::any impter_44, std::any impter_45, std::any impter_46, std::any impter_47, std::any impter_48, std::any impter_49, std::any impter_50, std::any impter_51, std::any impter_52, std::any impter_53, std::any impter_54, std::any impter_55, std::any impter_56, std::any impter_57, std::any impter_58, std::any impter_59, std::any impter_60, std::any impter_61, std::any impter_62, std::any impter_63, std::any impter_64, std::any impter_65, std::any impter_66, std::any impter_67, std::any impter_68, std::any impter_69, std::any impter_70, std::any impter_71, std::any impter_72, std::any impter_73, std::any impter_74, std::any impter_75, std::any impter_76, std::any impter_77, std::any impter_78, std::any impter_79, std::any impter_80, std::any impter_81, std::any impter_82, std::any impter_83, std::any impter_84, std::any impter_85, std::any impter_86, std::any impter_87, std::any impter_88, std::any impter_89, std::any impter_90, std::any impter_91, std::any impter_92, std::any impter_93, std::any impter_94, std::any impter_95, std::any impter_96, std::any impter_97, std::any impter_98, std::any impter_99, std::any impter_100, std::any impter_101) {
	
			tTable lTable;
	
			lTable["scaler_2"] = { ( ( impter_2 - -0.0014807007689716506 ) / 0.9211229790312512 ) };
			lTable["scaler_3"] = { ( ( impter_3 - 0.08599214990681354 ) / 0.9627516809237073 ) };
			lTable["scaler_4"] = { ( ( impter_4 - -0.006358164676411468 ) / 0.7890687835102894 ) };
			lTable["scaler_5"] = { ( ( impter_5 - -0.024301807422776375 ) / 1.0265272189083172 ) };
			lTable["scaler_6"] = { ( ( impter_6 - 0.015786548044298444 ) / 1.0198090908026474 ) };
			lTable["scaler_7"] = { ( ( impter_7 - -0.13959329445651672 ) / 0.9185551763293686 ) };
			lTable["scaler_8"] = { ( ( impter_8 - -0.06476745048019888 ) / 1.0393547249617474 ) };
			lTable["scaler_9"] = { ( ( impter_9 - 0.025579810774090658 ) / 0.8722131294644917 ) };
			lTable["scaler_10"] = { ( ( impter_10 - -0.03173937260977112 ) / 1.0164588299091024 ) };
			lTable["scaler_11"] = { ( ( impter_11 - -0.1518141420862488 ) / 1.0075402114297496 ) };
			lTable["scaler_12"] = { ( ( impter_12 - -0.13244576558492482 ) / 0.9215325459816371 ) };
			lTable["scaler_13"] = { ( ( impter_13 - 0.044172679762224144 ) / 0.9053279964066308 ) };
			lTable["scaler_14"] = { ( ( impter_14 - 0.010165946719810038 ) / 1.2190371046063362 ) };
			lTable["scaler_15"] = { ( ( impter_15 - -0.03645872019103299 ) / 1.0879005786584215 ) };
			lTable["scaler_16"] = { ( ( impter_16 - 0.06491512811593925 ) / 1.0274670201407186 ) };
			lTable["scaler_17"] = { ( ( impter_17 - -0.11930146867074032 ) / 0.9506312349761404 ) };
			lTable["scaler_18"] = { ( ( impter_18 - 0.007738863934852773 ) / 1.0928477585203984 ) };
			lTable["scaler_19"] = { ( ( impter_19 - -0.1226774060147726 ) / 0.9830561715965196 ) };
			lTable["scaler_20"] = { ( ( impter_20 - 0.019160881669086405 ) / 1.2117417920836373 ) };
			lTable["scaler_21"] = { ( ( impter_21 - -0.26340351121131067 ) / 0.9807419262255984 ) };
			lTable["scaler_22"] = { ( ( impter_22 - 0.035692361937735194 ) / 1.115824498468156 ) };
			lTable["scaler_23"] = { ( ( impter_23 - -0.010021324964069293 ) / 1.0790959803413318 ) };
			lTable["scaler_24"] = { ( ( impter_24 - -0.1258614387723542 ) / 1.0279672611547366 ) };
			lTable["scaler_25"] = { ( ( impter_25 - 0.09372773898231128 ) / 0.9690760299303989 ) };
			lTable["scaler_26"] = { ( ( impter_26 - -0.1687929597880227 ) / 0.8845858581996813 ) };
			lTable["scaler_27"] = { ( ( impter_27 - 0.10006283199629364 ) / 0.9149346104000894 ) };
			lTable["scaler_28"] = { ( ( impter_28 - -0.10297858086822659 ) / 1.0761397500557328 ) };
			lTable["scaler_29"] = { ( ( impter_29 - 0.19240514535870412 ) / 2.089882492597775 ) };
			lTable["scaler_30"] = { ( ( impter_30 - -0.052866434246092435 ) / 1.0030777529896888 ) };
			lTable["scaler_31"] = { ( ( impter_31 - 0.26246121463661504 ) / 1.9778491038473627 ) };
			lTable["scaler_32"] = { ( ( impter_32 - 0.002677575140361194 ) / 0.8833924915211555 ) };
			lTable["scaler_33"] = { ( ( impter_33 - 0.09707041941284063 ) / 0.8720005351713555 ) };
			lTable["scaler_34"] = { ( ( impter_34 - -0.032793219857333473 ) / 0.8745989090443193 ) };
			lTable["scaler_35"] = { ( ( impter_35 - -0.003130273745908922 ) / 0.9967699097535561 ) };
			lTable["scaler_36"] = { ( ( impter_36 - 0.053446276216279974 ) / 0.9997289112199433 ) };
			lTable["scaler_37"] = { ( ( impter_37 - -0.18668146437412367 ) / 1.0272287171310865 ) };
			lTable["scaler_38"] = { ( ( impter_38 - -0.029335964960866243 ) / 1.0427555960451658 ) };
			lTable["scaler_39"] = { ( ( impter_39 - 0.07219772199502426 ) / 0.8328229890456742 ) };
			lTable["scaler_40"] = { ( ( impter_40 - -0.0007762839781489412 ) / 0.9666524356457794 ) };
			lTable["scaler_41"] = { ( ( impter_41 - 0.08270823712098274 ) / 1.083670494683493 ) };
			lTable["scaler_42"] = { ( ( impter_42 - 0.10432022852347983 ) / 1.075472547982714 ) };
			lTable["scaler_43"] = { ( ( impter_43 - 0.07058566385022276 ) / 0.9993462791463713 ) };
			lTable["scaler_44"] = { ( ( impter_44 - 0.05096693098357383 ) / 0.8876971252794036 ) };
			lTable["scaler_45"] = { ( ( impter_45 - 0.0660758203367818 ) / 1.041246125313479 ) };
			lTable["scaler_46"] = { ( ( impter_46 - -0.07075895636353369 ) / 2.238310207242139 ) };
			lTable["scaler_47"] = { ( ( impter_47 - 0.08422536561649958 ) / 0.9520959686676432 ) };
			lTable["scaler_48"] = { ( ( impter_48 - 0.21367580667795616 ) / 0.9907230316111766 ) };
			lTable["scaler_49"] = { ( ( impter_49 - -0.055897457335624984 ) / 1.0392400714320487 ) };
			lTable["scaler_50"] = { ( ( impter_50 - -0.17453036726139812 ) / 2.001507098381001 ) };
			lTable["scaler_51"] = { ( ( impter_51 - -0.054944001818473996 ) / 1.0041645540091246 ) };
			lTable["scaler_52"] = { ( ( impter_52 - -0.5961651261710368 ) / 2.467511153399545 ) };
			lTable["scaler_53"] = { ( ( impter_53 - 0.5020404526565605 ) / 2.1929325118287792 ) };
			lTable["scaler_54"] = { ( ( impter_54 - -0.052340545201383926 ) / 0.98465558791252 ) };
			lTable["scaler_55"] = { ( ( impter_55 - 0.052943076116746535 ) / 1.8137042567337183 ) };
			lTable["scaler_56"] = { ( ( impter_56 - 0.03835884479069335 ) / 0.9241326354411343 ) };
			lTable["scaler_57"] = { ( ( impter_57 - -0.13571979014964694 ) / 0.8679095755948701 ) };
			lTable["scaler_58"] = { ( ( impter_58 - -0.2190306843141183 ) / 4.150428869748412 ) };
			lTable["scaler_59"] = { ( ( impter_59 - -0.1191752362029383 ) / 0.9123333408128436 ) };
			lTable["scaler_60"] = { ( ( impter_60 - 0.38058346912807667 ) / 3.5635011086986927 ) };
			lTable["scaler_61"] = { ( ( impter_61 - -0.12720928974168508 ) / 0.9301024475991629 ) };
			lTable["scaler_62"] = { ( ( impter_62 - -0.09072936496613782 ) / 0.9490501277306023 ) };
			lTable["scaler_63"] = { ( ( impter_63 - -0.03915125937954538 ) / 0.9029504608473613 ) };
			lTable["scaler_64"] = { ( ( impter_64 - 0.07075412393313481 ) / 0.9726561682528103 ) };
			lTable["scaler_65"] = { ( ( impter_65 - 0.10124894587016948 ) / 0.9403075920249493 ) };
			lTable["scaler_66"] = { ( ( impter_66 - -0.1945661449475579 ) / 0.9400903625732654 ) };
			lTable["scaler_67"] = { ( ( impter_67 - -0.1759482981261233 ) / 0.9435422049943787 ) };
			lTable["scaler_68"] = { ( ( impter_68 - 0.07473228971855511 ) / 0.8871003964319768 ) };
			lTable["scaler_69"] = { ( ( impter_69 - 0.0377705562115906 ) / 1.0228978549196588 ) };
			lTable["scaler_70"] = { ( ( impter_70 - 0.0139470898598917 ) / 0.9465728329079491 ) };
			lTable["scaler_71"] = { ( ( impter_71 - 0.2582685725145942 ) / 1.1027232016521478 ) };
			lTable["scaler_72"] = { ( ( impter_72 - 0.022975786233048922 ) / 0.9200436904809381 ) };
			lTable["scaler_73"] = { ( ( impter_73 - 0.17445434061949525 ) / 0.9009964742482128 ) };
			lTable["scaler_74"] = { ( ( impter_74 - -0.011413879692078346 ) / 0.9483377025565977 ) };
			lTable["scaler_75"] = { ( ( impter_75 - 0.07898984156871978 ) / 0.9726668138861088 ) };
			lTable["scaler_76"] = { ( ( impter_76 - 0.0952547273770713 ) / 0.9607867245873394 ) };
			lTable["scaler_77"] = { ( ( impter_77 - -0.03997776839639901 ) / 1.0318828686080972 ) };
			lTable["scaler_78"] = { ( ( impter_78 - -0.020839895874293496 ) / 0.945141993694461 ) };
			lTable["scaler_79"] = { ( ( impter_79 - -0.07284631986613152 ) / 0.9103416784348913 ) };
			lTable["scaler_80"] = { ( ( impter_80 - -0.27389951764434384 ) / 2.0362603862996735 ) };
			lTable["scaler_81"] = { ( ( impter_81 - 0.08057287885287609 ) / 0.9919292944224015 ) };
			lTable["scaler_82"] = { ( ( impter_82 - -0.06244274245437891 ) / 0.8113039293824552 ) };
			lTable["scaler_83"] = { ( ( impter_83 - -0.12290855334066887 ) / 1.0307302654711112 ) };
			lTable["scaler_84"] = { ( ( impter_84 - 0.11639531793890918 ) / 0.9993591951135242 ) };
			lTable["scaler_85"] = { ( ( impter_85 - -0.03350462786128603 ) / 1.0197598648594488 ) };
			lTable["scaler_86"] = { ( ( impter_86 - -0.03914049968144583 ) / 0.9022051622058084 ) };
			lTable["scaler_87"] = { ( ( impter_87 - 0.24193903072305167 ) / 0.9625742678392476 ) };
			lTable["scaler_88"] = { ( ( impter_88 - -0.07389719862221904 ) / 1.0080070985430696 ) };
			lTable["scaler_89"] = { ( ( impter_89 - 0.1400756228320113 ) / 0.9315791274848828 ) };
			lTable["scaler_90"] = { ( ( impter_90 - 0.2765301935136145 ) / 1.9455982323178656 ) };
			lTable["scaler_91"] = { ( ( impter_91 - -0.07957147169250885 ) / 0.9688848077884671 ) };
			lTable["scaler_92"] = { ( ( impter_92 - 0.16295767680642717 ) / 0.8952741904110189 ) };
			lTable["scaler_93"] = { ( ( impter_93 - 0.07062813888509549 ) / 0.8331748322730601 ) };
			lTable["scaler_94"] = { ( ( impter_94 - 0.012995630151896219 ) / 1.059167248118017 ) };
			lTable["scaler_95"] = { ( ( impter_95 - 0.1055212408190415 ) / 1.0525988978000902 ) };
			lTable["scaler_96"] = { ( ( impter_96 - -0.1408434425354362 ) / 0.9172372033996682 ) };
			lTable["scaler_97"] = { ( ( impter_97 - -0.1574012366732725 ) / 0.9930125433643069 ) };
			lTable["scaler_98"] = { ( ( impter_98 - 0.05477536676313335 ) / 0.9803136353653645 ) };
			lTable["scaler_99"] = { ( ( impter_99 - 0.05673272205919614 ) / 0.9296338032188498 ) };
			lTable["scaler_100"] = { ( ( impter_100 - -0.14226649213619527 ) / 1.174442941822933 ) };
			lTable["scaler_101"] = { ( ( impter_101 - -0.04042675289131947 ) / 1.983747550989713 ) };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_features(iTable.at("impter_2")[0], iTable.at("impter_3")[0], iTable.at("impter_4")[0], iTable.at("impter_5")[0], iTable.at("impter_6")[0], iTable.at("impter_7")[0], iTable.at("impter_8")[0], iTable.at("impter_9")[0], iTable.at("impter_10")[0], iTable.at("impter_11")[0], iTable.at("impter_12")[0], iTable.at("impter_13")[0], iTable.at("impter_14")[0], iTable.at("impter_15")[0], iTable.at("impter_16")[0], iTable.at("impter_17")[0], iTable.at("impter_18")[0], iTable.at("impter_19")[0], iTable.at("impter_20")[0], iTable.at("impter_21")[0], iTable.at("impter_22")[0], iTable.at("impter_23")[0], iTable.at("impter_24")[0], iTable.at("impter_25")[0], iTable.at("impter_26")[0], iTable.at("impter_27")[0], iTable.at("impter_28")[0], iTable.at("impter_29")[0], iTable.at("impter_30")[0], iTable.at("impter_31")[0], iTable.at("impter_32")[0], iTable.at("impter_33")[0], iTable.at("impter_34")[0], iTable.at("impter_35")[0], iTable.at("impter_36")[0], iTable.at("impter_37")[0], iTable.at("impter_38")[0], iTable.at("impter_39")[0], iTable.at("impter_40")[0], iTable.at("impter_41")[0], iTable.at("impter_42")[0], iTable.at("impter_43")[0], iTable.at("impter_44")[0], iTable.at("impter_45")[0], iTable.at("impter_46")[0], iTable.at("impter_47")[0], iTable.at("impter_48")[0], iTable.at("impter_49")[0], iTable.at("impter_50")[0], iTable.at("impter_51")[0], iTable.at("impter_52")[0], iTable.at("impter_53")[0], iTable.at("impter_54")[0], iTable.at("impter_55")[0], iTable.at("impter_56")[0], iTable.at("impter_57")[0], iTable.at("impter_58")[0], iTable.at("impter_59")[0], iTable.at("impter_60")[0], iTable.at("impter_61")[0], iTable.at("impter_62")[0], iTable.at("impter_63")[0], iTable.at("impter_64")[0], iTable.at("impter_65")[0], iTable.at("impter_66")[0], iTable.at("impter_67")[0], iTable.at("impter_68")[0], iTable.at("impter_69")[0], iTable.at("impter_70")[0], iTable.at("impter_71")[0], iTable.at("impter_72")[0], iTable.at("impter_73")[0], iTable.at("impter_74")[0], iTable.at("impter_75")[0], iTable.at("impter_76")[0], iTable.at("impter_77")[0], iTable.at("impter_78")[0], iTable.at("impter_79")[0], iTable.at("impter_80")[0], iTable.at("impter_81")[0], iTable.at("impter_82")[0], iTable.at("impter_83")[0], iTable.at("impter_84")[0], iTable.at("impter_85")[0], iTable.at("impter_86")[0], iTable.at("impter_87")[0], iTable.at("impter_88")[0], iTable.at("impter_89")[0], iTable.at("impter_90")[0], iTable.at("impter_91")[0], iTable.at("impter_92")[0], iTable.at("impter_93")[0], iTable.at("impter_94")[0], iTable.at("impter_95")[0], iTable.at("impter_96")[0], iTable.at("impter_97")[0], iTable.at("impter_98")[0], iTable.at("impter_99")[0], iTable.at("impter_100")[0], iTable.at("impter_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace scaler
	

	namespace model {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1, 2, 3 };
	
			return lClasses;
		}
	
		namespace InputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63", "input_64", "input_65", "input_66", "input_67", "input_68", "input_69", "input_70", "input_71", "input_72", "input_73", "input_74", "input_75", "input_76", "input_77", "input_78", "input_79", "input_80", "input_81", "input_82", "input_83", "input_84", "input_85", "input_86", "input_87", "input_88", "input_89", "input_90", "input_91", "input_92", "input_93", "input_94", "input_95", "input_96", "input_97", "input_98", "input_99" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65, std::any scaler_66, std::any scaler_67, std::any scaler_68, std::any scaler_69, std::any scaler_70, std::any scaler_71, std::any scaler_72, std::any scaler_73, std::any scaler_74, std::any scaler_75, std::any scaler_76, std::any scaler_77, std::any scaler_78, std::any scaler_79, std::any scaler_80, std::any scaler_81, std::any scaler_82, std::any scaler_83, std::any scaler_84, std::any scaler_85, std::any scaler_86, std::any scaler_87, std::any scaler_88, std::any scaler_89, std::any scaler_90, std::any scaler_91, std::any scaler_92, std::any scaler_93, std::any scaler_94, std::any scaler_95, std::any scaler_96, std::any scaler_97, std::any scaler_98, std::any scaler_99, std::any scaler_100, std::any scaler_101) {
		
				tTable lTable;
		
				lTable["input_0"] = { scaler_2 };
				lTable["input_1"] = { scaler_3 };
				lTable["input_2"] = { scaler_4 };
				lTable["input_3"] = { scaler_5 };
				lTable["input_4"] = { scaler_6 };
				lTable["input_5"] = { scaler_7 };
				lTable["input_6"] = { scaler_8 };
				lTable["input_7"] = { scaler_9 };
				lTable["input_8"] = { scaler_10 };
				lTable["input_9"] = { scaler_11 };
				lTable["input_10"] = { scaler_12 };
				lTable["input_11"] = { scaler_13 };
				lTable["input_12"] = { scaler_14 };
				lTable["input_13"] = { scaler_15 };
				lTable["input_14"] = { scaler_16 };
				lTable["input_15"] = { scaler_17 };
				lTable["input_16"] = { scaler_18 };
				lTable["input_17"] = { scaler_19 };
				lTable["input_18"] = { scaler_20 };
				lTable["input_19"] = { scaler_21 };
				lTable["input_20"] = { scaler_22 };
				lTable["input_21"] = { scaler_23 };
				lTable["input_22"] = { scaler_24 };
				lTable["input_23"] = { scaler_25 };
				lTable["input_24"] = { scaler_26 };
				lTable["input_25"] = { scaler_27 };
				lTable["input_26"] = { scaler_28 };
				lTable["input_27"] = { scaler_29 };
				lTable["input_28"] = { scaler_30 };
				lTable["input_29"] = { scaler_31 };
				lTable["input_30"] = { scaler_32 };
				lTable["input_31"] = { scaler_33 };
				lTable["input_32"] = { scaler_34 };
				lTable["input_33"] = { scaler_35 };
				lTable["input_34"] = { scaler_36 };
				lTable["input_35"] = { scaler_37 };
				lTable["input_36"] = { scaler_38 };
				lTable["input_37"] = { scaler_39 };
				lTable["input_38"] = { scaler_40 };
				lTable["input_39"] = { scaler_41 };
				lTable["input_40"] = { scaler_42 };
				lTable["input_41"] = { scaler_43 };
				lTable["input_42"] = { scaler_44 };
				lTable["input_43"] = { scaler_45 };
				lTable["input_44"] = { scaler_46 };
				lTable["input_45"] = { scaler_47 };
				lTable["input_46"] = { scaler_48 };
				lTable["input_47"] = { scaler_49 };
				lTable["input_48"] = { scaler_50 };
				lTable["input_49"] = { scaler_51 };
				lTable["input_50"] = { scaler_52 };
				lTable["input_51"] = { scaler_53 };
				lTable["input_52"] = { scaler_54 };
				lTable["input_53"] = { scaler_55 };
				lTable["input_54"] = { scaler_56 };
				lTable["input_55"] = { scaler_57 };
				lTable["input_56"] = { scaler_58 };
				lTable["input_57"] = { scaler_59 };
				lTable["input_58"] = { scaler_60 };
				lTable["input_59"] = { scaler_61 };
				lTable["input_60"] = { scaler_62 };
				lTable["input_61"] = { scaler_63 };
				lTable["input_62"] = { scaler_64 };
				lTable["input_63"] = { scaler_65 };
				lTable["input_64"] = { scaler_66 };
				lTable["input_65"] = { scaler_67 };
				lTable["input_66"] = { scaler_68 };
				lTable["input_67"] = { scaler_69 };
				lTable["input_68"] = { scaler_70 };
				lTable["input_69"] = { scaler_71 };
				lTable["input_70"] = { scaler_72 };
				lTable["input_71"] = { scaler_73 };
				lTable["input_72"] = { scaler_74 };
				lTable["input_73"] = { scaler_75 };
				lTable["input_74"] = { scaler_76 };
				lTable["input_75"] = { scaler_77 };
				lTable["input_76"] = { scaler_78 };
				lTable["input_77"] = { scaler_79 };
				lTable["input_78"] = { scaler_80 };
				lTable["input_79"] = { scaler_81 };
				lTable["input_80"] = { scaler_82 };
				lTable["input_81"] = { scaler_83 };
				lTable["input_82"] = { scaler_84 };
				lTable["input_83"] = { scaler_85 };
				lTable["input_84"] = { scaler_86 };
				lTable["input_85"] = { scaler_87 };
				lTable["input_86"] = { scaler_88 };
				lTable["input_87"] = { scaler_89 };
				lTable["input_88"] = { scaler_90 };
				lTable["input_89"] = { scaler_91 };
				lTable["input_90"] = { scaler_92 };
				lTable["input_91"] = { scaler_93 };
				lTable["input_92"] = { scaler_94 };
				lTable["input_93"] = { scaler_95 };
				lTable["input_94"] = { scaler_96 };
				lTable["input_95"] = { scaler_97 };
				lTable["input_96"] = { scaler_98 };
				lTable["input_97"] = { scaler_99 };
				lTable["input_98"] = { scaler_100 };
				lTable["input_99"] = { scaler_101 };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0], iTable.at("scaler_66")[0], iTable.at("scaler_67")[0], iTable.at("scaler_68")[0], iTable.at("scaler_69")[0], iTable.at("scaler_70")[0], iTable.at("scaler_71")[0], iTable.at("scaler_72")[0], iTable.at("scaler_73")[0], iTable.at("scaler_74")[0], iTable.at("scaler_75")[0], iTable.at("scaler_76")[0], iTable.at("scaler_77")[0], iTable.at("scaler_78")[0], iTable.at("scaler_79")[0], iTable.at("scaler_80")[0], iTable.at("scaler_81")[0], iTable.at("scaler_82")[0], iTable.at("scaler_83")[0], iTable.at("scaler_84")[0], iTable.at("scaler_85")[0], iTable.at("scaler_86")[0], iTable.at("scaler_87")[0], iTable.at("scaler_88")[0], iTable.at("scaler_89")[0], iTable.at("scaler_90")[0], iTable.at("scaler_91")[0], iTable.at("scaler_92")[0], iTable.at("scaler_93")[0], iTable.at("scaler_94")[0], iTable.at("scaler_95")[0], iTable.at("scaler_96")[0], iTable.at("scaler_97")[0], iTable.at("scaler_98")[0], iTable.at("scaler_99")[0], iTable.at("scaler_100")[0], iTable.at("scaler_101")[0]);
		
				return lTable;
			}
		
		} // eof namespace InputLayer
		
	
		namespace HiddenLayer_1 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "input_0", "input_1", "input_2", "input_3", "input_4", "input_5", "input_6", "input_7", "input_8", "input_9", "input_10", "input_11", "input_12", "input_13", "input_14", "input_15", "input_16", "input_17", "input_18", "input_19", "input_20", "input_21", "input_22", "input_23", "input_24", "input_25", "input_26", "input_27", "input_28", "input_29", "input_30", "input_31", "input_32", "input_33", "input_34", "input_35", "input_36", "input_37", "input_38", "input_39", "input_40", "input_41", "input_42", "input_43", "input_44", "input_45", "input_46", "input_47", "input_48", "input_49", "input_50", "input_51", "input_52", "input_53", "input_54", "input_55", "input_56", "input_57", "input_58", "input_59", "input_60", "input_61", "input_62", "input_63", "input_64", "input_65", "input_66", "input_67", "input_68", "input_69", "input_70", "input_71", "input_72", "input_73", "input_74", "input_75", "input_76", "input_77", "input_78", "input_79", "input_80", "input_81", "input_82", "input_83", "input_84", "input_85", "input_86", "input_87", "input_88", "input_89", "input_90", "input_91", "input_92", "input_93", "input_94", "input_95", "input_96", "input_97", "input_98", "input_99" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any input_0, std::any input_1, std::any input_2, std::any input_3, std::any input_4, std::any input_5, std::any input_6, std::any input_7, std::any input_8, std::any input_9, std::any input_10, std::any input_11, std::any input_12, std::any input_13, std::any input_14, std::any input_15, std::any input_16, std::any input_17, std::any input_18, std::any input_19, std::any input_20, std::any input_21, std::any input_22, std::any input_23, std::any input_24, std::any input_25, std::any input_26, std::any input_27, std::any input_28, std::any input_29, std::any input_30, std::any input_31, std::any input_32, std::any input_33, std::any input_34, std::any input_35, std::any input_36, std::any input_37, std::any input_38, std::any input_39, std::any input_40, std::any input_41, std::any input_42, std::any input_43, std::any input_44, std::any input_45, std::any input_46, std::any input_47, std::any input_48, std::any input_49, std::any input_50, std::any input_51, std::any input_52, std::any input_53, std::any input_54, std::any input_55, std::any input_56, std::any input_57, std::any input_58, std::any input_59, std::any input_60, std::any input_61, std::any input_62, std::any input_63, std::any input_64, std::any input_65, std::any input_66, std::any input_67, std::any input_68, std::any input_69, std::any input_70, std::any input_71, std::any input_72, std::any input_73, std::any input_74, std::any input_75, std::any input_76, std::any input_77, std::any input_78, std::any input_79, std::any input_80, std::any input_81, std::any input_82, std::any input_83, std::any input_84, std::any input_85, std::any input_86, std::any input_87, std::any input_88, std::any input_89, std::any input_90, std::any input_91, std::any input_92, std::any input_93, std::any input_94, std::any input_95, std::any input_96, std::any input_97, std::any input_98, std::any input_99) {
		
				tTable lTable;
		
				double output_1_0_BA = -7.819182529608737 * input_0 + 0.4674411740815112 * input_1 + 0.3298550058200816 * input_2 + -6.457865580697606 * input_3 + -3.421740457547903 * input_4 + 4.4099671528420785 * input_5 + -4.679694402963457 * input_6 + -2.9922952358240242 * input_7 + -0.9431354277883887 * input_8 + -0.42140359806758987 * input_9 + -6.301470138000251 * input_10 + 4.049341912499742 * input_11 + 4.356088230002235 * input_12 + 6.854252632863843 * input_13 + 8.55815169632378 * input_14 + -4.59269279909845 * input_15 + -0.6970041020688162 * input_16 + -6.988793148703851 * input_17 + 0.9630524747684566 * input_18 + 0.43758728202529523 * input_19 + -1.8435214707224217 * input_20 + 1.6297685128406354 * input_21 + 5.025056358271711 * input_22 + -4.286504546962539 * input_23 + 4.622617604832105 * input_24 + 5.25235374823984 * input_25 + -0.8952793412539769 * input_26 + -2.232864378813136 * input_27 + -0.12013315262624641 * input_28 + 3.2392604747341003 * input_29 + -3.3522941212446176 * input_30 + -0.19526627328705196 * input_31 + 0.7969384032137248 * input_32 + -9.083122078763207 * input_33 + -1.6602563391735154 * input_34 + -1.3524925678104742 * input_35 + -3.380547535765113 * input_36 + 5.576078201773773 * input_37 + -3.0698552184698054 * input_38 + -5.645579894785793 * input_39 + -1.0913444278771127 * input_40 + -4.065208101239755 * input_41 + 2.371684531355223 * input_42 + 4.4505725134961205 * input_43 + -3.489044272834106 * input_44 + 8.847535440125315 * input_45 + 6.122613481794019 * input_46 + 1.7538982750426129 * input_47 + 2.5920647125844587 * input_48 + -6.129508105539009 * input_49 + 1.145206382525679 * input_50 + -4.934470718324702 * input_51 + 4.0156769058358375 * input_52 + -6.88975170324535 * input_53 + -5.156993155432996 * input_54 + 0.12742386240157283 * input_55 + -6.563242906316767 * input_56 + 9.60450984769734 * input_57 + 2.8257052582602813 * input_58 + -0.16272878119065362 * input_59 + -1.8551152363140957 * input_60 + 10.686226198201341 * input_61 + -6.97909222221533 * input_62 + 2.7345928943977813 * input_63 + -7.805130513085591 * input_64 + -4.278104767367156 * input_65 + -5.023835945139666 * input_66 + -2.657821797836934 * input_67 + 2.1947265841310464 * input_68 + -0.10380689453406759 * input_69 + -0.06856167869328705 * input_70 + 8.06106993200542 * input_71 + -1.647239014491039 * input_72 + 2.0259635725676017 * input_73 + -0.5572755361453864 * input_74 + -9.554392739720111 * input_75 + -7.449572038864027 * input_76 + 2.3004108941747394 * input_77 + 4.679760728468198 * input_78 + -0.9896797050429199 * input_79 + -2.3847065816965953 * input_80 + 4.346529704013787 * input_81 + -8.499171979548676 * input_82 + 3.685933832892703 * input_83 + 1.113106126878296 * input_84 + 2.8089058483150366 * input_85 + 1.966228510177809 * input_86 + -1.5994298221863361 * input_87 + -2.5430176627725385 * input_88 + -7.403540976024794 * input_89 + 2.80693385019193 * input_90 + -5.408875415948303 * input_91 + -4.13944006009687 * input_92 + -2.4148851929324313 * input_93 + 1.6161234224823686 * input_94 + 5.607445198031907 * input_95 + -4.725113427650642 * input_96 + -1.542673559510617 * input_97 + -12.41394846986051 * input_98 + 6.345915396005904 * input_99 + 2.9739661680755463;
		
				double output_1_1_BA = 0.9940020042891564 * input_0 + 1.1431028893286588 * input_1 + -1.231723985836855 * input_2 + 2.592619768246643 * input_3 + 2.126537006354848 * input_4 + 3.489939547526907 * input_5 + 5.501552217340831 * input_6 + 0.36387435166624127 * input_7 + 6.2065244663277666 * input_8 + -2.0232234887039287 * input_9 + -0.031382219491186795 * input_10 + -0.4170123403738815 * input_11 + 2.9158593678510796 * input_12 + 4.37982269753518 * input_13 + 5.537775922959837 * input_14 + -0.9027391195602313 * input_15 + -4.736337790304827 * input_16 + 3.1083213721425773 * input_17 + 0.6919966085370932 * input_18 + 6.51033060648553 * input_19 + -0.11407170120549791 * input_20 + 1.1999799653082344 * input_21 + -0.9057517400458693 * input_22 + 7.329419084710125 * input_23 + 6.627671695072292 * input_24 + 6.244639989626961 * input_25 + 1.1956653559296964 * input_26 + -3.6869957832625877 * input_27 + 0.402735994650295 * input_28 + 2.7992322930853 * input_29 + -3.727392934073237 * input_30 + -3.1401895332520726 * input_31 + -1.253256950617562 * input_32 + 1.7766926176994613 * input_33 + 6.449189664604627 * input_34 + -6.183396329770422 * input_35 + 8.463410731303142 * input_36 + -3.2080222690167437 * input_37 + 6.250058062385499 * input_38 + 6.849174895639191 * input_39 + 5.169535360682205 * input_40 + -0.902292494386338 * input_41 + 6.1879569795377325 * input_42 + 2.7148048635301683 * input_43 + 2.259398933152611 * input_44 + -2.7306127099172013 * input_45 + 5.017651327514787 * input_46 + -1.3647856502263362 * input_47 + 1.119049648633249 * input_48 + 2.89649443990707 * input_49 + 5.426540813010521 * input_50 + 0.2758046013483751 * input_51 + -4.320291214473103 * input_52 + 6.532112659997436 * input_53 + 1.3030889650463509 * input_54 + -5.279710819731682 * input_55 + 3.4850549968617197 * input_56 + -0.5009913400829844 * input_57 + -4.215575918841868 * input_58 + 6.186781783869082 * input_59 + -1.944053549978951 * input_60 + 0.49330487757557806 * input_61 + -1.555049311613327 * input_62 + -0.23655804120846993 * input_63 + -2.6443926478594606 * input_64 + -4.422830325457253 * input_65 + -1.4248587544992342 * input_66 + 1.1922733586859995 * input_67 + -2.6089638089515597 * input_68 + -2.7359118777885363 * input_69 + -0.9745291112312525 * input_70 + 2.0361787582113915 * input_71 + 0.10496535806660612 * input_72 + -0.6231950094895393 * input_73 + -5.234189746687568 * input_74 + -0.7310250441343809 * input_75 + 0.5022152618682342 * input_76 + -2.3081388252966657 * input_77 + -3.732018304060424 * input_78 + 0.32606759437977867 * input_79 + 3.8115813702953556 * input_80 + -0.8974149662446169 * input_81 + 1.1922157091555738 * input_82 + -2.109067316578009 * input_83 + -0.8056764198688255 * input_84 + -5.757991881459759 * input_85 + -5.1873021757088775 * input_86 + -0.9814458642122313 * input_87 + -12.680573908052596 * input_88 + 1.769620197059356 * input_89 + -4.041984202098713 * input_90 + -1.8216113772510483 * input_91 + -4.771151022671214 * input_92 + -5.733330606242208 * input_93 + -3.384648180201762 * input_94 + 3.1915209925413817 * input_95 + 6.413336178211822 * input_96 + -0.5158126877402504 * input_97 + 1.7237088929191455 * input_98 + -2.9210368622256078 * input_99 + 4.7879803228769795;
		
				double output_1_2_BA = -1.39348704977022 * input_0 + -3.400477871056909 * input_1 + -3.9149274597854964 * input_2 + -0.2001703122491863 * input_3 + -1.0970780563846956 * input_4 + 4.140649983885277 * input_5 + 0.5400355027332766 * input_6 + -0.9795839027001368 * input_7 + -1.4454681190144942 * input_8 + 2.6539984191802053 * input_9 + -2.9376908486288626 * input_10 + 2.213780094375587 * input_11 + 0.390496152398947 * input_12 + -6.067019444308686 * input_13 + -5.771366548632297 * input_14 + -6.040200563489028 * input_15 + -3.8832030872399876 * input_16 + -3.5115399972399697 * input_17 + -3.2498522176425064 * input_18 + -9.337554389353484 * input_19 + 2.7698148651636387 * input_20 + -0.11129176170811407 * input_21 + -0.745576423732492 * input_22 + 1.7777775282489763 * input_23 + -2.241873178190262 * input_24 + 0.18520218684049056 * input_25 + -0.25083395776976936 * input_26 + 4.32618804378699 * input_27 + 7.406140969644273 * input_28 + -3.7469005344456496 * input_29 + 4.0534963829238 * input_30 + 1.5874090464613255 * input_31 + 0.8818450501210101 * input_32 + 2.1503814925439197 * input_33 + 1.4056482425471626 * input_34 + -5.233458354712619 * input_35 + 1.867273862802956 * input_36 + -0.41336261424480547 * input_37 + 7.059793609523439 * input_38 + 0.826668829610077 * input_39 + 1.5070055400610813 * input_40 + 1.8701067397014683 * input_41 + -1.0905705049041055 * input_42 + -5.811608601435425 * input_43 + -9.726086687592128 * input_44 + -1.6188817930599626 * input_45 + -2.123817810026894 * input_46 + 6.588698773120163 * input_47 + -0.573547011215032 * input_48 + 0.5960141715105753 * input_49 + 1.813987774005208 * input_50 + 0.5974397560405986 * input_51 + 0.4028856546887454 * input_52 + -2.1828111474012757 * input_53 + -4.769979334659081 * input_54 + 3.407016653357303 * input_55 + -2.6726806014620976 * input_56 + -1.664547283252276 * input_57 + 3.0323345231000656 * input_58 + -2.768088972231191 * input_59 + 0.11412160673203549 * input_60 + -7.674860185095361 * input_61 + 4.4868082853993485 * input_62 + -0.03807259657351621 * input_63 + 2.0323883688555755 * input_64 + 0.5598698610509968 * input_65 + 2.422650968846458 * input_66 + 2.76714631977712 * input_67 + -3.612643554128555 * input_68 + -1.373516695945343 * input_69 + 1.8528070141568573 * input_70 + 4.388532911359172 * input_71 + 4.826733966836731 * input_72 + -4.586303043606759 * input_73 + 2.907788509104142 * input_74 + -4.58817474065361 * input_75 + 5.484837331525438 * input_76 + -5.184843323063333 * input_77 + -4.295720244896506 * input_78 + 5.253149157315433 * input_79 + 0.20865386406820002 * input_80 + 2.772772935492307 * input_81 + 2.2381614438360717 * input_82 + 0.39262320327684846 * input_83 + -2.746490447620652 * input_84 + 3.6651750832218633 * input_85 + -0.5328630206399866 * input_86 + -0.27129575669591455 * input_87 + 0.8580893714735403 * input_88 + 3.61254436467274 * input_89 + -6.162351746933954 * input_90 + 2.3647002323577695 * input_91 + 2.1709084179166194 * input_92 + 2.117751065504001 * input_93 + 2.376353413445402 * input_94 + -0.6462930018252291 * input_95 + 3.551832514143184 * input_96 + 2.9983379432434454 * input_97 + 3.742736484858384 * input_98 + 4.244732844791504 * input_99 + -4.263220276625824;
		
				lTable["output_1_0"] = { relu(output_1_0_BA) };
				lTable["output_1_1"] = { relu(output_1_1_BA) };
				lTable["output_1_2"] = { relu(output_1_2_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("input_0")[0], iTable.at("input_1")[0], iTable.at("input_2")[0], iTable.at("input_3")[0], iTable.at("input_4")[0], iTable.at("input_5")[0], iTable.at("input_6")[0], iTable.at("input_7")[0], iTable.at("input_8")[0], iTable.at("input_9")[0], iTable.at("input_10")[0], iTable.at("input_11")[0], iTable.at("input_12")[0], iTable.at("input_13")[0], iTable.at("input_14")[0], iTable.at("input_15")[0], iTable.at("input_16")[0], iTable.at("input_17")[0], iTable.at("input_18")[0], iTable.at("input_19")[0], iTable.at("input_20")[0], iTable.at("input_21")[0], iTable.at("input_22")[0], iTable.at("input_23")[0], iTable.at("input_24")[0], iTable.at("input_25")[0], iTable.at("input_26")[0], iTable.at("input_27")[0], iTable.at("input_28")[0], iTable.at("input_29")[0], iTable.at("input_30")[0], iTable.at("input_31")[0], iTable.at("input_32")[0], iTable.at("input_33")[0], iTable.at("input_34")[0], iTable.at("input_35")[0], iTable.at("input_36")[0], iTable.at("input_37")[0], iTable.at("input_38")[0], iTable.at("input_39")[0], iTable.at("input_40")[0], iTable.at("input_41")[0], iTable.at("input_42")[0], iTable.at("input_43")[0], iTable.at("input_44")[0], iTable.at("input_45")[0], iTable.at("input_46")[0], iTable.at("input_47")[0], iTable.at("input_48")[0], iTable.at("input_49")[0], iTable.at("input_50")[0], iTable.at("input_51")[0], iTable.at("input_52")[0], iTable.at("input_53")[0], iTable.at("input_54")[0], iTable.at("input_55")[0], iTable.at("input_56")[0], iTable.at("input_57")[0], iTable.at("input_58")[0], iTable.at("input_59")[0], iTable.at("input_60")[0], iTable.at("input_61")[0], iTable.at("input_62")[0], iTable.at("input_63")[0], iTable.at("input_64")[0], iTable.at("input_65")[0], iTable.at("input_66")[0], iTable.at("input_67")[0], iTable.at("input_68")[0], iTable.at("input_69")[0], iTable.at("input_70")[0], iTable.at("input_71")[0], iTable.at("input_72")[0], iTable.at("input_73")[0], iTable.at("input_74")[0], iTable.at("input_75")[0], iTable.at("input_76")[0], iTable.at("input_77")[0], iTable.at("input_78")[0], iTable.at("input_79")[0], iTable.at("input_80")[0], iTable.at("input_81")[0], iTable.at("input_82")[0], iTable.at("input_83")[0], iTable.at("input_84")[0], iTable.at("input_85")[0], iTable.at("input_86")[0], iTable.at("input_87")[0], iTable.at("input_88")[0], iTable.at("input_89")[0], iTable.at("input_90")[0], iTable.at("input_91")[0], iTable.at("input_92")[0], iTable.at("input_93")[0], iTable.at("input_94")[0], iTable.at("input_95")[0], iTable.at("input_96")[0], iTable.at("input_97")[0], iTable.at("input_98")[0], iTable.at("input_99")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_1
		
	
		namespace HiddenLayer_2 {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_1_0", "output_1_1", "output_1_2" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_1_0, std::any output_1_1, std::any output_1_2) {
		
				tTable lTable;
		
				double output_2_0_BA = 0.10802976452010563 * output_1_0 + -2.0063968266907546 * output_1_1 + 8.363603476553712 * output_1_2 + -8.374014885713647;
		
				double output_2_1_BA = -4.3091315705582165 * output_1_0 + -15.664856464559804 * output_1_1 + 11.350054937072267 * output_1_2 + 28.124192677261043;
		
				double output_2_2_BA = -4.589356932209021 * output_1_0 + 6.2265353509054675 * output_1_1 + 1.700105093902905 * output_1_2 + -12.112660334549481;
		
				double output_2_3_BA = -0.2572171444355464 * output_1_0 + 14.615823185313058 * output_1_1 + -3.8052461544885894 * output_1_2 + 3.027691853410666;
		
				double output_2_4_BA = -0.6090807525124998 * output_1_0 + -0.37750359570376124 * output_1_1 + -0.6727078271691377 * output_1_2 + -0.01807831622698608;
		
				lTable["output_2_0"] = { relu(output_2_0_BA) };
				lTable["output_2_1"] = { relu(output_2_1_BA) };
				lTable["output_2_2"] = { relu(output_2_2_BA) };
				lTable["output_2_3"] = { relu(output_2_3_BA) };
				lTable["output_2_4"] = { relu(output_2_4_BA) };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_1_0")[0], iTable.at("output_1_1")[0], iTable.at("output_1_2")[0]);
		
				return lTable;
			}
		
		} // eof namespace HiddenLayer_2
		
	
		namespace OutputLayer {
		
			std::vector<std::string> get_input_names(){
				std::vector<std::string> lFeatures = { "output_2_0", "output_2_1", "output_2_2", "output_2_3", "output_2_4" };
		
				return lFeatures;
			}
		
			std::vector<std::string> get_output_names(){
				std::vector<std::string> lOutputs = { "Score_0", "Score_1", "Score_2", "Score_3" };
		
				return lOutputs;
			}
		
			tTable compute_features(std::any output_2_0, std::any output_2_1, std::any output_2_2, std::any output_2_3, std::any output_2_4) {
		
				tTable lTable;
		
				double output_3_0_BA = 4.718100392185259 * output_2_0 + -24.414581406791967 * output_2_1 + -12.026809652638061 * output_2_2 + 10.643330810500819 * output_2_3 + 0.5896314269660224 * output_2_4 + 7.37103547144288;
		
				double output_3_1_BA = -2.9536505687809553 * output_2_0 + 10.75894614803965 * output_2_1 + -4.319075921993463 * output_2_2 + -20.061275237070763 * output_2_3 + 0.39593149853253623 * output_2_4 + 18.35093719466543;
		
				double output_3_2_BA = 6.267578477731394 * output_2_0 + 3.8167416066224003 * output_2_1 + 2.6908364748985085 * output_2_2 + 6.277348406594461 * output_2_3 + 0.663217147947745 * output_2_4 + -4.634733310755835;
		
				double output_3_3_BA = -7.416021809761832 * output_2_0 + 10.20338865174805 * output_2_1 + 12.863370790421959 * output_2_2 + 2.864946672429105 * output_2_3 + -0.4853152942504172 * output_2_4 + -22.404689575004987;
		
				lTable["Score_0"] = { output_3_0_BA };
				lTable["Score_1"] = { output_3_1_BA };
				lTable["Score_2"] = { output_3_2_BA };
				lTable["Score_3"] = { output_3_3_BA };
		
				return lTable;
			}
		
			tTable compute_model_outputs_from_table( tTable const & iTable) {
				tTable lTable = compute_features(iTable.at("output_2_0")[0], iTable.at("output_2_1")[0], iTable.at("output_2_2")[0], iTable.at("output_2_3")[0], iTable.at("output_2_4")[0]);
		
				return lTable;
			}
		
		} // eof namespace OutputLayer
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "scaler_2", "scaler_3", "scaler_4", "scaler_5", "scaler_6", "scaler_7", "scaler_8", "scaler_9", "scaler_10", "scaler_11", "scaler_12", "scaler_13", "scaler_14", "scaler_15", "scaler_16", "scaler_17", "scaler_18", "scaler_19", "scaler_20", "scaler_21", "scaler_22", "scaler_23", "scaler_24", "scaler_25", "scaler_26", "scaler_27", "scaler_28", "scaler_29", "scaler_30", "scaler_31", "scaler_32", "scaler_33", "scaler_34", "scaler_35", "scaler_36", "scaler_37", "scaler_38", "scaler_39", "scaler_40", "scaler_41", "scaler_42", "scaler_43", "scaler_44", "scaler_45", "scaler_46", "scaler_47", "scaler_48", "scaler_49", "scaler_50", "scaler_51", "scaler_52", "scaler_53", "scaler_54", "scaler_55", "scaler_56", "scaler_57", "scaler_58", "scaler_59", "scaler_60", "scaler_61", "scaler_62", "scaler_63", "scaler_64", "scaler_65", "scaler_66", "scaler_67", "scaler_68", "scaler_69", "scaler_70", "scaler_71", "scaler_72", "scaler_73", "scaler_74", "scaler_75", "scaler_76", "scaler_77", "scaler_78", "scaler_79", "scaler_80", "scaler_81", "scaler_82", "scaler_83", "scaler_84", "scaler_85", "scaler_86", "scaler_87", "scaler_88", "scaler_89", "scaler_90", "scaler_91", "scaler_92", "scaler_93", "scaler_94", "scaler_95", "scaler_96", "scaler_97", "scaler_98", "scaler_99", "scaler_100", "scaler_101" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1", "Score_2", "Score_3",
				"Proba_0", "Proba_1", "Proba_2", "Proba_3",
				"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
				"Decision", "DecisionProba" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any scaler_2, std::any scaler_3, std::any scaler_4, std::any scaler_5, std::any scaler_6, std::any scaler_7, std::any scaler_8, std::any scaler_9, std::any scaler_10, std::any scaler_11, std::any scaler_12, std::any scaler_13, std::any scaler_14, std::any scaler_15, std::any scaler_16, std::any scaler_17, std::any scaler_18, std::any scaler_19, std::any scaler_20, std::any scaler_21, std::any scaler_22, std::any scaler_23, std::any scaler_24, std::any scaler_25, std::any scaler_26, std::any scaler_27, std::any scaler_28, std::any scaler_29, std::any scaler_30, std::any scaler_31, std::any scaler_32, std::any scaler_33, std::any scaler_34, std::any scaler_35, std::any scaler_36, std::any scaler_37, std::any scaler_38, std::any scaler_39, std::any scaler_40, std::any scaler_41, std::any scaler_42, std::any scaler_43, std::any scaler_44, std::any scaler_45, std::any scaler_46, std::any scaler_47, std::any scaler_48, std::any scaler_49, std::any scaler_50, std::any scaler_51, std::any scaler_52, std::any scaler_53, std::any scaler_54, std::any scaler_55, std::any scaler_56, std::any scaler_57, std::any scaler_58, std::any scaler_59, std::any scaler_60, std::any scaler_61, std::any scaler_62, std::any scaler_63, std::any scaler_64, std::any scaler_65, std::any scaler_66, std::any scaler_67, std::any scaler_68, std::any scaler_69, std::any scaler_70, std::any scaler_71, std::any scaler_72, std::any scaler_73, std::any scaler_74, std::any scaler_75, std::any scaler_76, std::any scaler_77, std::any scaler_78, std::any scaler_79, std::any scaler_80, std::any scaler_81, std::any scaler_82, std::any scaler_83, std::any scaler_84, std::any scaler_85, std::any scaler_86, std::any scaler_87, std::any scaler_88, std::any scaler_89, std::any scaler_90, std::any scaler_91, std::any scaler_92, std::any scaler_93, std::any scaler_94, std::any scaler_95, std::any scaler_96, std::any scaler_97, std::any scaler_98, std::any scaler_99, std::any scaler_100, std::any scaler_101) {
			auto lClasses = get_classes();
	
			tTable lTable_InputLayer = InputLayer::compute_features(scaler_2, scaler_3, scaler_4, scaler_5, scaler_6, scaler_7, scaler_8, scaler_9, scaler_10, scaler_11, scaler_12, scaler_13, scaler_14, scaler_15, scaler_16, scaler_17, scaler_18, scaler_19, scaler_20, scaler_21, scaler_22, scaler_23, scaler_24, scaler_25, scaler_26, scaler_27, scaler_28, scaler_29, scaler_30, scaler_31, scaler_32, scaler_33, scaler_34, scaler_35, scaler_36, scaler_37, scaler_38, scaler_39, scaler_40, scaler_41, scaler_42, scaler_43, scaler_44, scaler_45, scaler_46, scaler_47, scaler_48, scaler_49, scaler_50, scaler_51, scaler_52, scaler_53, scaler_54, scaler_55, scaler_56, scaler_57, scaler_58, scaler_59, scaler_60, scaler_61, scaler_62, scaler_63, scaler_64, scaler_65, scaler_66, scaler_67, scaler_68, scaler_69, scaler_70, scaler_71, scaler_72, scaler_73, scaler_74, scaler_75, scaler_76, scaler_77, scaler_78, scaler_79, scaler_80, scaler_81, scaler_82, scaler_83, scaler_84, scaler_85, scaler_86, scaler_87, scaler_88, scaler_89, scaler_90, scaler_91, scaler_92, scaler_93, scaler_94, scaler_95, scaler_96, scaler_97, scaler_98, scaler_99, scaler_100, scaler_101);
	
			tTable lTable_HiddenLayer_1 = HiddenLayer_1::compute_model_outputs_from_table( lTable_InputLayer );
	
			tTable lTable_HiddenLayer_2 = HiddenLayer_2::compute_model_outputs_from_table( lTable_HiddenLayer_1 );
	
			tTable lTable_OutputLayer = OutputLayer::compute_model_outputs_from_table( lTable_HiddenLayer_2 );
	
			tTable lScores = tTable();
	
			lScores["Score"] = { lTable_OutputLayer[ "Score_0" ][0], lTable_OutputLayer[ "Score_1" ][0], lTable_OutputLayer[ "Score_2" ][0], lTable_OutputLayer[ "Score_3" ][0] };
	
			tTable lSoftMaxTable = soft_max( lScores );
	
	
			tTable lTable = lSoftMaxTable;
	
			int lBestClass = get_arg_max( lTable["Proba"] );
			auto lDecision = lClasses[lBestClass];
			lTable["Decision"] = { lDecision } ;
			lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("scaler_2")[0], iTable.at("scaler_3")[0], iTable.at("scaler_4")[0], iTable.at("scaler_5")[0], iTable.at("scaler_6")[0], iTable.at("scaler_7")[0], iTable.at("scaler_8")[0], iTable.at("scaler_9")[0], iTable.at("scaler_10")[0], iTable.at("scaler_11")[0], iTable.at("scaler_12")[0], iTable.at("scaler_13")[0], iTable.at("scaler_14")[0], iTable.at("scaler_15")[0], iTable.at("scaler_16")[0], iTable.at("scaler_17")[0], iTable.at("scaler_18")[0], iTable.at("scaler_19")[0], iTable.at("scaler_20")[0], iTable.at("scaler_21")[0], iTable.at("scaler_22")[0], iTable.at("scaler_23")[0], iTable.at("scaler_24")[0], iTable.at("scaler_25")[0], iTable.at("scaler_26")[0], iTable.at("scaler_27")[0], iTable.at("scaler_28")[0], iTable.at("scaler_29")[0], iTable.at("scaler_30")[0], iTable.at("scaler_31")[0], iTable.at("scaler_32")[0], iTable.at("scaler_33")[0], iTable.at("scaler_34")[0], iTable.at("scaler_35")[0], iTable.at("scaler_36")[0], iTable.at("scaler_37")[0], iTable.at("scaler_38")[0], iTable.at("scaler_39")[0], iTable.at("scaler_40")[0], iTable.at("scaler_41")[0], iTable.at("scaler_42")[0], iTable.at("scaler_43")[0], iTable.at("scaler_44")[0], iTable.at("scaler_45")[0], iTable.at("scaler_46")[0], iTable.at("scaler_47")[0], iTable.at("scaler_48")[0], iTable.at("scaler_49")[0], iTable.at("scaler_50")[0], iTable.at("scaler_51")[0], iTable.at("scaler_52")[0], iTable.at("scaler_53")[0], iTable.at("scaler_54")[0], iTable.at("scaler_55")[0], iTable.at("scaler_56")[0], iTable.at("scaler_57")[0], iTable.at("scaler_58")[0], iTable.at("scaler_59")[0], iTable.at("scaler_60")[0], iTable.at("scaler_61")[0], iTable.at("scaler_62")[0], iTable.at("scaler_63")[0], iTable.at("scaler_64")[0], iTable.at("scaler_65")[0], iTable.at("scaler_66")[0], iTable.at("scaler_67")[0], iTable.at("scaler_68")[0], iTable.at("scaler_69")[0], iTable.at("scaler_70")[0], iTable.at("scaler_71")[0], iTable.at("scaler_72")[0], iTable.at("scaler_73")[0], iTable.at("scaler_74")[0], iTable.at("scaler_75")[0], iTable.at("scaler_76")[0], iTable.at("scaler_77")[0], iTable.at("scaler_78")[0], iTable.at("scaler_79")[0], iTable.at("scaler_80")[0], iTable.at("scaler_81")[0], iTable.at("scaler_82")[0], iTable.at("scaler_83")[0], iTable.at("scaler_84")[0], iTable.at("scaler_85")[0], iTable.at("scaler_86")[0], iTable.at("scaler_87")[0], iTable.at("scaler_88")[0], iTable.at("scaler_89")[0], iTable.at("scaler_90")[0], iTable.at("scaler_91")[0], iTable.at("scaler_92")[0], iTable.at("scaler_93")[0], iTable.at("scaler_94")[0], iTable.at("scaler_95")[0], iTable.at("scaler_96")[0], iTable.at("scaler_97")[0], iTable.at("scaler_98")[0], iTable.at("scaler_99")[0], iTable.at("scaler_100")[0], iTable.at("scaler_101")[0]);
	
			return lTable;
		}
	
	} // eof namespace model
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63", "Feature_64", "Feature_65", "Feature_66", "Feature_67", "Feature_68", "Feature_69", "Feature_70", "Feature_71", "Feature_72", "Feature_73", "Feature_74", "Feature_75", "Feature_76", "Feature_77", "Feature_78", "Feature_79", "Feature_80", "Feature_81", "Feature_82", "Feature_83", "Feature_84", "Feature_85", "Feature_86", "Feature_87", "Feature_88", "Feature_89", "Feature_90", "Feature_91", "Feature_92", "Feature_93", "Feature_94", "Feature_95", "Feature_96", "Feature_97", "Feature_98", "Feature_99" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63, std::any Feature_64, std::any Feature_65, std::any Feature_66, std::any Feature_67, std::any Feature_68, std::any Feature_69, std::any Feature_70, std::any Feature_71, std::any Feature_72, std::any Feature_73, std::any Feature_74, std::any Feature_75, std::any Feature_76, std::any Feature_77, std::any Feature_78, std::any Feature_79, std::any Feature_80, std::any Feature_81, std::any Feature_82, std::any Feature_83, std::any Feature_84, std::any Feature_85, std::any Feature_86, std::any Feature_87, std::any Feature_88, std::any Feature_89, std::any Feature_90, std::any Feature_91, std::any Feature_92, std::any Feature_93, std::any Feature_94, std::any Feature_95, std::any Feature_96, std::any Feature_97, std::any Feature_98, std::any Feature_99) {
		auto lClasses = get_classes();

		tTable lTable_imputer = imputer::compute_features(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63, Feature_64, Feature_65, Feature_66, Feature_67, Feature_68, Feature_69, Feature_70, Feature_71, Feature_72, Feature_73, Feature_74, Feature_75, Feature_76, Feature_77, Feature_78, Feature_79, Feature_80, Feature_81, Feature_82, Feature_83, Feature_84, Feature_85, Feature_86, Feature_87, Feature_88, Feature_89, Feature_90, Feature_91, Feature_92, Feature_93, Feature_94, Feature_95, Feature_96, Feature_97, Feature_98, Feature_99);

		tTable lTable_scaler = scaler::compute_model_outputs_from_table( lTable_imputer );

		tTable lTable_model = model::compute_model_outputs_from_table( lTable_scaler );


		tTable lTable = lTable_model;

		int lBestClass = get_arg_max( lTable["Proba"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0], iTable.at("Feature_64")[0], iTable.at("Feature_65")[0], iTable.at("Feature_66")[0], iTable.at("Feature_67")[0], iTable.at("Feature_68")[0], iTable.at("Feature_69")[0], iTable.at("Feature_70")[0], iTable.at("Feature_71")[0], iTable.at("Feature_72")[0], iTable.at("Feature_73")[0], iTable.at("Feature_74")[0], iTable.at("Feature_75")[0], iTable.at("Feature_76")[0], iTable.at("Feature_77")[0], iTable.at("Feature_78")[0], iTable.at("Feature_79")[0], iTable.at("Feature_80")[0], iTable.at("Feature_81")[0], iTable.at("Feature_82")[0], iTable.at("Feature_83")[0], iTable.at("Feature_84")[0], iTable.at("Feature_85")[0], iTable.at("Feature_86")[0], iTable.at("Feature_87")[0], iTable.at("Feature_88")[0], iTable.at("Feature_89")[0], iTable.at("Feature_90")[0], iTable.at("Feature_91")[0], iTable.at("Feature_92")[0], iTable.at("Feature_93")[0], iTable.at("Feature_94")[0], iTable.at("Feature_95")[0], iTable.at("Feature_96")[0], iTable.at("Feature_97")[0], iTable.at("Feature_98")[0], iTable.at("Feature_99")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/FourClass_100.csv");
	return 0;
}
