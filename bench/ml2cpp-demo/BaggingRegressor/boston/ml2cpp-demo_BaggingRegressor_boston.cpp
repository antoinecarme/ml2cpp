// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : boston

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_boston.exe ml2cpp-demo_BaggingRegressor_boston.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {22.31898734 }} ,
				{ 7 ,  {20.08 }} ,
				{ 9 ,  {29.5952381 }} ,
				{ 10 ,  {24.57 }} ,
				{ 14 ,  {19.62222222 }} ,
				{ 15 ,  {15.33157895 }} ,
				{ 16 ,  {27.5 }} ,
				{ 19 ,  {15.81034483 }} ,
				{ 20 ,  {11.675 }} ,
				{ 22 ,  {12.60666667 }} ,
				{ 23 ,  {9.77727273 }} ,
				{ 28 ,  {35.25 }} ,
				{ 29 ,  {31. }} ,
				{ 31 ,  {32.18 }} ,
				{ 32 ,  {23.6 }} ,
				{ 34 ,  {17.8 }} ,
				{ 35 ,  {15. }} ,
				{ 37 ,  {21.9 }} ,
				{ 40 ,  {43.1 }} ,
				{ 41 ,  {42.3 }} ,
				{ 43 ,  {50. }} ,
				{ 44 ,  {45.76153846 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.945000171661377) ? ( (Feature_12 <= 14.805000305175781) ? ( (Feature_7 <= 1.227150022983551) ? ( 3 ) : ( (Feature_5 <= 6.5309998989105225) ? ( (Feature_12 <= 11.28499984741211) ? ( 6 ) : ( 7 ) ) : ( (Feature_12 <= 7.039999961853027) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_4 <= 0.6030000150203705) ? ( (Feature_5 <= 6.614500045776367) ? ( (Feature_0 <= 0.5538100004196167) ? ( 14 ) : ( 15 ) ) : ( 16 ) ) : ( (Feature_12 <= 19.494999885559082) ? ( (Feature_0 <= 12.223600387573242) ? ( 19 ) : ( 20 ) ) : ( (Feature_0 <= 11.486350059509277) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_5 <= 7.4700000286102295) ? ( (Feature_4 <= 0.6590000092983246) ? ( (Feature_9 <= 267.0) ? ( (Feature_0 <= 0.7443850040435791) ? ( 28 ) : ( 29 ) ) : ( (Feature_6 <= 78.95000076293945) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_11 <= 386.38499450683594) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_11 <= 361.92498779296875) ? ( 37 ) : ( (Feature_5 <= 7.627500057220459) ? ( (Feature_10 <= 13.849999904632568) ? ( 40 ) : ( 41 ) ) : ( (Feature_10 <= 14.799999713897705) ? ( 43 ) : ( 44 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {23.35652174 }} ,
				{ 7 ,  {18.98888889 }} ,
				{ 9 ,  {30.28153846 }} ,
				{ 10 ,  {24.35833333 }} ,
				{ 14 ,  {45.53333333 }} ,
				{ 15 ,  {49.82857143 }} ,
				{ 17 ,  {37.6 }} ,
				{ 18 ,  {45.43333333 }} ,
				{ 19 ,  {21.9 }} ,
				{ 24 ,  {20.63866667 }} ,
				{ 25 ,  {27.1 }} ,
				{ 27 ,  {19.5547619 }} ,
				{ 28 ,  {15.37428571 }} ,
				{ 31 ,  {27.5 }} ,
				{ 32 ,  {30.6 }} ,
				{ 33 ,  {22. }} ,
				{ 37 ,  {17.01666667 }} ,
				{ 38 ,  {14.65454545 }} ,
				{ 40 ,  {13.44444444 }} ,
				{ 41 ,  {14.2 }} ,
				{ 44 ,  {13.575 }} ,
				{ 45 ,  {11.65 }} ,
				{ 47 ,  {8.65714286 }} ,
				{ 48 ,  {13.33333333 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_12 <= 9.755000114440918) ? ( (Feature_5 <= 7.433000087738037) ? ( (Feature_7 <= 1.4849499464035034) ? ( 3 ) : ( (Feature_5 <= 6.528500080108643) ? ( (Feature_10 <= 20.600000381469727) ? ( 6 ) : ( 7 ) ) : ( (Feature_2 <= 8.484999895095825) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_10 <= 19.100000381469727) ? ( (Feature_8 <= 6.5) ? ( (Feature_5 <= 7.825500011444092) ? ( 14 ) : ( 15 ) ) : ( (Feature_12 <= 3.5250000953674316) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (Feature_12 <= 19.850000381469727) ? ( (Feature_5 <= 6.800500154495239) ? ( (Feature_10 <= 19.65000057220459) ? ( (Feature_12 <= 18.97499942779541) ? ( 24 ) : ( 25 ) ) : ( (Feature_12 <= 14.910000324249268) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_1 <= 25.0) ? ( (Feature_5 <= 6.929500102996826) ? ( 31 ) : ( 32 ) ) : ( 33 ) ) ) : ( (Feature_9 <= 551.5) ? ( (Feature_10 <= 20.050000190734863) ? ( (Feature_11 <= 389.1699981689453) ? ( 37 ) : ( 38 ) ) : ( (Feature_12 <= 22.739999771118164) ? ( 40 ) : ( 41 ) ) ) : ( (Feature_7 <= 1.4128000140190125) ? ( (Feature_7 <= 1.3720500469207764) ? ( 44 ) : ( 45 ) ) : ( (Feature_7 <= 2.0464500188827515) ? ( 47 ) : ( 48 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {23.67142857 }} ,
				{ 7 ,  {20.3 }} ,
				{ 9 ,  {31.51818182 }} ,
				{ 10 ,  {26.41176471 }} ,
				{ 14 ,  {18.12592593 }} ,
				{ 15 ,  {27.5 }} ,
				{ 17 ,  {15.49090909 }} ,
				{ 18 ,  {11.81666667 }} ,
				{ 21 ,  {14.33888889 }} ,
				{ 22 ,  {11.26666667 }} ,
				{ 24 ,  {16.56666667 }} ,
				{ 25 ,  {8.90869565 }} ,
				{ 30 ,  {31.31428571 }} ,
				{ 31 ,  {33.99565217 }} ,
				{ 33 ,  {23.6 }} ,
				{ 34 ,  {30.8 }} ,
				{ 35 ,  {15. }} ,
				{ 38 ,  {50. }} ,
				{ 40 ,  {40.7 }} ,
				{ 41 ,  {43.49090909 }} ,
				{ 42 ,  {50. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.977999925613403) ? ( (Feature_12 <= 14.805000305175781) ? ( (Feature_7 <= 1.227150022983551) ? ( 3 ) : ( (Feature_5 <= 6.5295000076293945) ? ( (Feature_12 <= 7.569999933242798) ? ( 6 ) : ( 7 ) ) : ( (Feature_12 <= 4.6549999713897705) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_12 <= 19.850000381469727) ? ( (Feature_4 <= 0.6629999876022339) ? ( (Feature_6 <= 99.4000015258789) ? ( 14 ) : ( 15 ) ) : ( (Feature_0 <= 12.223600387573242) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_7 <= 1.5518500208854675) ? ( (Feature_0 <= 16.57734966278076) ? ( 21 ) : ( 22 ) ) : ( (Feature_4 <= 0.5965000092983246) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_4 <= 0.6590000092983246) ? ( (Feature_6 <= 83.20000076293945) ? ( (Feature_11 <= 391.135009765625) ? ( 30 ) : ( 31 ) ) : ( (Feature_0 <= 0.4211500119417906) ? ( 33 ) : ( 34 ) ) ) : ( 35 ) ) : ( (Feature_0 <= 0.5768150091171265) ? ( (Feature_2 <= 1.2449999898672104) ? ( 38 ) : ( (Feature_1 <= 10.0) ? ( 40 ) : ( 41 ) ) ) : ( 42 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {27.9 }} ,
				{ 5 ,  {50. }} ,
				{ 8 ,  {23.27 }} ,
				{ 9 ,  {27.24333333 }} ,
				{ 11 ,  {21.868 }} ,
				{ 12 ,  {19.68404255 }} ,
				{ 16 ,  {21.09375 }} ,
				{ 17 ,  {17.625 }} ,
				{ 19 ,  {13.95 }} ,
				{ 20 ,  {16.34444444 }} ,
				{ 23 ,  {15.0725 }} ,
				{ 24 ,  {12.43636364 }} ,
				{ 26 ,  {10.925 }} ,
				{ 27 ,  {5.66666667 }} ,
				{ 32 ,  {31.05 }} ,
				{ 33 ,  {35.39473684 }} ,
				{ 35 ,  {33.13333333 }} ,
				{ 36 ,  {27.57333333 }} ,
				{ 38 ,  {15. }} ,
				{ 39 ,  {17.8 }} ,
				{ 42 ,  {50. }} ,
				{ 44 ,  {50. }} ,
				{ 45 ,  {48.8 }} ,
				{ 48 ,  {44.82727273 }} ,
				{ 49 ,  {50. }} ,
				{ 51 ,  {39.43333333 }} ,
				{ 52 ,  {42.8 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.83299994468689) ? ( (Feature_12 <= 14.910000324249268) ? ( (Feature_7 <= 1.3848499655723572) ? ( (Feature_5 <= 5.741499900817871) ? ( 4 ) : ( 5 ) ) : ( (Feature_12 <= 9.690000057220459) ? ( (Feature_5 <= 6.54200005531311) ? ( 8 ) : ( 9 ) ) : ( (Feature_9 <= 281.5) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_10 <= 19.65000057220459) ? ( (Feature_6 <= 93.35000228881836) ? ( (Feature_0 <= 0.3039100021123886) ? ( 16 ) : ( 17 ) ) : ( (Feature_7 <= 1.4932500123977661) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_12 <= 21.420000076293945) ? ( (Feature_0 <= 11.6673002243042) ? ( 23 ) : ( 24 ) ) : ( (Feature_0 <= 34.697150230407715) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_4 <= 0.6590000092983246) ? ( (Feature_9 <= 267.0) ? ( (Feature_5 <= 6.91100001335144) ? ( 32 ) : ( 33 ) ) : ( (Feature_10 <= 15.900000095367432) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_7 <= 1.884499967098236) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_10 <= 14.799999713897705) ? ( (Feature_12 <= 5.514999866485596) ? ( 42 ) : ( (Feature_4 <= 0.6110000014305115) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_11 <= 394.5449981689453) ? ( (Feature_12 <= 4.294999837875366) ? ( 48 ) : ( 49 ) ) : ( (Feature_8 <= 5.0) ? ( 51 ) : ( 52 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {50. }} ,
				{ 6 ,  {23.67391304 }} ,
				{ 7 ,  {20.85238095 }} ,
				{ 10 ,  {26.68 }} ,
				{ 11 ,  {32.76956522 }} ,
				{ 13 ,  {30.31666667 }} ,
				{ 14 ,  {24.846875 }} ,
				{ 18 ,  {14.55833333 }} ,
				{ 19 ,  {11.775 }} ,
				{ 20 ,  {5. }} ,
				{ 23 ,  {20.54444444 }} ,
				{ 24 ,  {17.3 }} ,
				{ 26 ,  {18.53076923 }} ,
				{ 27 ,  {15.412 }} ,
				{ 32 ,  {45.7 }} ,
				{ 33 ,  {43.225 }} ,
				{ 34 ,  {50. }} ,
				{ 35 ,  {50. }} ,
				{ 38 ,  {33.4 }} ,
				{ 39 ,  {37.6 }} ,
				{ 41 ,  {50. }} ,
				{ 43 ,  {41.7 }} ,
				{ 44 ,  {42.8 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.416000127792358) ? ( (Feature_12 <= 14.050000190734863) ? ( (Feature_5 <= 6.547000169754028) ? ( (Feature_7 <= 1.389650046825409) ? ( 4 ) : ( (Feature_12 <= 7.805000066757202) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_6 <= 46.60000038146973) ? ( (Feature_5 <= 6.7275002002716064) ? ( 10 ) : ( 11 ) ) : ( (Feature_11 <= 390.4649963378906) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_7 <= 2.003700017929077) ? ( (Feature_0 <= 48.288299560546875) ? ( (Feature_0 <= 7.698184967041016) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_0 <= 0.6099550127983093) ? ( (Feature_7 <= 5.570150136947632) ? ( 23 ) : ( 24 ) ) : ( (Feature_6 <= 85.39999771118164) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_8 <= 6.0) ? ( (Feature_5 <= 7.825500011444092) ? ( (Feature_0 <= 1.0019299685955048) ? ( (Feature_9 <= 230.0) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( 35 ) ) : ( (Feature_5 <= 8.149499893188477) ? ( (Feature_5 <= 7.730000019073486) ? ( 38 ) : ( 39 ) ) : ( (Feature_7 <= 3.366399884223938) ? ( 41 ) : ( (Feature_7 <= 6.372550010681152) ? ( 43 ) : ( 44 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {26.01 }} ,
				{ 6 ,  {23.2625 }} ,
				{ 8 ,  {26. }} ,
				{ 9 ,  {20.87232143 }} ,
				{ 12 ,  {29.57 }} ,
				{ 13 ,  {25.74285714 }} ,
				{ 14 ,  {50. }} ,
				{ 18 ,  {20.58571429 }} ,
				{ 19 ,  {27.1 }} ,
				{ 21 ,  {20.5 }} ,
				{ 22 ,  {16.17297297 }} ,
				{ 25 ,  {16.53333333 }} ,
				{ 26 ,  {10.075 }} ,
				{ 28 ,  {13.36 }} ,
				{ 29 ,  {17.91111111 }} ,
				{ 34 ,  {28.86666667 }} ,
				{ 35 ,  {34.328125 }} ,
				{ 37 ,  {26.05 }} ,
				{ 38 ,  {33.15333333 }} ,
				{ 41 ,  {24.88 }} ,
				{ 42 ,  {29.8 }} ,
				{ 43 ,  {10.4 }} ,
				{ 47 ,  {44.025 }} ,
				{ 48 ,  {49.8 }} ,
				{ 50 ,  {46.53333333 }} ,
				{ 51 ,  {41.11818182 }} ,
				{ 52 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.802999973297119) ? ( (Feature_12 <= 14.78000020980835) ? ( (Feature_5 <= 6.593999862670898) ? ( (Feature_12 <= 7.555000066757202) ? ( (Feature_7 <= 4.463799953460693) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= 223.5) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= 16.0) ? ( (Feature_4 <= 0.44750000536441803) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_9 <= 567.5) ? ( (Feature_0 <= 0.14746499806642532) ? ( (Feature_12 <= 18.539999961853027) ? ( 18 ) : ( 19 ) ) : ( (Feature_6 <= 77.14999771118164) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_7 <= 2.003700017929077) ? ( (Feature_4 <= 0.6030000150203705) ? ( 25 ) : ( 26 ) ) : ( (Feature_11 <= 362.01499938964844) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_10 <= 19.450000762939453) ? ( (Feature_12 <= 5.494999885559082) ? ( (Feature_12 <= 3.5449999570846558) ? ( 34 ) : ( 35 ) ) : ( (Feature_5 <= 7.010499954223633) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_12 <= 14.434999465942383) ? ( (Feature_4 <= 0.593500018119812) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) : ( (Feature_5 <= 8.752500057220459) ? ( (Feature_10 <= 15.399999618530273) ? ( (Feature_5 <= 7.759999990463257) ? ( 47 ) : ( 48 ) ) : ( (Feature_11 <= 385.47999572753906) ? ( 50 ) : ( 51 ) ) ) : ( 52 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {20.26052632 }} ,
				{ 7 ,  {22.78461538 }} ,
				{ 9 ,  {30.69047619 }} ,
				{ 10 ,  {26.18 }} ,
				{ 14 ,  {16.7 }} ,
				{ 15 ,  {13.37 }} ,
				{ 17 ,  {18.36938776 }} ,
				{ 18 ,  {27.5 }} ,
				{ 21 ,  {15.62083333 }} ,
				{ 22 ,  {12.8 }} ,
				{ 24 ,  {7.65555556 }} ,
				{ 25 ,  {10.86666667 }} ,
				{ 30 ,  {30.3 }} ,
				{ 31 ,  {31.56666667 }} ,
				{ 33 ,  {34.2 }} ,
				{ 34 ,  {32.3 }} ,
				{ 36 ,  {37.3 }} ,
				{ 38 ,  {36.1 }} ,
				{ 39 ,  {35.4 }} ,
				{ 43 ,  {45.6375 }} ,
				{ 44 ,  {49.35 }} ,
				{ 46 ,  {39.8 }} ,
				{ 47 ,  {38.7 }} ,
				{ 48 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.074499845504761) ? ( (Feature_12 <= 14.795000076293945) ? ( (Feature_7 <= 1.3848499655723572) ? ( 3 ) : ( (Feature_5 <= 6.593999862670898) ? ( (Feature_5 <= 6.052500009536743) ? ( 6 ) : ( 7 ) ) : ( (Feature_6 <= 44.25) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_4 <= 0.6475000083446503) ? ( (Feature_5 <= 5.600500106811523) ? ( (Feature_5 <= 5.408999919891357) ? ( 14 ) : ( 15 ) ) : ( (Feature_5 <= 6.668000221252441) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_0 <= 9.554669857025146) ? ( (Feature_11 <= 389.0950012207031) ? ( 21 ) : ( 22 ) ) : ( (Feature_6 <= 91.54999923706055) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_5 <= 7.433000087738037) ? ( (Feature_10 <= 17.649999618530273) ? ( (Feature_11 <= 391.135009765625) ? ( (Feature_2 <= 3.859999895095825) ? ( 30 ) : ( 31 ) ) : ( (Feature_11 <= 393.11000061035156) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_8 <= 4.5) ? ( 36 ) : ( (Feature_7 <= 6.359299898147583) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_8 <= 16.0) ? ( (Feature_11 <= 395.5399932861328) ? ( (Feature_11 <= 387.9150085449219) ? ( 43 ) : ( 44 ) ) : ( (Feature_2 <= 2.6750000715255737) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {21.03103448 }} ,
				{ 7 ,  {23.85 }} ,
				{ 9 ,  {32.23809524 }} ,
				{ 10 ,  {26.3 }} ,
				{ 13 ,  {27.9 }} ,
				{ 15 ,  {30.7 }} ,
				{ 16 ,  {20.19805825 }} ,
				{ 19 ,  {21.65 }} ,
				{ 20 ,  {16.31754386 }} ,
				{ 22 ,  {15.59230769 }} ,
				{ 23 ,  {11.48181818 }} ,
				{ 28 ,  {34.9 }} ,
				{ 29 ,  {36.2 }} ,
				{ 30 ,  {37.9 }} ,
				{ 33 ,  {33.26666667 }} ,
				{ 34 ,  {31. }} ,
				{ 35 ,  {29. }} ,
				{ 39 ,  {43.625 }} ,
				{ 40 ,  {45.7 }} ,
				{ 42 ,  {50. }} ,
				{ 43 ,  {49.4 }} ,
				{ 46 ,  {42.74285714 }} ,
				{ 47 ,  {50. }} ,
				{ 48 ,  {37.6 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.019000053405762) ? ( (Feature_12 <= 9.714999675750732) ? ( (Feature_7 <= 1.5775499939918518) ? ( 3 ) : ( (Feature_5 <= 6.5849997997283936) ? ( (Feature_5 <= 6.141499996185303) ? ( 6 ) : ( 7 ) ) : ( (Feature_6 <= 42.25) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_12 <= 14.805000305175781) ? ( (Feature_7 <= 1.3490999937057495) ? ( 13 ) : ( (Feature_10 <= 13.849999904632568) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_0 <= 5.769209861755371) ? ( (Feature_6 <= 82.8499984741211) ? ( 19 ) : ( 20 ) ) : ( (Feature_4 <= 0.6694999933242798) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_5 <= 7.390500068664551) ? ( (Feature_9 <= 258.0) ? ( (Feature_5 <= 7.151000022888184) ? ( (Feature_7 <= 5.731650114059448) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (Feature_7 <= 7.568399906158447) ? ( (Feature_0 <= 0.682684987783432) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_8 <= 6.0) ? ( (Feature_5 <= 7.825500011444092) ? ( (Feature_5 <= 7.557499885559082) ? ( 39 ) : ( 40 ) ) : ( (Feature_12 <= 5.514999866485596) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_6 <= 84.75) ? ( (Feature_5 <= 8.531000137329102) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {26.2 }} ,
				{ 6 ,  {23.4 }} ,
				{ 8 ,  {29.58928571 }} ,
				{ 9 ,  {23.975 }} ,
				{ 11 ,  {50. }} ,
				{ 13 ,  {20.42333333 }} ,
				{ 14 ,  {24.18571429 }} ,
				{ 18 ,  {27.1 }} ,
				{ 19 ,  {20.4 }} ,
				{ 21 ,  {17.28333333 }} ,
				{ 22 ,  {27.5 }} ,
				{ 25 ,  {14.13333333 }} ,
				{ 26 ,  {16.84166667 }} ,
				{ 28 ,  {13.73333333 }} ,
				{ 29 ,  {9.92413793 }} ,
				{ 34 ,  {34.52142857 }} ,
				{ 35 ,  {37.4 }} ,
				{ 36 ,  {29.6 }} ,
				{ 39 ,  {24.96 }} ,
				{ 40 ,  {31.06666667 }} ,
				{ 41 ,  {10.4 }} ,
				{ 45 ,  {49.52 }} ,
				{ 46 ,  {46.11538462 }} ,
				{ 48 ,  {39.25 }} ,
				{ 49 ,  {42.3 }} ,
				{ 50 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.924000024795532) ? ( (Feature_12 <= 15.0) ? ( (Feature_12 <= 7.684999942779541) ? ( (Feature_5 <= 6.528500080108643) ? ( (Feature_7 <= 4.463799953460693) ? ( 5 ) : ( 6 ) ) : ( (Feature_4 <= 0.5149999856948853) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_7 <= 1.2074000239372253) ? ( 11 ) : ( (Feature_5 <= 6.525500059127808) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_4 <= 0.6614999771118164) ? ( (Feature_0 <= 0.14746499806642532) ? ( (Feature_9 <= 371.5) ? ( 18 ) : ( 19 ) ) : ( (Feature_5 <= 6.754500150680542) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_12 <= 19.72000026702881) ? ( (Feature_4 <= 0.715499997138977) ? ( 25 ) : ( 26 ) ) : ( (Feature_7 <= 1.4222500324249268) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_5 <= 7.515000104904175) ? ( (Feature_4 <= 0.4884999990463257) ? ( (Feature_7 <= 8.801650047302246) ? ( (Feature_0 <= 0.076944999396801) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (Feature_12 <= 15.999999523162842) ? ( (Feature_5 <= 7.010499954223633) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (Feature_4 <= 0.6825000047683716) ? ( (Feature_11 <= 394.8050079345703) ? ( (Feature_10 <= 14.799999713897705) ? ( 45 ) : ( 46 ) ) : ( (Feature_1 <= 41.25) ? ( 48 ) : ( 49 ) ) ) : ( 50 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {23.61463415 }} ,
				{ 7 ,  {20.80272727 }} ,
				{ 9 ,  {28.31111111 }} ,
				{ 10 ,  {23.63846154 }} ,
				{ 14 ,  {17.15 }} ,
				{ 15 ,  {14.64285714 }} ,
				{ 17 ,  {13.18823529 }} ,
				{ 18 ,  {9.83235294 }} ,
				{ 21 ,  {22.62727273 }} ,
				{ 22 ,  {18.58947368 }} ,
				{ 24 ,  {14.40588235 }} ,
				{ 25 ,  {17.55416667 }} ,
				{ 30 ,  {33.07272727 }} ,
				{ 31 ,  {37. }} ,
				{ 33 ,  {29.6 }} ,
				{ 34 ,  {29. }} ,
				{ 37 ,  {28.85 }} ,
				{ 38 ,  {23.46666667 }} ,
				{ 40 ,  {37.9 }} ,
				{ 41 ,  {32.52 }} ,
				{ 45 ,  {45.05714286 }} ,
				{ 46 ,  {49.7 }} ,
				{ 48 ,  {43.6875 }} ,
				{ 49 ,  {37.96666667 }} ,
				{ 50 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.825000047683716) ? ( (Feature_12 <= 14.300000190734863) ? ( (Feature_7 <= 1.2074000239372253) ? ( 3 ) : ( (Feature_5 <= 6.5269999504089355) ? ( (Feature_12 <= 7.695000171661377) ? ( 6 ) : ( 7 ) ) : ( (Feature_4 <= 0.5209999978542328) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_7 <= 2.001200020313263) ? ( (Feature_9 <= 551.5) ? ( (Feature_12 <= 15.964999675750732) ? ( 14 ) : ( 15 ) ) : ( (Feature_12 <= 21.380000114440918) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_10 <= 19.450000762939453) ? ( (Feature_6 <= 73.0999984741211) ? ( 21 ) : ( 22 ) ) : ( (Feature_11 <= 360.6599884033203) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_5 <= 7.444999933242798) ? ( (Feature_6 <= 46.60000038146973) ? ( (Feature_7 <= 7.740599870681763) ? ( (Feature_0 <= 0.07597500085830688) ? ( 30 ) : ( 31 ) ) : ( (Feature_9 <= 344.0) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_5 <= 7.081000089645386) ? ( (Feature_7 <= 3.302199959754944) ? ( 37 ) : ( 38 ) ) : ( (Feature_9 <= 207.5) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_0 <= 2.468820035457611) ? ( (Feature_11 <= 387.3450012207031) ? ( (Feature_6 <= 80.6500015258789) ? ( 45 ) : ( 46 ) ) : ( (Feature_5 <= 8.037000179290771) ? ( 48 ) : ( 49 ) ) ) : ( 50 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {24.1 }} ,
				{ 7 ,  {21.4625 }} ,
				{ 9 ,  {30.7125 }} ,
				{ 10 ,  {26.28333333 }} ,
				{ 14 ,  {36.075 }} ,
				{ 15 ,  {33.4 }} ,
				{ 17 ,  {31.9 }} ,
				{ 18 ,  {33.95 }} ,
				{ 21 ,  {48.81818182 }} ,
				{ 22 ,  {43.75 }} ,
				{ 23 ,  {21.9 }} ,
				{ 27 ,  {27.9 }} ,
				{ 29 ,  {17.65714286 }} ,
				{ 30 ,  {20.35813953 }} ,
				{ 33 ,  {30.85 }} ,
				{ 34 ,  {29.8 }} ,
				{ 35 ,  {26.7 }} ,
				{ 39 ,  {15.87037037 }} ,
				{ 40 ,  {7. }} ,
				{ 42 ,  {19.56764706 }} ,
				{ 43 ,  {14.82857143 }} ,
				{ 46 ,  {14.65384615 }} ,
				{ 47 ,  {27.5 }} ,
				{ 49 ,  {13.524 }} ,
				{ 50 ,  {9.53043478 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_12 <= 9.615000247955322) ? ( (Feature_5 <= 7.141499996185303) ? ( (Feature_7 <= 1.4849499464035034) ? ( 3 ) : ( (Feature_5 <= 6.543499946594238) ? ( (Feature_12 <= 7.569999933242798) ? ( 6 ) : ( 7 ) ) : ( (Feature_6 <= 38.80000114440918) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_9 <= 274.0) ? ( (Feature_5 <= 7.376500129699707) ? ( 14 ) : ( 15 ) ) : ( (Feature_7 <= 7.173449993133545) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_10 <= 19.100000381469727) ? ( (Feature_10 <= 14.799999713897705) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_12 <= 14.800000190734863) ? ( (Feature_5 <= 6.924000024795532) ? ( (Feature_7 <= 1.3490999937057495) ? ( 27 ) : ( (Feature_11 <= 361.885009765625) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_3 <= 0.5) ? ( (Feature_2 <= 11.035000205039978) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_0 <= 5.769209861755371) ? ( (Feature_11 <= 377.48500061035156) ? ( (Feature_9 <= 688.5) ? ( 39 ) : ( 40 ) ) : ( (Feature_12 <= 24.06999969482422) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_4 <= 0.6410000026226044) ? ( (Feature_5 <= 6.518500089645386) ? ( 46 ) : ( 47 ) ) : ( (Feature_0 <= 10.752999782562256) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {50. }} ,
				{ 6 ,  {23.93235294 }} ,
				{ 7 ,  {20.68813559 }} ,
				{ 9 ,  {33.53333333 }} ,
				{ 10 ,  {26.22745098 }} ,
				{ 14 ,  {16.4483871 }} ,
				{ 15 ,  {27.5 }} ,
				{ 17 ,  {27.1 }} ,
				{ 18 ,  {20.33076923 }} ,
				{ 21 ,  {16.18064516 }} ,
				{ 22 ,  {12.99333333 }} ,
				{ 24 ,  {8.65 }} ,
				{ 25 ,  {11.51818182 }} ,
				{ 30 ,  {35.96666667 }} ,
				{ 31 ,  {33.4 }} ,
				{ 33 ,  {30.075 }} ,
				{ 34 ,  {32.87272727 }} ,
				{ 35 ,  {17.8 }} ,
				{ 39 ,  {44.67894737 }} ,
				{ 40 ,  {50. }} ,
				{ 41 ,  {50. }} ,
				{ 42 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 6.996999979019165) ? ( (Feature_12 <= 14.890000343322754) ? ( (Feature_7 <= 1.227150022983551) ? ( 3 ) : ( (Feature_5 <= 6.5269999504089355) ? ( (Feature_12 <= 7.664999961853027) ? ( 6 ) : ( 7 ) ) : ( (Feature_10 <= 15.25) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_4 <= 0.6030000150203705) ? ( (Feature_11 <= 392.88499450683594) ? ( (Feature_5 <= 6.754500150680542) ? ( 14 ) : ( 15 ) ) : ( (Feature_10 <= 16.299999713897705) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_0 <= 9.333990097045898) ? ( (Feature_12 <= 19.065000534057617) ? ( 21 ) : ( 22 ) ) : ( (Feature_5 <= 5.853000164031982) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_0 <= 4.53667488694191) ? ( (Feature_9 <= 258.0) ? ( (Feature_5 <= 7.334500074386597) ? ( 30 ) : ( 31 ) ) : ( (Feature_5 <= 7.1549999713897705) ? ( 33 ) : ( 34 ) ) ) : ( 35 ) ) : ( (Feature_0 <= 2.7422350645065308) ? ( (Feature_0 <= 0.5768150091171265) ? ( (Feature_5 <= 8.531000137329102) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) : ( 42 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {50. }} ,
				{ 6 ,  {23.62727273 }} ,
				{ 7 ,  {20.41836735 }} ,
				{ 10 ,  {30.01 }} ,
				{ 11 ,  {34.4 }} ,
				{ 13 ,  {28.77272727 }} ,
				{ 14 ,  {25.13888889 }} ,
				{ 18 ,  {21.06666667 }} ,
				{ 19 ,  {16.81612903 }} ,
				{ 21 ,  {13.60769231 }} ,
				{ 22 ,  {20. }} ,
				{ 25 ,  {18.3 }} ,
				{ 26 ,  {14.2375 }} ,
				{ 28 ,  {13.02727273 }} ,
				{ 29 ,  {8.79285714 }} ,
				{ 34 ,  {34.8 }} ,
				{ 35 ,  {36.93333333 }} ,
				{ 37 ,  {31.75 }} ,
				{ 38 ,  {33. }} ,
				{ 39 ,  {17.8 }} ,
				{ 43 ,  {48.29130435 }} ,
				{ 44 ,  {43.15 }} ,
				{ 46 ,  {43.3 }} ,
				{ 47 ,  {39.25 }} ,
				{ 48 ,  {21.9 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.074499845504761) ? ( (Feature_12 <= 15.0) ? ( (Feature_5 <= 6.481499910354614) ? ( (Feature_7 <= 1.227150022983551) ? ( 4 ) : ( (Feature_12 <= 7.694999933242798) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_12 <= 4.6549999713897705) ? ( (Feature_5 <= 6.9659998416900635) ? ( 10 ) : ( 11 ) ) : ( (Feature_9 <= 267.0) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_12 <= 21.61500072479248) ? ( (Feature_0 <= 5.769209861755371) ? ( (Feature_6 <= 82.54999923706055) ? ( 18 ) : ( 19 ) ) : ( (Feature_6 <= 99.45000076293945) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_9 <= 551.5) ? ( (Feature_12 <= 25.914999961853027) ? ( 25 ) : ( 26 ) ) : ( (Feature_4 <= 0.675000011920929) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_5 <= 7.437000036239624) ? ( (Feature_9 <= 497.5) ? ( (Feature_9 <= 274.0) ? ( (Feature_10 <= 18.550000190734863) ? ( 34 ) : ( 35 ) ) : ( (Feature_11 <= 394.72999572753906) ? ( 37 ) : ( 38 ) ) ) : ( 39 ) ) : ( (Feature_10 <= 19.65000057220459) ? ( (Feature_10 <= 17.59999942779541) ? ( (Feature_7 <= 6.077500104904175) ? ( 43 ) : ( 44 ) ) : ( (Feature_12 <= 3.8899999856948853) ? ( 46 ) : ( 47 ) ) ) : ( 48 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {50. }} ,
				{ 6 ,  {23.81025641 }} ,
				{ 7 ,  {20.86640625 }} ,
				{ 9 ,  {50. }} ,
				{ 11 ,  {29.62105263 }} ,
				{ 12 ,  {25.62647059 }} ,
				{ 16 ,  {23.2 }} ,
				{ 17 ,  {19.62 }} ,
				{ 19 ,  {17.29791667 }} ,
				{ 20 ,  {27.5 }} ,
				{ 23 ,  {15.664 }} ,
				{ 24 ,  {11.875 }} ,
				{ 26 ,  {15.14 }} ,
				{ 27 ,  {9.70512821 }} ,
				{ 32 ,  {30.85 }} ,
				{ 33 ,  {29. }} ,
				{ 35 ,  {32.9375 }} ,
				{ 36 ,  {35.57142857 }} ,
				{ 37 ,  {17.8 }} ,
				{ 41 ,  {47.33333333 }} ,
				{ 42 ,  {43.1 }} ,
				{ 43 ,  {50. }} ,
				{ 46 ,  {43.66666667 }} ,
				{ 47 ,  {38.7 }} ,
				{ 49 ,  {39.8 }} ,
				{ 50 ,  {37.6 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.010499954223633) ? ( (Feature_12 <= 14.300000190734863) ? ( (Feature_5 <= 6.53600001335144) ? ( (Feature_7 <= 1.2074000239372253) ? ( 4 ) : ( (Feature_12 <= 7.605000019073486) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_7 <= 1.6836999654769897) ? ( 9 ) : ( (Feature_6 <= 41.95000076293945) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_4 <= 0.6030000150203705) ? ( (Feature_6 <= 70.14999771118164) ? ( (Feature_10 <= 19.65000057220459) ? ( 16 ) : ( 17 ) ) : ( (Feature_5 <= 6.754500150680542) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_12 <= 19.72000026702881) ? ( (Feature_0 <= 12.223600387573242) ? ( 23 ) : ( 24 ) ) : ( (Feature_9 <= 551.5) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_5 <= 7.433000087738037) ? ( (Feature_0 <= 4.516894906759262) ? ( (Feature_11 <= 384.18499755859375) ? ( (Feature_7 <= 7.568399906158447) ? ( 32 ) : ( 33 ) ) : ( (Feature_10 <= 17.399999618530273) ? ( 35 ) : ( 36 ) ) ) : ( 37 ) ) : ( (Feature_10 <= 15.399999618530273) ? ( (Feature_5 <= 7.759999990463257) ? ( (Feature_11 <= 382.7200012207031) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (Feature_6 <= 80.80000305175781) ? ( (Feature_12 <= 4.174999952316284) ? ( 46 ) : ( 47 ) ) : ( (Feature_2 <= 4.329999923706055) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {22.88125 }} ,
				{ 6 ,  {24.81111111 }} ,
				{ 8 ,  {27.9 }} ,
				{ 9 ,  {20.55072464 }} ,
				{ 11 ,  {50. }} ,
				{ 13 ,  {29.90333333 }} ,
				{ 14 ,  {25.684375 }} ,
				{ 18 ,  {15.5 }} ,
				{ 19 ,  {13.13333333 }} ,
				{ 21 ,  {19.55675676 }} ,
				{ 22 ,  {27.1 }} ,
				{ 25 ,  {8.025 }} ,
				{ 26 ,  {12. }} ,
				{ 28 ,  {27.5 }} ,
				{ 29 ,  {14.17272727 }} ,
				{ 34 ,  {34.9625 }} ,
				{ 35 ,  {36.73333333 }} ,
				{ 37 ,  {33.95 }} ,
				{ 38 ,  {32.2 }} ,
				{ 40 ,  {25. }} ,
				{ 42 ,  {31. }} ,
				{ 43 ,  {30.7 }} ,
				{ 47 ,  {45.4 }} ,
				{ 48 ,  {42.83333333 }} ,
				{ 50 ,  {49.9 }} ,
				{ 51 ,  {45.44 }} ,
				{ 54 ,  {43.8 }} ,
				{ 55 ,  {42.8 }} ,
				{ 56 ,  {38.7 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_5 <= 7.010499954223633) ? ( (Feature_12 <= 14.78000020980835) ? ( (Feature_5 <= 6.5309998989105225) ? ( (Feature_12 <= 7.605000019073486) ? ( (Feature_2 <= 5.799999952316284) ? ( 5 ) : ( 6 ) ) : ( (Feature_7 <= 1.447700023651123) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_7 <= 1.6836999654769897) ? ( 11 ) : ( (Feature_2 <= 4.269999980926514) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_10 <= 19.65000057220459) ? ( (Feature_7 <= 1.527649998664856) ? ( (Feature_12 <= 27.109999656677246) ? ( 18 ) : ( 19 ) ) : ( (Feature_5 <= 6.167999982833862) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_11 <= 139.99499893188477) ? ( (Feature_7 <= 1.9248999953269958) ? ( 25 ) : ( 26 ) ) : ( (Feature_11 <= 195.16500091552734) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_5 <= 7.438999891281128) ? ( (Feature_0 <= 0.7246050238609314) ? ( (Feature_9 <= 274.5) ? ( (Feature_10 <= 18.34999942779541) ? ( 34 ) : ( 35 ) ) : ( (Feature_10 <= 13.950000286102295) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_6 <= 80.79999923706055) ? ( 40 ) : ( (Feature_7 <= 2.1058499813079834) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_10 <= 17.899999618530273) ? ( (Feature_5 <= 7.825500011444092) ? ( (Feature_11 <= 387.8399963378906) ? ( 47 ) : ( 48 ) ) : ( (Feature_8 <= 6.5) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_12 <= 3.8899999856948853) ? ( (Feature_7 <= 6.200950026512146) ? ( 54 ) : ( 55 ) ) : ( 56 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {22.75454545 }} ,
				{ 6 ,  {24.24090909 }} ,
				{ 8 ,  {28.73181818 }} ,
				{ 9 ,  {23.4 }} ,
				{ 12 ,  {32.60555556 }} ,
				{ 13 ,  {29.18 }} ,
				{ 15 ,  {36.5875 }} ,
				{ 16 ,  {33.225 }} ,
				{ 20 ,  {50. }} ,
				{ 21 ,  {43.1 }} ,
				{ 23 ,  {50. }} ,
				{ 24 ,  {48.8 }} ,
				{ 27 ,  {44.86 }} ,
				{ 28 ,  {37.96666667 }} ,
				{ 30 ,  {50. }} ,
				{ 31 ,  {50. }} ,
				{ 34 ,  {50. }} ,
				{ 37 ,  {19.46338028 }} ,
				{ 38 ,  {27.9 }} ,
				{ 40 ,  {25.48064516 }} ,
				{ 41 ,  {21.61666667 }} ,
				{ 45 ,  {13.025 }} ,
				{ 46 ,  {15.31578947 }} ,
				{ 48 ,  {16.7 }} ,
				{ 49 ,  {9.96363636 }} ,
				{ 52 ,  {19.78571429 }} ,
				{ 53 ,  {27.1 }} ,
				{ 55 ,  {14.39411765 }} ,
				{ 56 ,  {16.56153846 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = (Feature_12 <= 7.684999942779541) ? ( (Feature_5 <= 7.437000036239624) ? ( (Feature_5 <= 6.7815001010894775) ? ( (Feature_5 <= 6.5309998989105225) ? ( (Feature_0 <= 0.052539998665452003) ? ( 5 ) : ( 6 ) ) : ( (Feature_4 <= 0.5289999842643738) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_5 <= 7.141499996185303) ? ( (Feature_10 <= 18.34999942779541) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 7.261500120162964) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_10 <= 14.799999713897705) ? ( (Feature_5 <= 7.697499990463257) ? ( (Feature_12 <= 4.495000123977661) ? ( 20 ) : ( 21 ) ) : ( (Feature_6 <= 89.20000076293945) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_12 <= 4.329999923706055) ? ( (Feature_6 <= 62.85000038146973) ? ( 27 ) : ( 28 ) ) : ( (Feature_6 <= 68.29999923706055) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_12 <= 14.800000190734863) ? ( (Feature_7 <= 1.2074000239372253) ? ( 34 ) : ( (Feature_5 <= 6.104000091552734) ? ( (Feature_0 <= 9.376135110855103) ? ( 37 ) : ( 38 ) ) : ( (Feature_2 <= 7.015000104904175) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_7 <= 2.003700017929077) ? ( (Feature_0 <= 7.537955045700073) ? ( (Feature_5 <= 5.434000015258789) ? ( 45 ) : ( 46 ) ) : ( (Feature_12 <= 15.355000019073486) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_0 <= 0.22350499778985977) ? ( (Feature_12 <= 18.539999961853027) ? ( 52 ) : ( 53 ) ) : ( (Feature_11 <= 317.75) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/boston.csv");
	return 0;
}
