// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : diabetes

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_diabetes.exe ml2cpp-demo_BaggingRegressor_diabetes.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {183.33333333 }} ,
				{ 6 ,  {103. }} ,
				{ 8 ,  {72.65217391 }} ,
				{ 9 ,  {100.57894737 }} ,
				{ 12 ,  {193. }} ,
				{ 13 ,  {133. }} ,
				{ 15 ,  {99. }} ,
				{ 16 ,  {138.75 }} ,
				{ 20 ,  {117.74074074 }} ,
				{ 21 ,  {206. }} ,
				{ 23 ,  {170. }} ,
				{ 24 ,  {101.57142857 }} ,
				{ 26 ,  {317. }} ,
				{ 27 ,  {306. }} ,
				{ 32 ,  {252. }} ,
				{ 33 ,  {149.66666667 }} ,
				{ 35 ,  {51.5 }} ,
				{ 36 ,  {116.75 }} ,
				{ 39 ,  {80. }} ,
				{ 40 ,  {67. }} ,
				{ 42 ,  {167.36363636 }} ,
				{ 43 ,  {220. }} ,
				{ 47 ,  {170. }} ,
				{ 48 ,  {175. }} ,
				{ 49 ,  {202. }} ,
				{ 52 ,  {241.91428571 }} ,
				{ 53 ,  {131. }} ,
				{ 55 ,  {289.46153846 }} ,
				{ 56 ,  {241. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.017855672165751457) ? ( (Feature_8 <= -0.009924227371811867) ? ( (Feature_2 <= 0.007805602857843041) ? ( (Feature_0 <= -0.08906293660402298) ? ( (Feature_3 <= -0.045263622887432575) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= 0.003566791128832847) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.03798434138298035) ? ( (Feature_0 <= -0.021860977867618203) ? ( 12 ) : ( 13 ) ) : ( (Feature_0 <= -0.025493516586720943) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_7 <= 0.11918143928050995) ? ( (Feature_3 <= -0.03837788291275501) ? ( (Feature_9 <= 0.04034337215125561) ? ( 20 ) : ( 21 ) ) : ( (Feature_4 <= 0.09061988070607185) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_6 <= -0.07101313024759293) ? ( 26 ) : ( 27 ) ) ) ) : ( (Feature_2 <= 0.01319466345012188) ? ( (Feature_0 <= 0.01809694431722164) ? ( (Feature_0 <= -0.02186097763478756) ? ( (Feature_2 <= -0.025067664682865143) ? ( 32 ) : ( 33 ) ) : ( (Feature_5 <= 0.006201685522682965) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_8 <= -0.030238069593906403) ? ( (Feature_9 <= -0.007290857611224055) ? ( 39 ) : ( 40 ) ) : ( (Feature_0 <= 0.03262709826231003) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_7 <= -0.02602447336539626) ? ( (Feature_0 <= -0.009147093165665865) ? ( (Feature_6 <= 0.008142083883285522) ? ( 47 ) : ( 48 ) ) : ( 49 ) ) : ( (Feature_2 <= 0.07355214282870293) ? ( (Feature_2 <= 0.07193542271852493) ? ( 52 ) : ( 53 ) ) : ( (Feature_5 <= 0.02326827682554722) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {55. }} ,
				{ 6 ,  {138.20833333 }} ,
				{ 8 ,  {81.98 }} ,
				{ 9 ,  {230. }} ,
				{ 12 ,  {186.3 }} ,
				{ 13 ,  {121. }} ,
				{ 15 ,  {128.9375 }} ,
				{ 16 ,  {70. }} ,
				{ 20 ,  {182.75 }} ,
				{ 21 ,  {104.84615385 }} ,
				{ 22 ,  {253. }} ,
				{ 24 ,  {288. }} ,
				{ 26 ,  {263. }} ,
				{ 27 ,  {237. }} ,
				{ 32 ,  {134.72727273 }} ,
				{ 33 ,  {188.85714286 }} ,
				{ 35 ,  {82.4 }} ,
				{ 36 ,  {120. }} ,
				{ 39 ,  {158.7 }} ,
				{ 40 ,  {262. }} ,
				{ 42 ,  {48. }} ,
				{ 43 ,  {225.1 }} ,
				{ 47 ,  {164.5 }} ,
				{ 48 ,  {121. }} ,
				{ 50 ,  {308. }} ,
				{ 51 ,  {224.6 }} ,
				{ 54 ,  {192. }} ,
				{ 55 ,  {164. }} ,
				{ 57 ,  {301.27272727 }} ,
				{ 58 ,  {263. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.0015758189256303012) ? ( (Feature_3 <= 0.023593789897859097) ? ( (Feature_2 <= 0.0061888848431408405) ? ( (Feature_0 <= -0.07271651551127434) ? ( (Feature_3 <= -0.09518525004386902) ? ( 5 ) : ( 6 ) ) : ( (Feature_5 <= 0.09858047962188721) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.0363676231354475) ? ( (Feature_8 <= -0.017058268189430237) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 0.011543742730282247) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_2 <= 0.0525348037481308) ? ( (Feature_5 <= 0.09357010945677757) ? ( (Feature_0 <= -0.012779632117599249) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (Feature_5 <= -0.006637401122134179) ? ( 24 ) : ( (Feature_4 <= 0.0011829454451799393) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_2 <= 0.047145744785666466) ? ( (Feature_2 <= -0.021295323967933655) ? ( (Feature_4 <= 0.028014025650918484) ? ( (Feature_9 <= 0.025845997966825962) ? ( 32 ) : ( 33 ) ) : ( (Feature_3 <= 0.039086708799004555) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_3 <= 0.01670804899185896) ? ( (Feature_9 <= 0.0900486521422863) ? ( 39 ) : ( 40 ) ) : ( (Feature_0 <= -0.012779631884768605) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_9 <= 0.013419676572084427) ? ( (Feature_6 <= -0.023151837289333344) ? ( (Feature_2 <= 0.0649296436458826) ? ( 47 ) : ( 48 ) ) : ( (Feature_6 <= -0.019470199942588806) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_3 <= -0.05042793042957783) ? ( (Feature_6 <= -0.026833476033061743) ? ( 54 ) : ( 55 ) ) : ( (Feature_3 <= -0.021163528552278876) ? ( 57 ) : ( 58 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {91.75423729 }} ,
				{ 6 ,  {230. }} ,
				{ 7 ,  {216. }} ,
				{ 10 ,  {114. }} ,
				{ 11 ,  {173.33333333 }} ,
				{ 13 ,  {171.8 }} ,
				{ 14 ,  {263. }} ,
				{ 18 ,  {148.88461538 }} ,
				{ 19 ,  {196.125 }} ,
				{ 21 ,  {105.47058824 }} ,
				{ 22 ,  {207.5 }} ,
				{ 25 ,  {114.8 }} ,
				{ 26 ,  {177.42857143 }} ,
				{ 28 ,  {251.83333333 }} ,
				{ 29 ,  {204.35714286 }} ,
				{ 32 ,  {131. }} ,
				{ 33 ,  {140. }} ,
				{ 37 ,  {294.33333333 }} ,
				{ 38 ,  {334. }} ,
				{ 40 ,  {269.92307692 }} ,
				{ 41 ,  {308.28571429 }} ,
				{ 43 ,  {180. }} ,
				{ 45 ,  {255.875 }} ,
				{ 46 ,  {227.5 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.06870198622345924) ? ( (Feature_8 <= -0.008461708202958107) ? ( (Feature_2 <= 0.0061888848431408405) ? ( (Feature_3 <= 0.11827273294329643) ? ( (Feature_5 <= 0.09858047962188721) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_5 <= 0.0007215875521069393) ? ( (Feature_3 <= 0.06433442793786526) ? ( 10 ) : ( 11 ) ) : ( (Feature_7 <= -0.02104282204527408) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_9 <= 0.029988105408847332) ? ( (Feature_5 <= 0.04988589696586132) ? ( (Feature_8 <= 0.03485630080103874) ? ( 18 ) : ( 19 ) ) : ( (Feature_4 <= 0.12226679548621178) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_2 <= -0.007822672137990594) ? ( (Feature_8 <= 0.01405999856069684) ? ( 25 ) : ( 26 ) ) : ( (Feature_6 <= -0.021311018615961075) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_8 <= -0.021420801989734173) ? ( (Feature_7 <= 0.00921609706711024) ? ( 32 ) : ( 33 ) ) : ( (Feature_5 <= 0.02326827682554722) ? ( (Feature_8 <= 0.0317962309345603) ? ( (Feature_8 <= 0.025354264304041862) ? ( 37 ) : ( 38 ) ) : ( (Feature_5 <= 0.007610853295773268) ? ( 40 ) : ( 41 ) ) ) : ( (Feature_6 <= -0.05260493978857994) ? ( 43 ) : ( (Feature_6 <= -0.010266105295158923) ? ( 45 ) : ( 46 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {109.60416667 }} ,
				{ 6 ,  {78.34210526 }} ,
				{ 8 ,  {50.8 }} ,
				{ 9 ,  {95. }} ,
				{ 12 ,  {204. }} ,
				{ 13 ,  {182. }} ,
				{ 15 ,  {134.72727273 }} ,
				{ 16 ,  {90. }} ,
				{ 20 ,  {128.15384615 }} ,
				{ 21 ,  {157.93877551 }} ,
				{ 23 ,  {161. }} ,
				{ 24 ,  {230.33333333 }} ,
				{ 27 ,  {346. }} ,
				{ 28 ,  {277. }} ,
				{ 30 ,  {231.4 }} ,
				{ 31 ,  {180. }} ,
				{ 36 ,  {219. }} ,
				{ 37 ,  {89.06666667 }} ,
				{ 39 ,  {244. }} ,
				{ 40 ,  {166.66666667 }} ,
				{ 43 ,  {248.66666667 }} ,
				{ 44 ,  {181.66666667 }} ,
				{ 46 ,  {269.45454545 }} ,
				{ 47 ,  {120. }} ,
				{ 51 ,  {282.4 }} ,
				{ 52 ,  {244.9 }} ,
				{ 53 ,  {310. }} ,
				{ 56 ,  {231.5 }} ,
				{ 57 ,  {252. }} ,
				{ 59 ,  {186. }} ,
				{ 60 ,  {217. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.023593789897859097) ? ( (Feature_8 <= -0.009431487880647182) ? ( (Feature_2 <= 0.0061888848431408405) ? ( (Feature_2 <= -0.011595014482736588) ? ( (Feature_6 <= 0.028391091153025627) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= -0.007290857785847038) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_4 <= -0.047663379460573196) ? ( (Feature_0 <= -0.012779631651937962) ? ( 12 ) : ( 13 ) ) : ( (Feature_0 <= 0.03807590529322624) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_2 <= 0.06977979838848114) ? ( (Feature_8 <= 0.06814971566200256) ? ( (Feature_7 <= 0.03135676868259907) ? ( 20 ) : ( 21 ) ) : ( (Feature_2 <= -0.006205953890457749) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_1 <= 0.003019241616129875) ? ( (Feature_9 <= 0.0258459965698421) ? ( 27 ) : ( 28 ) ) : ( (Feature_0 <= 0.019913214724510908) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.047684650868177414) ? ( (Feature_8 <= 0.00026727162185125053) ? ( (Feature_2 <= 0.02343387808650732) ? ( (Feature_5 <= -0.031219555588904768) ? ( 36 ) : ( 37 ) ) : ( (Feature_6 <= -0.059968214482069016) ? ( 39 ) : ( 40 ) ) ) : ( (Feature_9 <= 0.03827231749892235) ? ( (Feature_4 <= -0.0173924183472991) ? ( 43 ) : ( 44 ) ) : ( (Feature_4 <= 0.051405224949121475) ? ( 46 ) : ( 47 ) ) ) ) : ( (Feature_5 <= 0.029061523266136646) ? ( (Feature_4 <= 0.030077955685555935) ? ( (Feature_9 <= 0.05069863796234131) ? ( 51 ) : ( 52 ) ) : ( 53 ) ) : ( (Feature_5 <= 0.08088759332895279) ? ( (Feature_5 <= 0.0699273981153965) ? ( 56 ) : ( 57 ) ) : ( (Feature_2 <= 0.062235113233327866) ? ( 59 ) : ( 60 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {132. }} ,
				{ 6 ,  {71.93103448 }} ,
				{ 8 ,  {147.625 }} ,
				{ 9 ,  {102.5 }} ,
				{ 12 ,  {88.5 }} ,
				{ 13 ,  {103. }} ,
				{ 15 ,  {209.9 }} ,
				{ 16 ,  {128.28571429 }} ,
				{ 19 ,  {252. }} ,
				{ 20 ,  {283. }} ,
				{ 23 ,  {153. }} ,
				{ 24 ,  {198.47826087 }} ,
				{ 26 ,  {194. }} ,
				{ 27 ,  {111.85714286 }} ,
				{ 32 ,  {276. }} ,
				{ 33 ,  {169. }} ,
				{ 35 ,  {64.66666667 }} ,
				{ 36 ,  {135.30434783 }} ,
				{ 39 ,  {159.85714286 }} ,
				{ 40 ,  {213.75757576 }} ,
				{ 42 ,  {251.5 }} ,
				{ 43 ,  {306. }} ,
				{ 46 ,  {68. }} ,
				{ 47 ,  {137. }} ,
				{ 50 ,  {255.02857143 }} ,
				{ 51 ,  {214.93333333 }} ,
				{ 53 ,  {310. }} ,
				{ 54 ,  {317. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.010500133037567139) ? ( (Feature_8 <= 0.024388953112065792) ? ( (Feature_7 <= 0.03135676868259907) ? ( (Feature_2 <= -0.05632421560585499) ? ( (Feature_0 <= -0.0945117436349392) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= -0.05092128552496433) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_3 <= -0.041246941313147545) ? ( (Feature_8 <= -0.027623306028544903) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= -0.003949175123125315) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_5 <= -0.06331727467477322) ? ( (Feature_3 <= 0.020150918513536453) ? ( 19 ) : ( 20 ) ) : ( (Feature_6 <= 0.03207272943109274) ? ( (Feature_4 <= 0.0073747336864471436) ? ( 23 ) : ( 24 ) ) : ( (Feature_4 <= 0.012878544628620148) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_8 <= 0.0437055304646492) ? ( (Feature_3 <= 0.004658001358620822) ? ( (Feature_3 <= -0.05329698882997036) ? ( (Feature_7 <= -0.02104282204527408) ? ( 32 ) : ( 33 ) ) : ( (Feature_5 <= -0.02464343700557947) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_2 <= 0.0832524448633194) ? ( (Feature_8 <= -0.030139416456222534) ? ( 39 ) : ( 40 ) ) : ( (Feature_3 <= 0.06662967428565025) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_0 <= -0.06726770848035812) ? ( (Feature_3 <= -0.029770705848932266) ? ( 46 ) : ( 47 ) ) : ( (Feature_9 <= 0.1293986737728119) ? ( (Feature_6 <= -0.019470199942588806) ? ( 50 ) : ( 51 ) ) : ( (Feature_5 <= 0.03939542267471552) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {58.66666667 }} ,
				{ 6 ,  {113.92592593 }} ,
				{ 8 ,  {67.85714286 }} ,
				{ 9 ,  {94.26086957 }} ,
				{ 12 ,  {147.52 }} ,
				{ 13 ,  {214. }} ,
				{ 15 ,  {140. }} ,
				{ 16 ,  {86.36363636 }} ,
				{ 20 ,  {172. }} ,
				{ 21 ,  {250.5 }} ,
				{ 23 ,  {70.66666667 }} ,
				{ 24 ,  {136.85714286 }} ,
				{ 27 ,  {184.16666667 }} ,
				{ 28 ,  {97.25 }} ,
				{ 30 ,  {164.5 }} ,
				{ 31 ,  {258.30769231 }} ,
				{ 36 ,  {187.58823529 }} ,
				{ 37 ,  {122.18181818 }} ,
				{ 39 ,  {291.4 }} ,
				{ 40 ,  {210.02777778 }} ,
				{ 43 ,  {160.8 }} ,
				{ 44 ,  {96.45454545 }} ,
				{ 46 ,  {266. }} ,
				{ 47 ,  {199. }} ,
				{ 51 ,  {151. }} ,
				{ 52 ,  {233.66666667 }} ,
				{ 54 ,  {273.84615385 }} ,
				{ 55 ,  {316.83333333 }} ,
				{ 58 ,  {313.33333333 }} ,
				{ 59 ,  {257.2 }} ,
				{ 61 ,  {168.5 }} ,
				{ 62 ,  {230. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.014447581954300404) ? ( (Feature_2 <= 0.0061888848431408405) ? ( (Feature_8 <= -0.009431487880647182) ? ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_3 <= -0.0917423777282238) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= 0.003566791128832847) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= 0.00862625241279602) ? ( (Feature_8 <= 0.005789376329630613) ? ( 12 ) : ( 13 ) ) : ( (Feature_6 <= -0.034196751192212105) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_8 <= -0.020854609087109566) ? ( (Feature_0 <= 0.012648137286305428) ? ( (Feature_7 <= 0.0003598276525735855) ? ( 20 ) : ( 21 ) ) : ( (Feature_5 <= -0.013213518541306257) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_3 <= -0.028049270622432232) ? ( (Feature_2 <= 0.04876246117055416) ? ( 27 ) : ( 28 ) ) : ( (Feature_4 <= -0.03665575757622719) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.047145744785666466) ? ( (Feature_4 <= 0.05622105859220028) ? ( (Feature_5 <= 0.002913626900408417) ? ( (Feature_5 <= -0.017441023141145706) ? ( 36 ) : ( 37 ) ) : ( (Feature_8 <= 0.015194777864962816) ? ( 39 ) : ( 40 ) ) ) : ( (Feature_8 <= 0.056148430332541466) ? ( (Feature_4 <= 0.07135654240846634) ? ( 43 ) : ( 44 ) ) : ( (Feature_8 <= 0.07527174428105354) ? ( 46 ) : ( 47 ) ) ) ) : ( (Feature_5 <= 0.022485405206680298) ? ( (Feature_9 <= -0.015575071331113577) ? ( (Feature_8 <= 0.026170823723077774) ? ( 51 ) : ( 52 ) ) : ( (Feature_0 <= 0.03262709826231003) ? ( 54 ) : ( 55 ) ) ) : ( (Feature_6 <= -0.047082483768463135) ? ( (Feature_3 <= 0.016708049923181534) ? ( 58 ) : ( 59 ) ) : ( (Feature_3 <= 0.05113675631582737) ? ( 61 ) : ( 62 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {110.19354839 }} ,
				{ 6 ,  {84.91578947 }} ,
				{ 7 ,  {216. }} ,
				{ 8 ,  {253. }} ,
				{ 12 ,  {230.6 }} ,
				{ 13 ,  {145.25 }} ,
				{ 15 ,  {130.40425532 }} ,
				{ 16 ,  {230. }} ,
				{ 19 ,  {185. }} ,
				{ 20 ,  {171. }} ,
				{ 22 ,  {283. }} ,
				{ 23 ,  {281. }} ,
				{ 28 ,  {51. }} ,
				{ 29 ,  {63.5 }} ,
				{ 31 ,  {161.27272727 }} ,
				{ 32 ,  {121.36363636 }} ,
				{ 35 ,  {244.5 }} ,
				{ 36 ,  {268.33333333 }} ,
				{ 38 ,  {207.24324324 }} ,
				{ 39 ,  {164.14705882 }} ,
				{ 43 ,  {256.84615385 }} ,
				{ 44 ,  {336. }} ,
				{ 46 ,  {309.875 }} ,
				{ 47 ,  {271.83333333 }} ,
				{ 50 ,  {113. }} ,
				{ 51 ,  {186.33333333 }} ,
				{ 53 ,  {231. }} ,
				{ 54 ,  {306. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= -0.000277987724984996) ? ( (Feature_8 <= -0.009924227371811867) ? ( (Feature_5 <= 0.11267216503620148) ? ( (Feature_3 <= 0.10105837881565094) ? ( (Feature_0 <= -0.060002632439136505) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_3 <= 0.061465367674827576) ? ( (Feature_6 <= -0.04156002774834633) ? ( (Feature_1 <= 0.003019241616129875) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 0.09497927501797676) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_0 <= 0.05260606110095978) ? ( (Feature_4 <= 0.042461530305445194) ? ( 19 ) : ( 20 ) ) : ( (Feature_3 <= 0.07523684948682785) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_9 <= 0.03413021191954613) ? ( (Feature_8 <= -0.025371805764734745) ? ( (Feature_2 <= 0.009961227187886834) ? ( (Feature_3 <= -0.046985059045255184) ? ( 28 ) : ( 29 ) ) : ( (Feature_0 <= 0.012648137286305428) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_6 <= -0.0489233024418354) ? ( (Feature_8 <= 0.027562624774873257) ? ( 35 ) : ( 36 ) ) : ( (Feature_9 <= 0.0009933559340424836) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_4 <= 0.038333673030138016) ? ( (Feature_5 <= 0.01496984250843525) ? ( (Feature_2 <= 0.10804212465882301) ? ( 43 ) : ( 44 ) ) : ( (Feature_2 <= 0.07840229198336601) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_8 <= 0.059788333252072334) ? ( (Feature_2 <= 0.044990118592977524) ? ( 50 ) : ( 51 ) ) : ( (Feature_7 <= 0.1431671604514122) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {79.92647059 }} ,
				{ 6 ,  {158. }} ,
				{ 8 ,  {161.16666667 }} ,
				{ 9 ,  {102.86666667 }} ,
				{ 12 ,  {168. }} ,
				{ 13 ,  {60. }} ,
				{ 15 ,  {25. }} ,
				{ 16 ,  {55.375 }} ,
				{ 20 ,  {189.88888889 }} ,
				{ 21 ,  {260.4 }} ,
				{ 23 ,  {145. }} ,
				{ 24 ,  {127. }} ,
				{ 26 ,  {187. }} ,
				{ 28 ,  {144.5 }} ,
				{ 29 ,  {105. }} ,
				{ 34 ,  {135.5 }} ,
				{ 35 ,  {197.16666667 }} ,
				{ 37 ,  {139.875 }} ,
				{ 38 ,  {84.14285714 }} ,
				{ 41 ,  {144. }} ,
				{ 42 ,  {99.75 }} ,
				{ 44 ,  {231.58333333 }} ,
				{ 45 ,  {182.34375 }} ,
				{ 49 ,  {176.97826087 }} ,
				{ 50 ,  {228.91666667 }} ,
				{ 52 ,  {155. }} ,
				{ 53 ,  {236.76923077 }} ,
				{ 56 ,  {128. }} ,
				{ 57 ,  {241.2 }} ,
				{ 59 ,  {266.53333333 }} ,
				{ 60 ,  {308. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= -0.009924227371811867) ? ( (Feature_2 <= 0.0061888848431408405) ? ( (Feature_2 <= -0.012133920565247536) ? ( (Feature_2 <= -0.030456725507974625) ? ( (Feature_4 <= 0.049341294914484024) ? ( 5 ) : ( 6 ) ) : ( (Feature_5 <= -0.02417371515184641) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_0 <= -0.07271651551127434) ? ( (Feature_2 <= -0.009978296235203743) ? ( 12 ) : ( 13 ) ) : ( (Feature_2 <= -0.009978296235203743) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_6 <= -0.008425286738201976) ? ( (Feature_0 <= 0.03262709826231003) ? ( (Feature_3 <= -0.010834917426109314) ? ( 20 ) : ( 21 ) ) : ( (Feature_8 <= -0.03879548329859972) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_4 <= -0.04215956851840019) ? ( 26 ) : ( (Feature_6 <= 0.017346178647130728) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_2 <= 0.005111072678118944) ? ( (Feature_8 <= 0.022001435048878193) ? ( (Feature_9 <= 0.009277569595724344) ? ( (Feature_2 <= -0.01967860572040081) ? ( 34 ) : ( 35 ) ) : ( (Feature_6 <= -0.01762938080355525) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_3 <= -0.04354218766093254) ? ( (Feature_4 <= -0.03459182847291231) ? ( 41 ) : ( 42 ) ) : ( (Feature_6 <= -0.034196751192212105) ? ( 44 ) : ( 45 ) ) ) ) : ( (Feature_2 <= 0.06600745767354965) ? ( (Feature_9 <= 0.03827231749892235) ? ( (Feature_6 <= 0.00261962681543082) ? ( 49 ) : ( 50 ) ) : ( (Feature_8 <= 0.006662062194664031) ? ( 52 ) : ( 53 ) ) ) : ( (Feature_0 <= -0.04183994047343731) ? ( (Feature_1 <= 0.003019241616129875) ? ( 56 ) : ( 57 ) ) : ( (Feature_4 <= 0.03282986208796501) ? ( 59 ) : ( 60 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {139.72 }} ,
				{ 6 ,  {94.1627907 }} ,
				{ 8 ,  {62.26315789 }} ,
				{ 9 ,  {87.14285714 }} ,
				{ 10 ,  {253. }} ,
				{ 14 ,  {94. }} ,
				{ 15 ,  {216.5 }} ,
				{ 17 ,  {84.85714286 }} ,
				{ 18 ,  {132.5 }} ,
				{ 21 ,  {283. }} ,
				{ 22 ,  {155.33333333 }} ,
				{ 24 ,  {156. }} ,
				{ 25 ,  {253.28571429 }} ,
				{ 30 ,  {145. }} ,
				{ 31 ,  {189.42857143 }} ,
				{ 33 ,  {87.85714286 }} ,
				{ 34 ,  {133.375 }} ,
				{ 37 ,  {136.92857143 }} ,
				{ 38 ,  {211.32 }} ,
				{ 40 ,  {287.4 }} ,
				{ 41 ,  {231. }} ,
				{ 45 ,  {82.5 }} ,
				{ 46 ,  {198.09090909 }} ,
				{ 48 ,  {155. }} ,
				{ 49 ,  {267. }} ,
				{ 52 ,  {283.33333333 }} ,
				{ 53 ,  {321.5 }} ,
				{ 55 ,  {219. }} ,
				{ 56 ,  {272. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.0061888848431408405) ? ( (Feature_8 <= -0.009431487880647182) ? ( (Feature_5 <= 0.11267216503620148) ? ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_1 <= 0.003019241616129875) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= -0.031492140144109726) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (Feature_2 <= -0.022912041284143925) ? ( (Feature_2 <= -0.04608500003814697) ? ( (Feature_0 <= -0.06726770661771297) ? ( 14 ) : ( 15 ) ) : ( (Feature_3 <= 0.006379436701536179) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_7 <= 0.04519468918442726) ? ( (Feature_7 <= -0.05794394388794899) ? ( 21 ) : ( 22 ) ) : ( (Feature_0 <= -0.040023669600486755) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_3 <= 0.023593789897859097) ? ( (Feature_8 <= -0.008522996446117759) ? ( (Feature_4 <= -0.027712063863873482) ? ( (Feature_6 <= -0.039719208143651485) ? ( 30 ) : ( 31 ) ) : ( (Feature_5 <= -0.01399638969451189) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_6 <= -0.008425286738201976) ? ( (Feature_8 <= 0.029244658537209034) ? ( 37 ) : ( 38 ) ) : ( (Feature_4 <= 0.03902164846658707) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_2 <= 0.04660683870315552) ? ( (Feature_9 <= 0.03827231749892235) ? ( (Feature_8 <= -0.041075872257351875) ? ( 45 ) : ( 46 ) ) : ( (Feature_8 <= 0.00025462679332122207) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_4 <= 0.019070332869887352) ? ( (Feature_2 <= 0.09941962733864784) ? ( 52 ) : ( 53 ) ) : ( (Feature_3 <= 0.05630106292665005) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {73.33333333 }} ,
				{ 6 ,  {102.75 }} ,
				{ 8 ,  {123.83333333 }} ,
				{ 9 ,  {52.5 }} ,
				{ 12 ,  {49.92307692 }} ,
				{ 13 ,  {84.89230769 }} ,
				{ 15 ,  {157. }} ,
				{ 16 ,  {99. }} ,
				{ 20 ,  {158.07142857 }} ,
				{ 21 ,  {94.59090909 }} ,
				{ 23 ,  {106. }} ,
				{ 24 ,  {196.27777778 }} ,
				{ 27 ,  {283. }} ,
				{ 28 ,  {255.33333333 }} ,
				{ 30 ,  {171.27272727 }} ,
				{ 31 ,  {254.33333333 }} ,
				{ 36 ,  {99.5 }} ,
				{ 37 ,  {160.80769231 }} ,
				{ 39 ,  {317. }} ,
				{ 40 ,  {268. }} ,
				{ 43 ,  {244.53333333 }} ,
				{ 44 ,  {194.52941176 }} ,
				{ 46 ,  {161. }} ,
				{ 47 ,  {283. }} ,
				{ 49 ,  {346. }} ,
				{ 52 ,  {273.21428571 }} ,
				{ 53 ,  {308.66666667 }} ,
				{ 55 ,  {128. }} ,
				{ 56 ,  {240.09090909 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.005111072678118944) ? ( (Feature_8 <= -0.009431487880647182) ? ( (Feature_4 <= -0.03803171031177044) ? ( (Feature_8 <= -0.07611488923430443) ? ( (Feature_9 <= -0.061138248071074486) ? ( 5 ) : ( 6 ) ) : ( (Feature_2 <= -0.007283766055479646) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_9 <= 0.04241442494094372) ? ( (Feature_5 <= -0.028244645334780216) ? ( 12 ) : ( 13 ) ) : ( (Feature_7 <= -0.005359846283681691) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_3 <= 0.039086708799004555) ? ( (Feature_7 <= 0.03135676868259907) ? ( (Feature_9 <= -0.046640872955322266) ? ( 20 ) : ( 21 ) ) : ( (Feature_6 <= -0.05812739580869675) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_4 <= -0.02702408842742443) ? ( (Feature_5 <= -0.07177228108048439) ? ( 27 ) : ( 28 ) ) : ( (Feature_0 <= 0.05442233011126518) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.07301323488354683) ? ( (Feature_3 <= 0.004658001358620822) ? ( (Feature_9 <= 0.11697235330939293) ? ( (Feature_0 <= -0.025493516586720943) ? ( 36 ) : ( 37 ) ) : ( (Feature_1 <= 0.003019241616129875) ? ( 39 ) : ( 40 ) ) ) : ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_5 <= 0.04487552121281624) ? ( 43 ) : ( 44 ) ) : ( (Feature_4 <= 0.09818762168288231) ? ( 46 ) : ( 47 ) ) ) ) : ( (Feature_3 <= -0.04411599971354008) ? ( 49 ) : ( (Feature_5 <= 0.022485405206680298) ? ( (Feature_4 <= 0.006686757318675518) ? ( 52 ) : ( 53 ) ) : ( (Feature_5 <= 0.02765235584229231) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {93.86363636 }} ,
				{ 6 ,  {64.73684211 }} ,
				{ 7 ,  {216. }} ,
				{ 8 ,  {253. }} ,
				{ 12 ,  {202.5 }} ,
				{ 13 ,  {167.4 }} ,
				{ 15 ,  {288. }} ,
				{ 16 ,  {250.5 }} ,
				{ 19 ,  {183.4 }} ,
				{ 20 ,  {125.7 }} ,
				{ 22 ,  {59.66666667 }} ,
				{ 23 ,  {110.14285714 }} ,
				{ 28 ,  {148.06382979 }} ,
				{ 29 ,  {183.78431373 }} ,
				{ 31 ,  {89.71428571 }} ,
				{ 32 ,  {142. }} ,
				{ 35 ,  {184.14814815 }} ,
				{ 36 ,  {255.66666667 }} ,
				{ 38 ,  {233.33333333 }} ,
				{ 39 ,  {283. }} ,
				{ 42 ,  {121. }} ,
				{ 43 ,  {151. }} ,
				{ 46 ,  {333.16666667 }} ,
				{ 47 ,  {278. }} ,
				{ 49 ,  {223.125 }} ,
				{ 50 ,  {269.58333333 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= -0.009431487880647182) ? ( (Feature_2 <= 0.0013387303915806115) ? ( (Feature_5 <= 0.10531317442655563) ? ( (Feature_3 <= 0.09933694079518318) ? ( (Feature_2 <= -0.009978296235203743) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( 8 ) ) : ( (Feature_6 <= -0.008425286738201976) ? ( (Feature_4 <= -0.03596778027713299) ? ( (Feature_0 <= -0.03457486256957054) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 0.03392240218818188) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_4 <= -0.0022569361608475447) ? ( (Feature_0 <= -0.040023671463131905) ? ( 19 ) : ( 20 ) ) : ( (Feature_2 <= 0.012116851517930627) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_2 <= 0.05576823838055134) ? ( (Feature_3 <= 0.04482482746243477) ? ( (Feature_4 <= 0.07410844787955284) ? ( (Feature_0 <= 0.007199329789727926) ? ( 28 ) : ( 29 ) ) : ( (Feature_9 <= 0.07762233167886734) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_8 <= 0.05492642894387245) ? ( (Feature_3 <= 0.09072976931929588) ? ( 35 ) : ( 36 ) ) : ( (Feature_6 <= 0.037595185451209545) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_9 <= 0.0009933559340424836) ? ( (Feature_3 <= 0.008100872160866857) ? ( 42 ) : ( 43 ) ) : ( (Feature_4 <= 0.006686757551506162) ? ( (Feature_8 <= 0.04035858158022165) ? ( 46 ) : ( 47 ) ) : ( (Feature_3 <= 0.05630106292665005) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {93.37 }} ,
				{ 6 ,  {52.17391304 }} ,
				{ 8 ,  {203.33333333 }} ,
				{ 9 ,  {121.4 }} ,
				{ 10 ,  {253. }} ,
				{ 14 ,  {210. }} ,
				{ 15 ,  {201. }} ,
				{ 17 ,  {132.5 }} ,
				{ 18 ,  {93.25 }} ,
				{ 21 ,  {189.85714286 }} ,
				{ 22 ,  {120.25 }} ,
				{ 24 ,  {252.8 }} ,
				{ 25 ,  {173. }} ,
				{ 30 ,  {93.66666667 }} ,
				{ 31 ,  {78. }} ,
				{ 33 ,  {169.33333333 }} ,
				{ 34 ,  {144. }} ,
				{ 37 ,  {200.46666667 }} ,
				{ 38 ,  {153.17073171 }} ,
				{ 40 ,  {183.71428571 }} ,
				{ 41 ,  {249.8 }} ,
				{ 45 ,  {166.71428571 }} ,
				{ 46 ,  {220.2 }} ,
				{ 48 ,  {237.58333333 }} ,
				{ 49 ,  {261.55555556 }} ,
				{ 52 ,  {328.5 }} ,
				{ 53 ,  {303. }} ,
				{ 55 ,  {272.88888889 }} ,
				{ 56 ,  {238.83333333 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.00285978929605335) ? ( (Feature_2 <= 0.004033260513097048) ? ( (Feature_5 <= 0.11267216503620148) ? ( (Feature_8 <= -0.009431487880647182) ? ( (Feature_2 <= -0.012133920565247536) ? ( 5 ) : ( 6 ) ) : ( (Feature_8 <= -0.006562352878972888) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (Feature_3 <= -0.017720657400786877) ? ( (Feature_4 <= -0.047663379460573196) ? ( (Feature_7 <= -0.02104282204527408) ? ( 14 ) : ( 15 ) ) : ( (Feature_6 <= 0.008142083999700844) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_5 <= 0.021389386616647243) ? ( (Feature_5 <= -0.01759759709239006) ? ( 21 ) : ( 22 ) ) : ( (Feature_5 <= 0.03735995665192604) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_3 <= 0.04482482746243477) ? ( (Feature_3 <= -0.04813268221914768) ? ( (Feature_7 <= 0.015858298051171005) ? ( (Feature_8 <= 0.044254669919610023) ? ( 30 ) : ( 31 ) ) : ( (Feature_7 <= 0.05368194915354252) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_2 <= 0.005111072678118944) ? ( (Feature_1 <= 0.003019241616129875) ? ( 37 ) : ( 38 ) ) : ( (Feature_9 <= 0.029988105408847332) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_2 <= 0.04552902653813362) ? ( (Feature_8 <= 0.04397285170853138) ? ( (Feature_2 <= 0.021278253756463528) ? ( 45 ) : ( 46 ) ) : ( (Feature_5 <= 0.02593003772199154) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_4 <= -0.012576582841575146) ? ( (Feature_8 <= 0.051877046935260296) ? ( 52 ) : ( 53 ) ) : ( (Feature_4 <= 0.04177355580031872) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {152.54545455 }} ,
				{ 6 ,  {200. }} ,
				{ 8 ,  {105.28571429 }} ,
				{ 9 ,  {185. }} ,
				{ 12 ,  {52.91666667 }} ,
				{ 13 ,  {80.77142857 }} ,
				{ 15 ,  {102.58441558 }} ,
				{ 16 ,  {188.57142857 }} ,
				{ 20 ,  {170.875 }} ,
				{ 21 ,  {107.375 }} ,
				{ 23 ,  {58. }} ,
				{ 24 ,  {71.5 }} ,
				{ 27 ,  {126. }} ,
				{ 28 ,  {233.53333333 }} ,
				{ 30 ,  {112.57142857 }} ,
				{ 31 ,  {169.41025641 }} ,
				{ 34 ,  {95. }} ,
				{ 37 ,  {144. }} ,
				{ 38 ,  {140.8 }} ,
				{ 40 ,  {170.5 }} ,
				{ 41 ,  {175. }} ,
				{ 44 ,  {302. }} ,
				{ 46 ,  {99.8 }} ,
				{ 47 ,  {198.72727273 }} ,
				{ 50 ,  {192.33333333 }} ,
				{ 51 ,  {277.61363636 }} ,
				{ 53 ,  {203.875 }} ,
				{ 54 ,  {238.66666667 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.026667313650250435) ? ( (Feature_8 <= 0.005789376329630613) ? ( (Feature_0 <= -0.06908397749066353) ? ( (Feature_3 <= -0.060756539925932884) ? ( (Feature_9 <= -0.003148751042317599) ? ( 5 ) : ( 6 ) ) : ( (Feature_8 <= -0.016052494233008474) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= -0.04049498960375786) ? ( (Feature_2 <= -0.054707497358322144) ? ( 12 ) : ( 13 ) ) : ( (Feature_2 <= 0.004033260513097048) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_2 <= -0.022373135201632977) ? ( (Feature_2 <= -0.030456725507974625) ? ( (Feature_4 <= 0.028014025650918484) ? ( 20 ) : ( 21 ) ) : ( (Feature_6 <= -0.02867429330945015) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_9 <= -0.01350401807576418) ? ( (Feature_3 <= -0.04354218952357769) ? ( 27 ) : ( 28 ) ) : ( (Feature_8 <= 0.012934560421854258) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_8 <= -0.0289399279281497) ? ( (Feature_8 <= -0.05706769414246082) ? ( 34 ) : ( (Feature_8 <= -0.03785204887390137) ? ( (Feature_2 <= 0.06061839498579502) ? ( 37 ) : ( 38 ) ) : ( (Feature_0 <= -0.027309785597026348) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_2 <= 0.04660683870315552) ? ( (Feature_0 <= -0.08724666759371758) ? ( 44 ) : ( (Feature_0 <= -0.016412170138210058) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_4 <= 0.038333673030138016) ? ( (Feature_0 <= -0.029126055538654327) ? ( 50 ) : ( 51 ) ) : ( (Feature_8 <= 0.059788333252072334) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {96.1 }} ,
				{ 6 ,  {167.76190476 }} ,
				{ 8 ,  {95.80851064 }} ,
				{ 9 ,  {230. }} ,
				{ 12 ,  {85. }} ,
				{ 13 ,  {49.14285714 }} ,
				{ 15 ,  {99.4137931 }} ,
				{ 16 ,  {77.26666667 }} ,
				{ 18 ,  {302. }} ,
				{ 21 ,  {210. }} ,
				{ 22 ,  {129.0625 }} ,
				{ 24 ,  {149.75 }} ,
				{ 25 ,  {275.25 }} ,
				{ 30 ,  {194.51724138 }} ,
				{ 31 ,  {110.5 }} ,
				{ 33 ,  {171.58333333 }} ,
				{ 34 ,  {100.53333333 }} ,
				{ 37 ,  {93.8 }} ,
				{ 38 ,  {206.57142857 }} ,
				{ 40 ,  {89. }} ,
				{ 41 ,  {234.46153846 }} ,
				{ 45 ,  {151. }} ,
				{ 46 ,  {233.66666667 }} ,
				{ 48 ,  {266.71428571 }} ,
				{ 49 ,  {297.27272727 }} ,
				{ 52 ,  {233. }} ,
				{ 53 ,  {108. }} ,
				{ 55 ,  {216.29411765 }} ,
				{ 56 ,  {270.71428571 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= -0.0010539205104578286) ? ( (Feature_2 <= 0.007805602857843041) ? ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_5 <= -0.02605260629206896) ? ( (Feature_5 <= -0.062064677476882935) ? ( 5 ) : ( 6 ) ) : ( (Feature_5 <= 0.09106491878628731) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= -0.0692579597234726) ? ( (Feature_3 <= -0.05387079901993275) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= -0.008829440455883741) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_0 <= -0.08361412957310677) ? ( 18 ) : ( (Feature_3 <= 0.011543742846697569) ? ( (Feature_5 <= -0.04593753255903721) ? ( 21 ) : ( 22 ) ) : ( (Feature_2 <= 0.047145744785666466) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_2 <= 0.047145744785666466) ? ( (Feature_3 <= 0.02531522512435913) ? ( (Feature_1 <= 0.003019241616129875) ? ( (Feature_2 <= 0.025589502416551113) ? ( 30 ) : ( 31 ) ) : ( (Feature_6 <= -0.026833475567400455) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_2 <= -0.021834230050444603) ? ( (Feature_3 <= 0.039086708799004555) ? ( 37 ) : ( 38 ) ) : ( (Feature_0 <= -0.012779631884768605) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_5 <= 0.022485405206680298) ? ( (Feature_9 <= -0.015575071331113577) ? ( (Feature_8 <= 0.026170823723077774) ? ( 45 ) : ( 46 ) ) : ( (Feature_5 <= -0.021825101226568222) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_0 <= -0.05092128552496433) ? ( (Feature_0 <= -0.07634905353188515) ? ( 52 ) : ( 53 ) ) : ( (Feature_7 <= 0.09002954885363579) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {126.9 }} ,
				{ 6 ,  {210. }} ,
				{ 8 ,  {94.3255814 }} ,
				{ 9 ,  {129.21428571 }} ,
				{ 12 ,  {39.25 }} ,
				{ 13 ,  {81.29090909 }} ,
				{ 15 ,  {142. }} ,
				{ 16 ,  {85.4 }} ,
				{ 20 ,  {148. }} ,
				{ 21 ,  {206. }} ,
				{ 23 ,  {131. }} ,
				{ 24 ,  {258.22222222 }} ,
				{ 27 ,  {108. }} ,
				{ 28 ,  {69. }} ,
				{ 30 ,  {196.25 }} ,
				{ 31 ,  {147.36363636 }} ,
				{ 36 ,  {174.2 }} ,
				{ 37 ,  {256.22222222 }} ,
				{ 39 ,  {114.38461538 }} ,
				{ 40 ,  {170.375 }} ,
				{ 43 ,  {265.4 }} ,
				{ 44 ,  {215.71428571 }} ,
				{ 45 ,  {84. }} ,
				{ 48 ,  {220. }} ,
				{ 49 ,  {140. }} ,
				{ 52 ,  {288. }} ,
				{ 53 ,  {332.25 }} ,
				{ 55 ,  {319. }} ,
				{ 56 ,  {266.35 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.005111072678118944) ? ( (Feature_8 <= 0.022001435048878193) ? ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_1 <= 0.003019241616129875) ? ( (Feature_2 <= -0.0067448599729686975) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= 0.015490729827433825) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= -0.009924227371811867) ? ( (Feature_5 <= -0.10026878863573074) ? ( 12 ) : ( 13 ) ) : ( (Feature_9 <= 0.009277569595724344) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_6 <= -0.034196751192212105) ? ( (Feature_0 <= -6.574741564691067e-05) ? ( (Feature_5 <= 0.0022873301059007645) ? ( 20 ) : ( 21 ) ) : ( (Feature_3 <= -0.028049269691109657) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_8 <= 0.024388953112065792) ? ( (Feature_5 <= 0.0832362100481987) ? ( 27 ) : ( 28 ) ) : ( (Feature_5 <= -0.017441023141145706) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.06924089416861534) ? ( (Feature_9 <= 0.025845997966825962) ? ( (Feature_2 <= 0.03367309272289276) ? ( (Feature_8 <= 0.042869215831160545) ? ( 36 ) : ( 37 ) ) : ( (Feature_9 <= -0.01971717830747366) ? ( 39 ) : ( 40 ) ) ) : ( (Feature_7 <= 0.17028948664665222) ? ( (Feature_6 <= -0.045241665095090866) ? ( 43 ) : ( 44 ) ) : ( 45 ) ) ) : ( (Feature_3 <= -0.04698505811393261) ? ( (Feature_0 <= -0.005514554679393768) ? ( 48 ) : ( 49 ) ) : ( (Feature_4 <= -0.02083229972049594) ? ( (Feature_2 <= 0.08756369724869728) ? ( 52 ) : ( 53 ) ) : ( (Feature_6 <= -0.05260493978857994) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {80.4 }} ,
				{ 6 ,  {124.94736842 }} ,
				{ 8 ,  {71.82352941 }} ,
				{ 9 ,  {94.53846154 }} ,
				{ 10 ,  {253. }} ,
				{ 14 ,  {210. }} ,
				{ 15 ,  {175.66666667 }} ,
				{ 17 ,  {52. }} ,
				{ 18 ,  {130.11764706 }} ,
				{ 21 ,  {113. }} ,
				{ 22 ,  {144. }} ,
				{ 24 ,  {154.66666667 }} ,
				{ 25 ,  {251.33333333 }} ,
				{ 30 ,  {210.64285714 }} ,
				{ 31 ,  {163. }} ,
				{ 33 ,  {119.04347826 }} ,
				{ 34 ,  {204.75 }} ,
				{ 37 ,  {167.75 }} ,
				{ 38 ,  {195. }} ,
				{ 40 ,  {178.66666667 }} ,
				{ 41 ,  {244.52631579 }} ,
				{ 45 ,  {178. }} ,
				{ 46 ,  {151. }} ,
				{ 48 ,  {286.8 }} ,
				{ 49 ,  {224.5625 }} ,
				{ 52 ,  {267.16666667 }} ,
				{ 53 ,  {306. }} ,
				{ 55 ,  {328.85714286 }} ,
				{ 56 ,  {270. }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.0007076415786286816) ? ( (Feature_2 <= 0.009422320872545242) ? ( (Feature_5 <= 0.11267216503620148) ? ( (Feature_6 <= 0.021027816459536552) ? ( (Feature_2 <= -0.05632421560585499) ? ( 5 ) : ( 6 ) ) : ( (Feature_8 <= -0.033886250108480453) ? ( 8 ) : ( 9 ) ) ) : ( 10 ) ) : ( (Feature_5 <= 0.0007215875521069393) ? ( (Feature_5 <= -0.046563830226659775) ? ( (Feature_3 <= -0.033213576301932335) ? ( 14 ) : ( 15 ) ) : ( (Feature_4 <= -0.05523112043738365) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_8 <= -0.04706958867609501) ? ( (Feature_7 <= 0.00663301907479763) ? ( 21 ) : ( 22 ) ) : ( (Feature_3 <= 0.021872354671359062) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_2 <= 0.056846050545573235) ? ( (Feature_3 <= 0.04482482746243477) ? ( (Feature_6 <= -0.0010620108805596828) ? ( (Feature_1 <= 0.003019241616129875) ? ( 30 ) : ( 31 ) ) : ( (Feature_4 <= 0.09818762168288231) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_0 <= 0.007199329091235995) ? ( (Feature_2 <= 0.04283449612557888) ? ( 37 ) : ( 38 ) ) : ( (Feature_4 <= 0.0011829459108412266) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_2 <= 0.0832524448633194) ? ( (Feature_8 <= 0.02095623593777418) ? ( (Feature_8 <= 0.017365565989166498) ? ( 45 ) : ( 46 ) ) : ( (Feature_4 <= 0.019758309237658978) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_2 <= 0.10103634744882584) ? ( (Feature_8 <= 0.07131688110530376) ? ( 52 ) : ( 53 ) ) : ( (Feature_8 <= 0.042560347355902195) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/diabetes.csv");
	return 0;
}
