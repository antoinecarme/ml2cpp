// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : freidman1

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_freidman1.exe ml2cpp-demo_BaggingRegressor_freidman1.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {8.0628501 }} ,
				{ 6 ,  {5.293284 }} ,
				{ 7 ,  {6.24571025 }} ,
				{ 10 ,  {6.98004624 }} ,
				{ 11 ,  {8.5686265 }} ,
				{ 13 ,  {11.38099315 }} ,
				{ 14 ,  {12.42864308 }} ,
				{ 18 ,  {16.08254262 }} ,
				{ 19 ,  {16.3247696 }} ,
				{ 21 ,  {14.46699637 }} ,
				{ 22 ,  {14.0511849 }} ,
				{ 24 ,  {12.83034463 }} ,
				{ 26 ,  {11.77602305 }} ,
				{ 27 ,  {11.31351814 }} ,
				{ 32 ,  {6.86145372 }} ,
				{ 33 ,  {10.16501732 }} ,
				{ 35 ,  {15.54179787 }} ,
				{ 36 ,  {13.11975672 }} ,
				{ 39 ,  {18.25069552 }} ,
				{ 40 ,  {17.89244708 }} ,
				{ 41 ,  {16.0096116 }} ,
				{ 45 ,  {17.40946594 }} ,
				{ 46 ,  {13.17420206 }} ,
				{ 48 ,  {23.18131441 }} ,
				{ 49 ,  {19.17702391 }} ,
				{ 52 ,  {19.30378831 }} ,
				{ 53 ,  {18.28251507 }} ,
				{ 55 ,  {21.57954598 }} ,
				{ 56 ,  {23.52804764 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.2961605191230774) ? ( (Feature_6 <= 0.49897274374961853) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_0 <= 0.6972022354602814) ? ( 4 ) : ( (Feature_4 <= 0.32171057909727097) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_4 <= 0.19467464834451675) ? ( (Feature_2 <= 0.4218287914991379) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 0.05319077707827091) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_3 <= 0.7664216458797455) ? ( (Feature_1 <= 0.2217060551047325) ? ( (Feature_0 <= 0.7535621821880341) ? ( 18 ) : ( 19 ) ) : ( (Feature_1 <= 0.2522018030285835) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_6 <= 0.6492892801761627) ? ( 24 ) : ( (Feature_6 <= 0.8162493407726288) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_3 <= 0.285542830824852) ? ( (Feature_0 <= 0.39444439113140106) ? ( (Feature_4 <= 0.714172899723053) ? ( (Feature_2 <= 0.3560855984687805) ? ( 32 ) : ( 33 ) ) : ( (Feature_4 <= 0.8901374042034149) ? ( 35 ) : ( 36 ) ) ) : ( (Feature_8 <= 0.5971590578556061) ? ( (Feature_4 <= 0.5519881546497345) ? ( 39 ) : ( 40 ) ) : ( 41 ) ) ) : ( (Feature_3 <= 0.7838062047958374) ? ( (Feature_8 <= 0.5652650594711304) ? ( (Feature_8 <= 0.46307289600372314) ? ( 45 ) : ( 46 ) ) : ( (Feature_7 <= 0.18661310151219368) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_0 <= 0.5921931862831116) ? ( (Feature_2 <= 0.40052516013383865) ? ( 52 ) : ( 53 ) ) : ( (Feature_6 <= 0.7125782072544098) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {12.0711718 }} ,
				{ 6 ,  {13.14697939 }} ,
				{ 8 ,  {18.25069552 }} ,
				{ 9 ,  {16.08254262 }} ,
				{ 12 ,  {12.76012926 }} ,
				{ 13 ,  {12.123142 }} ,
				{ 15 ,  {10.35120395 }} ,
				{ 16 ,  {7.44294178 }} ,
				{ 20 ,  {10.15369462 }} ,
				{ 21 ,  {13.1355547 }} ,
				{ 22 ,  {18.4937214 }} ,
				{ 25 ,  {18.20739689 }} ,
				{ 26 ,  {15.30848399 }} ,
				{ 28 ,  {21.34099337 }} ,
				{ 29 ,  {23.6939704 }} ,
				{ 34 ,  {19.36426348 }} ,
				{ 35 ,  {20.13436785 }} ,
				{ 36 ,  {18.10948375 }} ,
				{ 39 ,  {17.85790724 }} ,
				{ 40 ,  {18.25024804 }} ,
				{ 42 ,  {16.00390059 }} ,
				{ 43 ,  {16.91440831 }} ,
				{ 45 ,  {18.9003877 }} ,
				{ 48 ,  {22.53957473 }} ,
				{ 49 ,  {23.76092016 }} ,
				{ 50 ,  {25.24805848 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.5565721392631531) ? ( (Feature_3 <= 0.6123065948486328) ? ( (Feature_2 <= 0.27458563446998596) ? ( (Feature_0 <= 0.5483583211898804) ? ( (Feature_4 <= 0.30347641557455063) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= 0.3136274591088295) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_6 <= 0.13054963946342468) ? ( (Feature_0 <= 0.6924642026424408) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 0.23939915001392365) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_1 <= 0.27081388235092163) ? ( (Feature_6 <= 0.8910522162914276) ? ( (Feature_7 <= 0.7589626908302307) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (Feature_6 <= 0.6126518249511719) ? ( (Feature_3 <= 0.9519238471984863) ? ( 25 ) : ( 26 ) ) : ( (Feature_2 <= 0.8348395824432373) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_3 <= 0.7423960864543915) ? ( (Feature_5 <= 0.5558743476867676) ? ( (Feature_3 <= 0.6701687276363373) ? ( (Feature_2 <= 0.7105232775211334) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (Feature_9 <= 0.33611391484737396) ? ( (Feature_8 <= 0.7092061936855316) ? ( 39 ) : ( 40 ) ) : ( (Feature_6 <= 0.44539257884025574) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_7 <= 0.14773352071642876) ? ( 45 ) : ( (Feature_3 <= 0.9872102439403534) ? ( (Feature_0 <= 0.7463302910327911) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {9.73504122 }} ,
				{ 6 ,  {6.86145372 }} ,
				{ 7 ,  {7.80992409 }} ,
				{ 8 ,  {5.293284 }} ,
				{ 12 ,  {8.31475198 }} ,
				{ 13 ,  {11.63915186 }} ,
				{ 15 ,  {12.0711718 }} ,
				{ 16 ,  {13.70286584 }} ,
				{ 19 ,  {18.33205802 }} ,
				{ 20 ,  {23.6939704 }} ,
				{ 22 ,  {11.38099315 }} ,
				{ 23 ,  {15.00551178 }} ,
				{ 27 ,  {7.21944335 }} ,
				{ 29 ,  {14.53624519 }} ,
				{ 30 ,  {12.42341176 }} ,
				{ 32 ,  {10.18163117 }} ,
				{ 34 ,  {16.16564831 }} ,
				{ 35 ,  {18.81229912 }} ,
				{ 38 ,  {15.30848399 }} ,
				{ 39 ,  {19.30378831 }} ,
				{ 42 ,  {21.48532903 }} ,
				{ 43 ,  {22.96505827 }} ,
				{ 45 ,  {24.71333827 }} ,
				{ 46 ,  {25.24805848 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.41906213760375977) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_7 <= 0.4824558347463608) ? ( (Feature_5 <= 0.24642874929122627) ? ( 4 ) : ( (Feature_7 <= 0.1845293790102005) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (Feature_4 <= 0.7761108577251434) ? ( (Feature_1 <= 0.24366989731788635) ? ( (Feature_7 <= 0.4003135412931442) ? ( 12 ) : ( 13 ) ) : ( (Feature_4 <= 0.2737547233700752) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_9 <= 0.542616456747055) ? ( (Feature_9 <= 0.5164259374141693) ? ( 19 ) : ( 20 ) ) : ( (Feature_8 <= 0.2900607935152948) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_3 <= 0.7650072276592255) ? ( (Feature_0 <= 0.2921977788209915) ? ( (Feature_1 <= 0.6616163551807404) ? ( 27 ) : ( (Feature_2 <= 0.7132508605718613) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_5 <= 0.02199404314160347) ? ( 32 ) : ( (Feature_3 <= 0.19053205102682114) ? ( 34 ) : ( 35 ) ) ) ) : ( (Feature_0 <= 0.33136409521102905) ? ( (Feature_9 <= 0.2559871282428503) ? ( 38 ) : ( 39 ) ) : ( (Feature_5 <= 0.9195831716060638) ? ( (Feature_8 <= 0.39167382568120956) ? ( 42 ) : ( 43 ) ) : ( (Feature_9 <= 0.5285991281270981) ? ( 45 ) : ( 46 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {9.73504122 }} ,
				{ 6 ,  {6.86145372 }} ,
				{ 7 ,  {5.62734736 }} ,
				{ 10 ,  {11.96544179 }} ,
				{ 11 ,  {12.9998809 }} ,
				{ 13 ,  {11.38099315 }} ,
				{ 14 ,  {7.40009044 }} ,
				{ 17 ,  {12.83034463 }} ,
				{ 18 ,  {14.0511849 }} ,
				{ 21 ,  {18.4937214 }} ,
				{ 22 ,  {18.00761757 }} ,
				{ 23 ,  {16.3247696 }} ,
				{ 27 ,  {10.13178962 }} ,
				{ 29 ,  {16.22456984 }} ,
				{ 30 ,  {18.46962407 }} ,
				{ 33 ,  {19.42123597 }} ,
				{ 34 ,  {20.19903361 }} ,
				{ 35 ,  {23.18131441 }} ,
				{ 39 ,  {23.12722628 }} ,
				{ 40 ,  {21.77400035 }} ,
				{ 42 ,  {21.28942089 }} ,
				{ 43 ,  {19.30378831 }} ,
				{ 45 ,  {25.24805848 }} ,
				{ 46 ,  {24.71333827 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.5503556430339813) ? ( (Feature_3 <= 0.23714027553796768) ? ( (Feature_5 <= 0.13421679171733558) ? ( 4 ) : ( (Feature_0 <= 0.2256176620721817) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_7 <= 0.4551353305578232) ? ( (Feature_4 <= 0.5229428112506866) ? ( 10 ) : ( 11 ) ) : ( (Feature_8 <= 0.13762538647279143) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_0 <= 0.46885769069194794) ? ( (Feature_6 <= 0.5801491737365723) ? ( 17 ) : ( 18 ) ) : ( (Feature_4 <= 0.9417369067668915) ? ( (Feature_7 <= 0.32392852008342743) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_1 <= 0.8261407911777496) ? ( (Feature_3 <= 0.04497052729129791) ? ( 27 ) : ( (Feature_6 <= 0.6560377478599548) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_5 <= 0.9200620949268341) ? ( (Feature_6 <= 0.5388539135456085) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_5 <= 0.9390800297260284) ? ( (Feature_9 <= 0.4366416782140732) ? ( (Feature_0 <= 0.7997024357318878) ? ( 39 ) : ( 40 ) ) : ( (Feature_6 <= 0.7523780465126038) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_7 <= 0.5393278524279594) ? ( 45 ) : ( 46 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {7.3646808 }} ,
				{ 6 ,  {8.0628501 }} ,
				{ 8 ,  {6.24571025 }} ,
				{ 9 ,  {5.293284 }} ,
				{ 12 ,  {11.71234578 }} ,
				{ 13 ,  {14.0511849 }} ,
				{ 15 ,  {8.07092917 }} ,
				{ 16 ,  {11.13436123 }} ,
				{ 20 ,  {16.08254262 }} ,
				{ 21 ,  {16.30255672 }} ,
				{ 22 ,  {18.33205802 }} ,
				{ 25 ,  {11.38099315 }} ,
				{ 26 ,  {12.83034463 }} ,
				{ 27 ,  {14.46699637 }} ,
				{ 30 ,  {10.18163117 }} ,
				{ 31 ,  {9.73504122 }} ,
				{ 35 ,  {15.62763225 }} ,
				{ 36 ,  {17.18166575 }} ,
				{ 38 ,  {17.66939098 }} ,
				{ 39 ,  {19.62209189 }} ,
				{ 41 ,  {24.71333827 }} ,
				{ 42 ,  {23.6939704 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.28362607955932617) ? ( (Feature_4 <= 0.6291640996932983) ? ( (Feature_3 <= 0.3159424811601639) ? ( (Feature_7 <= 0.5131903141736984) ? ( (Feature_1 <= 0.2140554115176201) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 0.09800302982330322) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_5 <= 0.7398938536643982) ? ( (Feature_7 <= 0.9633970856666565) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 0.6058654487133026) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_2 <= 0.3033626824617386) ? ( (Feature_3 <= 0.6619341671466827) ? ( (Feature_2 <= 0.14265825226902962) ? ( 20 ) : ( 21 ) ) : ( 22 ) ) : ( (Feature_0 <= 0.7876879274845123) ? ( (Feature_7 <= 0.7820464074611664) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) ) ) : ( (Feature_5 <= 0.030527208000421524) ? ( (Feature_7 <= 0.2438318207859993) ? ( 30 ) : ( 31 ) ) : ( (Feature_7 <= 0.7540234327316284) ? ( (Feature_2 <= 0.27558816224336624) ? ( (Feature_0 <= 0.6444946825504303) ? ( 35 ) : ( 36 ) ) : ( (Feature_9 <= 0.8557338118553162) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_6 <= 0.649890124797821) ? ( 41 ) : ( 42 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.293284 }} ,
				{ 6 ,  {6.24571025 }} ,
				{ 8 ,  {6.98004624 }} ,
				{ 9 ,  {7.73242981 }} ,
				{ 12 ,  {10.5481089 }} ,
				{ 13 ,  {8.89707415 }} ,
				{ 15 ,  {12.123142 }} ,
				{ 16 ,  {11.78982164 }} ,
				{ 19 ,  {16.08254262 }} ,
				{ 21 ,  {11.74543987 }} ,
				{ 22 ,  {12.79523695 }} ,
				{ 23 ,  {18.4937214 }} ,
				{ 28 ,  {9.3265075 }} ,
				{ 29 ,  {6.26940047 }} ,
				{ 30 ,  {15.70100345 }} ,
				{ 33 ,  {15.85314653 }} ,
				{ 34 ,  {18.01186323 }} ,
				{ 35 ,  {10.13178962 }} ,
				{ 39 ,  {17.98727598 }} ,
				{ 40 ,  {14.08272607 }} ,
				{ 42 ,  {23.18131441 }} ,
				{ 43 ,  {20.02220769 }} ,
				{ 45 ,  {17.41761148 }} ,
				{ 47 ,  {18.79315169 }} ,
				{ 48 ,  {22.50917595 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.2274620532989502) ? ( (Feature_4 <= 0.5962461233139038) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_3 <= 0.1977313570678234) ? ( (Feature_0 <= 0.8726554214954376) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= 0.3838970959186554) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.6037389487028122) ? ( (Feature_1 <= 0.17463061958551407) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 0.4455559551715851) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_6 <= 0.7240921556949615) ? ( (Feature_2 <= 0.05666722357273102) ? ( 19 ) : ( (Feature_9 <= 0.7083582282066345) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (Feature_3 <= 0.27792081236839294) ? ( (Feature_4 <= 0.4481556862592697) ? ( (Feature_7 <= 0.5263763219118118) ? ( (Feature_8 <= 0.6122581958770752) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (Feature_8 <= 0.7947885096073151) ? ( (Feature_0 <= 0.8121815919876099) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_3 <= 0.7650072276592255) ? ( (Feature_1 <= 0.8006303906440735) ? ( (Feature_9 <= 0.5289024710655212) ? ( 39 ) : ( 40 ) ) : ( (Feature_9 <= 0.6137681007385254) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_9 <= 0.026602321420796216) ? ( 45 ) : ( (Feature_0 <= 0.5678139626979828) ? ( 47 ) : ( 48 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {5.293284 }} ,
				{ 6 ,  {6.43462385 }} ,
				{ 7 ,  {8.1572054 }} ,
				{ 10 ,  {10.37360098 }} ,
				{ 11 ,  {12.09642323 }} ,
				{ 13 ,  {13.17420206 }} ,
				{ 14 ,  {14.46699637 }} ,
				{ 18 ,  {7.21944335 }} ,
				{ 19 ,  {10.13178962 }} ,
				{ 20 ,  {13.11975672 }} ,
				{ 23 ,  {15.57474269 }} ,
				{ 24 ,  {17.7374995 }} ,
				{ 26 ,  {18.09614541 }} ,
				{ 27 ,  {20.01432241 }} ,
				{ 32 ,  {22.76939497 }} ,
				{ 33 ,  {23.10579689 }} ,
				{ 34 ,  {23.76092016 }} ,
				{ 35 ,  {21.77400035 }} ,
				{ 39 ,  {15.76903958 }} ,
				{ 40 ,  {18.33772262 }} ,
				{ 42 ,  {10.59689049 }} ,
				{ 43 ,  {14.53624519 }} ,
				{ 46 ,  {24.71333827 }} ,
				{ 47 ,  {23.6939704 }} ,
				{ 48 ,  {20.19903361 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.5515244901180267) ? ( (Feature_1 <= 0.41576971113681793) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_6 <= 0.43723364174366) ? ( 4 ) : ( (Feature_0 <= 0.35893288254737854) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_8 <= 0.4511255770921707) ? ( (Feature_1 <= 0.17950336635112762) ? ( 10 ) : ( 11 ) ) : ( (Feature_5 <= 0.6015770435333252) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_0 <= 0.31855587661266327) ? ( (Feature_4 <= 0.7979919612407684) ? ( (Feature_4 <= 0.5283788293600082) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_6 <= 0.6834737956523895) ? ( (Feature_5 <= 0.6348844766616821) ? ( 23 ) : ( 24 ) ) : ( (Feature_1 <= 0.6403791904449463) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_2 <= 0.19114422053098679) ? ( (Feature_0 <= 0.7997024357318878) ? ( (Feature_0 <= 0.7463302910327911) ? ( (Feature_9 <= 0.2569676488637924) ? ( 32 ) : ( 33 ) ) : ( 34 ) ) : ( 35 ) ) : ( (Feature_4 <= 0.9312089085578918) ? ( (Feature_9 <= 0.9371794760227203) ? ( (Feature_2 <= 0.22610484808683395) ? ( 39 ) : ( 40 ) ) : ( (Feature_5 <= 0.9287196695804596) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_4 <= 0.9470477998256683) ? ( (Feature_4 <= 0.9431267082691193) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {12.0711718 }} ,
				{ 6 ,  {13.11975672 }} ,
				{ 7 ,  {16.08254262 }} ,
				{ 10 ,  {6.31547542 }} ,
				{ 11 ,  {7.81364745 }} ,
				{ 13 ,  {9.73504122 }} ,
				{ 14 ,  {12.76012926 }} ,
				{ 18 ,  {11.91612786 }} ,
				{ 19 ,  {11.07464226 }} ,
				{ 20 ,  {18.4937214 }} ,
				{ 23 ,  {13.9993169 }} ,
				{ 24 ,  {16.95606024 }} ,
				{ 25 ,  {23.6939704 }} ,
				{ 27 ,  {7.21944335 }} ,
				{ 31 ,  {15.82358991 }} ,
				{ 32 ,  {18.6441576 }} ,
				{ 34 ,  {19.89559352 }} ,
				{ 35 ,  {23.18131441 }} ,
				{ 38 ,  {19.30378831 }} ,
				{ 39 ,  {15.30848399 }} ,
				{ 41 ,  {23.61986134 }} ,
				{ 42 ,  {20.97303223 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_2 <= 0.27202121913433075) ? ( (Feature_3 <= 0.3923255652189255) ? ( (Feature_2 <= 0.14054960943758488) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_9 <= 0.9239699840545654) ? ( (Feature_5 <= 0.6208158731460571) ? ( 10 ) : ( 11 ) ) : ( (Feature_2 <= 0.8398310840129852) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 0.21828948706388474) ? ( (Feature_6 <= 0.8910522162914276) ? ( (Feature_5 <= 0.8189209997653961) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_6 <= 0.6861744523048401) ? ( (Feature_0 <= 0.5413242876529694) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (Feature_3 <= 0.031439348589628935) ? ( 27 ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_1 <= 0.8266487419605255) ? ( (Feature_6 <= 0.6300066411495209) ? ( 31 ) : ( 32 ) ) : ( (Feature_5 <= 0.9200620949268341) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_0 <= 0.33136409521102905) ? ( (Feature_5 <= 0.3129250034689903) ? ( 38 ) : ( 39 ) ) : ( (Feature_9 <= 0.6470779180526733) ? ( 41 ) : ( 42 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {9.55754208 }} ,
				{ 6 ,  {6.80310783 }} ,
				{ 7 ,  {14.0511849 }} ,
				{ 10 ,  {11.38099315 }} ,
				{ 11 ,  {12.47011561 }} ,
				{ 13 ,  {13.85617502 }} ,
				{ 14 ,  {16.62489391 }} ,
				{ 16 ,  {18.28251507 }} ,
				{ 17 ,  {23.6939704 }} ,
				{ 22 ,  {15.56670896 }} ,
				{ 23 ,  {17.36059041 }} ,
				{ 25 ,  {18.42018899 }} ,
				{ 26 ,  {21.77400035 }} ,
				{ 27 ,  {10.13178962 }} ,
				{ 31 ,  {17.86130307 }} ,
				{ 32 ,  {20.11900331 }} ,
				{ 34 ,  {22.53957473 }} ,
				{ 35 ,  {20.07765319 }} ,
				{ 38 ,  {23.18131441 }} ,
				{ 39 ,  {25.06981841 }} ,
				{ 40 ,  {20.70189537 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.44577227532863617) ? ( (Feature_3 <= 0.7951142191886902) ? ( (Feature_4 <= 0.5962461233139038) ? ( (Feature_2 <= 0.9160535335540771) ? ( (Feature_8 <= 0.5274650007486343) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_1 <= 0.11907916516065598) ? ( (Feature_5 <= 0.4566752761602402) ? ( 10 ) : ( 11 ) ) : ( (Feature_3 <= 0.4027707576751709) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_0 <= 0.7403832972049713) ? ( 16 ) : ( 17 ) ) ) : ( (Feature_6 <= 0.3405216783285141) ? ( (Feature_4 <= 0.5641151964664459) ? ( (Feature_0 <= 0.674622118473053) ? ( (Feature_1 <= 0.9476943612098694) ? ( 22 ) : ( 23 ) ) : ( (Feature_3 <= 0.7969290912151337) ? ( 25 ) : ( 26 ) ) ) : ( 27 ) ) : ( (Feature_5 <= 0.9200620949268341) ? ( (Feature_7 <= 0.45547378063201904) ? ( (Feature_9 <= 0.6127606630325317) ? ( 31 ) : ( 32 ) ) : ( (Feature_7 <= 0.6169556081295013) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_0 <= 0.6715456545352936) ? ( (Feature_7 <= 0.14904333278536797) ? ( 38 ) : ( 39 ) ) : ( 40 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {5.293284 }} ,
				{ 6 ,  {7.74958696 }} ,
				{ 7 ,  {10.04520361 }} ,
				{ 10 ,  {11.43259402 }} ,
				{ 11 ,  {10.41282335 }} ,
				{ 12 ,  {14.0511849 }} ,
				{ 14 ,  {16.3247696 }} ,
				{ 16 ,  {12.76012926 }} ,
				{ 18 ,  {14.46699637 }} ,
				{ 19 ,  {14.77256375 }} ,
				{ 21 ,  {7.21944335 }} ,
				{ 25 ,  {14.56184302 }} ,
				{ 26 ,  {10.18163117 }} ,
				{ 28 ,  {15.82216231 }} ,
				{ 29 ,  {18.08540232 }} ,
				{ 32 ,  {17.24790354 }} ,
				{ 33 ,  {19.97481285 }} ,
				{ 35 ,  {18.36069989 }} ,
				{ 36 ,  {23.00158349 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.28362607955932617) ? ( (Feature_4 <= 0.5598129630088806) ? ( (Feature_3 <= 0.4717613756656647) ? ( (Feature_2 <= 0.33037184178829193) ? ( 4 ) : ( (Feature_6 <= 0.8493765890598297) ? ( 6 ) : ( 7 ) ) ) : ( (Feature_2 <= 0.8728516697883606) ? ( (Feature_7 <= 0.5083599984645844) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (Feature_5 <= 0.3822145201265812) ? ( 14 ) : ( (Feature_1 <= 0.22232762724161148) ? ( 16 ) : ( (Feature_1 <= 0.25948668271303177) ? ( 18 ) : ( 19 ) ) ) ) ) : ( (Feature_3 <= 0.031439348589628935) ? ( 21 ) : ( (Feature_6 <= 0.34058183431625366) ? ( (Feature_0 <= 0.37086910009384155) ? ( (Feature_0 <= 0.33245889842510223) ? ( 25 ) : ( 26 ) ) : ( (Feature_3 <= 0.17346594482660294) ? ( 28 ) : ( 29 ) ) ) : ( (Feature_3 <= 0.7744332253932953) ? ( (Feature_1 <= 0.8006303906440735) ? ( 32 ) : ( 33 ) ) : ( (Feature_5 <= 0.46383774280548096) ? ( 35 ) : ( 36 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {9.73504122 }} ,
				{ 5 ,  {8.0628501 }} ,
				{ 7 ,  {6.24571025 }} ,
				{ 8 ,  {5.293284 }} ,
				{ 12 ,  {10.04876989 }} ,
				{ 13 ,  {12.5351062 }} ,
				{ 15 ,  {15.92255811 }} ,
				{ 16 ,  {13.61269348 }} ,
				{ 19 ,  {18.33168679 }} ,
				{ 20 ,  {16.15588065 }} ,
				{ 22 ,  {11.38099315 }} ,
				{ 23 ,  {14.46699637 }} ,
				{ 26 ,  {7.21944335 }} ,
				{ 29 ,  {14.92236459 }} ,
				{ 30 ,  {12.42341176 }} ,
				{ 31 ,  {19.30378831 }} ,
				{ 35 ,  {15.88980266 }} ,
				{ 36 ,  {18.01186323 }} ,
				{ 38 ,  {17.87430096 }} ,
				{ 39 ,  {19.42953688 }} ,
				{ 42 ,  {21.55749686 }} ,
				{ 43 ,  {23.18686483 }} ,
				{ 44 ,  {17.41761148 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.41906213760375977) ? ( (Feature_3 <= 0.24764414876699448) ? ( (Feature_7 <= 0.47633881866931915) ? ( (Feature_0 <= 0.5416467785835266) ? ( 4 ) : ( 5 ) ) : ( (Feature_7 <= 0.5698466598987579) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_4 <= 0.6678532958030701) ? ( (Feature_1 <= 0.26310715079307556) ? ( (Feature_2 <= 0.6518020331859589) ? ( 12 ) : ( 13 ) ) : ( (Feature_4 <= 0.3366689831018448) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_4 <= 0.945286363363266) ? ( (Feature_7 <= 0.41088664531707764) ? ( 19 ) : ( 20 ) ) : ( (Feature_8 <= 0.3969272426329553) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_0 <= 0.3040916919708252) ? ( (Feature_3 <= 0.32368186628445983) ? ( 26 ) : ( (Feature_6 <= 0.7072284817695618) ? ( (Feature_5 <= 0.9631622135639191) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) ) : ( (Feature_3 <= 0.7423960864543915) ? ( (Feature_3 <= 0.27084650099277496) ? ( (Feature_5 <= 0.8320007622241974) ? ( 35 ) : ( 36 ) ) : ( (Feature_8 <= 0.4650832414627075) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_0 <= 0.8299131989479065) ? ( (Feature_1 <= 0.5314056873321533) ? ( 42 ) : ( 43 ) ) : ( 44 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.54383152 }} ,
				{ 6 ,  {6.90098456 }} ,
				{ 7 ,  {8.24017885 }} ,
				{ 10 ,  {12.00761674 }} ,
				{ 11 ,  {10.92854766 }} ,
				{ 13 ,  {14.29164452 }} ,
				{ 14 ,  {15.92255811 }} ,
				{ 18 ,  {16.08254262 }} ,
				{ 19 ,  {14.46699637 }} ,
				{ 21 ,  {18.41288971 }} ,
				{ 22 ,  {18.00761757 }} ,
				{ 23 ,  {23.6939704 }} ,
				{ 26 ,  {7.21944335 }} ,
				{ 28 ,  {10.18163117 }} ,
				{ 30 ,  {22.76939497 }} ,
				{ 31 ,  {18.51102331 }} ,
				{ 35 ,  {23.18131441 }} ,
				{ 36 ,  {25.0341704 }} ,
				{ 38 ,  {20.62985591 }} ,
				{ 39 ,  {20.70189537 }} ,
				{ 40 ,  {14.53624519 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.37473800778388977) ? ( (Feature_4 <= 0.7348846197128296) ? ( (Feature_3 <= 0.44442465901374817) ? ( (Feature_7 <= 0.6349627375602722) ? ( (Feature_3 <= 0.13466930761933327) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_1 <= 0.23719792813062668) ? ( (Feature_6 <= 0.3166561722755432) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 0.5697106719017029) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 0.31816861033439636) ? ( (Feature_3 <= 0.5527656823396683) ? ( (Feature_0 <= 0.716993659734726) ? ( 18 ) : ( 19 ) ) : ( (Feature_7 <= 0.32392852008342743) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (Feature_5 <= 0.9278656244277954) ? ( (Feature_3 <= 0.031439348589628935) ? ( 26 ) : ( (Feature_5 <= 0.02199404314160347) ? ( 28 ) : ( (Feature_2 <= 0.014435429126024246) ? ( 30 ) : ( 31 ) ) ) ) : ( (Feature_9 <= 0.9311913847923279) ? ( (Feature_0 <= 0.6278819143772125) ? ( (Feature_7 <= 0.14904333278536797) ? ( 35 ) : ( 36 ) ) : ( (Feature_7 <= 0.729580283164978) ? ( 38 ) : ( 39 ) ) ) : ( 40 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.94482277 }} ,
				{ 6 ,  {5.293284 }} ,
				{ 8 ,  {6.86145372 }} ,
				{ 9 ,  {7.55699808 }} ,
				{ 11 ,  {17.31914707 }} ,
				{ 13 ,  {11.31420503 }} ,
				{ 14 ,  {6.98004624 }} ,
				{ 17 ,  {14.46699637 }} ,
				{ 18 ,  {11.38099315 }} ,
				{ 21 ,  {16.30255672 }} ,
				{ 22 ,  {18.21025364 }} ,
				{ 23 ,  {23.6939704 }} ,
				{ 28 ,  {12.42341176 }} ,
				{ 29 ,  {10.18163117 }} ,
				{ 31 ,  {14.92236459 }} ,
				{ 32 ,  {13.11975672 }} ,
				{ 34 ,  {19.30378831 }} ,
				{ 35 ,  {20.19903361 }} ,
				{ 39 ,  {17.7055006 }} ,
				{ 40 ,  {18.2440428 }} ,
				{ 42 ,  {15.70652198 }} ,
				{ 43 ,  {15.70100345 }} ,
				{ 46 ,  {22.1721582 }} ,
				{ 47 ,  {18.1906679 }} ,
				{ 49 ,  {24.13998453 }} ,
				{ 50 ,  {20.35262843 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.37473800778388977) ? ( (Feature_4 <= 0.6635735034942627) ? ( (Feature_3 <= 0.2420954331755638) ? ( (Feature_4 <= 0.4763462692499161) ? ( (Feature_7 <= 0.5698466598987579) ? ( 5 ) : ( 6 ) ) : ( (Feature_6 <= 0.7719791829586029) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_7 <= 0.041853321716189384) ? ( 11 ) : ( (Feature_8 <= 0.8485792875289917) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_3 <= 0.5866774022579193) ? ( (Feature_9 <= 0.5665852725505829) ? ( 17 ) : ( 18 ) ) : ( (Feature_4 <= 0.9337291419506073) ? ( (Feature_3 <= 0.6619341671466827) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_0 <= 0.3769059479236603) ? ( (Feature_6 <= 0.5948449373245239) ? ( (Feature_4 <= 0.22893158346414566) ? ( (Feature_4 <= 0.1475880928337574) ? ( 28 ) : ( 29 ) ) : ( (Feature_7 <= 0.3663542717695236) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_4 <= 0.5717649981379509) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_3 <= 0.5399050712585449) ? ( (Feature_7 <= 0.6114746928215027) ? ( (Feature_8 <= 0.42554977536201477) ? ( 39 ) : ( 40 ) ) : ( (Feature_1 <= 0.7582198977470398) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_6 <= 0.3831917643547058) ? ( (Feature_2 <= 0.19499831646680832) ? ( 46 ) : ( 47 ) ) : ( (Feature_9 <= 0.6470779180526733) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {10.09067946 }} ,
				{ 6 ,  {12.11014945 }} ,
				{ 8 ,  {6.47039731 }} ,
				{ 9 ,  {7.70639896 }} ,
				{ 11 ,  {16.91440831 }} ,
				{ 12 ,  {15.70100345 }} ,
				{ 15 ,  {18.23761382 }} ,
				{ 16 ,  {17.89244708 }} ,
				{ 19 ,  {12.76012926 }} ,
				{ 20 ,  {13.11975672 }} ,
				{ 22 ,  {15.54179787 }} ,
				{ 23 ,  {14.46699637 }} ,
				{ 28 ,  {10.59689049 }} ,
				{ 29 ,  {10.2020931 }} ,
				{ 31 ,  {12.10988659 }} ,
				{ 32 ,  {12.83034463 }} ,
				{ 33 ,  {18.4937214 }} ,
				{ 37 ,  {17.3570282 }} ,
				{ 38 ,  {19.75716176 }} ,
				{ 39 ,  {12.42341176 }} ,
				{ 41 ,  {15.30848399 }} ,
				{ 43 ,  {23.43974603 }} ,
				{ 44 ,  {20.88265328 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_3 <= 0.4696362465620041) ? ( (Feature_4 <= 0.5903706550598145) ? ( (Feature_1 <= 0.6534442901611328) ? ( (Feature_5 <= 0.22620628774166107) ? ( (Feature_3 <= 0.33722974359989166) ? ( 5 ) : ( 6 ) ) : ( (Feature_5 <= 0.6208158731460571) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= 0.7692824006080627) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_7 <= 0.3534885048866272) ? ( (Feature_1 <= 0.5788317918777466) ? ( 15 ) : ( 16 ) ) : ( (Feature_6 <= 0.308781735599041) ? ( (Feature_6 <= 0.12376299500465393) ? ( 19 ) : ( 20 ) ) : ( (Feature_7 <= 0.5265208780765533) ? ( 22 ) : ( 23 ) ) ) ) ) : ( (Feature_1 <= 0.1546475514769554) ? ( (Feature_3 <= 0.8869200050830841) ? ( (Feature_7 <= 0.758442610502243) ? ( (Feature_1 <= 0.011180258821696043) ? ( 28 ) : ( 29 ) ) : ( (Feature_7 <= 0.9286892116069794) ? ( 31 ) : ( 32 ) ) ) : ( 33 ) ) : ( (Feature_3 <= 0.7538962662220001) ? ( (Feature_5 <= 0.9622814059257507) ? ( (Feature_9 <= 0.8632417619228363) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) : ( (Feature_0 <= 0.3701889142394066) ? ( 41 ) : ( (Feature_9 <= 0.5368971526622772) ? ( 43 ) : ( 44 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {13.11975672 }} ,
				{ 5 ,  {12.0711718 }} ,
				{ 8 ,  {9.73504122 }} ,
				{ 9 ,  {10.04520361 }} ,
				{ 11 ,  {6.4225845 }} ,
				{ 12 ,  {8.02457722 }} ,
				{ 16 ,  {17.31914707 }} ,
				{ 17 ,  {14.77256375 }} ,
				{ 19 ,  {12.70702033 }} ,
				{ 20 ,  {10.59689049 }} ,
				{ 22 ,  {11.38099315 }} ,
				{ 24 ,  {18.25066948 }} ,
				{ 25 ,  {16.30255672 }} ,
				{ 30 ,  {10.18163117 }} ,
				{ 31 ,  {10.13178962 }} ,
				{ 33 ,  {14.79365812 }} ,
				{ 34 ,  {12.42341176 }} ,
				{ 37 ,  {15.79495831 }} ,
				{ 38 ,  {17.4514578 }} ,
				{ 40 ,  {19.95894273 }} ,
				{ 41 ,  {20.19903361 }} ,
				{ 45 ,  {22.76939497 }} ,
				{ 46 ,  {18.27065706 }} ,
				{ 48 ,  {22.67001693 }} ,
				{ 49 ,  {21.34099337 }} ,
				{ 52 ,  {24.71333827 }} ,
				{ 53 ,  {25.24805848 }} ,
				{ 54 ,  {23.18131441 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.4512072205543518) ? ( (Feature_3 <= 0.4583197087049484) ? ( (Feature_2 <= 0.2803546190261841) ? ( (Feature_3 <= 0.32041601836681366) ? ( 4 ) : ( 5 ) ) : ( (Feature_5 <= 0.1925923340022564) ? ( (Feature_0 <= 0.6600208282470703) ? ( 8 ) : ( 9 ) ) : ( (Feature_5 <= 0.6208158731460571) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_4 <= 0.6678532958030701) ? ( (Feature_7 <= 0.041853321716189384) ? ( (Feature_8 <= 0.43554404377937317) ? ( 16 ) : ( 17 ) ) : ( (Feature_9 <= 0.8895005583763123) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_8 <= 0.1619274220429361) ? ( 22 ) : ( (Feature_0 <= 0.7187510430812836) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_0 <= 0.38620519638061523) ? ( (Feature_4 <= 0.7087181210517883) ? ( (Feature_5 <= 0.32829488813877106) ? ( (Feature_4 <= 0.3963480815291405) ? ( 30 ) : ( 31 ) ) : ( (Feature_6 <= 0.4435751885175705) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_1 <= 0.8203642666339874) ? ( (Feature_4 <= 0.8626847267150879) ? ( 37 ) : ( 38 ) ) : ( (Feature_8 <= 0.6201552748680115) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_5 <= 0.9278656244277954) ? ( (Feature_3 <= 0.944815069437027) ? ( (Feature_2 <= 0.014435429126024246) ? ( 45 ) : ( 46 ) ) : ( (Feature_0 <= 0.6733211278915405) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_8 <= 0.8101703524589539) ? ( (Feature_1 <= 0.7484446465969086) ? ( 52 ) : ( 53 ) ) : ( 54 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {5.293284 }} ,
				{ 6 ,  {6.24571025 }} ,
				{ 8 ,  {7.55699808 }} ,
				{ 9 ,  {6.98004624 }} ,
				{ 12 ,  {10.21730624 }} ,
				{ 13 ,  {11.78982164 }} ,
				{ 15 ,  {11.31351814 }} ,
				{ 16 ,  {8.16845829 }} ,
				{ 19 ,  {12.10988659 }} ,
				{ 21 ,  {12.76012926 }} ,
				{ 22 ,  {12.83034463 }} ,
				{ 24 ,  {16.08254262 }} ,
				{ 25 ,  {18.4937214 }} ,
				{ 30 ,  {15.24796272 }} ,
				{ 31 ,  {13.17420206 }} ,
				{ 33 ,  {10.18163117 }} ,
				{ 34 ,  {6.86145372 }} ,
				{ 37 ,  {14.53624519 }} ,
				{ 38 ,  {16.45480793 }} ,
				{ 40 ,  {17.51855413 }} ,
				{ 41 ,  {19.91519956 }} ,
				{ 45 ,  {17.71276844 }} ,
				{ 46 ,  {14.46699637 }} ,
				{ 48 ,  {20.62985591 }} ,
				{ 49 ,  {19.36426348 }} ,
				{ 52 ,  {24.22039178 }} ,
				{ 53 ,  {22.40213986 }} ,
				{ 55 ,  {18.9003877 }} ,
				{ 56 ,  {17.41761148 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= 0.23276454955339432) ? ( (Feature_4 <= 0.5902727842330933) ? ( (Feature_3 <= 0.3159424811601639) ? ( (Feature_3 <= 0.09447410702705383) ? ( (Feature_8 <= 0.42276668548583984) ? ( 5 ) : ( 6 ) ) : ( (Feature_2 <= 0.36105485260486603) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_5 <= 0.7245974540710449) ? ( (Feature_2 <= 0.6918564140796661) ? ( 12 ) : ( 13 ) ) : ( (Feature_9 <= 0.42202313244342804) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_4 <= 0.780214250087738) ? ( (Feature_0 <= 0.24264557659626007) ? ( 19 ) : ( (Feature_7 <= 0.6884144842624664) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_0 <= 0.6344188749790192) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_0 <= 0.5648999214172363) ? ( (Feature_1 <= 0.594910204410553) ? ( (Feature_2 <= 0.30169156193733215) ? ( (Feature_6 <= 0.4898923635482788) ? ( 30 ) : ( 31 ) ) : ( (Feature_8 <= 0.5583783388137817) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_6 <= 0.4759466201066971) ? ( (Feature_0 <= 0.29289835691452026) ? ( 37 ) : ( 38 ) ) : ( (Feature_8 <= 0.40586425364017487) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_3 <= 0.7514037787914276) ? ( (Feature_1 <= 0.7585236728191376) ? ( (Feature_4 <= 0.9505248963832855) ? ( 45 ) : ( 46 ) ) : ( (Feature_8 <= 0.5247756987810135) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_1 <= 0.7791935205459595) ? ( (Feature_3 <= 0.8084623515605927) ? ( 52 ) : ( 53 ) ) : ( (Feature_6 <= 0.29019420593976974) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman1.csv");
	return 0;
}
