// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : freidman3

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_freidman3.exe ml2cpp-demo_BaggingRegressor_freidman3.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.48486692 }} ,
				{ 4 ,  {0.38342473 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 9 ,  {1.55432885 }} ,
				{ 11 ,  {1.40929984 }} ,
				{ 12 ,  {1.35633395 }} ,
				{ 14 ,  {0.70507147 }} ,
				{ 16 ,  {1.13749386 }} ,
				{ 17 ,  {1.33034355 }} ,
				{ 21 ,  {1.16100714 }} ,
				{ 22 ,  {1.14405643 }} ,
				{ 23 ,  {1.27887759 }} ,
				{ 26 ,  {1.49715235 }} ,
				{ 27 ,  {1.32892492 }} ,
				{ 29 ,  {1.53631304 }} ,
				{ 30 ,  {1.48947205 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_1 <= 1445.2074584960938) ? ( (Feature_1 <= 856.9492797851562) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_2 <= 0.42248982191085815) ? ( (Feature_0 <= 48.903419494628906) ? ( (Feature_0 <= 8.738058090209961) ? ( 9 ) : ( (Feature_2 <= 0.04905073344707489) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_2 <= 0.1361902840435505) ? ( 14 ) : ( (Feature_1 <= 1098.1847229003906) ? ( 16 ) : ( 17 ) ) ) ) : ( (Feature_1 <= 255.7740478515625) ? ( (Feature_1 <= 233.35620880126953) ? ( (Feature_3 <= 4.445401191711426) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) : ( (Feature_1 <= 519.7247924804688) ? ( (Feature_0 <= 48.34617042541504) ? ( 26 ) : ( 27 ) ) : ( (Feature_0 <= 48.62996292114258) ? ( 29 ) : ( 30 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 3 ,  {0.38342473 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 11 ,  {1.26879448 }} ,
				{ 12 ,  {1.1030161 }} ,
				{ 14 ,  {1.40929984 }} ,
				{ 15 ,  {1.34636148 }} ,
				{ 19 ,  {1.53596709 }} ,
				{ 20 ,  {1.43130244 }} ,
				{ 22 ,  {1.46088901 }} ,
				{ 23 ,  {1.18648202 }} ,
				{ 26 ,  {1.42518022 }} ,
				{ 27 ,  {1.35886857 }} ,
				{ 29 ,  {1.53022139 }} ,
				{ 30 ,  {1.49648065 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.02901188051328063) ? ( (Feature_0 <= 26.660706520080566) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 505.7232666015625) ? ( (Feature_2 <= 0.10221557691693306) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 1098.1847229003906) ? ( (Feature_0 <= 65.30802154541016) ? ( 11 ) : ( 12 ) ) : ( (Feature_3 <= 3.5137875080108643) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_1 <= 519.7247924804688) ? ( (Feature_0 <= 29.003992080688477) ? ( (Feature_1 <= 153.59423828125) ? ( 19 ) : ( 20 ) ) : ( (Feature_3 <= 1.9182242155075073) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_2 <= 0.38769569993019104) ? ( (Feature_0 <= 45.62005615234375) ? ( 26 ) : ( 27 ) ) : ( (Feature_0 <= 50.357994079589844) ? ( 29 ) : ( 30 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38342473 }} ,
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.70507147 }} ,
				{ 9 ,  {1.53596709 }} ,
				{ 11 ,  {1.45085999 }} ,
				{ 12 ,  {1.16100714 }} ,
				{ 15 ,  {1.14405643 }} ,
				{ 16 ,  {1.11561476 }} ,
				{ 18 ,  {1.38449452 }} ,
				{ 19 ,  {1.27221806 }} ,
				{ 23 ,  {1.53671123 }} ,
				{ 24 ,  {1.34984299 }} ,
				{ 26 ,  {1.10634412 }} ,
				{ 27 ,  {1.081892 }} ,
				{ 30 ,  {1.567781 }} ,
				{ 31 ,  {1.53249386 }} ,
				{ 33 ,  {1.27948723 }} ,
				{ 34 ,  {1.49009524 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.14378926530480385) ? ( (Feature_0 <= 45.53131294250488) ? ( (Feature_0 <= 39.70485877990723) ? ( 3 ) : ( 4 ) ) : ( 5 ) ) : ( (Feature_1 <= 450.96368408203125) ? ( (Feature_0 <= 44.8392276763916) ? ( (Feature_2 <= 0.3950181156396866) ? ( 9 ) : ( (Feature_3 <= 2.021695613861084) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_1 <= 245.38916015625) ? ( (Feature_1 <= 231.9021987915039) ? ( 15 ) : ( 16 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( 18 ) : ( 19 ) ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_0 <= 76.98457717895508) ? ( (Feature_2 <= 0.27968403697013855) ? ( 23 ) : ( 24 ) ) : ( (Feature_0 <= 87.34974670410156) ? ( 26 ) : ( 27 ) ) ) : ( (Feature_0 <= 50.59944534301758) ? ( (Feature_0 <= 7.656977891921997) ? ( 30 ) : ( 31 ) ) : ( (Feature_1 <= 662.0272216796875) ? ( 33 ) : ( 34 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.38342473 }} ,
				{ 4 ,  {0.61001684 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 11 ,  {1.40929984 }} ,
				{ 12 ,  {1.35009011 }} ,
				{ 13 ,  {1.14091625 }} ,
				{ 18 ,  {1.53596709 }} ,
				{ 19 ,  {1.45186094 }} ,
				{ 21 ,  {1.13377171 }} ,
				{ 22 ,  {1.27887759 }} ,
				{ 25 ,  {1.31432562 }} ,
				{ 26 ,  {1.34636148 }} ,
				{ 28 ,  {1.52863669 }} ,
				{ 29 ,  {1.48020213 }} ,
				{ 33 ,  {1.081892 }} ,
				{ 34 ,  {1.02748435 }} ,
				{ 35 ,  {1.15778604 }} ,
				{ 37 ,  {1.27948723 }} ,
				{ 38 ,  {1.49496626 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_1 <= 1445.2074584960938) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 516.9712219238281) ? ( (Feature_2 <= 0.10221557691693306) ? ( 7 ) : ( 8 ) ) : ( (Feature_3 <= 8.204108476638794) ? ( (Feature_3 <= 4.160592079162598) ? ( 11 ) : ( 12 ) ) : ( 13 ) ) ) ) : ( (Feature_0 <= 76.04357528686523) ? ( (Feature_1 <= 255.7740478515625) ? ( (Feature_0 <= 26.78800344467163) ? ( (Feature_1 <= 153.59423828125) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.7917166650295258) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_2 <= 0.25813600420951843) ? ( (Feature_2 <= 0.20947152376174927) ? ( 25 ) : ( 26 ) ) : ( (Feature_0 <= 39.751386642456055) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_3 <= 4.276979923248291) ? ( (Feature_3 <= 2.7846378684043884) ? ( (Feature_3 <= 1.4681963324546814) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) : ( (Feature_2 <= 0.6911281049251556) ? ( 37 ) : ( 38 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.40929984 }} ,
				{ 5 ,  {0.61001684 }} ,
				{ 7 ,  {0.48486692 }} ,
				{ 8 ,  {0.37929615 }} ,
				{ 10 ,  {1.36871758 }} ,
				{ 11 ,  {0.70507147 }} ,
				{ 15 ,  {1.16100714 }} ,
				{ 16 ,  {1.53596709 }} ,
				{ 18 ,  {1.3413442 }} ,
				{ 20 ,  {1.46483828 }} ,
				{ 21 ,  {1.52332753 }} ,
				{ 25 ,  {1.07654708 }} ,
				{ 26 ,  {1.02748435 }} ,
				{ 28 ,  {1.15841469 }} ,
				{ 29 ,  {1.27887759 }} ,
				{ 31 ,  {1.34636148 }} ,
				{ 33 ,  {1.47832813 }} ,
				{ 34 ,  {1.50754127 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1157732792198658) ? ( (Feature_3 <= 2.4321192502975464) ? ( 2 ) : ( (Feature_2 <= 0.07823304459452629) ? ( (Feature_2 <= 0.009662731783464551) ? ( 5 ) : ( (Feature_3 <= 5.679425954818726) ? ( 7 ) : ( 8 ) ) ) : ( (Feature_0 <= 34.32356071472168) ? ( 10 ) : ( 11 ) ) ) ) : ( (Feature_0 <= 61.53804397583008) ? ( (Feature_1 <= 200.30526733398438) ? ( (Feature_3 <= 5.996250152587891) ? ( 15 ) : ( 16 ) ) : ( (Feature_2 <= 0.19440099596977234) ? ( 18 ) : ( (Feature_3 <= 2.1947439908981323) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_1 <= 882.4816589355469) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_2 <= 0.6747548580169678) ? ( 25 ) : ( 26 ) ) : ( (Feature_2 <= 0.8503361940383911) ? ( 28 ) : ( 29 ) ) ) : ( (Feature_0 <= 69.35232162475586) ? ( 31 ) : ( (Feature_1 <= 1033.6248474121094) ? ( 33 ) : ( 34 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.14091625 }} ,
				{ 5 ,  {1.36871758 }} ,
				{ 6 ,  {1.40929984 }} ,
				{ 9 ,  {0.80791092 }} ,
				{ 10 ,  {0.70507147 }} ,
				{ 12 ,  {0.48486692 }} ,
				{ 14 ,  {0.37516757 }} ,
				{ 15 ,  {0.38342473 }} ,
				{ 20 ,  {1.53596709 }} ,
				{ 21 ,  {1.41074394 }} ,
				{ 23 ,  {1.11561476 }} ,
				{ 24 ,  {1.38449452 }} ,
				{ 26 ,  {1.31432562 }} ,
				{ 28 ,  {1.55172203 }} ,
				{ 29 ,  {1.50101215 }} ,
				{ 33 ,  {1.34752198 }} ,
				{ 34 ,  {1.26722342 }} ,
				{ 36 ,  {1.1360622 }} ,
				{ 37 ,  {1.05468818 }} ,
				{ 39 ,  {1.27887759 }} ,
				{ 41 ,  {1.46708262 }} ,
				{ 42 ,  {1.50181409 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_1 <= 730.0179748535156) ? ( 3 ) : ( (Feature_1 <= 1252.6717834472656) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_3 <= 3.731728196144104) ? ( (Feature_3 <= 2.6836572885513306) ? ( 9 ) : ( 10 ) ) : ( (Feature_3 <= 5.679425954818726) ? ( 12 ) : ( (Feature_1 <= 809.5308074951172) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (Feature_0 <= 65.76683044433594) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_0 <= 34.57929039001465) ? ( (Feature_1 <= 199.43272399902344) ? ( 20 ) : ( 21 ) ) : ( (Feature_2 <= 0.6276147961616516) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 26 ) : ( (Feature_0 <= 23.030441284179688) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_2 <= 0.8226335346698761) ? ( (Feature_0 <= 76.10906219482422) ? ( (Feature_2 <= 0.4575631320476532) ? ( 33 ) : ( 34 ) ) : ( (Feature_0 <= 91.95731735229492) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_1 <= 565.5738677978516) ? ( 39 ) : ( (Feature_1 <= 958.3919067382812) ? ( 41 ) : ( 42 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {1.14091625 }} ,
				{ 5 ,  {1.36871758 }} ,
				{ 6 ,  {0.61001684 }} ,
				{ 9 ,  {0.37516757 }} ,
				{ 10 ,  {0.38342473 }} ,
				{ 12 ,  {0.80791092 }} ,
				{ 13 ,  {0.70507147 }} ,
				{ 18 ,  {1.41074394 }} ,
				{ 19 ,  {1.46071017 }} ,
				{ 21 ,  {1.14587635 }} ,
				{ 22 ,  {1.32935424 }} ,
				{ 25 ,  {1.12520028 }} ,
				{ 26 ,  {1.19835311 }} ,
				{ 28 ,  {1.07654708 }} ,
				{ 29 ,  {1.02748435 }} ,
				{ 32 ,  {1.31432562 }} ,
				{ 33 ,  {1.081892 }} ,
				{ 36 ,  {1.55559363 }} ,
				{ 37 ,  {1.53370949 }} ,
				{ 39 ,  {1.46679899 }} ,
				{ 40 ,  {1.49524974 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_1 <= 1294.4382629394531) ? ( (Feature_0 <= 17.01914691925049) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( (Feature_2 <= 0.07712984457612038) ? ( (Feature_1 <= 809.5308074951172) ? ( 9 ) : ( 10 ) ) : ( (Feature_3 <= 2.6836572885513306) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_0 <= 74.51426315307617) ? ( (Feature_0 <= 36.620771408081055) ? ( (Feature_3 <= 5.738123416900635) ? ( 18 ) : ( 19 ) ) : ( (Feature_1 <= 245.38916015625) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_0 <= 89.41059494018555) ? ( (Feature_0 <= 80.37459945678711) ? ( 25 ) : ( 26 ) ) : ( (Feature_2 <= 0.6747548580169678) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_2 <= 0.19915488362312317) ? ( (Feature_2 <= 0.1755022555589676) ? ( 32 ) : ( 33 ) ) : ( (Feature_0 <= 48.26803398132324) ? ( (Feature_0 <= 12.716658115386963) ? ( 36 ) : ( 37 ) ) : ( (Feature_1 <= 957.5493774414062) ? ( 39 ) : ( 40 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.37516757 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 9 ,  {1.081892 }} ,
				{ 11 ,  {1.13828483 }} ,
				{ 12 ,  {1.36871758 }} ,
				{ 15 ,  {1.54552004 }} ,
				{ 16 ,  {1.47795145 }} ,
				{ 18 ,  {1.32783491 }} ,
				{ 19 ,  {1.34636148 }} ,
				{ 23 ,  {1.54877679 }} ,
				{ 24 ,  {1.43815527 }} ,
				{ 26 ,  {1.11649954 }} ,
				{ 27 ,  {1.33419435 }} ,
				{ 30 ,  {1.55364397 }} ,
				{ 31 ,  {1.52190806 }} ,
				{ 33 ,  {1.46424873 }} ,
				{ 34 ,  {1.49524786 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_3 <= 8.43302845954895) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.4144279509782791) ? ( (Feature_1 <= 1078.7010192871094) ? ( (Feature_3 <= 3.3261798620224) ? ( (Feature_2 <= 0.14378926530480385) ? ( 8 ) : ( 9 ) ) : ( (Feature_1 <= 840.4352722167969) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_0 <= 39.54890251159668) ? ( (Feature_0 <= 19.627939701080322) ? ( 15 ) : ( 16 ) ) : ( (Feature_0 <= 62.804100036621094) ? ( 18 ) : ( 19 ) ) ) ) : ( (Feature_1 <= 537.6676635742188) ? ( (Feature_0 <= 29.003992080688477) ? ( (Feature_0 <= 12.17395305633545) ? ( 23 ) : ( 24 ) ) : ( (Feature_1 <= 228.15776824951172) ? ( 26 ) : ( 27 ) ) ) : ( (Feature_0 <= 50.59944534301758) ? ( (Feature_0 <= 28.26369857788086) ? ( 30 ) : ( 31 ) ) : ( (Feature_1 <= 852.9207458496094) ? ( 33 ) : ( 34 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {1.35009011 }} ,
				{ 4 ,  {0.80791092 }} ,
				{ 6 ,  {0.38342473 }} ,
				{ 7 ,  {0.37516757 }} ,
				{ 12 ,  {1.41074394 }} ,
				{ 13 ,  {1.36789414 }} ,
				{ 15 ,  {1.52208363 }} ,
				{ 16 ,  {1.46088901 }} ,
				{ 18 ,  {1.36871758 }} ,
				{ 20 ,  {1.5558566 }} ,
				{ 21 ,  {1.51412624 }} ,
				{ 25 ,  {1.11195258 }} ,
				{ 26 ,  {1.1610368 }} ,
				{ 27 ,  {1.38449452 }} ,
				{ 30 ,  {1.3214291 }} ,
				{ 31 ,  {1.081892 }} ,
				{ 33 ,  {1.46665718 }} ,
				{ 34 ,  {1.48912378 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.10105706006288528) ? ( (Feature_0 <= 28.417759895324707) ? ( 2 ) : ( (Feature_1 <= 445.71485900878906) ? ( 4 ) : ( (Feature_0 <= 50.93963050842285) ? ( 6 ) : ( 7 ) ) ) ) : ( (Feature_0 <= 49.2326774597168) ? ( (Feature_3 <= 2.029953122138977) ? ( (Feature_2 <= 0.5983338803052902) ? ( (Feature_0 <= 33.95136260986328) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 1.6441163420677185) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_2 <= 0.1586843952536583) ? ( 18 ) : ( (Feature_0 <= 20.67043399810791) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_1 <= 692.4324340820312) ? ( (Feature_2 <= 0.8033285439014435) ? ( (Feature_2 <= 0.473791241645813) ? ( 25 ) : ( 26 ) ) : ( 27 ) ) : ( (Feature_2 <= 0.4553815424442291) ? ( (Feature_0 <= 86.0887336730957) ? ( 30 ) : ( 31 ) ) : ( (Feature_1 <= 890.76611328125) ? ( 33 ) : ( 34 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.38342473 }} ,
				{ 9 ,  {1.1968265 }} ,
				{ 11 ,  {1.40929984 }} ,
				{ 12 ,  {1.3575411 }} ,
				{ 15 ,  {1.56030668 }} ,
				{ 16 ,  {1.53549644 }} ,
				{ 18 ,  {1.27887759 }} ,
				{ 19 ,  {1.4856347 }} ,
				{ 23 ,  {1.07921954 }} ,
				{ 24 ,  {1.02748435 }} ,
				{ 26 ,  {1.12349143 }} ,
				{ 27 ,  {1.23229966 }} ,
				{ 29 ,  {1.46708262 }} ,
				{ 30 ,  {1.49322332 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 26.660706520080566) ? ( 2 ) : ( (Feature_1 <= 856.9492797851562) ? ( 4 ) : ( 5 ) ) ) : ( (Feature_0 <= 72.4854736328125) ? ( (Feature_2 <= 0.22849729657173157) ? ( (Feature_1 <= 840.4352722167969) ? ( 9 ) : ( (Feature_3 <= 4.160592079162598) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_0 <= 34.446685791015625) ? ( (Feature_0 <= 7.656977891921997) ? ( 15 ) : ( 16 ) ) : ( (Feature_1 <= 306.52972412109375) ? ( 18 ) : ( 19 ) ) ) ) : ( (Feature_2 <= 0.8226335346698761) ? ( (Feature_3 <= 3.7161033153533936) ? ( (Feature_2 <= 0.6747548580169678) ? ( 23 ) : ( 24 ) ) : ( (Feature_2 <= 0.4183829128742218) ? ( 26 ) : ( 27 ) ) ) : ( (Feature_2 <= 0.9136996269226074) ? ( 29 ) : ( 30 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.37516757 }} ,
				{ 8 ,  {1.53192082 }} ,
				{ 9 ,  {1.57013152 }} ,
				{ 10 ,  {1.45186094 }} ,
				{ 13 ,  {1.15253179 }} ,
				{ 14 ,  {1.11561476 }} ,
				{ 16 ,  {1.13649067 }} ,
				{ 17 ,  {1.35048948 }} ,
				{ 21 ,  {1.55929544 }} ,
				{ 22 ,  {1.52804718 }} ,
				{ 24 ,  {1.34385284 }} ,
				{ 25 ,  {1.47263588 }} ,
				{ 26 ,  {1.081892 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.056316668167710304) ? ( (Feature_2 <= 0.03391193738207221) ? ( 2 ) : ( 3 ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_0 <= 15.669092655181885) ? ( (Feature_0 <= 12.17395305633545) ? ( (Feature_2 <= 0.46043506264686584) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) : ( (Feature_1 <= 245.38916015625) ? ( (Feature_1 <= 231.9021987915039) ? ( 13 ) : ( 14 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( 16 ) : ( 17 ) ) ) ) : ( (Feature_0 <= 87.57884216308594) ? ( (Feature_0 <= 47.0081787109375) ? ( (Feature_0 <= 15.311119556427002) ? ( 21 ) : ( 22 ) ) : ( (Feature_2 <= 0.28124406933784485) ? ( 24 ) : ( 25 ) ) ) : ( 26 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.38342473 }} ,
				{ 3 ,  {0.48486692 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 11 ,  {1.11340366 }} ,
				{ 12 ,  {1.1968265 }} ,
				{ 14 ,  {1.36048096 }} ,
				{ 15 ,  {1.53671123 }} ,
				{ 19 ,  {1.55693496 }} ,
				{ 20 ,  {1.5285057 }} ,
				{ 22 ,  {1.45014868 }} ,
				{ 23 ,  {1.50824867 }} ,
				{ 26 ,  {1.21505182 }} ,
				{ 27 ,  {1.05201572 }} ,
				{ 29 ,  {1.34636148 }} ,
				{ 30 ,  {1.48282415 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 39.70485877990723) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_1 <= 505.7232666015625) ? ( (Feature_2 <= 0.10221557691693306) ? ( 7 ) : ( 8 ) ) : ( (Feature_1 <= 840.4352722167969) ? ( (Feature_1 <= 765.2993469238281) ? ( 11 ) : ( 12 ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_0 <= 64.48090744018555) ? ( (Feature_0 <= 34.446685791015625) ? ( (Feature_0 <= 23.801116943359375) ? ( 19 ) : ( 20 ) ) : ( (Feature_1 <= 1027.0198364257812) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_1 <= 771.5745849609375) ? ( (Feature_0 <= 89.41059494018555) ? ( 26 ) : ( 27 ) ) : ( (Feature_0 <= 69.35232162475586) ? ( 29 ) : ( 30 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {0.48486692 }} ,
				{ 5 ,  {0.37516757 }} ,
				{ 6 ,  {0.80791092 }} ,
				{ 8 ,  {1.14091625 }} ,
				{ 9 ,  {1.40929984 }} ,
				{ 14 ,  {1.16100714 }} ,
				{ 15 ,  {1.11561476 }} ,
				{ 17 ,  {1.47989632 }} ,
				{ 18 ,  {1.38449452 }} ,
				{ 21 ,  {1.36871758 }} ,
				{ 22 ,  {1.33233801 }} ,
				{ 24 ,  {1.53673512 }} ,
				{ 25 ,  {1.48696741 }} ,
				{ 29 ,  {1.07921954 }} ,
				{ 30 ,  {1.21710895 }} ,
				{ 31 ,  {1.46708262 }} ,
				{ 33 ,  {1.34636148 }} ,
				{ 35 ,  {1.49230328 }} ,
				{ 36 ,  {1.50990015 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.10105706006288528) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_2 <= 0.07712984457612038) ? ( (Feature_0 <= 51.677101135253906) ? ( 4 ) : ( 5 ) ) : ( 6 ) ) : ( (Feature_1 <= 1121.4007568359375) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_0 <= 61.53804397583008) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_3 <= 7.815814971923828) ? ( (Feature_1 <= 189.92037963867188) ? ( 14 ) : ( 15 ) ) : ( (Feature_2 <= 0.7759501934051514) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_2 <= 0.21481800079345703) ? ( (Feature_1 <= 1072.0778503417969) ? ( 21 ) : ( 22 ) ) : ( (Feature_0 <= 37.74134635925293) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_1 <= 1010.5097961425781) ? ( (Feature_3 <= 8.640667915344238) ? ( (Feature_3 <= 3.7161033153533936) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) : ( (Feature_2 <= 0.48192600905895233) ? ( 33 ) : ( (Feature_2 <= 0.9793506264686584) ? ( 35 ) : ( 36 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {0.80791092 }} ,
				{ 5 ,  {0.48486692 }} ,
				{ 6 ,  {0.37516757 }} ,
				{ 8 ,  {0.61001684 }} ,
				{ 11 ,  {1.40929984 }} ,
				{ 12 ,  {1.35009011 }} ,
				{ 14 ,  {1.081892 }} ,
				{ 15 ,  {1.14091625 }} ,
				{ 20 ,  {1.53621514 }} ,
				{ 21 ,  {1.42518022 }} ,
				{ 23 ,  {1.11044163 }} ,
				{ 24 ,  {1.34636148 }} ,
				{ 26 ,  {1.16100714 }} ,
				{ 28 ,  {1.47039493 }} ,
				{ 29 ,  {1.52384973 }} ,
				{ 31 ,  {1.02748435 }} ,
				{ 32 ,  {1.07654708 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.19915488362312317) ? ( (Feature_1 <= 574.9090576171875) ? ( (Feature_3 <= 3.53000545501709) ? ( 3 ) : ( (Feature_0 <= 51.677101135253906) ? ( 5 ) : ( 6 ) ) ) : ( (Feature_2 <= 0.025156566640362144) ? ( 8 ) : ( (Feature_2 <= 0.05596162937581539) ? ( (Feature_0 <= 14.894282341003418) ? ( 11 ) : ( 12 ) ) : ( (Feature_3 <= 5.599993944168091) ? ( 14 ) : ( 15 ) ) ) ) ) : ( (Feature_0 <= 90.57643127441406) ? ( (Feature_2 <= 0.4144279509782791) ? ( (Feature_0 <= 46.24798393249512) ? ( (Feature_0 <= 25.83055353164673) ? ( 20 ) : ( 21 ) ) : ( (Feature_1 <= 958.5805969238281) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_1 <= 158.22232055664062) ? ( 26 ) : ( (Feature_1 <= 815.7905578613281) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_1 <= 256.30464935302734) ? ( 31 ) : ( 32 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {1.14091625 }} ,
				{ 4 ,  {1.40929984 }} ,
				{ 7 ,  {0.80791092 }} ,
				{ 8 ,  {0.70507147 }} ,
				{ 10 ,  {0.48486692 }} ,
				{ 12 ,  {0.38342473 }} ,
				{ 13 ,  {0.37516757 }} ,
				{ 18 ,  {1.11561476 }} ,
				{ 19 ,  {1.16100714 }} ,
				{ 20 ,  {1.53596709 }} ,
				{ 22 ,  {1.31432562 }} ,
				{ 24 ,  {1.36789414 }} ,
				{ 25 ,  {1.51357611 }} ,
				{ 29 ,  {1.24737362 }} ,
				{ 30 ,  {1.07654708 }} ,
				{ 31 ,  {1.1082904 }} ,
				{ 33 ,  {1.34636148 }} ,
				{ 35 ,  {1.49889488 }} ,
				{ 36 ,  {1.47193903 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.1361902840435505) ? ( (Feature_0 <= 27.489428520202637) ? ( (Feature_1 <= 1121.4007568359375) ? ( 3 ) : ( 4 ) ) : ( (Feature_1 <= 445.71485900878906) ? ( (Feature_0 <= 46.1015510559082) ? ( 7 ) : ( 8 ) ) : ( (Feature_3 <= 5.679425954818726) ? ( 10 ) : ( (Feature_3 <= 8.43302845954895) ? ( 12 ) : ( 13 ) ) ) ) ) : ( (Feature_0 <= 65.67565155029297) ? ( (Feature_1 <= 254.32003784179688) ? ( (Feature_3 <= 7.916175842285156) ? ( (Feature_2 <= 0.5308420062065125) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_2 <= 0.1915559023618698) ? ( 22 ) : ( (Feature_3 <= 1.2365522980690002) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_1 <= 849.0594787597656) ? ( (Feature_1 <= 545.8458251953125) ? ( (Feature_0 <= 86.93203353881836) ? ( 29 ) : ( 30 ) ) : ( 31 ) ) : ( (Feature_3 <= 5.7381227016448975) ? ( 33 ) : ( (Feature_1 <= 1516.0659790039062) ? ( 35 ) : ( 36 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 2 ,  {0.61001684 }} ,
				{ 3 ,  {0.48486692 }} ,
				{ 7 ,  {0.70507147 }} ,
				{ 9 ,  {1.1509548 }} ,
				{ 10 ,  {1.081892 }} ,
				{ 12 ,  {1.53671123 }} ,
				{ 14 ,  {1.40929984 }} ,
				{ 15 ,  {1.34636148 }} ,
				{ 19 ,  {1.56316862 }} ,
				{ 20 ,  {1.52263693 }} ,
				{ 22 ,  {1.33168605 }} ,
				{ 23 ,  {1.47807992 }} ,
				{ 26 ,  {1.26722342 }} ,
				{ 27 ,  {1.09803608 }} ,
				{ 29 ,  {1.34984299 }} ,
				{ 30 ,  {1.48058871 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.041584232822060585) ? ( (Feature_3 <= 4.048245787620544) ? ( 2 ) : ( 3 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( (Feature_1 <= 1078.7010192871094) ? ( (Feature_1 <= 494.287353515625) ? ( 7 ) : ( (Feature_0 <= 91.95731735229492) ? ( 9 ) : ( 10 ) ) ) : ( (Feature_0 <= 10.242729663848877) ? ( 12 ) : ( (Feature_2 <= 0.14777274429798126) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_0 <= 72.4854736328125) ? ( (Feature_0 <= 39.751386642456055) ? ( (Feature_0 <= 12.58546257019043) ? ( 19 ) : ( 20 ) ) : ( (Feature_1 <= 360.9476013183594) ? ( 22 ) : ( 23 ) ) ) : ( (Feature_1 <= 644.9218444824219) ? ( (Feature_0 <= 74.51426315307617) ? ( 26 ) : ( 27 ) ) : ( (Feature_2 <= 0.5962905287742615) ? ( 29 ) : ( 30 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman3.csv");
	return 0;
}
