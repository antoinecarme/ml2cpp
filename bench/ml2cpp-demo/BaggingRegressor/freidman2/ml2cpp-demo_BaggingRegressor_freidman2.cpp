// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : freidman2

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_freidman2.exe ml2cpp-demo_BaggingRegressor_freidman2.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {45.71113412 }} ,
				{ 6 ,  {42.01839185 }} ,
				{ 7 ,  {17.5126316 }} ,
				{ 10 ,  {66.46875936 }} ,
				{ 11 ,  {74.13416807 }} ,
				{ 13 ,  {89.81697753 }} ,
				{ 14 ,  {81.61991679 }} ,
				{ 17 ,  {112.36813458 }} ,
				{ 18 ,  {154.50461473 }} ,
				{ 21 ,  {211.81631127 }} ,
				{ 22 ,  {168.83377965 }} ,
				{ 24 ,  {238.91298805 }} ,
				{ 25 ,  {332.71831164 }} ,
				{ 30 ,  {113.87550381 }} ,
				{ 31 ,  {203.58163186 }} ,
				{ 33 ,  {358.44239776 }} ,
				{ 34 ,  {284.76025076 }} ,
				{ 37 ,  {564.05700451 }} ,
				{ 38 ,  {501.63259526 }} ,
				{ 39 ,  {419.36346749 }} ,
				{ 43 ,  {596.98711826 }} ,
				{ 44 ,  {727.50589844 }} ,
				{ 46 ,  {816.81265916 }} ,
				{ 47 ,  {973.79225153 }} ,
				{ 50 ,  {954.01675074 }} ,
				{ 51 ,  {1072.70246576 }} ,
				{ 53 ,  {1185.2623187 }} ,
				{ 54 ,  {1365.51860512 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.42248982191085815) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_1 <= 1445.2074584960938) ? ( (Feature_1 <= 856.9492797851562) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_3 <= 4.613852858543396) ? ( (Feature_1 <= 1028.1891174316406) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 1173.6154479980469) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 668.6555480957031) ? ( (Feature_1 <= 410.0930938720703) ? ( 17 ) : ( 18 ) ) : ( (Feature_2 <= 0.22140106558799744) ? ( (Feature_3 <= 6.573434829711914) ? ( 21 ) : ( 22 ) ) : ( (Feature_3 <= 1.6735233664512634) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 310.1919250488281) ? ( (Feature_2 <= 0.7065557539463043) ? ( 30 ) : ( 31 ) ) : ( (Feature_3 <= 4.302922606468201) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_3 <= 10.248126983642578) ? ( (Feature_3 <= 8.947309494018555) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_0 <= 35.25666904449463) ? ( 43 ) : ( 44 ) ) : ( (Feature_2 <= 0.5283674448728561) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_1 <= 1246.8423461914062) ? ( (Feature_0 <= 38.316505432128906) ? ( 50 ) : ( 51 ) ) : ( (Feature_1 <= 1436.5211181640625) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {17.5126316 }} ,
				{ 6 ,  {42.01839185 }} ,
				{ 8 ,  {74.39385341 }} ,
				{ 9 ,  {38.41875351 }} ,
				{ 12 ,  {190.96784449 }} ,
				{ 13 ,  {80.65563582 }} ,
				{ 15 ,  {205.37013415 }} ,
				{ 16 ,  {338.30443687 }} ,
				{ 19 ,  {96.00340237 }} ,
				{ 21 ,  {340.89432548 }} ,
				{ 22 ,  {264.95320666 }} ,
				{ 25 ,  {522.36918386 }} ,
				{ 26 ,  {680.96114859 }} ,
				{ 28 ,  {965.60807546 }} ,
				{ 29 ,  {816.81265916 }} ,
				{ 34 ,  {156.99099243 }} ,
				{ 35 ,  {241.12137081 }} ,
				{ 36 ,  {367.2164339 }} ,
				{ 39 ,  {616.90506534 }} ,
				{ 40 ,  {569.59302371 }} ,
				{ 42 ,  {753.58663382 }} ,
				{ 43 ,  {737.40865774 }} ,
				{ 47 ,  {936.66449274 }} ,
				{ 48 ,  {859.39726521 }} ,
				{ 50 ,  {1006.94766003 }} ,
				{ 51 ,  {1066.49672809 }} ,
				{ 54 ,  {1161.77589816 }} ,
				{ 55 ,  {991.65423222 }} ,
				{ 57 ,  {1326.47274305 }} ,
				{ 58 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.6497833430767059) ? ( (Feature_2 <= 0.4695979952812195) ? ( (Feature_2 <= 0.14378926530480385) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_2 <= 0.009662731783464551) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= 8.432183265686035) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= 876.18896484375) ? ( (Feature_2 <= 0.3239428550004959) ? ( 12 ) : ( 13 ) ) : ( (Feature_3 <= 3.0914065837860107) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_1 <= 702.318115234375) ? ( (Feature_1 <= 270.7223663330078) ? ( 19 ) : ( (Feature_3 <= 4.302922606468201) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_1 <= 1406.7470092773438) ? ( (Feature_1 <= 1053.2981262207031) ? ( 25 ) : ( 26 ) ) : ( (Feature_1 <= 1663.318115234375) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_1 <= 1031.63671875) ? ( (Feature_1 <= 587.4150543212891) ? ( (Feature_1 <= 306.52972412109375) ? ( (Feature_1 <= 233.35620880126953) ? ( 34 ) : ( 35 ) ) : ( 36 ) ) : ( (Feature_3 <= 10.09873914718628) ? ( (Feature_2 <= 0.6584039926528931) ? ( 39 ) : ( 40 ) ) : ( (Feature_1 <= 988.0879821777344) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_1 <= 1283.81982421875) ? ( (Feature_0 <= 59.023193359375) ? ( (Feature_2 <= 0.7562893331050873) ? ( 47 ) : ( 48 ) ) : ( (Feature_1 <= 1077.173583984375) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_2 <= 0.7885276973247528) ? ( (Feature_0 <= 29.454838275909424) ? ( 54 ) : ( 55 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( 57 ) : ( 58 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {51.77235515 }} ,
				{ 6 ,  {112.36813458 }} ,
				{ 7 ,  {174.68142017 }} ,
				{ 10 ,  {123.98006476 }} ,
				{ 11 ,  {96.00340237 }} ,
				{ 13 ,  {228.72512479 }} ,
				{ 14 ,  {314.07837658 }} ,
				{ 16 ,  {367.2164339 }} ,
				{ 17 ,  {557.42418185 }} ,
				{ 20 ,  {42.01839185 }} ,
				{ 22 ,  {345.51744456 }} ,
				{ 24 ,  {205.37013415 }} ,
				{ 25 ,  {251.33228306 }} ,
				{ 29 ,  {557.31885148 }} ,
				{ 30 ,  {616.90506534 }} ,
				{ 32 ,  {670.13118584 }} ,
				{ 33 ,  {757.92163781 }} ,
				{ 36 ,  {674.15222909 }} ,
				{ 37 ,  {843.78581297 }} ,
				{ 39 ,  {989.44518443 }} ,
				{ 40 ,  {1207.13937635 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 759.8154907226562) ? ( (Feature_2 <= 0.9655424654483795) ? ( (Feature_2 <= 0.41845081746578217) ? ( (Feature_1 <= 631.0441589355469) ? ( (Feature_2 <= 0.3770752549171448) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_3 <= 2.999163269996643) ? ( (Feature_0 <= 29.003992080688477) ? ( 10 ) : ( 11 ) ) : ( (Feature_1 <= 505.9144287109375) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 463.0554962158203) ? ( 16 ) : ( 17 ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_2 <= 0.09830964123830199) ? ( 20 ) : ( (Feature_1 <= 984.8822326660156) ? ( 22 ) : ( (Feature_2 <= 0.19915488362312317) ? ( 24 ) : ( 25 ) ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_2 <= 0.7272883057594299) ? ( (Feature_1 <= 943.8363342285156) ? ( 29 ) : ( 30 ) ) : ( (Feature_2 <= 0.7691731154918671) ? ( 32 ) : ( 33 ) ) ) : ( (Feature_2 <= 0.6582429111003876) ? ( (Feature_1 <= 1326.3909912109375) ? ( 36 ) : ( 37 ) ) : ( (Feature_3 <= 5.701060771942139) ? ( 39 ) : ( 40 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {42.01839185 }} ,
				{ 5 ,  {17.5126316 }} ,
				{ 8 ,  {63.32280433 }} ,
				{ 9 ,  {77.87704243 }} ,
				{ 10 ,  {38.41875351 }} ,
				{ 14 ,  {118.56641475 }} ,
				{ 15 ,  {43.13717196 }} ,
				{ 17 ,  {337.38826236 }} ,
				{ 18 ,  {243.83107314 }} ,
				{ 19 ,  {692.1009437 }} ,
				{ 24 ,  {193.36881075 }} ,
				{ 25 ,  {112.58681243 }} ,
				{ 27 ,  {354.05537969 }} ,
				{ 28 ,  {283.4186535 }} ,
				{ 31 ,  {561.56969601 }} ,
				{ 32 ,  {762.12754055 }} ,
				{ 34 ,  {501.63259526 }} ,
				{ 35 ,  {419.36346749 }} ,
				{ 39 ,  {698.74940368 }} ,
				{ 40 ,  {780.03929167 }} ,
				{ 42 ,  {938.69371231 }} ,
				{ 43 ,  {1107.96933697 }} ,
				{ 45 ,  {1450.4501203 }} ,
				{ 47 ,  {1072.70246576 }} ,
				{ 48 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.02901188051328063) ? ( (Feature_1 <= 1445.2074584960938) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 8.204108476638794) ? ( (Feature_1 <= 960.5686950683594) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) : ( (Feature_1 <= 1473.4187622070312) ? ( (Feature_1 <= 384.3021240234375) ? ( (Feature_3 <= 9.283036708831787) ? ( 14 ) : ( 15 ) ) : ( (Feature_0 <= 7.288436412811279) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 228.15776824951172) ? ( (Feature_3 <= 1.9908787608146667) ? ( 24 ) : ( 25 ) ) : ( (Feature_0 <= 48.34617042541504) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_0 <= 27.885141372680664) ? ( (Feature_3 <= 9.066634178161621) ? ( 31 ) : ( 32 ) ) : ( (Feature_3 <= 10.248126983642578) ? ( 34 ) : ( 35 ) ) ) ) : ( (Feature_2 <= 0.8210701644420624) ? ( (Feature_1 <= 1250.4677734375) ? ( (Feature_2 <= 0.7550859153270721) ? ( 39 ) : ( 40 ) ) : ( (Feature_3 <= 4.895366311073303) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_0 <= 40.97804832458496) ? ( 45 ) : ( (Feature_1 <= 1246.8423461914062) ? ( 47 ) : ( 48 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {51.77235515 }} ,
				{ 6 ,  {89.81697753 }} ,
				{ 8 ,  {127.86383501 }} ,
				{ 9 ,  {96.00340237 }} ,
				{ 12 ,  {163.10211368 }} ,
				{ 13 ,  {201.03073156 }} ,
				{ 14 ,  {67.61473198 }} ,
				{ 18 ,  {340.89432548 }} ,
				{ 19 ,  {367.2164339 }} ,
				{ 21 ,  {190.51646129 }} ,
				{ 22 ,  {241.12137081 }} ,
				{ 24 ,  {456.84183869 }} ,
				{ 26 ,  {565.71521017 }} ,
				{ 27 ,  {577.34865081 }} ,
				{ 31 ,  {74.13416807 }} ,
				{ 33 ,  {17.5126316 }} ,
				{ 34 ,  {42.01839185 }} ,
				{ 36 ,  {212.83015826 }} ,
				{ 38 ,  {310.5792773 }} ,
				{ 39 ,  {331.03594313 }} ,
				{ 43 ,  {651.51242251 }} ,
				{ 44 ,  {518.45049903 }} ,
				{ 46 ,  {520.61172947 }} ,
				{ 47 ,  {757.91767705 }} ,
				{ 50 ,  {956.65328034 }} ,
				{ 51 ,  {1071.15103134 }} ,
				{ 53 ,  {1322.01949723 }} ,
				{ 54 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 879.2583312988281) ? ( (Feature_2 <= 0.6483480334281921) ? ( (Feature_0 <= 56.1487979888916) ? ( (Feature_2 <= 0.3950181156396866) ? ( (Feature_1 <= 706.1800842285156) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= 29.003992080688477) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_3 <= 9.280431270599365) ? ( (Feature_0 <= 78.19973754882812) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_3 <= 7.1486241817474365) ? ( (Feature_0 <= 54.83548164367676) ? ( (Feature_2 <= 0.8227225840091705) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.862852156162262) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( 24 ) : ( (Feature_2 <= 0.6879751682281494) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_2 <= 0.2865905463695526) ? ( (Feature_2 <= 0.08578749001026154) ? ( (Feature_3 <= 2.748636841773987) ? ( 31 ) : ( (Feature_0 <= 26.660706520080566) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_2 <= 0.18905451893806458) ? ( 36 ) : ( (Feature_3 <= 5.457797527313232) ? ( 38 ) : ( 39 ) ) ) ) : ( (Feature_2 <= 0.7988642752170563) ? ( (Feature_0 <= 18.21147108078003) ? ( (Feature_3 <= 9.190508842468262) ? ( 43 ) : ( 44 ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 46 ) : ( 47 ) ) ) : ( (Feature_1 <= 1257.4737548828125) ? ( (Feature_0 <= 38.316505432128906) ? ( 50 ) : ( 51 ) ) : ( (Feature_3 <= 10.500863552093506) ? ( 53 ) : ( 54 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {42.01839185 }} ,
				{ 6 ,  {45.71113412 }} ,
				{ 8 ,  {61.96251742 }} ,
				{ 9 ,  {79.36177123 }} ,
				{ 12 ,  {93.16179043 }} ,
				{ 13 ,  {203.26795632 }} ,
				{ 15 ,  {469.13995216 }} ,
				{ 16 ,  {284.38483969 }} ,
				{ 18 ,  {692.1009437 }} ,
				{ 19 ,  {520.61172947 }} ,
				{ 24 ,  {304.56729485 }} ,
				{ 25 ,  {354.05537969 }} ,
				{ 27 ,  {189.09028656 }} ,
				{ 28 ,  {241.88267823 }} ,
				{ 31 ,  {438.10265309 }} ,
				{ 32 ,  {557.42418185 }} ,
				{ 34 ,  {575.28948403 }} ,
				{ 35 ,  {723.82305986 }} ,
				{ 39 ,  {936.6895262 }} ,
				{ 40 ,  {1161.77589816 }} ,
				{ 42 ,  {651.51242251 }} ,
				{ 43 ,  {838.10496219 }} ,
				{ 46 ,  {1006.94766003 }} ,
				{ 47 ,  {1069.59959692 }} ,
				{ 49 ,  {1314.59742087 }} ,
				{ 50 ,  {1450.4501203 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.4695979952812195) ? ( (Feature_1 <= 1654.0126953125) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_0 <= 39.70485877990723) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 730.0179748535156) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= 845.2781066894531) ? ( (Feature_1 <= 384.3021240234375) ? ( 12 ) : ( 13 ) ) : ( (Feature_0 <= 5.733835697174072) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_0 <= 46.13646125793457) ? ( 18 ) : ( 19 ) ) ) : ( (Feature_1 <= 1031.63671875) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_0 <= 62.90308380126953) ? ( (Feature_1 <= 360.9476013183594) ? ( 24 ) : ( 25 ) ) : ( (Feature_1 <= 233.35620880126953) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_1 <= 752.2415466308594) ? ( (Feature_2 <= 0.8929882645606995) ? ( 31 ) : ( 32 ) ) : ( (Feature_2 <= 0.68940669298172) ? ( 34 ) : ( 35 ) ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_3 <= 6.53071928024292) ? ( (Feature_3 <= 5.738802194595337) ? ( 39 ) : ( 40 ) ) : ( (Feature_0 <= 15.068024635314941) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_1 <= 1218.5750732421875) ? ( (Feature_1 <= 1066.5789794921875) ? ( 46 ) : ( 47 ) ) : ( (Feature_3 <= 10.500863552093506) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {38.41875351 }} ,
				{ 6 ,  {60.17684929 }} ,
				{ 7 ,  {66.75525251 }} ,
				{ 8 ,  {89.81697753 }} ,
				{ 12 ,  {116.55223879 }} ,
				{ 13 ,  {205.45742529 }} ,
				{ 15 ,  {393.2899507 }} ,
				{ 16 ,  {240.81561772 }} ,
				{ 18 ,  {577.34865081 }} ,
				{ 19 ,  {501.63259526 }} ,
				{ 24 ,  {17.5126316 }} ,
				{ 25 ,  {42.01839185 }} ,
				{ 27 ,  {226.46112957 }} ,
				{ 28 ,  {331.03594313 }} ,
				{ 31 ,  {620.66590863 }} ,
				{ 32 ,  {750.64574391 }} ,
				{ 34 ,  {878.35658108 }} ,
				{ 35 ,  {1054.16277579 }} ,
				{ 38 ,  {760.21824104 }} ,
				{ 40 ,  {1006.94766003 }} ,
				{ 41 ,  {961.04749636 }} ,
				{ 44 ,  {1450.4501203 }} ,
				{ 45 ,  {1335.37923468 }} ,
				{ 46 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 882.4659118652344) ? ( (Feature_2 <= 0.16206515207886696) ? ( (Feature_1 <= 730.0179748535156) ? ( (Feature_0 <= 28.79713726043701) ? ( 4 ) : ( (Feature_0 <= 46.1015510559082) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (Feature_1 <= 784.8369445800781) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_0 <= 59.396141052246094) ? ( 12 ) : ( 13 ) ) : ( (Feature_0 <= 44.211299896240234) ? ( 15 ) : ( 16 ) ) ) : ( (Feature_1 <= 844.6205444335938) ? ( 18 ) : ( 19 ) ) ) ) : ( (Feature_2 <= 0.7771747410297394) ? ( (Feature_2 <= 0.3756476044654846) ? ( (Feature_2 <= 0.09071065997704864) ? ( (Feature_0 <= 26.660706520080566) ? ( 24 ) : ( 25 ) ) : ( (Feature_2 <= 0.2384706288576126) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_0 <= 31.094983100891113) ? ( 31 ) : ( 32 ) ) : ( (Feature_2 <= 0.6221277117729187) ? ( 34 ) : ( 35 ) ) ) ) : ( (Feature_1 <= 1257.4737548828125) ? ( (Feature_1 <= 936.4043579101562) ? ( 38 ) : ( (Feature_3 <= 2.0208256244659424) ? ( 40 ) : ( 41 ) ) ) : ( (Feature_0 <= 84.44675064086914) ? ( (Feature_0 <= 42.05487632751465) ? ( 44 ) : ( 45 ) ) : ( 46 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {38.41875351 }} ,
				{ 6 ,  {74.63348962 }} ,
				{ 8 ,  {113.77868695 }} ,
				{ 9 ,  {175.60354167 }} ,
				{ 12 ,  {174.68142017 }} ,
				{ 13 ,  {217.90641985 }} ,
				{ 15 ,  {287.26242769 }} ,
				{ 16 ,  {242.64398564 }} ,
				{ 20 ,  {129.17022248 }} ,
				{ 21 ,  {193.36881075 }} ,
				{ 23 ,  {304.56729485 }} ,
				{ 24 ,  {241.12137081 }} ,
				{ 27 ,  {456.84183869 }} ,
				{ 28 ,  {367.2164339 }} ,
				{ 30 ,  {561.56969601 }} ,
				{ 31 ,  {577.34865081 }} ,
				{ 34 ,  {42.01839185 }} ,
				{ 37 ,  {251.33228306 }} ,
				{ 38 ,  {213.62708797 }} ,
				{ 40 ,  {334.21210274 }} ,
				{ 41 ,  {310.5792773 }} ,
				{ 45 ,  {518.45049903 }} ,
				{ 46 ,  {660.57098903 }} ,
				{ 48 ,  {738.88719398 }} ,
				{ 49 ,  {948.91990878 }} ,
				{ 52 ,  {1004.93198765 }} ,
				{ 53 ,  {1186.44319482 }} ,
				{ 55 ,  {670.13118584 }} ,
				{ 56 ,  {753.58663382 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 879.2583312988281) ? ( (Feature_2 <= 0.6569686830043793) ? ( (Feature_0 <= 70.73635482788086) ? ( (Feature_2 <= 0.14811982586979866) ? ( (Feature_0 <= 17.01914691925049) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 384.3021240234375) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.4183829128742218) ? ( (Feature_2 <= 0.26129207015037537) ? ( 12 ) : ( 13 ) ) : ( (Feature_2 <= 0.5524007081985474) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_1 <= 360.9476013183594) ? ( (Feature_1 <= 228.15776824951172) ? ( (Feature_1 <= 195.00569915771484) ? ( 20 ) : ( 21 ) ) : ( (Feature_2 <= 0.8884894549846649) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_3 <= 7.982725381851196) ? ( (Feature_0 <= 36.518741607666016) ? ( 27 ) : ( 28 ) ) : ( (Feature_3 <= 9.088586807250977) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_2 <= 0.3401701748371124) ? ( (Feature_2 <= 0.07029365515336394) ? ( 34 ) : ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_0 <= 28.485989093780518) ? ( 37 ) : ( 38 ) ) : ( (Feature_0 <= 49.90597724914551) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_2 <= 0.6791707277297974) ? ( (Feature_1 <= 1326.3909912109375) ? ( (Feature_2 <= 0.5816180408000946) ? ( 45 ) : ( 46 ) ) : ( (Feature_2 <= 0.5139863640069962) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_3 <= 10.154731273651123) ? ( (Feature_1 <= 1283.81982421875) ? ( 52 ) : ( 53 ) ) : ( (Feature_0 <= 60.858482360839844) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {89.81697753 }} ,
				{ 6 ,  {81.61991679 }} ,
				{ 8 ,  {63.89579064 }} ,
				{ 9 ,  {42.01839185 }} ,
				{ 12 ,  {120.92644562 }} ,
				{ 13 ,  {287.26242769 }} ,
				{ 15 ,  {381.30549229 }} ,
				{ 16 ,  {250.1805667 }} ,
				{ 18 ,  {520.61172947 }} ,
				{ 20 ,  {692.1009437 }} ,
				{ 21 ,  {816.81265916 }} ,
				{ 26 ,  {304.56729485 }} ,
				{ 27 ,  {358.44239776 }} ,
				{ 29 ,  {184.81176238 }} ,
				{ 30 ,  {192.59288742 }} ,
				{ 33 ,  {559.01434295 }} ,
				{ 34 ,  {419.36346749 }} ,
				{ 36 ,  {760.21824104 }} ,
				{ 37 ,  {753.58663382 }} ,
				{ 41 ,  {688.47647463 }} ,
				{ 42 ,  {630.47308595 }} ,
				{ 43 ,  {921.14633043 }} ,
				{ 46 ,  {961.79028492 }} ,
				{ 47 ,  {1072.70246576 }} ,
				{ 49 ,  {1299.75326814 }} ,
				{ 50 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 1574.9563598632812) ? ( (Feature_2 <= 0.13503176718950272) ? ( (Feature_0 <= 28.497106552124023) ? ( (Feature_1 <= 1173.6154479980469) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 809.5308074951172) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= 668.6555480957031) ? ( (Feature_0 <= 75.72117614746094) ? ( 12 ) : ( 13 ) ) : ( (Feature_0 <= 7.060354709625244) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_2 <= 0.36327823996543884) ? ( 18 ) : ( (Feature_2 <= 0.45233529806137085) ? ( 20 ) : ( 21 ) ) ) ) : ( (Feature_1 <= 967.7061157226562) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_0 <= 66.45416641235352) ? ( (Feature_1 <= 360.9476013183594) ? ( 26 ) : ( 27 ) ) : ( (Feature_1 <= 261.50308990478516) ? ( 29 ) : ( 30 ) ) ) : ( (Feature_0 <= 65.49116516113281) ? ( (Feature_3 <= 10.662372589111328) ? ( 33 ) : ( 34 ) ) : ( (Feature_1 <= 914.8431701660156) ? ( 36 ) : ( 37 ) ) ) ) : ( (Feature_2 <= 0.6107419431209564) ? ( (Feature_1 <= 1446.2763671875) ? ( (Feature_3 <= 3.712217926979065) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (Feature_0 <= 64.08328247070312) ? ( (Feature_2 <= 0.9691559076309204) ? ( 46 ) : ( 47 ) ) : ( (Feature_1 <= 1354.1441040039062) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {17.5126316 }} ,
				{ 6 ,  {43.86476299 }} ,
				{ 8 ,  {79.74847961 }} ,
				{ 9 ,  {89.81697753 }} ,
				{ 11 ,  {205.37013415 }} ,
				{ 13 ,  {168.83377965 }} ,
				{ 14 ,  {174.68142017 }} ,
				{ 17 ,  {43.13717196 }} ,
				{ 18 ,  {217.90641985 }} ,
				{ 21 ,  {297.00533496 }} ,
				{ 22 ,  {337.38826236 }} ,
				{ 23 ,  {520.61172947 }} ,
				{ 28 ,  {201.58303588 }} ,
				{ 29 ,  {287.26242769 }} ,
				{ 30 ,  {367.2164339 }} ,
				{ 32 ,  {557.42418185 }} ,
				{ 33 ,  {419.36346749 }} ,
				{ 36 ,  {1161.77589816 }} ,
				{ 38 ,  {660.16325903 }} ,
				{ 39 ,  {779.31742633 }} ,
				{ 42 ,  {753.58663382 }} ,
				{ 43 ,  {761.30926933 }} ,
				{ 45 ,  {1000.59881701 }} ,
				{ 46 ,  {1344.28572632 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.37775541841983795) ? ( (Feature_2 <= 0.24244262278079987) ? ( (Feature_2 <= 0.14263074845075607) ? ( (Feature_2 <= 0.041584232822060585) ? ( (Feature_3 <= 4.048245787620544) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= 17.94747829437256) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_3 <= 4.8048388957977295) ? ( 11 ) : ( (Feature_0 <= 69.96144485473633) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 795.8204956054688) ? ( (Feature_0 <= 44.48143124580383) ? ( 17 ) : ( 18 ) ) : ( (Feature_0 <= 45.895233154296875) ? ( (Feature_1 <= 1102.3369140625) ? ( 21 ) : ( 22 ) ) : ( 23 ) ) ) ) : ( (Feature_1 <= 745.0648193359375) ? ( (Feature_1 <= 537.6676635742188) ? ( (Feature_2 <= 0.9660912156105042) ? ( (Feature_1 <= 505.9144287109375) ? ( 28 ) : ( 29 ) ) : ( 30 ) ) : ( (Feature_3 <= 9.682897090911865) ? ( 32 ) : ( 33 ) ) ) : ( (Feature_2 <= 0.7509067952632904) ? ( (Feature_0 <= 15.2035231590271) ? ( 36 ) : ( (Feature_1 <= 1326.3909912109375) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_1 <= 966.9429626464844) ? ( (Feature_2 <= 0.8243893384933472) ? ( 42 ) : ( 43 ) ) : ( (Feature_1 <= 1472.6890869140625) ? ( 45 ) : ( 46 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {112.36813458 }} ,
				{ 6 ,  {127.86383501 }} ,
				{ 8 ,  {200.83202708 }} ,
				{ 9 ,  {258.01940175 }} ,
				{ 12 ,  {43.13717196 }} ,
				{ 13 ,  {38.41875351 }} ,
				{ 14 ,  {67.61473198 }} ,
				{ 17 ,  {42.01839185 }} ,
				{ 19 ,  {238.49824146 }} ,
				{ 20 ,  {326.33449426 }} ,
				{ 23 ,  {520.61172947 }} ,
				{ 24 ,  {469.13995216 }} ,
				{ 25 ,  {630.47308595 }} ,
				{ 30 ,  {112.58681243 }} ,
				{ 31 ,  {184.81176238 }} ,
				{ 33 ,  {316.67630506 }} ,
				{ 34 ,  {241.12137081 }} ,
				{ 36 ,  {577.34865081 }} ,
				{ 37 ,  {557.42418185 }} ,
				{ 41 ,  {688.47647463 }} ,
				{ 42 ,  {972.69378773 }} ,
				{ 44 ,  {629.36786155 }} ,
				{ 45 ,  {752.35198647 }} ,
				{ 48 ,  {1344.28572632 }} ,
				{ 49 ,  {1450.4501203 }} ,
				{ 50 ,  {1161.77589816 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5773111879825592) ? ( (Feature_1 <= 1039.0556335449219) ? ( (Feature_3 <= 9.719063758850098) ? ( (Feature_1 <= 338.8775634765625) ? ( (Feature_2 <= 0.43169064819812775) ? ( 5 ) : ( 6 ) ) : ( (Feature_2 <= 0.3052070587873459) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_3 <= 10.075586318969727) ? ( (Feature_1 <= 362.6981964111328) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_2 <= 0.288340300321579) ? ( (Feature_2 <= 0.07029365515336394) ? ( 17 ) : ( (Feature_2 <= 0.23312415182590485) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_2 <= 0.4877350926399231) ? ( (Feature_3 <= 7.345672845840454) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (Feature_1 <= 815.7905578613281) ? ( (Feature_1 <= 541.9518432617188) ? ( (Feature_1 <= 233.35620880126953) ? ( (Feature_0 <= 57.371925354003906) ? ( 30 ) : ( 31 ) ) : ( (Feature_2 <= 0.8884894549846649) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_2 <= 0.8527685105800629) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_1 <= 1474.9396362304688) ? ( (Feature_3 <= 7.37491250038147) ? ( (Feature_2 <= 0.5975654423236847) ? ( 41 ) : ( 42 ) ) : ( (Feature_2 <= 0.68940669298172) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_1 <= 1634.6642456054688) ? ( (Feature_3 <= 10.500863552093506) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {50.41294812 }} ,
				{ 6 ,  {78.14286844 }} ,
				{ 8 ,  {123.36169582 }} ,
				{ 9 ,  {264.24740203 }} ,
				{ 12 ,  {174.68142017 }} ,
				{ 13 ,  {281.58185053 }} ,
				{ 14 ,  {707.74797907 }} ,
				{ 17 ,  {692.1009437 }} ,
				{ 18 ,  {816.81265916 }} ,
				{ 19 ,  {520.61172947 }} ,
				{ 24 ,  {190.25782018 }} ,
				{ 25 ,  {241.12137081 }} ,
				{ 26 ,  {304.56729485 }} ,
				{ 28 ,  {557.42418185 }} ,
				{ 30 ,  {438.10265309 }} ,
				{ 31 ,  {367.2164339 }} ,
				{ 35 ,  {663.56369802 }} ,
				{ 36 ,  {774.85575925 }} ,
				{ 37 ,  {954.01675074 }} ,
				{ 40 ,  {930.34229767 }} ,
				{ 41 ,  {984.88139146 }} ,
				{ 43 ,  {1299.75326814 }} ,
				{ 44 ,  {1177.43351185 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_1 <= 1654.0126953125) ? ( (Feature_0 <= 69.02992248535156) ? ( (Feature_2 <= 0.1157732792198658) ? ( (Feature_2 <= 0.10105706006288528) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 876.18896484375) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= 1422.635009765625) ? ( (Feature_2 <= 0.23534639179706573) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_0 <= 46.13646125793457) ? ( (Feature_1 <= 1665.9483032226562) ? ( 17 ) : ( 18 ) ) : ( 19 ) ) ) : ( (Feature_1 <= 752.2415466308594) ? ( (Feature_1 <= 360.9476013183594) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_2 <= 0.862852156162262) ? ( 24 ) : ( 25 ) ) : ( 26 ) ) : ( (Feature_0 <= 16.43863796815276) ? ( 28 ) : ( (Feature_0 <= 37.63541030883789) ? ( 30 ) : ( 31 ) ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.945286363363266) ? ( (Feature_2 <= 0.7550859153270721) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) : ( (Feature_3 <= 5.701060771942139) ? ( (Feature_2 <= 0.749254047870636) ? ( 40 ) : ( 41 ) ) : ( (Feature_1 <= 1354.1441040039062) ? ( 43 ) : ( 44 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {63.89579064 }} ,
				{ 6 ,  {42.06494382 }} ,
				{ 8 ,  {83.8362363 }} ,
				{ 9 ,  {170.65519153 }} ,
				{ 12 ,  {242.64398564 }} ,
				{ 13 ,  {287.26242769 }} ,
				{ 15 ,  {192.59288742 }} ,
				{ 16 ,  {217.90641985 }} ,
				{ 20 ,  {129.17022248 }} ,
				{ 21 ,  {184.81176238 }} ,
				{ 23 ,  {320.22957961 }} ,
				{ 24 ,  {241.12137081 }} ,
				{ 26 ,  {456.84183869 }} ,
				{ 28 ,  {577.34865081 }} ,
				{ 29 ,  {557.42418185 }} ,
				{ 34 ,  {74.13416807 }} ,
				{ 35 ,  {89.81697753 }} ,
				{ 37 ,  {210.34348356 }} ,
				{ 38 ,  {222.6809715 }} ,
				{ 41 ,  {312.29995817 }} ,
				{ 42 ,  {345.51744456 }} ,
				{ 43 ,  {520.61172947 }} ,
				{ 47 ,  {537.35638349 }} ,
				{ 48 ,  {652.52872179 }} ,
				{ 50 ,  {1006.94766003 }} ,
				{ 51 ,  {761.2946477 }} ,
				{ 54 ,  {754.45680143 }} ,
				{ 55 ,  {949.578445 }} ,
				{ 57 ,  {1299.75326814 }} ,
				{ 58 ,  {1185.2623187 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 821.2744140625) ? ( (Feature_2 <= 0.6789427101612091) ? ( (Feature_0 <= 70.73635482788086) ? ( (Feature_2 <= 0.14585810899734497) ? ( (Feature_1 <= 503.65269470214844) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 370.1616973876953) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_0 <= 84.98217010498047) ? ( (Feature_1 <= 460.4898681640625) ? ( 12 ) : ( 13 ) ) : ( (Feature_1 <= 480.9907684326172) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_1 <= 463.0554962158203) ? ( (Feature_1 <= 233.35620880126953) ? ( (Feature_1 <= 200.20413970947266) ? ( 20 ) : ( 21 ) ) : ( (Feature_0 <= 62.90308380126953) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_3 <= 7.982725381851196) ? ( 26 ) : ( (Feature_2 <= 0.8527685105800629) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_2 <= 0.379633828997612) ? ( (Feature_2 <= 0.21707050502300262) ? ( (Feature_0 <= 33.216888427734375) ? ( (Feature_3 <= 4.388666868209839) ? ( 34 ) : ( 35 ) ) : ( (Feature_3 <= 4.4665937423706055) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_1 <= 1461.7972412109375) ? ( (Feature_2 <= 0.3295965641736984) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.68940669298172) ? ( (Feature_0 <= 23.65783977508545) ? ( 47 ) : ( 48 ) ) : ( (Feature_3 <= 1.2762383222579956) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_0 <= 69.84485244750977) ? ( (Feature_2 <= 0.5139863640069962) ? ( 54 ) : ( 55 ) ) : ( (Feature_0 <= 84.44675064086914) ? ( 57 ) : ( 58 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {52.94399171 }} ,
				{ 6 ,  {112.36813458 }} ,
				{ 8 ,  {131.74760526 }} ,
				{ 9 ,  {184.87028807 }} ,
				{ 12 ,  {43.13717196 }} ,
				{ 13 ,  {38.41875351 }} ,
				{ 14 ,  {67.61473198 }} ,
				{ 18 ,  {96.00340237 }} ,
				{ 19 ,  {129.17022248 }} ,
				{ 21 ,  {192.59288742 }} ,
				{ 22 ,  {193.36881075 }} ,
				{ 25 ,  {354.05537969 }} ,
				{ 26 ,  {295.91486127 }} ,
				{ 28 ,  {456.84183869 }} ,
				{ 29 ,  {419.36346749 }} ,
				{ 34 ,  {205.37013415 }} ,
				{ 35 ,  {251.33228306 }} ,
				{ 37 ,  {310.5792773 }} ,
				{ 38 ,  {297.00533496 }} ,
				{ 40 ,  {17.5126316 }} ,
				{ 42 ,  {74.13416807 }} ,
				{ 43 ,  {81.61991679 }} ,
				{ 47 ,  {518.45049903 }} ,
				{ 48 ,  {687.54042564 }} ,
				{ 50 ,  {754.45680143 }} ,
				{ 51 ,  {962.42687886 }} ,
				{ 54 ,  {762.12754055 }} ,
				{ 55 ,  {1066.49672809 }} ,
				{ 57 ,  {1450.4501203 }} ,
				{ 58 ,  {1294.66806153 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_1 <= 759.8154907226562) ? ( (Feature_2 <= 0.5157754868268967) ? ( (Feature_3 <= 9.719063758850098) ? ( (Feature_3 <= 6.903095722198486) ? ( (Feature_3 <= 5.298694610595703) ? ( 5 ) : ( 6 ) ) : ( (Feature_0 <= 4.584194757044315) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_0 <= 39.461670875549316) ? ( (Feature_3 <= 9.939465045928955) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_1 <= 329.4079284667969) ? ( (Feature_0 <= 64.80487442016602) ? ( (Feature_1 <= 158.22232055664062) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.6747548580169678) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_1 <= 550.2588806152344) ? ( (Feature_3 <= 4.302922606468201) ? ( 25 ) : ( 26 ) ) : ( (Feature_1 <= 629.0122985839844) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_2 <= 0.3650708496570587) ? ( (Feature_1 <= 1346.04296875) ? ( (Feature_2 <= 0.23312415182590485) ? ( (Feature_3 <= 5.828664064407349) ? ( 34 ) : ( 35 ) ) : ( (Feature_2 <= 0.2830366790294647) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_2 <= 0.025156566640362144) ? ( 40 ) : ( (Feature_2 <= 0.04905073344707489) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_2 <= 0.8147956430912018) ? ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.5803560316562653) ? ( 47 ) : ( 48 ) ) : ( (Feature_2 <= 0.5139863640069962) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_1 <= 1218.5750732421875) ? ( (Feature_1 <= 972.4176025390625) ? ( 54 ) : ( 55 ) ) : ( (Feature_0 <= 42.05487632751465) ? ( 57 ) : ( 58 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {74.13416807 }} ,
				{ 6 ,  {64.89578184 }} ,
				{ 8 ,  {67.61473198 }} ,
				{ 9 ,  {40.83402973 }} ,
				{ 12 ,  {251.33228306 }} ,
				{ 13 ,  {222.6809715 }} ,
				{ 14 ,  {154.50461473 }} ,
				{ 18 ,  {43.13717196 }} ,
				{ 19 ,  {122.69860153 }} ,
				{ 21 ,  {224.57749034 }} ,
				{ 22 ,  {287.26242769 }} ,
				{ 25 ,  {331.03594313 }} ,
				{ 26 ,  {310.5792773 }} ,
				{ 28 ,  {500.02301855 }} ,
				{ 29 ,  {707.74797907 }} ,
				{ 34 ,  {96.00340237 }} ,
				{ 35 ,  {206.1753402 }} ,
				{ 37 ,  {242.64398564 }} ,
				{ 38 ,  {349.66836162 }} ,
				{ 40 ,  {456.84183869 }} ,
				{ 42 ,  {501.63259526 }} ,
				{ 43 ,  {571.53193049 }} ,
				{ 47 ,  {681.5488841 }} ,
				{ 48 ,  {834.46192968 }} ,
				{ 50 ,  {936.55892494 }} ,
				{ 51 ,  {1107.96933697 }} ,
				{ 54 ,  {1185.2623187 }} ,
				{ 55 ,  {1031.07198153 }} ,
				{ 57 ,  {1450.4501203 }} ,
				{ 58 ,  {1344.28572632 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.5361224710941315) ? ( (Feature_2 <= 0.2454954981803894) ? ( (Feature_2 <= 0.1361902840435505) ? ( (Feature_3 <= 3.731728196144104) ? ( (Feature_0 <= 26.751619338989258) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= 503.65269470214844) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= 0.22757987678050995) ? ( (Feature_1 <= 1225.0216674804688) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_1 <= 924.4729614257812) ? ( (Feature_1 <= 384.3021240234375) ? ( (Feature_2 <= 0.3770752549171448) ? ( 18 ) : ( 19 ) ) : ( (Feature_2 <= 0.4784942716360092) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_2 <= 0.2865905463695526) ? ( (Feature_0 <= 49.90597724914551) ? ( 25 ) : ( 26 ) ) : ( (Feature_0 <= 59.27326774597168) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_1 <= 888.9274597167969) ? ( (Feature_3 <= 7.2798871994018555) ? ( (Feature_1 <= 334.6766052246094) ? ( (Feature_3 <= 2.922344207763672) ? ( 34 ) : ( 35 ) ) : ( (Feature_2 <= 0.60986328125) ? ( 37 ) : ( 38 ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( 40 ) : ( (Feature_2 <= 0.6163023412227631) ? ( 42 ) : ( 43 ) ) ) ) : ( (Feature_2 <= 0.7955629825592041) ? ( (Feature_1 <= 1250.4677734375) ? ( (Feature_2 <= 0.7474835813045502) ? ( 47 ) : ( 48 ) ) : ( (Feature_3 <= 4.895366311073303) ? ( 50 ) : ( 51 ) ) ) : ( (Feature_3 <= 9.706490516662598) ? ( (Feature_2 <= 0.8984350860118866) ? ( 54 ) : ( 55 ) ) : ( (Feature_1 <= 1553.7089233398438) ? ( 57 ) : ( 58 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {66.46875936 }} ,
				{ 5 ,  {74.13416807 }} ,
				{ 7 ,  {17.5126316 }} ,
				{ 9 ,  {38.41875351 }} ,
				{ 10 ,  {45.71113412 }} ,
				{ 14 ,  {154.50461473 }} ,
				{ 15 ,  {43.13717196 }} ,
				{ 17 ,  {196.23604553 }} ,
				{ 18 ,  {285.3015378 }} ,
				{ 19 ,  {520.61172947 }} ,
				{ 24 ,  {129.17022248 }} ,
				{ 25 ,  {131.74760526 }} ,
				{ 27 ,  {188.89630573 }} ,
				{ 28 ,  {241.12137081 }} ,
				{ 31 ,  {354.05537969 }} ,
				{ 32 ,  {273.60564025 }} ,
				{ 34 ,  {557.42418185 }} ,
				{ 35 ,  {456.84183869 }} ,
				{ 39 ,  {596.64298616 }} ,
				{ 40 ,  {754.19732207 }} ,
				{ 42 ,  {971.66038717 }} ,
				{ 43 ,  {1068.56530731 }} ,
				{ 46 ,  {913.1344715 }} ,
				{ 47 ,  {762.28031912 }} ,
				{ 49 ,  {945.96395155 }} ,
				{ 50 ,  {1224.20802669 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = (Feature_2 <= 0.3869176059961319) ? ( (Feature_2 <= 0.14378926530480385) ? ( (Feature_3 <= 3.201897621154785) ? ( (Feature_1 <= 1028.1891174316406) ? ( 4 ) : ( 5 ) ) : ( (Feature_3 <= 4.048245787620544) ? ( 7 ) : ( (Feature_0 <= 28.22689914703369) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_1 <= 1435.1996459960938) ? ( (Feature_1 <= 617.5478210449219) ? ( (Feature_2 <= 0.29017697274684906) ? ( 14 ) : ( 15 ) ) : ( (Feature_2 <= 0.20348544418811798) ? ( 17 ) : ( 18 ) ) ) : ( 19 ) ) ) : ( (Feature_1 <= 692.5613098144531) ? ( (Feature_1 <= 329.4079284667969) ? ( (Feature_0 <= 42.35955572128296) ? ( (Feature_1 <= 222.62197875976562) ? ( 24 ) : ( 25 ) ) : ( (Feature_2 <= 0.862852156162262) ? ( 27 ) : ( 28 ) ) ) : ( (Feature_1 <= 541.9518432617188) ? ( (Feature_0 <= 48.34617042541504) ? ( 31 ) : ( 32 ) ) : ( (Feature_1 <= 568.2017517089844) ? ( 34 ) : ( 35 ) ) ) ) : ( (Feature_1 <= 1191.3021240234375) ? ( (Feature_2 <= 0.9372595250606537) ? ( (Feature_2 <= 0.7113807201385498) ? ( 39 ) : ( 40 ) ) : ( (Feature_1 <= 1066.5789794921875) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_2 <= 0.6582429111003876) ? ( (Feature_3 <= 5.587753176689148) ? ( 46 ) : ( 47 ) ) : ( (Feature_3 <= 5.738802194595337) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/freidman2.csv");
	return 0;
}
