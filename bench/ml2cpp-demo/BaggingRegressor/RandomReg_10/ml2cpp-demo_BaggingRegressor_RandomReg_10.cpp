// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : BaggingRegressor
// Dataset : RandomReg_10

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_BaggingRegressor_RandomReg_10.exe ml2cpp-demo_BaggingRegressor_RandomReg_10.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	namespace SubModel_0 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-405.20748192 }} ,
				{ 6 ,  {-242.07063404 }} ,
				{ 8 ,  {-268.19043239 }} ,
				{ 9 ,  {-98.62910021 }} ,
				{ 11 ,  {-1.77890863 }} ,
				{ 12 ,  {133.87071389 }} ,
				{ 15 ,  {-9.18516091 }} ,
				{ 17 ,  {-154.40083699 }} ,
				{ 18 ,  {-257.81327335 }} ,
				{ 21 ,  {41.46822647 }} ,
				{ 22 ,  {172.11640989 }} ,
				{ 24 ,  {199.53096617 }} ,
				{ 25 ,  {323.54648797 }} ,
				{ 30 ,  {60.83005802 }} ,
				{ 31 ,  {58.56592202 }} ,
				{ 32 ,  {23.51174878 }} ,
				{ 33 ,  {116.88919618 }} ,
				{ 37 ,  {259.87552026 }} ,
				{ 38 ,  {325.07388162 }} ,
				{ 40 ,  {194.40871671 }} ,
				{ 41 ,  {228.58868552 }} ,
				{ 43 ,  {447.69098355 }} ,
				{ 45 ,  {355.9935162 }} ,
				{ 46 ,  {393.26109279 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_4 <= -0.5074360221624374) ? ( (Feature_6 <= 1.7663677334785461) ? ( (Feature_7 <= -0.41412051022052765) ? ( (Feature_5 <= -0.738006979227066) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= -1.9103639721870422) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_2 <= -0.2900695651769638) ? ( 11 ) : ( 12 ) ) ) : ( (Feature_6 <= -0.4015085697174072) ? ( (Feature_8 <= -1.8224690556526184) ? ( 15 ) : ( (Feature_9 <= -0.57078031077981) ? ( 17 ) : ( 18 ) ) ) : ( (Feature_2 <= 1.1654313206672668) ? ( (Feature_1 <= -0.04160385578870773) ? ( 21 ) : ( 22 ) ) : ( (Feature_6 <= -0.09772727265954018) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_0 <= -0.3150939345359802) ? ( (Feature_8 <= 1.53666090965271) ? ( (Feature_8 <= 1.2228209972381592) ? ( (Feature_7 <= 0.21762974560260773) ? ( 30 ) : ( 31 ) ) : ( 32 ) ) : ( 33 ) ) : ( (Feature_5 <= 0.7071312367916107) ? ( (Feature_5 <= -0.5688535571098328) ? ( (Feature_8 <= 1.3626121878623962) ? ( 37 ) : ( 38 ) ) : ( (Feature_4 <= -0.02674424648284912) ? ( 40 ) : ( 41 ) ) ) : ( (Feature_5 <= 1.0610932111740112) ? ( 43 ) : ( (Feature_9 <= 0.9152628481388092) ? ( 45 ) : ( 46 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_0
	

	namespace SubModel_1 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-284.89041043 }} ,
				{ 6 ,  {-165.64587305 }} ,
				{ 7 ,  {-210.3549175 }} ,
				{ 8 ,  {-53.5585581 }} ,
				{ 10 ,  {-351.38429309 }} ,
				{ 12 ,  {-459.03067075 }} ,
				{ 13 ,  {-422.390294 }} ,
				{ 18 ,  {-251.2683419 }} ,
				{ 19 ,  {-155.53419885 }} ,
				{ 20 ,  {-9.18516091 }} ,
				{ 23 ,  {-223.26828856 }} ,
				{ 24 ,  {-3.64150041 }} ,
				{ 26 ,  {156.85798347 }} ,
				{ 27 ,  {144.42445426 }} ,
				{ 31 ,  {11.97984848 }} ,
				{ 32 ,  {23.51174878 }} ,
				{ 34 ,  {-27.42654029 }} ,
				{ 35 ,  {-32.37006064 }} ,
				{ 38 ,  {-14.48252166 }} ,
				{ 39 ,  {-33.33701473 }} ,
				{ 41 ,  {210.19737687 }} ,
				{ 42 ,  {373.29587624 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.6693825721740723) ? ( (Feature_5 <= -0.9736151099205017) ? ( (Feature_8 <= 0.3360840603709221) ? ( (Feature_1 <= -0.7877690196037292) ? ( 4 ) : ( (Feature_4 <= 0.33037319779396057) ? ( 6 ) : ( 7 ) ) ) : ( 8 ) ) : ( (Feature_3 <= -1.474112629890442) ? ( 10 ) : ( (Feature_6 <= -0.4687984958291054) ? ( 12 ) : ( 13 ) ) ) ) : ( (Feature_8 <= -0.3908981829881668) ? ( (Feature_6 <= -0.23099666088819504) ? ( (Feature_7 <= 0.6204898059368134) ? ( (Feature_9 <= -1.7270992398262024) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_2 <= 1.0266037583351135) ? ( (Feature_7 <= -1.0521633625030518) ? ( 23 ) : ( 24 ) ) : ( (Feature_1 <= 0.7896748706698418) ? ( 26 ) : ( 27 ) ) ) ) : ( (Feature_3 <= -0.7448139190673828) ? ( (Feature_5 <= 1.3483617305755615) ? ( (Feature_3 <= -0.9545608758926392) ? ( 31 ) : ( 32 ) ) : ( (Feature_3 <= -1.574190616607666) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_4 <= -0.9480748474597931) ? ( (Feature_7 <= -0.4445253759622574) ? ( 38 ) : ( 39 ) ) : ( (Feature_0 <= 0.8513177633285522) ? ( 41 ) : ( 42 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_1
	

	namespace SubModel_2 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-296.83931668 }} ,
				{ 6 ,  {-177.75033458 }} ,
				{ 8 ,  {-141.63488527 }} ,
				{ 9 ,  {-31.80056391 }} ,
				{ 12 ,  {-102.85089819 }} ,
				{ 13 ,  {12.14505871 }} ,
				{ 15 ,  {290.7091541 }} ,
				{ 16 ,  {320.68265233 }} ,
				{ 19 ,  {447.69098355 }} ,
				{ 20 ,  {316.51213779 }} ,
				{ 23 ,  {150.64121886 }} ,
				{ 24 ,  {191.55215494 }} ,
				{ 25 ,  {259.87552026 }} ,
				{ 29 ,  {228.58868552 }} ,
				{ 30 ,  {325.07388162 }} ,
				{ 33 ,  {60.60536392 }} ,
				{ 34 ,  {113.44087953 }} ,
				{ 35 ,  {198.97164294 }} ,
				{ 38 ,  {243.63801062 }} ,
				{ 39 ,  {277.98128451 }} ,
				{ 41 ,  {360.61572443 }} ,
				{ 42 ,  {393.26109279 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_7 <= 0.8381368219852448) ? ( (Feature_2 <= 1.10337233543396) ? ( (Feature_5 <= 0.2265688106417656) ? ( (Feature_7 <= 0.0946699888445437) ? ( (Feature_4 <= -0.5533334314823151) ? ( 5 ) : ( 6 ) ) : ( (Feature_4 <= -0.5821902006864548) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= 1.4059425592422485) ? ( (Feature_6 <= -0.2598869800567627) ? ( 12 ) : ( 13 ) ) : ( (Feature_4 <= -0.16230708360671997) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_6 <= -0.3011132664978504) ? ( (Feature_9 <= 0.015298962593078613) ? ( 19 ) : ( 20 ) ) : ( (Feature_8 <= 0.49558216892182827) ? ( (Feature_4 <= -0.09974803030490875) ? ( 23 ) : ( 24 ) ) : ( 25 ) ) ) ) : ( (Feature_5 <= 0.45844703912734985) ? ( (Feature_5 <= -0.4371299594640732) ? ( (Feature_2 <= 0.7601904571056366) ? ( 29 ) : ( 30 ) ) : ( (Feature_6 <= 0.973041221499443) ? ( (Feature_4 <= 0.8270849511027336) ? ( 33 ) : ( 34 ) ) : ( 35 ) ) ) : ( (Feature_6 <= 0.3122275471687317) ? ( (Feature_9 <= 0.1460252278484404) ? ( 38 ) : ( 39 ) ) : ( (Feature_9 <= -0.04654818773269653) ? ( 41 ) : ( 42 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_2
	

	namespace SubModel_3 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-459.03067075 }} ,
				{ 5 ,  {-305.67509721 }} ,
				{ 8 ,  {-218.80082207 }} ,
				{ 9 ,  {-182.33200566 }} ,
				{ 11 ,  {-53.5585581 }} ,
				{ 12 ,  {-122.95886224 }} ,
				{ 16 ,  {-116.67620856 }} ,
				{ 17 ,  {-216.97685029 }} ,
				{ 19 ,  {-181.51172981 }} ,
				{ 20 ,  {17.61928005 }} ,
				{ 23 ,  {15.08637448 }} ,
				{ 24 ,  {128.21020799 }} ,
				{ 26 ,  {320.68265233 }} ,
				{ 27 ,  {376.93840861 }} ,
				{ 29 ,  {-298.79907559 }} ,
				{ 33 ,  {-9.18516091 }} ,
				{ 34 ,  {-67.71218597 }} ,
				{ 36 ,  {110.320035 }} ,
				{ 37 ,  {264.368741 }} ,
				{ 40 ,  {169.37489455 }} ,
				{ 41 ,  {265.03471296 }} ,
				{ 43 ,  {314.98747159 }} ,
				{ 44 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.5816535651683807) ? ( (Feature_5 <= 0.12146195024251938) ? ( (Feature_4 <= -1.0978334546089172) ? ( (Feature_2 <= -0.7521098051220179) ? ( 4 ) : ( 5 ) ) : ( (Feature_7 <= 0.14835833758115768) ? ( (Feature_1 <= -0.16830184310674667) ? ( 8 ) : ( 9 ) ) : ( (Feature_5 <= -1.3581381142139435) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_8 <= -0.019865378737449646) ? ( (Feature_6 <= -0.21131692826747894) ? ( (Feature_6 <= -0.42116712033748627) ? ( 16 ) : ( 17 ) ) : ( (Feature_5 <= 0.2376226782798767) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_7 <= 0.6048205196857452) ? ( (Feature_9 <= 0.1415829434990883) ? ( 23 ) : ( 24 ) ) : ( (Feature_1 <= -0.07170027121901512) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_4 <= -1.8727510571479797) ? ( 29 ) : ( (Feature_1 <= -0.19398971647024155) ? ( (Feature_6 <= -0.31106266379356384) ? ( (Feature_6 <= -0.798853874206543) ? ( 33 ) : ( 34 ) ) : ( (Feature_2 <= 0.8179076910018921) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_6 <= 0.07150077447295189) ? ( 40 ) : ( 41 ) ) : ( (Feature_0 <= 1.8615092039108276) ? ( 43 ) : ( 44 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_3
	

	namespace SubModel_4 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 3 ,  {-459.03067075 }} ,
				{ 6 ,  {-248.32160218 }} ,
				{ 7 ,  {-147.90439309 }} ,
				{ 9 ,  {-280.43388967 }} ,
				{ 10 ,  {-351.38429309 }} ,
				{ 13 ,  {-20.2700101 }} ,
				{ 14 ,  {-53.5585581 }} ,
				{ 16 ,  {259.87552026 }} ,
				{ 17 ,  {235.32017089 }} ,
				{ 22 ,  {-200.84036412 }} ,
				{ 23 ,  {-134.45763417 }} ,
				{ 25 ,  {27.46890449 }} ,
				{ 26 ,  {-65.16829602 }} ,
				{ 29 ,  {-5.73651634 }} ,
				{ 30 ,  {34.80410029 }} ,
				{ 32 ,  {144.42445426 }} ,
				{ 33 ,  {156.85798347 }} ,
				{ 37 ,  {58.56592202 }} ,
				{ 38 ,  {116.88919618 }} ,
				{ 40 ,  {-1.70106023 }} ,
				{ 41 ,  {-33.0146967 }} ,
				{ 44 ,  {53.72934573 }} ,
				{ 45 ,  {285.43270621 }} ,
				{ 47 ,  {257.24781677 }} ,
				{ 48 ,  {371.49751388 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.5290045142173767) ? ( (Feature_1 <= 0.12633489351719618) ? ( (Feature_2 <= -1.5412905812263489) ? ( 3 ) : ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_5 <= -1.230453073978424) ? ( 6 ) : ( 7 ) ) : ( (Feature_1 <= -0.49368348717689514) ? ( 9 ) : ( 10 ) ) ) ) : ( (Feature_2 <= 0.3192184865474701) ? ( (Feature_9 <= -0.8223108202219009) ? ( 13 ) : ( 14 ) ) : ( (Feature_3 <= 0.9073511511087418) ? ( 16 ) : ( 17 ) ) ) ) : ( (Feature_8 <= -0.18945985287427902) ? ( (Feature_2 <= 0.3559166193008423) ? ( (Feature_1 <= 0.26806823164224625) ? ( (Feature_9 <= 0.6223152577877045) ? ( 22 ) : ( 23 ) ) : ( (Feature_3 <= 0.1966378167271614) ? ( 25 ) : ( 26 ) ) ) : ( (Feature_1 <= -0.07556744664907455) ? ( (Feature_5 <= 1.0732121467590332) ? ( 29 ) : ( 30 ) ) : ( (Feature_2 <= 1.4275000095367432) ? ( 32 ) : ( 33 ) ) ) ) : ( (Feature_2 <= -0.4835273176431656) ? ( (Feature_2 <= -0.9558148682117462) ? ( (Feature_5 <= 0.7259317934513092) ? ( 37 ) : ( 38 ) ) : ( (Feature_6 <= 0.7552735805511475) ? ( 40 ) : ( 41 ) ) ) : ( (Feature_0 <= 0.09366913139820099) ? ( (Feature_3 <= 0.04126780480146408) ? ( 44 ) : ( 45 ) ) : ( (Feature_7 <= 0.9121542870998383) ? ( 47 ) : ( 48 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_4
	

	namespace SubModel_5 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-351.38429309 }} ,
				{ 6 ,  {-422.390294 }} ,
				{ 7 ,  {-165.64587305 }} ,
				{ 10 ,  {-230.44575984 }} ,
				{ 11 ,  {-117.15459507 }} ,
				{ 13 ,  {-40.09660567 }} ,
				{ 14 ,  {156.7480822 }} ,
				{ 18 ,  {50.36841271 }} ,
				{ 19 ,  {116.88919618 }} ,
				{ 21 ,  {-101.20974879 }} ,
				{ 22 ,  {-33.33701473 }} ,
				{ 23 ,  {393.26109279 }} ,
				{ 28 ,  {-181.51172981 }} ,
				{ 29 ,  {-251.2683419 }} ,
				{ 31 ,  {22.30851676 }} ,
				{ 32 ,  {-33.0622703 }} ,
				{ 35 ,  {277.98128451 }} ,
				{ 36 ,  {235.32017089 }} ,
				{ 37 ,  {156.85798347 }} ,
				{ 41 ,  {79.57683038 }} ,
				{ 42 ,  {198.97164294 }} ,
				{ 44 ,  {210.46744176 }} ,
				{ 45 ,  {304.2886959 }} ,
				{ 48 ,  {270.1533982 }} ,
				{ 49 ,  {344.49193801 }} ,
				{ 50 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.18410376459360123) ? ( (Feature_8 <= 0.6005938053131104) ? ( (Feature_3 <= -1.1217054724693298) ? ( (Feature_6 <= -0.09845124371349812) ? ( (Feature_0 <= 0.10361790657043457) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_1 <= 0.28144707530736923) ? ( (Feature_4 <= -1.0482117533683777) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= 0.7859629988670349) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_5 <= 1.3203524351119995) ? ( (Feature_3 <= 0.3380711227655411) ? ( (Feature_9 <= 1.9316614270210266) ? ( 18 ) : ( 19 ) ) : ( (Feature_6 <= 0.6314413994550705) ? ( 21 ) : ( 22 ) ) ) : ( 23 ) ) ) : ( (Feature_8 <= -0.1578926146030426) ? ( (Feature_2 <= 0.9449615180492401) ? ( (Feature_9 <= -0.42366455495357513) ? ( (Feature_2 <= 0.2906338721513748) ? ( 28 ) : ( 29 ) ) : ( (Feature_8 <= -0.4052674025297165) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_9 <= 1.2390621900558472) ? ( (Feature_0 <= 0.6740786731243134) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) ) : ( (Feature_1 <= 0.019701428711414337) ? ( (Feature_9 <= 0.28248203080147505) ? ( (Feature_1 <= -0.1484617181122303) ? ( 41 ) : ( 42 ) ) : ( (Feature_4 <= 0.40085074305534363) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_7 <= 2.039384424686432) ? ( (Feature_4 <= -0.8017905652523041) ? ( 48 ) : ( 49 ) ) : ( 50 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_5
	

	namespace SubModel_6 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-459.03067075 }} ,
				{ 5 ,  {-422.390294 }} ,
				{ 8 ,  {-202.31673701 }} ,
				{ 9 ,  {-147.92721989 }} ,
				{ 11 ,  {-53.5585581 }} ,
				{ 12 ,  {-101.20974879 }} ,
				{ 16 ,  {-223.26828856 }} ,
				{ 17 ,  {-140.83123535 }} ,
				{ 19 ,  {-74.45046085 }} ,
				{ 20 ,  {-17.44129299 }} ,
				{ 23 ,  {58.67463616 }} ,
				{ 24 ,  {44.29871811 }} ,
				{ 26 ,  {11.97984848 }} ,
				{ 27 ,  {-8.54151458 }} ,
				{ 31 ,  {144.42445426 }} ,
				{ 33 ,  {-268.19043239 }} ,
				{ 34 ,  {-154.40083699 }} ,
				{ 37 ,  {36.64726906 }} ,
				{ 38 ,  {-1.80904277 }} ,
				{ 39 ,  {156.85798347 }} ,
				{ 42 ,  {-298.79907559 }} ,
				{ 43 ,  {-20.42352874 }} ,
				{ 46 ,  {-27.42654029 }} ,
				{ 47 ,  {113.44087953 }} ,
				{ 49 ,  {220.69433825 }} ,
				{ 50 ,  {389.66883268 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.18410376459360123) ? ( (Feature_5 <= -0.39174382388591766) ? ( (Feature_1 <= -0.9223221838474274) ? ( (Feature_1 <= -1.5108126401901245) ? ( 4 ) : ( 5 ) ) : ( (Feature_8 <= 0.3360840603709221) ? ( (Feature_1 <= -0.31241998076438904) ? ( 8 ) : ( 9 ) ) : ( (Feature_8 <= 0.9541230201721191) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_1 <= 0.5709209591150284) ? ( (Feature_7 <= -0.6132531613111496) ? ( (Feature_5 <= 0.5161985456943512) ? ( 16 ) : ( 17 ) ) : ( (Feature_3 <= 1.175403654575348) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_5 <= 0.6772039830684662) ? ( (Feature_1 <= 1.3546077609062195) ? ( 23 ) : ( 24 ) ) : ( (Feature_3 <= -0.12183716893196106) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_8 <= -0.4402347803115845) ? ( (Feature_5 <= 0.31690624356269836) ? ( (Feature_7 <= -0.09837684500962496) ? ( 31 ) : ( (Feature_5 <= -0.10966596007347107) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_1 <= 0.1855405867099762) ? ( (Feature_0 <= 0.3768843412399292) ? ( 37 ) : ( 38 ) ) : ( 39 ) ) ) : ( (Feature_4 <= -1.493760734796524) ? ( (Feature_5 <= 0.011891692876815796) ? ( 42 ) : ( 43 ) ) : ( (Feature_1 <= -1.381020724773407) ? ( (Feature_4 <= 0.6135571002960205) ? ( 46 ) : ( 47 ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_6
	

	namespace SubModel_7 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-219.73048001 }} ,
				{ 6 ,  {-69.44228833 }} ,
				{ 8 ,  {-422.390294 }} ,
				{ 9 ,  {-316.32748142 }} ,
				{ 12 ,  {-224.07377768 }} ,
				{ 13 ,  {-67.87408882 }} ,
				{ 15 ,  {212.28993399 }} ,
				{ 16 ,  {13.66733519 }} ,
				{ 19 ,  {-284.89041043 }} ,
				{ 21 ,  {62.64480581 }} ,
				{ 22 ,  {-6.19072274 }} ,
				{ 25 ,  {240.96884029 }} ,
				{ 26 ,  {113.44087953 }} ,
				{ 28 ,  {479.70721604 }} ,
				{ 29 ,  {376.93840861 }} ,
				{ 32 ,  {-9.18516091 }} ,
				{ 34 ,  {144.42445426 }} ,
				{ 35 ,  {156.85798347 }} ,
				{ 39 ,  {259.87552026 }} ,
				{ 40 ,  {235.32017089 }} ,
				{ 42 ,  {194.40871671 }} ,
				{ 43 ,  {191.55215494 }} ,
				{ 46 ,  {349.42168234 }} ,
				{ 47 ,  {318.65257375 }} ,
				{ 48 ,  {277.98128451 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.9449615180492401) ? ( (Feature_7 <= 0.7779803574085236) ? ( (Feature_5 <= -0.6670668423175812) ? ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_8 <= 0.5116420686244965) ? ( 5 ) : ( 6 ) ) : ( (Feature_1 <= -0.9057741165161133) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= -0.20600614696741104) ? ( (Feature_4 <= -1.0482117533683777) ? ( 12 ) : ( 13 ) ) : ( (Feature_5 <= 0.34753017872571945) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_8 <= -0.06810655444860458) ? ( (Feature_5 <= -0.9526249244809151) ? ( 19 ) : ( (Feature_5 <= 0.1546674594283104) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_6 <= 0.5813029557466507) ? ( (Feature_7 <= 1.6685460209846497) ? ( 25 ) : ( 26 ) ) : ( (Feature_5 <= 0.903096616268158) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_8 <= -0.5391541123390198) ? ( (Feature_2 <= 1.10337233543396) ? ( 32 ) : ( (Feature_4 <= -0.3687320947647095) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_4 <= 0.2250973880290985) ? ( (Feature_5 <= -0.5778985321521759) ? ( (Feature_3 <= 0.9073511511087418) ? ( 39 ) : ( 40 ) ) : ( (Feature_7 <= -0.40599823743104935) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_1 <= 1.7956550121307373) ? ( (Feature_7 <= -0.9521676003932953) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_7
	

	namespace SubModel_8 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-284.89041043 }} ,
				{ 6 ,  {-230.73613628 }} ,
				{ 8 ,  {-172.51070738 }} ,
				{ 9 ,  {-91.26313837 }} ,
				{ 12 ,  {-298.79907559 }} ,
				{ 13 ,  {-268.19043239 }} ,
				{ 14 ,  {-351.38429309 }} ,
				{ 18 ,  {-232.60163967 }} ,
				{ 19 ,  {-182.68535868 }} ,
				{ 21 ,  {-94.74256141 }} ,
				{ 22 ,  {7.93980826 }} ,
				{ 24 ,  {-8.54151458 }} ,
				{ 26 ,  {131.60358684 }} ,
				{ 27 ,  {232.03025796 }} ,
				{ 32 ,  {-53.5585581 }} ,
				{ 33 ,  {-101.20974879 }} ,
				{ 35 ,  {53.47827181 }} ,
				{ 36 ,  {-33.33701473 }} ,
				{ 37 ,  {393.26109279 }} ,
				{ 41 ,  {228.58868552 }} ,
				{ 42 ,  {259.87552026 }} ,
				{ 43 ,  {194.40871671 }} ,
				{ 46 ,  {290.7091541 }} ,
				{ 47 ,  {334.7146063 }} ,
				{ 48 ,  {447.69098355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_5 <= -0.5012405514717102) ? ( (Feature_5 <= -0.9047020673751831) ? ( (Feature_1 <= -0.931333601474762) ? ( (Feature_3 <= -0.4883671849966049) ? ( 5 ) : ( 6 ) ) : ( (Feature_3 <= -0.44480563700199127) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= -0.49368348717689514) ? ( (Feature_6 <= 0.8243781663477421) ? ( 12 ) : ( 13 ) ) : ( 14 ) ) ) : ( (Feature_8 <= -0.04430999793112278) ? ( (Feature_4 <= -1.0482117533683777) ? ( (Feature_3 <= 0.6642143130302429) ? ( 18 ) : ( 19 ) ) : ( (Feature_6 <= -0.340087354183197) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_2 <= -0.3196413666009903) ? ( 24 ) : ( (Feature_8 <= 0.2945074737071991) ? ( 26 ) : ( 27 ) ) ) ) ) : ( (Feature_2 <= 0.16659518145024776) ? ( (Feature_7 <= 0.9718128442764282) ? ( (Feature_5 <= -0.27812254428863525) ? ( (Feature_8 <= 0.9541230201721191) ? ( 32 ) : ( 33 ) ) : ( (Feature_0 <= 0.36501309275627136) ? ( 35 ) : ( 36 ) ) ) : ( 37 ) ) : ( (Feature_8 <= 1.3499985933303833) ? ( (Feature_0 <= 0.440347284078598) ? ( (Feature_2 <= 0.9855393469333649) ? ( 41 ) : ( 42 ) ) : ( 43 ) ) : ( (Feature_0 <= 1.8744382858276367) ? ( (Feature_9 <= 0.19941943138837814) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_8
	

	namespace SubModel_9 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-459.03067075 }} ,
				{ 6 ,  {-422.390294 }} ,
				{ 8 ,  {-302.2370864 }} ,
				{ 9 ,  {-189.91140237 }} ,
				{ 11 ,  {-268.19043239 }} ,
				{ 13 ,  {-21.18053754 }} ,
				{ 14 ,  {113.44087953 }} ,
				{ 18 ,  {-116.62359065 }} ,
				{ 19 ,  {-181.59010118 }} ,
				{ 21 ,  {-37.85888703 }} ,
				{ 22 ,  {156.7480822 }} ,
				{ 25 ,  {179.67722287 }} ,
				{ 26 ,  {44.73531346 }} ,
				{ 28 ,  {301.70077103 }} ,
				{ 29 ,  {213.3698611 }} ,
				{ 34 ,  {325.07388162 }} ,
				{ 35 ,  {320.68265233 }} ,
				{ 37 ,  {360.61572443 }} ,
				{ 38 ,  {351.37130796 }} ,
				{ 39 ,  {447.69098355 }} ,
				{ 42 ,  {194.40871671 }} ,
				{ 44 ,  {246.88551254 }} ,
				{ 45 ,  {290.7091541 }} ,
				{ 46 ,  {58.56592202 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 0.490033820271492) ? ( (Feature_1 <= -0.5763004422187805) ? ( (Feature_7 <= 0.1878301277756691) ? ( (Feature_3 <= -0.7235661894083023) ? ( (Feature_5 <= -0.728982001543045) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= -0.661413162946701) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= -1.9174264669418335) ? ( 11 ) : ( (Feature_4 <= 0.6135571002960205) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_2 <= -0.16130470484495163) ? ( (Feature_1 <= 0.28144707530736923) ? ( (Feature_2 <= -0.9737077057361603) ? ( 18 ) : ( 19 ) ) : ( (Feature_0 <= 0.6164413839578629) ? ( 21 ) : ( 22 ) ) ) : ( (Feature_3 <= 0.5238881409168243) ? ( (Feature_7 <= -0.17408128827810287) ? ( 25 ) : ( 26 ) ) : ( (Feature_0 <= 0.3955933004617691) ? ( 28 ) : ( 29 ) ) ) ) ) : ( (Feature_1 <= 0.6093696057796478) ? ( (Feature_0 <= 1.4753600358963013) ? ( (Feature_5 <= 0.9352205395698547) ? ( (Feature_5 <= -0.38024741411209106) ? ( 34 ) : ( 35 ) ) : ( (Feature_4 <= 0.5894448161125183) ? ( 37 ) : ( 38 ) ) ) : ( 39 ) ) : ( (Feature_1 <= 0.9667319655418396) ? ( (Feature_4 <= -1.0313229262828827) ? ( 42 ) : ( (Feature_3 <= 0.4512084871530533) ? ( 44 ) : ( 45 ) ) ) : ( 46 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_9
	

	namespace SubModel_10 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-302.2370864 }} ,
				{ 6 ,  {-351.38429309 }} ,
				{ 7 ,  {-422.390294 }} ,
				{ 9 ,  {-268.19043239 }} ,
				{ 11 ,  {-186.24037603 }} ,
				{ 12 ,  {-220.54552689 }} ,
				{ 16 ,  {-181.51172981 }} ,
				{ 17 ,  {-10.10700221 }} ,
				{ 19 ,  {-140.83123535 }} ,
				{ 20 ,  {-223.26828856 }} ,
				{ 22 ,  {191.55215494 }} ,
				{ 23 ,  {447.69098355 }} ,
				{ 28 ,  {68.71818079 }} ,
				{ 29 ,  {-4.14508081 }} ,
				{ 31 ,  {-237.150375 }} ,
				{ 32 ,  {-90.66860045 }} ,
				{ 34 ,  {360.61572443 }} ,
				{ 35 ,  {393.26109279 }} ,
				{ 39 ,  {62.64480581 }} ,
				{ 40 ,  {144.42445426 }} ,
				{ 42 ,  {258.9702912 }} ,
				{ 43 ,  {196.69017983 }} ,
				{ 46 ,  {331.24146474 }} ,
				{ 47 ,  {228.58868552 }} ,
				{ 48 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_1 <= -0.30988679826259613) ? ( (Feature_5 <= -0.5290045142173767) ? ( (Feature_7 <= 0.014229899737983942) ? ( (Feature_7 <= -0.044322007801383734) ? ( (Feature_4 <= -0.9467442333698273) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_8 <= -1.6663842797279358) ? ( 9 ) : ( (Feature_4 <= 1.1088629364967346) ? ( 11 ) : ( 12 ) ) ) ) : ( (Feature_2 <= 1.508549690246582) ? ( (Feature_9 <= 0.9930853545665741) ? ( (Feature_8 <= -1.9733136892318726) ? ( 16 ) : ( 17 ) ) : ( (Feature_8 <= -1.5143016427755356) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_8 <= 1.505309646949172) ? ( 22 ) : ( 23 ) ) ) ) : ( (Feature_2 <= 0.32526957988739014) ? ( (Feature_7 <= 0.9718128442764282) ? ( (Feature_0 <= 0.48137156665325165) ? ( (Feature_1 <= 1.1045780181884766) ? ( 28 ) : ( 29 ) ) : ( (Feature_1 <= -0.0812534810975194) ? ( 31 ) : ( 32 ) ) ) : ( (Feature_4 <= -0.336873147636652) ? ( 34 ) : ( 35 ) ) ) : ( (Feature_4 <= 0.40221522748470306) ? ( (Feature_3 <= -0.1852387711405754) ? ( (Feature_0 <= -0.3599242363125086) ? ( 39 ) : ( 40 ) ) : ( (Feature_0 <= 0.440347284078598) ? ( 42 ) : ( 43 ) ) ) : ( (Feature_4 <= 1.9032750129699707) ? ( (Feature_7 <= 1.0105357766151428) ? ( 46 ) : ( 47 ) ) : ( 48 ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_10
	

	namespace SubModel_11 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-280.71935833 }} ,
				{ 6 ,  {-175.65755262 }} ,
				{ 8 ,  {-210.3549175 }} ,
				{ 9 ,  {-86.94585495 }} ,
				{ 12 ,  {-223.70135853 }} ,
				{ 13 ,  {-59.48211683 }} ,
				{ 15 ,  {-9.8778035 }} ,
				{ 16 ,  {234.95769992 }} ,
				{ 20 ,  {248.45948375 }} ,
				{ 21 ,  {169.37489455 }} ,
				{ 23 ,  {349.42168234 }} ,
				{ 24 ,  {316.51213779 }} ,
				{ 26 ,  {62.64480581 }} ,
				{ 27 ,  {-9.18516091 }} ,
				{ 29 ,  {116.88919618 }} ,
				{ 33 ,  {355.9935162 }} ,
				{ 34 ,  {322.43914405 }} ,
				{ 36 ,  {290.7091541 }} ,
				{ 37 ,  {243.63801062 }} ,
				{ 38 ,  {447.69098355 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= 1.3777701258659363) ? ( (Feature_2 <= 0.7007583975791931) ? ( (Feature_5 <= -0.012563485652208328) ? ( (Feature_3 <= 0.20674537122249603) ? ( (Feature_1 <= -0.3833197057247162) ? ( 5 ) : ( 6 ) ) : ( (Feature_9 <= -0.49516672641038895) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_8 <= -0.17388925701379776) ? ( (Feature_4 <= -1.4541136026382446) ? ( 12 ) : ( 13 ) ) : ( (Feature_2 <= -0.490392342209816) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_7 <= 0.7239384353160858) ? ( (Feature_4 <= 0.3000642294064164) ? ( (Feature_2 <= 1.5678871870040894) ? ( 20 ) : ( 21 ) ) : ( (Feature_2 <= 2.0134767293930054) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_0 <= -0.20426438748836517) ? ( 26 ) : ( 27 ) ) ) ) : ( (Feature_0 <= -1.5720696449279785) ? ( 29 ) : ( (Feature_2 <= 1.5560894012451172) ? ( (Feature_0 <= 1.2730661630630493) ? ( (Feature_9 <= 0.5980944633483887) ? ( 33 ) : ( 34 ) ) : ( (Feature_4 <= -0.5865430235862732) ? ( 36 ) : ( 37 ) ) ) : ( 38 ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_11
	

	namespace SubModel_12 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-261.02039272 }} ,
				{ 6 ,  {-351.38429309 }} ,
				{ 7 ,  {-154.40083699 }} ,
				{ 10 ,  {-148.30330432 }} ,
				{ 11 ,  {-53.6467133 }} ,
				{ 13 ,  {2.89456287 }} ,
				{ 14 ,  {54.02761567 }} ,
				{ 18 ,  {37.34665341 }} ,
				{ 19 ,  {8.92365624 }} ,
				{ 20 ,  {-27.42654029 }} ,
				{ 22 ,  {144.42445426 }} ,
				{ 23 ,  {277.98128451 }} ,
				{ 26 ,  {325.07388162 }} ,
				{ 29 ,  {-210.3549175 }} ,
				{ 30 ,  {-301.0910828 }} ,
				{ 32 ,  {-101.20974879 }} ,
				{ 33 ,  {-165.64587305 }} ,
				{ 36 ,  {58.56592202 }} ,
				{ 38 ,  {-8.54151458 }} ,
				{ 39 ,  {-24.72802407 }} ,
				{ 42 ,  {178.16748523 }} ,
				{ 43 ,  {276.99846689 }} ,
				{ 45 ,  {447.69098355 }} ,
				{ 46 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_8 <= -0.10979260504245758) ? ( (Feature_2 <= 0.5131992697715759) ? ( (Feature_3 <= -1.113596260547638) ? ( (Feature_1 <= 0.35843732953071594) ? ( (Feature_9 <= 0.7259441763162613) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_1 <= 0.4850587993860245) ? ( (Feature_5 <= 1.0220756828784943) ? ( 10 ) : ( 11 ) ) : ( (Feature_0 <= -0.3265945166349411) ? ( 13 ) : ( 14 ) ) ) ) : ( (Feature_1 <= 0.19466164708137512) ? ( (Feature_9 <= 0.08570680022239685) ? ( (Feature_6 <= 1.8225716948509216) ? ( 18 ) : ( 19 ) ) : ( 20 ) ) : ( (Feature_3 <= -0.033492982387542725) ? ( 22 ) : ( 23 ) ) ) ) : ( (Feature_5 <= -0.6784075498580933) ? ( (Feature_6 <= -0.4803800079971552) ? ( 26 ) : ( (Feature_9 <= -0.4723208323121071) ? ( (Feature_5 <= -1.6724066138267517) ? ( 29 ) : ( 30 ) ) : ( (Feature_9 <= 0.2046770378947258) ? ( 32 ) : ( 33 ) ) ) ) : ( (Feature_4 <= -0.9727684557437897) ? ( (Feature_2 <= -1.516735851764679) ? ( 36 ) : ( (Feature_6 <= -0.01882978156208992) ? ( 38 ) : ( 39 ) ) ) : ( (Feature_0 <= 1.8744382858276367) ? ( (Feature_1 <= 0.019701428711414337) ? ( 42 ) : ( 43 ) ) : ( (Feature_7 <= 0.7463369965553284) ? ( 45 ) : ( 46 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_12
	

	namespace SubModel_13 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-230.73613628 }} ,
				{ 6 ,  {-298.74686828 }} ,
				{ 8 ,  {-175.94312454 }} ,
				{ 9 ,  {-78.87804025 }} ,
				{ 12 ,  {-422.390294 }} ,
				{ 13 ,  {-459.03067075 }} ,
				{ 15 ,  {-298.79907559 }} ,
				{ 16 ,  {-351.38429309 }} ,
				{ 20 ,  {-141.94613915 }} ,
				{ 21 ,  {6.03691242 }} ,
				{ 23 ,  {-154.40083699 }} ,
				{ 24 ,  {14.73411326 }} ,
				{ 27 ,  {108.7691166 }} ,
				{ 28 ,  {340.49816578 }} ,
				{ 30 ,  {-10.8893497 }} ,
				{ 31 ,  {136.81863919 }} ,
				{ 35 ,  {8.92365624 }} ,
				{ 36 ,  {38.71263785 }} ,
				{ 37 ,  {113.44087953 }} ,
				{ 41 ,  {144.42445426 }} ,
				{ 42 ,  {191.55215494 }} ,
				{ 44 ,  {255.02914018 }} ,
				{ 45 ,  {235.32017089 }} ,
				{ 47 ,  {310.60889078 }} ,
				{ 49 ,  {351.37130796 }} ,
				{ 50 ,  {349.42168234 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_2 <= 0.7259149551391602) ? ( (Feature_5 <= -0.6670668423175812) ? ( (Feature_5 <= -0.8804325759410858) ? ( (Feature_1 <= -0.931333601474762) ? ( (Feature_2 <= -0.5942522082477808) ? ( 5 ) : ( 6 ) ) : ( (Feature_5 <= -1.0198956727981567) ? ( 8 ) : ( 9 ) ) ) : ( (Feature_1 <= -0.9057741165161133) ? ( (Feature_3 <= -1.0742315649986267) ? ( 12 ) : ( 13 ) ) : ( (Feature_1 <= -0.49368348717689514) ? ( 15 ) : ( 16 ) ) ) ) : ( (Feature_8 <= -0.10979260504245758) ? ( (Feature_1 <= 0.5416697859764099) ? ( (Feature_2 <= 0.42820243537425995) ? ( 20 ) : ( 21 ) ) : ( (Feature_3 <= -1.4643601775169373) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_5 <= 0.6741634905338287) ? ( (Feature_2 <= 0.33050215244293213) ? ( 27 ) : ( 28 ) ) : ( (Feature_5 <= 0.9271526634693146) ? ( 30 ) : ( 31 ) ) ) ) ) : ( (Feature_9 <= -0.1555289514362812) ? ( (Feature_4 <= 1.1771820485591888) ? ( (Feature_9 <= -0.2396620362997055) ? ( 35 ) : ( 36 ) ) : ( 37 ) ) : ( (Feature_4 <= 0.3107970803976059) ? ( (Feature_9 <= 0.4701662063598633) ? ( (Feature_8 <= -0.33901351131498814) ? ( 41 ) : ( 42 ) ) : ( (Feature_4 <= -0.05854761879891157) ? ( 44 ) : ( 45 ) ) ) : ( (Feature_0 <= -0.2843398451805115) ? ( 47 ) : ( (Feature_0 <= 0.1416269838809967) ? ( 49 ) : ( 50 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_13
	

	namespace SubModel_14 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 4 ,  {-186.24037603 }} ,
				{ 5 ,  {-101.20974879 }} ,
				{ 8 ,  {-230.73613628 }} ,
				{ 9 ,  {-287.88930608 }} ,
				{ 10 ,  {-351.38429309 }} ,
				{ 12 ,  {-103.03861457 }} ,
				{ 14 ,  {-53.5585581 }} ,
				{ 15 ,  {-20.2700101 }} ,
				{ 20 ,  {-251.2683419 }} ,
				{ 21 ,  {-170.87780017 }} ,
				{ 23 ,  {44.29871811 }} ,
				{ 24 ,  {-90.08901352 }} ,
				{ 26 ,  {-223.26828856 }} ,
				{ 28 ,  {7.52864256 }} ,
				{ 29 ,  {124.78441218 }} ,
				{ 33 ,  {36.72898059 }} ,
				{ 34 ,  {116.88919618 }} ,
				{ 36 ,  {178.88197556 }} ,
				{ 37 ,  {269.77583221 }} ,
				{ 39 ,  {243.63801062 }} ,
				{ 41 ,  {393.26109279 }} ,
				{ 42 ,  {466.90072304 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.5290045142173767) ? ( (Feature_1 <= -0.19018520135432482) ? ( (Feature_0 <= -1.2196583151817322) ? ( (Feature_3 <= 0.17923054099082947) ? ( 4 ) : ( 5 ) ) : ( (Feature_1 <= -0.49368348717689514) ? ( (Feature_6 <= -1.8498062491416931) ? ( 8 ) : ( 9 ) ) : ( 10 ) ) ) : ( (Feature_7 <= 0.12803104892373085) ? ( 12 ) : ( (Feature_3 <= -0.5120400907471776) ? ( 14 ) : ( 15 ) ) ) ) : ( (Feature_8 <= -0.1578926146030426) ? ( (Feature_6 <= -0.21131692826747894) ? ( (Feature_0 <= 0.899311363697052) ? ( (Feature_4 <= -2.135541081428528) ? ( 20 ) : ( 21 ) ) : ( (Feature_3 <= -0.08056163042783737) ? ( 23 ) : ( 24 ) ) ) : ( (Feature_2 <= -0.15303488820791245) ? ( 26 ) : ( (Feature_2 <= 1.062130093574524) ? ( 28 ) : ( 29 ) ) ) ) : ( (Feature_0 <= 1.1141976118087769) ? ( (Feature_3 <= -0.1810198426246643) ? ( (Feature_9 <= 1.095573398284614) ? ( 33 ) : ( 34 ) ) : ( (Feature_1 <= -0.3568589687347412) ? ( 36 ) : ( 37 ) ) ) : ( (Feature_4 <= -0.060972992330789566) ? ( 39 ) : ( (Feature_0 <= 1.55813467502594) ? ( 41 ) : ( 42 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_14
	

	namespace SubModel_15 {
	
		typedef std::vector<double> tNodeData;
		std::map<int, tNodeData> Decision_Tree_Node_data = {
				{ 5 ,  {-298.79907559 }} ,
				{ 6 ,  {-351.38429309 }} ,
				{ 7 ,  {-459.03067075 }} ,
				{ 10 ,  {-273.75709174 }} ,
				{ 11 ,  {-223.94239668 }} ,
				{ 12 ,  {-101.20974879 }} ,
				{ 16 ,  {-20.2700101 }} ,
				{ 17 ,  {-49.96946031 }} ,
				{ 19 ,  {-165.64587305 }} ,
				{ 20 ,  {-121.151916 }} ,
				{ 22 ,  {325.07388162 }} ,
				{ 24 ,  {228.58868552 }} ,
				{ 25 ,  {235.32017089 }} ,
				{ 30 ,  {-126.9715494 }} ,
				{ 31 ,  {3.77694744 }} ,
				{ 33 ,  {15.48934042 }} ,
				{ 34 ,  {136.81863919 }} ,
				{ 37 ,  {58.56592202 }} ,
				{ 38 ,  {-9.61795807 }} ,
				{ 40 ,  {220.30388791 }} ,
				{ 41 ,  {340.64918838 }} ,
				{ 45 ,  {156.85798347 }} ,
				{ 46 ,  {144.42445426 }} ,
				{ 48 ,  {8.92365624 }} ,
				{ 49 ,  {-27.42654029 }} ,
				{ 52 ,  {113.44087953 }} ,
				{ 53 ,  {290.82694559 }} ,
				{ 55 ,  {447.69098355 }} ,
				{ 56 ,  {479.70721604 }} 
		};
		
	
		int get_decision_tree_node_index(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = (Feature_5 <= -0.3989693820476532) ? ( (Feature_1 <= -0.265030637383461) ? ( (Feature_7 <= -0.2537200227379799) ? ( (Feature_0 <= -0.3561193495988846) ? ( (Feature_1 <= -0.49368348717689514) ? ( 5 ) : ( 6 ) ) : ( 7 ) ) : ( (Feature_3 <= 0.625077947974205) ? ( (Feature_8 <= -0.7908036783337593) ? ( 10 ) : ( 11 ) ) : ( 12 ) ) ) : ( (Feature_2 <= 0.3587885946035385) ? ( (Feature_9 <= 0.29193983785808086) ? ( (Feature_4 <= 0.9386435151100159) ? ( 16 ) : ( 17 ) ) : ( (Feature_1 <= -0.07982141990214586) ? ( 19 ) : ( 20 ) ) ) : ( (Feature_3 <= 0.2993362173438072) ? ( 22 ) : ( (Feature_0 <= 1.0030691847205162) ? ( 24 ) : ( 25 ) ) ) ) ) : ( (Feature_2 <= 0.582874596118927) ? ( (Feature_7 <= 0.6698598563671112) ? ( (Feature_9 <= 0.8011433482170105) ? ( (Feature_8 <= -0.18452340364456177) ? ( 30 ) : ( 31 ) ) : ( (Feature_8 <= -0.5040033832192421) ? ( 33 ) : ( 34 ) ) ) : ( (Feature_4 <= -1.0602150559425354) ? ( (Feature_7 <= 1.047450304031372) ? ( 37 ) : ( 38 ) ) : ( (Feature_3 <= 0.9410157799720764) ? ( 40 ) : ( 41 ) ) ) ) : ( (Feature_4 <= -0.18378066644072533) ? ( (Feature_7 <= 0.37832556292414665) ? ( (Feature_6 <= 0.14154056832194328) ? ( 45 ) : ( 46 ) ) : ( (Feature_8 <= -0.7032727971673012) ? ( 48 ) : ( 49 ) ) ) : ( (Feature_0 <= 1.4841864109039307) ? ( (Feature_1 <= -0.9867686629295349) ? ( 52 ) : ( 53 ) ) : ( (Feature_6 <= 0.04179590940475464) ? ( 55 ) : ( 56 ) ) ) ) );
		
			return lNodeIndex;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { "Estimator" };
	
			return lOutputs;
		}
	
		tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
			int lNodeIndex = get_decision_tree_node_index(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9);
	
			std::vector<double> lNodeValue = Decision_Tree_Node_data[ lNodeIndex ];
	
	
			tTable lTable;
	
			std::any  lEstimator = lNodeValue [ 0 ];
			lTable[ "Estimator" ] = { lEstimator };
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);
	
			return lTable;
		}
	
	} // eof namespace SubModel_15
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { "Estimator" };

		return lOutputs;
	}

	tTable compute_regression(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9) {
		std::vector<tTable> lTreeScores = { 
			SubModel_0::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_1::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_2::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_3::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_4::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_5::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_6::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_7::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_8::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_9::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_10::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_11::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_12::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_13::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_14::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9),
			SubModel_15::compute_regression(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9)
		};

		tTable lAggregatedTable = aggregate_bag_scores(lTreeScores, {"Estimator"});


		tTable lTable;

		std::any  lEstimator = lAggregatedTable["Estimator"][0];
		lTable[ "Estimator" ] = { lEstimator };

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_regression(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/RandomReg_10.csv");
	return 0;
}
