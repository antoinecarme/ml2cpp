// ******************************************************** 

// This C++ code was automatically generated by ml2cpp (development version).
// Copyright 2020

// https://github.com/antoinecarme/ml2cpp
// Model : SVC_sigmoid
// Dataset : digits

// This CPP code can be compiled using any C++-17 compiler.
// g++ -Wall -Wno-unused-function -std=c++17 -g -o ml2cpp-demo_SVC_sigmoid_digits.exe ml2cpp-demo_SVC_sigmoid_digits.cpp

// Model deployment code

// ******************************************************** 

#include "../../Generic.i"

namespace  {

	std::vector<std::any> get_classes(){
		std::vector<std::any> lClasses = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

		return lClasses;
	}

	namespace pb_0_1 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 1 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_1 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_1 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		};
		
	
		double get_problem_0_1_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.00043172746232553904,0.0 ) + -0.03423506021499634;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_1",
				"Proba_0", "Proba_1",
				"LogProba_0", "LogProba_1" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_1 = sigmoid_kernel( lProblem_data_dual_0_1, lProblem_data_sv_0_1, inputs, 0.00043172746232553904,0.0 ) + -0.03423506021499634;
	
			std::any lLogistic_0_1 = logistic(2.5604799435125565 * lDotProduct_0_1 + 0.17792597457637943);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_1,
				lDotProduct_0_1 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_1,
				1.0 - lLogistic_0_1 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_1
	

	namespace pb_0_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_2 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-0.0 ,-0.0 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_2 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		};
		
	
		double get_problem_0_2_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.00043172746232553904,0.0 ) + -0.40954509377479553;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_2",
				"Proba_0", "Proba_2",
				"LogProba_0", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_2 = sigmoid_kernel( lProblem_data_dual_0_2, lProblem_data_sv_0_2, inputs, 0.00043172746232553904,0.0 ) + -0.40954509377479553;
	
			std::any lLogistic_0_2 = logistic(-5.439525049375798 * lDotProduct_0_2 + -2.9898884577964413);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_2,
				lDotProduct_0_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_2,
				1.0 - lLogistic_0_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_2
	

	namespace pb_0_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_3 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_3 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_0_3_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs, 0.00043172746232553904,0.0 ) + 0.08227261900901794;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_3",
				"Proba_0", "Proba_3",
				"LogProba_0", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_3 = sigmoid_kernel( lProblem_data_dual_0_3, lProblem_data_sv_0_3, inputs, 0.00043172746232553904,0.0 ) + 0.08227261900901794;
	
			std::any lLogistic_0_3 = logistic(2.419282671545849 * lDotProduct_0_3 + -0.02791183075396705);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_3,
				lDotProduct_0_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_3,
				1.0 - lLogistic_0_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_3
	

	namespace pb_0_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_4 = { 
		0.7588771269645027 ,0.2411228730354973 ,1.0 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_4 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_4_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs, 0.00043172746232553904,0.0 ) + 0.8053514727223663;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_4",
				"Proba_0", "Proba_4",
				"LogProba_0", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_4 = sigmoid_kernel( lProblem_data_dual_0_4, lProblem_data_sv_0_4, inputs, 0.00043172746232553904,0.0 ) + 0.8053514727223663;
	
			std::any lLogistic_0_4 = logistic(1.6860554133333328 * lDotProduct_0_4 + -1.6911237883210422);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_4,
				lDotProduct_0_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_4,
				1.0 - lLogistic_0_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_4
	

	namespace pb_0_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_5 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_5 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_5_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs, 0.00043172746232553904,0.0 ) + 0.03339812159538269;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_5",
				"Proba_0", "Proba_5",
				"LogProba_0", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_5 = sigmoid_kernel( lProblem_data_dual_0_5, lProblem_data_sv_0_5, inputs, 0.00043172746232553904,0.0 ) + 0.03339812159538269;
	
			std::any lLogistic_0_5 = logistic(2.503912046604021 * lDotProduct_0_5 + 0.019662578521812565);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_5,
				lDotProduct_0_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_5,
				1.0 - lLogistic_0_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_5
	

	namespace pb_0_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_6 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_6 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_0_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs, 0.00043172746232553904,0.0 ) + 0.1386362910270691;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_6",
				"Proba_0", "Proba_6",
				"LogProba_0", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_6 = sigmoid_kernel( lProblem_data_dual_0_6, lProblem_data_sv_0_6, inputs, 0.00043172746232553904,0.0 ) + 0.1386362910270691;
	
			std::any lLogistic_0_6 = logistic(2.614643853248013 * lDotProduct_0_6 + 0.08140606575537038);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_6,
				lDotProduct_0_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_6,
				1.0 - lLogistic_0_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_6
	

	namespace pb_0_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_7 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_7 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_0_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs, 0.00043172746232553904,0.0 ) + -0.0026372671127319336;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_7",
				"Proba_0", "Proba_7",
				"LogProba_0", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_7 = sigmoid_kernel( lProblem_data_dual_0_7, lProblem_data_sv_0_7, inputs, 0.00043172746232553904,0.0 ) + -0.0026372671127319336;
	
			std::any lLogistic_0_7 = logistic(2.2067295799325635 * lDotProduct_0_7 + 0.02280106480936014);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_7,
				lDotProduct_0_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_7,
				1.0 - lLogistic_0_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_7
	

	namespace pb_0_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_8 = { 
		0.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_8 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_0_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs, 0.00043172746232553904,0.0 ) + 0.6458569467067719;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_8",
				"Proba_0", "Proba_8",
				"LogProba_0", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_8 = sigmoid_kernel( lProblem_data_dual_0_8, lProblem_data_sv_0_8, inputs, 0.00043172746232553904,0.0 ) + 0.6458569467067719;
	
			std::any lLogistic_0_8 = logistic(1.2128750464614355 * lDotProduct_0_8 + -0.8055576144275172);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_8,
				lDotProduct_0_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_8,
				1.0 - lLogistic_0_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_8
	

	namespace pb_0_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 0, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_0_9 = { 
		1.0 ,0.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_0_9 = { 
		 { 0.0, 0.0, 2.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 14.0, 15.0, 8.0, 0.0, 0.0, 0.0, 7.0, 15.0, 3.0, 3.0, 15.0, 0.0, 0.0, 0.0, 6.0, 16.0, 1.0, 0.0, 9.0, 8.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 12.0, 3.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 1.0, 9.0, 12.0, 5.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 9.0, 5.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 16.0, 8.0, 4.0, 6.0, 4.0, 0.0, 0.0, 4.0, 15.0, 1.0, 0.0, 6.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 0.0, 7.0, 5.0, 0.0, 0.0, 3.0, 11.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 1.0, 13.0, 8.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 11.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 14.0, 10.0, 1.0, 0.0, 0.0, 0.0, 2.0, 14.0, 12.0, 15.0, 14.0, 1.0, 0.0, 0.0, 6.0, 13.0, 0.0, 3.0, 14.0, 8.0, 0.0, 0.0, 5.0, 12.0, 0.0, 0.0, 11.0, 8.0, 0.0, 0.0, 4.0, 14.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 1.0, 14.0, 4.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 8.0, 12.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 10.0, 3.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 10.0, 10.0, 13.0, 0.0, 0.0, 0.0, 5.0, 15.0, 0.0, 2.0, 15.0, 6.0, 0.0, 0.0, 4.0, 13.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 12.0, 7.0, 0.0, 0.0, 3.0, 14.0, 1.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 12.0, 9.0, 6.0, 15.0, 2.0, 0.0, 0.0, 0.0, 3.0, 14.0, 14.0, 6.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 10.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 13.0, 5.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 1.0, 13.0, 0.0, 0.0, 0.0, 0.0, 16.0, 7.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 3.0, 15.0, 0.0, 0.0, 0.0, 0.0, 14.0, 7.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 13.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_0_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs, 0.00043172746232553904,0.0 ) + 0.4540398120880127;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_0", "Score_9",
				"Proba_0", "Proba_9",
				"LogProba_0", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_0_9 = sigmoid_kernel( lProblem_data_dual_0_9, lProblem_data_sv_0_9, inputs, 0.00043172746232553904,0.0 ) + 0.4540398120880127;
	
			std::any lLogistic_0_9 = logistic(0.8361885437233492 * lDotProduct_0_9 + -0.5895406938491742);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_0_9,
				lDotProduct_0_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_0_9,
				1.0 - lLogistic_0_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_0_9
	

	namespace pb_1_2 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 2 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_2 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-0.6375117641345618 ,-1.0 ,-1.0 ,-0.0 ,-0.36248823586543816 ,-1.0 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_2 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		};
		
	
		double get_problem_1_2_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.00043172746232553904,0.0 ) + -0.5721785573284861;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_2",
				"Proba_1", "Proba_2",
				"LogProba_1", "LogProba_2" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_2 = sigmoid_kernel( lProblem_data_dual_1_2, lProblem_data_sv_1_2, inputs, 0.00043172746232553904,0.0 ) + -0.5721785573284861;
	
			std::any lLogistic_1_2 = logistic(-9.571668950221678 * lDotProduct_1_2 + -7.187766883582006);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_2,
				lDotProduct_1_2 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_2,
				1.0 - lLogistic_1_2 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_2
	

	namespace pb_1_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_3 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_3 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_1_3_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs, 0.00043172746232553904,0.0 ) + 0.1460368037223816;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_3",
				"Proba_1", "Proba_3",
				"LogProba_1", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_3 = sigmoid_kernel( lProblem_data_dual_1_3, lProblem_data_sv_1_3, inputs, 0.00043172746232553904,0.0 ) + 0.1460368037223816;
	
			std::any lLogistic_1_3 = logistic(2.2684135130235794 * lDotProduct_1_3 + 0.28496794155589955);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_3,
				lDotProduct_1_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_3,
				1.0 - lLogistic_1_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_3
	

	namespace pb_1_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_4 = { 
		0.0 ,1.0 ,0.08469024995740922 ,1.0 ,0.9153097500425907 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_4 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_4_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs, 0.00043172746232553904,0.0 ) + 0.9515551431851499;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_4",
				"Proba_1", "Proba_4",
				"LogProba_1", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_4 = sigmoid_kernel( lProblem_data_dual_1_4, lProblem_data_sv_1_4, inputs, 0.00043172746232553904,0.0 ) + 0.9515551431851499;
	
			std::any lLogistic_1_4 = logistic(1.4676062234263816 * lDotProduct_1_4 + -1.54945766165594);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_4,
				lDotProduct_1_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_4,
				1.0 - lLogistic_1_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_4
	

	namespace pb_1_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_5 = { 
		0.9052743905193458 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-0.9052743905193458 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_5 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_5_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs, 0.00043172746232553904,0.0 ) + -0.05367673996826522;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_5",
				"Proba_1", "Proba_5",
				"LogProba_1", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_5 = sigmoid_kernel( lProblem_data_dual_1_5, lProblem_data_sv_1_5, inputs, 0.00043172746232553904,0.0 ) + -0.05367673996826522;
	
			std::any lLogistic_1_5 = logistic(2.3445525640661957 * lDotProduct_1_5 + 0.03238806361245253);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_5,
				lDotProduct_1_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_5,
				1.0 - lLogistic_1_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_5
	

	namespace pb_1_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_6 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_6 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_1_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs, 0.00043172746232553904,0.0 ) + 0.17088797688484192;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_6",
				"Proba_1", "Proba_6",
				"LogProba_1", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_6 = sigmoid_kernel( lProblem_data_dual_1_6, lProblem_data_sv_1_6, inputs, 0.00043172746232553904,0.0 ) + 0.17088797688484192;
	
			std::any lLogistic_1_6 = logistic(2.065053786359155 * lDotProduct_1_6 + 0.19270139332331646);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_6,
				lDotProduct_1_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_6,
				1.0 - lLogistic_1_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_6
	

	namespace pb_1_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_7 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_7 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_1_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs, 0.00043172746232553904,0.0 ) + -0.039334267377853394;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_7",
				"Proba_1", "Proba_7",
				"LogProba_1", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_7 = sigmoid_kernel( lProblem_data_dual_1_7, lProblem_data_sv_1_7, inputs, 0.00043172746232553904,0.0 ) + -0.039334267377853394;
	
			std::any lLogistic_1_7 = logistic(2.224491326755641 * lDotProduct_1_7 + 0.12637593477084713);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_7,
				lDotProduct_1_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_7,
				1.0 - lLogistic_1_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_7
	

	namespace pb_1_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_8 = { 
		0.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_8 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_1_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs, 0.00043172746232553904,0.0 ) + 0.8748455345630646;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_8",
				"Proba_1", "Proba_8",
				"LogProba_1", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_8 = sigmoid_kernel( lProblem_data_dual_1_8, lProblem_data_sv_1_8, inputs, 0.00043172746232553904,0.0 ) + 0.8748455345630646;
	
			std::any lLogistic_1_8 = logistic(1.2054245825607817 * lDotProduct_1_8 + -0.8788536224046138);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_8,
				lDotProduct_1_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_8,
				1.0 - lLogistic_1_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_8
	

	namespace pb_1_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 1, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_1_9 = { 
		1.0 ,0.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_1_9 = { 
		 { 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 1.0, 12.0, 16.0, 11.0, 0.0, 0.0, 0.0, 2.0, 12.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 6.0, 11.0, 5.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 12.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 16.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 12.0, 12.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 14.0, 1.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 16.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 7.0, 0.0, 0.0, 1.0, 5.0, 11.0, 16.0, 16.0, 8.0, 0.0, 0.0, 11.0, 16.0, 16.0, 13.0, 16.0, 8.0, 0.0, 0.0, 3.0, 7.0, 1.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_1_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs, 0.00043172746232553904,0.0 ) + 0.4390753209590912;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_1", "Score_9",
				"Proba_1", "Proba_9",
				"LogProba_1", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_1_9 = sigmoid_kernel( lProblem_data_dual_1_9, lProblem_data_sv_1_9, inputs, 0.00043172746232553904,0.0 ) + 0.4390753209590912;
	
			std::any lLogistic_1_9 = logistic(1.0680094701656384 * lDotProduct_1_9 + -0.7734381849999131);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_1_9,
				lDotProduct_1_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_1_9,
				1.0 - lLogistic_1_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_1_9
	

	namespace pb_2_3 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 3 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_3 = { 
		1.0 ,0.2089212759977459 ,1.0 ,0.0 ,1.0 ,0.7910787240022541 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_3 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		};
		
	
		double get_problem_2_3_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs, 0.00043172746232553904,0.0 ) + 0.9543066441326722;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_3",
				"Proba_2", "Proba_3",
				"LogProba_2", "LogProba_3" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_3 = sigmoid_kernel( lProblem_data_dual_2_3, lProblem_data_sv_2_3, inputs, 0.00043172746232553904,0.0 ) + 0.9543066441326722;
	
			std::any lLogistic_2_3 = logistic(-6.254726280678305 * lDotProduct_2_3 + 4.999310681134069);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_3,
				lDotProduct_2_3 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_3,
				1.0 - lLogistic_2_3 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_3
	

	namespace pb_2_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_4 = { 
		0.22310000208374858 ,1.0 ,1.0 ,0.0 ,0.0 ,0.0 ,0.7768999979162514 ,0.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_4 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_4_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs, 0.00043172746232553904,0.0 ) + 0.6932626715006942;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_4",
				"Proba_2", "Proba_4",
				"LogProba_2", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_4 = sigmoid_kernel( lProblem_data_dual_2_4, lProblem_data_sv_2_4, inputs, 0.00043172746232553904,0.0 ) + 0.6932626715006942;
	
			std::any lLogistic_2_4 = logistic(-9.153900156545546 * lDotProduct_2_4 + 6.792844836374005);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_4,
				lDotProduct_2_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_4,
				1.0 - lLogistic_2_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_4
	

	namespace pb_2_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_5 = { 
		1.0 ,1.0 ,0.0 ,0.6304042637971433 ,0.0 ,0.3695957362028567 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_5 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_5_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs, 0.00043172746232553904,0.0 ) + 0.42839085818111877;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_5",
				"Proba_2", "Proba_5",
				"LogProba_2", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_5 = sigmoid_kernel( lProblem_data_dual_2_5, lProblem_data_sv_2_5, inputs, 0.00043172746232553904,0.0 ) + 0.42839085818111877;
	
			std::any lLogistic_2_5 = logistic(-8.992596161553676 * lDotProduct_2_5 + 6.3894136519564695);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_5,
				lDotProduct_2_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_5,
				1.0 - lLogistic_2_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_5
	

	namespace pb_2_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_6 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,0.0 ,0.0 ,1.0 ,0.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_6 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_2_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs, 0.00043172746232553904,0.0 ) + 0.6864168047904968;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_6",
				"Proba_2", "Proba_6",
				"LogProba_2", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_6 = sigmoid_kernel( lProblem_data_dual_2_6, lProblem_data_sv_2_6, inputs, 0.00043172746232553904,0.0 ) + 0.6864168047904968;
	
			std::any lLogistic_2_6 = logistic(-5.285596261853888 * lDotProduct_2_6 + 3.4889503938664297);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_6,
				lDotProduct_2_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_6,
				1.0 - lLogistic_2_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_6
	

	namespace pb_2_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_7 = { 
		1.0 ,0.0 ,0.934024350410084 ,1.0 ,0.065975649589916 ,1.0 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_7 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_2_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs, 0.00043172746232553904,0.0 ) + 0.5291447824717931;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_7",
				"Proba_2", "Proba_7",
				"LogProba_2", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_7 = sigmoid_kernel( lProblem_data_dual_2_7, lProblem_data_sv_2_7, inputs, 0.00043172746232553904,0.0 ) + 0.5291447824717931;
	
			std::any lLogistic_2_7 = logistic(-6.89242059388995 * lDotProduct_2_7 + 4.702265250784718);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_7,
				lDotProduct_2_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_7,
				1.0 - lLogistic_2_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_7
	

	namespace pb_2_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_8 = { 
		1.0 ,0.8829825715356456 ,1.0 ,1.0 ,0.0 ,0.0 ,0.11701742846435437 ,0.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_8 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_2_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs, 0.00043172746232553904,0.0 ) + 0.7358959614955982;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_8",
				"Proba_2", "Proba_8",
				"LogProba_2", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_8 = sigmoid_kernel( lProblem_data_dual_2_8, lProblem_data_sv_2_8, inputs, 0.00043172746232553904,0.0 ) + 0.7358959614955982;
	
			std::any lLogistic_2_8 = logistic(-12.723336194901204 * lDotProduct_2_8 + 10.738973188106403);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_8,
				lDotProduct_2_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_8,
				1.0 - lLogistic_2_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_8
	

	namespace pb_2_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 2, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_2_9 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,0.0 ,0.0 ,0.0 ,0.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_2_9 = { 
		 { 0.0, 0.0, 7.0, 15.0, 15.0, 5.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 16.0, 12.0, 0.0, 0.0, 0.0, 1.0, 7.0, 0.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 5.0, 1.0, 0.0, 0.0, 0.0, 12.0, 12.0, 13.0, 15.0, 3.0, 0.0, 0.0, 0.0, 10.0, 16.0, 13.0, 3.0, 0.0, 0.0 },
		 { 0.0, 1.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 9.0, 8.0, 10.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 15.0, 12.0, 12.0, 11.0, 0.0, 0.0, 1.0, 11.0, 13.0, 16.0, 16.0, 12.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 15.0, 1.0, 0.0, 0.0, 0.0, 3.0, 10.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 12.0, 4.0, 0.0, 0.0, 0.0, 1.0, 13.0, 15.0, 14.0, 16.0, 7.0 },
		 { 0.0, 0.0, 8.0, 15.0, 15.0, 2.0, 0.0, 0.0, 0.0, 2.0, 16.0, 13.0, 12.0, 10.0, 0.0, 0.0, 0.0, 3.0, 15.0, 1.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 13.0, 1.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 16.0, 13.0, 7.0, 6.0, 1.0, 0.0, 0.0, 7.0, 5.0, 12.0, 16.0, 15.0, 2.0 },
		 { 0.0, 0.0, 8.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 8.0, 13.0, 8.0, 12.0, 6.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 8.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 13.0, 0.0, 4.0, 4.0, 0.0, 0.0, 0.0, 10.0, 12.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 9.0, 16.0, 9.0, 7.0, 1.0, 0.0 },
		 { 0.0, 3.0, 15.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 12.0, 15.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 15.0, 4.0, 1.0, 0.0, 0.0, 1.0, 10.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 4.0, 16.0, 14.0, 12.0, 8.0, 3.0, 0.0 },
		 { 0.0, 1.0, 10.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 8.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 13.0, 2.0, 0.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 16.0, 13.0, 0.0, 0.0, 0.0, 9.0, 13.0, 11.0, 10.0, 9.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 16.0, 10.0, 0.0, 0.0, 2.0, 15.0, 12.0, 7.0, 10.0, 16.0, 0.0, 0.0, 0.0, 3.0, 1.0, 0.0, 12.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 10.0, 6.0, 8.0, 8.0, 1.0, 0.0, 2.0, 15.0, 16.0, 16.0, 12.0, 12.0, 1.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_2_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs, 0.00043172746232553904,0.0 ) + 0.4716196358203888;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_2", "Score_9",
				"Proba_2", "Proba_9",
				"LogProba_2", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_2_9 = sigmoid_kernel( lProblem_data_dual_2_9, lProblem_data_sv_2_9, inputs, 0.00043172746232553904,0.0 ) + 0.4716196358203888;
	
			std::any lLogistic_2_9 = logistic(-8.683701055920485 * lDotProduct_2_9 + 6.512153765903565);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_2_9,
				lDotProduct_2_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_2_9,
				1.0 - lLogistic_2_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_2_9
	

	namespace pb_3_4 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 4 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_4 = { 
		0.0 ,1.0 ,1.0 ,1.0 ,0.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_4 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_4_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs, 0.00043172746232553904,0.0 ) + 0.5044737756252289;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_4",
				"Proba_3", "Proba_4",
				"LogProba_3", "LogProba_4" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_4 = sigmoid_kernel( lProblem_data_dual_3_4, lProblem_data_sv_3_4, inputs, 0.00043172746232553904,0.0 ) + 0.5044737756252289;
	
			std::any lLogistic_3_4 = logistic(-0.9156342523320229 * lDotProduct_3_4 + 0.1450452581020315);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_4,
				lDotProduct_3_4 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_4,
				1.0 - lLogistic_3_4 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_4
	

	namespace pb_3_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_5 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_5 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_5_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs, 0.00043172746232553904,0.0 ) + -0.22540989518165588;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_5",
				"Proba_3", "Proba_5",
				"LogProba_3", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_5 = sigmoid_kernel( lProblem_data_dual_3_5, lProblem_data_sv_3_5, inputs, 0.00043172746232553904,0.0 ) + -0.22540989518165588;
	
			std::any lLogistic_3_5 = logistic(1.9424910620210827 * lDotProduct_3_5 + -0.029657702336701307);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_5,
				lDotProduct_3_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_5,
				1.0 - lLogistic_3_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_5
	

	namespace pb_3_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_6 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_6 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_3_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs, 0.00043172746232553904,0.0 ) + -0.06869134306907654;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_6",
				"Proba_3", "Proba_6",
				"LogProba_3", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_6 = sigmoid_kernel( lProblem_data_dual_3_6, lProblem_data_sv_3_6, inputs, 0.00043172746232553904,0.0 ) + -0.06869134306907654;
	
			std::any lLogistic_3_6 = logistic(2.135575703508669 * lDotProduct_3_6 + -0.03606606304899815);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_6,
				lDotProduct_3_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_6,
				1.0 - lLogistic_3_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_6
	

	namespace pb_3_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_7 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_7 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_3_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs, 0.00043172746232553904,0.0 ) + -0.20322787761688232;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_7",
				"Proba_3", "Proba_7",
				"LogProba_3", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_7 = sigmoid_kernel( lProblem_data_dual_3_7, lProblem_data_sv_3_7, inputs, 0.00043172746232553904,0.0 ) + -0.20322787761688232;
	
			std::any lLogistic_3_7 = logistic(2.2389664290784173 * lDotProduct_3_7 + 0.016529563236630587);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_7,
				lDotProduct_3_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_7,
				1.0 - lLogistic_3_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_7
	

	namespace pb_3_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_8 = { 
		1.0 ,1.0 ,0.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_8 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_3_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs, 0.00043172746232553904,0.0 ) + 0.6535508930683136;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_8",
				"Proba_3", "Proba_8",
				"LogProba_3", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_8 = sigmoid_kernel( lProblem_data_dual_3_8, lProblem_data_sv_3_8, inputs, 0.00043172746232553904,0.0 ) + 0.6535508930683136;
	
			std::any lLogistic_3_8 = logistic(1.3335249710018091 * lDotProduct_3_8 + -0.9435197173111468);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_8,
				lDotProduct_3_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_8,
				1.0 - lLogistic_3_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_8
	

	namespace pb_3_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 3, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_3_9 = { 
		1.0 ,1.0 ,1.0 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_3_9 = { 
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 15.0, 4.0, 0.0, 0.0, 8.0, 16.0, 9.0, 7.0, 14.0, 11.0, 0.0, 0.0, 5.0, 5.0, 1.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 14.0, 8.0, 0.0, 0.0, 0.0, 3.0, 4.0, 6.0, 16.0, 4.0, 0.0, 0.0, 0.0, 14.0, 16.0, 16.0, 8.0, 0.0, 0.0 },
		 { 0.0, 2.0, 13.0, 16.0, 15.0, 1.0, 0.0, 0.0, 0.0, 7.0, 13.0, 10.0, 16.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 10.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 9.0, 0.0, 0.0, 2.0, 12.0, 6.0, 6.0, 16.0, 6.0, 0.0, 0.0, 1.0, 15.0, 16.0, 16.0, 9.0, 1.0, 0.0 },
		 { 0.0, 0.0, 14.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 6.0, 5.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 10.0, 0.0, 0.0, 0.0, 1.0, 3.0, 0.0, 4.0, 15.0, 8.0, 0.0, 0.0, 6.0, 15.0, 0.0, 0.0, 9.0, 15.0, 0.0, 0.0, 5.0, 16.0, 5.0, 6.0, 14.0, 14.0, 0.0, 0.0, 1.0, 11.0, 16.0, 16.0, 14.0, 2.0, 0.0 },
		 { 0.0, 1.0, 8.0, 13.0, 16.0, 13.0, 0.0, 0.0, 0.0, 1.0, 13.0, 12.0, 15.0, 16.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 16.0, 4.0, 0.0, 0.0, 0.0, 13.0, 16.0, 15.0, 7.0, 0.0, 0.0 },
		 { 0.0, 0.0, 9.0, 16.0, 16.0, 12.0, 0.0, 0.0, 0.0, 2.0, 16.0, 8.0, 9.0, 16.0, 0.0, 0.0, 0.0, 1.0, 8.0, 0.0, 13.0, 14.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 14.0, 0.0, 0.0, 0.0, 9.0, 6.0, 0.0, 11.0, 15.0, 0.0, 0.0, 0.0, 8.0, 16.0, 16.0, 16.0, 6.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_3_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs, 0.00043172746232553904,0.0 ) + 0.5041808485984802;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_3", "Score_9",
				"Proba_3", "Proba_9",
				"LogProba_3", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_3_9 = sigmoid_kernel( lProblem_data_dual_3_9, lProblem_data_sv_3_9, inputs, 0.00043172746232553904,0.0 ) + 0.5041808485984802;
	
			std::any lLogistic_3_9 = logistic(1.3929657059428298 * lDotProduct_3_9 + -0.8976881842776437);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_3_9,
				lDotProduct_3_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_3_9,
				1.0 - lLogistic_3_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_3_9
	

	namespace pb_4_5 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 5 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_5 = { 
		1.0 ,1.0 ,1.0 ,-1.0 ,-0.0 ,-1.0 ,-0.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_5 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_5_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs, 0.00043172746232553904,0.0 ) + -0.7339661419391632;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_5",
				"Proba_4", "Proba_5",
				"LogProba_4", "LogProba_5" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_5 = sigmoid_kernel( lProblem_data_dual_4_5, lProblem_data_sv_4_5, inputs, 0.00043172746232553904,0.0 ) + -0.7339661419391632;
	
			std::any lLogistic_4_5 = logistic(2.345854938880785 * lDotProduct_4_5 + 2.052525782129776);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_5,
				lDotProduct_4_5 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_5,
				1.0 - lLogistic_4_5 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_5
	

	namespace pb_4_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_6 = { 
		1.0 ,1.0 ,1.0 ,-1.0 ,-0.5680417068503204 ,-0.0 ,-1.0 ,-0.4319582931496796 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_6 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_4_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs, 0.00043172746232553904,0.0 ) + -0.7800444642066859;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_6",
				"Proba_4", "Proba_6",
				"LogProba_4", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_6 = sigmoid_kernel( lProblem_data_dual_4_6, lProblem_data_sv_4_6, inputs, 0.00043172746232553904,0.0 ) + -0.7800444642066859;
	
			std::any lLogistic_4_6 = logistic(1.2876188515717328 * lDotProduct_4_6 + 1.4375585759093379);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_6,
				lDotProduct_4_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_6,
				1.0 - lLogistic_4_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_6
	

	namespace pb_4_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_7 = { 
		1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-0.0 ,-1.0 ,-0.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_7 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_4_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs, 0.00043172746232553904,0.0 ) + -0.6096977293491364;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_7",
				"Proba_4", "Proba_7",
				"LogProba_4", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_7 = sigmoid_kernel( lProblem_data_dual_4_7, lProblem_data_sv_4_7, inputs, 0.00043172746232553904,0.0 ) + -0.6096977293491364;
	
			std::any lLogistic_4_7 = logistic(-0.550278077294872 * lDotProduct_4_7 + 0.06105436417052612);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_7,
				lDotProduct_4_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_7,
				1.0 - lLogistic_4_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_7
	

	namespace pb_4_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_8 = { 
		1.0 ,1.0 ,1.0 ,-0.24841221019629658 ,-0.7515877898037034 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_8 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_4_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs, 0.00043172746232553904,0.0 ) + -0.847337210958214;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_8",
				"Proba_4", "Proba_8",
				"LogProba_4", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_8 = sigmoid_kernel( lProblem_data_dual_4_8, lProblem_data_sv_4_8, inputs, 0.00043172746232553904,0.0 ) + -0.847337210958214;
	
			std::any lLogistic_4_8 = logistic(1.7630850593525538 * lDotProduct_4_8 + 0.12133985211584908);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_8,
				lDotProduct_4_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_8,
				1.0 - lLogistic_4_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_8
	

	namespace pb_4_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 4, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_4_9 = { 
		1.0 ,1.0 ,1.0 ,-0.7619467318813469 ,-1.0 ,-1.0 ,-0.2380532681186531 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_4_9 = { 
		 { 0.0, 0.0, 3.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 13.0, 4.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 5.0, 16.0, 7.0, 0.0, 0.0, 0.0, 8.0, 16.0, 8.0, 16.0, 9.0, 5.0, 0.0, 0.0, 10.0, 16.0, 14.0, 16.0, 16.0, 9.0, 0.0, 0.0, 3.0, 11.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 1.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 1.0, 0.0, 2.0, 4.0, 0.0, 0.0, 14.0, 7.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 15.0, 16.0, 16.0, 16.0, 16.0, 5.0, 0.0, 0.0, 3.0, 8.0, 8.0, 15.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 15.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 7.0, 4.0, 0.0, 0.0, 8.0, 16.0, 10.0, 6.0, 16.0, 9.0, 0.0, 0.0, 6.0, 16.0, 16.0, 16.0, 16.0, 4.0, 0.0, 0.0, 0.0, 5.0, 11.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_4_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs, 0.00043172746232553904,0.0 ) + -0.5702840984415508;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_4", "Score_9",
				"Proba_4", "Proba_9",
				"LogProba_4", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_4_9 = sigmoid_kernel( lProblem_data_dual_4_9, lProblem_data_sv_4_9, inputs, 0.00043172746232553904,0.0 ) + -0.5702840984415508;
	
			std::any lLogistic_4_9 = logistic(2.4498411950482426 * lDotProduct_4_9 + 0.17940241196580567);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_4_9,
				lDotProduct_4_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_4_9,
				1.0 - lLogistic_4_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_4_9
	

	namespace pb_5_6 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 6 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_6 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_6 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		};
		
	
		double get_problem_5_6_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs, 0.00043172746232553904,0.0 ) + 0.17641696333885193;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_6",
				"Proba_5", "Proba_6",
				"LogProba_5", "LogProba_6" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_6 = sigmoid_kernel( lProblem_data_dual_5_6, lProblem_data_sv_5_6, inputs, 0.00043172746232553904,0.0 ) + 0.17641696333885193;
	
			std::any lLogistic_5_6 = logistic(2.3226312897187453 * lDotProduct_5_6 + 0.04522911024056918);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_6,
				lDotProduct_5_6 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_6,
				1.0 - lLogistic_5_6 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_6
	

	namespace pb_5_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_7 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_7 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_5_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs, 0.00043172746232553904,0.0 ) + 0.1397320032119751;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_7",
				"Proba_5", "Proba_7",
				"LogProba_5", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_7 = sigmoid_kernel( lProblem_data_dual_5_7, lProblem_data_sv_5_7, inputs, 0.00043172746232553904,0.0 ) + 0.1397320032119751;
	
			std::any lLogistic_5_7 = logistic(2.410078035251647 * lDotProduct_5_7 + 0.016059566693658437);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_7,
				lDotProduct_5_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_7,
				1.0 - lLogistic_5_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_7
	

	namespace pb_5_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_8 = { 
		1.0 ,1.0 ,1.0 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_8 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_5_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs, 0.00043172746232553904,0.0 ) + 0.6813514232635498;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_8",
				"Proba_5", "Proba_8",
				"LogProba_5", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_8 = sigmoid_kernel( lProblem_data_dual_5_8, lProblem_data_sv_5_8, inputs, 0.00043172746232553904,0.0 ) + 0.6813514232635498;
	
			std::any lLogistic_5_8 = logistic(1.5385931499313759 * lDotProduct_5_8 + -0.8963231886265437);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_8,
				lDotProduct_5_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_8,
				1.0 - lLogistic_5_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_8
	

	namespace pb_5_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 5, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_5_9 = { 
		1.0 ,1.0 ,1.0 ,0.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_5_9 = { 
		 { 0.0, 0.0, 8.0, 9.0, 8.0, 12.0, 8.0, 0.0, 0.0, 0.0, 12.0, 14.0, 10.0, 8.0, 5.0, 0.0, 0.0, 1.0, 14.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 12.0, 12.0, 8.0, 0.0, 0.0, 0.0, 1.0, 4.0, 4.0, 7.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 7.0, 0.0, 0.0, 1.0, 12.0, 4.0, 9.0, 15.0, 1.0, 0.0, 0.0, 0.0, 9.0, 16.0, 14.0, 3.0, 0.0, 0.0 },
		 { 0.0, 4.0, 10.0, 15.0, 16.0, 16.0, 14.0, 0.0, 0.0, 11.0, 16.0, 14.0, 8.0, 5.0, 2.0, 0.0, 0.0, 6.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 14.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 15.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 10.0, 12.0, 16.0, 16.0, 8.0, 0.0, 0.0, 4.0, 16.0, 16.0, 11.0, 5.0, 4.0, 0.0, 0.0, 10.0, 12.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 4.0, 8.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 11.0, 0.0, 0.0, 0.0 },
		 { 0.0, 7.0, 16.0, 16.0, 16.0, 16.0, 11.0, 0.0, 0.0, 8.0, 16.0, 9.0, 6.0, 0.0, 1.0, 0.0, 0.0, 3.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 11.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 0.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 9.0, 9.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 13.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 4.0, 13.0, 9.0, 8.0, 3.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 12.0, 12.0, 6.0, 0.0, 0.0, 8.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 11.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 16.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 12.0, 14.0, 0.0, 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 3.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_5_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs, 0.00043172746232553904,0.0 ) + 0.17514550685882568;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_5", "Score_9",
				"Proba_5", "Proba_9",
				"LogProba_5", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_5_9 = sigmoid_kernel( lProblem_data_dual_5_9, lProblem_data_sv_5_9, inputs, 0.00043172746232553904,0.0 ) + 0.17514550685882568;
	
			std::any lLogistic_5_9 = logistic(-0.2704381418461648 * lDotProduct_5_9 + -0.1117657750298008);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_5_9,
				lDotProduct_5_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_5_9,
				1.0 - lLogistic_5_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_5_9
	

	namespace pb_6_7 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 7 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_7 = { 
		1.0 ,1.0 ,0.8452659619851745 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 ,-0.8452659619851745 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_7 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		};
		
	
		double get_problem_6_7_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs, 0.00043172746232553904,0.0 ) + 0.05029181736899699;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_7",
				"Proba_6", "Proba_7",
				"LogProba_6", "LogProba_7" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_7 = sigmoid_kernel( lProblem_data_dual_6_7, lProblem_data_sv_6_7, inputs, 0.00043172746232553904,0.0 ) + 0.05029181736899699;
	
			std::any lLogistic_6_7 = logistic(-0.33557697376072654 * lDotProduct_6_7 + -0.00012346452022110092);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_7,
				lDotProduct_6_7 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_7,
				1.0 - lLogistic_6_7 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_7
	

	namespace pb_6_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_8 = { 
		1.0 ,1.0 ,0.0444899945897333 ,1.0 ,0.9555100054102666 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_8 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_6_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs, 0.00043172746232553904,0.0 ) + 0.6338241927199018;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_8",
				"Proba_6", "Proba_8",
				"LogProba_6", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_8 = sigmoid_kernel( lProblem_data_dual_6_8, lProblem_data_sv_6_8, inputs, 0.00043172746232553904,0.0 ) + 0.6338241927199018;
	
			std::any lLogistic_6_8 = logistic(1.370065322617653 * lDotProduct_6_8 + -0.9235954704355602);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_8,
				lDotProduct_6_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_8,
				1.0 - lLogistic_6_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_8
	

	namespace pb_6_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 6, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_6_9 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,0.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_6_9 = { 
		 { 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 15.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0, 15.0, 8.0, 4.0, 0.0, 0.0, 0.0, 0.0, 15.0, 16.0, 16.0, 15.0, 3.0, 0.0, 0.0, 1.0, 16.0, 13.0, 4.0, 11.0, 11.0, 0.0, 0.0, 0.0, 11.0, 14.0, 9.0, 15.0, 11.0, 0.0, 0.0, 0.0, 1.0, 14.0, 16.0, 15.0, 6.0, 0.0 },
		 { 0.0, 0.0, 0.0, 14.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 6.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 16.0, 16.0, 10.0, 1.0, 0.0, 0.0, 2.0, 16.0, 12.0, 4.0, 11.0, 12.0, 0.0, 0.0, 0.0, 10.0, 14.0, 6.0, 14.0, 15.0, 0.0, 0.0, 0.0, 1.0, 13.0, 16.0, 16.0, 10.0, 0.0 },
		 { 0.0, 0.0, 4.0, 14.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 8.0, 12.0, 9.0, 0.0, 0.0, 0.0, 16.0, 13.0, 4.0, 12.0, 12.0, 0.0, 0.0, 0.0, 6.0, 15.0, 16.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 2.0, 14.0, 15.0, 3.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 15.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 16.0, 16.0, 9.0, 0.0, 0.0, 0.0, 0.0, 13.0, 16.0, 10.0, 16.0, 7.0, 0.0, 0.0, 0.0, 3.0, 15.0, 16.0, 16.0, 4.0, 0.0 },
		 { 0.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 13.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 13.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 16.0, 14.0, 13.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 6.0, 15.0, 12.0, 1.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_6_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs, 0.00043172746232553904,0.0 ) + 0.20603707432746887;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_6", "Score_9",
				"Proba_6", "Proba_9",
				"LogProba_6", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_6_9 = sigmoid_kernel( lProblem_data_dual_6_9, lProblem_data_sv_6_9, inputs, 0.00043172746232553904,0.0 ) + 0.20603707432746887;
	
			std::any lLogistic_6_9 = logistic(0.8853051146398844 * lDotProduct_6_9 + -0.5569496274929988);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_6_9,
				lDotProduct_6_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_6_9,
				1.0 - lLogistic_6_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_6_9
	

	namespace pb_7_8 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 8 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_8 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,0.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_8 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		};
		
	
		double get_problem_7_8_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs, 0.00043172746232553904,0.0 ) + 0.6103228032588959;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_8",
				"Proba_7", "Proba_8",
				"LogProba_7", "LogProba_8" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_8 = sigmoid_kernel( lProblem_data_dual_7_8, lProblem_data_sv_7_8, inputs, 0.00043172746232553904,0.0 ) + 0.6103228032588959;
	
			std::any lLogistic_7_8 = logistic(1.3734810707561833 * lDotProduct_7_8 + -0.8462341180576609);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_8,
				lDotProduct_7_8 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_8,
				1.0 - lLogistic_7_8 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_8
	

	namespace pb_7_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 7, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_7_9 = { 
		1.0 ,0.2524084451035982 ,1.0 ,1.0 ,0.7475915548964018 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_7_9 = { 
		 { 0.0, 0.0, 7.0, 14.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 16.0, 12.0, 15.0, 12.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 5.0, 12.0, 16.0, 15.0, 10.0, 0.0, 0.0, 8.0, 16.0, 16.0, 13.0, 6.0, 0.0, 0.0, 0.0, 3.0, 9.0, 16.0, 6.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10.0, 12.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 5.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 5.0, 15.0, 16.0, 14.0, 1.0, 0.0, 0.0, 0.0, 11.0, 13.0, 9.0, 16.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 11.0, 0.0, 0.0, 0.0, 0.0, 7.0, 13.0, 15.0, 12.0, 1.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 12.0, 4.0, 0.0, 0.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 11.0, 16.0, 12.0, 12.0, 16.0, 7.0, 0.0, 3.0, 16.0, 9.0, 8.0, 16.0, 10.0, 0.0, 0.0, 1.0, 10.0, 0.0, 6.0, 14.0, 2.0, 0.0, 0.0, 0.0, 1.0, 8.0, 15.0, 15.0, 11.0, 0.0, 0.0, 0.0, 12.0, 16.0, 15.0, 7.0, 2.0, 0.0, 0.0, 0.0, 4.0, 13.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 4.0, 13.0, 16.0, 16.0, 7.0, 0.0, 0.0, 0.0, 15.0, 10.0, 7.0, 16.0, 1.0, 0.0, 0.0, 7.0, 12.0, 0.0, 12.0, 7.0, 0.0, 0.0, 0.0, 9.0, 5.0, 3.0, 16.0, 2.0, 0.0, 0.0, 0.0, 2.0, 11.0, 16.0, 16.0, 12.0, 7.0, 0.0, 0.0, 5.0, 10.0, 16.0, 12.0, 8.0, 3.0, 0.0, 0.0, 0.0, 3.0, 15.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 14.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 6.0, 16.0, 16.0, 6.0, 0.0, 0.0, 0.0, 5.0, 13.0, 5.0, 7.0, 13.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 5.0, 11.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 0.0, 5.0, 16.0, 8.0, 2.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_7_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs, 0.00043172746232553904,0.0 ) + 0.29545597187976963;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_7", "Score_9",
				"Proba_7", "Proba_9",
				"LogProba_7", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_7_9 = sigmoid_kernel( lProblem_data_dual_7_9, lProblem_data_sv_7_9, inputs, 0.00043172746232553904,0.0 ) + 0.29545597187976963;
	
			std::any lLogistic_7_9 = logistic(0.2355592909669998 * lDotProduct_7_9 + -0.2982085175704079);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_7_9,
				lDotProduct_7_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_7_9,
				1.0 - lLogistic_7_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_7_9
	

	namespace pb_8_9 {
	
		std::vector<std::any> get_classes(){
			std::vector<std::any> lClasses = { 8, 9 };
	
			return lClasses;
		}
	
		std::vector<std::any> lProblem_data_dual_8_9 = { 
		1.0 ,1.0 ,1.0 ,1.0 ,-1.0 ,-1.0 ,-1.0 ,-1.0 , };
		
	
		std::vector<std::vector<std::any> > lProblem_data_sv_8_9 = { 
		 { 0.0, 1.0, 14.0, 16.0, 16.0, 11.0, 2.0, 0.0, 0.0, 0.0, 14.0, 9.0, 2.0, 10.0, 11.0, 0.0, 0.0, 0.0, 5.0, 16.0, 5.0, 14.0, 5.0, 0.0, 0.0, 0.0, 0.0, 12.0, 16.0, 16.0, 5.0, 0.0, 0.0, 0.0, 7.0, 14.0, 14.0, 8.0, 0.0, 0.0, 0.0, 1.0, 14.0, 3.0, 6.0, 11.0, 0.0, 0.0, 0.0, 4.0, 8.0, 0.0, 8.0, 11.0, 0.0, 0.0, 0.0, 2.0, 13.0, 12.0, 15.0, 2.0, 0.0, 0.0 },
		 { 0.0, 0.0, 0.0, 4.0, 14.0, 14.0, 1.0, 0.0, 0.0, 0.0, 3.0, 14.0, 12.0, 10.0, 4.0, 0.0, 0.0, 3.0, 13.0, 4.0, 0.0, 8.0, 6.0, 0.0, 0.0, 3.0, 15.0, 9.0, 2.0, 15.0, 1.0, 0.0, 0.0, 0.0, 2.0, 10.0, 16.0, 13.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 12.0, 9.0, 3.0, 0.0, 0.0, 0.0, 0.0, 2.0, 16.0, 14.0, 0.0, 0.0 },
		 { 0.0, 0.0, 1.0, 13.0, 16.0, 14.0, 4.0, 0.0, 0.0, 2.0, 11.0, 8.0, 4.0, 11.0, 7.0, 0.0, 0.0, 6.0, 16.0, 3.0, 3.0, 13.0, 2.0, 0.0, 0.0, 0.0, 9.0, 14.0, 14.0, 4.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 12.0, 10.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 11.0, 10.0, 15.0, 4.0, 0.0, 0.0, 0.0, 0.0, 1.0, 14.0, 15.0, 1.0, 0.0, 0.0 },
		 { 0.0, 0.0, 3.0, 13.0, 8.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 16.0, 14.0, 0.0, 0.0, 0.0, 0.0, 11.0, 11.0, 9.0, 10.0, 0.0, 0.0, 0.0, 0.0, 8.0, 14.0, 15.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 16.0, 15.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 16.0, 3.0, 13.0, 9.0, 0.0, 0.0, 0.0, 5.0, 15.0, 4.0, 13.0, 11.0, 0.0, 0.0, 0.0, 1.0, 15.0, 15.0, 8.0, 2.0, 0.0 },
		 { 0.0, 0.0, 3.0, 4.0, 10.0, 0.0, 0.0, 0.0, 0.0, 3.0, 15.0, 8.0, 14.0, 3.0, 0.0, 0.0, 0.0, 8.0, 7.0, 0.0, 10.0, 6.0, 0.0, 0.0, 0.0, 3.0, 11.0, 8.0, 15.0, 11.0, 0.0, 0.0, 0.0, 0.0, 1.0, 7.0, 3.0, 13.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 9.0, 0.0, 0.0, 0.0, 9.0, 6.0, 1.0, 0.0, 16.0, 0.0, 0.0, 0.0, 0.0, 3.0, 11.0, 16.0, 16.0, 3.0 },
		 { 0.0, 0.0, 0.0, 1.0, 7.0, 14.0, 14.0, 0.0, 0.0, 0.0, 3.0, 15.0, 7.0, 1.0, 14.0, 0.0, 0.0, 2.0, 16.0, 10.0, 5.0, 14.0, 8.0, 0.0, 0.0, 4.0, 15.0, 16.0, 12.0, 16.0, 5.0, 0.0, 0.0, 0.0, 5.0, 3.0, 1.0, 15.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.0, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.0, 12.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 10.0, 7.0, 0.0, 0.0, 0.0, 5.0, 16.0, 14.0, 16.0, 14.0, 0.0, 0.0, 0.0, 7.0, 11.0, 0.0, 9.0, 14.0, 1.0, 0.0, 0.0, 4.0, 14.0, 7.0, 11.0, 16.0, 5.0, 0.0, 0.0, 0.0, 9.0, 15.0, 15.0, 12.0, 8.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 9.0, 0.0, 0.0, 0.0, 14.0, 11.0, 10.0, 15.0, 9.0, 0.0, 0.0, 0.0, 9.0, 13.0, 13.0, 9.0, 0.0, 0.0 },
		 { 0.0, 0.0, 7.0, 14.0, 9.0, 0.0, 0.0, 0.0, 0.0, 1.0, 16.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 13.0, 2.0, 3.0, 13.0, 0.0, 0.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 10.0, 7.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 14.0, 0.0, 0.0, 0.0, 4.0, 2.0, 0.0, 0.0, 14.0, 3.0, 0.0, 0.0, 5.0, 15.0, 16.0, 16.0, 12.0, 1.0 },
		};
		
	
		double get_problem_8_9_decision_function( std::vector<std::any> const & inputs) {
			return sigmoid_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs, 0.00043172746232553904,0.0 ) + -0.06264114379882812;
		}
		
	
		std::vector<std::string> get_input_names(){
			std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };
	
			return lFeatures;
		}
	
		std::vector<std::string> get_output_names(){
			std::vector<std::string> lOutputs = { 
				"Score_8", "Score_9",
				"Proba_8", "Proba_9",
				"LogProba_8", "LogProba_9" };
	
			return lOutputs;
		}
	
		tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
			auto lClasses = get_classes();
	
			std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };
	
			std::any lDotProduct_8_9 = sigmoid_kernel( lProblem_data_dual_8_9, lProblem_data_sv_8_9, inputs, 0.00043172746232553904,0.0 ) + -0.06264114379882812;
	
			std::any lLogistic_8_9 = logistic(1.831534006551167 * lDotProduct_8_9 + 0.017944928241085557);
	
	
			tTable lTable;
	
			lTable["Score"] = { 
				-lDotProduct_8_9,
				lDotProduct_8_9 
			} ;
			lTable["Proba"] = { 
				lLogistic_8_9,
				1.0 - lLogistic_8_9 
			} ;
	
			recompute_log_probas( lTable );
	
			return lTable;
		}
	
		tTable compute_model_outputs_from_table( tTable const & iTable) {
			tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);
	
			return lTable;
		}
	
	} // eof namespace pb_8_9
	

	std::vector<std::string> get_input_names(){
		std::vector<std::string> lFeatures = { "Feature_0", "Feature_1", "Feature_2", "Feature_3", "Feature_4", "Feature_5", "Feature_6", "Feature_7", "Feature_8", "Feature_9", "Feature_10", "Feature_11", "Feature_12", "Feature_13", "Feature_14", "Feature_15", "Feature_16", "Feature_17", "Feature_18", "Feature_19", "Feature_20", "Feature_21", "Feature_22", "Feature_23", "Feature_24", "Feature_25", "Feature_26", "Feature_27", "Feature_28", "Feature_29", "Feature_30", "Feature_31", "Feature_32", "Feature_33", "Feature_34", "Feature_35", "Feature_36", "Feature_37", "Feature_38", "Feature_39", "Feature_40", "Feature_41", "Feature_42", "Feature_43", "Feature_44", "Feature_45", "Feature_46", "Feature_47", "Feature_48", "Feature_49", "Feature_50", "Feature_51", "Feature_52", "Feature_53", "Feature_54", "Feature_55", "Feature_56", "Feature_57", "Feature_58", "Feature_59", "Feature_60", "Feature_61", "Feature_62", "Feature_63" };

		return lFeatures;
	}

	std::vector<std::string> get_output_names(){
		std::vector<std::string> lOutputs = { 
			"Score_0", "Score_1", "Score_2", "Score_3", "Score_4", "Score_5", "Score_6", "Score_7", "Score_8", "Score_9",
			"Proba_0", "Proba_1", "Proba_2", "Proba_3", "Proba_4", "Proba_5", "Proba_6", "Proba_7", "Proba_8", "Proba_9",
			"LogProba_0", "LogProba_1", "LogProba_2", "LogProba_3", "LogProba_4", "LogProba_5", "LogProba_6", "LogProba_7", "LogProba_8", "LogProba_9",
			"Decision", "DecisionProba" };

		return lOutputs;
	}

	tTable compute_classification_scores(std::any Feature_0, std::any Feature_1, std::any Feature_2, std::any Feature_3, std::any Feature_4, std::any Feature_5, std::any Feature_6, std::any Feature_7, std::any Feature_8, std::any Feature_9, std::any Feature_10, std::any Feature_11, std::any Feature_12, std::any Feature_13, std::any Feature_14, std::any Feature_15, std::any Feature_16, std::any Feature_17, std::any Feature_18, std::any Feature_19, std::any Feature_20, std::any Feature_21, std::any Feature_22, std::any Feature_23, std::any Feature_24, std::any Feature_25, std::any Feature_26, std::any Feature_27, std::any Feature_28, std::any Feature_29, std::any Feature_30, std::any Feature_31, std::any Feature_32, std::any Feature_33, std::any Feature_34, std::any Feature_35, std::any Feature_36, std::any Feature_37, std::any Feature_38, std::any Feature_39, std::any Feature_40, std::any Feature_41, std::any Feature_42, std::any Feature_43, std::any Feature_44, std::any Feature_45, std::any Feature_46, std::any Feature_47, std::any Feature_48, std::any Feature_49, std::any Feature_50, std::any Feature_51, std::any Feature_52, std::any Feature_53, std::any Feature_54, std::any Feature_55, std::any Feature_56, std::any Feature_57, std::any Feature_58, std::any Feature_59, std::any Feature_60, std::any Feature_61, std::any Feature_62, std::any Feature_63) {
		auto lClasses = get_classes();

		std::vector<std::any> inputs = { Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63 };

		std::map<uint, tTable> lBinaryScores = { 
			{ 0 , pb_0_1::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 1 , pb_0_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 2 , pb_0_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 3 , pb_0_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 4 , pb_0_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 5 , pb_0_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 6 , pb_0_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 7 , pb_0_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 8 , pb_0_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 9 , pb_1_2::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 10 , pb_1_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 11 , pb_1_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 12 , pb_1_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 13 , pb_1_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 14 , pb_1_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 15 , pb_1_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 16 , pb_1_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 17 , pb_2_3::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 18 , pb_2_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 19 , pb_2_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 20 , pb_2_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 21 , pb_2_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 22 , pb_2_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 23 , pb_2_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 24 , pb_3_4::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 25 , pb_3_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 26 , pb_3_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 27 , pb_3_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 28 , pb_3_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 29 , pb_3_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 30 , pb_4_5::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 31 , pb_4_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 32 , pb_4_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 33 , pb_4_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 34 , pb_4_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 35 , pb_5_6::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 36 , pb_5_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 37 , pb_5_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 38 , pb_5_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 39 , pb_6_7::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 40 , pb_6_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 41 , pb_6_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 42 , pb_7_8::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 43 , pb_7_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) },
			{ 44 , pb_8_9::compute_classification_scores(Feature_0, Feature_1, Feature_2, Feature_3, Feature_4, Feature_5, Feature_6, Feature_7, Feature_8, Feature_9, Feature_10, Feature_11, Feature_12, Feature_13, Feature_14, Feature_15, Feature_16, Feature_17, Feature_18, Feature_19, Feature_20, Feature_21, Feature_22, Feature_23, Feature_24, Feature_25, Feature_26, Feature_27, Feature_28, Feature_29, Feature_30, Feature_31, Feature_32, Feature_33, Feature_34, Feature_35, Feature_36, Feature_37, Feature_38, Feature_39, Feature_40, Feature_41, Feature_42, Feature_43, Feature_44, Feature_45, Feature_46, Feature_47, Feature_48, Feature_49, Feature_50, Feature_51, Feature_52, Feature_53, Feature_54, Feature_55, Feature_56, Feature_57, Feature_58, Feature_59, Feature_60, Feature_61, Feature_62, Feature_63) }
		};

		tTable lOVRTable = compute_svc_ovr_scores(lBinaryScores, lClasses);


		tTable lTable = lOVRTable;

		int lBestClass = get_arg_max( lTable["Score"] );
		auto lDecision = lClasses[lBestClass];
		lTable["Decision"] = { lDecision } ;
		lTable["DecisionProba"] = { lTable["Proba"][lBestClass] };

		recompute_log_probas( lTable );

		return lTable;
	}

	tTable compute_model_outputs_from_table( tTable const & iTable) {
		tTable lTable = compute_classification_scores(iTable.at("Feature_0")[0], iTable.at("Feature_1")[0], iTable.at("Feature_2")[0], iTable.at("Feature_3")[0], iTable.at("Feature_4")[0], iTable.at("Feature_5")[0], iTable.at("Feature_6")[0], iTable.at("Feature_7")[0], iTable.at("Feature_8")[0], iTable.at("Feature_9")[0], iTable.at("Feature_10")[0], iTable.at("Feature_11")[0], iTable.at("Feature_12")[0], iTable.at("Feature_13")[0], iTable.at("Feature_14")[0], iTable.at("Feature_15")[0], iTable.at("Feature_16")[0], iTable.at("Feature_17")[0], iTable.at("Feature_18")[0], iTable.at("Feature_19")[0], iTable.at("Feature_20")[0], iTable.at("Feature_21")[0], iTable.at("Feature_22")[0], iTable.at("Feature_23")[0], iTable.at("Feature_24")[0], iTable.at("Feature_25")[0], iTable.at("Feature_26")[0], iTable.at("Feature_27")[0], iTable.at("Feature_28")[0], iTable.at("Feature_29")[0], iTable.at("Feature_30")[0], iTable.at("Feature_31")[0], iTable.at("Feature_32")[0], iTable.at("Feature_33")[0], iTable.at("Feature_34")[0], iTable.at("Feature_35")[0], iTable.at("Feature_36")[0], iTable.at("Feature_37")[0], iTable.at("Feature_38")[0], iTable.at("Feature_39")[0], iTable.at("Feature_40")[0], iTable.at("Feature_41")[0], iTable.at("Feature_42")[0], iTable.at("Feature_43")[0], iTable.at("Feature_44")[0], iTable.at("Feature_45")[0], iTable.at("Feature_46")[0], iTable.at("Feature_47")[0], iTable.at("Feature_48")[0], iTable.at("Feature_49")[0], iTable.at("Feature_50")[0], iTable.at("Feature_51")[0], iTable.at("Feature_52")[0], iTable.at("Feature_53")[0], iTable.at("Feature_54")[0], iTable.at("Feature_55")[0], iTable.at("Feature_56")[0], iTable.at("Feature_57")[0], iTable.at("Feature_58")[0], iTable.at("Feature_59")[0], iTable.at("Feature_60")[0], iTable.at("Feature_61")[0], iTable.at("Feature_62")[0], iTable.at("Feature_63")[0]);

		return lTable;
	}

} // eof namespace 


int main() {
	score_csv_file("outputs/ml2cpp-demo/datasets/digits.csv");
	return 0;
}
